
PowerConverterDriver_NucleoF411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f18  08003f18  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f20  08003f20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  08003f98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08003f98  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e0c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a0c  00000000  00000000  00029eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000858  00000000  00000000  0002b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000780  00000000  00000000  0002c110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017018  00000000  00000000  0002c890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000077c9  00000000  00000000  000438a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008aa25  00000000  00000000  0004b071  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5a96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027dc  00000000  00000000  000d5b14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e48 	.word	0x08003e48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003e48 	.word	0x08003e48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fb9d 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f002 fad6 	bl	8002b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fbb5 	bl	8000d52 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 fb7d 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000098 	.word	0x20000098

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000098 	.word	0x20000098

08000664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e033      	b.n	80006e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f002 fa96 	bl	8002bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 0310 	and.w	r3, r3, #16
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d118      	bne.n	80006d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006aa:	f023 0302 	bic.w	r3, r3, #2
 80006ae:	f043 0202 	orr.w	r2, r3, #2
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f94a 	bl	8000950 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	f043 0201 	orr.w	r2, r3, #1
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	641a      	str	r2, [r3, #64]	; 0x40
 80006d2:	e001      	b.n	80006d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006d4:	2301      	movs	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000700:	2b01      	cmp	r3, #1
 8000702:	d101      	bne.n	8000708 <HAL_ADC_ConfigChannel+0x1c>
 8000704:	2302      	movs	r3, #2
 8000706:	e113      	b.n	8000930 <HAL_ADC_ConfigChannel+0x244>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2201      	movs	r2, #1
 800070c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b09      	cmp	r3, #9
 8000716:	d925      	bls.n	8000764 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	68d9      	ldr	r1, [r3, #12]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	3b1e      	subs	r3, #30
 800072e:	2207      	movs	r2, #7
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	43da      	mvns	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	400a      	ands	r2, r1
 800073c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68d9      	ldr	r1, [r3, #12]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	b29b      	uxth	r3, r3
 800074e:	4618      	mov	r0, r3
 8000750:	4603      	mov	r3, r0
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4403      	add	r3, r0
 8000756:	3b1e      	subs	r3, #30
 8000758:	409a      	lsls	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	430a      	orrs	r2, r1
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	e022      	b.n	80007aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6919      	ldr	r1, [r3, #16]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	b29b      	uxth	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	2207      	movs	r2, #7
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	43da      	mvns	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	400a      	ands	r2, r1
 8000786:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6919      	ldr	r1, [r3, #16]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	689a      	ldr	r2, [r3, #8]
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	b29b      	uxth	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	4603      	mov	r3, r0
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	4403      	add	r3, r0
 80007a0:	409a      	lsls	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d824      	bhi.n	80007fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	3b05      	subs	r3, #5
 80007c4:	221f      	movs	r2, #31
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	400a      	ands	r2, r1
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	3b05      	subs	r3, #5
 80007ee:	fa00 f203 	lsl.w	r2, r0, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
 80007fa:	e04c      	b.n	8000896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2b0c      	cmp	r3, #12
 8000802:	d824      	bhi.n	800084e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685a      	ldr	r2, [r3, #4]
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	3b23      	subs	r3, #35	; 0x23
 8000816:	221f      	movs	r2, #31
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	43da      	mvns	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	400a      	ands	r2, r1
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	b29b      	uxth	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	3b23      	subs	r3, #35	; 0x23
 8000840:	fa00 f203 	lsl.w	r2, r0, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	430a      	orrs	r2, r1
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
 800084c:	e023      	b.n	8000896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	3b41      	subs	r3, #65	; 0x41
 8000860:	221f      	movs	r2, #31
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	400a      	ands	r2, r1
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b29b      	uxth	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685a      	ldr	r2, [r3, #4]
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	3b41      	subs	r3, #65	; 0x41
 800088a:	fa00 f203 	lsl.w	r2, r0, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	430a      	orrs	r2, r1
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000896:	4b29      	ldr	r3, [pc, #164]	; (800093c <HAL_ADC_ConfigChannel+0x250>)
 8000898:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <HAL_ADC_ConfigChannel+0x254>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d10f      	bne.n	80008c4 <HAL_ADC_ConfigChannel+0x1d8>
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b12      	cmp	r3, #18
 80008aa:	d10b      	bne.n	80008c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_ADC_ConfigChannel+0x254>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_ADC_ConfigChannel+0x23a>
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <HAL_ADC_ConfigChannel+0x258>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d003      	beq.n	80008e0 <HAL_ADC_ConfigChannel+0x1f4>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b11      	cmp	r3, #17
 80008de:	d122      	bne.n	8000926 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a11      	ldr	r2, [pc, #68]	; (8000944 <HAL_ADC_ConfigChannel+0x258>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d111      	bne.n	8000926 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_ADC_ConfigChannel+0x25c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <HAL_ADC_ConfigChannel+0x260>)
 8000908:	fba2 2303 	umull	r2, r3, r2, r3
 800090c:	0c9a      	lsrs	r2, r3, #18
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000918:	e002      	b.n	8000920 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3b01      	subs	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1f9      	bne.n	800091a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	40012300 	.word	0x40012300
 8000940:	40012000 	.word	0x40012000
 8000944:	10000012 	.word	0x10000012
 8000948:	20000008 	.word	0x20000008
 800094c:	431bde83 	.word	0x431bde83

08000950 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000958:	4b79      	ldr	r3, [pc, #484]	; (8000b40 <ADC_Init+0x1f0>)
 800095a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	431a      	orrs	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6859      	ldr	r1, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	021a      	lsls	r2, r3, #8
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80009a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6859      	ldr	r1, [r3, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	430a      	orrs	r2, r1
 80009ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6899      	ldr	r1, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	430a      	orrs	r2, r1
 80009dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	4a58      	ldr	r2, [pc, #352]	; (8000b44 <ADC_Init+0x1f4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d022      	beq.n	8000a2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6899      	ldr	r1, [r3, #8]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	430a      	orrs	r2, r1
 8000a08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6899      	ldr	r1, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	e00f      	b.n	8000a4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	689a      	ldr	r2, [r3, #8]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0202 	bic.w	r2, r2, #2
 8000a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6899      	ldr	r1, [r3, #8]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7e1b      	ldrb	r3, [r3, #24]
 8000a68:	005a      	lsls	r2, r3, #1
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d01b      	beq.n	8000ab4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6859      	ldr	r1, [r3, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	035a      	lsls	r2, r3, #13
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	e007      	b.n	8000ac4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	051a      	lsls	r2, r3, #20
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6899      	ldr	r1, [r3, #8]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b06:	025a      	lsls	r2, r3, #9
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6899      	ldr	r1, [r3, #8]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	029a      	lsls	r2, r3, #10
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	609a      	str	r2, [r3, #8]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40012300 	.word	0x40012300
 8000b44:	0f000001 	.word	0x0f000001

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <__NVIC_EnableIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff29 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff3e 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff31 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffa2 	bl	8000ca4 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d004      	beq.n	8000d88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e00c      	b.n	8000da2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2205      	movs	r2, #5
 8000d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0201 	bic.w	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e159      	b.n	8001080 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 8148 	bne.w	800107a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d00b      	beq.n	8000e0a <HAL_GPIO_Init+0x5a>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfe:	2b11      	cmp	r3, #17
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b12      	cmp	r3, #18
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0xfc>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b12      	cmp	r3, #18
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80a2 	beq.w	800107a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b56      	ldr	r3, [pc, #344]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a55      	ldr	r2, [pc, #340]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b53      	ldr	r3, [pc, #332]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f52:	4a51      	ldr	r2, [pc, #324]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x202>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <HAL_GPIO_Init+0x2f0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x1fe>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a46      	ldr	r2, [pc, #280]	; (80010a4 <HAL_GPIO_Init+0x2f4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x1fa>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a45      	ldr	r2, [pc, #276]	; (80010a8 <HAL_GPIO_Init+0x2f8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x1f6>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a44      	ldr	r2, [pc, #272]	; (80010ac <HAL_GPIO_Init+0x2fc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x1f2>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4934      	ldr	r1, [pc, #208]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd2:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff6:	4a2e      	ldr	r2, [pc, #184]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_GPIO_Init+0x300>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f aea2 	bls.w	8000dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	3724      	adds	r7, #36	; 0x24
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40023800 	.word	0x40023800
 8001098:	40013800 	.word	0x40013800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020c00 	.word	0x40020c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40013c00 	.word	0x40013c00

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e25b      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d075      	beq.n	80011f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001106:	4ba3      	ldr	r3, [pc, #652]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d00c      	beq.n	800112c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001112:	4ba0      	ldr	r3, [pc, #640]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d112      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b9d      	ldr	r3, [pc, #628]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b99      	ldr	r3, [pc, #612]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d05b      	beq.n	80011f0 <HAL_RCC_OscConfig+0x108>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d157      	bne.n	80011f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e236      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x74>
 800114e:	4b91      	ldr	r3, [pc, #580]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a90      	ldr	r2, [pc, #576]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x98>
 8001166:	4b8b      	ldr	r3, [pc, #556]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a8a      	ldr	r2, [pc, #552]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b88      	ldr	r3, [pc, #544]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a87      	ldr	r2, [pc, #540]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 8001180:	4b84      	ldr	r3, [pc, #528]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a83      	ldr	r2, [pc, #524]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b81      	ldr	r3, [pc, #516]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a80      	ldr	r2, [pc, #512]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fa54 	bl	800064c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fa50 	bl	800064c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1fb      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b76      	ldr	r3, [pc, #472]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xc0>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fa40 	bl	800064c <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fa3c 	bl	800064c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1e7      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0xe8>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d063      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fe:	4b65      	ldr	r3, [pc, #404]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b62      	ldr	r3, [pc, #392]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	2b08      	cmp	r3, #8
 8001214:	d11c      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1bb      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b56      	ldr	r3, [pc, #344]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4952      	ldr	r1, [pc, #328]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	e03a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <HAL_RCC_OscConfig+0x2b0>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff f9f5 	bl	800064c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff f9f1 	bl	800064c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e19c      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4940      	ldr	r1, [pc, #256]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e015      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <HAL_RCC_OscConfig+0x2b0>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff f9d4 	bl	800064c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff f9d0 	bl	800064c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e17b      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	4b36      	ldr	r3, [pc, #216]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d030      	beq.n	8001334 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_RCC_OscConfig+0x2b4>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff f9b4 	bl	800064c <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff f9b0 	bl	800064c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e15b      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x200>
 8001306:	e015      	b.n	8001334 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x2b4>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff f99d 	bl	800064c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff f999 	bl	800064c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e144      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f0      	bne.n	8001316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a0 	beq.w	8001482 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136e:	2301      	movs	r3, #1
 8001370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_RCC_OscConfig+0x2b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137a:	2b00      	cmp	r3, #0
 800137c:	d121      	bne.n	80013c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_RCC_OscConfig+0x2b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_RCC_OscConfig+0x2b8>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138a:	f7ff f95f 	bl	800064c <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	e011      	b.n	80013b6 <HAL_RCC_OscConfig+0x2ce>
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	42470000 	.word	0x42470000
 800139c:	42470e80 	.word	0x42470e80
 80013a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a4:	f7ff f952 	bl	800064c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e0fd      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b6:	4b81      	ldr	r3, [pc, #516]	; (80015bc <HAL_RCC_OscConfig+0x4d4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2f0>
 80013ca:	4b7d      	ldr	r3, [pc, #500]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	4a7c      	ldr	r2, [pc, #496]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
 80013d6:	e01c      	b.n	8001412 <HAL_RCC_OscConfig+0x32a>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d10c      	bne.n	80013fa <HAL_RCC_OscConfig+0x312>
 80013e0:	4b77      	ldr	r3, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	4a76      	ldr	r2, [pc, #472]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6713      	str	r3, [r2, #112]	; 0x70
 80013ec:	4b74      	ldr	r3, [pc, #464]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a73      	ldr	r2, [pc, #460]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6713      	str	r3, [r2, #112]	; 0x70
 80013f8:	e00b      	b.n	8001412 <HAL_RCC_OscConfig+0x32a>
 80013fa:	4b71      	ldr	r3, [pc, #452]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a70      	ldr	r2, [pc, #448]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a6d      	ldr	r2, [pc, #436]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d015      	beq.n	8001446 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141a:	f7ff f917 	bl	800064c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff f913 	bl	800064c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0bc      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001438:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ee      	beq.n	8001422 <HAL_RCC_OscConfig+0x33a>
 8001444:	e014      	b.n	8001470 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff f901 	bl	800064c <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff f8fd 	bl	800064c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0a6      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001464:	4b56      	ldr	r3, [pc, #344]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ee      	bne.n	800144e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d105      	bne.n	8001482 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 800147c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8092 	beq.w	80015b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d05c      	beq.n	8001552 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d141      	bne.n	8001524 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a0:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <HAL_RCC_OscConfig+0x4dc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff f8d1 	bl	800064c <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff f8cd 	bl	800064c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e078      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c0:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	019b      	lsls	r3, r3, #6
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	085b      	lsrs	r3, r3, #1
 80014e4:	3b01      	subs	r3, #1
 80014e6:	041b      	lsls	r3, r3, #16
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	061b      	lsls	r3, r3, #24
 80014f0:	4933      	ldr	r1, [pc, #204]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <HAL_RCC_OscConfig+0x4dc>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff f8a6 	bl	800064c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff f8a2 	bl	800064c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e04d      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x41c>
 8001522:	e045      	b.n	80015b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_RCC_OscConfig+0x4dc>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff f88f 	bl	800064c <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff f88b 	bl	800064c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e036      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x44a>
 8001550:	e02e      	b.n	80015b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e029      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_RCC_OscConfig+0x4d8>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	429a      	cmp	r2, r3
 8001570:	d11c      	bne.n	80015ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d115      	bne.n	80015ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001586:	4013      	ands	r3, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800158c:	4293      	cmp	r3, r2
 800158e:	d10d      	bne.n	80015ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40007000 	.word	0x40007000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	42470060 	.word	0x42470060

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0cc      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b68      	ldr	r3, [pc, #416]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d90c      	bls.n	8001604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b65      	ldr	r3, [pc, #404]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b8      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800161c:	4b59      	ldr	r3, [pc, #356]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a58      	ldr	r2, [pc, #352]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001634:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800163e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	494d      	ldr	r1, [pc, #308]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d044      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e07f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001682:	2b03      	cmp	r3, #3
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e067      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 0203 	bic.w	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4934      	ldr	r1, [pc, #208]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b8:	f7fe ffc8 	bl	800064c <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7fe ffc4 	bl	800064c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e04f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 020c 	and.w	r2, r3, #12
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1eb      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d20c      	bcs.n	8001710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e032      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4916      	ldr	r1, [pc, #88]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	490e      	ldr	r1, [pc, #56]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800174e:	f000 f821 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8001752:	4601      	mov	r1, r0
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	5cd3      	ldrb	r3, [r2, r3]
 8001762:	fa21 f303 	lsr.w	r3, r1, r3
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe ff28 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00
 8001784:	40023800 	.word	0x40023800
 8001788:	08003e68 	.word	0x08003e68
 800178c:	20000008 	.word	0x20000008
 8001790:	20000000 	.word	0x20000000

08001794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d007      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x32>
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d008      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x38>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 80b4 	bne.w	8001928 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b5e      	ldr	r3, [pc, #376]	; (800193c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017c2:	60bb      	str	r3, [r7, #8]
       break;
 80017c4:	e0b3      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017c6:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80017c8:	60bb      	str	r3, [r7, #8]
      break;
 80017ca:	e0b0      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017cc:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d6:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d04a      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b55      	ldr	r3, [pc, #340]	; (8001938 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	f04f 0400 	mov.w	r4, #0
 80017ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	ea03 0501 	and.w	r5, r3, r1
 80017f8:	ea04 0602 	and.w	r6, r4, r2
 80017fc:	4629      	mov	r1, r5
 80017fe:	4632      	mov	r2, r6
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	f04f 0400 	mov.w	r4, #0
 8001808:	0154      	lsls	r4, r2, #5
 800180a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800180e:	014b      	lsls	r3, r1, #5
 8001810:	4619      	mov	r1, r3
 8001812:	4622      	mov	r2, r4
 8001814:	1b49      	subs	r1, r1, r5
 8001816:	eb62 0206 	sbc.w	r2, r2, r6
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	f04f 0400 	mov.w	r4, #0
 8001822:	0194      	lsls	r4, r2, #6
 8001824:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001828:	018b      	lsls	r3, r1, #6
 800182a:	1a5b      	subs	r3, r3, r1
 800182c:	eb64 0402 	sbc.w	r4, r4, r2
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	00e2      	lsls	r2, r4, #3
 800183a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800183e:	00d9      	lsls	r1, r3, #3
 8001840:	460b      	mov	r3, r1
 8001842:	4614      	mov	r4, r2
 8001844:	195b      	adds	r3, r3, r5
 8001846:	eb44 0406 	adc.w	r4, r4, r6
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	0262      	lsls	r2, r4, #9
 8001854:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001858:	0259      	lsls	r1, r3, #9
 800185a:	460b      	mov	r3, r1
 800185c:	4614      	mov	r4, r2
 800185e:	4618      	mov	r0, r3
 8001860:	4621      	mov	r1, r4
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f04f 0400 	mov.w	r4, #0
 8001868:	461a      	mov	r2, r3
 800186a:	4623      	mov	r3, r4
 800186c:	f7fe fd08 	bl	8000280 <__aeabi_uldivmod>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e049      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	f04f 0400 	mov.w	r4, #0
 8001882:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	ea03 0501 	and.w	r5, r3, r1
 800188e:	ea04 0602 	and.w	r6, r4, r2
 8001892:	4629      	mov	r1, r5
 8001894:	4632      	mov	r2, r6
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	f04f 0400 	mov.w	r4, #0
 800189e:	0154      	lsls	r4, r2, #5
 80018a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018a4:	014b      	lsls	r3, r1, #5
 80018a6:	4619      	mov	r1, r3
 80018a8:	4622      	mov	r2, r4
 80018aa:	1b49      	subs	r1, r1, r5
 80018ac:	eb62 0206 	sbc.w	r2, r2, r6
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	f04f 0400 	mov.w	r4, #0
 80018b8:	0194      	lsls	r4, r2, #6
 80018ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018be:	018b      	lsls	r3, r1, #6
 80018c0:	1a5b      	subs	r3, r3, r1
 80018c2:	eb64 0402 	sbc.w	r4, r4, r2
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	00e2      	lsls	r2, r4, #3
 80018d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018d4:	00d9      	lsls	r1, r3, #3
 80018d6:	460b      	mov	r3, r1
 80018d8:	4614      	mov	r4, r2
 80018da:	195b      	adds	r3, r3, r5
 80018dc:	eb44 0406 	adc.w	r4, r4, r6
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	02a2      	lsls	r2, r4, #10
 80018ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018ee:	0299      	lsls	r1, r3, #10
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	4621      	mov	r1, r4
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f04f 0400 	mov.w	r4, #0
 80018fe:	461a      	mov	r2, r3
 8001900:	4623      	mov	r3, r4
 8001902:	f7fe fcbd 	bl	8000280 <__aeabi_uldivmod>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	0c1b      	lsrs	r3, r3, #16
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	3301      	adds	r3, #1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	60bb      	str	r3, [r7, #8]
      break;
 8001926:	e002      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800192a:	60bb      	str	r3, [r7, #8]
      break;
 800192c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192e:	68bb      	ldr	r3, [r7, #8]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	00f42400 	.word	0x00f42400
 8001940:	007a1200 	.word	0x007a1200

08001944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_RCC_GetHCLKFreq+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008

0800195c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001960:	f7ff fff0 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 8001964:	4601      	mov	r1, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	0a9b      	lsrs	r3, r3, #10
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001972:	5cd3      	ldrb	r3, [r2, r3]
 8001974:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	08003e78 	.word	0x08003e78

08001984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001988:	f7ff ffdc 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 800198c:	4601      	mov	r1, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0b5b      	lsrs	r3, r3, #13
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08003e78 	.word	0x08003e78

080019ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e03f      	b.n	8001a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f001 f932 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fb4b 	bl	800208c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b088      	sub	sp, #32
 8001a4a:	af02      	add	r7, sp, #8
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	f040 8083 	bne.w	8001b6e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_UART_Transmit+0x2e>
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e07b      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_UART_Transmit+0x40>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e074      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2221      	movs	r2, #33	; 0x21
 8001a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a9c:	f7fe fdd6 	bl	800064c <HAL_GetTick>
 8001aa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	88fa      	ldrh	r2, [r7, #6]
 8001aac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ab6:	e042      	b.n	8001b3e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ace:	d122      	bne.n	8001b16 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f96a 	bl	8001db4 <UART_WaitOnFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e042      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001afc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	e017      	b.n	8001b3e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	e013      	b.n	8001b3e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f947 	bl	8001db4 <UART_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e01f      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	781a      	ldrb	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1b7      	bne.n	8001ab8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2140      	movs	r1, #64	; 0x40
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f92e 	bl	8001db4 <UART_WaitOnFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e006      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
  }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_UART_IRQHandler+0x52>
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f9e0 	bl	8001f88 <UART_Receive_IT>
      return;
 8001bc8:	e0d1      	b.n	8001d6e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80b0 	beq.w	8001d32 <HAL_UART_IRQHandler+0x1ba>
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_UART_IRQHandler+0x70>
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80a5 	beq.w	8001d32 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <HAL_UART_IRQHandler+0x90>
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <HAL_UART_IRQHandler+0xb0>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c20:	f043 0202 	orr.w	r2, r3, #2
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_UART_IRQHandler+0xd0>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	f043 0204 	orr.w	r2, r3, #4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00f      	beq.n	8001c72 <HAL_UART_IRQHandler+0xfa>
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <HAL_UART_IRQHandler+0xee>
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	f043 0208 	orr.w	r2, r3, #8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d078      	beq.n	8001d6c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_UART_IRQHandler+0x11c>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f97a 	bl	8001f88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	2b40      	cmp	r3, #64	; 0x40
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_UART_IRQHandler+0x144>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d031      	beq.n	8001d20 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8c3 	bl	8001e48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ccc:	2b40      	cmp	r3, #64	; 0x40
 8001cce:	d123      	bne.n	8001d18 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cde:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_UART_IRQHandler+0x1fc>)
 8001cee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff f838 	bl	8000d6a <HAL_DMA_Abort_IT>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d016      	beq.n	8001d2e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d0e:	e00e      	b.n	8001d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f845 	bl	8001da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d16:	e00a      	b.n	8001d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f841 	bl	8001da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d1e:	e006      	b.n	8001d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f83d 	bl	8001da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d2c:	e01e      	b.n	8001d6c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d2e:	bf00      	nop
    return;
 8001d30:	e01c      	b.n	8001d6c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_UART_IRQHandler+0x1d6>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8b0 	bl	8001eac <UART_Transmit_IT>
    return;
 8001d4c:	e00f      	b.n	8001d6e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_UART_IRQHandler+0x1f6>
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8f8 	bl	8001f58 <UART_EndTransmit_IT>
    return;
 8001d68:	bf00      	nop
 8001d6a:	e000      	b.n	8001d6e <HAL_UART_IRQHandler+0x1f6>
    return;
 8001d6c:	bf00      	nop
  }
}
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	08001e85 	.word	0x08001e85

08001d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc4:	e02c      	b.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d028      	beq.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001dd4:	f7fe fc3a 	bl	800064c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d21d      	bcs.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001df2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e00f      	b.n	8001e40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d0c3      	beq.n	8001dc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff7e 	bl	8001da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b21      	cmp	r3, #33	; 0x21
 8001ebe:	d144      	bne.n	8001f4a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	d11a      	bne.n	8001f00 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ede:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	e00e      	b.n	8001f12 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	621a      	str	r2, [r3, #32]
 8001efe:	e008      	b.n	8001f12 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	1c59      	adds	r1, r3, #1
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6211      	str	r1, [r2, #32]
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fefd 	bl	8001d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b22      	cmp	r3, #34	; 0x22
 8001f9a:	d171      	bne.n	8002080 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa4:	d123      	bne.n	8001fee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10e      	bne.n	8001fd2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	1c9a      	adds	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
 8001fd0:	e029      	b.n	8002026 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
 8001fec:	e01b      	b.n	8002026 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10a      	bne.n	800200c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6858      	ldr	r0, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	1c59      	adds	r1, r3, #1
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6291      	str	r1, [r2, #40]	; 0x28
 8002006:	b2c2      	uxtb	r2, r0
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e00c      	b.n	8002026 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	1c58      	adds	r0, r3, #1
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	6288      	str	r0, [r1, #40]	; 0x28
 800201e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29b      	uxth	r3, r3
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4619      	mov	r1, r3
 8002034:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002036:	2b00      	cmp	r3, #0
 8002038:	d120      	bne.n	800207c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0220 	bic.w	r2, r2, #32
 8002048:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002058:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fe8a 	bl	8001d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e002      	b.n	8002082 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80020ce:	f023 030c 	bic.w	r3, r3, #12
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	430b      	orrs	r3, r1
 80020da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020fa:	f040 818b 	bne.w	8002414 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4ac1      	ldr	r2, [pc, #772]	; (8002408 <UART_SetConfig+0x37c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d005      	beq.n	8002114 <UART_SetConfig+0x88>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4abf      	ldr	r2, [pc, #764]	; (800240c <UART_SetConfig+0x380>)
 800210e:	4293      	cmp	r3, r2
 8002110:	f040 80bd 	bne.w	800228e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002114:	f7ff fc36 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8002118:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	461d      	mov	r5, r3
 800211e:	f04f 0600 	mov.w	r6, #0
 8002122:	46a8      	mov	r8, r5
 8002124:	46b1      	mov	r9, r6
 8002126:	eb18 0308 	adds.w	r3, r8, r8
 800212a:	eb49 0409 	adc.w	r4, r9, r9
 800212e:	4698      	mov	r8, r3
 8002130:	46a1      	mov	r9, r4
 8002132:	eb18 0805 	adds.w	r8, r8, r5
 8002136:	eb49 0906 	adc.w	r9, r9, r6
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002146:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800214a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800214e:	4688      	mov	r8, r1
 8002150:	4691      	mov	r9, r2
 8002152:	eb18 0005 	adds.w	r0, r8, r5
 8002156:	eb49 0106 	adc.w	r1, r9, r6
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	461d      	mov	r5, r3
 8002160:	f04f 0600 	mov.w	r6, #0
 8002164:	196b      	adds	r3, r5, r5
 8002166:	eb46 0406 	adc.w	r4, r6, r6
 800216a:	461a      	mov	r2, r3
 800216c:	4623      	mov	r3, r4
 800216e:	f7fe f887 	bl	8000280 <__aeabi_uldivmod>
 8002172:	4603      	mov	r3, r0
 8002174:	460c      	mov	r4, r1
 8002176:	461a      	mov	r2, r3
 8002178:	4ba5      	ldr	r3, [pc, #660]	; (8002410 <UART_SetConfig+0x384>)
 800217a:	fba3 2302 	umull	r2, r3, r3, r2
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	461d      	mov	r5, r3
 8002188:	f04f 0600 	mov.w	r6, #0
 800218c:	46a9      	mov	r9, r5
 800218e:	46b2      	mov	sl, r6
 8002190:	eb19 0309 	adds.w	r3, r9, r9
 8002194:	eb4a 040a 	adc.w	r4, sl, sl
 8002198:	4699      	mov	r9, r3
 800219a:	46a2      	mov	sl, r4
 800219c:	eb19 0905 	adds.w	r9, r9, r5
 80021a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80021a4:	f04f 0100 	mov.w	r1, #0
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021b8:	4689      	mov	r9, r1
 80021ba:	4692      	mov	sl, r2
 80021bc:	eb19 0005 	adds.w	r0, r9, r5
 80021c0:	eb4a 0106 	adc.w	r1, sl, r6
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	461d      	mov	r5, r3
 80021ca:	f04f 0600 	mov.w	r6, #0
 80021ce:	196b      	adds	r3, r5, r5
 80021d0:	eb46 0406 	adc.w	r4, r6, r6
 80021d4:	461a      	mov	r2, r3
 80021d6:	4623      	mov	r3, r4
 80021d8:	f7fe f852 	bl	8000280 <__aeabi_uldivmod>
 80021dc:	4603      	mov	r3, r0
 80021de:	460c      	mov	r4, r1
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <UART_SetConfig+0x384>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2164      	movs	r1, #100	; 0x64
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	3332      	adds	r3, #50	; 0x32
 80021f6:	4a86      	ldr	r2, [pc, #536]	; (8002410 <UART_SetConfig+0x384>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002204:	4498      	add	r8, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	461d      	mov	r5, r3
 800220a:	f04f 0600 	mov.w	r6, #0
 800220e:	46a9      	mov	r9, r5
 8002210:	46b2      	mov	sl, r6
 8002212:	eb19 0309 	adds.w	r3, r9, r9
 8002216:	eb4a 040a 	adc.w	r4, sl, sl
 800221a:	4699      	mov	r9, r3
 800221c:	46a2      	mov	sl, r4
 800221e:	eb19 0905 	adds.w	r9, r9, r5
 8002222:	eb4a 0a06 	adc.w	sl, sl, r6
 8002226:	f04f 0100 	mov.w	r1, #0
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002232:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002236:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800223a:	4689      	mov	r9, r1
 800223c:	4692      	mov	sl, r2
 800223e:	eb19 0005 	adds.w	r0, r9, r5
 8002242:	eb4a 0106 	adc.w	r1, sl, r6
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	461d      	mov	r5, r3
 800224c:	f04f 0600 	mov.w	r6, #0
 8002250:	196b      	adds	r3, r5, r5
 8002252:	eb46 0406 	adc.w	r4, r6, r6
 8002256:	461a      	mov	r2, r3
 8002258:	4623      	mov	r3, r4
 800225a:	f7fe f811 	bl	8000280 <__aeabi_uldivmod>
 800225e:	4603      	mov	r3, r0
 8002260:	460c      	mov	r4, r1
 8002262:	461a      	mov	r2, r3
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <UART_SetConfig+0x384>)
 8002266:	fba3 1302 	umull	r1, r3, r3, r2
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2164      	movs	r1, #100	; 0x64
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	3332      	adds	r3, #50	; 0x32
 8002278:	4a65      	ldr	r2, [pc, #404]	; (8002410 <UART_SetConfig+0x384>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	f003 0207 	and.w	r2, r3, #7
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4442      	add	r2, r8
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	e26f      	b.n	800276e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800228e:	f7ff fb65 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 8002292:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	461d      	mov	r5, r3
 8002298:	f04f 0600 	mov.w	r6, #0
 800229c:	46a8      	mov	r8, r5
 800229e:	46b1      	mov	r9, r6
 80022a0:	eb18 0308 	adds.w	r3, r8, r8
 80022a4:	eb49 0409 	adc.w	r4, r9, r9
 80022a8:	4698      	mov	r8, r3
 80022aa:	46a1      	mov	r9, r4
 80022ac:	eb18 0805 	adds.w	r8, r8, r5
 80022b0:	eb49 0906 	adc.w	r9, r9, r6
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022c8:	4688      	mov	r8, r1
 80022ca:	4691      	mov	r9, r2
 80022cc:	eb18 0005 	adds.w	r0, r8, r5
 80022d0:	eb49 0106 	adc.w	r1, r9, r6
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	461d      	mov	r5, r3
 80022da:	f04f 0600 	mov.w	r6, #0
 80022de:	196b      	adds	r3, r5, r5
 80022e0:	eb46 0406 	adc.w	r4, r6, r6
 80022e4:	461a      	mov	r2, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	f7fd ffca 	bl	8000280 <__aeabi_uldivmod>
 80022ec:	4603      	mov	r3, r0
 80022ee:	460c      	mov	r4, r1
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <UART_SetConfig+0x384>)
 80022f4:	fba3 2302 	umull	r2, r3, r3, r2
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	461d      	mov	r5, r3
 8002302:	f04f 0600 	mov.w	r6, #0
 8002306:	46a9      	mov	r9, r5
 8002308:	46b2      	mov	sl, r6
 800230a:	eb19 0309 	adds.w	r3, r9, r9
 800230e:	eb4a 040a 	adc.w	r4, sl, sl
 8002312:	4699      	mov	r9, r3
 8002314:	46a2      	mov	sl, r4
 8002316:	eb19 0905 	adds.w	r9, r9, r5
 800231a:	eb4a 0a06 	adc.w	sl, sl, r6
 800231e:	f04f 0100 	mov.w	r1, #0
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800232a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800232e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002332:	4689      	mov	r9, r1
 8002334:	4692      	mov	sl, r2
 8002336:	eb19 0005 	adds.w	r0, r9, r5
 800233a:	eb4a 0106 	adc.w	r1, sl, r6
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	461d      	mov	r5, r3
 8002344:	f04f 0600 	mov.w	r6, #0
 8002348:	196b      	adds	r3, r5, r5
 800234a:	eb46 0406 	adc.w	r4, r6, r6
 800234e:	461a      	mov	r2, r3
 8002350:	4623      	mov	r3, r4
 8002352:	f7fd ff95 	bl	8000280 <__aeabi_uldivmod>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	461a      	mov	r2, r3
 800235c:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <UART_SetConfig+0x384>)
 800235e:	fba3 1302 	umull	r1, r3, r3, r2
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2164      	movs	r1, #100	; 0x64
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	3332      	adds	r3, #50	; 0x32
 8002370:	4a27      	ldr	r2, [pc, #156]	; (8002410 <UART_SetConfig+0x384>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800237e:	4498      	add	r8, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	461d      	mov	r5, r3
 8002384:	f04f 0600 	mov.w	r6, #0
 8002388:	46a9      	mov	r9, r5
 800238a:	46b2      	mov	sl, r6
 800238c:	eb19 0309 	adds.w	r3, r9, r9
 8002390:	eb4a 040a 	adc.w	r4, sl, sl
 8002394:	4699      	mov	r9, r3
 8002396:	46a2      	mov	sl, r4
 8002398:	eb19 0905 	adds.w	r9, r9, r5
 800239c:	eb4a 0a06 	adc.w	sl, sl, r6
 80023a0:	f04f 0100 	mov.w	r1, #0
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023b4:	4689      	mov	r9, r1
 80023b6:	4692      	mov	sl, r2
 80023b8:	eb19 0005 	adds.w	r0, r9, r5
 80023bc:	eb4a 0106 	adc.w	r1, sl, r6
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	461d      	mov	r5, r3
 80023c6:	f04f 0600 	mov.w	r6, #0
 80023ca:	196b      	adds	r3, r5, r5
 80023cc:	eb46 0406 	adc.w	r4, r6, r6
 80023d0:	461a      	mov	r2, r3
 80023d2:	4623      	mov	r3, r4
 80023d4:	f7fd ff54 	bl	8000280 <__aeabi_uldivmod>
 80023d8:	4603      	mov	r3, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	461a      	mov	r2, r3
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <UART_SetConfig+0x384>)
 80023e0:	fba3 1302 	umull	r1, r3, r3, r2
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	2164      	movs	r1, #100	; 0x64
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	3332      	adds	r3, #50	; 0x32
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <UART_SetConfig+0x384>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	f003 0207 	and.w	r2, r3, #7
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4442      	add	r2, r8
 8002404:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002406:	e1b2      	b.n	800276e <UART_SetConfig+0x6e2>
 8002408:	40011000 	.word	0x40011000
 800240c:	40011400 	.word	0x40011400
 8002410:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4ad7      	ldr	r2, [pc, #860]	; (8002778 <UART_SetConfig+0x6ec>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d005      	beq.n	800242a <UART_SetConfig+0x39e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4ad6      	ldr	r2, [pc, #856]	; (800277c <UART_SetConfig+0x6f0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	f040 80d1 	bne.w	80025cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800242a:	f7ff faab 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 800242e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	469a      	mov	sl, r3
 8002434:	f04f 0b00 	mov.w	fp, #0
 8002438:	46d0      	mov	r8, sl
 800243a:	46d9      	mov	r9, fp
 800243c:	eb18 0308 	adds.w	r3, r8, r8
 8002440:	eb49 0409 	adc.w	r4, r9, r9
 8002444:	4698      	mov	r8, r3
 8002446:	46a1      	mov	r9, r4
 8002448:	eb18 080a 	adds.w	r8, r8, sl
 800244c:	eb49 090b 	adc.w	r9, r9, fp
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800245c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002460:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002464:	4688      	mov	r8, r1
 8002466:	4691      	mov	r9, r2
 8002468:	eb1a 0508 	adds.w	r5, sl, r8
 800246c:	eb4b 0609 	adc.w	r6, fp, r9
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	f04f 0400 	mov.w	r4, #0
 8002482:	0094      	lsls	r4, r2, #2
 8002484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002488:	008b      	lsls	r3, r1, #2
 800248a:	461a      	mov	r2, r3
 800248c:	4623      	mov	r3, r4
 800248e:	4628      	mov	r0, r5
 8002490:	4631      	mov	r1, r6
 8002492:	f7fd fef5 	bl	8000280 <__aeabi_uldivmod>
 8002496:	4603      	mov	r3, r0
 8002498:	460c      	mov	r4, r1
 800249a:	461a      	mov	r2, r3
 800249c:	4bb8      	ldr	r3, [pc, #736]	; (8002780 <UART_SetConfig+0x6f4>)
 800249e:	fba3 2302 	umull	r2, r3, r3, r2
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	469b      	mov	fp, r3
 80024ac:	f04f 0c00 	mov.w	ip, #0
 80024b0:	46d9      	mov	r9, fp
 80024b2:	46e2      	mov	sl, ip
 80024b4:	eb19 0309 	adds.w	r3, r9, r9
 80024b8:	eb4a 040a 	adc.w	r4, sl, sl
 80024bc:	4699      	mov	r9, r3
 80024be:	46a2      	mov	sl, r4
 80024c0:	eb19 090b 	adds.w	r9, r9, fp
 80024c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024dc:	4689      	mov	r9, r1
 80024de:	4692      	mov	sl, r2
 80024e0:	eb1b 0509 	adds.w	r5, fp, r9
 80024e4:	eb4c 060a 	adc.w	r6, ip, sl
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	f04f 0400 	mov.w	r4, #0
 80024fa:	0094      	lsls	r4, r2, #2
 80024fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002500:	008b      	lsls	r3, r1, #2
 8002502:	461a      	mov	r2, r3
 8002504:	4623      	mov	r3, r4
 8002506:	4628      	mov	r0, r5
 8002508:	4631      	mov	r1, r6
 800250a:	f7fd feb9 	bl	8000280 <__aeabi_uldivmod>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	461a      	mov	r2, r3
 8002514:	4b9a      	ldr	r3, [pc, #616]	; (8002780 <UART_SetConfig+0x6f4>)
 8002516:	fba3 1302 	umull	r1, r3, r3, r2
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2164      	movs	r1, #100	; 0x64
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	3332      	adds	r3, #50	; 0x32
 8002528:	4a95      	ldr	r2, [pc, #596]	; (8002780 <UART_SetConfig+0x6f4>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002534:	4498      	add	r8, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	469b      	mov	fp, r3
 800253a:	f04f 0c00 	mov.w	ip, #0
 800253e:	46d9      	mov	r9, fp
 8002540:	46e2      	mov	sl, ip
 8002542:	eb19 0309 	adds.w	r3, r9, r9
 8002546:	eb4a 040a 	adc.w	r4, sl, sl
 800254a:	4699      	mov	r9, r3
 800254c:	46a2      	mov	sl, r4
 800254e:	eb19 090b 	adds.w	r9, r9, fp
 8002552:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002562:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002566:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800256a:	4689      	mov	r9, r1
 800256c:	4692      	mov	sl, r2
 800256e:	eb1b 0509 	adds.w	r5, fp, r9
 8002572:	eb4c 060a 	adc.w	r6, ip, sl
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4619      	mov	r1, r3
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	f04f 0400 	mov.w	r4, #0
 8002588:	0094      	lsls	r4, r2, #2
 800258a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800258e:	008b      	lsls	r3, r1, #2
 8002590:	461a      	mov	r2, r3
 8002592:	4623      	mov	r3, r4
 8002594:	4628      	mov	r0, r5
 8002596:	4631      	mov	r1, r6
 8002598:	f7fd fe72 	bl	8000280 <__aeabi_uldivmod>
 800259c:	4603      	mov	r3, r0
 800259e:	460c      	mov	r4, r1
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b77      	ldr	r3, [pc, #476]	; (8002780 <UART_SetConfig+0x6f4>)
 80025a4:	fba3 1302 	umull	r1, r3, r3, r2
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	2164      	movs	r1, #100	; 0x64
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	3332      	adds	r3, #50	; 0x32
 80025b6:	4a72      	ldr	r2, [pc, #456]	; (8002780 <UART_SetConfig+0x6f4>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	f003 020f 	and.w	r2, r3, #15
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4442      	add	r2, r8
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e0d0      	b.n	800276e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80025cc:	f7ff f9c6 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 80025d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	469a      	mov	sl, r3
 80025d6:	f04f 0b00 	mov.w	fp, #0
 80025da:	46d0      	mov	r8, sl
 80025dc:	46d9      	mov	r9, fp
 80025de:	eb18 0308 	adds.w	r3, r8, r8
 80025e2:	eb49 0409 	adc.w	r4, r9, r9
 80025e6:	4698      	mov	r8, r3
 80025e8:	46a1      	mov	r9, r4
 80025ea:	eb18 080a 	adds.w	r8, r8, sl
 80025ee:	eb49 090b 	adc.w	r9, r9, fp
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002602:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002606:	4688      	mov	r8, r1
 8002608:	4691      	mov	r9, r2
 800260a:	eb1a 0508 	adds.w	r5, sl, r8
 800260e:	eb4b 0609 	adc.w	r6, fp, r9
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	f04f 0400 	mov.w	r4, #0
 8002624:	0094      	lsls	r4, r2, #2
 8002626:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800262a:	008b      	lsls	r3, r1, #2
 800262c:	461a      	mov	r2, r3
 800262e:	4623      	mov	r3, r4
 8002630:	4628      	mov	r0, r5
 8002632:	4631      	mov	r1, r6
 8002634:	f7fd fe24 	bl	8000280 <__aeabi_uldivmod>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	461a      	mov	r2, r3
 800263e:	4b50      	ldr	r3, [pc, #320]	; (8002780 <UART_SetConfig+0x6f4>)
 8002640:	fba3 2302 	umull	r2, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	469b      	mov	fp, r3
 800264e:	f04f 0c00 	mov.w	ip, #0
 8002652:	46d9      	mov	r9, fp
 8002654:	46e2      	mov	sl, ip
 8002656:	eb19 0309 	adds.w	r3, r9, r9
 800265a:	eb4a 040a 	adc.w	r4, sl, sl
 800265e:	4699      	mov	r9, r3
 8002660:	46a2      	mov	sl, r4
 8002662:	eb19 090b 	adds.w	r9, r9, fp
 8002666:	eb4a 0a0c 	adc.w	sl, sl, ip
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002676:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800267a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800267e:	4689      	mov	r9, r1
 8002680:	4692      	mov	sl, r2
 8002682:	eb1b 0509 	adds.w	r5, fp, r9
 8002686:	eb4c 060a 	adc.w	r6, ip, sl
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4619      	mov	r1, r3
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	f04f 0400 	mov.w	r4, #0
 800269c:	0094      	lsls	r4, r2, #2
 800269e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026a2:	008b      	lsls	r3, r1, #2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4623      	mov	r3, r4
 80026a8:	4628      	mov	r0, r5
 80026aa:	4631      	mov	r1, r6
 80026ac:	f7fd fde8 	bl	8000280 <__aeabi_uldivmod>
 80026b0:	4603      	mov	r3, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b32      	ldr	r3, [pc, #200]	; (8002780 <UART_SetConfig+0x6f4>)
 80026b8:	fba3 1302 	umull	r1, r3, r3, r2
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	2164      	movs	r1, #100	; 0x64
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	3332      	adds	r3, #50	; 0x32
 80026ca:	4a2d      	ldr	r2, [pc, #180]	; (8002780 <UART_SetConfig+0x6f4>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d6:	4498      	add	r8, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	469b      	mov	fp, r3
 80026dc:	f04f 0c00 	mov.w	ip, #0
 80026e0:	46d9      	mov	r9, fp
 80026e2:	46e2      	mov	sl, ip
 80026e4:	eb19 0309 	adds.w	r3, r9, r9
 80026e8:	eb4a 040a 	adc.w	r4, sl, sl
 80026ec:	4699      	mov	r9, r3
 80026ee:	46a2      	mov	sl, r4
 80026f0:	eb19 090b 	adds.w	r9, r9, fp
 80026f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002704:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002708:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800270c:	4689      	mov	r9, r1
 800270e:	4692      	mov	sl, r2
 8002710:	eb1b 0509 	adds.w	r5, fp, r9
 8002714:	eb4c 060a 	adc.w	r6, ip, sl
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4619      	mov	r1, r3
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	f04f 0400 	mov.w	r4, #0
 800272a:	0094      	lsls	r4, r2, #2
 800272c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002730:	008b      	lsls	r3, r1, #2
 8002732:	461a      	mov	r2, r3
 8002734:	4623      	mov	r3, r4
 8002736:	4628      	mov	r0, r5
 8002738:	4631      	mov	r1, r6
 800273a:	f7fd fda1 	bl	8000280 <__aeabi_uldivmod>
 800273e:	4603      	mov	r3, r0
 8002740:	460c      	mov	r4, r1
 8002742:	461a      	mov	r2, r3
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <UART_SetConfig+0x6f4>)
 8002746:	fba3 1302 	umull	r1, r3, r3, r2
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2164      	movs	r1, #100	; 0x64
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	3332      	adds	r3, #50	; 0x32
 8002758:	4a09      	ldr	r2, [pc, #36]	; (8002780 <UART_SetConfig+0x6f4>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4442      	add	r2, r8
 800276a:	609a      	str	r2, [r3, #8]
}
 800276c:	e7ff      	b.n	800276e <UART_SetConfig+0x6e2>
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002778:	40011000 	.word	0x40011000
 800277c:	40011400 	.word	0x40011400
 8002780:	51eb851f 	.word	0x51eb851f

08002784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002788:	f7fd fefa 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800278c:	f000 f810 	bl	80027b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002790:	f000 f970 	bl	8002a74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002794:	f000 f874 	bl	8002880 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002798:	f000 f8ee 	bl	8002978 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800279c:	f000 f916 	bl	80029cc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80027a0:	f000 f93e 	bl	8002a20 <MX_USART6_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hehe");
 80027a4:	4801      	ldr	r0, [pc, #4]	; (80027ac <main+0x28>)
 80027a6:	f000 fc6b 	bl	8003080 <iprintf>
 80027aa:	e7fb      	b.n	80027a4 <main+0x20>
 80027ac:	08003e60 	.word	0x08003e60

080027b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b094      	sub	sp, #80	; 0x50
 80027b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027b6:	f107 0320 	add.w	r3, r7, #32
 80027ba:	2230      	movs	r2, #48	; 0x30
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fc56 	bl	8003070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <SystemClock_Config+0xc8>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <SystemClock_Config+0xc8>)
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e2:	6413      	str	r3, [r2, #64]	; 0x40
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <SystemClock_Config+0xc8>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <SystemClock_Config+0xcc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a20      	ldr	r2, [pc, #128]	; (800287c <SystemClock_Config+0xcc>)
 80027fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <SystemClock_Config+0xcc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800280c:	2302      	movs	r3, #2
 800280e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002810:	2301      	movs	r3, #1
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002814:	2310      	movs	r3, #16
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002818:	2302      	movs	r3, #2
 800281a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800281c:	2300      	movs	r3, #0
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002820:	2308      	movs	r3, #8
 8002822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002824:	2364      	movs	r3, #100	; 0x64
 8002826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002828:	2302      	movs	r3, #2
 800282a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800282c:	2304      	movs	r3, #4
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fc57 	bl	80010e8 <HAL_RCC_OscConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002840:	f000 f988 	bl	8002b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002844:	230f      	movs	r3, #15
 8002846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002848:	2302      	movs	r3, #2
 800284a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800285a:	f107 030c 	add.w	r3, r7, #12
 800285e:	2103      	movs	r1, #3
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe feb1 	bl	80015c8 <HAL_RCC_ClockConfig>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800286c:	f000 f972 	bl	8002b54 <Error_Handler>
  }
}
 8002870:	bf00      	nop
 8002872:	3750      	adds	r7, #80	; 0x50
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	40007000 	.word	0x40007000

08002880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002886:	463b      	mov	r3, r7
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002892:	4b36      	ldr	r3, [pc, #216]	; (800296c <MX_ADC1_Init+0xec>)
 8002894:	4a36      	ldr	r2, [pc, #216]	; (8002970 <MX_ADC1_Init+0xf0>)
 8002896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002898:	4b34      	ldr	r3, [pc, #208]	; (800296c <MX_ADC1_Init+0xec>)
 800289a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800289e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <MX_ADC1_Init+0xec>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80028a6:	4b31      	ldr	r3, [pc, #196]	; (800296c <MX_ADC1_Init+0xec>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028ac:	4b2f      	ldr	r3, [pc, #188]	; (800296c <MX_ADC1_Init+0xec>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028b2:	4b2e      	ldr	r3, [pc, #184]	; (800296c <MX_ADC1_Init+0xec>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028ba:	4b2c      	ldr	r3, [pc, #176]	; (800296c <MX_ADC1_Init+0xec>)
 80028bc:	2200      	movs	r2, #0
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028c0:	4b2a      	ldr	r3, [pc, #168]	; (800296c <MX_ADC1_Init+0xec>)
 80028c2:	4a2c      	ldr	r2, [pc, #176]	; (8002974 <MX_ADC1_Init+0xf4>)
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <MX_ADC1_Init+0xec>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <MX_ADC1_Init+0xec>)
 80028ce:	2204      	movs	r2, #4
 80028d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80028d2:	4b26      	ldr	r3, [pc, #152]	; (800296c <MX_ADC1_Init+0xec>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <MX_ADC1_Init+0xec>)
 80028dc:	2201      	movs	r2, #1
 80028de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028e0:	4822      	ldr	r0, [pc, #136]	; (800296c <MX_ADC1_Init+0xec>)
 80028e2:	f7fd febf 	bl	8000664 <HAL_ADC_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80028ec:	f000 f932 	bl	8002b54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	481a      	ldr	r0, [pc, #104]	; (800296c <MX_ADC1_Init+0xec>)
 8002902:	f7fd fef3 	bl	80006ec <HAL_ADC_ConfigChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800290c:	f000 f922 	bl	8002b54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002910:	2301      	movs	r3, #1
 8002912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002914:	2302      	movs	r3, #2
 8002916:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002918:	463b      	mov	r3, r7
 800291a:	4619      	mov	r1, r3
 800291c:	4813      	ldr	r0, [pc, #76]	; (800296c <MX_ADC1_Init+0xec>)
 800291e:	f7fd fee5 	bl	80006ec <HAL_ADC_ConfigChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002928:	f000 f914 	bl	8002b54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800292c:	2304      	movs	r3, #4
 800292e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002930:	2303      	movs	r3, #3
 8002932:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002934:	463b      	mov	r3, r7
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <MX_ADC1_Init+0xec>)
 800293a:	f7fd fed7 	bl	80006ec <HAL_ADC_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002944:	f000 f906 	bl	8002b54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002948:	2306      	movs	r3, #6
 800294a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800294c:	2304      	movs	r3, #4
 800294e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002950:	463b      	mov	r3, r7
 8002952:	4619      	mov	r1, r3
 8002954:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_ADC1_Init+0xec>)
 8002956:	f7fd fec9 	bl	80006ec <HAL_ADC_ConfigChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002960:	f000 f8f8 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000009c 	.word	0x2000009c
 8002970:	40012000 	.word	0x40012000
 8002974:	0f000001 	.word	0x0f000001

08002978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <MX_USART1_UART_Init+0x50>)
 8002980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 8002984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 800299e:	220c      	movs	r2, #12
 80029a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_USART1_UART_Init+0x4c>)
 80029b0:	f7fe fffc 	bl	80019ac <HAL_UART_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029ba:	f000 f8cb 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200000e4 	.word	0x200000e4
 80029c8:	40011000 	.word	0x40011000

080029cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_USART2_UART_Init+0x4c>)
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <MX_USART2_UART_Init+0x50>)
 80029d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <MX_USART2_UART_Init+0x4c>)
 80029d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <MX_USART2_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <MX_USART2_UART_Init+0x4c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <MX_USART2_UART_Init+0x4c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <MX_USART2_UART_Init+0x4c>)
 80029f2:	220c      	movs	r2, #12
 80029f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <MX_USART2_UART_Init+0x4c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <MX_USART2_UART_Init+0x4c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_USART2_UART_Init+0x4c>)
 8002a04:	f7fe ffd2 	bl	80019ac <HAL_UART_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a0e:	f000 f8a1 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000164 	.word	0x20000164
 8002a1c:	40004400 	.word	0x40004400

08002a20 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <MX_USART6_UART_Init+0x4c>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <MX_USART6_UART_Init+0x50>)
 8002a28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <MX_USART6_UART_Init+0x4c>)
 8002a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MX_USART6_UART_Init+0x4c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <MX_USART6_UART_Init+0x4c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <MX_USART6_UART_Init+0x4c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <MX_USART6_UART_Init+0x4c>)
 8002a46:	220c      	movs	r2, #12
 8002a48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <MX_USART6_UART_Init+0x4c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <MX_USART6_UART_Init+0x4c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_USART6_UART_Init+0x4c>)
 8002a58:	f7fe ffa8 	bl	80019ac <HAL_UART_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a62:	f000 f877 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000124 	.word	0x20000124
 8002a70:	40011400 	.word	0x40011400

08002a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
 8002a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <MX_GPIO_Init+0xd0>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2120      	movs	r1, #32
 8002afe:	4812      	ldr	r0, [pc, #72]	; (8002b48 <MX_GPIO_Init+0xd4>)
 8002b00:	f7fe fad8 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <MX_GPIO_Init+0xd8>)
 8002b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <MX_GPIO_Init+0xdc>)
 8002b1a:	f7fe f949 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	4619      	mov	r1, r3
 8002b34:	4804      	ldr	r0, [pc, #16]	; (8002b48 <MX_GPIO_Init+0xd4>)
 8002b36:	f7fe f93b 	bl	8000db0 <HAL_GPIO_Init>

}
 8002b3a:	bf00      	nop
 8002b3c:	3728      	adds	r7, #40	; 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	10210000 	.word	0x10210000
 8002b50:	40020800 	.word	0x40020800

08002b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_MspInit+0x4c>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002ba2:	2006      	movs	r0, #6
 8002ba4:	f7fe f8a0 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_ADC_MspInit+0x7c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d127      	bne.n	8002c26 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_ADC_MspInit+0x80>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <HAL_ADC_MspInit+0x80>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be4:	6453      	str	r3, [r2, #68]	; 0x44
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_ADC_MspInit+0x80>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_ADC_MspInit+0x80>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_ADC_MspInit+0x80>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_ADC_MspInit+0x80>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8002c0e:	2353      	movs	r3, #83	; 0x53
 8002c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c12:	2303      	movs	r3, #3
 8002c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <HAL_ADC_MspInit+0x84>)
 8002c22:	f7fe f8c5 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c26:	bf00      	nop
 8002c28:	3728      	adds	r7, #40	; 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40012000 	.word	0x40012000
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020000 	.word	0x40020000

08002c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08e      	sub	sp, #56	; 0x38
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a53      	ldr	r2, [pc, #332]	; (8002da8 <HAL_UART_MspInit+0x16c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d135      	bne.n	8002cca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	4b52      	ldr	r3, [pc, #328]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a51      	ldr	r2, [pc, #324]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002c68:	f043 0310 	orr.w	r3, r3, #16
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a4a      	ldr	r2, [pc, #296]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b48      	ldr	r3, [pc, #288]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ca8:	2307      	movs	r3, #7
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	483f      	ldr	r0, [pc, #252]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002cb4:	f7fe f87c 	bl	8000db0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2025      	movs	r0, #37	; 0x25
 8002cbe:	f7fe f81e 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cc2:	2025      	movs	r0, #37	; 0x25
 8002cc4:	f7fe f837 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cc8:	e06a      	b.n	8002da0 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a39      	ldr	r2, [pc, #228]	; (8002db4 <HAL_UART_MspInit+0x178>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d12c      	bne.n	8002d2e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	4a33      	ldr	r2, [pc, #204]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce4:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002d00:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d0c:	230c      	movs	r3, #12
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d1c:	2307      	movs	r3, #7
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d24:	4619      	mov	r1, r3
 8002d26:	4822      	ldr	r0, [pc, #136]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002d28:	f7fe f842 	bl	8000db0 <HAL_GPIO_Init>
}
 8002d2c:	e038      	b.n	8002da0 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <HAL_UART_MspInit+0x17c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d133      	bne.n	8002da0 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002d42:	f043 0320 	orr.w	r3, r3, #32
 8002d46:	6453      	str	r3, [r2, #68]	; 0x44
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6313      	str	r3, [r2, #48]	; 0x30
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d70:	23c0      	movs	r3, #192	; 0xc0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d80:	2308      	movs	r3, #8
 8002d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480c      	ldr	r0, [pc, #48]	; (8002dbc <HAL_UART_MspInit+0x180>)
 8002d8c:	f7fe f810 	bl	8000db0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2101      	movs	r1, #1
 8002d94:	2047      	movs	r0, #71	; 0x47
 8002d96:	f7fd ffb2 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d9a:	2047      	movs	r0, #71	; 0x47
 8002d9c:	f7fd ffcb 	bl	8000d36 <HAL_NVIC_EnableIRQ>
}
 8002da0:	bf00      	nop
 8002da2:	3738      	adds	r7, #56	; 0x38
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40011000 	.word	0x40011000
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40004400 	.word	0x40004400
 8002db8:	40011400 	.word	0x40011400
 8002dbc:	40020800 	.word	0x40020800

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <HardFault_Handler+0x4>

08002dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <MemManage_Handler+0x4>

08002dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <BusFault_Handler+0x4>

08002de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <UsageFault_Handler+0x4>

08002de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e14:	f7fd fc06 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <USART1_IRQHandler+0x10>)
 8002e22:	f7fe fea9 	bl	8001b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200000e4 	.word	0x200000e4

08002e30 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <USART6_IRQHandler+0x10>)
 8002e36:	f7fe fe9f 	bl	8001b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000124 	.word	0x20000124

08002e44 <__io_putchar>:

char *__env[1] = { 0 };
char **environ = __env;

__attribute__((weak)) int __io_putchar(int ch)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002e4c:	1d39      	adds	r1, r7, #4
 8002e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e52:	2201      	movs	r2, #1
 8002e54:	4803      	ldr	r0, [pc, #12]	; (8002e64 <__io_putchar+0x20>)
 8002e56:	f7fe fdf6 	bl	8001a46 <HAL_UART_Transmit>
    return ch;
 8002e5a:	687b      	ldr	r3, [r7, #4]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000164 	.word	0x20000164

08002e68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e00a      	b.n	8002e90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e7a:	f3af 8000 	nop.w
 8002e7e:	4601      	mov	r1, r0
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	60ba      	str	r2, [r7, #8]
 8002e86:	b2ca      	uxtb	r2, r1
 8002e88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dbf0      	blt.n	8002e7a <_read+0x12>
	}

return len;
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e009      	b.n	8002ec8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	60ba      	str	r2, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ffc1 	bl	8002e44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbf1      	blt.n	8002eb4 <_write+0x12>
	}
	return len;
 8002ed0:	687b      	ldr	r3, [r7, #4]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_close>:

int _close(int file)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f02:	605a      	str	r2, [r3, #4]
	return 0;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_isatty>:

int _isatty(int file)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
	return 1;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	return 0;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <_sbrk+0x50>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <_sbrk+0x16>
		heap_end = &end;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <_sbrk+0x50>)
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <_sbrk+0x54>)
 8002f58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <_sbrk+0x50>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <_sbrk+0x50>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	466a      	mov	r2, sp
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d907      	bls.n	8002f7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002f6e:	f000 f855 	bl	800301c <__errno>
 8002f72:	4602      	mov	r2, r0
 8002f74:	230c      	movs	r3, #12
 8002f76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7c:	e006      	b.n	8002f8c <_sbrk+0x48>
	}

	heap_end += incr;
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <_sbrk+0x50>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	4a03      	ldr	r2, [pc, #12]	; (8002f94 <_sbrk+0x50>)
 8002f88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	2000008c 	.word	0x2000008c
 8002f98:	200001a8 	.word	0x200001a8

08002f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <SystemInit+0x28>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <SystemInit+0x28>)
 8002fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SystemInit+0x28>)
 8002fb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fb6:	609a      	str	r2, [r3, #8]
#endif
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003000 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fce:	e003      	b.n	8002fd8 <LoopCopyDataInit>

08002fd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fd6:	3104      	adds	r1, #4

08002fd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fd8:	480b      	ldr	r0, [pc, #44]	; (8003008 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fe0:	d3f6      	bcc.n	8002fd0 <CopyDataInit>
  ldr  r2, =_sbss
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fe4:	e002      	b.n	8002fec <LoopFillZerobss>

08002fe6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fe6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fe8:	f842 3b04 	str.w	r3, [r2], #4

08002fec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ff0:	d3f9      	bcc.n	8002fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ff2:	f7ff ffd3 	bl	8002f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ff6:	f000 f817 	bl	8003028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffa:	f7ff fbc3 	bl	8002784 <main>
  bx  lr    
 8002ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003000:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003004:	08003f28 	.word	0x08003f28
  ldr  r0, =_sdata
 8003008:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800300c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003010:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003014:	200001a8 	.word	0x200001a8

08003018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003018:	e7fe      	b.n	8003018 <ADC_IRQHandler>
	...

0800301c <__errno>:
 800301c:	4b01      	ldr	r3, [pc, #4]	; (8003024 <__errno+0x8>)
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2000000c 	.word	0x2000000c

08003028 <__libc_init_array>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	4e0d      	ldr	r6, [pc, #52]	; (8003060 <__libc_init_array+0x38>)
 800302c:	4c0d      	ldr	r4, [pc, #52]	; (8003064 <__libc_init_array+0x3c>)
 800302e:	1ba4      	subs	r4, r4, r6
 8003030:	10a4      	asrs	r4, r4, #2
 8003032:	2500      	movs	r5, #0
 8003034:	42a5      	cmp	r5, r4
 8003036:	d109      	bne.n	800304c <__libc_init_array+0x24>
 8003038:	4e0b      	ldr	r6, [pc, #44]	; (8003068 <__libc_init_array+0x40>)
 800303a:	4c0c      	ldr	r4, [pc, #48]	; (800306c <__libc_init_array+0x44>)
 800303c:	f000 ff04 	bl	8003e48 <_init>
 8003040:	1ba4      	subs	r4, r4, r6
 8003042:	10a4      	asrs	r4, r4, #2
 8003044:	2500      	movs	r5, #0
 8003046:	42a5      	cmp	r5, r4
 8003048:	d105      	bne.n	8003056 <__libc_init_array+0x2e>
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003050:	4798      	blx	r3
 8003052:	3501      	adds	r5, #1
 8003054:	e7ee      	b.n	8003034 <__libc_init_array+0xc>
 8003056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800305a:	4798      	blx	r3
 800305c:	3501      	adds	r5, #1
 800305e:	e7f2      	b.n	8003046 <__libc_init_array+0x1e>
 8003060:	08003f20 	.word	0x08003f20
 8003064:	08003f20 	.word	0x08003f20
 8003068:	08003f20 	.word	0x08003f20
 800306c:	08003f24 	.word	0x08003f24

08003070 <memset>:
 8003070:	4402      	add	r2, r0
 8003072:	4603      	mov	r3, r0
 8003074:	4293      	cmp	r3, r2
 8003076:	d100      	bne.n	800307a <memset+0xa>
 8003078:	4770      	bx	lr
 800307a:	f803 1b01 	strb.w	r1, [r3], #1
 800307e:	e7f9      	b.n	8003074 <memset+0x4>

08003080 <iprintf>:
 8003080:	b40f      	push	{r0, r1, r2, r3}
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <iprintf+0x2c>)
 8003084:	b513      	push	{r0, r1, r4, lr}
 8003086:	681c      	ldr	r4, [r3, #0]
 8003088:	b124      	cbz	r4, 8003094 <iprintf+0x14>
 800308a:	69a3      	ldr	r3, [r4, #24]
 800308c:	b913      	cbnz	r3, 8003094 <iprintf+0x14>
 800308e:	4620      	mov	r0, r4
 8003090:	f000 f84e 	bl	8003130 <__sinit>
 8003094:	ab05      	add	r3, sp, #20
 8003096:	9a04      	ldr	r2, [sp, #16]
 8003098:	68a1      	ldr	r1, [r4, #8]
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	4620      	mov	r0, r4
 800309e:	f000 f955 	bl	800334c <_vfiprintf_r>
 80030a2:	b002      	add	sp, #8
 80030a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030a8:	b004      	add	sp, #16
 80030aa:	4770      	bx	lr
 80030ac:	2000000c 	.word	0x2000000c

080030b0 <std>:
 80030b0:	2300      	movs	r3, #0
 80030b2:	b510      	push	{r4, lr}
 80030b4:	4604      	mov	r4, r0
 80030b6:	e9c0 3300 	strd	r3, r3, [r0]
 80030ba:	6083      	str	r3, [r0, #8]
 80030bc:	8181      	strh	r1, [r0, #12]
 80030be:	6643      	str	r3, [r0, #100]	; 0x64
 80030c0:	81c2      	strh	r2, [r0, #14]
 80030c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030c6:	6183      	str	r3, [r0, #24]
 80030c8:	4619      	mov	r1, r3
 80030ca:	2208      	movs	r2, #8
 80030cc:	305c      	adds	r0, #92	; 0x5c
 80030ce:	f7ff ffcf 	bl	8003070 <memset>
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <std+0x38>)
 80030d4:	6263      	str	r3, [r4, #36]	; 0x24
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <std+0x3c>)
 80030d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <std+0x40>)
 80030dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <std+0x44>)
 80030e0:	6224      	str	r4, [r4, #32]
 80030e2:	6323      	str	r3, [r4, #48]	; 0x30
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	bf00      	nop
 80030e8:	080038a9 	.word	0x080038a9
 80030ec:	080038cb 	.word	0x080038cb
 80030f0:	08003903 	.word	0x08003903
 80030f4:	08003927 	.word	0x08003927

080030f8 <_cleanup_r>:
 80030f8:	4901      	ldr	r1, [pc, #4]	; (8003100 <_cleanup_r+0x8>)
 80030fa:	f000 b885 	b.w	8003208 <_fwalk_reent>
 80030fe:	bf00      	nop
 8003100:	08003c01 	.word	0x08003c01

08003104 <__sfmoreglue>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	1e4a      	subs	r2, r1, #1
 8003108:	2568      	movs	r5, #104	; 0x68
 800310a:	4355      	muls	r5, r2
 800310c:	460e      	mov	r6, r1
 800310e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003112:	f000 f897 	bl	8003244 <_malloc_r>
 8003116:	4604      	mov	r4, r0
 8003118:	b140      	cbz	r0, 800312c <__sfmoreglue+0x28>
 800311a:	2100      	movs	r1, #0
 800311c:	e9c0 1600 	strd	r1, r6, [r0]
 8003120:	300c      	adds	r0, #12
 8003122:	60a0      	str	r0, [r4, #8]
 8003124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003128:	f7ff ffa2 	bl	8003070 <memset>
 800312c:	4620      	mov	r0, r4
 800312e:	bd70      	pop	{r4, r5, r6, pc}

08003130 <__sinit>:
 8003130:	6983      	ldr	r3, [r0, #24]
 8003132:	b510      	push	{r4, lr}
 8003134:	4604      	mov	r4, r0
 8003136:	bb33      	cbnz	r3, 8003186 <__sinit+0x56>
 8003138:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800313c:	6503      	str	r3, [r0, #80]	; 0x50
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <__sinit+0x58>)
 8003140:	4a12      	ldr	r2, [pc, #72]	; (800318c <__sinit+0x5c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6282      	str	r2, [r0, #40]	; 0x28
 8003146:	4298      	cmp	r0, r3
 8003148:	bf04      	itt	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	6183      	streq	r3, [r0, #24]
 800314e:	f000 f81f 	bl	8003190 <__sfp>
 8003152:	6060      	str	r0, [r4, #4]
 8003154:	4620      	mov	r0, r4
 8003156:	f000 f81b 	bl	8003190 <__sfp>
 800315a:	60a0      	str	r0, [r4, #8]
 800315c:	4620      	mov	r0, r4
 800315e:	f000 f817 	bl	8003190 <__sfp>
 8003162:	2200      	movs	r2, #0
 8003164:	60e0      	str	r0, [r4, #12]
 8003166:	2104      	movs	r1, #4
 8003168:	6860      	ldr	r0, [r4, #4]
 800316a:	f7ff ffa1 	bl	80030b0 <std>
 800316e:	2201      	movs	r2, #1
 8003170:	2109      	movs	r1, #9
 8003172:	68a0      	ldr	r0, [r4, #8]
 8003174:	f7ff ff9c 	bl	80030b0 <std>
 8003178:	2202      	movs	r2, #2
 800317a:	2112      	movs	r1, #18
 800317c:	68e0      	ldr	r0, [r4, #12]
 800317e:	f7ff ff97 	bl	80030b0 <std>
 8003182:	2301      	movs	r3, #1
 8003184:	61a3      	str	r3, [r4, #24]
 8003186:	bd10      	pop	{r4, pc}
 8003188:	08003e80 	.word	0x08003e80
 800318c:	080030f9 	.word	0x080030f9

08003190 <__sfp>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <__sfp+0x70>)
 8003194:	681e      	ldr	r6, [r3, #0]
 8003196:	69b3      	ldr	r3, [r6, #24]
 8003198:	4607      	mov	r7, r0
 800319a:	b913      	cbnz	r3, 80031a2 <__sfp+0x12>
 800319c:	4630      	mov	r0, r6
 800319e:	f7ff ffc7 	bl	8003130 <__sinit>
 80031a2:	3648      	adds	r6, #72	; 0x48
 80031a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	d503      	bpl.n	80031b4 <__sfp+0x24>
 80031ac:	6833      	ldr	r3, [r6, #0]
 80031ae:	b133      	cbz	r3, 80031be <__sfp+0x2e>
 80031b0:	6836      	ldr	r6, [r6, #0]
 80031b2:	e7f7      	b.n	80031a4 <__sfp+0x14>
 80031b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031b8:	b16d      	cbz	r5, 80031d6 <__sfp+0x46>
 80031ba:	3468      	adds	r4, #104	; 0x68
 80031bc:	e7f4      	b.n	80031a8 <__sfp+0x18>
 80031be:	2104      	movs	r1, #4
 80031c0:	4638      	mov	r0, r7
 80031c2:	f7ff ff9f 	bl	8003104 <__sfmoreglue>
 80031c6:	6030      	str	r0, [r6, #0]
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d1f1      	bne.n	80031b0 <__sfp+0x20>
 80031cc:	230c      	movs	r3, #12
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	4604      	mov	r4, r0
 80031d2:	4620      	mov	r0, r4
 80031d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <__sfp+0x74>)
 80031d8:	6665      	str	r5, [r4, #100]	; 0x64
 80031da:	e9c4 5500 	strd	r5, r5, [r4]
 80031de:	60a5      	str	r5, [r4, #8]
 80031e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80031e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80031e8:	2208      	movs	r2, #8
 80031ea:	4629      	mov	r1, r5
 80031ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031f0:	f7ff ff3e 	bl	8003070 <memset>
 80031f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031fc:	e7e9      	b.n	80031d2 <__sfp+0x42>
 80031fe:	bf00      	nop
 8003200:	08003e80 	.word	0x08003e80
 8003204:	ffff0001 	.word	0xffff0001

08003208 <_fwalk_reent>:
 8003208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800320c:	4680      	mov	r8, r0
 800320e:	4689      	mov	r9, r1
 8003210:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003214:	2600      	movs	r6, #0
 8003216:	b914      	cbnz	r4, 800321e <_fwalk_reent+0x16>
 8003218:	4630      	mov	r0, r6
 800321a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800321e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003222:	3f01      	subs	r7, #1
 8003224:	d501      	bpl.n	800322a <_fwalk_reent+0x22>
 8003226:	6824      	ldr	r4, [r4, #0]
 8003228:	e7f5      	b.n	8003216 <_fwalk_reent+0xe>
 800322a:	89ab      	ldrh	r3, [r5, #12]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d907      	bls.n	8003240 <_fwalk_reent+0x38>
 8003230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003234:	3301      	adds	r3, #1
 8003236:	d003      	beq.n	8003240 <_fwalk_reent+0x38>
 8003238:	4629      	mov	r1, r5
 800323a:	4640      	mov	r0, r8
 800323c:	47c8      	blx	r9
 800323e:	4306      	orrs	r6, r0
 8003240:	3568      	adds	r5, #104	; 0x68
 8003242:	e7ee      	b.n	8003222 <_fwalk_reent+0x1a>

08003244 <_malloc_r>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	1ccd      	adds	r5, r1, #3
 8003248:	f025 0503 	bic.w	r5, r5, #3
 800324c:	3508      	adds	r5, #8
 800324e:	2d0c      	cmp	r5, #12
 8003250:	bf38      	it	cc
 8003252:	250c      	movcc	r5, #12
 8003254:	2d00      	cmp	r5, #0
 8003256:	4606      	mov	r6, r0
 8003258:	db01      	blt.n	800325e <_malloc_r+0x1a>
 800325a:	42a9      	cmp	r1, r5
 800325c:	d903      	bls.n	8003266 <_malloc_r+0x22>
 800325e:	230c      	movs	r3, #12
 8003260:	6033      	str	r3, [r6, #0]
 8003262:	2000      	movs	r0, #0
 8003264:	bd70      	pop	{r4, r5, r6, pc}
 8003266:	f000 fd6b 	bl	8003d40 <__malloc_lock>
 800326a:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <_malloc_r+0xac>)
 800326c:	6814      	ldr	r4, [r2, #0]
 800326e:	4621      	mov	r1, r4
 8003270:	b991      	cbnz	r1, 8003298 <_malloc_r+0x54>
 8003272:	4c20      	ldr	r4, [pc, #128]	; (80032f4 <_malloc_r+0xb0>)
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	b91b      	cbnz	r3, 8003280 <_malloc_r+0x3c>
 8003278:	4630      	mov	r0, r6
 800327a:	f000 fb05 	bl	8003888 <_sbrk_r>
 800327e:	6020      	str	r0, [r4, #0]
 8003280:	4629      	mov	r1, r5
 8003282:	4630      	mov	r0, r6
 8003284:	f000 fb00 	bl	8003888 <_sbrk_r>
 8003288:	1c43      	adds	r3, r0, #1
 800328a:	d124      	bne.n	80032d6 <_malloc_r+0x92>
 800328c:	230c      	movs	r3, #12
 800328e:	6033      	str	r3, [r6, #0]
 8003290:	4630      	mov	r0, r6
 8003292:	f000 fd56 	bl	8003d42 <__malloc_unlock>
 8003296:	e7e4      	b.n	8003262 <_malloc_r+0x1e>
 8003298:	680b      	ldr	r3, [r1, #0]
 800329a:	1b5b      	subs	r3, r3, r5
 800329c:	d418      	bmi.n	80032d0 <_malloc_r+0x8c>
 800329e:	2b0b      	cmp	r3, #11
 80032a0:	d90f      	bls.n	80032c2 <_malloc_r+0x7e>
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	50cd      	str	r5, [r1, r3]
 80032a6:	18cc      	adds	r4, r1, r3
 80032a8:	4630      	mov	r0, r6
 80032aa:	f000 fd4a 	bl	8003d42 <__malloc_unlock>
 80032ae:	f104 000b 	add.w	r0, r4, #11
 80032b2:	1d23      	adds	r3, r4, #4
 80032b4:	f020 0007 	bic.w	r0, r0, #7
 80032b8:	1ac3      	subs	r3, r0, r3
 80032ba:	d0d3      	beq.n	8003264 <_malloc_r+0x20>
 80032bc:	425a      	negs	r2, r3
 80032be:	50e2      	str	r2, [r4, r3]
 80032c0:	e7d0      	b.n	8003264 <_malloc_r+0x20>
 80032c2:	428c      	cmp	r4, r1
 80032c4:	684b      	ldr	r3, [r1, #4]
 80032c6:	bf16      	itet	ne
 80032c8:	6063      	strne	r3, [r4, #4]
 80032ca:	6013      	streq	r3, [r2, #0]
 80032cc:	460c      	movne	r4, r1
 80032ce:	e7eb      	b.n	80032a8 <_malloc_r+0x64>
 80032d0:	460c      	mov	r4, r1
 80032d2:	6849      	ldr	r1, [r1, #4]
 80032d4:	e7cc      	b.n	8003270 <_malloc_r+0x2c>
 80032d6:	1cc4      	adds	r4, r0, #3
 80032d8:	f024 0403 	bic.w	r4, r4, #3
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d005      	beq.n	80032ec <_malloc_r+0xa8>
 80032e0:	1a21      	subs	r1, r4, r0
 80032e2:	4630      	mov	r0, r6
 80032e4:	f000 fad0 	bl	8003888 <_sbrk_r>
 80032e8:	3001      	adds	r0, #1
 80032ea:	d0cf      	beq.n	800328c <_malloc_r+0x48>
 80032ec:	6025      	str	r5, [r4, #0]
 80032ee:	e7db      	b.n	80032a8 <_malloc_r+0x64>
 80032f0:	20000090 	.word	0x20000090
 80032f4:	20000094 	.word	0x20000094

080032f8 <__sfputc_r>:
 80032f8:	6893      	ldr	r3, [r2, #8]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	b410      	push	{r4}
 8003300:	6093      	str	r3, [r2, #8]
 8003302:	da08      	bge.n	8003316 <__sfputc_r+0x1e>
 8003304:	6994      	ldr	r4, [r2, #24]
 8003306:	42a3      	cmp	r3, r4
 8003308:	db01      	blt.n	800330e <__sfputc_r+0x16>
 800330a:	290a      	cmp	r1, #10
 800330c:	d103      	bne.n	8003316 <__sfputc_r+0x1e>
 800330e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003312:	f000 bb0d 	b.w	8003930 <__swbuf_r>
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	1c58      	adds	r0, r3, #1
 800331a:	6010      	str	r0, [r2, #0]
 800331c:	7019      	strb	r1, [r3, #0]
 800331e:	4608      	mov	r0, r1
 8003320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003324:	4770      	bx	lr

08003326 <__sfputs_r>:
 8003326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003328:	4606      	mov	r6, r0
 800332a:	460f      	mov	r7, r1
 800332c:	4614      	mov	r4, r2
 800332e:	18d5      	adds	r5, r2, r3
 8003330:	42ac      	cmp	r4, r5
 8003332:	d101      	bne.n	8003338 <__sfputs_r+0x12>
 8003334:	2000      	movs	r0, #0
 8003336:	e007      	b.n	8003348 <__sfputs_r+0x22>
 8003338:	463a      	mov	r2, r7
 800333a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800333e:	4630      	mov	r0, r6
 8003340:	f7ff ffda 	bl	80032f8 <__sfputc_r>
 8003344:	1c43      	adds	r3, r0, #1
 8003346:	d1f3      	bne.n	8003330 <__sfputs_r+0xa>
 8003348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800334c <_vfiprintf_r>:
 800334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003350:	460c      	mov	r4, r1
 8003352:	b09d      	sub	sp, #116	; 0x74
 8003354:	4617      	mov	r7, r2
 8003356:	461d      	mov	r5, r3
 8003358:	4606      	mov	r6, r0
 800335a:	b118      	cbz	r0, 8003364 <_vfiprintf_r+0x18>
 800335c:	6983      	ldr	r3, [r0, #24]
 800335e:	b90b      	cbnz	r3, 8003364 <_vfiprintf_r+0x18>
 8003360:	f7ff fee6 	bl	8003130 <__sinit>
 8003364:	4b7c      	ldr	r3, [pc, #496]	; (8003558 <_vfiprintf_r+0x20c>)
 8003366:	429c      	cmp	r4, r3
 8003368:	d158      	bne.n	800341c <_vfiprintf_r+0xd0>
 800336a:	6874      	ldr	r4, [r6, #4]
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	0718      	lsls	r0, r3, #28
 8003370:	d55e      	bpl.n	8003430 <_vfiprintf_r+0xe4>
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05b      	beq.n	8003430 <_vfiprintf_r+0xe4>
 8003378:	2300      	movs	r3, #0
 800337a:	9309      	str	r3, [sp, #36]	; 0x24
 800337c:	2320      	movs	r3, #32
 800337e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003382:	2330      	movs	r3, #48	; 0x30
 8003384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003388:	9503      	str	r5, [sp, #12]
 800338a:	f04f 0b01 	mov.w	fp, #1
 800338e:	46b8      	mov	r8, r7
 8003390:	4645      	mov	r5, r8
 8003392:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003396:	b10b      	cbz	r3, 800339c <_vfiprintf_r+0x50>
 8003398:	2b25      	cmp	r3, #37	; 0x25
 800339a:	d154      	bne.n	8003446 <_vfiprintf_r+0xfa>
 800339c:	ebb8 0a07 	subs.w	sl, r8, r7
 80033a0:	d00b      	beq.n	80033ba <_vfiprintf_r+0x6e>
 80033a2:	4653      	mov	r3, sl
 80033a4:	463a      	mov	r2, r7
 80033a6:	4621      	mov	r1, r4
 80033a8:	4630      	mov	r0, r6
 80033aa:	f7ff ffbc 	bl	8003326 <__sfputs_r>
 80033ae:	3001      	adds	r0, #1
 80033b0:	f000 80c2 	beq.w	8003538 <_vfiprintf_r+0x1ec>
 80033b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033b6:	4453      	add	r3, sl
 80033b8:	9309      	str	r3, [sp, #36]	; 0x24
 80033ba:	f898 3000 	ldrb.w	r3, [r8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80ba 	beq.w	8003538 <_vfiprintf_r+0x1ec>
 80033c4:	2300      	movs	r3, #0
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ce:	9304      	str	r3, [sp, #16]
 80033d0:	9307      	str	r3, [sp, #28]
 80033d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033d6:	931a      	str	r3, [sp, #104]	; 0x68
 80033d8:	46a8      	mov	r8, r5
 80033da:	2205      	movs	r2, #5
 80033dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80033e0:	485e      	ldr	r0, [pc, #376]	; (800355c <_vfiprintf_r+0x210>)
 80033e2:	f7fc fefd 	bl	80001e0 <memchr>
 80033e6:	9b04      	ldr	r3, [sp, #16]
 80033e8:	bb78      	cbnz	r0, 800344a <_vfiprintf_r+0xfe>
 80033ea:	06d9      	lsls	r1, r3, #27
 80033ec:	bf44      	itt	mi
 80033ee:	2220      	movmi	r2, #32
 80033f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033f4:	071a      	lsls	r2, r3, #28
 80033f6:	bf44      	itt	mi
 80033f8:	222b      	movmi	r2, #43	; 0x2b
 80033fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033fe:	782a      	ldrb	r2, [r5, #0]
 8003400:	2a2a      	cmp	r2, #42	; 0x2a
 8003402:	d02a      	beq.n	800345a <_vfiprintf_r+0x10e>
 8003404:	9a07      	ldr	r2, [sp, #28]
 8003406:	46a8      	mov	r8, r5
 8003408:	2000      	movs	r0, #0
 800340a:	250a      	movs	r5, #10
 800340c:	4641      	mov	r1, r8
 800340e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003412:	3b30      	subs	r3, #48	; 0x30
 8003414:	2b09      	cmp	r3, #9
 8003416:	d969      	bls.n	80034ec <_vfiprintf_r+0x1a0>
 8003418:	b360      	cbz	r0, 8003474 <_vfiprintf_r+0x128>
 800341a:	e024      	b.n	8003466 <_vfiprintf_r+0x11a>
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <_vfiprintf_r+0x214>)
 800341e:	429c      	cmp	r4, r3
 8003420:	d101      	bne.n	8003426 <_vfiprintf_r+0xda>
 8003422:	68b4      	ldr	r4, [r6, #8]
 8003424:	e7a2      	b.n	800336c <_vfiprintf_r+0x20>
 8003426:	4b4f      	ldr	r3, [pc, #316]	; (8003564 <_vfiprintf_r+0x218>)
 8003428:	429c      	cmp	r4, r3
 800342a:	bf08      	it	eq
 800342c:	68f4      	ldreq	r4, [r6, #12]
 800342e:	e79d      	b.n	800336c <_vfiprintf_r+0x20>
 8003430:	4621      	mov	r1, r4
 8003432:	4630      	mov	r0, r6
 8003434:	f000 fae0 	bl	80039f8 <__swsetup_r>
 8003438:	2800      	cmp	r0, #0
 800343a:	d09d      	beq.n	8003378 <_vfiprintf_r+0x2c>
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	b01d      	add	sp, #116	; 0x74
 8003442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003446:	46a8      	mov	r8, r5
 8003448:	e7a2      	b.n	8003390 <_vfiprintf_r+0x44>
 800344a:	4a44      	ldr	r2, [pc, #272]	; (800355c <_vfiprintf_r+0x210>)
 800344c:	1a80      	subs	r0, r0, r2
 800344e:	fa0b f000 	lsl.w	r0, fp, r0
 8003452:	4318      	orrs	r0, r3
 8003454:	9004      	str	r0, [sp, #16]
 8003456:	4645      	mov	r5, r8
 8003458:	e7be      	b.n	80033d8 <_vfiprintf_r+0x8c>
 800345a:	9a03      	ldr	r2, [sp, #12]
 800345c:	1d11      	adds	r1, r2, #4
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	9103      	str	r1, [sp, #12]
 8003462:	2a00      	cmp	r2, #0
 8003464:	db01      	blt.n	800346a <_vfiprintf_r+0x11e>
 8003466:	9207      	str	r2, [sp, #28]
 8003468:	e004      	b.n	8003474 <_vfiprintf_r+0x128>
 800346a:	4252      	negs	r2, r2
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	9207      	str	r2, [sp, #28]
 8003472:	9304      	str	r3, [sp, #16]
 8003474:	f898 3000 	ldrb.w	r3, [r8]
 8003478:	2b2e      	cmp	r3, #46	; 0x2e
 800347a:	d10e      	bne.n	800349a <_vfiprintf_r+0x14e>
 800347c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003480:	2b2a      	cmp	r3, #42	; 0x2a
 8003482:	d138      	bne.n	80034f6 <_vfiprintf_r+0x1aa>
 8003484:	9b03      	ldr	r3, [sp, #12]
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	9203      	str	r2, [sp, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	bfb8      	it	lt
 8003490:	f04f 33ff 	movlt.w	r3, #4294967295
 8003494:	f108 0802 	add.w	r8, r8, #2
 8003498:	9305      	str	r3, [sp, #20]
 800349a:	4d33      	ldr	r5, [pc, #204]	; (8003568 <_vfiprintf_r+0x21c>)
 800349c:	f898 1000 	ldrb.w	r1, [r8]
 80034a0:	2203      	movs	r2, #3
 80034a2:	4628      	mov	r0, r5
 80034a4:	f7fc fe9c 	bl	80001e0 <memchr>
 80034a8:	b140      	cbz	r0, 80034bc <_vfiprintf_r+0x170>
 80034aa:	2340      	movs	r3, #64	; 0x40
 80034ac:	1b40      	subs	r0, r0, r5
 80034ae:	fa03 f000 	lsl.w	r0, r3, r0
 80034b2:	9b04      	ldr	r3, [sp, #16]
 80034b4:	4303      	orrs	r3, r0
 80034b6:	f108 0801 	add.w	r8, r8, #1
 80034ba:	9304      	str	r3, [sp, #16]
 80034bc:	f898 1000 	ldrb.w	r1, [r8]
 80034c0:	482a      	ldr	r0, [pc, #168]	; (800356c <_vfiprintf_r+0x220>)
 80034c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c6:	2206      	movs	r2, #6
 80034c8:	f108 0701 	add.w	r7, r8, #1
 80034cc:	f7fc fe88 	bl	80001e0 <memchr>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d037      	beq.n	8003544 <_vfiprintf_r+0x1f8>
 80034d4:	4b26      	ldr	r3, [pc, #152]	; (8003570 <_vfiprintf_r+0x224>)
 80034d6:	bb1b      	cbnz	r3, 8003520 <_vfiprintf_r+0x1d4>
 80034d8:	9b03      	ldr	r3, [sp, #12]
 80034da:	3307      	adds	r3, #7
 80034dc:	f023 0307 	bic.w	r3, r3, #7
 80034e0:	3308      	adds	r3, #8
 80034e2:	9303      	str	r3, [sp, #12]
 80034e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e6:	444b      	add	r3, r9
 80034e8:	9309      	str	r3, [sp, #36]	; 0x24
 80034ea:	e750      	b.n	800338e <_vfiprintf_r+0x42>
 80034ec:	fb05 3202 	mla	r2, r5, r2, r3
 80034f0:	2001      	movs	r0, #1
 80034f2:	4688      	mov	r8, r1
 80034f4:	e78a      	b.n	800340c <_vfiprintf_r+0xc0>
 80034f6:	2300      	movs	r3, #0
 80034f8:	f108 0801 	add.w	r8, r8, #1
 80034fc:	9305      	str	r3, [sp, #20]
 80034fe:	4619      	mov	r1, r3
 8003500:	250a      	movs	r5, #10
 8003502:	4640      	mov	r0, r8
 8003504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003508:	3a30      	subs	r2, #48	; 0x30
 800350a:	2a09      	cmp	r2, #9
 800350c:	d903      	bls.n	8003516 <_vfiprintf_r+0x1ca>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0c3      	beq.n	800349a <_vfiprintf_r+0x14e>
 8003512:	9105      	str	r1, [sp, #20]
 8003514:	e7c1      	b.n	800349a <_vfiprintf_r+0x14e>
 8003516:	fb05 2101 	mla	r1, r5, r1, r2
 800351a:	2301      	movs	r3, #1
 800351c:	4680      	mov	r8, r0
 800351e:	e7f0      	b.n	8003502 <_vfiprintf_r+0x1b6>
 8003520:	ab03      	add	r3, sp, #12
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	4622      	mov	r2, r4
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <_vfiprintf_r+0x228>)
 8003528:	a904      	add	r1, sp, #16
 800352a:	4630      	mov	r0, r6
 800352c:	f3af 8000 	nop.w
 8003530:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003534:	4681      	mov	r9, r0
 8003536:	d1d5      	bne.n	80034e4 <_vfiprintf_r+0x198>
 8003538:	89a3      	ldrh	r3, [r4, #12]
 800353a:	065b      	lsls	r3, r3, #25
 800353c:	f53f af7e 	bmi.w	800343c <_vfiprintf_r+0xf0>
 8003540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003542:	e77d      	b.n	8003440 <_vfiprintf_r+0xf4>
 8003544:	ab03      	add	r3, sp, #12
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	4622      	mov	r2, r4
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <_vfiprintf_r+0x228>)
 800354c:	a904      	add	r1, sp, #16
 800354e:	4630      	mov	r0, r6
 8003550:	f000 f888 	bl	8003664 <_printf_i>
 8003554:	e7ec      	b.n	8003530 <_vfiprintf_r+0x1e4>
 8003556:	bf00      	nop
 8003558:	08003ea4 	.word	0x08003ea4
 800355c:	08003ee4 	.word	0x08003ee4
 8003560:	08003ec4 	.word	0x08003ec4
 8003564:	08003e84 	.word	0x08003e84
 8003568:	08003eea 	.word	0x08003eea
 800356c:	08003eee 	.word	0x08003eee
 8003570:	00000000 	.word	0x00000000
 8003574:	08003327 	.word	0x08003327

08003578 <_printf_common>:
 8003578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	4691      	mov	r9, r2
 800357e:	461f      	mov	r7, r3
 8003580:	688a      	ldr	r2, [r1, #8]
 8003582:	690b      	ldr	r3, [r1, #16]
 8003584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003588:	4293      	cmp	r3, r2
 800358a:	bfb8      	it	lt
 800358c:	4613      	movlt	r3, r2
 800358e:	f8c9 3000 	str.w	r3, [r9]
 8003592:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003596:	4606      	mov	r6, r0
 8003598:	460c      	mov	r4, r1
 800359a:	b112      	cbz	r2, 80035a2 <_printf_common+0x2a>
 800359c:	3301      	adds	r3, #1
 800359e:	f8c9 3000 	str.w	r3, [r9]
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	0699      	lsls	r1, r3, #26
 80035a6:	bf42      	ittt	mi
 80035a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80035ac:	3302      	addmi	r3, #2
 80035ae:	f8c9 3000 	strmi.w	r3, [r9]
 80035b2:	6825      	ldr	r5, [r4, #0]
 80035b4:	f015 0506 	ands.w	r5, r5, #6
 80035b8:	d107      	bne.n	80035ca <_printf_common+0x52>
 80035ba:	f104 0a19 	add.w	sl, r4, #25
 80035be:	68e3      	ldr	r3, [r4, #12]
 80035c0:	f8d9 2000 	ldr.w	r2, [r9]
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	42ab      	cmp	r3, r5
 80035c8:	dc28      	bgt.n	800361c <_printf_common+0xa4>
 80035ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	3300      	adds	r3, #0
 80035d2:	bf18      	it	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	0692      	lsls	r2, r2, #26
 80035d8:	d42d      	bmi.n	8003636 <_printf_common+0xbe>
 80035da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035de:	4639      	mov	r1, r7
 80035e0:	4630      	mov	r0, r6
 80035e2:	47c0      	blx	r8
 80035e4:	3001      	adds	r0, #1
 80035e6:	d020      	beq.n	800362a <_printf_common+0xb2>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	68e5      	ldr	r5, [r4, #12]
 80035ec:	f8d9 2000 	ldr.w	r2, [r9]
 80035f0:	f003 0306 	and.w	r3, r3, #6
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	bf08      	it	eq
 80035f8:	1aad      	subeq	r5, r5, r2
 80035fa:	68a3      	ldr	r3, [r4, #8]
 80035fc:	6922      	ldr	r2, [r4, #16]
 80035fe:	bf0c      	ite	eq
 8003600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003604:	2500      	movne	r5, #0
 8003606:	4293      	cmp	r3, r2
 8003608:	bfc4      	itt	gt
 800360a:	1a9b      	subgt	r3, r3, r2
 800360c:	18ed      	addgt	r5, r5, r3
 800360e:	f04f 0900 	mov.w	r9, #0
 8003612:	341a      	adds	r4, #26
 8003614:	454d      	cmp	r5, r9
 8003616:	d11a      	bne.n	800364e <_printf_common+0xd6>
 8003618:	2000      	movs	r0, #0
 800361a:	e008      	b.n	800362e <_printf_common+0xb6>
 800361c:	2301      	movs	r3, #1
 800361e:	4652      	mov	r2, sl
 8003620:	4639      	mov	r1, r7
 8003622:	4630      	mov	r0, r6
 8003624:	47c0      	blx	r8
 8003626:	3001      	adds	r0, #1
 8003628:	d103      	bne.n	8003632 <_printf_common+0xba>
 800362a:	f04f 30ff 	mov.w	r0, #4294967295
 800362e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003632:	3501      	adds	r5, #1
 8003634:	e7c3      	b.n	80035be <_printf_common+0x46>
 8003636:	18e1      	adds	r1, r4, r3
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	2030      	movs	r0, #48	; 0x30
 800363c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003640:	4422      	add	r2, r4
 8003642:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800364a:	3302      	adds	r3, #2
 800364c:	e7c5      	b.n	80035da <_printf_common+0x62>
 800364e:	2301      	movs	r3, #1
 8003650:	4622      	mov	r2, r4
 8003652:	4639      	mov	r1, r7
 8003654:	4630      	mov	r0, r6
 8003656:	47c0      	blx	r8
 8003658:	3001      	adds	r0, #1
 800365a:	d0e6      	beq.n	800362a <_printf_common+0xb2>
 800365c:	f109 0901 	add.w	r9, r9, #1
 8003660:	e7d8      	b.n	8003614 <_printf_common+0x9c>
	...

08003664 <_printf_i>:
 8003664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003668:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800366c:	460c      	mov	r4, r1
 800366e:	7e09      	ldrb	r1, [r1, #24]
 8003670:	b085      	sub	sp, #20
 8003672:	296e      	cmp	r1, #110	; 0x6e
 8003674:	4617      	mov	r7, r2
 8003676:	4606      	mov	r6, r0
 8003678:	4698      	mov	r8, r3
 800367a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800367c:	f000 80b3 	beq.w	80037e6 <_printf_i+0x182>
 8003680:	d822      	bhi.n	80036c8 <_printf_i+0x64>
 8003682:	2963      	cmp	r1, #99	; 0x63
 8003684:	d036      	beq.n	80036f4 <_printf_i+0x90>
 8003686:	d80a      	bhi.n	800369e <_printf_i+0x3a>
 8003688:	2900      	cmp	r1, #0
 800368a:	f000 80b9 	beq.w	8003800 <_printf_i+0x19c>
 800368e:	2958      	cmp	r1, #88	; 0x58
 8003690:	f000 8083 	beq.w	800379a <_printf_i+0x136>
 8003694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003698:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800369c:	e032      	b.n	8003704 <_printf_i+0xa0>
 800369e:	2964      	cmp	r1, #100	; 0x64
 80036a0:	d001      	beq.n	80036a6 <_printf_i+0x42>
 80036a2:	2969      	cmp	r1, #105	; 0x69
 80036a4:	d1f6      	bne.n	8003694 <_printf_i+0x30>
 80036a6:	6820      	ldr	r0, [r4, #0]
 80036a8:	6813      	ldr	r3, [r2, #0]
 80036aa:	0605      	lsls	r5, r0, #24
 80036ac:	f103 0104 	add.w	r1, r3, #4
 80036b0:	d52a      	bpl.n	8003708 <_printf_i+0xa4>
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	da03      	bge.n	80036c2 <_printf_i+0x5e>
 80036ba:	222d      	movs	r2, #45	; 0x2d
 80036bc:	425b      	negs	r3, r3
 80036be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036c2:	486f      	ldr	r0, [pc, #444]	; (8003880 <_printf_i+0x21c>)
 80036c4:	220a      	movs	r2, #10
 80036c6:	e039      	b.n	800373c <_printf_i+0xd8>
 80036c8:	2973      	cmp	r1, #115	; 0x73
 80036ca:	f000 809d 	beq.w	8003808 <_printf_i+0x1a4>
 80036ce:	d808      	bhi.n	80036e2 <_printf_i+0x7e>
 80036d0:	296f      	cmp	r1, #111	; 0x6f
 80036d2:	d020      	beq.n	8003716 <_printf_i+0xb2>
 80036d4:	2970      	cmp	r1, #112	; 0x70
 80036d6:	d1dd      	bne.n	8003694 <_printf_i+0x30>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	f043 0320 	orr.w	r3, r3, #32
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	e003      	b.n	80036ea <_printf_i+0x86>
 80036e2:	2975      	cmp	r1, #117	; 0x75
 80036e4:	d017      	beq.n	8003716 <_printf_i+0xb2>
 80036e6:	2978      	cmp	r1, #120	; 0x78
 80036e8:	d1d4      	bne.n	8003694 <_printf_i+0x30>
 80036ea:	2378      	movs	r3, #120	; 0x78
 80036ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036f0:	4864      	ldr	r0, [pc, #400]	; (8003884 <_printf_i+0x220>)
 80036f2:	e055      	b.n	80037a0 <_printf_i+0x13c>
 80036f4:	6813      	ldr	r3, [r2, #0]
 80036f6:	1d19      	adds	r1, r3, #4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6011      	str	r1, [r2, #0]
 80036fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003704:	2301      	movs	r3, #1
 8003706:	e08c      	b.n	8003822 <_printf_i+0x1be>
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6011      	str	r1, [r2, #0]
 800370c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003710:	bf18      	it	ne
 8003712:	b21b      	sxthne	r3, r3
 8003714:	e7cf      	b.n	80036b6 <_printf_i+0x52>
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	6825      	ldr	r5, [r4, #0]
 800371a:	1d18      	adds	r0, r3, #4
 800371c:	6010      	str	r0, [r2, #0]
 800371e:	0628      	lsls	r0, r5, #24
 8003720:	d501      	bpl.n	8003726 <_printf_i+0xc2>
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	e002      	b.n	800372c <_printf_i+0xc8>
 8003726:	0668      	lsls	r0, r5, #25
 8003728:	d5fb      	bpl.n	8003722 <_printf_i+0xbe>
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	4854      	ldr	r0, [pc, #336]	; (8003880 <_printf_i+0x21c>)
 800372e:	296f      	cmp	r1, #111	; 0x6f
 8003730:	bf14      	ite	ne
 8003732:	220a      	movne	r2, #10
 8003734:	2208      	moveq	r2, #8
 8003736:	2100      	movs	r1, #0
 8003738:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800373c:	6865      	ldr	r5, [r4, #4]
 800373e:	60a5      	str	r5, [r4, #8]
 8003740:	2d00      	cmp	r5, #0
 8003742:	f2c0 8095 	blt.w	8003870 <_printf_i+0x20c>
 8003746:	6821      	ldr	r1, [r4, #0]
 8003748:	f021 0104 	bic.w	r1, r1, #4
 800374c:	6021      	str	r1, [r4, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13d      	bne.n	80037ce <_printf_i+0x16a>
 8003752:	2d00      	cmp	r5, #0
 8003754:	f040 808e 	bne.w	8003874 <_printf_i+0x210>
 8003758:	4665      	mov	r5, ip
 800375a:	2a08      	cmp	r2, #8
 800375c:	d10b      	bne.n	8003776 <_printf_i+0x112>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	07db      	lsls	r3, r3, #31
 8003762:	d508      	bpl.n	8003776 <_printf_i+0x112>
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	6862      	ldr	r2, [r4, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	bfde      	ittt	le
 800376c:	2330      	movle	r3, #48	; 0x30
 800376e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003772:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003776:	ebac 0305 	sub.w	r3, ip, r5
 800377a:	6123      	str	r3, [r4, #16]
 800377c:	f8cd 8000 	str.w	r8, [sp]
 8003780:	463b      	mov	r3, r7
 8003782:	aa03      	add	r2, sp, #12
 8003784:	4621      	mov	r1, r4
 8003786:	4630      	mov	r0, r6
 8003788:	f7ff fef6 	bl	8003578 <_printf_common>
 800378c:	3001      	adds	r0, #1
 800378e:	d14d      	bne.n	800382c <_printf_i+0x1c8>
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	b005      	add	sp, #20
 8003796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800379a:	4839      	ldr	r0, [pc, #228]	; (8003880 <_printf_i+0x21c>)
 800379c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	6821      	ldr	r1, [r4, #0]
 80037a4:	1d1d      	adds	r5, r3, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6015      	str	r5, [r2, #0]
 80037aa:	060a      	lsls	r2, r1, #24
 80037ac:	d50b      	bpl.n	80037c6 <_printf_i+0x162>
 80037ae:	07ca      	lsls	r2, r1, #31
 80037b0:	bf44      	itt	mi
 80037b2:	f041 0120 	orrmi.w	r1, r1, #32
 80037b6:	6021      	strmi	r1, [r4, #0]
 80037b8:	b91b      	cbnz	r3, 80037c2 <_printf_i+0x15e>
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	f022 0220 	bic.w	r2, r2, #32
 80037c0:	6022      	str	r2, [r4, #0]
 80037c2:	2210      	movs	r2, #16
 80037c4:	e7b7      	b.n	8003736 <_printf_i+0xd2>
 80037c6:	064d      	lsls	r5, r1, #25
 80037c8:	bf48      	it	mi
 80037ca:	b29b      	uxthmi	r3, r3
 80037cc:	e7ef      	b.n	80037ae <_printf_i+0x14a>
 80037ce:	4665      	mov	r5, ip
 80037d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80037d4:	fb02 3311 	mls	r3, r2, r1, r3
 80037d8:	5cc3      	ldrb	r3, [r0, r3]
 80037da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037de:	460b      	mov	r3, r1
 80037e0:	2900      	cmp	r1, #0
 80037e2:	d1f5      	bne.n	80037d0 <_printf_i+0x16c>
 80037e4:	e7b9      	b.n	800375a <_printf_i+0xf6>
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	6825      	ldr	r5, [r4, #0]
 80037ea:	6961      	ldr	r1, [r4, #20]
 80037ec:	1d18      	adds	r0, r3, #4
 80037ee:	6010      	str	r0, [r2, #0]
 80037f0:	0628      	lsls	r0, r5, #24
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	d501      	bpl.n	80037fa <_printf_i+0x196>
 80037f6:	6019      	str	r1, [r3, #0]
 80037f8:	e002      	b.n	8003800 <_printf_i+0x19c>
 80037fa:	066a      	lsls	r2, r5, #25
 80037fc:	d5fb      	bpl.n	80037f6 <_printf_i+0x192>
 80037fe:	8019      	strh	r1, [r3, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	6123      	str	r3, [r4, #16]
 8003804:	4665      	mov	r5, ip
 8003806:	e7b9      	b.n	800377c <_printf_i+0x118>
 8003808:	6813      	ldr	r3, [r2, #0]
 800380a:	1d19      	adds	r1, r3, #4
 800380c:	6011      	str	r1, [r2, #0]
 800380e:	681d      	ldr	r5, [r3, #0]
 8003810:	6862      	ldr	r2, [r4, #4]
 8003812:	2100      	movs	r1, #0
 8003814:	4628      	mov	r0, r5
 8003816:	f7fc fce3 	bl	80001e0 <memchr>
 800381a:	b108      	cbz	r0, 8003820 <_printf_i+0x1bc>
 800381c:	1b40      	subs	r0, r0, r5
 800381e:	6060      	str	r0, [r4, #4]
 8003820:	6863      	ldr	r3, [r4, #4]
 8003822:	6123      	str	r3, [r4, #16]
 8003824:	2300      	movs	r3, #0
 8003826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800382a:	e7a7      	b.n	800377c <_printf_i+0x118>
 800382c:	6923      	ldr	r3, [r4, #16]
 800382e:	462a      	mov	r2, r5
 8003830:	4639      	mov	r1, r7
 8003832:	4630      	mov	r0, r6
 8003834:	47c0      	blx	r8
 8003836:	3001      	adds	r0, #1
 8003838:	d0aa      	beq.n	8003790 <_printf_i+0x12c>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	079b      	lsls	r3, r3, #30
 800383e:	d413      	bmi.n	8003868 <_printf_i+0x204>
 8003840:	68e0      	ldr	r0, [r4, #12]
 8003842:	9b03      	ldr	r3, [sp, #12]
 8003844:	4298      	cmp	r0, r3
 8003846:	bfb8      	it	lt
 8003848:	4618      	movlt	r0, r3
 800384a:	e7a3      	b.n	8003794 <_printf_i+0x130>
 800384c:	2301      	movs	r3, #1
 800384e:	464a      	mov	r2, r9
 8003850:	4639      	mov	r1, r7
 8003852:	4630      	mov	r0, r6
 8003854:	47c0      	blx	r8
 8003856:	3001      	adds	r0, #1
 8003858:	d09a      	beq.n	8003790 <_printf_i+0x12c>
 800385a:	3501      	adds	r5, #1
 800385c:	68e3      	ldr	r3, [r4, #12]
 800385e:	9a03      	ldr	r2, [sp, #12]
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	42ab      	cmp	r3, r5
 8003864:	dcf2      	bgt.n	800384c <_printf_i+0x1e8>
 8003866:	e7eb      	b.n	8003840 <_printf_i+0x1dc>
 8003868:	2500      	movs	r5, #0
 800386a:	f104 0919 	add.w	r9, r4, #25
 800386e:	e7f5      	b.n	800385c <_printf_i+0x1f8>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ac      	bne.n	80037ce <_printf_i+0x16a>
 8003874:	7803      	ldrb	r3, [r0, #0]
 8003876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800387a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800387e:	e76c      	b.n	800375a <_printf_i+0xf6>
 8003880:	08003ef5 	.word	0x08003ef5
 8003884:	08003f06 	.word	0x08003f06

08003888 <_sbrk_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	4c06      	ldr	r4, [pc, #24]	; (80038a4 <_sbrk_r+0x1c>)
 800388c:	2300      	movs	r3, #0
 800388e:	4605      	mov	r5, r0
 8003890:	4608      	mov	r0, r1
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	f7ff fb56 	bl	8002f44 <_sbrk>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_sbrk_r+0x1a>
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_sbrk_r+0x1a>
 80038a0:	602b      	str	r3, [r5, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	200001a4 	.word	0x200001a4

080038a8 <__sread>:
 80038a8:	b510      	push	{r4, lr}
 80038aa:	460c      	mov	r4, r1
 80038ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b0:	f000 fa96 	bl	8003de0 <_read_r>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	bfab      	itete	ge
 80038b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038ba:	89a3      	ldrhlt	r3, [r4, #12]
 80038bc:	181b      	addge	r3, r3, r0
 80038be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038c2:	bfac      	ite	ge
 80038c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80038c6:	81a3      	strhlt	r3, [r4, #12]
 80038c8:	bd10      	pop	{r4, pc}

080038ca <__swrite>:
 80038ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ce:	461f      	mov	r7, r3
 80038d0:	898b      	ldrh	r3, [r1, #12]
 80038d2:	05db      	lsls	r3, r3, #23
 80038d4:	4605      	mov	r5, r0
 80038d6:	460c      	mov	r4, r1
 80038d8:	4616      	mov	r6, r2
 80038da:	d505      	bpl.n	80038e8 <__swrite+0x1e>
 80038dc:	2302      	movs	r3, #2
 80038de:	2200      	movs	r2, #0
 80038e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e4:	f000 f9b6 	bl	8003c54 <_lseek_r>
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f2:	81a3      	strh	r3, [r4, #12]
 80038f4:	4632      	mov	r2, r6
 80038f6:	463b      	mov	r3, r7
 80038f8:	4628      	mov	r0, r5
 80038fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038fe:	f000 b869 	b.w	80039d4 <_write_r>

08003902 <__sseek>:
 8003902:	b510      	push	{r4, lr}
 8003904:	460c      	mov	r4, r1
 8003906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800390a:	f000 f9a3 	bl	8003c54 <_lseek_r>
 800390e:	1c43      	adds	r3, r0, #1
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	bf15      	itete	ne
 8003914:	6560      	strne	r0, [r4, #84]	; 0x54
 8003916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800391a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800391e:	81a3      	strheq	r3, [r4, #12]
 8003920:	bf18      	it	ne
 8003922:	81a3      	strhne	r3, [r4, #12]
 8003924:	bd10      	pop	{r4, pc}

08003926 <__sclose>:
 8003926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800392a:	f000 b8d3 	b.w	8003ad4 <_close_r>
	...

08003930 <__swbuf_r>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	460e      	mov	r6, r1
 8003934:	4614      	mov	r4, r2
 8003936:	4605      	mov	r5, r0
 8003938:	b118      	cbz	r0, 8003942 <__swbuf_r+0x12>
 800393a:	6983      	ldr	r3, [r0, #24]
 800393c:	b90b      	cbnz	r3, 8003942 <__swbuf_r+0x12>
 800393e:	f7ff fbf7 	bl	8003130 <__sinit>
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <__swbuf_r+0x98>)
 8003944:	429c      	cmp	r4, r3
 8003946:	d12a      	bne.n	800399e <__swbuf_r+0x6e>
 8003948:	686c      	ldr	r4, [r5, #4]
 800394a:	69a3      	ldr	r3, [r4, #24]
 800394c:	60a3      	str	r3, [r4, #8]
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	071a      	lsls	r2, r3, #28
 8003952:	d52e      	bpl.n	80039b2 <__swbuf_r+0x82>
 8003954:	6923      	ldr	r3, [r4, #16]
 8003956:	b363      	cbz	r3, 80039b2 <__swbuf_r+0x82>
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	6820      	ldr	r0, [r4, #0]
 800395c:	1ac0      	subs	r0, r0, r3
 800395e:	6963      	ldr	r3, [r4, #20]
 8003960:	b2f6      	uxtb	r6, r6
 8003962:	4283      	cmp	r3, r0
 8003964:	4637      	mov	r7, r6
 8003966:	dc04      	bgt.n	8003972 <__swbuf_r+0x42>
 8003968:	4621      	mov	r1, r4
 800396a:	4628      	mov	r0, r5
 800396c:	f000 f948 	bl	8003c00 <_fflush_r>
 8003970:	bb28      	cbnz	r0, 80039be <__swbuf_r+0x8e>
 8003972:	68a3      	ldr	r3, [r4, #8]
 8003974:	3b01      	subs	r3, #1
 8003976:	60a3      	str	r3, [r4, #8]
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	6022      	str	r2, [r4, #0]
 800397e:	701e      	strb	r6, [r3, #0]
 8003980:	6963      	ldr	r3, [r4, #20]
 8003982:	3001      	adds	r0, #1
 8003984:	4283      	cmp	r3, r0
 8003986:	d004      	beq.n	8003992 <__swbuf_r+0x62>
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	07db      	lsls	r3, r3, #31
 800398c:	d519      	bpl.n	80039c2 <__swbuf_r+0x92>
 800398e:	2e0a      	cmp	r6, #10
 8003990:	d117      	bne.n	80039c2 <__swbuf_r+0x92>
 8003992:	4621      	mov	r1, r4
 8003994:	4628      	mov	r0, r5
 8003996:	f000 f933 	bl	8003c00 <_fflush_r>
 800399a:	b190      	cbz	r0, 80039c2 <__swbuf_r+0x92>
 800399c:	e00f      	b.n	80039be <__swbuf_r+0x8e>
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <__swbuf_r+0x9c>)
 80039a0:	429c      	cmp	r4, r3
 80039a2:	d101      	bne.n	80039a8 <__swbuf_r+0x78>
 80039a4:	68ac      	ldr	r4, [r5, #8]
 80039a6:	e7d0      	b.n	800394a <__swbuf_r+0x1a>
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <__swbuf_r+0xa0>)
 80039aa:	429c      	cmp	r4, r3
 80039ac:	bf08      	it	eq
 80039ae:	68ec      	ldreq	r4, [r5, #12]
 80039b0:	e7cb      	b.n	800394a <__swbuf_r+0x1a>
 80039b2:	4621      	mov	r1, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	f000 f81f 	bl	80039f8 <__swsetup_r>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d0cc      	beq.n	8003958 <__swbuf_r+0x28>
 80039be:	f04f 37ff 	mov.w	r7, #4294967295
 80039c2:	4638      	mov	r0, r7
 80039c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c6:	bf00      	nop
 80039c8:	08003ea4 	.word	0x08003ea4
 80039cc:	08003ec4 	.word	0x08003ec4
 80039d0:	08003e84 	.word	0x08003e84

080039d4 <_write_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4c07      	ldr	r4, [pc, #28]	; (80039f4 <_write_r+0x20>)
 80039d8:	4605      	mov	r5, r0
 80039da:	4608      	mov	r0, r1
 80039dc:	4611      	mov	r1, r2
 80039de:	2200      	movs	r2, #0
 80039e0:	6022      	str	r2, [r4, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7ff fa5d 	bl	8002ea2 <_write>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_write_r+0x1e>
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_write_r+0x1e>
 80039f0:	602b      	str	r3, [r5, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	200001a4 	.word	0x200001a4

080039f8 <__swsetup_r>:
 80039f8:	4b32      	ldr	r3, [pc, #200]	; (8003ac4 <__swsetup_r+0xcc>)
 80039fa:	b570      	push	{r4, r5, r6, lr}
 80039fc:	681d      	ldr	r5, [r3, #0]
 80039fe:	4606      	mov	r6, r0
 8003a00:	460c      	mov	r4, r1
 8003a02:	b125      	cbz	r5, 8003a0e <__swsetup_r+0x16>
 8003a04:	69ab      	ldr	r3, [r5, #24]
 8003a06:	b913      	cbnz	r3, 8003a0e <__swsetup_r+0x16>
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f7ff fb91 	bl	8003130 <__sinit>
 8003a0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ac8 <__swsetup_r+0xd0>)
 8003a10:	429c      	cmp	r4, r3
 8003a12:	d10f      	bne.n	8003a34 <__swsetup_r+0x3c>
 8003a14:	686c      	ldr	r4, [r5, #4]
 8003a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	0715      	lsls	r5, r2, #28
 8003a1e:	d42c      	bmi.n	8003a7a <__swsetup_r+0x82>
 8003a20:	06d0      	lsls	r0, r2, #27
 8003a22:	d411      	bmi.n	8003a48 <__swsetup_r+0x50>
 8003a24:	2209      	movs	r2, #9
 8003a26:	6032      	str	r2, [r6, #0]
 8003a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a32:	e03e      	b.n	8003ab2 <__swsetup_r+0xba>
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <__swsetup_r+0xd4>)
 8003a36:	429c      	cmp	r4, r3
 8003a38:	d101      	bne.n	8003a3e <__swsetup_r+0x46>
 8003a3a:	68ac      	ldr	r4, [r5, #8]
 8003a3c:	e7eb      	b.n	8003a16 <__swsetup_r+0x1e>
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <__swsetup_r+0xd8>)
 8003a40:	429c      	cmp	r4, r3
 8003a42:	bf08      	it	eq
 8003a44:	68ec      	ldreq	r4, [r5, #12]
 8003a46:	e7e6      	b.n	8003a16 <__swsetup_r+0x1e>
 8003a48:	0751      	lsls	r1, r2, #29
 8003a4a:	d512      	bpl.n	8003a72 <__swsetup_r+0x7a>
 8003a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a4e:	b141      	cbz	r1, 8003a62 <__swsetup_r+0x6a>
 8003a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a54:	4299      	cmp	r1, r3
 8003a56:	d002      	beq.n	8003a5e <__swsetup_r+0x66>
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f000 f973 	bl	8003d44 <_free_r>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6363      	str	r3, [r4, #52]	; 0x34
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a68:	81a3      	strh	r3, [r4, #12]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	6063      	str	r3, [r4, #4]
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	f043 0308 	orr.w	r3, r3, #8
 8003a78:	81a3      	strh	r3, [r4, #12]
 8003a7a:	6923      	ldr	r3, [r4, #16]
 8003a7c:	b94b      	cbnz	r3, 8003a92 <__swsetup_r+0x9a>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a88:	d003      	beq.n	8003a92 <__swsetup_r+0x9a>
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f000 f917 	bl	8003cc0 <__smakebuf_r>
 8003a92:	89a2      	ldrh	r2, [r4, #12]
 8003a94:	f012 0301 	ands.w	r3, r2, #1
 8003a98:	d00c      	beq.n	8003ab4 <__swsetup_r+0xbc>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60a3      	str	r3, [r4, #8]
 8003a9e:	6963      	ldr	r3, [r4, #20]
 8003aa0:	425b      	negs	r3, r3
 8003aa2:	61a3      	str	r3, [r4, #24]
 8003aa4:	6923      	ldr	r3, [r4, #16]
 8003aa6:	b953      	cbnz	r3, 8003abe <__swsetup_r+0xc6>
 8003aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003ab0:	d1ba      	bne.n	8003a28 <__swsetup_r+0x30>
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	0792      	lsls	r2, r2, #30
 8003ab6:	bf58      	it	pl
 8003ab8:	6963      	ldrpl	r3, [r4, #20]
 8003aba:	60a3      	str	r3, [r4, #8]
 8003abc:	e7f2      	b.n	8003aa4 <__swsetup_r+0xac>
 8003abe:	2000      	movs	r0, #0
 8003ac0:	e7f7      	b.n	8003ab2 <__swsetup_r+0xba>
 8003ac2:	bf00      	nop
 8003ac4:	2000000c 	.word	0x2000000c
 8003ac8:	08003ea4 	.word	0x08003ea4
 8003acc:	08003ec4 	.word	0x08003ec4
 8003ad0:	08003e84 	.word	0x08003e84

08003ad4 <_close_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4c06      	ldr	r4, [pc, #24]	; (8003af0 <_close_r+0x1c>)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	4605      	mov	r5, r0
 8003adc:	4608      	mov	r0, r1
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	f7ff f9fb 	bl	8002eda <_close>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	d102      	bne.n	8003aee <_close_r+0x1a>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	b103      	cbz	r3, 8003aee <_close_r+0x1a>
 8003aec:	602b      	str	r3, [r5, #0]
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
 8003af0:	200001a4 	.word	0x200001a4

08003af4 <__sflush_r>:
 8003af4:	898a      	ldrh	r2, [r1, #12]
 8003af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003afa:	4605      	mov	r5, r0
 8003afc:	0710      	lsls	r0, r2, #28
 8003afe:	460c      	mov	r4, r1
 8003b00:	d458      	bmi.n	8003bb4 <__sflush_r+0xc0>
 8003b02:	684b      	ldr	r3, [r1, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	dc05      	bgt.n	8003b14 <__sflush_r+0x20>
 8003b08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	dc02      	bgt.n	8003b14 <__sflush_r+0x20>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b16:	2e00      	cmp	r6, #0
 8003b18:	d0f9      	beq.n	8003b0e <__sflush_r+0x1a>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b20:	682f      	ldr	r7, [r5, #0]
 8003b22:	6a21      	ldr	r1, [r4, #32]
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	d032      	beq.n	8003b8e <__sflush_r+0x9a>
 8003b28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	075a      	lsls	r2, r3, #29
 8003b2e:	d505      	bpl.n	8003b3c <__sflush_r+0x48>
 8003b30:	6863      	ldr	r3, [r4, #4]
 8003b32:	1ac0      	subs	r0, r0, r3
 8003b34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b36:	b10b      	cbz	r3, 8003b3c <__sflush_r+0x48>
 8003b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b3a:	1ac0      	subs	r0, r0, r3
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b42:	6a21      	ldr	r1, [r4, #32]
 8003b44:	4628      	mov	r0, r5
 8003b46:	47b0      	blx	r6
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	d106      	bne.n	8003b5c <__sflush_r+0x68>
 8003b4e:	6829      	ldr	r1, [r5, #0]
 8003b50:	291d      	cmp	r1, #29
 8003b52:	d848      	bhi.n	8003be6 <__sflush_r+0xf2>
 8003b54:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <__sflush_r+0x108>)
 8003b56:	40ca      	lsrs	r2, r1
 8003b58:	07d6      	lsls	r6, r2, #31
 8003b5a:	d544      	bpl.n	8003be6 <__sflush_r+0xf2>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	6062      	str	r2, [r4, #4]
 8003b60:	04d9      	lsls	r1, r3, #19
 8003b62:	6922      	ldr	r2, [r4, #16]
 8003b64:	6022      	str	r2, [r4, #0]
 8003b66:	d504      	bpl.n	8003b72 <__sflush_r+0x7e>
 8003b68:	1c42      	adds	r2, r0, #1
 8003b6a:	d101      	bne.n	8003b70 <__sflush_r+0x7c>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b903      	cbnz	r3, 8003b72 <__sflush_r+0x7e>
 8003b70:	6560      	str	r0, [r4, #84]	; 0x54
 8003b72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b74:	602f      	str	r7, [r5, #0]
 8003b76:	2900      	cmp	r1, #0
 8003b78:	d0c9      	beq.n	8003b0e <__sflush_r+0x1a>
 8003b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b7e:	4299      	cmp	r1, r3
 8003b80:	d002      	beq.n	8003b88 <__sflush_r+0x94>
 8003b82:	4628      	mov	r0, r5
 8003b84:	f000 f8de 	bl	8003d44 <_free_r>
 8003b88:	2000      	movs	r0, #0
 8003b8a:	6360      	str	r0, [r4, #52]	; 0x34
 8003b8c:	e7c0      	b.n	8003b10 <__sflush_r+0x1c>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4628      	mov	r0, r5
 8003b92:	47b0      	blx	r6
 8003b94:	1c41      	adds	r1, r0, #1
 8003b96:	d1c8      	bne.n	8003b2a <__sflush_r+0x36>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0c5      	beq.n	8003b2a <__sflush_r+0x36>
 8003b9e:	2b1d      	cmp	r3, #29
 8003ba0:	d001      	beq.n	8003ba6 <__sflush_r+0xb2>
 8003ba2:	2b16      	cmp	r3, #22
 8003ba4:	d101      	bne.n	8003baa <__sflush_r+0xb6>
 8003ba6:	602f      	str	r7, [r5, #0]
 8003ba8:	e7b1      	b.n	8003b0e <__sflush_r+0x1a>
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb0:	81a3      	strh	r3, [r4, #12]
 8003bb2:	e7ad      	b.n	8003b10 <__sflush_r+0x1c>
 8003bb4:	690f      	ldr	r7, [r1, #16]
 8003bb6:	2f00      	cmp	r7, #0
 8003bb8:	d0a9      	beq.n	8003b0e <__sflush_r+0x1a>
 8003bba:	0793      	lsls	r3, r2, #30
 8003bbc:	680e      	ldr	r6, [r1, #0]
 8003bbe:	bf08      	it	eq
 8003bc0:	694b      	ldreq	r3, [r1, #20]
 8003bc2:	600f      	str	r7, [r1, #0]
 8003bc4:	bf18      	it	ne
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	eba6 0807 	sub.w	r8, r6, r7
 8003bcc:	608b      	str	r3, [r1, #8]
 8003bce:	f1b8 0f00 	cmp.w	r8, #0
 8003bd2:	dd9c      	ble.n	8003b0e <__sflush_r+0x1a>
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	463a      	mov	r2, r7
 8003bd8:	6a21      	ldr	r1, [r4, #32]
 8003bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bdc:	4628      	mov	r0, r5
 8003bde:	47b0      	blx	r6
 8003be0:	2800      	cmp	r0, #0
 8003be2:	dc06      	bgt.n	8003bf2 <__sflush_r+0xfe>
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	e78e      	b.n	8003b10 <__sflush_r+0x1c>
 8003bf2:	4407      	add	r7, r0
 8003bf4:	eba8 0800 	sub.w	r8, r8, r0
 8003bf8:	e7e9      	b.n	8003bce <__sflush_r+0xda>
 8003bfa:	bf00      	nop
 8003bfc:	20400001 	.word	0x20400001

08003c00 <_fflush_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	690b      	ldr	r3, [r1, #16]
 8003c04:	4605      	mov	r5, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	b1db      	cbz	r3, 8003c42 <_fflush_r+0x42>
 8003c0a:	b118      	cbz	r0, 8003c14 <_fflush_r+0x14>
 8003c0c:	6983      	ldr	r3, [r0, #24]
 8003c0e:	b90b      	cbnz	r3, 8003c14 <_fflush_r+0x14>
 8003c10:	f7ff fa8e 	bl	8003130 <__sinit>
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <_fflush_r+0x48>)
 8003c16:	429c      	cmp	r4, r3
 8003c18:	d109      	bne.n	8003c2e <_fflush_r+0x2e>
 8003c1a:	686c      	ldr	r4, [r5, #4]
 8003c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c20:	b17b      	cbz	r3, 8003c42 <_fflush_r+0x42>
 8003c22:	4621      	mov	r1, r4
 8003c24:	4628      	mov	r0, r5
 8003c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c2a:	f7ff bf63 	b.w	8003af4 <__sflush_r>
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <_fflush_r+0x4c>)
 8003c30:	429c      	cmp	r4, r3
 8003c32:	d101      	bne.n	8003c38 <_fflush_r+0x38>
 8003c34:	68ac      	ldr	r4, [r5, #8]
 8003c36:	e7f1      	b.n	8003c1c <_fflush_r+0x1c>
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <_fflush_r+0x50>)
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	bf08      	it	eq
 8003c3e:	68ec      	ldreq	r4, [r5, #12]
 8003c40:	e7ec      	b.n	8003c1c <_fflush_r+0x1c>
 8003c42:	2000      	movs	r0, #0
 8003c44:	bd38      	pop	{r3, r4, r5, pc}
 8003c46:	bf00      	nop
 8003c48:	08003ea4 	.word	0x08003ea4
 8003c4c:	08003ec4 	.word	0x08003ec4
 8003c50:	08003e84 	.word	0x08003e84

08003c54 <_lseek_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4c07      	ldr	r4, [pc, #28]	; (8003c74 <_lseek_r+0x20>)
 8003c58:	4605      	mov	r5, r0
 8003c5a:	4608      	mov	r0, r1
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	2200      	movs	r2, #0
 8003c60:	6022      	str	r2, [r4, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f7ff f960 	bl	8002f28 <_lseek>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_lseek_r+0x1e>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_lseek_r+0x1e>
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	200001a4 	.word	0x200001a4

08003c78 <__swhatbuf_r>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	460e      	mov	r6, r1
 8003c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c80:	2900      	cmp	r1, #0
 8003c82:	b096      	sub	sp, #88	; 0x58
 8003c84:	4614      	mov	r4, r2
 8003c86:	461d      	mov	r5, r3
 8003c88:	da07      	bge.n	8003c9a <__swhatbuf_r+0x22>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	89b3      	ldrh	r3, [r6, #12]
 8003c90:	061a      	lsls	r2, r3, #24
 8003c92:	d410      	bmi.n	8003cb6 <__swhatbuf_r+0x3e>
 8003c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c98:	e00e      	b.n	8003cb8 <__swhatbuf_r+0x40>
 8003c9a:	466a      	mov	r2, sp
 8003c9c:	f000 f8b2 	bl	8003e04 <_fstat_r>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	dbf2      	blt.n	8003c8a <__swhatbuf_r+0x12>
 8003ca4:	9a01      	ldr	r2, [sp, #4]
 8003ca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003caa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003cae:	425a      	negs	r2, r3
 8003cb0:	415a      	adcs	r2, r3
 8003cb2:	602a      	str	r2, [r5, #0]
 8003cb4:	e7ee      	b.n	8003c94 <__swhatbuf_r+0x1c>
 8003cb6:	2340      	movs	r3, #64	; 0x40
 8003cb8:	2000      	movs	r0, #0
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	b016      	add	sp, #88	; 0x58
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}

08003cc0 <__smakebuf_r>:
 8003cc0:	898b      	ldrh	r3, [r1, #12]
 8003cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cc4:	079d      	lsls	r5, r3, #30
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	d507      	bpl.n	8003cdc <__smakebuf_r+0x1c>
 8003ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cd0:	6023      	str	r3, [r4, #0]
 8003cd2:	6123      	str	r3, [r4, #16]
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	6163      	str	r3, [r4, #20]
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	ab01      	add	r3, sp, #4
 8003cde:	466a      	mov	r2, sp
 8003ce0:	f7ff ffca 	bl	8003c78 <__swhatbuf_r>
 8003ce4:	9900      	ldr	r1, [sp, #0]
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f7ff faab 	bl	8003244 <_malloc_r>
 8003cee:	b948      	cbnz	r0, 8003d04 <__smakebuf_r+0x44>
 8003cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf4:	059a      	lsls	r2, r3, #22
 8003cf6:	d4ef      	bmi.n	8003cd8 <__smakebuf_r+0x18>
 8003cf8:	f023 0303 	bic.w	r3, r3, #3
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	e7e3      	b.n	8003ccc <__smakebuf_r+0xc>
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <__smakebuf_r+0x7c>)
 8003d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	6020      	str	r0, [r4, #0]
 8003d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d10:	81a3      	strh	r3, [r4, #12]
 8003d12:	9b00      	ldr	r3, [sp, #0]
 8003d14:	6163      	str	r3, [r4, #20]
 8003d16:	9b01      	ldr	r3, [sp, #4]
 8003d18:	6120      	str	r0, [r4, #16]
 8003d1a:	b15b      	cbz	r3, 8003d34 <__smakebuf_r+0x74>
 8003d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 f881 	bl	8003e28 <_isatty_r>
 8003d26:	b128      	cbz	r0, 8003d34 <__smakebuf_r+0x74>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	81a3      	strh	r3, [r4, #12]
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	431d      	orrs	r5, r3
 8003d38:	81a5      	strh	r5, [r4, #12]
 8003d3a:	e7cd      	b.n	8003cd8 <__smakebuf_r+0x18>
 8003d3c:	080030f9 	.word	0x080030f9

08003d40 <__malloc_lock>:
 8003d40:	4770      	bx	lr

08003d42 <__malloc_unlock>:
 8003d42:	4770      	bx	lr

08003d44 <_free_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4605      	mov	r5, r0
 8003d48:	2900      	cmp	r1, #0
 8003d4a:	d045      	beq.n	8003dd8 <_free_r+0x94>
 8003d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d50:	1f0c      	subs	r4, r1, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bfb8      	it	lt
 8003d56:	18e4      	addlt	r4, r4, r3
 8003d58:	f7ff fff2 	bl	8003d40 <__malloc_lock>
 8003d5c:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <_free_r+0x98>)
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	4610      	mov	r0, r2
 8003d62:	b933      	cbnz	r3, 8003d72 <_free_r+0x2e>
 8003d64:	6063      	str	r3, [r4, #4]
 8003d66:	6014      	str	r4, [r2, #0]
 8003d68:	4628      	mov	r0, r5
 8003d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d6e:	f7ff bfe8 	b.w	8003d42 <__malloc_unlock>
 8003d72:	42a3      	cmp	r3, r4
 8003d74:	d90c      	bls.n	8003d90 <_free_r+0x4c>
 8003d76:	6821      	ldr	r1, [r4, #0]
 8003d78:	1862      	adds	r2, r4, r1
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	bf04      	itt	eq
 8003d7e:	681a      	ldreq	r2, [r3, #0]
 8003d80:	685b      	ldreq	r3, [r3, #4]
 8003d82:	6063      	str	r3, [r4, #4]
 8003d84:	bf04      	itt	eq
 8003d86:	1852      	addeq	r2, r2, r1
 8003d88:	6022      	streq	r2, [r4, #0]
 8003d8a:	6004      	str	r4, [r0, #0]
 8003d8c:	e7ec      	b.n	8003d68 <_free_r+0x24>
 8003d8e:	4613      	mov	r3, r2
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	b10a      	cbz	r2, 8003d98 <_free_r+0x54>
 8003d94:	42a2      	cmp	r2, r4
 8003d96:	d9fa      	bls.n	8003d8e <_free_r+0x4a>
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	1858      	adds	r0, r3, r1
 8003d9c:	42a0      	cmp	r0, r4
 8003d9e:	d10b      	bne.n	8003db8 <_free_r+0x74>
 8003da0:	6820      	ldr	r0, [r4, #0]
 8003da2:	4401      	add	r1, r0
 8003da4:	1858      	adds	r0, r3, r1
 8003da6:	4282      	cmp	r2, r0
 8003da8:	6019      	str	r1, [r3, #0]
 8003daa:	d1dd      	bne.n	8003d68 <_free_r+0x24>
 8003dac:	6810      	ldr	r0, [r2, #0]
 8003dae:	6852      	ldr	r2, [r2, #4]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	4401      	add	r1, r0
 8003db4:	6019      	str	r1, [r3, #0]
 8003db6:	e7d7      	b.n	8003d68 <_free_r+0x24>
 8003db8:	d902      	bls.n	8003dc0 <_free_r+0x7c>
 8003dba:	230c      	movs	r3, #12
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	e7d3      	b.n	8003d68 <_free_r+0x24>
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	1821      	adds	r1, r4, r0
 8003dc4:	428a      	cmp	r2, r1
 8003dc6:	bf04      	itt	eq
 8003dc8:	6811      	ldreq	r1, [r2, #0]
 8003dca:	6852      	ldreq	r2, [r2, #4]
 8003dcc:	6062      	str	r2, [r4, #4]
 8003dce:	bf04      	itt	eq
 8003dd0:	1809      	addeq	r1, r1, r0
 8003dd2:	6021      	streq	r1, [r4, #0]
 8003dd4:	605c      	str	r4, [r3, #4]
 8003dd6:	e7c7      	b.n	8003d68 <_free_r+0x24>
 8003dd8:	bd38      	pop	{r3, r4, r5, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000090 	.word	0x20000090

08003de0 <_read_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4c07      	ldr	r4, [pc, #28]	; (8003e00 <_read_r+0x20>)
 8003de4:	4605      	mov	r5, r0
 8003de6:	4608      	mov	r0, r1
 8003de8:	4611      	mov	r1, r2
 8003dea:	2200      	movs	r2, #0
 8003dec:	6022      	str	r2, [r4, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f7ff f83a 	bl	8002e68 <_read>
 8003df4:	1c43      	adds	r3, r0, #1
 8003df6:	d102      	bne.n	8003dfe <_read_r+0x1e>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	b103      	cbz	r3, 8003dfe <_read_r+0x1e>
 8003dfc:	602b      	str	r3, [r5, #0]
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
 8003e00:	200001a4 	.word	0x200001a4

08003e04 <_fstat_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4c07      	ldr	r4, [pc, #28]	; (8003e24 <_fstat_r+0x20>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	f7ff f86e 	bl	8002ef2 <_fstat>
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	d102      	bne.n	8003e20 <_fstat_r+0x1c>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	b103      	cbz	r3, 8003e20 <_fstat_r+0x1c>
 8003e1e:	602b      	str	r3, [r5, #0]
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
 8003e22:	bf00      	nop
 8003e24:	200001a4 	.word	0x200001a4

08003e28 <_isatty_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4c06      	ldr	r4, [pc, #24]	; (8003e44 <_isatty_r+0x1c>)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	4605      	mov	r5, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	f7ff f86d 	bl	8002f12 <_isatty>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_isatty_r+0x1a>
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_isatty_r+0x1a>
 8003e40:	602b      	str	r3, [r5, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	200001a4 	.word	0x200001a4

08003e48 <_init>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr

08003e54 <_fini>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr
