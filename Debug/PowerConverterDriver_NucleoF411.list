
PowerConverterDriver_NucleoF411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023c8  0800e290  0800e290  0001e290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000638  08010658  08010658  00020658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000003e8  08010c90  08010c90  00020c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011078  08011078  000305d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08011078  08011078  00021078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08011084  08011084  00021084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005d4  20000000  0801108c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200005d8  08011660  000305d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08011660  000308e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000336ee  00000000  00000000  00030604  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046ce  00000000  00000000  00063cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  000683c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00069298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc4d  00000000  00000000  0006a050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f0fe  00000000  00000000  00086c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a1a6f  00000000  00000000  00095d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013780a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e8c  00000000  00000000  00137888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005d8 	.word	0x200005d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e278 	.word	0x0800e278

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005dc 	.word	0x200005dc
 80001dc:	0800e278 	.word	0x0800e278

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	; 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e2:	f1a4 0401 	sub.w	r4, r4, #1
 80003e6:	d1e9      	bne.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__gedf2>:
 8000a40:	f04f 3cff 	mov.w	ip, #4294967295
 8000a44:	e006      	b.n	8000a54 <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__ledf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	e002      	b.n	8000a54 <__cmpdf2+0x4>
 8000a4e:	bf00      	nop

08000a50 <__cmpdf2>:
 8000a50:	f04f 0c01 	mov.w	ip, #1
 8000a54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6a:	d01b      	beq.n	8000aa4 <__cmpdf2+0x54>
 8000a6c:	b001      	add	sp, #4
 8000a6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a72:	bf0c      	ite	eq
 8000a74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a78:	ea91 0f03 	teqne	r1, r3
 8000a7c:	bf02      	ittt	eq
 8000a7e:	ea90 0f02 	teqeq	r0, r2
 8000a82:	2000      	moveq	r0, #0
 8000a84:	4770      	bxeq	lr
 8000a86:	f110 0f00 	cmn.w	r0, #0
 8000a8a:	ea91 0f03 	teq	r1, r3
 8000a8e:	bf58      	it	pl
 8000a90:	4299      	cmppl	r1, r3
 8000a92:	bf08      	it	eq
 8000a94:	4290      	cmpeq	r0, r2
 8000a96:	bf2c      	ite	cs
 8000a98:	17d8      	asrcs	r0, r3, #31
 8000a9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9e:	f040 0001 	orr.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__cmpdf2+0x64>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d107      	bne.n	8000ac4 <__cmpdf2+0x74>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d1d6      	bne.n	8000a6c <__cmpdf2+0x1c>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d0d3      	beq.n	8000a6c <__cmpdf2+0x1c>
 8000ac4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_cdrcmple>:
 8000acc:	4684      	mov	ip, r0
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	e000      	b.n	8000adc <__aeabi_cdcmpeq>
 8000ada:	bf00      	nop

08000adc <__aeabi_cdcmpeq>:
 8000adc:	b501      	push	{r0, lr}
 8000ade:	f7ff ffb7 	bl	8000a50 <__cmpdf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd01      	pop	{r0, pc}

08000aec <__aeabi_dcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cdcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cdcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cdcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffce 	bl	8000acc <__aeabi_cdrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc4 	bl	8000acc <__aeabi_cdrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f001 b8f8 	b.w	8001de8 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <selfrel_offset31>:
 8000edc:	6803      	ldr	r3, [r0, #0]
 8000ede:	005a      	lsls	r2, r3, #1
 8000ee0:	bf4c      	ite	mi
 8000ee2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000ee6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000eea:	4418      	add	r0, r3
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <search_EIT_table>:
 8000ef0:	b361      	cbz	r1, 8000f4c <search_EIT_table+0x5c>
 8000ef2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef6:	f101 3aff 	add.w	sl, r1, #4294967295
 8000efa:	4690      	mov	r8, r2
 8000efc:	4606      	mov	r6, r0
 8000efe:	46d1      	mov	r9, sl
 8000f00:	2700      	movs	r7, #0
 8000f02:	eb07 0409 	add.w	r4, r7, r9
 8000f06:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000f0a:	1064      	asrs	r4, r4, #1
 8000f0c:	00e5      	lsls	r5, r4, #3
 8000f0e:	1971      	adds	r1, r6, r5
 8000f10:	4608      	mov	r0, r1
 8000f12:	f7ff ffe3 	bl	8000edc <selfrel_offset31>
 8000f16:	45a2      	cmp	sl, r4
 8000f18:	4683      	mov	fp, r0
 8000f1a:	f105 0008 	add.w	r0, r5, #8
 8000f1e:	4430      	add	r0, r6
 8000f20:	d009      	beq.n	8000f36 <search_EIT_table+0x46>
 8000f22:	f7ff ffdb 	bl	8000edc <selfrel_offset31>
 8000f26:	45c3      	cmp	fp, r8
 8000f28:	f100 30ff 	add.w	r0, r0, #4294967295
 8000f2c:	d805      	bhi.n	8000f3a <search_EIT_table+0x4a>
 8000f2e:	4540      	cmp	r0, r8
 8000f30:	d209      	bcs.n	8000f46 <search_EIT_table+0x56>
 8000f32:	1c67      	adds	r7, r4, #1
 8000f34:	e7e5      	b.n	8000f02 <search_EIT_table+0x12>
 8000f36:	45c3      	cmp	fp, r8
 8000f38:	d905      	bls.n	8000f46 <search_EIT_table+0x56>
 8000f3a:	42a7      	cmp	r7, r4
 8000f3c:	d002      	beq.n	8000f44 <search_EIT_table+0x54>
 8000f3e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000f42:	e7de      	b.n	8000f02 <search_EIT_table+0x12>
 8000f44:	2100      	movs	r1, #0
 8000f46:	4608      	mov	r0, r1
 8000f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4770      	bx	lr

08000f50 <__gnu_unwind_get_pr_addr>:
 8000f50:	2801      	cmp	r0, #1
 8000f52:	d007      	beq.n	8000f64 <__gnu_unwind_get_pr_addr+0x14>
 8000f54:	2802      	cmp	r0, #2
 8000f56:	d007      	beq.n	8000f68 <__gnu_unwind_get_pr_addr+0x18>
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__gnu_unwind_get_pr_addr+0x1c>)
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	bf0c      	ite	eq
 8000f5e:	4618      	moveq	r0, r3
 8000f60:	2000      	movne	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <__gnu_unwind_get_pr_addr+0x20>)
 8000f66:	4770      	bx	lr
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <__gnu_unwind_get_pr_addr+0x24>)
 8000f6a:	4770      	bx	lr
 8000f6c:	0800163d 	.word	0x0800163d
 8000f70:	08001641 	.word	0x08001641
 8000f74:	08001645 	.word	0x08001645

08000f78 <get_eit_entry>:
 8000f78:	b530      	push	{r4, r5, lr}
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <get_eit_entry+0x98>)
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	4604      	mov	r4, r0
 8000f80:	1e8d      	subs	r5, r1, #2
 8000f82:	b34b      	cbz	r3, 8000fd8 <get_eit_entry+0x60>
 8000f84:	a901      	add	r1, sp, #4
 8000f86:	4628      	mov	r0, r5
 8000f88:	f3af 8000 	nop.w
 8000f8c:	b1f0      	cbz	r0, 8000fcc <get_eit_entry+0x54>
 8000f8e:	9901      	ldr	r1, [sp, #4]
 8000f90:	462a      	mov	r2, r5
 8000f92:	f7ff ffad 	bl	8000ef0 <search_EIT_table>
 8000f96:	4601      	mov	r1, r0
 8000f98:	b1c0      	cbz	r0, 8000fcc <get_eit_entry+0x54>
 8000f9a:	f7ff ff9f 	bl	8000edc <selfrel_offset31>
 8000f9e:	684b      	ldr	r3, [r1, #4]
 8000fa0:	64a0      	str	r0, [r4, #72]	; 0x48
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d02e      	beq.n	8001004 <get_eit_entry+0x8c>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f101 0004 	add.w	r0, r1, #4
 8000fac:	db26      	blt.n	8000ffc <get_eit_entry+0x84>
 8000fae:	f7ff ff95 	bl	8000edc <selfrel_offset31>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000fb8:	6803      	ldr	r3, [r0, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db12      	blt.n	8000fe4 <get_eit_entry+0x6c>
 8000fbe:	f7ff ff8d 	bl	8000edc <selfrel_offset31>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	6120      	str	r0, [r4, #16]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	b003      	add	sp, #12
 8000fca:	bd30      	pop	{r4, r5, pc}
 8000fcc:	2300      	movs	r3, #0
 8000fce:	6123      	str	r3, [r4, #16]
 8000fd0:	2309      	movs	r3, #9
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	b003      	add	sp, #12
 8000fd6:	bd30      	pop	{r4, r5, pc}
 8000fd8:	490e      	ldr	r1, [pc, #56]	; (8001014 <get_eit_entry+0x9c>)
 8000fda:	480f      	ldr	r0, [pc, #60]	; (8001018 <get_eit_entry+0xa0>)
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	10c9      	asrs	r1, r1, #3
 8000fe0:	9101      	str	r1, [sp, #4]
 8000fe2:	e7d5      	b.n	8000f90 <get_eit_entry+0x18>
 8000fe4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000fe8:	f7ff ffb2 	bl	8000f50 <__gnu_unwind_get_pr_addr>
 8000fec:	2800      	cmp	r0, #0
 8000fee:	bf14      	ite	ne
 8000ff0:	2300      	movne	r3, #0
 8000ff2:	2309      	moveq	r3, #9
 8000ff4:	6120      	str	r0, [r4, #16]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd30      	pop	{r4, r5, pc}
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8001002:	e7d9      	b.n	8000fb8 <get_eit_entry+0x40>
 8001004:	2300      	movs	r3, #0
 8001006:	6123      	str	r3, [r4, #16]
 8001008:	2305      	movs	r3, #5
 800100a:	4618      	mov	r0, r3
 800100c:	b003      	add	sp, #12
 800100e:	bd30      	pop	{r4, r5, pc}
 8001010:	00000000 	.word	0x00000000
 8001014:	08011078 	.word	0x08011078
 8001018:	08010c90 	.word	0x08010c90

0800101c <restore_non_core_regs>:
 800101c:	6803      	ldr	r3, [r0, #0]
 800101e:	07da      	lsls	r2, r3, #31
 8001020:	b510      	push	{r4, lr}
 8001022:	4604      	mov	r4, r0
 8001024:	d406      	bmi.n	8001034 <restore_non_core_regs+0x18>
 8001026:	079b      	lsls	r3, r3, #30
 8001028:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800102c:	d509      	bpl.n	8001042 <restore_non_core_regs+0x26>
 800102e:	f000 fc5f 	bl	80018f0 <__gnu_Unwind_Restore_VFP_D>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	0759      	lsls	r1, r3, #29
 8001036:	d509      	bpl.n	800104c <restore_non_core_regs+0x30>
 8001038:	071a      	lsls	r2, r3, #28
 800103a:	d50e      	bpl.n	800105a <restore_non_core_regs+0x3e>
 800103c:	06db      	lsls	r3, r3, #27
 800103e:	d513      	bpl.n	8001068 <restore_non_core_regs+0x4c>
 8001040:	bd10      	pop	{r4, pc}
 8001042:	f000 fc4d 	bl	80018e0 <__gnu_Unwind_Restore_VFP>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	0759      	lsls	r1, r3, #29
 800104a:	d4f5      	bmi.n	8001038 <restore_non_core_regs+0x1c>
 800104c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001050:	f000 fc56 	bl	8001900 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	071a      	lsls	r2, r3, #28
 8001058:	d4f0      	bmi.n	800103c <restore_non_core_regs+0x20>
 800105a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800105e:	f000 fc57 	bl	8001910 <__gnu_Unwind_Restore_WMMXD>
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	06db      	lsls	r3, r3, #27
 8001066:	d4eb      	bmi.n	8001040 <restore_non_core_regs+0x24>
 8001068:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800106c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001070:	f000 bc92 	b.w	8001998 <__gnu_Unwind_Restore_WMMXC>

08001074 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8001074:	6803      	ldr	r3, [r0, #0]
 8001076:	b103      	cbz	r3, 800107a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8001078:	4403      	add	r3, r0
 800107a:	4618      	mov	r0, r3
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <__gnu_unwind_24bit.isra.1>:
 8001080:	2009      	movs	r0, #9
 8001082:	4770      	bx	lr

08001084 <_Unwind_DebugHook>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <unwind_phase2>:
 8001088:	b570      	push	{r4, r5, r6, lr}
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	e008      	b.n	80010a2 <unwind_phase2+0x1a>
 8001090:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001092:	6163      	str	r3, [r4, #20]
 8001094:	462a      	mov	r2, r5
 8001096:	6923      	ldr	r3, [r4, #16]
 8001098:	4621      	mov	r1, r4
 800109a:	2001      	movs	r0, #1
 800109c:	4798      	blx	r3
 800109e:	2808      	cmp	r0, #8
 80010a0:	d108      	bne.n	80010b4 <unwind_phase2+0x2c>
 80010a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff ff67 	bl	8000f78 <get_eit_entry>
 80010aa:	4606      	mov	r6, r0
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d0ef      	beq.n	8001090 <unwind_phase2+0x8>
 80010b0:	f009 ffeb 	bl	800b08a <abort>
 80010b4:	2807      	cmp	r0, #7
 80010b6:	d1fb      	bne.n	80010b0 <unwind_phase2+0x28>
 80010b8:	4630      	mov	r0, r6
 80010ba:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010bc:	f7ff ffe2 	bl	8001084 <_Unwind_DebugHook>
 80010c0:	1d28      	adds	r0, r5, #4
 80010c2:	f000 fc01 	bl	80018c8 <__restore_core_regs>
 80010c6:	bf00      	nop

080010c8 <unwind_phase2_forced>:
 80010c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010cc:	1d0c      	adds	r4, r1, #4
 80010ce:	4605      	mov	r5, r0
 80010d0:	4617      	mov	r7, r2
 80010d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80010d8:	ae03      	add	r6, sp, #12
 80010da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010e8:	ac02      	add	r4, sp, #8
 80010ea:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80010ee:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80010f2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80010f6:	2300      	movs	r3, #0
 80010f8:	6023      	str	r3, [r4, #0]
 80010fa:	e021      	b.n	8001140 <unwind_phase2_forced+0x78>
 80010fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010fe:	616b      	str	r3, [r5, #20]
 8001100:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001104:	4621      	mov	r1, r4
 8001106:	a87a      	add	r0, sp, #488	; 0x1e8
 8001108:	f00a f9f1 	bl	800b4ee <memcpy>
 800110c:	692b      	ldr	r3, [r5, #16]
 800110e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8001110:	4629      	mov	r1, r5
 8001112:	4630      	mov	r0, r6
 8001114:	4798      	blx	r3
 8001116:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8001118:	e9cd 4900 	strd	r4, r9, [sp]
 800111c:	4682      	mov	sl, r0
 800111e:	6463      	str	r3, [r4, #68]	; 0x44
 8001120:	4631      	mov	r1, r6
 8001122:	462b      	mov	r3, r5
 8001124:	462a      	mov	r2, r5
 8001126:	2001      	movs	r0, #1
 8001128:	47c0      	blx	r8
 800112a:	4607      	mov	r7, r0
 800112c:	b9f8      	cbnz	r0, 800116e <unwind_phase2_forced+0xa6>
 800112e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001132:	a97a      	add	r1, sp, #488	; 0x1e8
 8001134:	4620      	mov	r0, r4
 8001136:	f00a f9da 	bl	800b4ee <memcpy>
 800113a:	f1ba 0f08 	cmp.w	sl, #8
 800113e:	d11c      	bne.n	800117a <unwind_phase2_forced+0xb2>
 8001140:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001142:	4628      	mov	r0, r5
 8001144:	f7ff ff18 	bl	8000f78 <get_eit_entry>
 8001148:	2f00      	cmp	r7, #0
 800114a:	bf08      	it	eq
 800114c:	2609      	moveq	r6, #9
 800114e:	4607      	mov	r7, r0
 8001150:	bf18      	it	ne
 8001152:	260a      	movne	r6, #10
 8001154:	2800      	cmp	r0, #0
 8001156:	d0d1      	beq.n	80010fc <unwind_phase2_forced+0x34>
 8001158:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800115a:	f046 0110 	orr.w	r1, r6, #16
 800115e:	e9cd 4900 	strd	r4, r9, [sp]
 8001162:	462a      	mov	r2, r5
 8001164:	6463      	str	r3, [r4, #68]	; 0x44
 8001166:	2001      	movs	r0, #1
 8001168:	462b      	mov	r3, r5
 800116a:	47c0      	blx	r8
 800116c:	b100      	cbz	r0, 8001170 <unwind_phase2_forced+0xa8>
 800116e:	2709      	movs	r7, #9
 8001170:	4638      	mov	r0, r7
 8001172:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117a:	f1ba 0f07 	cmp.w	sl, #7
 800117e:	d1f6      	bne.n	800116e <unwind_phase2_forced+0xa6>
 8001180:	4638      	mov	r0, r7
 8001182:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001184:	f7ff ff7e 	bl	8001084 <_Unwind_DebugHook>
 8001188:	a803      	add	r0, sp, #12
 800118a:	f000 fb9d 	bl	80018c8 <__restore_core_regs>
 800118e:	bf00      	nop

08001190 <_Unwind_GetCFA>:
 8001190:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001192:	4770      	bx	lr

08001194 <__gnu_Unwind_RaiseException>:
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001198:	640b      	str	r3, [r1, #64]	; 0x40
 800119a:	1d0d      	adds	r5, r1, #4
 800119c:	460f      	mov	r7, r1
 800119e:	4606      	mov	r6, r0
 80011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a2:	b0f9      	sub	sp, #484	; 0x1e4
 80011a4:	ac01      	add	r4, sp, #4
 80011a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011b4:	f04f 35ff 	mov.w	r5, #4294967295
 80011b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011bc:	9500      	str	r5, [sp, #0]
 80011be:	e006      	b.n	80011ce <__gnu_Unwind_RaiseException+0x3a>
 80011c0:	6933      	ldr	r3, [r6, #16]
 80011c2:	466a      	mov	r2, sp
 80011c4:	4631      	mov	r1, r6
 80011c6:	4798      	blx	r3
 80011c8:	2808      	cmp	r0, #8
 80011ca:	4604      	mov	r4, r0
 80011cc:	d108      	bne.n	80011e0 <__gnu_Unwind_RaiseException+0x4c>
 80011ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 80011d0:	4630      	mov	r0, r6
 80011d2:	f7ff fed1 	bl	8000f78 <get_eit_entry>
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d0f2      	beq.n	80011c0 <__gnu_Unwind_RaiseException+0x2c>
 80011da:	2009      	movs	r0, #9
 80011dc:	b079      	add	sp, #484	; 0x1e4
 80011de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e0:	4668      	mov	r0, sp
 80011e2:	f7ff ff1b 	bl	800101c <restore_non_core_regs>
 80011e6:	2c06      	cmp	r4, #6
 80011e8:	d1f7      	bne.n	80011da <__gnu_Unwind_RaiseException+0x46>
 80011ea:	4639      	mov	r1, r7
 80011ec:	4630      	mov	r0, r6
 80011ee:	f7ff ff4b 	bl	8001088 <unwind_phase2>
 80011f2:	bf00      	nop

080011f4 <__gnu_Unwind_ForcedUnwind>:
 80011f4:	b430      	push	{r4, r5}
 80011f6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80011f8:	60c1      	str	r1, [r0, #12]
 80011fa:	6182      	str	r2, [r0, #24]
 80011fc:	4619      	mov	r1, r3
 80011fe:	641d      	str	r5, [r3, #64]	; 0x40
 8001200:	2200      	movs	r2, #0
 8001202:	bc30      	pop	{r4, r5}
 8001204:	e760      	b.n	80010c8 <unwind_phase2_forced>
 8001206:	bf00      	nop

08001208 <__gnu_Unwind_Resume>:
 8001208:	b570      	push	{r4, r5, r6, lr}
 800120a:	68c6      	ldr	r6, [r0, #12]
 800120c:	6943      	ldr	r3, [r0, #20]
 800120e:	640b      	str	r3, [r1, #64]	; 0x40
 8001210:	b9be      	cbnz	r6, 8001242 <__gnu_Unwind_Resume+0x3a>
 8001212:	6903      	ldr	r3, [r0, #16]
 8001214:	460a      	mov	r2, r1
 8001216:	4604      	mov	r4, r0
 8001218:	460d      	mov	r5, r1
 800121a:	4601      	mov	r1, r0
 800121c:	2002      	movs	r0, #2
 800121e:	4798      	blx	r3
 8001220:	2807      	cmp	r0, #7
 8001222:	d007      	beq.n	8001234 <__gnu_Unwind_Resume+0x2c>
 8001224:	2808      	cmp	r0, #8
 8001226:	d103      	bne.n	8001230 <__gnu_Unwind_Resume+0x28>
 8001228:	4629      	mov	r1, r5
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff ff2c 	bl	8001088 <unwind_phase2>
 8001230:	f009 ff2b 	bl	800b08a <abort>
 8001234:	4630      	mov	r0, r6
 8001236:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001238:	f7ff ff24 	bl	8001084 <_Unwind_DebugHook>
 800123c:	1d28      	adds	r0, r5, #4
 800123e:	f000 fb43 	bl	80018c8 <__restore_core_regs>
 8001242:	2201      	movs	r2, #1
 8001244:	f7ff ff40 	bl	80010c8 <unwind_phase2_forced>
 8001248:	f009 ff1f 	bl	800b08a <abort>

0800124c <__gnu_Unwind_Resume_or_Rethrow>:
 800124c:	68c2      	ldr	r2, [r0, #12]
 800124e:	b11a      	cbz	r2, 8001258 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001250:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001252:	640a      	str	r2, [r1, #64]	; 0x40
 8001254:	2200      	movs	r2, #0
 8001256:	e737      	b.n	80010c8 <unwind_phase2_forced>
 8001258:	e79c      	b.n	8001194 <__gnu_Unwind_RaiseException>
 800125a:	bf00      	nop

0800125c <_Unwind_Complete>:
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <_Unwind_DeleteException>:
 8001260:	6883      	ldr	r3, [r0, #8]
 8001262:	b113      	cbz	r3, 800126a <_Unwind_DeleteException+0xa>
 8001264:	4601      	mov	r1, r0
 8001266:	2001      	movs	r0, #1
 8001268:	4718      	bx	r3
 800126a:	4770      	bx	lr

0800126c <_Unwind_VRS_Get>:
 800126c:	2904      	cmp	r1, #4
 800126e:	d807      	bhi.n	8001280 <_Unwind_VRS_Get+0x14>
 8001270:	e8df f001 	tbb	[pc, r1]
 8001274:	08060803 	.word	0x08060803
 8001278:	08          	.byte	0x08
 8001279:	00          	.byte	0x00
 800127a:	b90b      	cbnz	r3, 8001280 <_Unwind_VRS_Get+0x14>
 800127c:	2a0f      	cmp	r2, #15
 800127e:	d903      	bls.n	8001288 <_Unwind_VRS_Get+0x1c>
 8001280:	2002      	movs	r0, #2
 8001282:	4770      	bx	lr
 8001284:	2001      	movs	r0, #1
 8001286:	4770      	bx	lr
 8001288:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800128c:	4618      	mov	r0, r3
 800128e:	6853      	ldr	r3, [r2, #4]
 8001290:	9a00      	ldr	r2, [sp, #0]
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <_Unwind_GetGR>:
 8001298:	b510      	push	{r4, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	2300      	movs	r3, #0
 800129e:	ac03      	add	r4, sp, #12
 80012a0:	460a      	mov	r2, r1
 80012a2:	9400      	str	r4, [sp, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff ffe1 	bl	800126c <_Unwind_VRS_Get>
 80012aa:	9803      	ldr	r0, [sp, #12]
 80012ac:	b004      	add	sp, #16
 80012ae:	bd10      	pop	{r4, pc}

080012b0 <_Unwind_VRS_Set>:
 80012b0:	2904      	cmp	r1, #4
 80012b2:	d807      	bhi.n	80012c4 <_Unwind_VRS_Set+0x14>
 80012b4:	e8df f001 	tbb	[pc, r1]
 80012b8:	08060803 	.word	0x08060803
 80012bc:	08          	.byte	0x08
 80012bd:	00          	.byte	0x00
 80012be:	b90b      	cbnz	r3, 80012c4 <_Unwind_VRS_Set+0x14>
 80012c0:	2a0f      	cmp	r2, #15
 80012c2:	d903      	bls.n	80012cc <_Unwind_VRS_Set+0x1c>
 80012c4:	2002      	movs	r0, #2
 80012c6:	4770      	bx	lr
 80012c8:	2001      	movs	r0, #1
 80012ca:	4770      	bx	lr
 80012cc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80012d0:	9a00      	ldr	r2, [sp, #0]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	6042      	str	r2, [r0, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <_Unwind_SetGR>:
 80012dc:	b510      	push	{r4, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	ac04      	add	r4, sp, #16
 80012e2:	2300      	movs	r3, #0
 80012e4:	f844 2d04 	str.w	r2, [r4, #-4]!
 80012e8:	460a      	mov	r2, r1
 80012ea:	9400      	str	r4, [sp, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff ffdf 	bl	80012b0 <_Unwind_VRS_Set>
 80012f2:	b004      	add	sp, #16
 80012f4:	bd10      	pop	{r4, pc}
 80012f6:	bf00      	nop

080012f8 <__gnu_Unwind_Backtrace>:
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	1d15      	adds	r5, r2, #4
 8001300:	4607      	mov	r7, r0
 8001302:	460e      	mov	r6, r1
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800130a:	ac17      	add	r4, sp, #92	; 0x5c
 800130c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001316:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800131a:	f04f 35ff 	mov.w	r5, #4294967295
 800131e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001322:	9516      	str	r5, [sp, #88]	; 0x58
 8001324:	e010      	b.n	8001348 <__gnu_Unwind_Backtrace+0x50>
 8001326:	a816      	add	r0, sp, #88	; 0x58
 8001328:	f7ff ffd8 	bl	80012dc <_Unwind_SetGR>
 800132c:	4631      	mov	r1, r6
 800132e:	a816      	add	r0, sp, #88	; 0x58
 8001330:	47b8      	blx	r7
 8001332:	aa16      	add	r2, sp, #88	; 0x58
 8001334:	4669      	mov	r1, sp
 8001336:	b978      	cbnz	r0, 8001358 <__gnu_Unwind_Backtrace+0x60>
 8001338:	9b04      	ldr	r3, [sp, #16]
 800133a:	2008      	movs	r0, #8
 800133c:	4798      	blx	r3
 800133e:	2805      	cmp	r0, #5
 8001340:	4604      	mov	r4, r0
 8001342:	d00a      	beq.n	800135a <__gnu_Unwind_Backtrace+0x62>
 8001344:	2809      	cmp	r0, #9
 8001346:	d007      	beq.n	8001358 <__gnu_Unwind_Backtrace+0x60>
 8001348:	9926      	ldr	r1, [sp, #152]	; 0x98
 800134a:	4668      	mov	r0, sp
 800134c:	f7ff fe14 	bl	8000f78 <get_eit_entry>
 8001350:	466a      	mov	r2, sp
 8001352:	210c      	movs	r1, #12
 8001354:	2800      	cmp	r0, #0
 8001356:	d0e6      	beq.n	8001326 <__gnu_Unwind_Backtrace+0x2e>
 8001358:	2409      	movs	r4, #9
 800135a:	a816      	add	r0, sp, #88	; 0x58
 800135c:	f7ff fe5e 	bl	800101c <restore_non_core_regs>
 8001360:	4620      	mov	r0, r4
 8001362:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001368 <__gnu_unwind_pr_common>:
 8001368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800136c:	460d      	mov	r5, r1
 800136e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001370:	b089      	sub	sp, #36	; 0x24
 8001372:	1d0c      	adds	r4, r1, #4
 8001374:	4616      	mov	r6, r2
 8001376:	f000 0b03 	and.w	fp, r0, #3
 800137a:	680a      	ldr	r2, [r1, #0]
 800137c:	9406      	str	r4, [sp, #24]
 800137e:	461f      	mov	r7, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d068      	beq.n	8001456 <__gnu_unwind_pr_common+0xee>
 8001384:	0c13      	lsrs	r3, r2, #16
 8001386:	b2d9      	uxtb	r1, r3
 8001388:	0412      	lsls	r2, r2, #16
 800138a:	f88d 301d 	strb.w	r3, [sp, #29]
 800138e:	2302      	movs	r3, #2
 8001390:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001394:	9205      	str	r2, [sp, #20]
 8001396:	f88d 301c 	strb.w	r3, [sp, #28]
 800139a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800139c:	f1bb 0f02 	cmp.w	fp, #2
 80013a0:	bf08      	it	eq
 80013a2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80013a4:	f013 0301 	ands.w	r3, r3, #1
 80013a8:	d146      	bne.n	8001438 <__gnu_unwind_pr_common+0xd0>
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f000 0308 	and.w	r3, r0, #8
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	f8d4 9000 	ldr.w	r9, [r4]
 80013b6:	f1b9 0f00 	cmp.w	r9, #0
 80013ba:	f000 80f3 	beq.w	80015a4 <__gnu_unwind_pr_common+0x23c>
 80013be:	2f02      	cmp	r7, #2
 80013c0:	d045      	beq.n	800144e <__gnu_unwind_pr_common+0xe6>
 80013c2:	f8b4 9000 	ldrh.w	r9, [r4]
 80013c6:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 80013ca:	3404      	adds	r4, #4
 80013cc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80013ce:	f028 0a01 	bic.w	sl, r8, #1
 80013d2:	210f      	movs	r1, #15
 80013d4:	4630      	mov	r0, r6
 80013d6:	449a      	add	sl, r3
 80013d8:	f7ff ff5e 	bl	8001298 <_Unwind_GetGR>
 80013dc:	4582      	cmp	sl, r0
 80013de:	d834      	bhi.n	800144a <__gnu_unwind_pr_common+0xe2>
 80013e0:	f029 0301 	bic.w	r3, r9, #1
 80013e4:	4453      	add	r3, sl
 80013e6:	4283      	cmp	r3, r0
 80013e8:	bf94      	ite	ls
 80013ea:	2000      	movls	r0, #0
 80013ec:	2001      	movhi	r0, #1
 80013ee:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80013f2:	f008 0802 	and.w	r8, r8, #2
 80013f6:	f009 0901 	and.w	r9, r9, #1
 80013fa:	ea48 0809 	orr.w	r8, r8, r9
 80013fe:	f1b8 0f01 	cmp.w	r8, #1
 8001402:	d03a      	beq.n	800147a <__gnu_unwind_pr_common+0x112>
 8001404:	d331      	bcc.n	800146a <__gnu_unwind_pr_common+0x102>
 8001406:	f1b8 0f02 	cmp.w	r8, #2
 800140a:	d11a      	bne.n	8001442 <__gnu_unwind_pr_common+0xda>
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8001412:	f1bb 0f00 	cmp.w	fp, #0
 8001416:	d166      	bne.n	80014e6 <__gnu_unwind_pr_common+0x17e>
 8001418:	b130      	cbz	r0, 8001428 <__gnu_unwind_pr_common+0xc0>
 800141a:	9a00      	ldr	r2, [sp, #0]
 800141c:	2a00      	cmp	r2, #0
 800141e:	d06c      	beq.n	80014fa <__gnu_unwind_pr_common+0x192>
 8001420:	f1ba 0f00 	cmp.w	sl, #0
 8001424:	f000 8090 	beq.w	8001548 <__gnu_unwind_pr_common+0x1e0>
 8001428:	2b00      	cmp	r3, #0
 800142a:	da00      	bge.n	800142e <__gnu_unwind_pr_common+0xc6>
 800142c:	3404      	adds	r4, #4
 800142e:	f10a 0301 	add.w	r3, sl, #1
 8001432:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001436:	e7bc      	b.n	80013b2 <__gnu_unwind_pr_common+0x4a>
 8001438:	4630      	mov	r0, r6
 800143a:	a905      	add	r1, sp, #20
 800143c:	f000 fb46 	bl	8001acc <__gnu_unwind_execute>
 8001440:	b178      	cbz	r0, 8001462 <__gnu_unwind_pr_common+0xfa>
 8001442:	2009      	movs	r0, #9
 8001444:	b009      	add	sp, #36	; 0x24
 8001446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800144a:	2000      	movs	r0, #0
 800144c:	e7cf      	b.n	80013ee <__gnu_unwind_pr_common+0x86>
 800144e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8001452:	3408      	adds	r4, #8
 8001454:	e7ba      	b.n	80013cc <__gnu_unwind_pr_common+0x64>
 8001456:	0212      	lsls	r2, r2, #8
 8001458:	2303      	movs	r3, #3
 800145a:	9205      	str	r2, [sp, #20]
 800145c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8001460:	e79b      	b.n	800139a <__gnu_unwind_pr_common+0x32>
 8001462:	2008      	movs	r0, #8
 8001464:	b009      	add	sp, #36	; 0x24
 8001466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800146a:	f1bb 0f00 	cmp.w	fp, #0
 800146e:	d002      	beq.n	8001476 <__gnu_unwind_pr_common+0x10e>
 8001470:	2800      	cmp	r0, #0
 8001472:	f040 80b4 	bne.w	80015de <__gnu_unwind_pr_common+0x276>
 8001476:	3404      	adds	r4, #4
 8001478:	e79b      	b.n	80013b2 <__gnu_unwind_pr_common+0x4a>
 800147a:	f1bb 0f00 	cmp.w	fp, #0
 800147e:	d118      	bne.n	80014b2 <__gnu_unwind_pr_common+0x14a>
 8001480:	b1a8      	cbz	r0, 80014ae <__gnu_unwind_pr_common+0x146>
 8001482:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001486:	1c99      	adds	r1, r3, #2
 8001488:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800148c:	d0d9      	beq.n	8001442 <__gnu_unwind_pr_common+0xda>
 800148e:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001492:	3301      	adds	r3, #1
 8001494:	9104      	str	r1, [sp, #16]
 8001496:	f000 80b5 	beq.w	8001604 <__gnu_unwind_pr_common+0x29c>
 800149a:	1d20      	adds	r0, r4, #4
 800149c:	f7ff fdea 	bl	8001074 <_Unwind_decode_typeinfo_ptr.isra.0>
 80014a0:	ab04      	add	r3, sp, #16
 80014a2:	4601      	mov	r1, r0
 80014a4:	4628      	mov	r0, r5
 80014a6:	f007 fc31 	bl	8008d0c <__cxa_type_match>
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d167      	bne.n	800157e <__gnu_unwind_pr_common+0x216>
 80014ae:	3408      	adds	r4, #8
 80014b0:	e77f      	b.n	80013b2 <__gnu_unwind_pr_common+0x4a>
 80014b2:	210d      	movs	r1, #13
 80014b4:	4630      	mov	r0, r6
 80014b6:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80014ba:	f7ff feed 	bl	8001298 <_Unwind_GetGR>
 80014be:	4580      	cmp	r8, r0
 80014c0:	d1f5      	bne.n	80014ae <__gnu_unwind_pr_common+0x146>
 80014c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014c4:	429c      	cmp	r4, r3
 80014c6:	d1f2      	bne.n	80014ae <__gnu_unwind_pr_common+0x146>
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff fd07 	bl	8000edc <selfrel_offset31>
 80014ce:	210f      	movs	r1, #15
 80014d0:	4602      	mov	r2, r0
 80014d2:	4630      	mov	r0, r6
 80014d4:	f7ff ff02 	bl	80012dc <_Unwind_SetGR>
 80014d8:	4630      	mov	r0, r6
 80014da:	462a      	mov	r2, r5
 80014dc:	2100      	movs	r1, #0
 80014de:	f7ff fefd 	bl	80012dc <_Unwind_SetGR>
 80014e2:	2007      	movs	r0, #7
 80014e4:	e7ae      	b.n	8001444 <__gnu_unwind_pr_common+0xdc>
 80014e6:	210d      	movs	r1, #13
 80014e8:	4630      	mov	r0, r6
 80014ea:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80014ee:	f7ff fed3 	bl	8001298 <_Unwind_GetGR>
 80014f2:	4580      	cmp	r8, r0
 80014f4:	d032      	beq.n	800155c <__gnu_unwind_pr_common+0x1f4>
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	e796      	b.n	8001428 <__gnu_unwind_pr_common+0xc0>
 80014fa:	f1ba 0f00 	cmp.w	sl, #0
 80014fe:	d023      	beq.n	8001548 <__gnu_unwind_pr_common+0x1e0>
 8001500:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001504:	f104 0804 	add.w	r8, r4, #4
 8001508:	f8cd b008 	str.w	fp, [sp, #8]
 800150c:	f8dd 9000 	ldr.w	r9, [sp]
 8001510:	9703      	str	r7, [sp, #12]
 8001512:	46a3      	mov	fp, r4
 8001514:	461c      	mov	r4, r3
 8001516:	e002      	b.n	800151e <__gnu_unwind_pr_common+0x1b6>
 8001518:	4557      	cmp	r7, sl
 800151a:	46b9      	mov	r9, r7
 800151c:	d040      	beq.n	80015a0 <__gnu_unwind_pr_common+0x238>
 800151e:	4640      	mov	r0, r8
 8001520:	9404      	str	r4, [sp, #16]
 8001522:	f7ff fda7 	bl	8001074 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001526:	ab04      	add	r3, sp, #16
 8001528:	4601      	mov	r1, r0
 800152a:	2200      	movs	r2, #0
 800152c:	4628      	mov	r0, r5
 800152e:	f007 fbed 	bl	8008d0c <__cxa_type_match>
 8001532:	f109 0701 	add.w	r7, r9, #1
 8001536:	f108 0804 	add.w	r8, r8, #4
 800153a:	2800      	cmp	r0, #0
 800153c:	d0ec      	beq.n	8001518 <__gnu_unwind_pr_common+0x1b0>
 800153e:	45d1      	cmp	r9, sl
 8001540:	465c      	mov	r4, fp
 8001542:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8001546:	d1d6      	bne.n	80014f6 <__gnu_unwind_pr_common+0x18e>
 8001548:	4630      	mov	r0, r6
 800154a:	210d      	movs	r1, #13
 800154c:	f7ff fea4 	bl	8001298 <_Unwind_GetGR>
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	6228      	str	r0, [r5, #32]
 8001554:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8001558:	2006      	movs	r0, #6
 800155a:	e773      	b.n	8001444 <__gnu_unwind_pr_common+0xdc>
 800155c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800155e:	429c      	cmp	r4, r3
 8001560:	d1c9      	bne.n	80014f6 <__gnu_unwind_pr_common+0x18e>
 8001562:	2204      	movs	r2, #4
 8001564:	f04f 0800 	mov.w	r8, #0
 8001568:	18a3      	adds	r3, r4, r2
 800156a:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 800156e:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	4543      	cmp	r3, r8
 8001576:	db4d      	blt.n	8001614 <__gnu_unwind_pr_common+0x2ac>
 8001578:	2301      	movs	r3, #1
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	e757      	b.n	800142e <__gnu_unwind_pr_common+0xc6>
 800157e:	4680      	mov	r8, r0
 8001580:	210d      	movs	r1, #13
 8001582:	4630      	mov	r0, r6
 8001584:	f7ff fe88 	bl	8001298 <_Unwind_GetGR>
 8001588:	f1b8 0f02 	cmp.w	r8, #2
 800158c:	6228      	str	r0, [r5, #32]
 800158e:	d13e      	bne.n	800160e <__gnu_unwind_pr_common+0x2a6>
 8001590:	462b      	mov	r3, r5
 8001592:	9a04      	ldr	r2, [sp, #16]
 8001594:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001598:	626b      	str	r3, [r5, #36]	; 0x24
 800159a:	62ac      	str	r4, [r5, #40]	; 0x28
 800159c:	2006      	movs	r0, #6
 800159e:	e751      	b.n	8001444 <__gnu_unwind_pr_common+0xdc>
 80015a0:	465c      	mov	r4, fp
 80015a2:	e7d1      	b.n	8001548 <__gnu_unwind_pr_common+0x1e0>
 80015a4:	a905      	add	r1, sp, #20
 80015a6:	4630      	mov	r0, r6
 80015a8:	f000 fa90 	bl	8001acc <__gnu_unwind_execute>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	f47f af48 	bne.w	8001442 <__gnu_unwind_pr_common+0xda>
 80015b2:	9b01      	ldr	r3, [sp, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f43f af54 	beq.w	8001462 <__gnu_unwind_pr_common+0xfa>
 80015ba:	210f      	movs	r1, #15
 80015bc:	4630      	mov	r0, r6
 80015be:	f7ff fe6b 	bl	8001298 <_Unwind_GetGR>
 80015c2:	210e      	movs	r1, #14
 80015c4:	4602      	mov	r2, r0
 80015c6:	4630      	mov	r0, r6
 80015c8:	f7ff fe88 	bl	80012dc <_Unwind_SetGR>
 80015cc:	4630      	mov	r0, r6
 80015ce:	4a1a      	ldr	r2, [pc, #104]	; (8001638 <__gnu_unwind_pr_common+0x2d0>)
 80015d0:	210f      	movs	r1, #15
 80015d2:	f7ff fe83 	bl	80012dc <_Unwind_SetGR>
 80015d6:	2007      	movs	r0, #7
 80015d8:	b009      	add	sp, #36	; 0x24
 80015da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff fc7c 	bl	8000edc <selfrel_offset31>
 80015e4:	3404      	adds	r4, #4
 80015e6:	4607      	mov	r7, r0
 80015e8:	63ac      	str	r4, [r5, #56]	; 0x38
 80015ea:	4628      	mov	r0, r5
 80015ec:	f007 fbec 	bl	8008dc8 <__cxa_begin_cleanup>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	f43f af26 	beq.w	8001442 <__gnu_unwind_pr_common+0xda>
 80015f6:	4630      	mov	r0, r6
 80015f8:	463a      	mov	r2, r7
 80015fa:	210f      	movs	r1, #15
 80015fc:	f7ff fe6e 	bl	80012dc <_Unwind_SetGR>
 8001600:	2007      	movs	r0, #7
 8001602:	e71f      	b.n	8001444 <__gnu_unwind_pr_common+0xdc>
 8001604:	4630      	mov	r0, r6
 8001606:	210d      	movs	r1, #13
 8001608:	f7ff fe46 	bl	8001298 <_Unwind_GetGR>
 800160c:	6228      	str	r0, [r5, #32]
 800160e:	9b04      	ldr	r3, [sp, #16]
 8001610:	626b      	str	r3, [r5, #36]	; 0x24
 8001612:	e7c2      	b.n	800159a <__gnu_unwind_pr_common+0x232>
 8001614:	f10a 0001 	add.w	r0, sl, #1
 8001618:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800161c:	f7ff fc5e 	bl	8000edc <selfrel_offset31>
 8001620:	210f      	movs	r1, #15
 8001622:	4602      	mov	r2, r0
 8001624:	4630      	mov	r0, r6
 8001626:	f7ff fe59 	bl	80012dc <_Unwind_SetGR>
 800162a:	4630      	mov	r0, r6
 800162c:	462a      	mov	r2, r5
 800162e:	4641      	mov	r1, r8
 8001630:	f7ff fe54 	bl	80012dc <_Unwind_SetGR>
 8001634:	2007      	movs	r0, #7
 8001636:	e705      	b.n	8001444 <__gnu_unwind_pr_common+0xdc>
 8001638:	08009f21 	.word	0x08009f21

0800163c <__aeabi_unwind_cpp_pr0>:
 800163c:	2300      	movs	r3, #0
 800163e:	e693      	b.n	8001368 <__gnu_unwind_pr_common>

08001640 <__aeabi_unwind_cpp_pr1>:
 8001640:	2301      	movs	r3, #1
 8001642:	e691      	b.n	8001368 <__gnu_unwind_pr_common>

08001644 <__aeabi_unwind_cpp_pr2>:
 8001644:	2302      	movs	r3, #2
 8001646:	e68f      	b.n	8001368 <__gnu_unwind_pr_common>

08001648 <_Unwind_VRS_Pop>:
 8001648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800164c:	4605      	mov	r5, r0
 800164e:	b0c4      	sub	sp, #272	; 0x110
 8001650:	2904      	cmp	r1, #4
 8001652:	d806      	bhi.n	8001662 <_Unwind_VRS_Pop+0x1a>
 8001654:	e8df f001 	tbb	[pc, r1]
 8001658:	03052b4d 	.word	0x03052b4d
 800165c:	09          	.byte	0x09
 800165d:	00          	.byte	0x00
 800165e:	2b03      	cmp	r3, #3
 8001660:	d05f      	beq.n	8001722 <_Unwind_VRS_Pop+0xda>
 8001662:	2002      	movs	r0, #2
 8001664:	b044      	add	sp, #272	; 0x110
 8001666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f9      	bne.n	8001662 <_Unwind_VRS_Pop+0x1a>
 800166e:	2a10      	cmp	r2, #16
 8001670:	d8f7      	bhi.n	8001662 <_Unwind_VRS_Pop+0x1a>
 8001672:	682b      	ldr	r3, [r5, #0]
 8001674:	06dc      	lsls	r4, r3, #27
 8001676:	f100 80f4 	bmi.w	8001862 <_Unwind_VRS_Pop+0x21a>
 800167a:	ac22      	add	r4, sp, #136	; 0x88
 800167c:	4620      	mov	r0, r4
 800167e:	9201      	str	r2, [sp, #4]
 8001680:	f000 f994 	bl	80019ac <__gnu_Unwind_Save_WMMXC>
 8001684:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001686:	9a01      	ldr	r2, [sp, #4]
 8001688:	2300      	movs	r3, #0
 800168a:	2601      	movs	r6, #1
 800168c:	fa06 f103 	lsl.w	r1, r6, r3
 8001690:	4211      	tst	r1, r2
 8001692:	d003      	beq.n	800169c <_Unwind_VRS_Pop+0x54>
 8001694:	6801      	ldr	r1, [r0, #0]
 8001696:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 800169a:	3004      	adds	r0, #4
 800169c:	3301      	adds	r3, #1
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d1f4      	bne.n	800168c <_Unwind_VRS_Pop+0x44>
 80016a2:	63a8      	str	r0, [r5, #56]	; 0x38
 80016a4:	4620      	mov	r0, r4
 80016a6:	f000 f977 	bl	8001998 <__gnu_Unwind_Restore_WMMXC>
 80016aa:	2000      	movs	r0, #0
 80016ac:	e7da      	b.n	8001664 <_Unwind_VRS_Pop+0x1c>
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80016b4:	b297      	uxth	r7, r2
 80016b6:	d052      	beq.n	800175e <_Unwind_VRS_Pop+0x116>
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d1d2      	bne.n	8001662 <_Unwind_VRS_Pop+0x1a>
 80016bc:	eb06 0807 	add.w	r8, r6, r7
 80016c0:	f1b8 0f20 	cmp.w	r8, #32
 80016c4:	d8cd      	bhi.n	8001662 <_Unwind_VRS_Pop+0x1a>
 80016c6:	2e0f      	cmp	r6, #15
 80016c8:	f240 8099 	bls.w	80017fe <_Unwind_VRS_Pop+0x1b6>
 80016cc:	46b8      	mov	r8, r7
 80016ce:	2f00      	cmp	r7, #0
 80016d0:	f040 80db 	bne.w	800188a <_Unwind_VRS_Pop+0x242>
 80016d4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80016d6:	63aa      	str	r2, [r5, #56]	; 0x38
 80016d8:	2e0f      	cmp	r6, #15
 80016da:	f240 80be 	bls.w	800185a <_Unwind_VRS_Pop+0x212>
 80016de:	f1b8 0f00 	cmp.w	r8, #0
 80016e2:	d002      	beq.n	80016ea <_Unwind_VRS_Pop+0xa2>
 80016e4:	a802      	add	r0, sp, #8
 80016e6:	f000 f90b 	bl	8001900 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80016ea:	2000      	movs	r0, #0
 80016ec:	b044      	add	sp, #272	; 0x110
 80016ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1b5      	bne.n	8001662 <_Unwind_VRS_Pop+0x1a>
 80016f6:	6bac      	ldr	r4, [r5, #56]	; 0x38
 80016f8:	b297      	uxth	r7, r2
 80016fa:	1d28      	adds	r0, r5, #4
 80016fc:	2601      	movs	r6, #1
 80016fe:	fa06 f103 	lsl.w	r1, r6, r3
 8001702:	4239      	tst	r1, r7
 8001704:	f103 0301 	add.w	r3, r3, #1
 8001708:	d002      	beq.n	8001710 <_Unwind_VRS_Pop+0xc8>
 800170a:	6821      	ldr	r1, [r4, #0]
 800170c:	6001      	str	r1, [r0, #0]
 800170e:	3404      	adds	r4, #4
 8001710:	2b10      	cmp	r3, #16
 8001712:	f100 0004 	add.w	r0, r0, #4
 8001716:	d1f2      	bne.n	80016fe <_Unwind_VRS_Pop+0xb6>
 8001718:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800171c:	d1e5      	bne.n	80016ea <_Unwind_VRS_Pop+0xa2>
 800171e:	63ac      	str	r4, [r5, #56]	; 0x38
 8001720:	e7a0      	b.n	8001664 <_Unwind_VRS_Pop+0x1c>
 8001722:	0c16      	lsrs	r6, r2, #16
 8001724:	b297      	uxth	r7, r2
 8001726:	19f3      	adds	r3, r6, r7
 8001728:	2b10      	cmp	r3, #16
 800172a:	d89a      	bhi.n	8001662 <_Unwind_VRS_Pop+0x1a>
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	071a      	lsls	r2, r3, #28
 8001730:	d45d      	bmi.n	80017ee <_Unwind_VRS_Pop+0x1a6>
 8001732:	ac22      	add	r4, sp, #136	; 0x88
 8001734:	4620      	mov	r0, r4
 8001736:	f000 f90d 	bl	8001954 <__gnu_Unwind_Save_WMMXD>
 800173a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800173e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001740:	b13f      	cbz	r7, 8001752 <_Unwind_VRS_Pop+0x10a>
 8001742:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	f841 0b04 	str.w	r0, [r1], #4
 800174c:	3304      	adds	r3, #4
 800174e:	4293      	cmp	r3, r2
 8001750:	d1f9      	bne.n	8001746 <_Unwind_VRS_Pop+0xfe>
 8001752:	4620      	mov	r0, r4
 8001754:	63ab      	str	r3, [r5, #56]	; 0x38
 8001756:	f000 f8db 	bl	8001910 <__gnu_Unwind_Restore_WMMXD>
 800175a:	2000      	movs	r0, #0
 800175c:	e782      	b.n	8001664 <_Unwind_VRS_Pop+0x1c>
 800175e:	19f2      	adds	r2, r6, r7
 8001760:	2a10      	cmp	r2, #16
 8001762:	f63f af7e 	bhi.w	8001662 <_Unwind_VRS_Pop+0x1a>
 8001766:	2e0f      	cmp	r6, #15
 8001768:	f63f af7b 	bhi.w	8001662 <_Unwind_VRS_Pop+0x1a>
 800176c:	682a      	ldr	r2, [r5, #0]
 800176e:	07d1      	lsls	r1, r2, #31
 8001770:	d508      	bpl.n	8001784 <_Unwind_VRS_Pop+0x13c>
 8001772:	4628      	mov	r0, r5
 8001774:	f022 0203 	bic.w	r2, r2, #3
 8001778:	f840 2b48 	str.w	r2, [r0], #72
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	f000 f8b3 	bl	80018e8 <__gnu_Unwind_Save_VFP>
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	ac22      	add	r4, sp, #136	; 0x88
 8001788:	4620      	mov	r0, r4
 800178a:	f000 f8ad 	bl	80018e8 <__gnu_Unwind_Save_VFP>
 800178e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001790:	9b01      	ldr	r3, [sp, #4]
 8001792:	2f00      	cmp	r7, #0
 8001794:	f000 8095 	beq.w	80018c2 <_Unwind_VRS_Pop+0x27a>
 8001798:	007f      	lsls	r7, r7, #1
 800179a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800179e:	f04f 0800 	mov.w	r8, #0
 80017a2:	3c04      	subs	r4, #4
 80017a4:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 80017a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80017ac:	f844 0f04 	str.w	r0, [r4, #4]!
 80017b0:	4291      	cmp	r1, r2
 80017b2:	d1f9      	bne.n	80017a8 <_Unwind_VRS_Pop+0x160>
 80017b4:	f1b8 0f00 	cmp.w	r8, #0
 80017b8:	d00f      	beq.n	80017da <_Unwind_VRS_Pop+0x192>
 80017ba:	ac02      	add	r4, sp, #8
 80017bc:	2e10      	cmp	r6, #16
 80017be:	4631      	mov	r1, r6
 80017c0:	bf38      	it	cc
 80017c2:	2110      	movcc	r1, #16
 80017c4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80017c8:	3984      	subs	r1, #132	; 0x84
 80017ca:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 80017ce:	f852 0b04 	ldr.w	r0, [r2], #4
 80017d2:	f841 0f04 	str.w	r0, [r1, #4]!
 80017d6:	4294      	cmp	r4, r2
 80017d8:	d1f9      	bne.n	80017ce <_Unwind_VRS_Pop+0x186>
 80017da:	2b01      	cmp	r3, #1
 80017dc:	f47f af7b 	bne.w	80016d6 <_Unwind_VRS_Pop+0x8e>
 80017e0:	ac22      	add	r4, sp, #136	; 0x88
 80017e2:	3204      	adds	r2, #4
 80017e4:	63aa      	str	r2, [r5, #56]	; 0x38
 80017e6:	4620      	mov	r0, r4
 80017e8:	f000 f87a 	bl	80018e0 <__gnu_Unwind_Restore_VFP>
 80017ec:	e77d      	b.n	80016ea <_Unwind_VRS_Pop+0xa2>
 80017ee:	f023 0308 	bic.w	r3, r3, #8
 80017f2:	602b      	str	r3, [r5, #0]
 80017f4:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 80017f8:	f000 f8ac 	bl	8001954 <__gnu_Unwind_Save_WMMXD>
 80017fc:	e799      	b.n	8001732 <_Unwind_VRS_Pop+0xea>
 80017fe:	f1b8 0f10 	cmp.w	r8, #16
 8001802:	682a      	ldr	r2, [r5, #0]
 8001804:	d943      	bls.n	800188e <_Unwind_VRS_Pop+0x246>
 8001806:	07d0      	lsls	r0, r2, #31
 8001808:	f1a8 0810 	sub.w	r8, r8, #16
 800180c:	d50b      	bpl.n	8001826 <_Unwind_VRS_Pop+0x1de>
 800180e:	4628      	mov	r0, r5
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	f042 0202 	orr.w	r2, r2, #2
 8001818:	f840 2b48 	str.w	r2, [r0], #72
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	f000 f86b 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 8001822:	682a      	ldr	r2, [r5, #0]
 8001824:	9b01      	ldr	r3, [sp, #4]
 8001826:	0751      	lsls	r1, r2, #29
 8001828:	d425      	bmi.n	8001876 <_Unwind_VRS_Pop+0x22e>
 800182a:	2e0f      	cmp	r6, #15
 800182c:	d804      	bhi.n	8001838 <_Unwind_VRS_Pop+0x1f0>
 800182e:	a822      	add	r0, sp, #136	; 0x88
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	f000 f861 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 8001836:	9b01      	ldr	r3, [sp, #4]
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	ac02      	add	r4, sp, #8
 800183c:	4620      	mov	r0, r4
 800183e:	f000 f863 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001842:	f1c6 0110 	rsb	r1, r6, #16
 8001846:	2900      	cmp	r1, #0
 8001848:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800184a:	9b01      	ldr	r3, [sp, #4]
 800184c:	ddb6      	ble.n	80017bc <_Unwind_VRS_Pop+0x174>
 800184e:	ac22      	add	r4, sp, #136	; 0x88
 8001850:	004f      	lsls	r7, r1, #1
 8001852:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8001856:	4611      	mov	r1, r2
 8001858:	e7a3      	b.n	80017a2 <_Unwind_VRS_Pop+0x15a>
 800185a:	a822      	add	r0, sp, #136	; 0x88
 800185c:	f000 f848 	bl	80018f0 <__gnu_Unwind_Restore_VFP_D>
 8001860:	e73d      	b.n	80016de <_Unwind_VRS_Pop+0x96>
 8001862:	f023 0310 	bic.w	r3, r3, #16
 8001866:	602b      	str	r3, [r5, #0]
 8001868:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 800186c:	9201      	str	r2, [sp, #4]
 800186e:	f000 f89d 	bl	80019ac <__gnu_Unwind_Save_WMMXC>
 8001872:	9a01      	ldr	r2, [sp, #4]
 8001874:	e701      	b.n	800167a <_Unwind_VRS_Pop+0x32>
 8001876:	4628      	mov	r0, r5
 8001878:	f022 0204 	bic.w	r2, r2, #4
 800187c:	f840 2bd0 	str.w	r2, [r0], #208
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	f000 f841 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001886:	9b01      	ldr	r3, [sp, #4]
 8001888:	e7cf      	b.n	800182a <_Unwind_VRS_Pop+0x1e2>
 800188a:	682a      	ldr	r2, [r5, #0]
 800188c:	e7cb      	b.n	8001826 <_Unwind_VRS_Pop+0x1de>
 800188e:	07d0      	lsls	r0, r2, #31
 8001890:	d50a      	bpl.n	80018a8 <_Unwind_VRS_Pop+0x260>
 8001892:	4628      	mov	r0, r5
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	f042 0202 	orr.w	r2, r2, #2
 800189c:	f840 2b48 	str.w	r2, [r0], #72
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	f000 f829 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 80018a6:	9b01      	ldr	r3, [sp, #4]
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	ac22      	add	r4, sp, #136	; 0x88
 80018ac:	4620      	mov	r0, r4
 80018ae:	f000 f823 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 80018b2:	46b8      	mov	r8, r7
 80018b4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80018b6:	9b01      	ldr	r3, [sp, #4]
 80018b8:	2f00      	cmp	r7, #0
 80018ba:	f47f af6d 	bne.w	8001798 <_Unwind_VRS_Pop+0x150>
 80018be:	460a      	mov	r2, r1
 80018c0:	e709      	b.n	80016d6 <_Unwind_VRS_Pop+0x8e>
 80018c2:	460a      	mov	r2, r1
 80018c4:	e78d      	b.n	80017e2 <_Unwind_VRS_Pop+0x19a>
 80018c6:	bf00      	nop

080018c8 <__restore_core_regs>:
 80018c8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80018cc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80018d0:	469c      	mov	ip, r3
 80018d2:	46a6      	mov	lr, r4
 80018d4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80018d8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80018dc:	46e5      	mov	sp, ip
 80018de:	bd00      	pop	{pc}

080018e0 <__gnu_Unwind_Restore_VFP>:
 80018e0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <__gnu_Unwind_Save_VFP>:
 80018e8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <__gnu_Unwind_Restore_VFP_D>:
 80018f0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <__gnu_Unwind_Save_VFP_D>:
 80018f8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001900:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001908:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <__gnu_Unwind_Restore_WMMXD>:
 8001910:	ecf0 0102 	ldfe	f0, [r0], #8
 8001914:	ecf0 1102 	ldfe	f1, [r0], #8
 8001918:	ecf0 2102 	ldfe	f2, [r0], #8
 800191c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001920:	ecf0 4102 	ldfe	f4, [r0], #8
 8001924:	ecf0 5102 	ldfe	f5, [r0], #8
 8001928:	ecf0 6102 	ldfe	f6, [r0], #8
 800192c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001930:	ecf0 8102 	ldfp	f0, [r0], #8
 8001934:	ecf0 9102 	ldfp	f1, [r0], #8
 8001938:	ecf0 a102 	ldfp	f2, [r0], #8
 800193c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001940:	ecf0 c102 	ldfp	f4, [r0], #8
 8001944:	ecf0 d102 	ldfp	f5, [r0], #8
 8001948:	ecf0 e102 	ldfp	f6, [r0], #8
 800194c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop

08001954 <__gnu_Unwind_Save_WMMXD>:
 8001954:	ece0 0102 	stfe	f0, [r0], #8
 8001958:	ece0 1102 	stfe	f1, [r0], #8
 800195c:	ece0 2102 	stfe	f2, [r0], #8
 8001960:	ece0 3102 	stfe	f3, [r0], #8
 8001964:	ece0 4102 	stfe	f4, [r0], #8
 8001968:	ece0 5102 	stfe	f5, [r0], #8
 800196c:	ece0 6102 	stfe	f6, [r0], #8
 8001970:	ece0 7102 	stfe	f7, [r0], #8
 8001974:	ece0 8102 	stfp	f0, [r0], #8
 8001978:	ece0 9102 	stfp	f1, [r0], #8
 800197c:	ece0 a102 	stfp	f2, [r0], #8
 8001980:	ece0 b102 	stfp	f3, [r0], #8
 8001984:	ece0 c102 	stfp	f4, [r0], #8
 8001988:	ece0 d102 	stfp	f5, [r0], #8
 800198c:	ece0 e102 	stfp	f6, [r0], #8
 8001990:	ece0 f102 	stfp	f7, [r0], #8
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <__gnu_Unwind_Restore_WMMXC>:
 8001998:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800199c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80019a0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80019a4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop

080019ac <__gnu_Unwind_Save_WMMXC>:
 80019ac:	fca0 8101 	stc2	1, cr8, [r0], #4
 80019b0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80019b4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80019b8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <_Unwind_RaiseException>:
 80019c0:	46ec      	mov	ip, sp
 80019c2:	b500      	push	{lr}
 80019c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019d4:	a901      	add	r1, sp, #4
 80019d6:	f7ff fbdd 	bl	8001194 <__gnu_Unwind_RaiseException>
 80019da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019de:	b012      	add	sp, #72	; 0x48
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <_Unwind_Resume>:
 80019e4:	46ec      	mov	ip, sp
 80019e6:	b500      	push	{lr}
 80019e8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019f8:	a901      	add	r1, sp, #4
 80019fa:	f7ff fc05 	bl	8001208 <__gnu_Unwind_Resume>
 80019fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a02:	b012      	add	sp, #72	; 0x48
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <_Unwind_Resume_or_Rethrow>:
 8001a08:	46ec      	mov	ip, sp
 8001a0a:	b500      	push	{lr}
 8001a0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a1c:	a901      	add	r1, sp, #4
 8001a1e:	f7ff fc15 	bl	800124c <__gnu_Unwind_Resume_or_Rethrow>
 8001a22:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a26:	b012      	add	sp, #72	; 0x48
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <_Unwind_ForcedUnwind>:
 8001a2c:	46ec      	mov	ip, sp
 8001a2e:	b500      	push	{lr}
 8001a30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a40:	ab01      	add	r3, sp, #4
 8001a42:	f7ff fbd7 	bl	80011f4 <__gnu_Unwind_ForcedUnwind>
 8001a46:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a4a:	b012      	add	sp, #72	; 0x48
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <_Unwind_Backtrace>:
 8001a50:	46ec      	mov	ip, sp
 8001a52:	b500      	push	{lr}
 8001a54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a64:	aa01      	add	r2, sp, #4
 8001a66:	f7ff fc47 	bl	80012f8 <__gnu_Unwind_Backtrace>
 8001a6a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a6e:	b012      	add	sp, #72	; 0x48
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <next_unwind_byte>:
 8001a74:	7a02      	ldrb	r2, [r0, #8]
 8001a76:	b982      	cbnz	r2, 8001a9a <next_unwind_byte+0x26>
 8001a78:	7a43      	ldrb	r3, [r0, #9]
 8001a7a:	b1ab      	cbz	r3, 8001aa8 <next_unwind_byte+0x34>
 8001a7c:	6842      	ldr	r2, [r0, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b410      	push	{r4}
 8001a82:	7243      	strb	r3, [r0, #9]
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	2103      	movs	r1, #3
 8001a88:	1d14      	adds	r4, r2, #4
 8001a8a:	7201      	strb	r1, [r0, #8]
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	6044      	str	r4, [r0, #4]
 8001a90:	6002      	str	r2, [r0, #0]
 8001a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a96:	0e18      	lsrs	r0, r3, #24
 8001a98:	4770      	bx	lr
 8001a9a:	6803      	ldr	r3, [r0, #0]
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	7202      	strb	r2, [r0, #8]
 8001aa0:	021a      	lsls	r2, r3, #8
 8001aa2:	6002      	str	r2, [r0, #0]
 8001aa4:	0e18      	lsrs	r0, r3, #24
 8001aa6:	4770      	bx	lr
 8001aa8:	20b0      	movs	r0, #176	; 0xb0
 8001aaa:	4770      	bx	lr

08001aac <_Unwind_GetGR.constprop.0>:
 8001aac:	b500      	push	{lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	aa03      	add	r2, sp, #12
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9200      	str	r2, [sp, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	220c      	movs	r2, #12
 8001aba:	f7ff fbd7 	bl	800126c <_Unwind_VRS_Get>
 8001abe:	9803      	ldr	r0, [sp, #12]
 8001ac0:	b005      	add	sp, #20
 8001ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac6:	bf00      	nop

08001ac8 <unwind_UCB_from_context>:
 8001ac8:	e7f0      	b.n	8001aac <_Unwind_GetGR.constprop.0>
 8001aca:	bf00      	nop

08001acc <__gnu_unwind_execute>:
 8001acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ad0:	4605      	mov	r5, r0
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	460e      	mov	r6, r1
 8001ad6:	f04f 0800 	mov.w	r8, #0
 8001ada:	4630      	mov	r0, r6
 8001adc:	f7ff ffca 	bl	8001a74 <next_unwind_byte>
 8001ae0:	28b0      	cmp	r0, #176	; 0xb0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	f000 80b1 	beq.w	8001c4a <__gnu_unwind_execute+0x17e>
 8001ae8:	0607      	lsls	r7, r0, #24
 8001aea:	d520      	bpl.n	8001b2e <__gnu_unwind_execute+0x62>
 8001aec:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001af0:	2b80      	cmp	r3, #128	; 0x80
 8001af2:	d065      	beq.n	8001bc0 <__gnu_unwind_execute+0xf4>
 8001af4:	2b90      	cmp	r3, #144	; 0x90
 8001af6:	d036      	beq.n	8001b66 <__gnu_unwind_execute+0x9a>
 8001af8:	2ba0      	cmp	r3, #160	; 0xa0
 8001afa:	d078      	beq.n	8001bee <__gnu_unwind_execute+0x122>
 8001afc:	2bb0      	cmp	r3, #176	; 0xb0
 8001afe:	d047      	beq.n	8001b90 <__gnu_unwind_execute+0xc4>
 8001b00:	2bc0      	cmp	r3, #192	; 0xc0
 8001b02:	f000 808a 	beq.w	8001c1a <__gnu_unwind_execute+0x14e>
 8001b06:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001b0a:	2bd0      	cmp	r3, #208	; 0xd0
 8001b0c:	d10b      	bne.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001b0e:	f000 0207 	and.w	r2, r0, #7
 8001b12:	3201      	adds	r2, #1
 8001b14:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b18:	2305      	movs	r3, #5
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f7ff fd93 	bl	8001648 <_Unwind_VRS_Pop>
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d0d9      	beq.n	8001ada <__gnu_unwind_execute+0xe>
 8001b26:	2009      	movs	r0, #9
 8001b28:	b005      	add	sp, #20
 8001b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b2e:	f10d 090c 	add.w	r9, sp, #12
 8001b32:	2300      	movs	r3, #0
 8001b34:	4619      	mov	r1, r3
 8001b36:	0087      	lsls	r7, r0, #2
 8001b38:	f8cd 9000 	str.w	r9, [sp]
 8001b3c:	220d      	movs	r2, #13
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f7ff fb94 	bl	800126c <_Unwind_VRS_Get>
 8001b44:	b2ff      	uxtb	r7, r7
 8001b46:	9b03      	ldr	r3, [sp, #12]
 8001b48:	f8cd 9000 	str.w	r9, [sp]
 8001b4c:	3704      	adds	r7, #4
 8001b4e:	0660      	lsls	r0, r4, #25
 8001b50:	bf4c      	ite	mi
 8001b52:	1bdf      	submi	r7, r3, r7
 8001b54:	18ff      	addpl	r7, r7, r3
 8001b56:	2300      	movs	r3, #0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	220d      	movs	r2, #13
 8001b5c:	4628      	mov	r0, r5
 8001b5e:	9703      	str	r7, [sp, #12]
 8001b60:	f7ff fba6 	bl	80012b0 <_Unwind_VRS_Set>
 8001b64:	e7b9      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001b66:	f000 030d 	and.w	r3, r0, #13
 8001b6a:	2b0d      	cmp	r3, #13
 8001b6c:	d0db      	beq.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001b6e:	af03      	add	r7, sp, #12
 8001b70:	2300      	movs	r3, #0
 8001b72:	f000 020f 	and.w	r2, r0, #15
 8001b76:	4619      	mov	r1, r3
 8001b78:	9700      	str	r7, [sp, #0]
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f7ff fb76 	bl	800126c <_Unwind_VRS_Get>
 8001b80:	2300      	movs	r3, #0
 8001b82:	9700      	str	r7, [sp, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	220d      	movs	r2, #13
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f7ff fb91 	bl	80012b0 <_Unwind_VRS_Set>
 8001b8e:	e7a4      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001b90:	28b1      	cmp	r0, #177	; 0xb1
 8001b92:	d05f      	beq.n	8001c54 <__gnu_unwind_execute+0x188>
 8001b94:	28b2      	cmp	r0, #178	; 0xb2
 8001b96:	f000 80cc 	beq.w	8001d32 <__gnu_unwind_execute+0x266>
 8001b9a:	28b3      	cmp	r0, #179	; 0xb3
 8001b9c:	d07e      	beq.n	8001c9c <__gnu_unwind_execute+0x1d0>
 8001b9e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001ba2:	2bb4      	cmp	r3, #180	; 0xb4
 8001ba4:	d0bf      	beq.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001ba6:	f000 0207 	and.w	r2, r0, #7
 8001baa:	3201      	adds	r2, #1
 8001bac:	2301      	movs	r3, #1
 8001bae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	f7ff fd47 	bl	8001648 <_Unwind_VRS_Pop>
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	d08d      	beq.n	8001ada <__gnu_unwind_execute+0xe>
 8001bbe:	e7b2      	b.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001bc0:	4630      	mov	r0, r6
 8001bc2:	f7ff ff57 	bl	8001a74 <next_unwind_byte>
 8001bc6:	0224      	lsls	r4, r4, #8
 8001bc8:	4304      	orrs	r4, r0
 8001bca:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001bce:	d0aa      	beq.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001bd0:	0124      	lsls	r4, r4, #4
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	b2a2      	uxth	r2, r4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f7ff fd35 	bl	8001648 <_Unwind_VRS_Pop>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d1a1      	bne.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001be2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001be6:	bf18      	it	ne
 8001be8:	f04f 0801 	movne.w	r8, #1
 8001bec:	e775      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001bee:	43c2      	mvns	r2, r0
 8001bf0:	f002 0307 	and.w	r3, r2, #7
 8001bf4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001bf8:	411a      	asrs	r2, r3
 8001bfa:	0701      	lsls	r1, r0, #28
 8001bfc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	bf48      	it	mi
 8001c06:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	f7ff fd1b 	bl	8001648 <_Unwind_VRS_Pop>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	f43f af61 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001c18:	e785      	b.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001c1a:	28c6      	cmp	r0, #198	; 0xc6
 8001c1c:	d051      	beq.n	8001cc2 <__gnu_unwind_execute+0x1f6>
 8001c1e:	28c7      	cmp	r0, #199	; 0xc7
 8001c20:	d05a      	beq.n	8001cd8 <__gnu_unwind_execute+0x20c>
 8001c22:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001c26:	2bc0      	cmp	r3, #192	; 0xc0
 8001c28:	d069      	beq.n	8001cfe <__gnu_unwind_execute+0x232>
 8001c2a:	28c8      	cmp	r0, #200	; 0xc8
 8001c2c:	d075      	beq.n	8001d1a <__gnu_unwind_execute+0x24e>
 8001c2e:	28c9      	cmp	r0, #201	; 0xc9
 8001c30:	f47f af79 	bne.w	8001b26 <__gnu_unwind_execute+0x5a>
 8001c34:	4630      	mov	r0, r6
 8001c36:	f7ff ff1d 	bl	8001a74 <next_unwind_byte>
 8001c3a:	0302      	lsls	r2, r0, #12
 8001c3c:	f000 000f 	and.w	r0, r0, #15
 8001c40:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001c44:	3001      	adds	r0, #1
 8001c46:	4302      	orrs	r2, r0
 8001c48:	e766      	b.n	8001b18 <__gnu_unwind_execute+0x4c>
 8001c4a:	f1b8 0f00 	cmp.w	r8, #0
 8001c4e:	d014      	beq.n	8001c7a <__gnu_unwind_execute+0x1ae>
 8001c50:	2000      	movs	r0, #0
 8001c52:	e769      	b.n	8001b28 <__gnu_unwind_execute+0x5c>
 8001c54:	4630      	mov	r0, r6
 8001c56:	f7ff ff0d 	bl	8001a74 <next_unwind_byte>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	f43f af63 	beq.w	8001b26 <__gnu_unwind_execute+0x5a>
 8001c60:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001c64:	f47f af5f 	bne.w	8001b26 <__gnu_unwind_execute+0x5a>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	f7ff fceb 	bl	8001648 <_Unwind_VRS_Pop>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	f43f af31 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001c78:	e755      	b.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001c7a:	ac03      	add	r4, sp, #12
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	220e      	movs	r2, #14
 8001c80:	4641      	mov	r1, r8
 8001c82:	9400      	str	r4, [sp, #0]
 8001c84:	4628      	mov	r0, r5
 8001c86:	f7ff faf1 	bl	800126c <_Unwind_VRS_Get>
 8001c8a:	9400      	str	r4, [sp, #0]
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	4643      	mov	r3, r8
 8001c90:	220f      	movs	r2, #15
 8001c92:	4641      	mov	r1, r8
 8001c94:	f7ff fb0c 	bl	80012b0 <_Unwind_VRS_Set>
 8001c98:	4640      	mov	r0, r8
 8001c9a:	e745      	b.n	8001b28 <__gnu_unwind_execute+0x5c>
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	f7ff fee9 	bl	8001a74 <next_unwind_byte>
 8001ca2:	0301      	lsls	r1, r0, #12
 8001ca4:	f000 000f 	and.w	r0, r0, #15
 8001ca8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001cac:	1c42      	adds	r2, r0, #1
 8001cae:	2301      	movs	r3, #1
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7ff fcc7 	bl	8001648 <_Unwind_VRS_Pop>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	f43f af0d 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001cc0:	e731      	b.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001cc2:	4630      	mov	r0, r6
 8001cc4:	f7ff fed6 	bl	8001a74 <next_unwind_byte>
 8001cc8:	0301      	lsls	r1, r0, #12
 8001cca:	f000 000f 	and.w	r0, r0, #15
 8001cce:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001cd2:	1c42      	adds	r2, r0, #1
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e7eb      	b.n	8001cb0 <__gnu_unwind_execute+0x1e4>
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f7ff fecb 	bl	8001a74 <next_unwind_byte>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	f43f af20 	beq.w	8001b26 <__gnu_unwind_execute+0x5a>
 8001ce6:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001cea:	f47f af1c 	bne.w	8001b26 <__gnu_unwind_execute+0x5a>
 8001cee:	2104      	movs	r1, #4
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	f7ff fca9 	bl	8001648 <_Unwind_VRS_Pop>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	f43f aeef 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001cfc:	e713      	b.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001cfe:	f000 020f 	and.w	r2, r0, #15
 8001d02:	3201      	adds	r2, #1
 8001d04:	2303      	movs	r3, #3
 8001d06:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff fc9b 	bl	8001648 <_Unwind_VRS_Pop>
 8001d12:	2800      	cmp	r0, #0
 8001d14:	f43f aee1 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001d18:	e705      	b.n	8001b26 <__gnu_unwind_execute+0x5a>
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff feaa 	bl	8001a74 <next_unwind_byte>
 8001d20:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001d24:	f000 030f 	and.w	r3, r0, #15
 8001d28:	3210      	adds	r2, #16
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001d30:	e6f2      	b.n	8001b18 <__gnu_unwind_execute+0x4c>
 8001d32:	2300      	movs	r3, #0
 8001d34:	f10d 090c 	add.w	r9, sp, #12
 8001d38:	220d      	movs	r2, #13
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f8cd 9000 	str.w	r9, [sp]
 8001d40:	4628      	mov	r0, r5
 8001d42:	f7ff fa93 	bl	800126c <_Unwind_VRS_Get>
 8001d46:	4630      	mov	r0, r6
 8001d48:	f7ff fe94 	bl	8001a74 <next_unwind_byte>
 8001d4c:	0602      	lsls	r2, r0, #24
 8001d4e:	f04f 0702 	mov.w	r7, #2
 8001d52:	d50c      	bpl.n	8001d6e <__gnu_unwind_execute+0x2a2>
 8001d54:	9b03      	ldr	r3, [sp, #12]
 8001d56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001d5a:	40b8      	lsls	r0, r7
 8001d5c:	4403      	add	r3, r0
 8001d5e:	4630      	mov	r0, r6
 8001d60:	9303      	str	r3, [sp, #12]
 8001d62:	f7ff fe87 	bl	8001a74 <next_unwind_byte>
 8001d66:	0603      	lsls	r3, r0, #24
 8001d68:	f107 0707 	add.w	r7, r7, #7
 8001d6c:	d4f2      	bmi.n	8001d54 <__gnu_unwind_execute+0x288>
 8001d6e:	9b03      	ldr	r3, [sp, #12]
 8001d70:	f8cd 9000 	str.w	r9, [sp]
 8001d74:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001d78:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001d7c:	40bc      	lsls	r4, r7
 8001d7e:	2300      	movs	r3, #0
 8001d80:	4414      	add	r4, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	220d      	movs	r2, #13
 8001d86:	4628      	mov	r0, r5
 8001d88:	9403      	str	r4, [sp, #12]
 8001d8a:	f7ff fa91 	bl	80012b0 <_Unwind_VRS_Set>
 8001d8e:	e6a4      	b.n	8001ada <__gnu_unwind_execute+0xe>

08001d90 <__gnu_unwind_frame>:
 8001d90:	b510      	push	{r4, lr}
 8001d92:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d94:	b084      	sub	sp, #16
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d9e:	79dc      	ldrb	r4, [r3, #7]
 8001da0:	f88d 400d 	strb.w	r4, [sp, #13]
 8001da4:	0212      	lsls	r2, r2, #8
 8001da6:	3308      	adds	r3, #8
 8001da8:	4608      	mov	r0, r1
 8001daa:	a901      	add	r1, sp, #4
 8001dac:	9201      	str	r2, [sp, #4]
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	f7ff fe8c 	bl	8001acc <__gnu_unwind_execute>
 8001db4:	b004      	add	sp, #16
 8001db6:	bd10      	pop	{r4, pc}

08001db8 <_Unwind_GetRegionStart>:
 8001db8:	b508      	push	{r3, lr}
 8001dba:	f7ff fe85 	bl	8001ac8 <unwind_UCB_from_context>
 8001dbe:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001dc0:	bd08      	pop	{r3, pc}
 8001dc2:	bf00      	nop

08001dc4 <_Unwind_GetLanguageSpecificData>:
 8001dc4:	b508      	push	{r3, lr}
 8001dc6:	f7ff fe7f 	bl	8001ac8 <unwind_UCB_from_context>
 8001dca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001dcc:	79c3      	ldrb	r3, [r0, #7]
 8001dce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001dd2:	3008      	adds	r0, #8
 8001dd4:	bd08      	pop	{r3, pc}
 8001dd6:	bf00      	nop

08001dd8 <_Unwind_GetDataRelBase>:
 8001dd8:	b508      	push	{r3, lr}
 8001dda:	f009 f956 	bl	800b08a <abort>
 8001dde:	bf00      	nop

08001de0 <_Unwind_GetTextRelBase>:
 8001de0:	b508      	push	{r3, lr}
 8001de2:	f7ff fff9 	bl	8001dd8 <_Unwind_GetDataRelBase>
 8001de6:	bf00      	nop

08001de8 <__aeabi_idiv0>:
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <HAL_Init+0x40>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_Init+0x40>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_Init+0x40>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 fc73 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f005 fbfa 	bl	8007618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fc8b 	bl	800276a <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 fc53 	bl	8002716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200003f8 	.word	0x200003f8
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	20000000 	.word	0x20000000

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000004 	.word	0x20000004
 8001eb4:	200008e0 	.word	0x200008e0

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200008e0 	.word	0x200008e0

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffee 	bl	8001eb8 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_Delay+0x40>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e033      	b.n	8001f92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f005 fb98 	bl	8007668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f5a:	f023 0302 	bic.w	r3, r3, #2
 8001f5e:	f043 0202 	orr.w	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f9fe 	bl	8002368 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	f043 0201 	orr.w	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
 8001f82:	e001      	b.n	8001f88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Start+0x1a>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e08a      	b.n	80020cc <HAL_ADC_Start+0x130>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d018      	beq.n	8001ffe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fdc:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <HAL_ADC_Start+0x13c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a3e      	ldr	r2, [pc, #248]	; (80020dc <HAL_ADC_Start+0x140>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9a      	lsrs	r2, r3, #18
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ff0:	e002      	b.n	8001ff8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f9      	bne.n	8001ff2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d15e      	bne.n	80020ca <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002036:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204a:	d106      	bne.n	800205a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f023 0206 	bic.w	r2, r3, #6
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	645a      	str	r2, [r3, #68]	; 0x44
 8002058:	e002      	b.n	8002060 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_ADC_Start+0x144>)
 800206a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002074:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d11c      	bne.n	80020ca <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	e013      	b.n	80020ca <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <HAL_ADC_Start+0x148>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d10e      	bne.n	80020ca <HAL_ADC_Start+0x12e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d107      	bne.n	80020ca <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020c8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	200003f8 	.word	0x200003f8
 80020dc:	431bde83 	.word	0x431bde83
 80020e0:	40012300 	.word	0x40012300
 80020e4:	40012000 	.word	0x40012000

080020e8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1c>
 800211c:	2302      	movs	r3, #2
 800211e:	e113      	b.n	8002348 <HAL_ADC_ConfigChannel+0x244>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b09      	cmp	r3, #9
 800212e:	d925      	bls.n	800217c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68d9      	ldr	r1, [r3, #12]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	3b1e      	subs	r3, #30
 8002146:	2207      	movs	r2, #7
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43da      	mvns	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	400a      	ands	r2, r1
 8002154:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68d9      	ldr	r1, [r3, #12]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	4603      	mov	r3, r0
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4403      	add	r3, r0
 800216e:	3b1e      	subs	r3, #30
 8002170:	409a      	lsls	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	e022      	b.n	80021c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6919      	ldr	r1, [r3, #16]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	2207      	movs	r2, #7
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	400a      	ands	r2, r1
 800219e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4403      	add	r3, r0
 80021b8:	409a      	lsls	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d824      	bhi.n	8002214 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	3b05      	subs	r3, #5
 80021dc:	221f      	movs	r2, #31
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	400a      	ands	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b05      	subs	r3, #5
 8002206:	fa00 f203 	lsl.w	r2, r0, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	635a      	str	r2, [r3, #52]	; 0x34
 8002212:	e04c      	b.n	80022ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d824      	bhi.n	8002266 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b23      	subs	r3, #35	; 0x23
 800222e:	221f      	movs	r2, #31
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43da      	mvns	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	400a      	ands	r2, r1
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	3b23      	subs	r3, #35	; 0x23
 8002258:	fa00 f203 	lsl.w	r2, r0, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
 8002264:	e023      	b.n	80022ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b41      	subs	r3, #65	; 0x41
 8002278:	221f      	movs	r2, #31
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	400a      	ands	r2, r1
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	3b41      	subs	r3, #65	; 0x41
 80022a2:	fa00 f203 	lsl.w	r2, r0, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_ADC_ConfigChannel+0x250>)
 80022b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_ADC_ConfigChannel+0x254>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d10f      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1d8>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b12      	cmp	r3, #18
 80022c2:	d10b      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_ADC_ConfigChannel+0x254>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d12b      	bne.n	800233e <HAL_ADC_ConfigChannel+0x23a>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_ADC_ConfigChannel+0x258>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <HAL_ADC_ConfigChannel+0x1f4>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b11      	cmp	r3, #17
 80022f6:	d122      	bne.n	800233e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_ADC_ConfigChannel+0x258>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d111      	bne.n	800233e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_ADC_ConfigChannel+0x25c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <HAL_ADC_ConfigChannel+0x260>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	0c9a      	lsrs	r2, r3, #18
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002330:	e002      	b.n	8002338 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3b01      	subs	r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f9      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40012300 	.word	0x40012300
 8002358:	40012000 	.word	0x40012000
 800235c:	10000012 	.word	0x10000012
 8002360:	200003f8 	.word	0x200003f8
 8002364:	431bde83 	.word	0x431bde83

08002368 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002370:	4b79      	ldr	r3, [pc, #484]	; (8002558 <ADC_Init+0x1f0>)
 8002372:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800239c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	021a      	lsls	r2, r3, #8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6899      	ldr	r1, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	4a58      	ldr	r2, [pc, #352]	; (800255c <ADC_Init+0x1f4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d022      	beq.n	8002446 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800240e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6899      	ldr	r1, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	e00f      	b.n	8002466 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002464:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0202 	bic.w	r2, r2, #2
 8002474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6899      	ldr	r1, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e1b      	ldrb	r3, [r3, #24]
 8002480:	005a      	lsls	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01b      	beq.n	80024cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6859      	ldr	r1, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	3b01      	subs	r3, #1
 80024c0:	035a      	lsls	r2, r3, #13
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	e007      	b.n	80024dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	051a      	lsls	r2, r3, #20
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800251e:	025a      	lsls	r2, r3, #9
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6899      	ldr	r1, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	029a      	lsls	r2, r3, #10
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40012300 	.word	0x40012300
 800255c:	0f000001 	.word	0x0f000001

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <__NVIC_EnableIRQ+0x38>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	; (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff29 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002728:	f7ff ff3e 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 800272c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff8e 	bl	8002654 <NVIC_EncodePriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5d 	bl	8002600 <__NVIC_SetPriority>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff31 	bl	80025c4 <__NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffa2 	bl	80026bc <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e00c      	b.n	80027ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2205      	movs	r2, #5
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e159      	b.n	8002a98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8148 	bne.w	8002a92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d00b      	beq.n	8002822 <HAL_GPIO_Init+0x5a>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002816:	2b11      	cmp	r3, #17
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b12      	cmp	r3, #18
 8002820:	d130      	bne.n	8002884 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002858:	2201      	movs	r2, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 0201 	and.w	r2, r3, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0xfc>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b12      	cmp	r3, #18
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a2 	beq.w	8002a92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b56      	ldr	r3, [pc, #344]	; (8002aac <HAL_GPIO_Init+0x2e4>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a55      	ldr	r2, [pc, #340]	; (8002aac <HAL_GPIO_Init+0x2e4>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b53      	ldr	r3, [pc, #332]	; (8002aac <HAL_GPIO_Init+0x2e4>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a51      	ldr	r2, [pc, #324]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a48      	ldr	r2, [pc, #288]	; (8002ab4 <HAL_GPIO_Init+0x2ec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d019      	beq.n	80029ca <HAL_GPIO_Init+0x202>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a47      	ldr	r2, [pc, #284]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_Init+0x1fe>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a46      	ldr	r2, [pc, #280]	; (8002abc <HAL_GPIO_Init+0x2f4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00d      	beq.n	80029c2 <HAL_GPIO_Init+0x1fa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a45      	ldr	r2, [pc, #276]	; (8002ac0 <HAL_GPIO_Init+0x2f8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <HAL_GPIO_Init+0x1f6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a44      	ldr	r2, [pc, #272]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_GPIO_Init+0x1f2>
 80029b6:	2304      	movs	r3, #4
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029ba:	2307      	movs	r3, #7
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029ca:	2300      	movs	r3, #0
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029dc:	4934      	ldr	r1, [pc, #208]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a0e:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a38:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3e:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a68:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3301      	adds	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	f67f aea2 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3724      	adds	r7, #36	; 0x24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	40020400 	.word	0x40020400
 8002abc:	40020800 	.word	0x40020800
 8002ac0:	40020c00 	.word	0x40020c00
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40013c00 	.word	0x40013c00

08002acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002adc:	787b      	ldrb	r3, [r7, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae8:	e003      	b.n	8002af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	041a      	lsls	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	401a      	ands	r2, r3
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d104      	bne.n	8002b22 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b18:	887b      	ldrh	r3, [r7, #2]
 8002b1a:	041a      	lsls	r2, r3, #16
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	619a      	str	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e25b      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d075      	beq.n	8002c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b52:	4ba3      	ldr	r3, [pc, #652]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d00c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4ba0      	ldr	r3, [pc, #640]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d112      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4b9d      	ldr	r3, [pc, #628]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	4b99      	ldr	r3, [pc, #612]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d05b      	beq.n	8002c3c <HAL_RCC_OscConfig+0x108>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d157      	bne.n	8002c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e236      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x74>
 8002b9a:	4b91      	ldr	r3, [pc, #580]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a90      	ldr	r2, [pc, #576]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e01d      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x98>
 8002bb2:	4b8b      	ldr	r3, [pc, #556]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a8a      	ldr	r2, [pc, #552]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b88      	ldr	r3, [pc, #544]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a87      	ldr	r2, [pc, #540]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002bcc:	4b84      	ldr	r3, [pc, #528]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a83      	ldr	r2, [pc, #524]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b81      	ldr	r3, [pc, #516]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a80      	ldr	r2, [pc, #512]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7ff f964 	bl	8001eb8 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7ff f960 	bl	8001eb8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1fb      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xc0>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff f950 	bl	8001eb8 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7ff f94c 	bl	8001eb8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1e7      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	4b6c      	ldr	r3, [pc, #432]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0xe8>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d063      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4a:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b62      	ldr	r3, [pc, #392]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d11c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e1bb      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4952      	ldr	r1, [pc, #328]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	e03a      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <HAL_RCC_OscConfig+0x2b0>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7ff f905 	bl	8001eb8 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7ff f901 	bl	8001eb8 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e19c      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4940      	ldr	r1, [pc, #256]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <HAL_RCC_OscConfig+0x2b0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7ff f8e4 	bl	8001eb8 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7ff f8e0 	bl	8001eb8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e17b      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d030      	beq.n	8002d80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d016      	beq.n	8002d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d26:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <HAL_RCC_OscConfig+0x2b4>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7ff f8c4 	bl	8001eb8 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d34:	f7ff f8c0 	bl	8001eb8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e15b      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x200>
 8002d52:	e015      	b.n	8002d80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d54:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <HAL_RCC_OscConfig+0x2b4>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5a:	f7ff f8ad 	bl	8001eb8 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d62:	f7ff f8a9 	bl	8001eb8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e144      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80a0 	beq.w	8002ece <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x2b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d121      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_RCC_OscConfig+0x2b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <HAL_RCC_OscConfig+0x2b8>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7ff f86f 	bl	8001eb8 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	e011      	b.n	8002e02 <HAL_RCC_OscConfig+0x2ce>
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	42470000 	.word	0x42470000
 8002de8:	42470e80 	.word	0x42470e80
 8002dec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df0:	f7ff f862 	bl	8001eb8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0fd      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x4d4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d106      	bne.n	8002e24 <HAL_RCC_OscConfig+0x2f0>
 8002e16:	4b7d      	ldr	r3, [pc, #500]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a7c      	ldr	r2, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	e01c      	b.n	8002e5e <HAL_RCC_OscConfig+0x32a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCC_OscConfig+0x312>
 8002e2c:	4b77      	ldr	r3, [pc, #476]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a76      	ldr	r2, [pc, #472]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	4b74      	ldr	r3, [pc, #464]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a73      	ldr	r2, [pc, #460]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	e00b      	b.n	8002e5e <HAL_RCC_OscConfig+0x32a>
 8002e46:	4b71      	ldr	r3, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a70      	ldr	r2, [pc, #448]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
 8002e52:	4b6e      	ldr	r3, [pc, #440]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a6d      	ldr	r2, [pc, #436]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d015      	beq.n	8002e92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7ff f827 	bl	8001eb8 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7ff f823 	bl	8001eb8 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0bc      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	4b61      	ldr	r3, [pc, #388]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ee      	beq.n	8002e6e <HAL_RCC_OscConfig+0x33a>
 8002e90:	e014      	b.n	8002ebc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e92:	f7ff f811 	bl	8001eb8 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7ff f80d 	bl	8001eb8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0a6      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	4b56      	ldr	r3, [pc, #344]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ee      	bne.n	8002e9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d105      	bne.n	8002ece <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec2:	4b52      	ldr	r3, [pc, #328]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a51      	ldr	r2, [pc, #324]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8092 	beq.w	8002ffc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed8:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d05c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d141      	bne.n	8002f70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b48      	ldr	r3, [pc, #288]	; (8003010 <HAL_RCC_OscConfig+0x4dc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe ffe1 	bl	8001eb8 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe ffdd 	bl	8001eb8 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e078      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0c:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	019b      	lsls	r3, r3, #6
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	061b      	lsls	r3, r3, #24
 8002f3c:	4933      	ldr	r1, [pc, #204]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f42:	4b33      	ldr	r3, [pc, #204]	; (8003010 <HAL_RCC_OscConfig+0x4dc>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe ffb6 	bl	8001eb8 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe ffb2 	bl	8001eb8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e04d      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x41c>
 8002f6e:	e045      	b.n	8002ffc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <HAL_RCC_OscConfig+0x4dc>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe ff9f 	bl	8001eb8 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe ff9b 	bl	8001eb8 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e036      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x44a>
 8002f9c:	e02e      	b.n	8002ffc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e029      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_RCC_OscConfig+0x4d8>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d11c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d115      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d10d      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40007000 	.word	0x40007000
 800300c:	40023800 	.word	0x40023800
 8003010:	42470060 	.word	0x42470060

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0cc      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90c      	bls.n	8003050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800308a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d044      	beq.n	8003134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e067      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4934      	ldr	r1, [pc, #208]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7fe fed8 	bl	8001eb8 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7fe fed4 	bl	8001eb8 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e04f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20c      	bcs.n	800315c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319a:	f000 f821 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 800319e:	4601      	mov	r1, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	5cd3      	ldrb	r3, [r2, r3]
 80031ae:	fa21 f303 	lsr.w	r3, r1, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fe38 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	0800fe28 	.word	0x0800fe28
 80031d8:	200003f8 	.word	0x200003f8
 80031dc:	20000000 	.word	0x20000000

080031e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	2300      	movs	r3, #0
 80031f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d007      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x32>
 8003202:	2b08      	cmp	r3, #8
 8003204:	d008      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x38>
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 80b4 	bne.w	8003374 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800320e:	60bb      	str	r3, [r7, #8]
       break;
 8003210:	e0b3      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003212:	4b5e      	ldr	r3, [pc, #376]	; (800338c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003214:	60bb      	str	r3, [r7, #8]
      break;
 8003216:	e0b0      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003218:	4b5a      	ldr	r3, [pc, #360]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003220:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003222:	4b58      	ldr	r3, [pc, #352]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d04a      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322e:	4b55      	ldr	r3, [pc, #340]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	f04f 0400 	mov.w	r4, #0
 8003238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	ea03 0501 	and.w	r5, r3, r1
 8003244:	ea04 0602 	and.w	r6, r4, r2
 8003248:	4629      	mov	r1, r5
 800324a:	4632      	mov	r2, r6
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	f04f 0400 	mov.w	r4, #0
 8003254:	0154      	lsls	r4, r2, #5
 8003256:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800325a:	014b      	lsls	r3, r1, #5
 800325c:	4619      	mov	r1, r3
 800325e:	4622      	mov	r2, r4
 8003260:	1b49      	subs	r1, r1, r5
 8003262:	eb62 0206 	sbc.w	r2, r2, r6
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f04f 0400 	mov.w	r4, #0
 800326e:	0194      	lsls	r4, r2, #6
 8003270:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003274:	018b      	lsls	r3, r1, #6
 8003276:	1a5b      	subs	r3, r3, r1
 8003278:	eb64 0402 	sbc.w	r4, r4, r2
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	00e2      	lsls	r2, r4, #3
 8003286:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800328a:	00d9      	lsls	r1, r3, #3
 800328c:	460b      	mov	r3, r1
 800328e:	4614      	mov	r4, r2
 8003290:	195b      	adds	r3, r3, r5
 8003292:	eb44 0406 	adc.w	r4, r4, r6
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	0262      	lsls	r2, r4, #9
 80032a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032a4:	0259      	lsls	r1, r3, #9
 80032a6:	460b      	mov	r3, r1
 80032a8:	4614      	mov	r4, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	4621      	mov	r1, r4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f04f 0400 	mov.w	r4, #0
 80032b4:	461a      	mov	r2, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	f7fd fc92 	bl	8000be0 <__aeabi_uldivmod>
 80032bc:	4603      	mov	r3, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e049      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c4:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	f04f 0400 	mov.w	r4, #0
 80032ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	ea03 0501 	and.w	r5, r3, r1
 80032da:	ea04 0602 	and.w	r6, r4, r2
 80032de:	4629      	mov	r1, r5
 80032e0:	4632      	mov	r2, r6
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	f04f 0400 	mov.w	r4, #0
 80032ea:	0154      	lsls	r4, r2, #5
 80032ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032f0:	014b      	lsls	r3, r1, #5
 80032f2:	4619      	mov	r1, r3
 80032f4:	4622      	mov	r2, r4
 80032f6:	1b49      	subs	r1, r1, r5
 80032f8:	eb62 0206 	sbc.w	r2, r2, r6
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	f04f 0400 	mov.w	r4, #0
 8003304:	0194      	lsls	r4, r2, #6
 8003306:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800330a:	018b      	lsls	r3, r1, #6
 800330c:	1a5b      	subs	r3, r3, r1
 800330e:	eb64 0402 	sbc.w	r4, r4, r2
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	00e2      	lsls	r2, r4, #3
 800331c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003320:	00d9      	lsls	r1, r3, #3
 8003322:	460b      	mov	r3, r1
 8003324:	4614      	mov	r4, r2
 8003326:	195b      	adds	r3, r3, r5
 8003328:	eb44 0406 	adc.w	r4, r4, r6
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	02a2      	lsls	r2, r4, #10
 8003336:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800333a:	0299      	lsls	r1, r3, #10
 800333c:	460b      	mov	r3, r1
 800333e:	4614      	mov	r4, r2
 8003340:	4618      	mov	r0, r3
 8003342:	4621      	mov	r1, r4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f04f 0400 	mov.w	r4, #0
 800334a:	461a      	mov	r2, r3
 800334c:	4623      	mov	r3, r4
 800334e:	f7fd fc47 	bl	8000be0 <__aeabi_uldivmod>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	60bb      	str	r3, [r7, #8]
      break;
 8003372:	e002      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003376:	60bb      	str	r3, [r7, #8]
      break;
 8003378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337a:	68bb      	ldr	r3, [r7, #8]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	00f42400 	.word	0x00f42400
 800338c:	007a1200 	.word	0x007a1200

08003390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	200003f8 	.word	0x200003f8

080033a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033ac:	f7ff fff0 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033b0:	4601      	mov	r1, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0a9b      	lsrs	r3, r3, #10
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4a03      	ldr	r2, [pc, #12]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	0800fe38 	.word	0x0800fe38

080033d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033d4:	f7ff ffdc 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033d8:	4601      	mov	r1, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0b5b      	lsrs	r3, r3, #13
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4a03      	ldr	r2, [pc, #12]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	0800fe38 	.word	0x0800fe38

080033f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e03f      	b.n	800348a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f004 f966 	bl	80076f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fb97 	bl	8003b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af02      	add	r7, sp, #8
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	f040 8083 	bne.w	80035ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_UART_Transmit+0x2e>
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e07b      	b.n	80035bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_UART_Transmit+0x40>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e074      	b.n	80035bc <HAL_UART_Transmit+0x12a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2221      	movs	r2, #33	; 0x21
 80034e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034e8:	f7fe fce6 	bl	8001eb8 <HAL_GetTick>
 80034ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003502:	e042      	b.n	800358a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351a:	d122      	bne.n	8003562 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2200      	movs	r2, #0
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f9b6 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e042      	b.n	80035bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003548:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3302      	adds	r3, #2
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	e017      	b.n	800358a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	3301      	adds	r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	e013      	b.n	800358a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f993 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e01f      	b.n	80035bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	60ba      	str	r2, [r7, #8]
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1b7      	bne.n	8003504 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	2140      	movs	r1, #64	; 0x40
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f97a 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e006      	b.n	80035bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
  }
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d140      	bne.n	8003660 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_UART_Receive_IT+0x26>
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e039      	b.n	8003662 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_UART_Receive_IT+0x38>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e032      	b.n	8003662 <HAL_UART_Receive_IT+0x9e>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2222      	movs	r2, #34	; 0x22
 8003620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0220 	orr.w	r2, r2, #32
 800365a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_UART_IRQHandler+0x52>
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f9d6 	bl	8003a6c <UART_Receive_IT>
      return;
 80036c0:	e0d1      	b.n	8003866 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80b0 	beq.w	800382a <HAL_UART_IRQHandler+0x1ba>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_UART_IRQHandler+0x70>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80a5 	beq.w	800382a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_UART_IRQHandler+0x90>
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_UART_IRQHandler+0xb0>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	f043 0202 	orr.w	r2, r3, #2
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_UART_IRQHandler+0xd0>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00f      	beq.n	800376a <HAL_UART_IRQHandler+0xfa>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_UART_IRQHandler+0xee>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	f043 0208 	orr.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d078      	beq.n	8003864 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_UART_IRQHandler+0x11c>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f970 	bl	8003a6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	bf0c      	ite	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	2300      	movne	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_UART_IRQHandler+0x144>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d031      	beq.n	8003818 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8b9 	bl	800392c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d123      	bne.n	8003810 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	4a21      	ldr	r2, [pc, #132]	; (800386c <HAL_UART_IRQHandler+0x1fc>)
 80037e6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe ffc8 	bl	8002782 <HAL_DMA_Abort_IT>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003802:	4610      	mov	r0, r2
 8003804:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003806:	e00e      	b.n	8003826 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f83b 	bl	8003884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380e:	e00a      	b.n	8003826 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f837 	bl	8003884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003816:	e006      	b.n	8003826 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f833 	bl	8003884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003824:	e01e      	b.n	8003864 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003826:	bf00      	nop
    return;
 8003828:	e01c      	b.n	8003864 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_UART_IRQHandler+0x1d6>
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8a6 	bl	8003990 <UART_Transmit_IT>
    return;
 8003844:	e00f      	b.n	8003866 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <HAL_UART_IRQHandler+0x1f6>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8ee 	bl	8003a3c <UART_EndTransmit_IT>
    return;
 8003860:	bf00      	nop
 8003862:	e000      	b.n	8003866 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003864:	bf00      	nop
  }
}
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	08003969 	.word	0x08003969

08003870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	e02c      	b.n	8003904 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d028      	beq.n	8003904 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b8:	f7fe fafe 	bl	8001eb8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d21d      	bcs.n	8003904 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e00f      	b.n	8003924 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4013      	ands	r3, r2
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	429a      	cmp	r2, r3
 8003920:	d0c3      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003942:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7ff ff7e 	bl	8003884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b21      	cmp	r3, #33	; 0x21
 80039a2:	d144      	bne.n	8003a2e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ac:	d11a      	bne.n	80039e4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	621a      	str	r2, [r3, #32]
 80039d6:	e00e      	b.n	80039f6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]
 80039e2:	e008      	b.n	80039f6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	1c59      	adds	r1, r3, #1
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6211      	str	r1, [r2, #32]
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4619      	mov	r1, r3
 8003a04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff07 	bl	8003870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b22      	cmp	r3, #34	; 0x22
 8003a7e:	d171      	bne.n	8003b64 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a88:	d123      	bne.n	8003ad2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10e      	bne.n	8003ab6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	1c9a      	adds	r2, r3, #2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab4:	e029      	b.n	8003b0a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad0:	e01b      	b.n	8003b0a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6858      	ldr	r0, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	1c59      	adds	r1, r3, #1
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6291      	str	r1, [r2, #40]	; 0x28
 8003aea:	b2c2      	uxtb	r2, r0
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e00c      	b.n	8003b0a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	1c58      	adds	r0, r3, #1
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	6288      	str	r0, [r1, #40]	; 0x28
 8003b02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4619      	mov	r1, r3
 8003b18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d120      	bne.n	8003b60 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0220 	bic.w	r2, r2, #32
 8003b2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695a      	ldr	r2, [r3, #20]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f002 fefc 	bl	8006954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e002      	b.n	8003b66 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003bb2:	f023 030c 	bic.w	r3, r3, #12
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bde:	f040 818b 	bne.w	8003ef8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4ac1      	ldr	r2, [pc, #772]	; (8003eec <UART_SetConfig+0x37c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d005      	beq.n	8003bf8 <UART_SetConfig+0x88>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4abf      	ldr	r2, [pc, #764]	; (8003ef0 <UART_SetConfig+0x380>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	f040 80bd 	bne.w	8003d72 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bf8:	f7ff fbea 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8003bfc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	461d      	mov	r5, r3
 8003c02:	f04f 0600 	mov.w	r6, #0
 8003c06:	46a8      	mov	r8, r5
 8003c08:	46b1      	mov	r9, r6
 8003c0a:	eb18 0308 	adds.w	r3, r8, r8
 8003c0e:	eb49 0409 	adc.w	r4, r9, r9
 8003c12:	4698      	mov	r8, r3
 8003c14:	46a1      	mov	r9, r4
 8003c16:	eb18 0805 	adds.w	r8, r8, r5
 8003c1a:	eb49 0906 	adc.w	r9, r9, r6
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c32:	4688      	mov	r8, r1
 8003c34:	4691      	mov	r9, r2
 8003c36:	eb18 0005 	adds.w	r0, r8, r5
 8003c3a:	eb49 0106 	adc.w	r1, r9, r6
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	461d      	mov	r5, r3
 8003c44:	f04f 0600 	mov.w	r6, #0
 8003c48:	196b      	adds	r3, r5, r5
 8003c4a:	eb46 0406 	adc.w	r4, r6, r6
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4623      	mov	r3, r4
 8003c52:	f7fc ffc5 	bl	8000be0 <__aeabi_uldivmod>
 8003c56:	4603      	mov	r3, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4ba5      	ldr	r3, [pc, #660]	; (8003ef4 <UART_SetConfig+0x384>)
 8003c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	f04f 0600 	mov.w	r6, #0
 8003c70:	46a9      	mov	r9, r5
 8003c72:	46b2      	mov	sl, r6
 8003c74:	eb19 0309 	adds.w	r3, r9, r9
 8003c78:	eb4a 040a 	adc.w	r4, sl, sl
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	46a2      	mov	sl, r4
 8003c80:	eb19 0905 	adds.w	r9, r9, r5
 8003c84:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c88:	f04f 0100 	mov.w	r1, #0
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c9c:	4689      	mov	r9, r1
 8003c9e:	4692      	mov	sl, r2
 8003ca0:	eb19 0005 	adds.w	r0, r9, r5
 8003ca4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	461d      	mov	r5, r3
 8003cae:	f04f 0600 	mov.w	r6, #0
 8003cb2:	196b      	adds	r3, r5, r5
 8003cb4:	eb46 0406 	adc.w	r4, r6, r6
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	f7fc ff90 	bl	8000be0 <__aeabi_uldivmod>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <UART_SetConfig+0x384>)
 8003cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	2164      	movs	r1, #100	; 0x64
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	3332      	adds	r3, #50	; 0x32
 8003cda:	4a86      	ldr	r2, [pc, #536]	; (8003ef4 <UART_SetConfig+0x384>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ce8:	4498      	add	r8, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	461d      	mov	r5, r3
 8003cee:	f04f 0600 	mov.w	r6, #0
 8003cf2:	46a9      	mov	r9, r5
 8003cf4:	46b2      	mov	sl, r6
 8003cf6:	eb19 0309 	adds.w	r3, r9, r9
 8003cfa:	eb4a 040a 	adc.w	r4, sl, sl
 8003cfe:	4699      	mov	r9, r3
 8003d00:	46a2      	mov	sl, r4
 8003d02:	eb19 0905 	adds.w	r9, r9, r5
 8003d06:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d1e:	4689      	mov	r9, r1
 8003d20:	4692      	mov	sl, r2
 8003d22:	eb19 0005 	adds.w	r0, r9, r5
 8003d26:	eb4a 0106 	adc.w	r1, sl, r6
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	461d      	mov	r5, r3
 8003d30:	f04f 0600 	mov.w	r6, #0
 8003d34:	196b      	adds	r3, r5, r5
 8003d36:	eb46 0406 	adc.w	r4, r6, r6
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	f7fc ff4f 	bl	8000be0 <__aeabi_uldivmod>
 8003d42:	4603      	mov	r3, r0
 8003d44:	460c      	mov	r4, r1
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <UART_SetConfig+0x384>)
 8003d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2164      	movs	r1, #100	; 0x64
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	3332      	adds	r3, #50	; 0x32
 8003d5c:	4a65      	ldr	r2, [pc, #404]	; (8003ef4 <UART_SetConfig+0x384>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	f003 0207 	and.w	r2, r3, #7
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4442      	add	r2, r8
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	e26f      	b.n	8004252 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d72:	f7ff fb19 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 8003d76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	f04f 0600 	mov.w	r6, #0
 8003d80:	46a8      	mov	r8, r5
 8003d82:	46b1      	mov	r9, r6
 8003d84:	eb18 0308 	adds.w	r3, r8, r8
 8003d88:	eb49 0409 	adc.w	r4, r9, r9
 8003d8c:	4698      	mov	r8, r3
 8003d8e:	46a1      	mov	r9, r4
 8003d90:	eb18 0805 	adds.w	r8, r8, r5
 8003d94:	eb49 0906 	adc.w	r9, r9, r6
 8003d98:	f04f 0100 	mov.w	r1, #0
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003da4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003da8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dac:	4688      	mov	r8, r1
 8003dae:	4691      	mov	r9, r2
 8003db0:	eb18 0005 	adds.w	r0, r8, r5
 8003db4:	eb49 0106 	adc.w	r1, r9, r6
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	461d      	mov	r5, r3
 8003dbe:	f04f 0600 	mov.w	r6, #0
 8003dc2:	196b      	adds	r3, r5, r5
 8003dc4:	eb46 0406 	adc.w	r4, r6, r6
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	f7fc ff08 	bl	8000be0 <__aeabi_uldivmod>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <UART_SetConfig+0x384>)
 8003dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	461d      	mov	r5, r3
 8003de6:	f04f 0600 	mov.w	r6, #0
 8003dea:	46a9      	mov	r9, r5
 8003dec:	46b2      	mov	sl, r6
 8003dee:	eb19 0309 	adds.w	r3, r9, r9
 8003df2:	eb4a 040a 	adc.w	r4, sl, sl
 8003df6:	4699      	mov	r9, r3
 8003df8:	46a2      	mov	sl, r4
 8003dfa:	eb19 0905 	adds.w	r9, r9, r5
 8003dfe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e16:	4689      	mov	r9, r1
 8003e18:	4692      	mov	sl, r2
 8003e1a:	eb19 0005 	adds.w	r0, r9, r5
 8003e1e:	eb4a 0106 	adc.w	r1, sl, r6
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	461d      	mov	r5, r3
 8003e28:	f04f 0600 	mov.w	r6, #0
 8003e2c:	196b      	adds	r3, r5, r5
 8003e2e:	eb46 0406 	adc.w	r4, r6, r6
 8003e32:	461a      	mov	r2, r3
 8003e34:	4623      	mov	r3, r4
 8003e36:	f7fc fed3 	bl	8000be0 <__aeabi_uldivmod>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <UART_SetConfig+0x384>)
 8003e42:	fba3 1302 	umull	r1, r3, r3, r2
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	2164      	movs	r1, #100	; 0x64
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	3332      	adds	r3, #50	; 0x32
 8003e54:	4a27      	ldr	r2, [pc, #156]	; (8003ef4 <UART_SetConfig+0x384>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e62:	4498      	add	r8, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	461d      	mov	r5, r3
 8003e68:	f04f 0600 	mov.w	r6, #0
 8003e6c:	46a9      	mov	r9, r5
 8003e6e:	46b2      	mov	sl, r6
 8003e70:	eb19 0309 	adds.w	r3, r9, r9
 8003e74:	eb4a 040a 	adc.w	r4, sl, sl
 8003e78:	4699      	mov	r9, r3
 8003e7a:	46a2      	mov	sl, r4
 8003e7c:	eb19 0905 	adds.w	r9, r9, r5
 8003e80:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e98:	4689      	mov	r9, r1
 8003e9a:	4692      	mov	sl, r2
 8003e9c:	eb19 0005 	adds.w	r0, r9, r5
 8003ea0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	461d      	mov	r5, r3
 8003eaa:	f04f 0600 	mov.w	r6, #0
 8003eae:	196b      	adds	r3, r5, r5
 8003eb0:	eb46 0406 	adc.w	r4, r6, r6
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	f7fc fe92 	bl	8000be0 <__aeabi_uldivmod>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <UART_SetConfig+0x384>)
 8003ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	2164      	movs	r1, #100	; 0x64
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	3332      	adds	r3, #50	; 0x32
 8003ed6:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <UART_SetConfig+0x384>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	f003 0207 	and.w	r2, r3, #7
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4442      	add	r2, r8
 8003ee8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003eea:	e1b2      	b.n	8004252 <UART_SetConfig+0x6e2>
 8003eec:	40011000 	.word	0x40011000
 8003ef0:	40011400 	.word	0x40011400
 8003ef4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4ad7      	ldr	r2, [pc, #860]	; (800425c <UART_SetConfig+0x6ec>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d005      	beq.n	8003f0e <UART_SetConfig+0x39e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4ad6      	ldr	r2, [pc, #856]	; (8004260 <UART_SetConfig+0x6f0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	f040 80d1 	bne.w	80040b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f0e:	f7ff fa5f 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8003f12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	469a      	mov	sl, r3
 8003f18:	f04f 0b00 	mov.w	fp, #0
 8003f1c:	46d0      	mov	r8, sl
 8003f1e:	46d9      	mov	r9, fp
 8003f20:	eb18 0308 	adds.w	r3, r8, r8
 8003f24:	eb49 0409 	adc.w	r4, r9, r9
 8003f28:	4698      	mov	r8, r3
 8003f2a:	46a1      	mov	r9, r4
 8003f2c:	eb18 080a 	adds.w	r8, r8, sl
 8003f30:	eb49 090b 	adc.w	r9, r9, fp
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f48:	4688      	mov	r8, r1
 8003f4a:	4691      	mov	r9, r2
 8003f4c:	eb1a 0508 	adds.w	r5, sl, r8
 8003f50:	eb4b 0609 	adc.w	r6, fp, r9
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	f04f 0400 	mov.w	r4, #0
 8003f66:	0094      	lsls	r4, r2, #2
 8003f68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f6c:	008b      	lsls	r3, r1, #2
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4623      	mov	r3, r4
 8003f72:	4628      	mov	r0, r5
 8003f74:	4631      	mov	r1, r6
 8003f76:	f7fc fe33 	bl	8000be0 <__aeabi_uldivmod>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4bb8      	ldr	r3, [pc, #736]	; (8004264 <UART_SetConfig+0x6f4>)
 8003f82:	fba3 2302 	umull	r2, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	469b      	mov	fp, r3
 8003f90:	f04f 0c00 	mov.w	ip, #0
 8003f94:	46d9      	mov	r9, fp
 8003f96:	46e2      	mov	sl, ip
 8003f98:	eb19 0309 	adds.w	r3, r9, r9
 8003f9c:	eb4a 040a 	adc.w	r4, sl, sl
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	46a2      	mov	sl, r4
 8003fa4:	eb19 090b 	adds.w	r9, r9, fp
 8003fa8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fc0:	4689      	mov	r9, r1
 8003fc2:	4692      	mov	sl, r2
 8003fc4:	eb1b 0509 	adds.w	r5, fp, r9
 8003fc8:	eb4c 060a 	adc.w	r6, ip, sl
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	f04f 0400 	mov.w	r4, #0
 8003fde:	0094      	lsls	r4, r2, #2
 8003fe0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fe4:	008b      	lsls	r3, r1, #2
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4623      	mov	r3, r4
 8003fea:	4628      	mov	r0, r5
 8003fec:	4631      	mov	r1, r6
 8003fee:	f7fc fdf7 	bl	8000be0 <__aeabi_uldivmod>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4b9a      	ldr	r3, [pc, #616]	; (8004264 <UART_SetConfig+0x6f4>)
 8003ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2164      	movs	r1, #100	; 0x64
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	3332      	adds	r3, #50	; 0x32
 800400c:	4a95      	ldr	r2, [pc, #596]	; (8004264 <UART_SetConfig+0x6f4>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004018:	4498      	add	r8, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	469b      	mov	fp, r3
 800401e:	f04f 0c00 	mov.w	ip, #0
 8004022:	46d9      	mov	r9, fp
 8004024:	46e2      	mov	sl, ip
 8004026:	eb19 0309 	adds.w	r3, r9, r9
 800402a:	eb4a 040a 	adc.w	r4, sl, sl
 800402e:	4699      	mov	r9, r3
 8004030:	46a2      	mov	sl, r4
 8004032:	eb19 090b 	adds.w	r9, r9, fp
 8004036:	eb4a 0a0c 	adc.w	sl, sl, ip
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004046:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800404a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800404e:	4689      	mov	r9, r1
 8004050:	4692      	mov	sl, r2
 8004052:	eb1b 0509 	adds.w	r5, fp, r9
 8004056:	eb4c 060a 	adc.w	r6, ip, sl
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4619      	mov	r1, r3
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	f04f 0400 	mov.w	r4, #0
 800406c:	0094      	lsls	r4, r2, #2
 800406e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004072:	008b      	lsls	r3, r1, #2
 8004074:	461a      	mov	r2, r3
 8004076:	4623      	mov	r3, r4
 8004078:	4628      	mov	r0, r5
 800407a:	4631      	mov	r1, r6
 800407c:	f7fc fdb0 	bl	8000be0 <__aeabi_uldivmod>
 8004080:	4603      	mov	r3, r0
 8004082:	460c      	mov	r4, r1
 8004084:	461a      	mov	r2, r3
 8004086:	4b77      	ldr	r3, [pc, #476]	; (8004264 <UART_SetConfig+0x6f4>)
 8004088:	fba3 1302 	umull	r1, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	2164      	movs	r1, #100	; 0x64
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	3332      	adds	r3, #50	; 0x32
 800409a:	4a72      	ldr	r2, [pc, #456]	; (8004264 <UART_SetConfig+0x6f4>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	f003 020f 	and.w	r2, r3, #15
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4442      	add	r2, r8
 80040ac:	609a      	str	r2, [r3, #8]
 80040ae:	e0d0      	b.n	8004252 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b0:	f7ff f97a 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 80040b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	469a      	mov	sl, r3
 80040ba:	f04f 0b00 	mov.w	fp, #0
 80040be:	46d0      	mov	r8, sl
 80040c0:	46d9      	mov	r9, fp
 80040c2:	eb18 0308 	adds.w	r3, r8, r8
 80040c6:	eb49 0409 	adc.w	r4, r9, r9
 80040ca:	4698      	mov	r8, r3
 80040cc:	46a1      	mov	r9, r4
 80040ce:	eb18 080a 	adds.w	r8, r8, sl
 80040d2:	eb49 090b 	adc.w	r9, r9, fp
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040ea:	4688      	mov	r8, r1
 80040ec:	4691      	mov	r9, r2
 80040ee:	eb1a 0508 	adds.w	r5, sl, r8
 80040f2:	eb4b 0609 	adc.w	r6, fp, r9
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4619      	mov	r1, r3
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	f04f 0400 	mov.w	r4, #0
 8004108:	0094      	lsls	r4, r2, #2
 800410a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800410e:	008b      	lsls	r3, r1, #2
 8004110:	461a      	mov	r2, r3
 8004112:	4623      	mov	r3, r4
 8004114:	4628      	mov	r0, r5
 8004116:	4631      	mov	r1, r6
 8004118:	f7fc fd62 	bl	8000be0 <__aeabi_uldivmod>
 800411c:	4603      	mov	r3, r0
 800411e:	460c      	mov	r4, r1
 8004120:	461a      	mov	r2, r3
 8004122:	4b50      	ldr	r3, [pc, #320]	; (8004264 <UART_SetConfig+0x6f4>)
 8004124:	fba3 2302 	umull	r2, r3, r3, r2
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	469b      	mov	fp, r3
 8004132:	f04f 0c00 	mov.w	ip, #0
 8004136:	46d9      	mov	r9, fp
 8004138:	46e2      	mov	sl, ip
 800413a:	eb19 0309 	adds.w	r3, r9, r9
 800413e:	eb4a 040a 	adc.w	r4, sl, sl
 8004142:	4699      	mov	r9, r3
 8004144:	46a2      	mov	sl, r4
 8004146:	eb19 090b 	adds.w	r9, r9, fp
 800414a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800415a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800415e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004162:	4689      	mov	r9, r1
 8004164:	4692      	mov	sl, r2
 8004166:	eb1b 0509 	adds.w	r5, fp, r9
 800416a:	eb4c 060a 	adc.w	r6, ip, sl
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4619      	mov	r1, r3
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	f04f 0400 	mov.w	r4, #0
 8004180:	0094      	lsls	r4, r2, #2
 8004182:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004186:	008b      	lsls	r3, r1, #2
 8004188:	461a      	mov	r2, r3
 800418a:	4623      	mov	r3, r4
 800418c:	4628      	mov	r0, r5
 800418e:	4631      	mov	r1, r6
 8004190:	f7fc fd26 	bl	8000be0 <__aeabi_uldivmod>
 8004194:	4603      	mov	r3, r0
 8004196:	460c      	mov	r4, r1
 8004198:	461a      	mov	r2, r3
 800419a:	4b32      	ldr	r3, [pc, #200]	; (8004264 <UART_SetConfig+0x6f4>)
 800419c:	fba3 1302 	umull	r1, r3, r3, r2
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	2164      	movs	r1, #100	; 0x64
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	3332      	adds	r3, #50	; 0x32
 80041ae:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <UART_SetConfig+0x6f4>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ba:	4498      	add	r8, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	469b      	mov	fp, r3
 80041c0:	f04f 0c00 	mov.w	ip, #0
 80041c4:	46d9      	mov	r9, fp
 80041c6:	46e2      	mov	sl, ip
 80041c8:	eb19 0309 	adds.w	r3, r9, r9
 80041cc:	eb4a 040a 	adc.w	r4, sl, sl
 80041d0:	4699      	mov	r9, r3
 80041d2:	46a2      	mov	sl, r4
 80041d4:	eb19 090b 	adds.w	r9, r9, fp
 80041d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041f0:	4689      	mov	r9, r1
 80041f2:	4692      	mov	sl, r2
 80041f4:	eb1b 0509 	adds.w	r5, fp, r9
 80041f8:	eb4c 060a 	adc.w	r6, ip, sl
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4619      	mov	r1, r3
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	f04f 0400 	mov.w	r4, #0
 800420e:	0094      	lsls	r4, r2, #2
 8004210:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004214:	008b      	lsls	r3, r1, #2
 8004216:	461a      	mov	r2, r3
 8004218:	4623      	mov	r3, r4
 800421a:	4628      	mov	r0, r5
 800421c:	4631      	mov	r1, r6
 800421e:	f7fc fcdf 	bl	8000be0 <__aeabi_uldivmod>
 8004222:	4603      	mov	r3, r0
 8004224:	460c      	mov	r4, r1
 8004226:	461a      	mov	r2, r3
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <UART_SetConfig+0x6f4>)
 800422a:	fba3 1302 	umull	r1, r3, r3, r2
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2164      	movs	r1, #100	; 0x64
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	3332      	adds	r3, #50	; 0x32
 800423c:	4a09      	ldr	r2, [pc, #36]	; (8004264 <UART_SetConfig+0x6f4>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4442      	add	r2, r8
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	e7ff      	b.n	8004252 <UART_SetConfig+0x6e2>
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425c:	40011000 	.word	0x40011000
 8004260:	40011400 	.word	0x40011400
 8004264:	51eb851f 	.word	0x51eb851f

08004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f005 fd2c 	bl	8009cd2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800427a:	4602      	mov	r2, r0
					__idx, __base); }
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4904      	ldr	r1, [pc, #16]	; (8004294 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8004284:	4804      	ldr	r0, [pc, #16]	; (8004298 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8004286:	f000 ff55 	bl	8005134 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800428a:	4603      	mov	r3, r0
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	0800e290 	.word	0x0800e290
 8004298:	0800c691 	.word	0x0800c691

0800429c <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
			     __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
 800429c:	b590      	push	{r4, r7, lr}
 800429e:	b087      	sub	sp, #28
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f005 fd12 	bl	8009cd2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80042ae:	4602      	mov	r2, r0
			     __idx, __base); }
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4905      	ldr	r1, [pc, #20]	; (80042cc <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 80042b8:	4805      	ldr	r0, [pc, #20]	; (80042d0 <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x34>)
 80042ba:	f000 ffc5 	bl	8005248 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80042be:	4603      	mov	r3, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	4618      	mov	r0, r3
 80042c4:	4621      	mov	r1, r4
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd90      	pop	{r4, r7, pc}
 80042cc:	0800e298 	.word	0x0800e298
 80042d0:	0800c825 	.word	0x0800c825

080042d4 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f005 fcf7 	bl	8009cd2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80042e4:	4602      	mov	r2, r0
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	4907      	ldr	r1, [pc, #28]	; (8004308 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x34>)
 80042ea:	4808      	ldr	r0, [pc, #32]	; (800430c <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x38>)
 80042ec:	f001 f83e 	bl	800536c <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80042f0:	eeb0 7a40 	vmov.f32	s14, s0
 80042f4:	eef0 7a60 	vmov.f32	s15, s1
 80042f8:	eeb0 0a47 	vmov.f32	s0, s14
 80042fc:	eef0 0a67 	vmov.f32	s1, s15
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	0800e2a0 	.word	0x0800e2a0
 800430c:	0800c571 	.word	0x0800c571

08004310 <_ZNSt16invalid_argumentC1ERKS_>:
#endif
    virtual ~domain_error() _GLIBCXX_USE_NOEXCEPT;
  };

  /** Thrown to report invalid arguments to functions.  */
  class invalid_argument : public logic_error
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f005 fae9 	bl	80098f8 <_ZNSt11logic_errorC1ERKS_>
 8004326:	4a04      	ldr	r2, [pc, #16]	; (8004338 <_ZNSt16invalid_argumentC1ERKS_+0x28>)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	0800ff58 	.word	0x0800ff58

0800433c <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
using std::string;

#define UART_TX_WAITING 50

void CommandInitModule(std::string& command)
{
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b08b      	sub	sp, #44	; 0x2c
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 1;
 8004344:	2301      	movs	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
  
  int initModuleNumberArgument = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	623b      	str	r3, [r7, #32]
  
  vector<string> extractedArguments;
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	4618      	mov	r0, r3
 8004352:	f001 f866 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	461a      	mov	r2, r3
 800435c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f004 f82a 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d013      	beq.n	8004392 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
  {
    try
    {
      initModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800436a:	f107 0314 	add.w	r3, r7, #20
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f001 f87e 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004376:	4603      	mov	r3, r0
 8004378:	220a      	movs	r2, #10
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff ff73 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004382:	4603      	mov	r3, r0
 8004384:	623b      	str	r3, [r7, #32]
      
      printf("Invoking InitModule\n");
 8004386:	481e      	ldr	r0, [pc, #120]	; (8004400 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 8004388:	f007 fa0e 	bl	800b7a8 <puts>
      InitModule(initModuleNumberArgument);
 800438c:	6a38      	ldr	r0, [r7, #32]
 800438e:	f001 fa39 	bl	8005804 <_Z10InitModulei>
  vector<string> extractedArguments;
 8004392:	f107 0314 	add.w	r3, r7, #20
 8004396:	4618      	mov	r0, r3
 8004398:	f001 f850 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800439c:	e02c      	b.n	80043f8 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 800439e:	4604      	mov	r4, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d121      	bne.n	80043ea <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
    catch(std::invalid_argument)
 80043a6:	4623      	mov	r3, r4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f005 f83d 	bl	8009428 <__cxa_get_exception_ptr>
 80043ae:	4602      	mov	r2, r0
 80043b0:	f107 030c 	add.w	r3, r7, #12
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ffaa 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 80043bc:	4623      	mov	r3, r4
 80043be:	4618      	mov	r0, r3
 80043c0:	f005 f834 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 80043c4:	480f      	ldr	r0, [pc, #60]	; (8004404 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 80043c6:	f007 f9ef 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 80043ca:	f107 030c 	add.w	r3, r7, #12
 80043ce:	4618      	mov	r0, r3
 80043d0:	f005 f9d0 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 80043d4:	f005 f854 	bl	8009480 <__cxa_end_catch>
 80043d8:	e7db      	b.n	8004392 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
 80043da:	f107 030c 	add.w	r3, r7, #12
 80043de:	4618      	mov	r0, r3
 80043e0:	f005 f9c8 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 80043e4:	f005 f84c 	bl	8009480 <__cxa_end_catch>
 80043e8:	e7ff      	b.n	80043ea <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
  vector<string> extractedArguments;
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 f824 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80043f4:	f004 fc67 	bl	8008cc6 <__cxa_end_cleanup>
}
 80043f8:	372c      	adds	r7, #44	; 0x2c
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd90      	pop	{r4, r7, pc}
 80043fe:	bf00      	nop
 8004400:	0800e2a8 	.word	0x0800e2a8
 8004404:	0800e2bc 	.word	0x0800e2bc

08004408 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandDeinitModule(std::string& command)
{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b08b      	sub	sp, #44	; 0x2c
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 1;
 8004410:	2301      	movs	r3, #1
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
  
  int deinitModuleNumberArgument = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	623b      	str	r3, [r7, #32]
  
  vector<string> extractedArguments;
 8004418:	f107 0314 	add.w	r3, r7, #20
 800441c:	4618      	mov	r0, r3
 800441e:	f001 f800 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 8004422:	f107 0314 	add.w	r3, r7, #20
 8004426:	461a      	mov	r2, r3
 8004428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f003 ffc4 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d013      	beq.n	800445e <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
  {
    try
    {
      deinitModuleNumberArgument = std::stoi(extractedArguments.at(0));
 8004436:	f107 0314 	add.w	r3, r7, #20
 800443a:	2100      	movs	r1, #0
 800443c:	4618      	mov	r0, r3
 800443e:	f001 f818 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004442:	4603      	mov	r3, r0
 8004444:	220a      	movs	r2, #10
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff0d 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800444e:	4603      	mov	r3, r0
 8004450:	623b      	str	r3, [r7, #32]
      
      printf("Invoking DeinitModule\n");
 8004452:	481e      	ldr	r0, [pc, #120]	; (80044cc <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 8004454:	f007 f9a8 	bl	800b7a8 <puts>
      DeinitModule(deinitModuleNumberArgument);
 8004458:	6a38      	ldr	r0, [r7, #32]
 800445a:	f001 fa71 	bl	8005940 <_Z12DeinitModulei>
  vector<string> extractedArguments;
 800445e:	f107 0314 	add.w	r3, r7, #20
 8004462:	4618      	mov	r0, r3
 8004464:	f000 ffea 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 8004468:	e02c      	b.n	80044c4 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 800446a:	4604      	mov	r4, r0
 800446c:	460b      	mov	r3, r1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d121      	bne.n	80044b6 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
    catch(std::invalid_argument)
 8004472:	4623      	mov	r3, r4
 8004474:	4618      	mov	r0, r3
 8004476:	f004 ffd7 	bl	8009428 <__cxa_get_exception_ptr>
 800447a:	4602      	mov	r2, r0
 800447c:	f107 030c 	add.w	r3, r7, #12
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ff44 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8004488:	4623      	mov	r3, r4
 800448a:	4618      	mov	r0, r3
 800448c:	f004 ffce 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 8004490:	480f      	ldr	r0, [pc, #60]	; (80044d0 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8004492:	f007 f989 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 8004496:	f107 030c 	add.w	r3, r7, #12
 800449a:	4618      	mov	r0, r3
 800449c:	f005 f96a 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 80044a0:	f004 ffee 	bl	8009480 <__cxa_end_catch>
 80044a4:	e7db      	b.n	800445e <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
 80044a6:	f107 030c 	add.w	r3, r7, #12
 80044aa:	4618      	mov	r0, r3
 80044ac:	f005 f962 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 80044b0:	f004 ffe6 	bl	8009480 <__cxa_end_catch>
 80044b4:	e7ff      	b.n	80044b6 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
  vector<string> extractedArguments;
 80044b6:	f107 0314 	add.w	r3, r7, #20
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 ffbe 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80044c0:	f004 fc01 	bl	8008cc6 <__cxa_end_cleanup>
}
 80044c4:	372c      	adds	r7, #44	; 0x2c
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}
 80044ca:	bf00      	nop
 80044cc:	0800e2e0 	.word	0x0800e2e0
 80044d0:	0800e2bc 	.word	0x0800e2bc

080044d4 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSetGraphMin(std::string& command)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b08d      	sub	sp, #52	; 0x34
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 80044dc:	2302      	movs	r3, #2
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  int setGraphLowerRangeModuleNumberArgument = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
  long long int setGraphLowerRangeValueArgument = 0;
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	f04f 0400 	mov.w	r4, #0
 80044ec:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 80044f0:	f107 0314 	add.w	r3, r7, #20
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 ff94 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	461a      	mov	r2, r3
 8004500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f003 ff58 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d025      	beq.n	800455a <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
  {
    try
    {
      setGraphLowerRangeModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800450e:	f107 0314 	add.w	r3, r7, #20
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f000 ffac 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800451a:	4603      	mov	r3, r0
 800451c:	220a      	movs	r2, #10
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fea1 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004526:	4603      	mov	r3, r0
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
      setGraphLowerRangeValueArgument = std::stoll(extractedArguments.at(1));
 800452a:	f107 0314 	add.w	r3, r7, #20
 800452e:	2101      	movs	r1, #1
 8004530:	4618      	mov	r0, r3
 8004532:	f000 ff9e 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004536:	4603      	mov	r3, r0
 8004538:	220a      	movs	r2, #10
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fead 	bl	800429c <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004542:	4603      	mov	r3, r0
 8004544:	460c      	mov	r4, r1
 8004546:	e9c7 3408 	strd	r3, r4, [r7, #32]
      
      printf("Invoking SetGraphLowerRange\n");
 800454a:	481f      	ldr	r0, [pc, #124]	; (80045c8 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4>)
 800454c:	f007 f92c 	bl	800b7a8 <puts>
      SetGraphLowerRange(setGraphLowerRangeModuleNumberArgument, setGraphLowerRangeValueArgument);
 8004550:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004556:	f001 fa2f 	bl	80059b8 <_Z18SetGraphLowerRangeix>
  vector<string> extractedArguments;
 800455a:	f107 0314 	add.w	r3, r7, #20
 800455e:	4618      	mov	r0, r3
 8004560:	f000 ff6c 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 8004564:	e02c      	b.n	80045c0 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xec>
 8004566:	4604      	mov	r4, r0
 8004568:	460b      	mov	r3, r1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d121      	bne.n	80045b2 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
    catch(std::invalid_argument)
 800456e:	4623      	mov	r3, r4
 8004570:	4618      	mov	r0, r3
 8004572:	f004 ff59 	bl	8009428 <__cxa_get_exception_ptr>
 8004576:	4602      	mov	r2, r0
 8004578:	f107 030c 	add.w	r3, r7, #12
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fec6 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8004584:	4623      	mov	r3, r4
 8004586:	4618      	mov	r0, r3
 8004588:	f004 ff50 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800458c:	480f      	ldr	r0, [pc, #60]	; (80045cc <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf8>)
 800458e:	f007 f90b 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 8004592:	f107 030c 	add.w	r3, r7, #12
 8004596:	4618      	mov	r0, r3
 8004598:	f005 f8ec 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 800459c:	f004 ff70 	bl	8009480 <__cxa_end_catch>
 80045a0:	e7db      	b.n	800455a <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4618      	mov	r0, r3
 80045a8:	f005 f8e4 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 80045ac:	f004 ff68 	bl	8009480 <__cxa_end_catch>
 80045b0:	e7ff      	b.n	80045b2 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
  vector<string> extractedArguments;
 80045b2:	f107 0314 	add.w	r3, r7, #20
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 ff40 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80045bc:	f004 fb83 	bl	8008cc6 <__cxa_end_cleanup>
}
 80045c0:	3734      	adds	r7, #52	; 0x34
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd90      	pop	{r4, r7, pc}
 80045c6:	bf00      	nop
 80045c8:	0800e2f8 	.word	0x0800e2f8
 80045cc:	0800e2bc 	.word	0x0800e2bc

080045d0 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSetGraphMax(std::string& command)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b08d      	sub	sp, #52	; 0x34
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 80045d8:	2302      	movs	r3, #2
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  int setGraphUpperRangeModuleNumberArgument = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
  long long int setGraphUpperRangeValueArgument = 0;
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f04f 0400 	mov.w	r4, #0
 80045e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 80045ec:	f107 0314 	add.w	r3, r7, #20
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 ff16 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 80045f6:	f107 0314 	add.w	r3, r7, #20
 80045fa:	461a      	mov	r2, r3
 80045fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f003 feda 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d025      	beq.n	8004656 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
  {    
    try
    {
      setGraphUpperRangeModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800460a:	f107 0314 	add.w	r3, r7, #20
 800460e:	2100      	movs	r1, #0
 8004610:	4618      	mov	r0, r3
 8004612:	f000 ff2e 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004616:	4603      	mov	r3, r0
 8004618:	220a      	movs	r2, #10
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fe23 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004622:	4603      	mov	r3, r0
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
      setGraphUpperRangeValueArgument = std::stoll(extractedArguments.at(1));
 8004626:	f107 0314 	add.w	r3, r7, #20
 800462a:	2101      	movs	r1, #1
 800462c:	4618      	mov	r0, r3
 800462e:	f000 ff20 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004632:	4603      	mov	r3, r0
 8004634:	220a      	movs	r2, #10
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fe2f 	bl	800429c <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800463e:	4603      	mov	r3, r0
 8004640:	460c      	mov	r4, r1
 8004642:	e9c7 3408 	strd	r3, r4, [r7, #32]
      
      printf("Invoking SetGraphUpperRange\n");
 8004646:	481f      	ldr	r0, [pc, #124]	; (80046c4 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4>)
 8004648:	f007 f8ae 	bl	800b7a8 <puts>
      SetGraphUpperRange(setGraphUpperRangeModuleNumberArgument, setGraphUpperRangeValueArgument);
 800464c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004652:	f001 fa21 	bl	8005a98 <_Z18SetGraphUpperRangeix>
  vector<string> extractedArguments;
 8004656:	f107 0314 	add.w	r3, r7, #20
 800465a:	4618      	mov	r0, r3
 800465c:	f000 feee 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 8004660:	e02c      	b.n	80046bc <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xec>
 8004662:	4604      	mov	r4, r0
 8004664:	460b      	mov	r3, r1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d121      	bne.n	80046ae <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
    catch(std::invalid_argument)
 800466a:	4623      	mov	r3, r4
 800466c:	4618      	mov	r0, r3
 800466e:	f004 fedb 	bl	8009428 <__cxa_get_exception_ptr>
 8004672:	4602      	mov	r2, r0
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fe48 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8004680:	4623      	mov	r3, r4
 8004682:	4618      	mov	r0, r3
 8004684:	f004 fed2 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 8004688:	480f      	ldr	r0, [pc, #60]	; (80046c8 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf8>)
 800468a:	f007 f88d 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 800468e:	f107 030c 	add.w	r3, r7, #12
 8004692:	4618      	mov	r0, r3
 8004694:	f005 f86e 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004698:	f004 fef2 	bl	8009480 <__cxa_end_catch>
 800469c:	e7db      	b.n	8004656 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
 800469e:	f107 030c 	add.w	r3, r7, #12
 80046a2:	4618      	mov	r0, r3
 80046a4:	f005 f866 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 80046a8:	f004 feea 	bl	8009480 <__cxa_end_catch>
 80046ac:	e7ff      	b.n	80046ae <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
  vector<string> extractedArguments;
 80046ae:	f107 0314 	add.w	r3, r7, #20
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fec2 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80046b8:	f004 fb05 	bl	8008cc6 <__cxa_end_cleanup>
}
 80046bc:	3734      	adds	r7, #52	; 0x34
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	0800e314 	.word	0x0800e314
 80046c8:	0800e2bc 	.word	0x0800e2bc

080046cc <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSetGraphTime(std::string& command)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b08b      	sub	sp, #44	; 0x2c
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 80046d4:	2302      	movs	r3, #2
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
  
  int setGraphTimeRangeModuleNumberArgument = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	623b      	str	r3, [r7, #32]
  int setGraphTimeRangeValueArgument = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
  
  vector<string> extractedArguments;
 80046e0:	f107 0310 	add.w	r3, r7, #16
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fe9c 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 80046ea:	f107 0310 	add.w	r3, r7, #16
 80046ee:	461a      	mov	r2, r3
 80046f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f003 fe60 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d022      	beq.n	8004744 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
  {    
    try
    {
      setGraphTimeRangeModuleNumberArgument = std::stoi(extractedArguments.at(0));
 80046fe:	f107 0310 	add.w	r3, r7, #16
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 feb4 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800470a:	4603      	mov	r3, r0
 800470c:	220a      	movs	r2, #10
 800470e:	2100      	movs	r1, #0
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fda9 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004716:	4603      	mov	r3, r0
 8004718:	623b      	str	r3, [r7, #32]
      setGraphTimeRangeValueArgument = std::stoi(extractedArguments.at(1));
 800471a:	f107 0310 	add.w	r3, r7, #16
 800471e:	2101      	movs	r1, #1
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fea6 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004726:	4603      	mov	r3, r0
 8004728:	220a      	movs	r2, #10
 800472a:	2100      	movs	r1, #0
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fd9b 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004732:	4603      	mov	r3, r0
 8004734:	61fb      	str	r3, [r7, #28]
      
      printf("Invoking SetGraphTimeRange\n");
 8004736:	481e      	ldr	r0, [pc, #120]	; (80047b0 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 8004738:	f007 f836 	bl	800b7a8 <puts>
      SetGraphTimeRange(setGraphTimeRangeModuleNumberArgument, setGraphTimeRangeValueArgument);
 800473c:	69f9      	ldr	r1, [r7, #28]
 800473e:	6a38      	ldr	r0, [r7, #32]
 8004740:	f001 fa1a 	bl	8005b78 <_Z17SetGraphTimeRangeii>
  vector<string> extractedArguments;
 8004744:	f107 0310 	add.w	r3, r7, #16
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fe77 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800474e:	e02c      	b.n	80047aa <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
 8004750:	4604      	mov	r4, r0
 8004752:	460b      	mov	r3, r1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d121      	bne.n	800479c <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
    catch(std::invalid_argument)
 8004758:	4623      	mov	r3, r4
 800475a:	4618      	mov	r0, r3
 800475c:	f004 fe64 	bl	8009428 <__cxa_get_exception_ptr>
 8004760:	4602      	mov	r2, r0
 8004762:	f107 0308 	add.w	r3, r7, #8
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fdd1 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 800476e:	4623      	mov	r3, r4
 8004770:	4618      	mov	r0, r3
 8004772:	f004 fe5b 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 8004776:	480f      	ldr	r0, [pc, #60]	; (80047b4 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>)
 8004778:	f007 f816 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	4618      	mov	r0, r3
 8004782:	f004 fff7 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004786:	f004 fe7b 	bl	8009480 <__cxa_end_catch>
 800478a:	e7db      	b.n	8004744 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
 800478c:	f107 0308 	add.w	r3, r7, #8
 8004790:	4618      	mov	r0, r3
 8004792:	f004 ffef 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004796:	f004 fe73 	bl	8009480 <__cxa_end_catch>
 800479a:	e7ff      	b.n	800479c <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
  vector<string> extractedArguments;
 800479c:	f107 0310 	add.w	r3, r7, #16
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fe4b 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80047a6:	f004 fa8e 	bl	8008cc6 <__cxa_end_cleanup>
}
 80047aa:	372c      	adds	r7, #44	; 0x2c
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}
 80047b0:	0800e330 	.word	0x0800e330
 80047b4:	0800e2bc 	.word	0x0800e2bc

080047b8 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandGraphLinear(std::string& command)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b093      	sub	sp, #76	; 0x4c
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 5;
 80047c0:	2305      	movs	r3, #5
 80047c2:	647b      	str	r3, [r7, #68]	; 0x44
  
  int moduleNumberArgument = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	643b      	str	r3, [r7, #64]	; 0x40
  int signalCount = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  double startValue = 0;
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	f04f 0400 	mov.w	r4, #0
 80047d4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  double endValue = 0;
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	f04f 0400 	mov.w	r4, #0
 80047e0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  double stepValue = 0;
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	f04f 0400 	mov.w	r4, #0
 80047ec:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fe14 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 80047fa:	f107 0314 	add.w	r3, r7, #20
 80047fe:	461a      	mov	r2, r3
 8004800:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f003 fdd8 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d05b      	beq.n	80048c6 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
  {
    try
    {
      moduleNumberArgument = std::stoi(extractedArguments.at(0));
 800480e:	f107 0314 	add.w	r3, r7, #20
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fe2c 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800481a:	4603      	mov	r3, r0
 800481c:	220a      	movs	r2, #10
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fd21 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004826:	4603      	mov	r3, r0
 8004828:	643b      	str	r3, [r7, #64]	; 0x40
      signalCount = std::stoi(extractedArguments.at(1));
 800482a:	f107 0314 	add.w	r3, r7, #20
 800482e:	2101      	movs	r1, #1
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fe1e 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004836:	4603      	mov	r3, r0
 8004838:	220a      	movs	r2, #10
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fd13 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004842:	4603      	mov	r3, r0
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
      startValue = std::stod(extractedArguments.at(2));
 8004846:	f107 0314 	add.w	r3, r7, #20
 800484a:	2102      	movs	r1, #2
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fe10 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004852:	4603      	mov	r3, r0
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fd3c 	bl	80042d4 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800485c:	eeb0 7a40 	vmov.f32	s14, s0
 8004860:	eef0 7a60 	vmov.f32	s15, s1
 8004864:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
      endValue = std::stod(extractedArguments.at(3));
 8004868:	f107 0314 	add.w	r3, r7, #20
 800486c:	2103      	movs	r1, #3
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fdff 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004874:	4603      	mov	r3, r0
 8004876:	2100      	movs	r1, #0
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fd2b 	bl	80042d4 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800487e:	eeb0 7a40 	vmov.f32	s14, s0
 8004882:	eef0 7a60 	vmov.f32	s15, s1
 8004886:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
      stepValue = std::stod(extractedArguments.at(4));
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	2104      	movs	r1, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fdee 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004896:	4603      	mov	r3, r0
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fd1a 	bl	80042d4 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 80048a0:	eeb0 7a40 	vmov.f32	s14, s0
 80048a4:	eef0 7a60 	vmov.f32	s15, s1
 80048a8:	ed87 7b08 	vstr	d7, [r7, #32]
      
      printf("Invoking GenerateLinearGraph\n");
 80048ac:	4821      	ldr	r0, [pc, #132]	; (8004934 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>)
 80048ae:	f006 ff7b 	bl	800b7a8 <puts>
      GenerateLinearGraph(moduleNumberArgument, signalCount, startValue, endValue, stepValue);
 80048b2:	ed97 2b08 	vldr	d2, [r7, #32]
 80048b6:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80048ba:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80048be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80048c2:	f001 f9cf 	bl	8005c64 <_Z19GenerateLinearGraphiiddd>
  vector<string> extractedArguments;
 80048c6:	f107 0314 	add.w	r3, r7, #20
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fdb6 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 80048d0:	e02c      	b.n	800492c <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x174>
 80048d2:	4604      	mov	r4, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d121      	bne.n	800491e <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x166>
    catch(std::invalid_argument)
 80048da:	4623      	mov	r3, r4
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 fda3 	bl	8009428 <__cxa_get_exception_ptr>
 80048e2:	4602      	mov	r2, r0
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	4611      	mov	r1, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fd10 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 80048f0:	4623      	mov	r3, r4
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 fd9a 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 80048f8:	480f      	ldr	r0, [pc, #60]	; (8004938 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>)
 80048fa:	f006 ff55 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	4618      	mov	r0, r3
 8004904:	f004 ff36 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004908:	f004 fdba 	bl	8009480 <__cxa_end_catch>
 800490c:	e7db      	b.n	80048c6 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
 800490e:	f107 030c 	add.w	r3, r7, #12
 8004912:	4618      	mov	r0, r3
 8004914:	f004 ff2e 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004918:	f004 fdb2 	bl	8009480 <__cxa_end_catch>
 800491c:	e7ff      	b.n	800491e <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x166>
  vector<string> extractedArguments;
 800491e:	f107 0314 	add.w	r3, r7, #20
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fd8a 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8004928:	f004 f9cd 	bl	8008cc6 <__cxa_end_cleanup>
}
 800492c:	374c      	adds	r7, #76	; 0x4c
 800492e:	46bd      	mov	sp, r7
 8004930:	bd90      	pop	{r4, r7, pc}
 8004932:	bf00      	nop
 8004934:	0800e34c 	.word	0x0800e34c
 8004938:	0800e2bc 	.word	0x0800e2bc

0800493c <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandGraphSine(std::string& command)
{
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b091      	sub	sp, #68	; 0x44
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 5;
 8004944:	2305      	movs	r3, #5
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  int moduleNumberArgument = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
  int signalCount = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
  int startDegrees = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
  int stopDegrees = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
  double amplitude = 0;
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	f04f 0400 	mov.w	r4, #0
 8004960:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 8004964:	f107 0314 	add.w	r3, r7, #20
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fd5a 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800496e:	f107 0314 	add.w	r3, r7, #20
 8004972:	461a      	mov	r2, r3
 8004974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f003 fd1e 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d053      	beq.n	8004a2a <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee>
  {
    try
    {
      moduleNumberArgument = std::stoi(extractedArguments.at(0));
 8004982:	f107 0314 	add.w	r3, r7, #20
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fd72 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800498e:	4603      	mov	r3, r0
 8004990:	220a      	movs	r2, #10
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fc67 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800499a:	4603      	mov	r3, r0
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
      signalCount = std::stoi(extractedArguments.at(1));
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	2101      	movs	r1, #1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fd64 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 80049aa:	4603      	mov	r3, r0
 80049ac:	220a      	movs	r2, #10
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fc59 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80049b6:	4603      	mov	r3, r0
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
      startDegrees = std::stoi(extractedArguments.at(2));
 80049ba:	f107 0314 	add.w	r3, r7, #20
 80049be:	2102      	movs	r1, #2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fd56 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 80049c6:	4603      	mov	r3, r0
 80049c8:	220a      	movs	r2, #10
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fc4b 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80049d2:	4603      	mov	r3, r0
 80049d4:	633b      	str	r3, [r7, #48]	; 0x30
      stopDegrees = std::stoi(extractedArguments.at(3));
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	2103      	movs	r1, #3
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fd48 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 80049e2:	4603      	mov	r3, r0
 80049e4:	220a      	movs	r2, #10
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fc3d 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80049ee:	4603      	mov	r3, r0
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      amplitude = std::stod(extractedArguments.at(4));
 80049f2:	f107 0314 	add.w	r3, r7, #20
 80049f6:	2104      	movs	r1, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fd3a 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fc66 	bl	80042d4 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8004a08:	eeb0 7a40 	vmov.f32	s14, s0
 8004a0c:	eef0 7a60 	vmov.f32	s15, s1
 8004a10:	ed87 7b08 	vstr	d7, [r7, #32]
      
      printf("Invoking GenerateSineGraph\n");
 8004a14:	4820      	ldr	r0, [pc, #128]	; (8004a98 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15c>)
 8004a16:	f006 fec7 	bl	800b7a8 <puts>
      GenerateSineGraph(moduleNumberArgument, signalCount, startDegrees, stopDegrees, amplitude);
 8004a1a:	ed97 0b08 	vldr	d0, [r7, #32]
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a26:	f001 fa2b 	bl	8005e80 <_Z17GenerateSineGraphiiiid>
  vector<string> extractedArguments;
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fd04 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 8004a34:	e02c      	b.n	8004a90 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x154>
 8004a36:	4604      	mov	r4, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d121      	bne.n	8004a82 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x146>
    catch(std::invalid_argument)
 8004a3e:	4623      	mov	r3, r4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f004 fcf1 	bl	8009428 <__cxa_get_exception_ptr>
 8004a46:	4602      	mov	r2, r0
 8004a48:	f107 030c 	add.w	r3, r7, #12
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fc5e 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8004a54:	4623      	mov	r3, r4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f004 fce8 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 8004a5c:	480f      	ldr	r0, [pc, #60]	; (8004a9c <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>)
 8004a5e:	f006 fea3 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 8004a62:	f107 030c 	add.w	r3, r7, #12
 8004a66:	4618      	mov	r0, r3
 8004a68:	f004 fe84 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004a6c:	f004 fd08 	bl	8009480 <__cxa_end_catch>
 8004a70:	e7db      	b.n	8004a2a <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee>
 8004a72:	f107 030c 	add.w	r3, r7, #12
 8004a76:	4618      	mov	r0, r3
 8004a78:	f004 fe7c 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004a7c:	f004 fd00 	bl	8009480 <__cxa_end_catch>
 8004a80:	e7ff      	b.n	8004a82 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x146>
  vector<string> extractedArguments;
 8004a82:	f107 0314 	add.w	r3, r7, #20
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fcd8 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8004a8c:	f004 f91b 	bl	8008cc6 <__cxa_end_cleanup>
}
 8004a90:	3744      	adds	r7, #68	; 0x44
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd90      	pop	{r4, r7, pc}
 8004a96:	bf00      	nop
 8004a98:	0800e36c 	.word	0x0800e36c
 8004a9c:	0800e2bc 	.word	0x0800e2bc

08004aa0 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandGraphSquare(std::string& command)
{
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b093      	sub	sp, #76	; 0x4c
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 6;
 8004aa8:	2306      	movs	r3, #6
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  int moduleNumberArgument = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	63bb      	str	r3, [r7, #56]	; 0x38
  int signalCount = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	637b      	str	r3, [r7, #52]	; 0x34
  int startValue = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	633b      	str	r3, [r7, #48]	; 0x30
  int stopValue = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  double amplitude = 0;
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int period = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61fb      	str	r3, [r7, #28]
  
  vector<string> extractedArguments;
 8004acc:	f107 0310 	add.w	r3, r7, #16
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fca6 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 8004ad6:	f107 0310 	add.w	r3, r7, #16
 8004ada:	461a      	mov	r2, r3
 8004adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f003 fc6a 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d063      	beq.n	8004bb2 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x112>
  {
    try
    {
      moduleNumberArgument = std::stoi(extractedArguments.at(0));
 8004aea:	f107 0310 	add.w	r3, r7, #16
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fcbe 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004af6:	4603      	mov	r3, r0
 8004af8:	220a      	movs	r2, #10
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fbb3 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004b02:	4603      	mov	r3, r0
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38
      signalCount = std::stoi(extractedArguments.at(1));
 8004b06:	f107 0310 	add.w	r3, r7, #16
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fcb0 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004b12:	4603      	mov	r3, r0
 8004b14:	220a      	movs	r2, #10
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fba5 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
      startValue = std::stoi(extractedArguments.at(2));
 8004b22:	f107 0310 	add.w	r3, r7, #16
 8004b26:	2102      	movs	r1, #2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fca2 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	220a      	movs	r2, #10
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fb97 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	633b      	str	r3, [r7, #48]	; 0x30
      stopValue = std::stoi(extractedArguments.at(3));
 8004b3e:	f107 0310 	add.w	r3, r7, #16
 8004b42:	2103      	movs	r1, #3
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fc94 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	220a      	movs	r2, #10
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fb89 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004b56:	4603      	mov	r3, r0
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      amplitude = std::stod(extractedArguments.at(4));
 8004b5a:	f107 0310 	add.w	r3, r7, #16
 8004b5e:	2104      	movs	r1, #4
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fc86 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fbb2 	bl	80042d4 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8004b70:	eeb0 7a40 	vmov.f32	s14, s0
 8004b74:	eef0 7a60 	vmov.f32	s15, s1
 8004b78:	ed87 7b08 	vstr	d7, [r7, #32]
      period = std::stoi(extractedArguments.at(5));
 8004b7c:	f107 0310 	add.w	r3, r7, #16
 8004b80:	2105      	movs	r1, #5
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fc75 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	220a      	movs	r2, #10
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fb6a 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004b94:	4603      	mov	r3, r0
 8004b96:	61fb      	str	r3, [r7, #28]
      
      printf("Invoking GenerateSquareGraph\n");
 8004b98:	4821      	ldr	r0, [pc, #132]	; (8004c20 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>)
 8004b9a:	f006 fe05 	bl	800b7a8 <puts>
      GenerateSquareGraph(moduleNumberArgument, signalCount, startValue, stopValue, amplitude, period);
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	ed97 0b08 	vldr	d0, [r7, #32]
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004baa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bae:	f001 fa67 	bl	8006080 <_Z19GenerateSquareGraphiiiidi>
  vector<string> extractedArguments;
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fc40 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 8004bbc:	e02c      	b.n	8004c18 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d121      	bne.n	8004c0a <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16a>
    catch(std::invalid_argument)
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f004 fc2d 	bl	8009428 <__cxa_get_exception_ptr>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	f107 0308 	add.w	r3, r7, #8
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fb9a 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8004bdc:	4623      	mov	r3, r4
 8004bde:	4618      	mov	r0, r3
 8004be0:	f004 fc24 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 8004be4:	480f      	ldr	r0, [pc, #60]	; (8004c24 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x184>)
 8004be6:	f006 fddf 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 8004bea:	f107 0308 	add.w	r3, r7, #8
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f004 fdc0 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004bf4:	f004 fc44 	bl	8009480 <__cxa_end_catch>
 8004bf8:	e7db      	b.n	8004bb2 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x112>
 8004bfa:	f107 0308 	add.w	r3, r7, #8
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f004 fdb8 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004c04:	f004 fc3c 	bl	8009480 <__cxa_end_catch>
 8004c08:	e7ff      	b.n	8004c0a <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16a>
  vector<string> extractedArguments;
 8004c0a:	f107 0310 	add.w	r3, r7, #16
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fc14 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8004c14:	f004 f857 	bl	8008cc6 <__cxa_end_cleanup>
}
 8004c18:	3744      	adds	r7, #68	; 0x44
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	0800e388 	.word	0x0800e388
 8004c24:	0800e2bc 	.word	0x0800e2bc

08004c28 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSendWrongCrc(std::string& command)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b08b      	sub	sp, #44	; 0x2c
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
  
  int moduleNumberArgument = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	623b      	str	r3, [r7, #32]
  
  vector<string> extractedArguments;
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fbf0 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 8004c42:	f107 0314 	add.w	r3, r7, #20
 8004c46:	461a      	mov	r2, r3
 8004c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f003 fbb4 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d013      	beq.n	8004c7e <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
  {
    try
    {
      moduleNumberArgument = std::stoi(extractedArguments.at(0));
 8004c56:	f107 0314 	add.w	r3, r7, #20
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fc08 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004c62:	4603      	mov	r3, r0
 8004c64:	220a      	movs	r2, #10
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fafd 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	623b      	str	r3, [r7, #32]
      
      printf("Invoking SendWrongCrc\n");
 8004c72:	481e      	ldr	r0, [pc, #120]	; (8004cec <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 8004c74:	f006 fd98 	bl	800b7a8 <puts>
      SendWrongCrc(moduleNumberArgument);
 8004c78:	6a38      	ldr	r0, [r7, #32]
 8004c7a:	f001 fb43 	bl	8006304 <_Z12SendWrongCrci>
  vector<string> extractedArguments;
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fbda 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 8004c88:	e02c      	b.n	8004ce4 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d121      	bne.n	8004cd6 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
    catch(std::invalid_argument)
 8004c92:	4623      	mov	r3, r4
 8004c94:	4618      	mov	r0, r3
 8004c96:	f004 fbc7 	bl	8009428 <__cxa_get_exception_ptr>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	f107 030c 	add.w	r3, r7, #12
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fb34 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8004ca8:	4623      	mov	r3, r4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f004 fbbe 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 8004cb0:	480f      	ldr	r0, [pc, #60]	; (8004cf0 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8004cb2:	f006 fd79 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 8004cb6:	f107 030c 	add.w	r3, r7, #12
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f004 fd5a 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004cc0:	f004 fbde 	bl	8009480 <__cxa_end_catch>
 8004cc4:	e7db      	b.n	8004c7e <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
 8004cc6:	f107 030c 	add.w	r3, r7, #12
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f004 fd52 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004cd0:	f004 fbd6 	bl	8009480 <__cxa_end_catch>
 8004cd4:	e7ff      	b.n	8004cd6 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
  vector<string> extractedArguments;
 8004cd6:	f107 0314 	add.w	r3, r7, #20
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fbae 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8004ce0:	f003 fff1 	bl	8008cc6 <__cxa_end_cleanup>
}
 8004ce4:	372c      	adds	r7, #44	; 0x2c
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd90      	pop	{r4, r7, pc}
 8004cea:	bf00      	nop
 8004cec:	0800e3a8 	.word	0x0800e3a8
 8004cf0:	0800e2bc 	.word	0x0800e2bc

08004cf4 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandGetParameters(std::string& command)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b08b      	sub	sp, #44	; 0x2c
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
  
  int getParametersModuleNumberArgument = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	623b      	str	r3, [r7, #32]
  
  vector<string> extractedArguments;
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fb8a 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 8004d0e:	f107 0314 	add.w	r3, r7, #20
 8004d12:	461a      	mov	r2, r3
 8004d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f003 fb4e 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d013      	beq.n	8004d4a <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
  {    
    try
    {
      getParametersModuleNumberArgument = std::stoi(extractedArguments.at(0));
 8004d22:	f107 0314 	add.w	r3, r7, #20
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fba2 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	220a      	movs	r2, #10
 8004d32:	2100      	movs	r1, #0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fa97 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	623b      	str	r3, [r7, #32]
      
      printf("Invoking GetParameters\n");
 8004d3e:	481e      	ldr	r0, [pc, #120]	; (8004db8 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 8004d40:	f006 fd32 	bl	800b7a8 <puts>
      GetParameters(getParametersModuleNumberArgument);
 8004d44:	6a38      	ldr	r0, [r7, #32]
 8004d46:	f001 fb0d 	bl	8006364 <_Z13GetParametersi>
  vector<string> extractedArguments;
 8004d4a:	f107 0314 	add.w	r3, r7, #20
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fb74 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 8004d54:	e02c      	b.n	8004db0 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 8004d56:	4604      	mov	r4, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d121      	bne.n	8004da2 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
    catch(std::invalid_argument)
 8004d5e:	4623      	mov	r3, r4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f004 fb61 	bl	8009428 <__cxa_get_exception_ptr>
 8004d66:	4602      	mov	r2, r0
 8004d68:	f107 030c 	add.w	r3, r7, #12
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff face 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8004d74:	4623      	mov	r3, r4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f004 fb58 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 8004d7c:	480f      	ldr	r0, [pc, #60]	; (8004dbc <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8004d7e:	f006 fd13 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 8004d82:	f107 030c 	add.w	r3, r7, #12
 8004d86:	4618      	mov	r0, r3
 8004d88:	f004 fcf4 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004d8c:	f004 fb78 	bl	8009480 <__cxa_end_catch>
 8004d90:	e7db      	b.n	8004d4a <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
 8004d92:	f107 030c 	add.w	r3, r7, #12
 8004d96:	4618      	mov	r0, r3
 8004d98:	f004 fcec 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004d9c:	f004 fb70 	bl	8009480 <__cxa_end_catch>
 8004da0:	e7ff      	b.n	8004da2 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
  vector<string> extractedArguments;
 8004da2:	f107 0314 	add.w	r3, r7, #20
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fb48 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8004dac:	f003 ff8b 	bl	8008cc6 <__cxa_end_cleanup>
}
 8004db0:	372c      	adds	r7, #44	; 0x2c
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd90      	pop	{r4, r7, pc}
 8004db6:	bf00      	nop
 8004db8:	0800e3c0 	.word	0x0800e3c0
 8004dbc:	0800e2bc 	.word	0x0800e2bc

08004dc0 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandAdc1(std::string& command)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b08b      	sub	sp, #44	; 0x2c
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 8004dc8:	2302      	movs	r3, #2
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
  
  int adcModuleNumberArgument = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	623b      	str	r3, [r7, #32]
  int adcPacketCountNumberArgument = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
  
  vector<string> extractedArguments;
 8004dd4:	f107 0310 	add.w	r3, r7, #16
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fb22 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 8004dde:	f107 0310 	add.w	r3, r7, #16
 8004de2:	461a      	mov	r2, r3
 8004de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f003 fae6 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d022      	beq.n	8004e38 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
  {    
    try
    {
      adcModuleNumberArgument = std::stoi(extractedArguments.at(0));
 8004df2:	f107 0310 	add.w	r3, r7, #16
 8004df6:	2100      	movs	r1, #0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fb3a 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	220a      	movs	r2, #10
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fa2f 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	623b      	str	r3, [r7, #32]
      adcPacketCountNumberArgument = std::stoi(extractedArguments.at(1));
 8004e0e:	f107 0310 	add.w	r3, r7, #16
 8004e12:	2101      	movs	r1, #1
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fb2c 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	220a      	movs	r2, #10
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fa21 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004e26:	4603      	mov	r3, r0
 8004e28:	61fb      	str	r3, [r7, #28]
      
      printf("Invoking SendAdcToGraphScreen\n");
 8004e2a:	481e      	ldr	r0, [pc, #120]	; (8004ea4 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 8004e2c:	f006 fcbc 	bl	800b7a8 <puts>
      SendAdcToGraphScreen(adcModuleNumberArgument, adcPacketCountNumberArgument);
 8004e30:	69f9      	ldr	r1, [r7, #28]
 8004e32:	6a38      	ldr	r0, [r7, #32]
 8004e34:	f001 faf4 	bl	8006420 <_Z20SendAdcToGraphScreenii>
  vector<string> extractedArguments;
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fafd 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 8004e42:	e02c      	b.n	8004e9e <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
 8004e44:	4604      	mov	r4, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d121      	bne.n	8004e90 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
    catch(std::invalid_argument)
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f004 faea 	bl	8009428 <__cxa_get_exception_ptr>
 8004e54:	4602      	mov	r2, r0
 8004e56:	f107 0308 	add.w	r3, r7, #8
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fa57 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8004e62:	4623      	mov	r3, r4
 8004e64:	4618      	mov	r0, r3
 8004e66:	f004 fae1 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 8004e6a:	480f      	ldr	r0, [pc, #60]	; (8004ea8 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>)
 8004e6c:	f006 fc9c 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 8004e70:	f107 0308 	add.w	r3, r7, #8
 8004e74:	4618      	mov	r0, r3
 8004e76:	f004 fc7d 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004e7a:	f004 fb01 	bl	8009480 <__cxa_end_catch>
 8004e7e:	e7db      	b.n	8004e38 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
 8004e80:	f107 0308 	add.w	r3, r7, #8
 8004e84:	4618      	mov	r0, r3
 8004e86:	f004 fc75 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004e8a:	f004 faf9 	bl	8009480 <__cxa_end_catch>
 8004e8e:	e7ff      	b.n	8004e90 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
  vector<string> extractedArguments;
 8004e90:	f107 0310 	add.w	r3, r7, #16
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fad1 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8004e9a:	f003 ff14 	bl	8008cc6 <__cxa_end_cleanup>
}
 8004e9e:	372c      	adds	r7, #44	; 0x2c
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd90      	pop	{r4, r7, pc}
 8004ea4:	0800e3d8 	.word	0x0800e3d8
 8004ea8:	0800e2bc 	.word	0x0800e2bc

08004eac <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandAdc2(std::string& command)
{
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b08b      	sub	sp, #44	; 0x2c
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
  
  int adcModuleNumberArgument = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	623b      	str	r3, [r7, #32]
  int adcPacketCountNumberArgument = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61fb      	str	r3, [r7, #28]
  
  vector<string> extractedArguments;
 8004ec0:	f107 0310 	add.w	r3, r7, #16
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 faac 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 8004eca:	f107 0310 	add.w	r3, r7, #16
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f003 fa70 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d022      	beq.n	8004f24 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
  {    
    try
    {
      adcModuleNumberArgument = std::stoi(extractedArguments.at(0));
 8004ede:	f107 0310 	add.w	r3, r7, #16
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fac4 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004eea:	4603      	mov	r3, r0
 8004eec:	220a      	movs	r2, #10
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff f9b9 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	623b      	str	r3, [r7, #32]
      adcPacketCountNumberArgument = std::stoi(extractedArguments.at(1));
 8004efa:	f107 0310 	add.w	r3, r7, #16
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fab6 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004f06:	4603      	mov	r3, r0
 8004f08:	220a      	movs	r2, #10
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff f9ab 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004f12:	4603      	mov	r3, r0
 8004f14:	61fb      	str	r3, [r7, #28]
      
      printf("Invoking SendAdcToDataScreen\n");
 8004f16:	481e      	ldr	r0, [pc, #120]	; (8004f90 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 8004f18:	f006 fc46 	bl	800b7a8 <puts>
      SendAdcToDataScreen(adcModuleNumberArgument, adcPacketCountNumberArgument);
 8004f1c:	69f9      	ldr	r1, [r7, #28]
 8004f1e:	6a38      	ldr	r0, [r7, #32]
 8004f20:	f001 fb42 	bl	80065a8 <_Z19SendAdcToDataScreenii>
  vector<string> extractedArguments;
 8004f24:	f107 0310 	add.w	r3, r7, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fa87 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 8004f2e:	e02c      	b.n	8004f8a <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
 8004f30:	4604      	mov	r4, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d121      	bne.n	8004f7c <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
    catch(std::invalid_argument)
 8004f38:	4623      	mov	r3, r4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f004 fa74 	bl	8009428 <__cxa_get_exception_ptr>
 8004f40:	4602      	mov	r2, r0
 8004f42:	f107 0308 	add.w	r3, r7, #8
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff f9e1 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8004f4e:	4623      	mov	r3, r4
 8004f50:	4618      	mov	r0, r3
 8004f52:	f004 fa6b 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 8004f56:	480f      	ldr	r0, [pc, #60]	; (8004f94 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>)
 8004f58:	f006 fc26 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 8004f5c:	f107 0308 	add.w	r3, r7, #8
 8004f60:	4618      	mov	r0, r3
 8004f62:	f004 fc07 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004f66:	f004 fa8b 	bl	8009480 <__cxa_end_catch>
 8004f6a:	e7db      	b.n	8004f24 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
 8004f6c:	f107 0308 	add.w	r3, r7, #8
 8004f70:	4618      	mov	r0, r3
 8004f72:	f004 fbff 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 8004f76:	f004 fa83 	bl	8009480 <__cxa_end_catch>
 8004f7a:	e7ff      	b.n	8004f7c <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
  vector<string> extractedArguments;
 8004f7c:	f107 0310 	add.w	r3, r7, #16
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fa5b 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8004f86:	f003 fe9e 	bl	8008cc6 <__cxa_end_cleanup>
}
 8004f8a:	372c      	adds	r7, #44	; 0x2c
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd90      	pop	{r4, r7, pc}
 8004f90:	0800e3f8 	.word	0x0800e3f8
 8004f94:	0800e2bc 	.word	0x0800e2bc

08004f98 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSendPacket(std::string& command)
{
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b08f      	sub	sp, #60	; 0x3c
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 3;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
  
  int sendPacketModuleNumberArgument = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	633b      	str	r3, [r7, #48]	; 0x30
  char sendPacketParameterNumberArgument = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  double sendPacketValueArgument = 0;
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	f04f 0400 	mov.w	r4, #0
 8004fb6:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fa2f 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f003 f9f3 	bl	80083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d038      	beq.n	800504a <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb2>
  {
    try
    {
      sendPacketModuleNumberArgument = std::stoi(extractedArguments.at(0));
 8004fd8:	f107 0314 	add.w	r3, r7, #20
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fa47 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	220a      	movs	r2, #10
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff f93c 	bl	8004268 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
      sendPacketParameterNumberArgument = extractedArguments.at(1).at(0);
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fa39 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8005000:	4603      	mov	r3, r0
 8005002:	2100      	movs	r1, #0
 8005004:	4618      	mov	r0, r3
 8005006:	f004 fdcf 	bl	8009ba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj>
 800500a:	4603      	mov	r3, r0
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      sendPacketValueArgument = std::stod(extractedArguments.at(2));
 8005012:	f107 0314 	add.w	r3, r7, #20
 8005016:	2102      	movs	r1, #2
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fa2a 	bl	8005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800501e:	4603      	mov	r3, r0
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff f956 	bl	80042d4 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8005028:	eeb0 7a40 	vmov.f32	s14, s0
 800502c:	eef0 7a60 	vmov.f32	s15, s1
 8005030:	ed87 7b08 	vstr	d7, [r7, #32]
      
      printf("Invoking SendCustomPacket\n");
 8005034:	4820      	ldr	r0, [pc, #128]	; (80050b8 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>)
 8005036:	f006 fbb7 	bl	800b7a8 <puts>
      SendCustomPacket(sendPacketModuleNumberArgument, sendPacketParameterNumberArgument, sendPacketValueArgument);
 800503a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800503e:	ed97 0b08 	vldr	d0, [r7, #32]
 8005042:	4619      	mov	r1, r3
 8005044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005046:	f001 fb81 	bl	800674c <_Z16SendCustomPacketicd>
  vector<string> extractedArguments;
 800504a:	f107 0314 	add.w	r3, r7, #20
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f9f4 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
 8005054:	e02c      	b.n	80050b0 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x118>
 8005056:	4604      	mov	r4, r0
 8005058:	460b      	mov	r3, r1
 800505a:	2b01      	cmp	r3, #1
 800505c:	d121      	bne.n	80050a2 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10a>
    catch(std::invalid_argument)
 800505e:	4623      	mov	r3, r4
 8005060:	4618      	mov	r0, r3
 8005062:	f004 f9e1 	bl	8009428 <__cxa_get_exception_ptr>
 8005066:	4602      	mov	r2, r0
 8005068:	f107 030c 	add.w	r3, r7, #12
 800506c:	4611      	mov	r1, r2
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff f94e 	bl	8004310 <_ZNSt16invalid_argumentC1ERKS_>
 8005074:	4623      	mov	r3, r4
 8005076:	4618      	mov	r0, r3
 8005078:	f004 f9d8 	bl	800942c <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800507c:	480f      	ldr	r0, [pc, #60]	; (80050bc <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x124>)
 800507e:	f006 fb93 	bl	800b7a8 <puts>
    catch(std::invalid_argument)
 8005082:	f107 030c 	add.w	r3, r7, #12
 8005086:	4618      	mov	r0, r3
 8005088:	f004 fb74 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 800508c:	f004 f9f8 	bl	8009480 <__cxa_end_catch>
 8005090:	e7db      	b.n	800504a <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb2>
 8005092:	f107 030c 	add.w	r3, r7, #12
 8005096:	4618      	mov	r0, r3
 8005098:	f004 fb6c 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 800509c:	f004 f9f0 	bl	8009480 <__cxa_end_catch>
 80050a0:	e7ff      	b.n	80050a2 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10a>
  vector<string> extractedArguments;
 80050a2:	f107 0314 	add.w	r3, r7, #20
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f9c8 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80050ac:	f003 fe0b 	bl	8008cc6 <__cxa_end_cleanup>
 80050b0:	373c      	adds	r7, #60	; 0x3c
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd90      	pop	{r4, r7, pc}
 80050b6:	bf00      	nop
 80050b8:	0800e418 	.word	0x0800e418
 80050bc:	0800e2bc 	.word	0x0800e2bc

080050c0 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	f005 ffea 	bl	800b0a0 <__errno>
 80050cc:	4603      	mov	r3, r0
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	f005 ffe4 	bl	800b0a0 <__errno>
 80050d8:	4602      	mov	r2, r0
 80050da:	2300      	movs	r3, #0
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	f005 ffd6 	bl	800b0a0 <__errno>
 80050f4:	4603      	mov	r3, r0
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8005106:	f005 ffcb 	bl	800b0a0 <__errno>
 800510a:	4602      	mov	r2, r0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8005126:	2300      	movs	r3, #0
	  }
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b08b      	sub	sp, #44	; 0x2c
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8005142:	f107 0314 	add.w	r3, r7, #20
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ffba 	bl	80050c0 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800514c:	f107 0118 	add.w	r1, r7, #24
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4798      	blx	r3
 8005158:	4603      	mov	r3, r0
 800515a:	627b      	str	r3, [r7, #36]	; 0x24

      if (__endptr == __str)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d102      	bne.n	800516a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 8005164:	68b8      	ldr	r0, [r7, #8]
 8005166:	f004 fbd9 	bl	800991c <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800516a:	f005 ff99 	bl	800b0a0 <__errno>
 800516e:	4603      	mov	r3, r0
 8005170:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8005172:	2b22      	cmp	r3, #34	; 0x22
 8005174:	d006      	beq.n	8005184 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x50>
 8005176:	4621      	mov	r1, r4
 8005178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800517a:	f7ff ffcf 	bl	800511c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 8005188:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x60>
	std::__throw_out_of_range(__name);
 800518e:	68b8      	ldr	r0, [r7, #8]
 8005190:	f004 fbca 	bl	8009928 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	623b      	str	r3, [r7, #32]

      if (__idx)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d006      	beq.n	80051ac <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x78>
	*__idx = __endptr - __str;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	461a      	mov	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	601a      	str	r2, [r3, #0]

      return __ret;
 80051ac:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 80051ae:	f107 0314 	add.w	r3, r7, #20
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff98 	bl	80050e8 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 80051b8:	4623      	mov	r3, r4
 80051ba:	e006      	b.n	80051ca <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x96>
      } const __save_errno;
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff ff91 	bl	80050e8 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
 80051c6:	f003 fd7e 	bl	8008cc6 <__cxa_end_cleanup>
    }
 80051ca:	4618      	mov	r0, r3
 80051cc:	372c      	adds	r7, #44	; 0x2c
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd90      	pop	{r4, r7, pc}

080051d2 <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	f005 ff61 	bl	800b0a0 <__errno>
 80051de:	4603      	mov	r3, r0
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	f005 ff5b 	bl	800b0a0 <__errno>
 80051ea:	4602      	mov	r2, r0
 80051ec:	2300      	movs	r3, #0
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	f005 ff4d 	bl	800b0a0 <__errno>
 8005206:	4603      	mov	r3, r0
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8005218:	f005 ff42 	bl	800b0a0 <__errno>
 800521c:	4602      	mov	r2, r0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkExSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005238:	713a      	strb	r2, [r7, #4]
 800523a:	2300      	movs	r3, #0
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8005248:	b5b0      	push	{r4, r5, r7, lr}
 800524a:	b08c      	sub	sp, #48	; 0x30
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8005256:	f107 0314 	add.w	r3, r7, #20
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff ffb9 	bl	80051d2 <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8005260:	f107 0118 	add.w	r1, r7, #24
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
 800526c:	4603      	mov	r3, r0
 800526e:	460c      	mov	r4, r1
 8005270:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      if (__endptr == __str)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d102      	bne.n	8005282 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x3a>
	std::__throw_invalid_argument(__name);
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f004 fb4d 	bl	800991c <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8005282:	f005 ff0d 	bl	800b0a0 <__errno>
 8005286:	4603      	mov	r3, r0
 8005288:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800528a:	2b22      	cmp	r3, #34	; 0x22
 800528c:	d007      	beq.n	800529e <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 800528e:	462a      	mov	r2, r5
 8005290:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005294:	f7ff ffcb 	bl	800522e <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkExSt17integral_constantIbLb0EE>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5a>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5c>
 80052a2:	2300      	movs	r3, #0
      else if (errno == ERANGE
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x66>
	std::__throw_out_of_range(__name);
 80052a8:	68b8      	ldr	r0, [r7, #8]
 80052aa:	f004 fb3d 	bl	8009928 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 80052ae:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80052b2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      if (__idx)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d006      	beq.n	80052ca <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x82>
	*__idx = __endptr - __str;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	461a      	mov	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	601a      	str	r2, [r3, #0]
      return __ret;
 80052ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
      } const __save_errno;
 80052ce:	f107 0314 	add.w	r3, r7, #20
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff ff91 	bl	80051fa <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 80052d8:	4623      	mov	r3, r4
 80052da:	462c      	mov	r4, r5
 80052dc:	e006      	b.n	80052ec <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0xa4>
      } const __save_errno;
 80052de:	f107 0314 	add.w	r3, r7, #20
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff ff89 	bl	80051fa <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
 80052e8:	f003 fced 	bl	8008cc6 <__cxa_end_cleanup>
    }
 80052ec:	4618      	mov	r0, r3
 80052ee:	4621      	mov	r1, r4
 80052f0:	3730      	adds	r7, #48	; 0x30
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bdb0      	pop	{r4, r5, r7, pc}

080052f6 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	f005 fecf 	bl	800b0a0 <__errno>
 8005302:	4603      	mov	r3, r0
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	f005 fec9 	bl	800b0a0 <__errno>
 800530e:	4602      	mov	r2, r0
 8005310:	2300      	movs	r3, #0
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	f005 febb 	bl	800b0a0 <__errno>
 800532a:	4603      	mov	r3, r0
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2300      	movne	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 800533c:	f005 feb0 	bl	800b0a0 <__errno>
 8005340:	4602      	mov	r2, r0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	ed87 0b02 	vstr	d0, [r7, #8]
 800535c:	7138      	strb	r0, [r7, #4]
 800535e:	2300      	movs	r3, #0
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800536c:	b5b0      	push	{r4, r5, r7, lr}
 800536e:	b08c      	sub	sp, #48	; 0x30
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800537a:	f107 0314 	add.w	r3, r7, #20
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff ffb9 	bl	80052f6 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8005384:	f107 0218 	add.w	r2, r7, #24
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4611      	mov	r1, r2
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	4798      	blx	r3
 8005390:	eeb0 7a40 	vmov.f32	s14, s0
 8005394:	eef0 7a60 	vmov.f32	s15, s1
 8005398:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
      if (__endptr == __str)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d102      	bne.n	80053aa <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x3e>
	std::__throw_invalid_argument(__name);
 80053a4:	68b8      	ldr	r0, [r7, #8]
 80053a6:	f004 fab9 	bl	800991c <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 80053aa:	f005 fe79 	bl	800b0a0 <__errno>
 80053ae:	4603      	mov	r3, r0
 80053b0:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 80053b2:	2b22      	cmp	r3, #34	; 0x22
 80053b4:	d007      	beq.n	80053c6 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5a>
 80053b6:	4620      	mov	r0, r4
 80053b8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80053bc:	f7ff ffc9 	bl	8005352 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x60>
 80053ca:	2300      	movs	r3, #0
      else if (errno == ERANGE
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x6a>
	std::__throw_out_of_range(__name);
 80053d0:	68b8      	ldr	r0, [r7, #8]
 80053d2:	f004 faa9 	bl	8009928 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 80053d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80053da:	e9c7 3408 	strd	r3, r4, [r7, #32]
      if (__idx)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x86>
	*__idx = __endptr - __str;
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	601a      	str	r2, [r3, #0]
      return __ret;
 80053f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
      } const __save_errno;
 80053f6:	f107 0314 	add.w	r3, r7, #20
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff ff8f 	bl	800531e <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8005400:	ec45 4b17 	vmov	d7, r4, r5
 8005404:	e006      	b.n	8005414 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0xa8>
      } const __save_errno;
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff ff87 	bl	800531e <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
 8005410:	f003 fc59 	bl	8008cc6 <__cxa_end_cleanup>
    }
 8005414:	eeb0 0a47 	vmov.f32	s0, s14
 8005418:	eef0 0a67 	vmov.f32	s1, s15
 800541c:	3730      	adds	r7, #48	; 0x30
 800541e:	46bd      	mov	sp, r7
 8005420:	bdb0      	pop	{r4, r5, r7, pc}

08005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 f83e 	bl	80054ae <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800543c:	b5b0      	push	{r4, r5, r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681c      	ldr	r4, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f85a 	bl	8005508 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8005454:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005456:	461a      	mov	r2, r3
 8005458:	4629      	mov	r1, r5
 800545a:	4620      	mov	r0, r4
 800545c:	f000 f85f 	bl	800551e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f830 	bl	80054c8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bdb0      	pop	{r4, r5, r7, pc}

08005472 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>:
       *  This function provides for safer data access.  The parameter
       *  is first checked that it is in the range of the vector.  The
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]
      {
	_M_range_check(__n);
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f85c 	bl	800553c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj>
	return (*this)[__n];
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f878 	bl	800557c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>
 800548c:	4603      	mov	r3, r0
      }
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f894 	bl	80055cc <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 f872 	bl	80055a2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80054d8:	461a      	mov	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	10db      	asrs	r3, r3, #3
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x3c>)
 80054e4:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80054e8:	461a      	mov	r2, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f87a 	bl	80055e4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
		      - this->_M_impl._M_start); }
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ffcf 	bl	8005496 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	aaaaaaab 	.word	0xaaaaaaab

08005508 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f86c 	bl	800560a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f86c 	bl	8005624 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800554c:	4602      	mov	r2, r0
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	4293      	cmp	r3, r2
 8005552:	bf2c      	ite	cs
 8005554:	2301      	movcs	r3, #1
 8005556:	2300      	movcc	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d008      	beq.n	8005570 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f860 	bl	8005624 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8005564:	4603      	mov	r3, r0
 8005566:	461a      	mov	r2, r3
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	4803      	ldr	r0, [pc, #12]	; (8005578 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj+0x3c>)
 800556c:	f004 f9df 	bl	800992e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	0800e434 	.word	0x0800e434

0800557c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6819      	ldr	r1, [r3, #0]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	440b      	add	r3, r1
      }
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f850 	bl	8005650 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	605a      	str	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	609a      	str	r2, [r3, #8]
	{ }
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f847 	bl	8005668 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
	if (__p)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f83e 	bl	800567e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8005602:	bf00      	nop
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f84b 	bl	80056b2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	461a      	mov	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	10db      	asrs	r3, r3, #3
 800563a:	4a04      	ldr	r2, [pc, #16]	; (800564c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800563c:	fb02 f303 	mul.w	r3, r2, r3
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	aaaaaaab 	.word	0xaaaaaaab

08005650 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() throw() { }
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f842 	bl	80056e2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f832 	bl	80056f8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d00a      	beq.n	80056da <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ffe9 	bl	800569c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f820 	bl	8005712 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3318      	adds	r3, #24
 80056d6:	607b      	str	r3, [r7, #4]
 80056d8:	e7f0      	b.n	80056bc <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8005704:	68b8      	ldr	r0, [r7, #8]
 8005706:	f003 ffeb 	bl	80096e0 <_ZdlPv>
      }
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f004 fa14 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <_Z14CalculateCrc32PKhi>:
#include <cstring>
#include "crc32.h"
#include "packet_field_definitions.h"

uint32_t CalculateCrc32 (uint8_t const* uartPacketTable, int length)
{
 8005728:	b4b0      	push	{r4, r5, r7}
 800572a:	b08b      	sub	sp, #44	; 0x2c
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t crcValue = 0xFFFFFFFF;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint8_t dataTable[PACKET_SIZE] = {0};
 8005738:	f107 030c 	add.w	r3, r7, #12
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	611a      	str	r2, [r3, #16]
  
  memcpy(dataTable, uartPacketTable, PACKET_SIZE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f107 040c 	add.w	r4, r7, #12
 800574e:	461d      	mov	r5, r3
 8005750:	6828      	ldr	r0, [r5, #0]
 8005752:	6869      	ldr	r1, [r5, #4]
 8005754:	68aa      	ldr	r2, [r5, #8]
 8005756:	68eb      	ldr	r3, [r5, #12]
 8005758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800575a:	6928      	ldr	r0, [r5, #16]
 800575c:	6020      	str	r0, [r4, #0]
  
  uint8_t* dataTablePointer = dataTable;
 800575e:	f107 030c 	add.w	r3, r7, #12
 8005762:	623b      	str	r3, [r7, #32]
  
  while (length > 0)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	dd12      	ble.n	8005790 <_Z14CalculateCrc32PKhi+0x68>
  {
    crcValue = (crcValue << 8) ^ crcLookupTable[((crcValue >> 24) ^ *dataTablePointer++) & 0xFF];
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	021a      	lsls	r2, r3, #8
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	0e19      	lsrs	r1, r3, #24
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	1c58      	adds	r0, r3, #1
 8005776:	6238      	str	r0, [r7, #32]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	404b      	eors	r3, r1
 800577c:	b2db      	uxtb	r3, r3
 800577e:	4907      	ldr	r1, [pc, #28]	; (800579c <_Z14CalculateCrc32PKhi+0x74>)
 8005780:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005784:	4053      	eors	r3, r2
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
    --length;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	3b01      	subs	r3, #1
 800578c:	603b      	str	r3, [r7, #0]
  while (length > 0)
 800578e:	e7e9      	b.n	8005764 <_Z14CalculateCrc32PKhi+0x3c>
  }
  
  return crcValue;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	4618      	mov	r0, r3
 8005794:	372c      	adds	r7, #44	; 0x2c
 8005796:	46bd      	mov	sp, r7
 8005798:	bcb0      	pop	{r4, r5, r7}
 800579a:	4770      	bx	lr
 800579c:	0800ebb8 	.word	0x0800ebb8

080057a0 <_ZNK10UartPacket10GetPayloadEv>:
  ModuleID GetModule() const;
  Function GetFunction() const;
  Parameter GetParameter() const;
  Sign GetSign() const;
  uint8_t GetLength() const;
  uint8_t const* GetPayload() const {return m_Payload;}
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <_ZNK6Module17GetParameterStateEi>:
{
public:
  void EnableParameter(Parameter parameter);
  void DisableParameter(Parameter parameter);
  void SetParameter(Parameter parameter, double value);
  bool GetParameterState(int index) const {return m_ParameterStates[index];}
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4413      	add	r3, r2
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <_ZNK6Module17GetParameterValueEi>:
  double GetParameterValue(int index) const {return m_ParameterValues[index];}
 80057d6:	b490      	push	{r4, r7}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	3302      	adds	r3, #2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057ee:	ec44 3b17 	vmov	d7, r3, r4
 80057f2:	eeb0 0a47 	vmov.f32	s0, s14
 80057f6:	eef0 0a67 	vmov.f32	s1, s15
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc90      	pop	{r4, r7}
 8005800:	4770      	bx	lr
	...

08005804 <_Z10InitModulei>:
Module module1;
Module module2;
Module module3;

void InitModule(int module)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b090      	sub	sp, #64	; 0x40
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  for(int i=0; i < INIT_PACKETS_COUNT; i++)
 800580c:	2300      	movs	r3, #0
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005812:	2b1b      	cmp	r3, #27
 8005814:	f300 8088 	bgt.w	8005928 <_Z10InitModulei+0x124>
  {
#if DEBUG == 1
    printf("Sending init packet %d: ", i + 1);
#endif
    
    UartPacket uartPacket;
 8005818:	f107 0308 	add.w	r3, r7, #8
 800581c:	4618      	mov	r0, r3
 800581e:	f002 f94f 	bl	8007ac0 <_ZN10UartPacketC1Ev>
    
    uartPacket.SetSource(Source::SOURCE_TARGET1);
 8005822:	f107 0308 	add.w	r3, r7, #8
 8005826:	2131      	movs	r1, #49	; 0x31
 8005828:	4618      	mov	r0, r3
 800582a:	f002 f9a8 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
    uartPacket.SetModule(module);
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4618      	mov	r0, r3
 8005836:	f002 f9b4 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
    uartPacket.SetFunction(Function::INIT_PACKET);
 800583a:	f107 0308 	add.w	r3, r7, #8
 800583e:	2132      	movs	r1, #50	; 0x32
 8005840:	4618      	mov	r0, r3
 8005842:	f002 f9c0 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
    uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 8005846:	f107 0308 	add.w	r3, r7, #8
 800584a:	2130      	movs	r1, #48	; 0x30
 800584c:	4618      	mov	r0, r3
 800584e:	f002 fa0c 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
    uartPacket.SetSign(Sign::POSITIVE_SIGN);
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	2131      	movs	r1, #49	; 0x31
 8005858:	4618      	mov	r0, r3
 800585a:	f002 fa98 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
    
    if(module == 1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d110      	bne.n	8005886 <_Z10InitModulei+0x82>
    {
      memcpy((char*)uartPacket.GetPayload(), *(initParametersModule1[i]), PAYLOAD_SIZE);
 8005864:	f107 0308 	add.w	r3, r7, #8
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff ff99 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 800586e:	4a30      	ldr	r2, [pc, #192]	; (8005930 <_Z10InitModulei+0x12c>)
 8005870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005872:	212c      	movs	r1, #44	; 0x2c
 8005874:	fb01 f303 	mul.w	r3, r1, r3
 8005878:	4413      	add	r3, r2
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	220a      	movs	r2, #10
 800587e:	4619      	mov	r1, r3
 8005880:	f005 fe35 	bl	800b4ee <memcpy>
 8005884:	e02b      	b.n	80058de <_Z10InitModulei+0xda>
    }
    else if(module == 2)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d110      	bne.n	80058ae <_Z10InitModulei+0xaa>
    {
      memcpy((char*)uartPacket.GetPayload(), *(initParametersModule2[i]), PAYLOAD_SIZE);
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff ff85 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 8005896:	4a27      	ldr	r2, [pc, #156]	; (8005934 <_Z10InitModulei+0x130>)
 8005898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589a:	212c      	movs	r1, #44	; 0x2c
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	4413      	add	r3, r2
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	220a      	movs	r2, #10
 80058a6:	4619      	mov	r1, r3
 80058a8:	f005 fe21 	bl	800b4ee <memcpy>
 80058ac:	e017      	b.n	80058de <_Z10InitModulei+0xda>
    }
    else if(module == 3)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d110      	bne.n	80058d6 <_Z10InitModulei+0xd2>
    {
      memcpy((char*)uartPacket.GetPayload(), *(initParametersModule3[i]), PAYLOAD_SIZE);
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff ff71 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 80058be:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <_Z10InitModulei+0x134>)
 80058c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c2:	212c      	movs	r1, #44	; 0x2c
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	220a      	movs	r2, #10
 80058ce:	4619      	mov	r1, r3
 80058d0:	f005 fe0d 	bl	800b4ee <memcpy>
 80058d4:	e003      	b.n	80058de <_Z10InitModulei+0xda>
    }
    else
    {
      printf("ERROR, Bad module ID in InitModule function, aborting\n");
 80058d6:	4819      	ldr	r0, [pc, #100]	; (800593c <_Z10InitModulei+0x138>)
 80058d8:	f005 ff66 	bl	800b7a8 <puts>
 80058dc:	e024      	b.n	8005928 <_Z10InitModulei+0x124>
      return;
    }
    
    uint8_t lengthInt = strlen(reinterpret_cast<const char*>(uartPacket.GetPayload()));
 80058de:	f107 0308 	add.w	r3, r7, #8
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff ff5c 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 80058e8:	4603      	mov	r3, r0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fa fcd2 	bl	8000294 <strlen>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    
    uartPacket.SetLength(lengthInt); // convert from int to ASCII
 80058f6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80058fa:	f107 0308 	add.w	r3, r7, #8
 80058fe:	4611      	mov	r1, r2
 8005900:	4618      	mov	r0, r3
 8005902:	f002 fa70 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
    
    uartPacket.AppendCrcToPacket();
 8005906:	f107 0308 	add.w	r3, r7, #8
 800590a:	4618      	mov	r0, r3
 800590c:	f002 fbac 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
#if DEBUG == 1
    printf("Init Packet is: ");
    uartPacket.PrintPacket();
#endif
    
    SendPacketViaUart(uartPacket);
 8005910:	f107 0308 	add.w	r3, r7, #8
 8005914:	4618      	mov	r0, r3
 8005916:	f002 fe13 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
    
    HAL_Delay(20);
 800591a:	2014      	movs	r0, #20
 800591c:	f7fc fad8 	bl	8001ed0 <HAL_Delay>
  for(int i=0; i < INIT_PACKETS_COUNT; i++)
 8005920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005922:	3301      	adds	r3, #1
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005926:	e773      	b.n	8005810 <_Z10InitModulei+0xc>
  }
}
 8005928:	3740      	adds	r7, #64	; 0x40
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	0800efb8 	.word	0x0800efb8
 8005934:	0800f488 	.word	0x0800f488
 8005938:	0800f958 	.word	0x0800f958
 800593c:	0800e480 	.word	0x0800e480

08005940 <_Z12DeinitModulei>:

void DeinitModule(int module)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08e      	sub	sp, #56	; 0x38
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UartPacket uartPacket;
 8005948:	f107 0308 	add.w	r3, r7, #8
 800594c:	4618      	mov	r0, r3
 800594e:	f002 f8b7 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 8005952:	f107 0308 	add.w	r3, r7, #8
 8005956:	2131      	movs	r1, #49	; 0x31
 8005958:	4618      	mov	r0, r3
 800595a:	f002 f910 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800595e:	f107 0308 	add.w	r3, r7, #8
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4618      	mov	r0, r3
 8005966:	f002 f91c 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DEINIT_PACKET);
 800596a:	f107 0308 	add.w	r3, r7, #8
 800596e:	2133      	movs	r1, #51	; 0x33
 8005970:	4618      	mov	r0, r3
 8005972:	f002 f928 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 8005976:	f107 0308 	add.w	r3, r7, #8
 800597a:	2130      	movs	r1, #48	; 0x30
 800597c:	4618      	mov	r0, r3
 800597e:	f002 f974 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
  uartPacket.SetSign(Sign::POSITIVE_SIGN);
 8005982:	f107 0308 	add.w	r3, r7, #8
 8005986:	2131      	movs	r1, #49	; 0x31
 8005988:	4618      	mov	r0, r3
 800598a:	f002 fa00 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
  uartPacket.SetLength(Length::NO_PAYLOAD);
 800598e:	f107 0308 	add.w	r3, r7, #8
 8005992:	2130      	movs	r1, #48	; 0x30
 8005994:	4618      	mov	r0, r3
 8005996:	f002 fa14 	bl	8007dc2 <_ZN10UartPacket9SetLengthE6Length>
  
  uartPacket.AppendCrcToPacket();
 800599a:	f107 0308 	add.w	r3, r7, #8
 800599e:	4618      	mov	r0, r3
 80059a0:	f002 fb62 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
#if DEBUG == 1
  printf("Deinit Packet is: ");
  uartPacket.PrintPacket();
#endif
  
  SendPacketViaUart(uartPacket);
 80059a4:	f107 0308 	add.w	r3, r7, #8
 80059a8:	4618      	mov	r0, r3
 80059aa:	f002 fdc9 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
}
 80059ae:	bf00      	nop
 80059b0:	3738      	adds	r7, #56	; 0x38
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <_Z18SetGraphLowerRangeix>:

void SetGraphLowerRange(int module, long long int value)
{
 80059b8:	b590      	push	{r4, r7, lr}
 80059ba:	b097      	sub	sp, #92	; 0x5c
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	e9c7 2300 	strd	r2, r3, [r7]
  UartPacket uartPacket;
 80059c4:	f107 031c 	add.w	r3, r7, #28
 80059c8:	4618      	mov	r0, r3
 80059ca:	f002 f879 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 80059ce:	f107 031c 	add.w	r3, r7, #28
 80059d2:	2131      	movs	r1, #49	; 0x31
 80059d4:	4618      	mov	r0, r3
 80059d6:	f002 f8d2 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 80059da:	f107 031c 	add.w	r3, r7, #28
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 f8de 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::SET_GRAPH_RANGE_MIN);
 80059e6:	f107 031c 	add.w	r3, r7, #28
 80059ea:	2137      	movs	r1, #55	; 0x37
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 f8ea 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 80059f2:	f107 031c 	add.w	r3, r7, #28
 80059f6:	2130      	movs	r1, #48	; 0x30
 80059f8:	4618      	mov	r0, r3
 80059fa:	f002 f936 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
  
  if(value >= 0)
 80059fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f174 0300 	sbcs.w	r3, r4, #0
 8005a08:	db06      	blt.n	8005a18 <_Z18SetGraphLowerRangeix+0x60>
  {
    uartPacket.SetSign(Sign::POSITIVE_SIGN);
 8005a0a:	f107 031c 	add.w	r3, r7, #28
 8005a0e:	2131      	movs	r1, #49	; 0x31
 8005a10:	4618      	mov	r0, r3
 8005a12:	f002 f9bc 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
 8005a16:	e00c      	b.n	8005a32 <_Z18SetGraphLowerRangeix+0x7a>
  }
  else
  {
    uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 8005a18:	f107 031c 	add.w	r3, r7, #28
 8005a1c:	2132      	movs	r1, #50	; 0x32
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 f9b5 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
    value = value * (-1);
 8005a24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a28:	425b      	negs	r3, r3
 8005a2a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8005a2e:	e9c7 3400 	strd	r3, r4, [r7]
  }
  
  char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
  
  snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lld", value);
 8005a32:	f107 0010 	add.w	r0, r7, #16
 8005a36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a3a:	e9cd 3400 	strd	r3, r4, [sp]
 8005a3e:	4a15      	ldr	r2, [pc, #84]	; (8005a94 <_Z18SetGraphLowerRangeix+0xdc>)
 8005a40:	210b      	movs	r1, #11
 8005a42:	f005 ff0d 	bl	800b860 <sniprintf>
  
  int lengthInt = strlen(numericStringConversionBuffer);
 8005a46:	f107 0310 	add.w	r3, r7, #16
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fa fc22 	bl	8000294 <strlen>
 8005a50:	4603      	mov	r3, r0
 8005a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  
  uartPacket.SetLength(lengthInt);
 8005a54:	f107 031c 	add.w	r3, r7, #28
 8005a58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f002 f9c3 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
  
  memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 8005a60:	f107 031c 	add.w	r3, r7, #28
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fe9b 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 8005a6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a6c:	f107 0310 	add.w	r3, r7, #16
 8005a70:	4619      	mov	r1, r3
 8005a72:	f005 fd3c 	bl	800b4ee <memcpy>
  
  uartPacket.AppendCrcToPacket();
 8005a76:	f107 031c 	add.w	r3, r7, #28
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f002 faf4 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
#if DEBUG == 1
  printf("SetGraphLowerRange Packet is: ");
  uartPacket.PrintPacket();
#endif
  
  SendPacketViaUart(uartPacket);
 8005a80:	f107 031c 	add.w	r3, r7, #28
 8005a84:	4618      	mov	r0, r3
 8005a86:	f002 fd5b 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
}
 8005a8a:	bf00      	nop
 8005a8c:	3754      	adds	r7, #84	; 0x54
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd90      	pop	{r4, r7, pc}
 8005a92:	bf00      	nop
 8005a94:	0800e4b8 	.word	0x0800e4b8

08005a98 <_Z18SetGraphUpperRangeix>:

void SetGraphUpperRange(int module, long long int value)
{
 8005a98:	b590      	push	{r4, r7, lr}
 8005a9a:	b097      	sub	sp, #92	; 0x5c
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	e9c7 2300 	strd	r2, r3, [r7]
  UartPacket uartPacket;
 8005aa4:	f107 031c 	add.w	r3, r7, #28
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f002 f809 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 8005aae:	f107 031c 	add.w	r3, r7, #28
 8005ab2:	2131      	movs	r1, #49	; 0x31
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f002 f862 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 8005aba:	f107 031c 	add.w	r3, r7, #28
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f002 f86e 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::SET_GRAPH_RANGE_MAX);
 8005ac6:	f107 031c 	add.w	r3, r7, #28
 8005aca:	2138      	movs	r1, #56	; 0x38
 8005acc:	4618      	mov	r0, r3
 8005ace:	f002 f87a 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 8005ad2:	f107 031c 	add.w	r3, r7, #28
 8005ad6:	2130      	movs	r1, #48	; 0x30
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f002 f8c6 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
  
  if(value >= 0)
 8005ade:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f174 0300 	sbcs.w	r3, r4, #0
 8005ae8:	db06      	blt.n	8005af8 <_Z18SetGraphUpperRangeix+0x60>
  {
    uartPacket.SetSign(Sign::POSITIVE_SIGN);
 8005aea:	f107 031c 	add.w	r3, r7, #28
 8005aee:	2131      	movs	r1, #49	; 0x31
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 f94c 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
 8005af6:	e00c      	b.n	8005b12 <_Z18SetGraphUpperRangeix+0x7a>
  }
  else
  {
    uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 8005af8:	f107 031c 	add.w	r3, r7, #28
 8005afc:	2132      	movs	r1, #50	; 0x32
 8005afe:	4618      	mov	r0, r3
 8005b00:	f002 f945 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
    value = value * (-1);
 8005b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b08:	425b      	negs	r3, r3
 8005b0a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8005b0e:	e9c7 3400 	strd	r3, r4, [r7]
  }
  
  char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
  
  snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lld", value);
 8005b12:	f107 0010 	add.w	r0, r7, #16
 8005b16:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b1a:	e9cd 3400 	strd	r3, r4, [sp]
 8005b1e:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <_Z18SetGraphUpperRangeix+0xdc>)
 8005b20:	210b      	movs	r1, #11
 8005b22:	f005 fe9d 	bl	800b860 <sniprintf>
  
  int lengthInt = strlen(numericStringConversionBuffer);
 8005b26:	f107 0310 	add.w	r3, r7, #16
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fa fbb2 	bl	8000294 <strlen>
 8005b30:	4603      	mov	r3, r0
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  
  uartPacket.SetLength(lengthInt);
 8005b34:	f107 031c 	add.w	r3, r7, #28
 8005b38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f002 f953 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
  
  memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 8005b40:	f107 031c 	add.w	r3, r7, #28
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fe2b 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 8005b4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b4c:	f107 0310 	add.w	r3, r7, #16
 8005b50:	4619      	mov	r1, r3
 8005b52:	f005 fccc 	bl	800b4ee <memcpy>
  
  uartPacket.AppendCrcToPacket();
 8005b56:	f107 031c 	add.w	r3, r7, #28
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f002 fa84 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
#if DEBUG == 1
  printf("SetGraphUpperRange Packet is: ");
  uartPacket.PrintPacket();
#endif
  
  SendPacketViaUart(uartPacket);
 8005b60:	f107 031c 	add.w	r3, r7, #28
 8005b64:	4618      	mov	r0, r3
 8005b66:	f002 fceb 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
}
 8005b6a:	bf00      	nop
 8005b6c:	3754      	adds	r7, #84	; 0x54
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd90      	pop	{r4, r7, pc}
 8005b72:	bf00      	nop
 8005b74:	0800e4b8 	.word	0x0800e4b8

08005b78 <_Z17SetGraphTimeRangeii>:

void SetGraphTimeRange(int module, int value)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b092      	sub	sp, #72	; 0x48
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  if(value > 3600 || value < 360 || (value % 360 != 0))
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8005b88:	dc12      	bgt.n	8005bb0 <_Z17SetGraphTimeRangeii+0x38>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8005b90:	db0e      	blt.n	8005bb0 <_Z17SetGraphTimeRangeii+0x38>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	4a30      	ldr	r2, [pc, #192]	; (8005c58 <_Z17SetGraphTimeRangeii+0xe0>)
 8005b96:	fb82 1203 	smull	r1, r2, r2, r3
 8005b9a:	441a      	add	r2, r3
 8005b9c:	1211      	asrs	r1, r2, #8
 8005b9e:	17da      	asrs	r2, r3, #31
 8005ba0:	1a8a      	subs	r2, r1, r2
 8005ba2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8005ba6:	fb01 f202 	mul.w	r2, r1, r2
 8005baa:	1a9a      	subs	r2, r3, r2
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	d003      	beq.n	8005bb8 <_Z17SetGraphTimeRangeii+0x40>
  {
    printf("ERROR, Time range value is too high, too low or not multiplier of 360, aborting\n");
 8005bb0:	482a      	ldr	r0, [pc, #168]	; (8005c5c <_Z17SetGraphTimeRangeii+0xe4>)
 8005bb2:	f005 fdf9 	bl	800b7a8 <puts>
 8005bb6:	e04b      	b.n	8005c50 <_Z17SetGraphTimeRangeii+0xd8>
    return;
  }
  
  UartPacket uartPacket;
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 ff7f 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 8005bc2:	f107 0314 	add.w	r3, r7, #20
 8005bc6:	2131      	movs	r1, #49	; 0x31
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 ffd8 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 ffe4 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::SET_GRAPH_TIME_RANGE);
 8005bda:	f107 0314 	add.w	r3, r7, #20
 8005bde:	2139      	movs	r1, #57	; 0x39
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 fff0 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 8005be6:	f107 0314 	add.w	r3, r7, #20
 8005bea:	2130      	movs	r1, #48	; 0x30
 8005bec:	4618      	mov	r0, r3
 8005bee:	f002 f83c 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
  uartPacket.SetSign(Sign::POSITIVE_SIGN);
 8005bf2:	f107 0314 	add.w	r3, r7, #20
 8005bf6:	2131      	movs	r1, #49	; 0x31
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f002 f8c8 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
  
  char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
  
  snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%d", value);
 8005bfe:	f107 0008 	add.w	r0, r7, #8
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <_Z17SetGraphTimeRangeii+0xe8>)
 8005c06:	210b      	movs	r1, #11
 8005c08:	f005 fe2a 	bl	800b860 <sniprintf>
  
  int lengthInt = strlen(numericStringConversionBuffer);
 8005c0c:	f107 0308 	add.w	r3, r7, #8
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fa fb3f 	bl	8000294 <strlen>
 8005c16:	4603      	mov	r3, r0
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
  
  uartPacket.SetLength(lengthInt);
 8005c1a:	f107 0314 	add.w	r3, r7, #20
 8005c1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c20:	4618      	mov	r0, r3
 8005c22:	f002 f8e0 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
  
  memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fdb8 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 8005c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c32:	f107 0308 	add.w	r3, r7, #8
 8005c36:	4619      	mov	r1, r3
 8005c38:	f005 fc59 	bl	800b4ee <memcpy>
  
  uartPacket.AppendCrcToPacket();
 8005c3c:	f107 0314 	add.w	r3, r7, #20
 8005c40:	4618      	mov	r0, r3
 8005c42:	f002 fa11 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
#if DEBUG == 1
  printf("SetGraphTimeRange Packet is: ");
  uartPacket.PrintPacket();
#endif
  
  SendPacketViaUart(uartPacket);
 8005c46:	f107 0314 	add.w	r3, r7, #20
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f002 fc78 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
}
 8005c50:	3748      	adds	r7, #72	; 0x48
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	b60b60b7 	.word	0xb60b60b7
 8005c5c:	0800e4c0 	.word	0x0800e4c0
 8005c60:	0800e510 	.word	0x0800e510

08005c64 <_Z19GenerateLinearGraphiiddd>:

void GenerateLinearGraph(int module, int signalCount, double startValue, double stopValue, double stepValue)
{
 8005c64:	b590      	push	{r4, r7, lr}
 8005c66:	b0a5      	sub	sp, #148	; 0x94
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	61f8      	str	r0, [r7, #28]
 8005c6c:	61b9      	str	r1, [r7, #24]
 8005c6e:	ed87 0b04 	vstr	d0, [r7, #16]
 8005c72:	ed87 1b02 	vstr	d1, [r7, #8]
 8005c76:	ed87 2b00 	vstr	d2, [r7]
  UartPacket uartPacket;
 8005c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 ff1e 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  if(startValue >= stopValue)
 8005c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c8c:	f7fa ff4c 	bl	8000b28 <__aeabi_dcmpge>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <_Z19GenerateLinearGraphiiddd+0x3a>
  {
    printf("ERROR, GenerateLinearGraph: Start values is higher than or equal to stop value, aborting");
 8005c96:	4873      	ldr	r0, [pc, #460]	; (8005e64 <_Z19GenerateLinearGraphiiddd+0x200>)
 8005c98:	f005 fcfe 	bl	800b698 <iprintf>
    return;
 8005c9c:	e0de      	b.n	8005e5c <_Z19GenerateLinearGraphiiddd+0x1f8>
  }
  
  if(stepValue < 0)
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005caa:	f7fa ff29 	bl	8000b00 <__aeabi_dcmplt>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <_Z19GenerateLinearGraphiiddd+0x58>
  {
    printf("ERROR, GenerateLinearGraph: Negative step value not supported, aborting");
 8005cb4:	486c      	ldr	r0, [pc, #432]	; (8005e68 <_Z19GenerateLinearGraphiiddd+0x204>)
 8005cb6:	f005 fcef 	bl	800b698 <iprintf>
    return;
 8005cba:	e0cf      	b.n	8005e5c <_Z19GenerateLinearGraphiiddd+0x1f8>
  }
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 8005cbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cc0:	2131      	movs	r1, #49	; 0x31
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 ff5b 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  
  uartPacket.SetModule(module);
 8005cc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ccc:	69f9      	ldr	r1, [r7, #28]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 ff67 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  
  uartPacket.SetFunction(Function::DATA_PACKET);
 8005cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cd8:	2131      	movs	r1, #49	; 0x31
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 ff73 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  
  uint8_t length;
  
  double value;
  
  Parameter parameters[4] = {Parameter::GRAPH_PARAMETER1, Parameter::GRAPH_PARAMETER2, Parameter::GRAPH_PARAMETER3, Parameter::GRAPH_PARAMETER4};
 8005ce0:	4b62      	ldr	r3, [pc, #392]	; (8005e6c <_Z19GenerateLinearGraphiiddd+0x208>)
 8005ce2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8005ce6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ce8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  for(double x = startValue; x < stopValue; x = x + stepValue)
 8005cec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005cf0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8005cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cf8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005cfc:	f7fa ff00 	bl	8000b00 <__aeabi_dcmplt>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80aa 	beq.w	8005e5c <_Z19GenerateLinearGraphiiddd+0x1f8>
  {
    for(int signalNumber = 0; signalNumber < signalCount; signalNumber++)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	f280 8098 	bge.w	8005e46 <_Z19GenerateLinearGraphiiddd+0x1e2>
    {
      uartPacket.SetParameter(parameters[signalNumber]);
 8005d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005d1e:	4413      	add	r3, r2
 8005d20:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005d24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 ff9d 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
      
      value = x;
 8005d30:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005d34:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
      
      if(value < 0)
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d44:	f7fa fedc 	bl	8000b00 <__aeabi_dcmplt>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <_Z19GenerateLinearGraphiiddd+0x10c>
      {
        /*Change value sign back to positive and mark it as negative in UART packet*/
        value = value * (-1);
 8005d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 8005d62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d66:	2132      	movs	r1, #50	; 0x32
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f002 f810 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
 8005d6e:	e005      	b.n	8005d7c <_Z19GenerateLinearGraphiiddd+0x118>
      }
      else
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 8005d70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d74:	2131      	movs	r1, #49	; 0x31
 8005d76:	4618      	mov	r0, r3
 8005d78:	f002 f809 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
      }
      
      /*Change parameter values so that graph lines do not overlap each other*/
      switch(signalNumber)
 8005d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d00f      	beq.n	8005da2 <_Z19GenerateLinearGraphiiddd+0x13e>
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d019      	beq.n	8005dba <_Z19GenerateLinearGraphiiddd+0x156>
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d123      	bne.n	8005dd2 <_Z19GenerateLinearGraphiiddd+0x16e>
      {
      case 1:
        value = value * 0.75;
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	4b38      	ldr	r3, [pc, #224]	; (8005e70 <_Z19GenerateLinearGraphiiddd+0x20c>)
 8005d90:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d94:	f7fa fc42 	bl	800061c <__aeabi_dmul>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        break;
 8005da0:	e017      	b.n	8005dd2 <_Z19GenerateLinearGraphiiddd+0x16e>
      case 2:
        value = value * 0.5;
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	4b33      	ldr	r3, [pc, #204]	; (8005e74 <_Z19GenerateLinearGraphiiddd+0x210>)
 8005da8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dac:	f7fa fc36 	bl	800061c <__aeabi_dmul>
 8005db0:	4603      	mov	r3, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        break;
 8005db8:	e00b      	b.n	8005dd2 <_Z19GenerateLinearGraphiiddd+0x16e>
      case 3:
        value = value * 0.25;
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	4b2e      	ldr	r3, [pc, #184]	; (8005e78 <_Z19GenerateLinearGraphiiddd+0x214>)
 8005dc0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dc4:	f7fa fc2a 	bl	800061c <__aeabi_dmul>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        break;
 8005dd0:	bf00      	nop
      }
      
      /*Temporary buffer for number-string conversion with additional space for null character*/
      char tempBuffer[PAYLOAD_SIZE + 1] = {0};
 8005dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	f8c3 2007 	str.w	r2, [r3, #7]
      
      /*Convert double number to string and write it to temporary buffer*/
      snprintf(tempBuffer , PAYLOAD_SIZE + 1, "%lf", value);
 8005de0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005de4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8005de8:	e9cd 3400 	strd	r3, r4, [sp]
 8005dec:	4a23      	ldr	r2, [pc, #140]	; (8005e7c <_Z19GenerateLinearGraphiiddd+0x218>)
 8005dee:	210b      	movs	r1, #11
 8005df0:	f005 fd36 	bl	800b860 <sniprintf>
      
      length = static_cast<uint8_t>(strlen(tempBuffer));
 8005df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fa fa4b 	bl	8000294 <strlen>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
      
      uartPacket.SetPayload(reinterpret_cast<uint8_t*>(tempBuffer));
 8005e04:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005e08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 fffb 	bl	8007e0a <_ZN10UartPacket10SetPayloadEPh>
      
      uartPacket.SetLength(length);
 8005e14:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8005e18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 ffe1 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
      
      uartPacket.AppendCrcToPacket();
 8005e24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f002 f91d 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
      
      SendPacketViaUart(uartPacket);
 8005e2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e32:	4618      	mov	r0, r3
 8005e34:	f002 fb84 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 8005e38:	2014      	movs	r0, #20
 8005e3a:	f7fc f849 	bl	8001ed0 <HAL_Delay>
    for(int signalNumber = 0; signalNumber < signalCount; signalNumber++)
 8005e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e40:	3301      	adds	r3, #1
 8005e42:	677b      	str	r3, [r7, #116]	; 0x74
 8005e44:	e762      	b.n	8005d0c <_Z19GenerateLinearGraphiiddd+0xa8>
  for(double x = startValue; x < stopValue; x = x + stepValue)
 8005e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e4a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005e4e:	f7fa fa2f 	bl	80002b0 <__adddf3>
 8005e52:	4603      	mov	r3, r0
 8005e54:	460c      	mov	r4, r1
 8005e56:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8005e5a:	e74b      	b.n	8005cf4 <_Z19GenerateLinearGraphiiddd+0x90>
    }
  }
}
 8005e5c:	378c      	adds	r7, #140	; 0x8c
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd90      	pop	{r4, r7, pc}
 8005e62:	bf00      	nop
 8005e64:	0800e514 	.word	0x0800e514
 8005e68:	0800e570 	.word	0x0800e570
 8005e6c:	0800e5bc 	.word	0x0800e5bc
 8005e70:	3fe80000 	.word	0x3fe80000
 8005e74:	3fe00000 	.word	0x3fe00000
 8005e78:	3fd00000 	.word	0x3fd00000
 8005e7c:	0800e5b8 	.word	0x0800e5b8

08005e80 <_Z17GenerateSineGraphiiiid>:

void GenerateSineGraph(int module, int signalCount, int startDegrees, int stopDegrees, double amplitude)
{
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b0ac      	sub	sp, #176	; 0xb0
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	6178      	str	r0, [r7, #20]
 8005e88:	6139      	str	r1, [r7, #16]
 8005e8a:	60fa      	str	r2, [r7, #12]
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	ed87 0b00 	vstr	d0, [r7]
  UartPacket uartPacket;
 8005e92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 fe12 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  if(startDegrees > stopDegrees)
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	dd03      	ble.n	8005eac <_Z17GenerateSineGraphiiiid+0x2c>
  {
    printf("ERROR, GenerateSineGraph: Start values is higher than stop value, aborting");
 8005ea4:	4872      	ldr	r0, [pc, #456]	; (8006070 <_Z17GenerateSineGraphiiiid+0x1f0>)
 8005ea6:	f005 fbf7 	bl	800b698 <iprintf>
 8005eaa:	e0da      	b.n	8006062 <_Z17GenerateSineGraphiiiid+0x1e2>
    return;
  }
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 8005eac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005eb0:	2131      	movs	r1, #49	; 0x31
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fe63 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 8005eb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ebc:	6979      	ldr	r1, [r7, #20]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 fe6f 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 8005ec4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ec8:	2131      	movs	r1, #49	; 0x31
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 fe7b 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  
  uint8_t length;
  double value;
  
  Parameter parameters[4] = {Parameter::GRAPH_PARAMETER1, Parameter::GRAPH_PARAMETER2, Parameter::GRAPH_PARAMETER3, Parameter::GRAPH_PARAMETER4};
 8005ed0:	4b68      	ldr	r3, [pc, #416]	; (8006074 <_Z17GenerateSineGraphiiiid+0x1f4>)
 8005ed2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  constexpr double radianInverse = 3.14159/180;
 8005edc:	a462      	add	r4, pc, #392	; (adr r4, 8006068 <_Z17GenerateSineGraphiiiid+0x1e8>)
 8005ede:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005ee2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
  
  double phaseShift[4] = {0.0, 120.0, 240.0, 360.0};
 8005ee6:	4b64      	ldr	r3, [pc, #400]	; (8006078 <_Z17GenerateSineGraphiiiid+0x1f8>)
 8005ee8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005eec:	461d      	mov	r5, r3
 8005eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  for(int x = startDegrees; x < stopDegrees; x++)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f00:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	f280 80ab 	bge.w	8006062 <_Z17GenerateSineGraphiiiid+0x1e2>
  {
    for(int signalNumber = 0; signalNumber < signalCount; signalNumber++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	f280 809c 	bge.w	8006056 <_Z17GenerateSineGraphiiiid+0x1d6>
    {
      uartPacket.SetParameter(parameters[signalNumber]);
 8005f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f28:	4413      	add	r3, r2
 8005f2a:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 8005f2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f32:	4611      	mov	r1, r2
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 fe98 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
      
      /*Multiply by radian inverse to get rid of radian unit and calculate sine of x measured in degrees*/
      value = amplitude * (sin(static_cast<double>(x) * radianInverse + phaseShift[signalNumber]));
 8005f3a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005f3e:	f7fa fb03 	bl	8000548 <__aeabi_i2d>
 8005f42:	a349      	add	r3, pc, #292	; (adr r3, 8006068 <_Z17GenerateSineGraphiiiid+0x1e8>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa fb68 	bl	800061c <__aeabi_dmul>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	4618      	mov	r0, r3
 8005f52:	4621      	mov	r1, r4
 8005f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f5e:	4413      	add	r3, r2
 8005f60:	3b80      	subs	r3, #128	; 0x80
 8005f62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f66:	461a      	mov	r2, r3
 8005f68:	4623      	mov	r3, r4
 8005f6a:	f7fa f9a1 	bl	80002b0 <__adddf3>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	460c      	mov	r4, r1
 8005f72:	ec44 3b17 	vmov	d7, r3, r4
 8005f76:	eeb0 0a47 	vmov.f32	s0, s14
 8005f7a:	eef0 0a67 	vmov.f32	s1, s15
 8005f7e:	f004 f873 	bl	800a068 <sin>
 8005f82:	ec54 3b10 	vmov	r3, r4, d0
 8005f86:	461a      	mov	r2, r3
 8005f88:	4623      	mov	r3, r4
 8005f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f8e:	f7fa fb45 	bl	800061c <__aeabi_dmul>
 8005f92:	4603      	mov	r3, r0
 8005f94:	460c      	mov	r4, r1
 8005f96:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
      
      if(value < 0)
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005fa6:	f7fa fdab 	bl	8000b00 <__aeabi_dcmplt>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d010      	beq.n	8005fd2 <_Z17GenerateSineGraphiiiid+0x152>
      {
        /*Change value sign back to positive and mark it as negative in UART packet*/
        value = value * (-1);
 8005fb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 8005fc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fc8:	2132      	movs	r1, #50	; 0x32
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 fedf 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
 8005fd0:	e005      	b.n	8005fde <_Z17GenerateSineGraphiiiid+0x15e>
      }
      else
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 8005fd2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fd6:	2131      	movs	r1, #49	; 0x31
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 fed8 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
      }
      
      /*Temporary buffer for number-string conversion with additional space for null character*/
      char tempBuffer[PAYLOAD_SIZE + 1] = {0};
 8005fde:	f107 031c 	add.w	r3, r7, #28
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	605a      	str	r2, [r3, #4]
 8005fe8:	f8c3 2007 	str.w	r2, [r3, #7]
      
      /*Convert double number to string and write it to temporary buffer*/
      snprintf(tempBuffer , PAYLOAD_SIZE + 1, "%lf", value);
 8005fec:	f107 001c 	add.w	r0, r7, #28
 8005ff0:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8005ff4:	e9cd 3400 	strd	r3, r4, [sp]
 8005ff8:	4a20      	ldr	r2, [pc, #128]	; (800607c <_Z17GenerateSineGraphiiiid+0x1fc>)
 8005ffa:	210b      	movs	r1, #11
 8005ffc:	f005 fc30 	bl	800b860 <sniprintf>
      
      length = static_cast<uint8_t>(strlen(tempBuffer));
 8006000:	f107 031c 	add.w	r3, r7, #28
 8006004:	4618      	mov	r0, r3
 8006006:	f7fa f945 	bl	8000294 <strlen>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      
      uartPacket.SetPayload(reinterpret_cast<uint8_t*>(tempBuffer));
 8006010:	f107 021c 	add.w	r2, r7, #28
 8006014:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006018:	4611      	mov	r1, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f001 fef5 	bl	8007e0a <_ZN10UartPacket10SetPayloadEPh>
      
      uartPacket.SetLength(length);
 8006020:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006024:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006028:	4611      	mov	r1, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fedb 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
      
      uartPacket.AppendCrcToPacket();
 8006030:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006034:	4618      	mov	r0, r3
 8006036:	f002 f817 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
      
      SendPacketViaUart(uartPacket);
 800603a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800603e:	4618      	mov	r0, r3
 8006040:	f002 fa7e 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 8006044:	2014      	movs	r0, #20
 8006046:	f7fb ff43 	bl	8001ed0 <HAL_Delay>
    for(int signalNumber = 0; signalNumber < signalCount; signalNumber++)
 800604a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800604e:	3301      	adds	r3, #1
 8006050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006054:	e75d      	b.n	8005f12 <_Z17GenerateSineGraphiiiid+0x92>
  for(int x = startDegrees; x < stopDegrees; x++)
 8006056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800605a:	3301      	adds	r3, #1
 800605c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006060:	e74e      	b.n	8005f00 <_Z17GenerateSineGraphiiiid+0x80>
    }
  }
}
 8006062:	37a8      	adds	r7, #168	; 0xa8
 8006064:	46bd      	mov	sp, r7
 8006066:	bdb0      	pop	{r4, r5, r7, pc}
 8006068:	a50de270 	.word	0xa50de270
 800606c:	3f91df45 	.word	0x3f91df45
 8006070:	0800e5cc 	.word	0x0800e5cc
 8006074:	0800e5bc 	.word	0x0800e5bc
 8006078:	0800e618 	.word	0x0800e618
 800607c:	0800e5b8 	.word	0x0800e5b8

08006080 <_Z19GenerateSquareGraphiiiidi>:

void GenerateSquareGraph(int module, int signalCount, int startValue, int stopValue, double amplitude, int period)
{
 8006080:	b590      	push	{r4, r7, lr}
 8006082:	b0a5      	sub	sp, #148	; 0x94
 8006084:	af02      	add	r7, sp, #8
 8006086:	6178      	str	r0, [r7, #20]
 8006088:	6139      	str	r1, [r7, #16]
 800608a:	60fa      	str	r2, [r7, #12]
 800608c:	60bb      	str	r3, [r7, #8]
 800608e:	ed87 0b00 	vstr	d0, [r7]
  UartPacket uartPacket;
 8006092:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fd12 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  if(startValue > stopValue)
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	dd03      	ble.n	80060ac <_Z19GenerateSquareGraphiiiidi+0x2c>
  {
    printf("ERROR, GenerateSquareGraph: Start values is higher than stop value, aborting");
 80060a4:	4895      	ldr	r0, [pc, #596]	; (80062fc <_Z19GenerateSquareGraphiiiidi+0x27c>)
 80060a6:	f005 faf7 	bl	800b698 <iprintf>
 80060aa:	e123      	b.n	80062f4 <_Z19GenerateSquareGraphiiiidi+0x274>
    return;
  }
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 80060ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060b0:	2131      	movs	r1, #49	; 0x31
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 fd63 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 80060b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060bc:	6979      	ldr	r1, [r7, #20]
 80060be:	4618      	mov	r0, r3
 80060c0:	f001 fd6f 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 80060c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060c8:	2131      	movs	r1, #49	; 0x31
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 fd7b 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  
  uint8_t length;
  double value;
  
  const int halfPeriod = period / 2;
 80060d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060d4:	0fda      	lsrs	r2, r3, #31
 80060d6:	4413      	add	r3, r2
 80060d8:	105b      	asrs	r3, r3, #1
 80060da:	66bb      	str	r3, [r7, #104]	; 0x68
  
  int multiplierSignal1 = +1;
 80060dc:	2301      	movs	r3, #1
 80060de:	67fb      	str	r3, [r7, #124]	; 0x7c
  int multiplierSignal2 = -1;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	67bb      	str	r3, [r7, #120]	; 0x78
  
  int counterSignal1 = halfPeriod;
 80060e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060e8:	677b      	str	r3, [r7, #116]	; 0x74
  int counterSignal2 = halfPeriod;
 80060ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ec:	673b      	str	r3, [r7, #112]	; 0x70
  
  for(int x = startValue; x < stopValue; x++)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	f280 80fc 	bge.w	80062f4 <_Z19GenerateSquareGraphiiiidi+0x274>
  {
    if(signalCount >= 1)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	dd78      	ble.n	80061f4 <_Z19GenerateSquareGraphiiiidi+0x174>
    {      
      if(counterSignal1 == 0)
 8006102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <_Z19GenerateSquareGraphiiiidi+0x94>
      {
        counterSignal1 = halfPeriod;
 8006108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800610a:	677b      	str	r3, [r7, #116]	; 0x74
        multiplierSignal1 = multiplierSignal1 * (-1);
 800610c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800610e:	425b      	negs	r3, r3
 8006110:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006112:	e002      	b.n	800611a <_Z19GenerateSquareGraphiiiidi+0x9a>
      }
      else
      {
        --counterSignal1;
 8006114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006116:	3b01      	subs	r3, #1
 8006118:	677b      	str	r3, [r7, #116]	; 0x74
      }
      
      uartPacket.SetParameter(Parameter::GRAPH_PARAMETER1);
 800611a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800611e:	2162      	movs	r1, #98	; 0x62
 8006120:	4618      	mov	r0, r3
 8006122:	f001 fda2 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
      
      value = amplitude * multiplierSignal1;
 8006126:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006128:	f7fa fa0e 	bl	8000548 <__aeabi_i2d>
 800612c:	4603      	mov	r3, r0
 800612e:	460c      	mov	r4, r1
 8006130:	461a      	mov	r2, r3
 8006132:	4623      	mov	r3, r4
 8006134:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006138:	f7fa fa70 	bl	800061c <__aeabi_dmul>
 800613c:	4603      	mov	r3, r0
 800613e:	460c      	mov	r4, r1
 8006140:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
      
      if(value < 0)
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006150:	f7fa fcd6 	bl	8000b00 <__aeabi_dcmplt>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d010      	beq.n	800617c <_Z19GenerateSquareGraphiiiidi+0xfc>
      {
        /*Change value sign back to positive and mark it as negative in UART packet*/
        value = value * (-1);
 800615a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800615e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006162:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006166:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800616a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800616e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006172:	2132      	movs	r1, #50	; 0x32
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fe0a 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
 800617a:	e005      	b.n	8006188 <_Z19GenerateSquareGraphiiiidi+0x108>
      }
      else
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800617c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006180:	2131      	movs	r1, #49	; 0x31
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fe03 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
      }
      
      /*Temporary buffer for number-string conversion with additional space for null character*/
      char tempBuffer[PAYLOAD_SIZE + 1] = {0};
 8006188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	f8c3 2007 	str.w	r2, [r3, #7]
      
      /*Convert double number to string and write it to temporary buffer*/
      snprintf(tempBuffer , PAYLOAD_SIZE + 1, "%lf", value);
 8006196:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800619a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800619e:	e9cd 3400 	strd	r3, r4, [sp]
 80061a2:	4a57      	ldr	r2, [pc, #348]	; (8006300 <_Z19GenerateSquareGraphiiiidi+0x280>)
 80061a4:	210b      	movs	r1, #11
 80061a6:	f005 fb5b 	bl	800b860 <sniprintf>
      
      length = static_cast<uint8_t>(strlen(tempBuffer));
 80061aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa f870 	bl	8000294 <strlen>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      
      uartPacket.SetPayload(reinterpret_cast<uint8_t*>(tempBuffer));
 80061ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 fe20 	bl	8007e0a <_ZN10UartPacket10SetPayloadEPh>
      
      uartPacket.SetLength(length);
 80061ca:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80061ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f001 fe06 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
      
      uartPacket.AppendCrcToPacket();
 80061da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 ff42 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
      
      SendPacketViaUart(uartPacket);
 80061e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80061e8:	4618      	mov	r0, r3
 80061ea:	f002 f9a9 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 80061ee:	2014      	movs	r0, #20
 80061f0:	f7fb fe6e 	bl	8001ed0 <HAL_Delay>
    }
    
    if(signalCount >= 2)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	dd78      	ble.n	80062ec <_Z19GenerateSquareGraphiiiidi+0x26c>
    {      
      if(counterSignal2 == 0)
 80061fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <_Z19GenerateSquareGraphiiiidi+0x18c>
      {
        counterSignal2 = halfPeriod;
 8006200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006202:	673b      	str	r3, [r7, #112]	; 0x70
        multiplierSignal2 = multiplierSignal2 * (-1);
 8006204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006206:	425b      	negs	r3, r3
 8006208:	67bb      	str	r3, [r7, #120]	; 0x78
 800620a:	e002      	b.n	8006212 <_Z19GenerateSquareGraphiiiidi+0x192>
      }
      else
      {
        --counterSignal2;
 800620c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800620e:	3b01      	subs	r3, #1
 8006210:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      uartPacket.SetParameter(Parameter::GRAPH_PARAMETER2);
 8006212:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006216:	2163      	movs	r1, #99	; 0x63
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fd26 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
      
      value = amplitude * multiplierSignal2;
 800621e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8006220:	f7fa f992 	bl	8000548 <__aeabi_i2d>
 8006224:	4603      	mov	r3, r0
 8006226:	460c      	mov	r4, r1
 8006228:	461a      	mov	r2, r3
 800622a:	4623      	mov	r3, r4
 800622c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006230:	f7fa f9f4 	bl	800061c <__aeabi_dmul>
 8006234:	4603      	mov	r3, r0
 8006236:	460c      	mov	r4, r1
 8006238:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
      
      if(value < 0)
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006248:	f7fa fc5a 	bl	8000b00 <__aeabi_dcmplt>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d010      	beq.n	8006274 <_Z19GenerateSquareGraphiiiidi+0x1f4>
      {
        /*Change value sign back to positive and mark it as negative in UART packet*/
        value = value * (-1);
 8006252:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800625a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800625e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006262:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 8006266:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800626a:	2132      	movs	r1, #50	; 0x32
 800626c:	4618      	mov	r0, r3
 800626e:	f001 fd8e 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
 8006272:	e005      	b.n	8006280 <_Z19GenerateSquareGraphiiiidi+0x200>
      }
      else
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 8006274:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006278:	2131      	movs	r1, #49	; 0x31
 800627a:	4618      	mov	r0, r3
 800627c:	f001 fd87 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
      }
      
      /*Temporary buffer for number-string conversion with additional space for null character*/
      char tempBuffer[PAYLOAD_SIZE + 1] = {0};
 8006280:	f107 031c 	add.w	r3, r7, #28
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	f8c3 2007 	str.w	r2, [r3, #7]
      
      /*Convert double number to string and write it to temporary buffer*/
      snprintf(tempBuffer , PAYLOAD_SIZE + 1, "%lf", value);
 800628e:	f107 001c 	add.w	r0, r7, #28
 8006292:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006296:	e9cd 3400 	strd	r3, r4, [sp]
 800629a:	4a19      	ldr	r2, [pc, #100]	; (8006300 <_Z19GenerateSquareGraphiiiidi+0x280>)
 800629c:	210b      	movs	r1, #11
 800629e:	f005 fadf 	bl	800b860 <sniprintf>
      
      length = static_cast<uint8_t>(strlen(tempBuffer));
 80062a2:	f107 031c 	add.w	r3, r7, #28
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7f9 fff4 	bl	8000294 <strlen>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      
      uartPacket.SetPayload(reinterpret_cast<uint8_t*>(tempBuffer));
 80062b2:	f107 021c 	add.w	r2, r7, #28
 80062b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062ba:	4611      	mov	r1, r2
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 fda4 	bl	8007e0a <_ZN10UartPacket10SetPayloadEPh>
      
      uartPacket.SetLength(length);
 80062c2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80062c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 fd8a 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
      
      uartPacket.AppendCrcToPacket();
 80062d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 fec6 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
      
      SendPacketViaUart(uartPacket);
 80062dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062e0:	4618      	mov	r0, r3
 80062e2:	f002 f92d 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 80062e6:	2014      	movs	r0, #20
 80062e8:	f7fb fdf2 	bl	8001ed0 <HAL_Delay>
  for(int x = startValue; x < stopValue; x++)
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	3301      	adds	r3, #1
 80062f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062f2:	e6fe      	b.n	80060f2 <_Z19GenerateSquareGraphiiiidi+0x72>
    }
  }
}
 80062f4:	378c      	adds	r7, #140	; 0x8c
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd90      	pop	{r4, r7, pc}
 80062fa:	bf00      	nop
 80062fc:	0800e638 	.word	0x0800e638
 8006300:	0800e5b8 	.word	0x0800e5b8

08006304 <_Z12SendWrongCrci>:

void SendWrongCrc(int module)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08e      	sub	sp, #56	; 0x38
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UartPacket uartPacket;
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	4618      	mov	r0, r3
 8006312:	f001 fbd5 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 8006316:	f107 0308 	add.w	r3, r7, #8
 800631a:	2131      	movs	r1, #49	; 0x31
 800631c:	4618      	mov	r0, r3
 800631e:	f001 fc2e 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 8006322:	f107 0308 	add.w	r3, r7, #8
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	4618      	mov	r0, r3
 800632a:	f001 fc3a 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	2131      	movs	r1, #49	; 0x31
 8006334:	4618      	mov	r0, r3
 8006336:	f001 fc46 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 800633a:	f107 0308 	add.w	r3, r7, #8
 800633e:	2130      	movs	r1, #48	; 0x30
 8006340:	4618      	mov	r0, r3
 8006342:	f001 fc92 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
  
  uartPacket.SetWrongCrc();
 8006346:	f107 0308 	add.w	r3, r7, #8
 800634a:	4618      	mov	r0, r3
 800634c:	f001 fe64 	bl	8008018 <_ZN10UartPacket11SetWrongCrcEv>
#if DEBUG == 1
  printf("SendWrongCrc packet is:");
  uartPacket.PrintPacket();
#endif
  
  SendPacketViaUart(uartPacket);
 8006350:	f107 0308 	add.w	r3, r7, #8
 8006354:	4618      	mov	r0, r3
 8006356:	f002 f8f3 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
}
 800635a:	bf00      	nop
 800635c:	3738      	adds	r7, #56	; 0x38
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <_Z13GetParametersi>:

void GetParameters(int module)
{
 8006364:	b590      	push	{r4, r7, lr}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  printf("\nModule %d parameters:\n\n", module);
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4825      	ldr	r0, [pc, #148]	; (8006404 <_Z13GetParametersi+0xa0>)
 8006370:	f005 f992 	bl	800b698 <iprintf>
  
  Module* pCurrentModule = nullptr;
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
  
  if(module == 1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d102      	bne.n	8006384 <_Z13GetParametersi+0x20>
  {
    pCurrentModule = &module1;
 800637e:	4b22      	ldr	r3, [pc, #136]	; (8006408 <_Z13GetParametersi+0xa4>)
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e00f      	b.n	80063a4 <_Z13GetParametersi+0x40>
  }
  else if(module == 2)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d102      	bne.n	8006390 <_Z13GetParametersi+0x2c>
  {
    pCurrentModule = &module2;
 800638a:	4b20      	ldr	r3, [pc, #128]	; (800640c <_Z13GetParametersi+0xa8>)
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e009      	b.n	80063a4 <_Z13GetParametersi+0x40>
  }
  else if(module == 3)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b03      	cmp	r3, #3
 8006394:	d102      	bne.n	800639c <_Z13GetParametersi+0x38>
  {
    pCurrentModule = &module3;
 8006396:	4b1e      	ldr	r3, [pc, #120]	; (8006410 <_Z13GetParametersi+0xac>)
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e003      	b.n	80063a4 <_Z13GetParametersi+0x40>
  }
  else
  {
    printf("ERROR, Wrong module field in received packet, aborting\n");
 800639c:	481d      	ldr	r0, [pc, #116]	; (8006414 <_Z13GetParametersi+0xb0>)
 800639e:	f005 fa03 	bl	800b7a8 <puts>
    return;
 80063a2:	e02c      	b.n	80063fe <_Z13GetParametersi+0x9a>
  }
  
  for(int i = 0; i < PARAMETERS_COUNT; i++)
 80063a4:	2300      	movs	r3, #0
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b09      	cmp	r3, #9
 80063ac:	dc0f      	bgt.n	80063ce <_Z13GetParametersi+0x6a>
  {
    printf("Parameter %3d state: %10d\n", i+1, pCurrentModule->GetParameterState(i));
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1c5c      	adds	r4, r3, #1
 80063b2:	6939      	ldr	r1, [r7, #16]
 80063b4:	6978      	ldr	r0, [r7, #20]
 80063b6:	f7ff f9ff 	bl	80057b8 <_ZNK6Module17GetParameterStateEi>
 80063ba:	4603      	mov	r3, r0
 80063bc:	461a      	mov	r2, r3
 80063be:	4621      	mov	r1, r4
 80063c0:	4815      	ldr	r0, [pc, #84]	; (8006418 <_Z13GetParametersi+0xb4>)
 80063c2:	f005 f969 	bl	800b698 <iprintf>
  for(int i = 0; i < PARAMETERS_COUNT; i++)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3301      	adds	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	e7ec      	b.n	80063a8 <_Z13GetParametersi+0x44>
  }
  
  printf("\n");
 80063ce:	200a      	movs	r0, #10
 80063d0:	f005 f97a 	bl	800b6c8 <putchar>
  
  for(int i = 0; i < PARAMETERS_COUNT; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b09      	cmp	r3, #9
 80063dc:	dc0f      	bgt.n	80063fe <_Z13GetParametersi+0x9a>
  {
    printf("Parameter %3d value: %10lf\n", i+1, pCurrentModule->GetParameterValue(i));
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1c5c      	adds	r4, r3, #1
 80063e2:	68f9      	ldr	r1, [r7, #12]
 80063e4:	6978      	ldr	r0, [r7, #20]
 80063e6:	f7ff f9f6 	bl	80057d6 <_ZNK6Module17GetParameterValueEi>
 80063ea:	ec53 2b10 	vmov	r2, r3, d0
 80063ee:	4621      	mov	r1, r4
 80063f0:	480a      	ldr	r0, [pc, #40]	; (800641c <_Z13GetParametersi+0xb8>)
 80063f2:	f005 f951 	bl	800b698 <iprintf>
  for(int i = 0; i < PARAMETERS_COUNT; i++)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e7ec      	b.n	80063d8 <_Z13GetParametersi+0x74>
  } 
}
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	bd90      	pop	{r4, r7, pc}
 8006404:	0800e688 	.word	0x0800e688
 8006408:	200005f8 	.word	0x200005f8
 800640c:	20000658 	.word	0x20000658
 8006410:	200006b8 	.word	0x200006b8
 8006414:	0800e6a4 	.word	0x0800e6a4
 8006418:	0800e6dc 	.word	0x0800e6dc
 800641c:	0800e6f8 	.word	0x0800e6f8

08006420 <_Z20SendAdcToGraphScreenii>:

void SendAdcToGraphScreen(int module, int packetCount)
{  
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b09f      	sub	sp, #124	; 0x7c
 8006424:	af02      	add	r7, sp, #8
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
#if DEBUG == 1
  printf("\nModule %d, generating and sending %d ADC packets per each of 4 signals\n\n", module, packetCount);
#endif
  
  UartPacket uartPacket;
 800642a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800642e:	4618      	mov	r0, r3
 8006430:	f001 fb46 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 8006434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006438:	2131      	movs	r1, #49	; 0x31
 800643a:	4618      	mov	r0, r3
 800643c:	f001 fb9f 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 8006440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fbab 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 800644c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006450:	2131      	movs	r1, #49	; 0x31
 8006452:	4618      	mov	r0, r3
 8006454:	f001 fbb7 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  
  int rawAdcValue = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	65fb      	str	r3, [r7, #92]	; 0x5c
  double value = 0;
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	f04f 0400 	mov.w	r4, #0
 8006464:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  
  Parameter parameters[4] = {Parameter::GRAPH_PARAMETER1, Parameter::GRAPH_PARAMETER2, Parameter::GRAPH_PARAMETER3, Parameter::GRAPH_PARAMETER4};
 8006468:	4b4a      	ldr	r3, [pc, #296]	; (8006594 <_Z20SendAdcToGraphScreenii+0x174>)
 800646a:	f107 0418 	add.w	r4, r7, #24
 800646e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  for(int i = 0; i < packetCount; i++)
 8006474:	2300      	movs	r3, #0
 8006476:	667b      	str	r3, [r7, #100]	; 0x64
 8006478:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	f280 8084 	bge.w	800658a <_Z20SendAdcToGraphScreenii+0x16a>
  {    
    for(int signalNumber = 0; signalNumber < 4; signalNumber++)
 8006482:	2300      	movs	r3, #0
 8006484:	663b      	str	r3, [r7, #96]	; 0x60
 8006486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006488:	2b03      	cmp	r3, #3
 800648a:	dc7a      	bgt.n	8006582 <_Z20SendAdcToGraphScreenii+0x162>
    {
      HAL_ADC_Start(&hadc1);
 800648c:	4842      	ldr	r0, [pc, #264]	; (8006598 <_Z20SendAdcToGraphScreenii+0x178>)
 800648e:	f7fb fd85 	bl	8001f9c <HAL_ADC_Start>
      
      rawAdcValue = HAL_ADC_GetValue(&hadc1);
 8006492:	4841      	ldr	r0, [pc, #260]	; (8006598 <_Z20SendAdcToGraphScreenii+0x178>)
 8006494:	f7fb fe28 	bl	80020e8 <HAL_ADC_GetValue>
 8006498:	4603      	mov	r3, r0
 800649a:	65fb      	str	r3, [r7, #92]	; 0x5c
      
      uartPacket.SetParameter(parameters[signalNumber]);
 800649c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80064a4:	4413      	add	r3, r2
 80064a6:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80064aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064ae:	4611      	mov	r1, r2
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fbda 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
#if DEBUG == 1
      printf("ADC raw value is %d out of 4096 = %.3fV\n", rawAdcValue, rawAdcValue * 3.3f / 4096.0f);
#endif
      
      /*Scale ADC value to reference voltage and 12-bit size*/
      value = rawAdcValue * 3.3f / 4096.0f;// * 3.3f / 4096.0f; //adcValue;
 80064b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064c0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800659c <_Z20SendAdcToGraphScreenii+0x17c>
 80064c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064c8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80065a0 <_Z20SendAdcToGraphScreenii+0x180>
 80064cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80064d0:	ee16 0a90 	vmov	r0, s13
 80064d4:	f7fa f84a 	bl	800056c <__aeabi_f2d>
 80064d8:	4603      	mov	r3, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
      
      if(value >= 0)
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064ec:	f7fa fb1c 	bl	8000b28 <__aeabi_dcmpge>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d006      	beq.n	8006504 <_Z20SendAdcToGraphScreenii+0xe4>
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 80064f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064fa:	2131      	movs	r1, #49	; 0x31
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 fc46 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
 8006502:	e00b      	b.n	800651c <_Z20SendAdcToGraphScreenii+0xfc>
      }
      else
      {
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 8006504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006508:	2132      	movs	r1, #50	; 0x32
 800650a:	4618      	mov	r0, r3
 800650c:	f001 fc3f 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
        value = value * (-1);
 8006510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006512:	66bb      	str	r3, [r7, #104]	; 0x68
 8006514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006516:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800651a:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      
      char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
      
      snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lf", value);
 800651c:	f107 000c 	add.w	r0, r7, #12
 8006520:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006524:	e9cd 3400 	strd	r3, r4, [sp]
 8006528:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <_Z20SendAdcToGraphScreenii+0x184>)
 800652a:	210b      	movs	r1, #11
 800652c:	f005 f998 	bl	800b860 <sniprintf>
      
      int lengthInt = strlen(numericStringConversionBuffer);
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	4618      	mov	r0, r3
 8006536:	f7f9 fead 	bl	8000294 <strlen>
 800653a:	4603      	mov	r3, r0
 800653c:	65bb      	str	r3, [r7, #88]	; 0x58
      
      uartPacket.SetLength(lengthInt);
 800653e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006542:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006544:	4618      	mov	r0, r3
 8006546:	f001 fc4e 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
      
      memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 800654a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff f926 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 8006554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006556:	f107 030c 	add.w	r3, r7, #12
 800655a:	4619      	mov	r1, r3
 800655c:	f004 ffc7 	bl	800b4ee <memcpy>
      
      uartPacket.AppendCrcToPacket();
 8006560:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006564:	4618      	mov	r0, r3
 8006566:	f001 fd7f 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
      
#if DEBUG == 1
      printf("Sending packet: ");
      uartPacket.PrintPacket();
#endif
      SendPacketViaUart(uartPacket);
 800656a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800656e:	4618      	mov	r0, r3
 8006570:	f001 ffe6 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 8006574:	2014      	movs	r0, #20
 8006576:	f7fb fcab 	bl	8001ed0 <HAL_Delay>
    for(int signalNumber = 0; signalNumber < 4; signalNumber++)
 800657a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800657c:	3301      	adds	r3, #1
 800657e:	663b      	str	r3, [r7, #96]	; 0x60
 8006580:	e781      	b.n	8006486 <_Z20SendAdcToGraphScreenii+0x66>
  for(int i = 0; i < packetCount; i++)
 8006582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006584:	3301      	adds	r3, #1
 8006586:	667b      	str	r3, [r7, #100]	; 0x64
 8006588:	e776      	b.n	8006478 <_Z20SendAdcToGraphScreenii+0x58>
    }
  }
}
 800658a:	bf00      	nop
 800658c:	3774      	adds	r7, #116	; 0x74
 800658e:	46bd      	mov	sp, r7
 8006590:	bd90      	pop	{r4, r7, pc}
 8006592:	bf00      	nop
 8006594:	0800e5bc 	.word	0x0800e5bc
 8006598:	20000808 	.word	0x20000808
 800659c:	40533333 	.word	0x40533333
 80065a0:	45800000 	.word	0x45800000
 80065a4:	0800e5b8 	.word	0x0800e5b8

080065a8 <_Z19SendAdcToDataScreenii>:

void SendAdcToDataScreen(int module, int packetCount)
{
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b09f      	sub	sp, #124	; 0x7c
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  if(module != 1 && module != 2 && module != 3)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d009      	beq.n	80065cc <_Z19SendAdcToDataScreenii+0x24>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d006      	beq.n	80065cc <_Z19SendAdcToDataScreenii+0x24>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d003      	beq.n	80065cc <_Z19SendAdcToDataScreenii+0x24>
  {
    printf("Error, wrong module field in received packet, aborting\n");
 80065c4:	485b      	ldr	r0, [pc, #364]	; (8006734 <_Z19SendAdcToDataScreenii+0x18c>)
 80065c6:	f005 f8ef 	bl	800b7a8 <puts>
 80065ca:	e0af      	b.n	800672c <_Z19SendAdcToDataScreenii+0x184>
  
#if DEBUG == 1
  printf("\nModule %d, generating and sending %d ADC packets per each of 4 signals\n\n", module, packetCount);
#endif
  
  UartPacket uartPacket;
 80065cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 fa75 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 80065d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065da:	2131      	movs	r1, #49	; 0x31
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 face 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 80065e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 fada 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 80065ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065f2:	2131      	movs	r1, #49	; 0x31
 80065f4:	4618      	mov	r0, r3
 80065f6:	f001 fae6 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  
  int rawAdcValue = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double value = 0;
 80065fe:	f04f 0300 	mov.w	r3, #0
 8006602:	f04f 0400 	mov.w	r4, #0
 8006606:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  
  Parameter parameters[4] = {Parameter::PARAMETER1, Parameter::PARAMETER2, Parameter::PARAMETER3, Parameter::PARAMETER4};
 800660a:	4b4b      	ldr	r3, [pc, #300]	; (8006738 <_Z19SendAdcToDataScreenii+0x190>)
 800660c:	f107 0418 	add.w	r4, r7, #24
 8006610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  for(int i = 0; i < packetCount; i++)
 8006616:	2300      	movs	r3, #0
 8006618:	667b      	str	r3, [r7, #100]	; 0x64
 800661a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	f280 8084 	bge.w	800672c <_Z19SendAdcToDataScreenii+0x184>
  {    
    for(int signalNumber = 0; signalNumber < 4; signalNumber++)
 8006624:	2300      	movs	r3, #0
 8006626:	663b      	str	r3, [r7, #96]	; 0x60
 8006628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800662a:	2b03      	cmp	r3, #3
 800662c:	dc7a      	bgt.n	8006724 <_Z19SendAdcToDataScreenii+0x17c>
    {
      HAL_ADC_Start(&hadc1);
 800662e:	4843      	ldr	r0, [pc, #268]	; (800673c <_Z19SendAdcToDataScreenii+0x194>)
 8006630:	f7fb fcb4 	bl	8001f9c <HAL_ADC_Start>
      
      rawAdcValue = HAL_ADC_GetValue(&hadc1);
 8006634:	4841      	ldr	r0, [pc, #260]	; (800673c <_Z19SendAdcToDataScreenii+0x194>)
 8006636:	f7fb fd57 	bl	80020e8 <HAL_ADC_GetValue>
 800663a:	4603      	mov	r3, r0
 800663c:	65fb      	str	r3, [r7, #92]	; 0x5c
      
      uartPacket.SetParameter(parameters[signalNumber]);
 800663e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006646:	4413      	add	r3, r2
 8006648:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800664c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fb09 	bl	8007c6a <_ZN10UartPacket12SetParameterE9Parameter>
      
#if DEBUG == 1
      printf("ADC raw value is %d out of 4096 = %.3fV\n", rawAdcValue, rawAdcValue * 3.3f / 4096.0f);
#endif
      /*Scale ADC value to reference voltage and 12-bit size*/
      value = rawAdcValue * 3.3f / 4096.0f;
 8006658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006662:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8006740 <_Z19SendAdcToDataScreenii+0x198>
 8006666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800666a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006744 <_Z19SendAdcToDataScreenii+0x19c>
 800666e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006672:	ee16 0a90 	vmov	r0, s13
 8006676:	f7f9 ff79 	bl	800056c <__aeabi_f2d>
 800667a:	4603      	mov	r3, r0
 800667c:	460c      	mov	r4, r1
 800667e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
      
      if(value >= 0)
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	f04f 0300 	mov.w	r3, #0
 800668a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800668e:	f7fa fa4b 	bl	8000b28 <__aeabi_dcmpge>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d006      	beq.n	80066a6 <_Z19SendAdcToDataScreenii+0xfe>
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 8006698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800669c:	2131      	movs	r1, #49	; 0x31
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fb75 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
 80066a4:	e00b      	b.n	80066be <_Z19SendAdcToDataScreenii+0x116>
      }
      else
      {
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 80066a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066aa:	2132      	movs	r1, #50	; 0x32
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fb6e 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
        value = value * (-1);
 80066b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      
      char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
      
      snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lf", value);
 80066be:	f107 000c 	add.w	r0, r7, #12
 80066c2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80066c6:	e9cd 3400 	strd	r3, r4, [sp]
 80066ca:	4a1f      	ldr	r2, [pc, #124]	; (8006748 <_Z19SendAdcToDataScreenii+0x1a0>)
 80066cc:	210b      	movs	r1, #11
 80066ce:	f005 f8c7 	bl	800b860 <sniprintf>
      
      int lengthInt = strlen(numericStringConversionBuffer);
 80066d2:	f107 030c 	add.w	r3, r7, #12
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7f9 fddc 	bl	8000294 <strlen>
 80066dc:	4603      	mov	r3, r0
 80066de:	65bb      	str	r3, [r7, #88]	; 0x58
      
      uartPacket.SetLength(lengthInt);
 80066e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 fb7d 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
      
      memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 80066ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff f855 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 80066f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066f8:	f107 030c 	add.w	r3, r7, #12
 80066fc:	4619      	mov	r1, r3
 80066fe:	f004 fef6 	bl	800b4ee <memcpy>
      
      uartPacket.AppendCrcToPacket();
 8006702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fcae 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
#if DEBUG == 1
      printf("Sending packet: ");
      uartPacket.PrintPacket();
#endif
      
      SendPacketViaUart(uartPacket);
 800670c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006710:	4618      	mov	r0, r3
 8006712:	f001 ff15 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 8006716:	2014      	movs	r0, #20
 8006718:	f7fb fbda 	bl	8001ed0 <HAL_Delay>
    for(int signalNumber = 0; signalNumber < 4; signalNumber++)
 800671c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800671e:	3301      	adds	r3, #1
 8006720:	663b      	str	r3, [r7, #96]	; 0x60
 8006722:	e781      	b.n	8006628 <_Z19SendAdcToDataScreenii+0x80>
  for(int i = 0; i < packetCount; i++)
 8006724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006726:	3301      	adds	r3, #1
 8006728:	667b      	str	r3, [r7, #100]	; 0x64
 800672a:	e776      	b.n	800661a <_Z19SendAdcToDataScreenii+0x72>
    }
  }
}
 800672c:	3774      	adds	r7, #116	; 0x74
 800672e:	46bd      	mov	sp, r7
 8006730:	bd90      	pop	{r4, r7, pc}
 8006732:	bf00      	nop
 8006734:	0800e714 	.word	0x0800e714
 8006738:	0800e74c 	.word	0x0800e74c
 800673c:	20000808 	.word	0x20000808
 8006740:	40533333 	.word	0x40533333
 8006744:	45800000 	.word	0x45800000
 8006748:	0800e5b8 	.word	0x0800e5b8

0800674c <_Z16SendCustomPacketicd>:

void SendCustomPacket(int module, char rawParameter, double value)
{
 800674c:	b590      	push	{r4, r7, lr}
 800674e:	b097      	sub	sp, #92	; 0x5c
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	460b      	mov	r3, r1
 8006756:	ed87 0b00 	vstr	d0, [r7]
 800675a:	72fb      	strb	r3, [r7, #11]
  UartPacket uartPacket;
 800675c:	f107 031c 	add.w	r3, r7, #28
 8006760:	4618      	mov	r0, r3
 8006762:	f001 f9ad 	bl	8007ac0 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 8006766:	f107 031c 	add.w	r3, r7, #28
 800676a:	2131      	movs	r1, #49	; 0x31
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fa06 	bl	8007b7e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 8006772:	f107 031c 	add.w	r3, r7, #28
 8006776:	68f9      	ldr	r1, [r7, #12]
 8006778:	4618      	mov	r0, r3
 800677a:	f001 fa12 	bl	8007ba2 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 800677e:	f107 031c 	add.w	r3, r7, #28
 8006782:	2131      	movs	r1, #49	; 0x31
 8006784:	4618      	mov	r0, r3
 8006786:	f001 fa1e 	bl	8007bc6 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(rawParameter);
 800678a:	7afa      	ldrb	r2, [r7, #11]
 800678c:	f107 031c 	add.w	r3, r7, #28
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f001 faeb 	bl	8007d6e <_ZN10UartPacket12SetParameterEh>
  
  if(value >= 0)
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067a4:	f7fa f9c0 	bl	8000b28 <__aeabi_dcmpge>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d006      	beq.n	80067bc <_Z16SendCustomPacketicd+0x70>
  {
    uartPacket.SetSign(Sign::POSITIVE_SIGN);
 80067ae:	f107 031c 	add.w	r3, r7, #28
 80067b2:	2131      	movs	r1, #49	; 0x31
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 faea 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
 80067ba:	e00b      	b.n	80067d4 <_Z16SendCustomPacketicd+0x88>
  }
  else
  {
    uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 80067bc:	f107 031c 	add.w	r3, r7, #28
 80067c0:	2132      	movs	r1, #50	; 0x32
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 fae3 	bl	8007d8e <_ZN10UartPacket7SetSignE4Sign>
    value = value * (-1);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80067d2:	607b      	str	r3, [r7, #4]
  }
  
  char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
  
  snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lf", value);
 80067d4:	f107 0010 	add.w	r0, r7, #16
 80067d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80067dc:	e9cd 3400 	strd	r3, r4, [sp]
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <_Z16SendCustomPacketicd+0xe8>)
 80067e2:	210b      	movs	r1, #11
 80067e4:	f005 f83c 	bl	800b860 <sniprintf>
  
  int lengthInt = strlen(numericStringConversionBuffer);
 80067e8:	f107 0310 	add.w	r3, r7, #16
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7f9 fd51 	bl	8000294 <strlen>
 80067f2:	4603      	mov	r3, r0
 80067f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  
  uartPacket.SetLength(lengthInt);
 80067f6:	f107 031c 	add.w	r3, r7, #28
 80067fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 faf2 	bl	8007de6 <_ZN10UartPacket9SetLengthEi>
  
  memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 8006802:	f107 031c 	add.w	r3, r7, #28
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe ffca 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 800680c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800680e:	f107 0310 	add.w	r3, r7, #16
 8006812:	4619      	mov	r1, r3
 8006814:	f004 fe6b 	bl	800b4ee <memcpy>
  
  uartPacket.AppendCrcToPacket();
 8006818:	f107 031c 	add.w	r3, r7, #28
 800681c:	4618      	mov	r0, r3
 800681e:	f001 fc23 	bl	8008068 <_ZN10UartPacket17AppendCrcToPacketEv>
#if DEBUG == 1
  printf("SendCustomPacket packet is:");
  uartPacket.PrintPacket();
#endif
  
  SendPacketViaUart(uartPacket);
 8006822:	f107 031c 	add.w	r3, r7, #28
 8006826:	4618      	mov	r0, r3
 8006828:	f001 fe8a 	bl	8008540 <_Z17SendPacketViaUartR10UartPacket>
}
 800682c:	bf00      	nop
 800682e:	3754      	adds	r7, #84	; 0x54
 8006830:	46bd      	mov	sp, r7
 8006832:	bd90      	pop	{r4, r7, pc}
 8006834:	0800e5b8 	.word	0x0800e5b8

08006838 <_Z19ProcessReceivedDataR10UartPacket>:

void ProcessReceivedData(UartPacket& uartPacket)
{   
 8006838:	b590      	push	{r4, r7, lr}
 800683a:	b08b      	sub	sp, #44	; 0x2c
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
#if DEBUG == 1
  uartPacket.PrintPacket();
#endif
  
  if(uartPacket.CheckCrc32())
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 fc56 	bl	80080f2 <_ZNK10UartPacket10CheckCrc32Ev>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d06b      	beq.n	8006924 <_Z19ProcessReceivedDataR10UartPacket+0xec>
  {
    Module* pCurrentModule = nullptr;
 800684c:	2300      	movs	r3, #0
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
    
    ModuleID moduleID = uartPacket.GetModule();
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 faea 	bl	8007e2a <_ZNK10UartPacket9GetModuleEv>
 8006856:	4603      	mov	r3, r0
 8006858:	617b      	str	r3, [r7, #20]
    
    if(moduleID == ModuleID::MODULE1)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b31      	cmp	r3, #49	; 0x31
 800685e:	d102      	bne.n	8006866 <_Z19ProcessReceivedDataR10UartPacket+0x2e>
    {
      pCurrentModule = &module1;
 8006860:	4b33      	ldr	r3, [pc, #204]	; (8006930 <_Z19ProcessReceivedDataR10UartPacket+0xf8>)
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
 8006864:	e00f      	b.n	8006886 <_Z19ProcessReceivedDataR10UartPacket+0x4e>
    }
    else if(moduleID == ModuleID::MODULE2)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b32      	cmp	r3, #50	; 0x32
 800686a:	d102      	bne.n	8006872 <_Z19ProcessReceivedDataR10UartPacket+0x3a>
    {
      pCurrentModule = &module2;
 800686c:	4b31      	ldr	r3, [pc, #196]	; (8006934 <_Z19ProcessReceivedDataR10UartPacket+0xfc>)
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
 8006870:	e009      	b.n	8006886 <_Z19ProcessReceivedDataR10UartPacket+0x4e>
    }
    else if(moduleID == ModuleID::MODULE3)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b33      	cmp	r3, #51	; 0x33
 8006876:	d102      	bne.n	800687e <_Z19ProcessReceivedDataR10UartPacket+0x46>
    {
      pCurrentModule = &module3;
 8006878:	4b2f      	ldr	r3, [pc, #188]	; (8006938 <_Z19ProcessReceivedDataR10UartPacket+0x100>)
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
 800687c:	e003      	b.n	8006886 <_Z19ProcessReceivedDataR10UartPacket+0x4e>
    }
    else
    {
      printf("ERROR, Wrong module field in received packet, aborting\n");
 800687e:	482f      	ldr	r0, [pc, #188]	; (800693c <_Z19ProcessReceivedDataR10UartPacket+0x104>)
 8006880:	f004 ff92 	bl	800b7a8 <puts>
      return;
 8006884:	e051      	b.n	800692a <_Z19ProcessReceivedDataR10UartPacket+0xf2>
    }
    
    Function function = uartPacket.GetFunction();
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 faef 	bl	8007e6a <_ZNK10UartPacket11GetFunctionEv>
 800688c:	4603      	mov	r3, r0
 800688e:	613b      	str	r3, [r7, #16]
    Parameter parameter = uartPacket.GetParameter();
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 fb34 	bl	8007efe <_ZNK10UartPacket12GetParameterEv>
 8006896:	4603      	mov	r3, r0
 8006898:	60fb      	str	r3, [r7, #12]
    
    double valueDouble = 0;
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	f04f 0400 	mov.w	r4, #0
 80068a2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    
    switch(function)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b35      	cmp	r3, #53	; 0x35
 80068aa:	d00b      	beq.n	80068c4 <_Z19ProcessReceivedDataR10UartPacket+0x8c>
 80068ac:	2b36      	cmp	r3, #54	; 0x36
 80068ae:	d011      	beq.n	80068d4 <_Z19ProcessReceivedDataR10UartPacket+0x9c>
 80068b0:	2b34      	cmp	r3, #52	; 0x34
 80068b2:	d133      	bne.n	800691c <_Z19ProcessReceivedDataR10UartPacket+0xe4>
    {
    case Function::ENABLE_PARAMETER_PACKET:
      printf("Enable parameter packet received\n");
 80068b4:	4822      	ldr	r0, [pc, #136]	; (8006940 <_Z19ProcessReceivedDataR10UartPacket+0x108>)
 80068b6:	f004 ff77 	bl	800b7a8 <puts>
      pCurrentModule->EnableParameter(parameter);
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068be:	f000 fc91 	bl	80071e4 <_ZN6Module15EnableParameterE9Parameter>
      break;
 80068c2:	e032      	b.n	800692a <_Z19ProcessReceivedDataR10UartPacket+0xf2>
      
    case Function::DISABLE_PARAMETER_PACKET: 
      printf("Disable parameter packet received\n");
 80068c4:	481f      	ldr	r0, [pc, #124]	; (8006944 <_Z19ProcessReceivedDataR10UartPacket+0x10c>)
 80068c6:	f004 ff6f 	bl	800b7a8 <puts>
      pCurrentModule->DisableParameter(parameter);
 80068ca:	68f9      	ldr	r1, [r7, #12]
 80068cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068ce:	f000 fd35 	bl	800733c <_ZN6Module16DisableParameterE9Parameter>
      break;
 80068d2:	e02a      	b.n	800692a <_Z19ProcessReceivedDataR10UartPacket+0xf2>
      
    case Function::SET_PARAMETER_PACKET:
      printf("Set parameter packet received\n");
 80068d4:	481c      	ldr	r0, [pc, #112]	; (8006948 <_Z19ProcessReceivedDataR10UartPacket+0x110>)
 80068d6:	f004 ff67 	bl	800b7a8 <puts>
      valueDouble = double(atof((char*)(uartPacket.GetPayload())));
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fe ff60 	bl	80057a0 <_ZNK10UartPacket10GetPayloadEv>
 80068e0:	4603      	mov	r3, r0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f004 fbd8 	bl	800b098 <atof>
 80068e8:	ed87 0b06 	vstr	d0, [r7, #24]
      
      if(uartPacket.GetSign() == Sign::NEGATIVE_SIGN)
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 fb7a 	bl	8007fe6 <_ZNK10UartPacket7GetSignEv>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b32      	cmp	r3, #50	; 0x32
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <_Z19ProcessReceivedDataR10UartPacket+0xd6>
      {
        /*Make value negative if it was marked as negative in UART Packet*/
        valueDouble = valueDouble * (-1);
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800690c:	61fb      	str	r3, [r7, #28]
      }
      
      pCurrentModule->SetParameter(parameter, valueDouble);
 800690e:	ed97 0b06 	vldr	d0, [r7, #24]
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006916:	f000 fdbd 	bl	8007494 <_ZN6Module12SetParameterE9Parameterd>
      break;
 800691a:	e006      	b.n	800692a <_Z19ProcessReceivedDataR10UartPacket+0xf2>
      
    default:
      printf("ERROR, Wrong function type, aborting\n");
 800691c:	480b      	ldr	r0, [pc, #44]	; (800694c <_Z19ProcessReceivedDataR10UartPacket+0x114>)
 800691e:	f004 ff43 	bl	800b7a8 <puts>
      return;
 8006922:	e002      	b.n	800692a <_Z19ProcessReceivedDataR10UartPacket+0xf2>
    }
  }
  else
  {
    printf("ERROR, WRONG CRC IN DATA RECEIVED FROM STM32F469\n");
 8006924:	480a      	ldr	r0, [pc, #40]	; (8006950 <_Z19ProcessReceivedDataR10UartPacket+0x118>)
 8006926:	f004 ff3f 	bl	800b7a8 <puts>
  }
}
 800692a:	372c      	adds	r7, #44	; 0x2c
 800692c:	46bd      	mov	sp, r7
 800692e:	bd90      	pop	{r4, r7, pc}
 8006930:	200005f8 	.word	0x200005f8
 8006934:	20000658 	.word	0x20000658
 8006938:	200006b8 	.word	0x200006b8
 800693c:	0800e6a4 	.word	0x0800e6a4
 8006940:	0800e75c 	.word	0x0800e75c
 8006944:	0800e780 	.word	0x0800e780
 8006948:	0800e7a4 	.word	0x0800e7a4
 800694c:	0800e7c4 	.word	0x0800e7c4
 8006950:	0800e7ec 	.word	0x0800e7ec

08006954 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*UART receive interrupt callback function*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /*Command UART*/
  if(huart == &huart1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4aaa      	ldr	r2, [pc, #680]	; (8006c08 <HAL_UART_RxCpltCallback+0x2b4>)
 8006960:	4293      	cmp	r3, r2
 8006962:	f040 8132 	bne.w	8006bca <HAL_UART_RxCpltCallback+0x276>
  {
    printf("\n-----------------Received command data from PC-----------------\n");
 8006966:	48a9      	ldr	r0, [pc, #676]	; (8006c0c <HAL_UART_RxCpltCallback+0x2b8>)
 8006968:	f004 ff1e 	bl	800b7a8 <puts>
    printf("Command: %.60s\n", receivedCommandBuffer);
 800696c:	49a8      	ldr	r1, [pc, #672]	; (8006c10 <HAL_UART_RxCpltCallback+0x2bc>)
 800696e:	48a9      	ldr	r0, [pc, #676]	; (8006c14 <HAL_UART_RxCpltCallback+0x2c0>)
 8006970:	f004 fe92 	bl	800b698 <iprintf>
    
    fullCommandBuffer.assign(receivedCommandBuffer);
 8006974:	49a6      	ldr	r1, [pc, #664]	; (8006c10 <HAL_UART_RxCpltCallback+0x2bc>)
 8006976:	48a8      	ldr	r0, [pc, #672]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006978:	f003 f99c 	bl	8009cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
    
    vector<string> extractedArguments;
 800697c:	f107 030c 	add.w	r3, r7, #12
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe fd4e 	bl	8005422 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
    
    if(fullCommandBuffer.find("#InitModule") != string::npos)
 8006986:	2200      	movs	r2, #0
 8006988:	49a4      	ldr	r1, [pc, #656]	; (8006c1c <HAL_UART_RxCpltCallback+0x2c8>)
 800698a:	48a3      	ldr	r0, [pc, #652]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 800698c:	f003 f9d3 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006990:	4603      	mov	r3, r0
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	bf14      	ite	ne
 8006998:	2301      	movne	r3, #1
 800699a:	2300      	moveq	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d006      	beq.n	80069b0 <HAL_UART_RxCpltCallback+0x5c>
    {
      printf("Invoking InitModule command\n");
 80069a2:	489f      	ldr	r0, [pc, #636]	; (8006c20 <HAL_UART_RxCpltCallback+0x2cc>)
 80069a4:	f004 ff00 	bl	800b7a8 <puts>
      CommandInitModule(fullCommandBuffer);
 80069a8:	489b      	ldr	r0, [pc, #620]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 80069aa:	f7fd fcc7 	bl	800433c <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80069ae:	e101      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#DeinitModule") != string::npos)
 80069b0:	2200      	movs	r2, #0
 80069b2:	499c      	ldr	r1, [pc, #624]	; (8006c24 <HAL_UART_RxCpltCallback+0x2d0>)
 80069b4:	4898      	ldr	r0, [pc, #608]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 80069b6:	f003 f9be 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	bf14      	ite	ne
 80069c2:	2301      	movne	r3, #1
 80069c4:	2300      	moveq	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d006      	beq.n	80069da <HAL_UART_RxCpltCallback+0x86>
    {
      printf("Invoking DeinitModule command\n");
 80069cc:	4896      	ldr	r0, [pc, #600]	; (8006c28 <HAL_UART_RxCpltCallback+0x2d4>)
 80069ce:	f004 feeb 	bl	800b7a8 <puts>
      CommandDeinitModule(fullCommandBuffer);
 80069d2:	4891      	ldr	r0, [pc, #580]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 80069d4:	f7fd fd18 	bl	8004408 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80069d8:	e0ec      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SetGraphMin") != string::npos)
 80069da:	2200      	movs	r2, #0
 80069dc:	4993      	ldr	r1, [pc, #588]	; (8006c2c <HAL_UART_RxCpltCallback+0x2d8>)
 80069de:	488e      	ldr	r0, [pc, #568]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 80069e0:	f003 f9a9 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	bf14      	ite	ne
 80069ec:	2301      	movne	r3, #1
 80069ee:	2300      	moveq	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d006      	beq.n	8006a04 <HAL_UART_RxCpltCallback+0xb0>
    {
      printf("Invoking SetGraphMin command\n");
 80069f6:	488e      	ldr	r0, [pc, #568]	; (8006c30 <HAL_UART_RxCpltCallback+0x2dc>)
 80069f8:	f004 fed6 	bl	800b7a8 <puts>
      CommandSetGraphMin(fullCommandBuffer);
 80069fc:	4886      	ldr	r0, [pc, #536]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 80069fe:	f7fd fd69 	bl	80044d4 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006a02:	e0d7      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SetGraphMax") != string::npos)
 8006a04:	2200      	movs	r2, #0
 8006a06:	498b      	ldr	r1, [pc, #556]	; (8006c34 <HAL_UART_RxCpltCallback+0x2e0>)
 8006a08:	4883      	ldr	r0, [pc, #524]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a0a:	f003 f994 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	bf14      	ite	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	2300      	moveq	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d006      	beq.n	8006a2e <HAL_UART_RxCpltCallback+0xda>
    {
      printf("Invoking SetGraphMax command\n");
 8006a20:	4885      	ldr	r0, [pc, #532]	; (8006c38 <HAL_UART_RxCpltCallback+0x2e4>)
 8006a22:	f004 fec1 	bl	800b7a8 <puts>
      CommandSetGraphMax(fullCommandBuffer);
 8006a26:	487c      	ldr	r0, [pc, #496]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a28:	f7fd fdd2 	bl	80045d0 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006a2c:	e0c2      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SetGraphTime") != string::npos)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4982      	ldr	r1, [pc, #520]	; (8006c3c <HAL_UART_RxCpltCallback+0x2e8>)
 8006a32:	4879      	ldr	r0, [pc, #484]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a34:	f003 f97f 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3e:	bf14      	ite	ne
 8006a40:	2301      	movne	r3, #1
 8006a42:	2300      	moveq	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d006      	beq.n	8006a58 <HAL_UART_RxCpltCallback+0x104>
    {
      printf("Invoking SetGraphTime command\n");
 8006a4a:	487d      	ldr	r0, [pc, #500]	; (8006c40 <HAL_UART_RxCpltCallback+0x2ec>)
 8006a4c:	f004 feac 	bl	800b7a8 <puts>
      CommandSetGraphTime(fullCommandBuffer);
 8006a50:	4871      	ldr	r0, [pc, #452]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a52:	f7fd fe3b 	bl	80046cc <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006a56:	e0ad      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#GraphLinear") != string::npos)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	497a      	ldr	r1, [pc, #488]	; (8006c44 <HAL_UART_RxCpltCallback+0x2f0>)
 8006a5c:	486e      	ldr	r0, [pc, #440]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a5e:	f003 f96a 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	bf14      	ite	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	2300      	moveq	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <HAL_UART_RxCpltCallback+0x12e>
    {
      printf("Invoking GraphLinear command\n");
 8006a74:	4874      	ldr	r0, [pc, #464]	; (8006c48 <HAL_UART_RxCpltCallback+0x2f4>)
 8006a76:	f004 fe97 	bl	800b7a8 <puts>
      CommandGraphLinear(fullCommandBuffer);
 8006a7a:	4867      	ldr	r0, [pc, #412]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a7c:	f7fd fe9c 	bl	80047b8 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006a80:	e098      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#GraphSine") != string::npos)
 8006a82:	2200      	movs	r2, #0
 8006a84:	4971      	ldr	r1, [pc, #452]	; (8006c4c <HAL_UART_RxCpltCallback+0x2f8>)
 8006a86:	4864      	ldr	r0, [pc, #400]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a88:	f003 f955 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a92:	bf14      	ite	ne
 8006a94:	2301      	movne	r3, #1
 8006a96:	2300      	moveq	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d006      	beq.n	8006aac <HAL_UART_RxCpltCallback+0x158>
    {
      printf("Invoking GraphSine command\n");
 8006a9e:	486c      	ldr	r0, [pc, #432]	; (8006c50 <HAL_UART_RxCpltCallback+0x2fc>)
 8006aa0:	f004 fe82 	bl	800b7a8 <puts>
      CommandGraphSine(fullCommandBuffer);
 8006aa4:	485c      	ldr	r0, [pc, #368]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006aa6:	f7fd ff49 	bl	800493c <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006aaa:	e083      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#GraphSquare") != string::npos)
 8006aac:	2200      	movs	r2, #0
 8006aae:	4969      	ldr	r1, [pc, #420]	; (8006c54 <HAL_UART_RxCpltCallback+0x300>)
 8006ab0:	4859      	ldr	r0, [pc, #356]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006ab2:	f003 f940 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	bf14      	ite	ne
 8006abe:	2301      	movne	r3, #1
 8006ac0:	2300      	moveq	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <HAL_UART_RxCpltCallback+0x182>
    {
      printf("Invoking GraphSquare command\n");
 8006ac8:	4863      	ldr	r0, [pc, #396]	; (8006c58 <HAL_UART_RxCpltCallback+0x304>)
 8006aca:	f004 fe6d 	bl	800b7a8 <puts>
      CommandGraphSquare(fullCommandBuffer);
 8006ace:	4852      	ldr	r0, [pc, #328]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006ad0:	f7fd ffe6 	bl	8004aa0 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006ad4:	e06e      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SendWrongCrc") != string::npos)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4960      	ldr	r1, [pc, #384]	; (8006c5c <HAL_UART_RxCpltCallback+0x308>)
 8006ada:	484f      	ldr	r0, [pc, #316]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006adc:	f003 f92b 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	bf14      	ite	ne
 8006ae8:	2301      	movne	r3, #1
 8006aea:	2300      	moveq	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d006      	beq.n	8006b00 <HAL_UART_RxCpltCallback+0x1ac>
    {
      printf("Invoking SendWrongCrc command\n");
 8006af2:	485b      	ldr	r0, [pc, #364]	; (8006c60 <HAL_UART_RxCpltCallback+0x30c>)
 8006af4:	f004 fe58 	bl	800b7a8 <puts>
      CommandSendWrongCrc(fullCommandBuffer);
 8006af8:	4847      	ldr	r0, [pc, #284]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006afa:	f7fe f895 	bl	8004c28 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006afe:	e059      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#GetParameters") != string::npos)
 8006b00:	2200      	movs	r2, #0
 8006b02:	4958      	ldr	r1, [pc, #352]	; (8006c64 <HAL_UART_RxCpltCallback+0x310>)
 8006b04:	4844      	ldr	r0, [pc, #272]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006b06:	f003 f916 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d006      	beq.n	8006b2a <HAL_UART_RxCpltCallback+0x1d6>
    {
      printf("Invoking GetParameters command\n");
 8006b1c:	4852      	ldr	r0, [pc, #328]	; (8006c68 <HAL_UART_RxCpltCallback+0x314>)
 8006b1e:	f004 fe43 	bl	800b7a8 <puts>
      CommandGetParameters(fullCommandBuffer);
 8006b22:	483d      	ldr	r0, [pc, #244]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006b24:	f7fe f8e6 	bl	8004cf4 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006b28:	e044      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#Adc1") != string::npos)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	494f      	ldr	r1, [pc, #316]	; (8006c6c <HAL_UART_RxCpltCallback+0x318>)
 8006b2e:	483a      	ldr	r0, [pc, #232]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006b30:	f003 f901 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	bf14      	ite	ne
 8006b3c:	2301      	movne	r3, #1
 8006b3e:	2300      	moveq	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d006      	beq.n	8006b54 <HAL_UART_RxCpltCallback+0x200>
    {
      printf("Invoking Adc1 command\n");
 8006b46:	484a      	ldr	r0, [pc, #296]	; (8006c70 <HAL_UART_RxCpltCallback+0x31c>)
 8006b48:	f004 fe2e 	bl	800b7a8 <puts>
      CommandAdc1(fullCommandBuffer);
 8006b4c:	4832      	ldr	r0, [pc, #200]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006b4e:	f7fe f937 	bl	8004dc0 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006b52:	e02f      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#Adc2") != string::npos)
 8006b54:	2200      	movs	r2, #0
 8006b56:	4947      	ldr	r1, [pc, #284]	; (8006c74 <HAL_UART_RxCpltCallback+0x320>)
 8006b58:	482f      	ldr	r0, [pc, #188]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006b5a:	f003 f8ec 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b64:	bf14      	ite	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	2300      	moveq	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d006      	beq.n	8006b7e <HAL_UART_RxCpltCallback+0x22a>
    {
      printf("Invoking Adc2 command\n");
 8006b70:	4841      	ldr	r0, [pc, #260]	; (8006c78 <HAL_UART_RxCpltCallback+0x324>)
 8006b72:	f004 fe19 	bl	800b7a8 <puts>
      CommandAdc2(fullCommandBuffer);
 8006b76:	4828      	ldr	r0, [pc, #160]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006b78:	f7fe f998 	bl	8004eac <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006b7c:	e01a      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SendPacket") != string::npos)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	493e      	ldr	r1, [pc, #248]	; (8006c7c <HAL_UART_RxCpltCallback+0x328>)
 8006b82:	4825      	ldr	r0, [pc, #148]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006b84:	f003 f8d7 	bl	8009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	bf14      	ite	ne
 8006b90:	2301      	movne	r3, #1
 8006b92:	2300      	moveq	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d006      	beq.n	8006ba8 <HAL_UART_RxCpltCallback+0x254>
    {
      printf("Invoking SendPacket command\n");
 8006b9a:	4839      	ldr	r0, [pc, #228]	; (8006c80 <HAL_UART_RxCpltCallback+0x32c>)
 8006b9c:	f004 fe04 	bl	800b7a8 <puts>
      CommandSendPacket(fullCommandBuffer);
 8006ba0:	481d      	ldr	r0, [pc, #116]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006ba2:	f7fe f9f9 	bl	8004f98 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006ba6:	e005      	b.n	8006bb4 <HAL_UART_RxCpltCallback+0x260>
    }
    else
    {
      printf("Unrecognized command, reseting buffer\n");
 8006ba8:	4836      	ldr	r0, [pc, #216]	; (8006c84 <HAL_UART_RxCpltCallback+0x330>)
 8006baa:	f004 fdfd 	bl	800b7a8 <puts>
      fullCommandBuffer.clear();
 8006bae:	481a      	ldr	r0, [pc, #104]	; (8006c18 <HAL_UART_RxCpltCallback+0x2c4>)
 8006bb0:	f002 fff5 	bl	8009b9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    }
    
    HAL_UART_Receive_IT(&huart1, reinterpret_cast<uint8_t*>(receivedCommandBuffer), COMMAND_LENGTH);
 8006bb4:	223c      	movs	r2, #60	; 0x3c
 8006bb6:	4916      	ldr	r1, [pc, #88]	; (8006c10 <HAL_UART_RxCpltCallback+0x2bc>)
 8006bb8:	4813      	ldr	r0, [pc, #76]	; (8006c08 <HAL_UART_RxCpltCallback+0x2b4>)
 8006bba:	f7fc fd03 	bl	80035c4 <HAL_UART_Receive_IT>
    vector<string> extractedArguments;
 8006bbe:	f107 030c 	add.w	r3, r7, #12
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fc3a 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    
    ProcessReceivedData(uartPacketReceived);
    
    HAL_UART_Receive_IT(&huart6, static_cast<uint8_t*>(uartPacketReceived), PACKET_SIZE);
  }
}
 8006bc8:	e01a      	b.n	8006c00 <HAL_UART_RxCpltCallback+0x2ac>
  else if(huart == &huart6)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2e      	ldr	r2, [pc, #184]	; (8006c88 <HAL_UART_RxCpltCallback+0x334>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d116      	bne.n	8006c00 <HAL_UART_RxCpltCallback+0x2ac>
    printf("\n-----------------Received data from Touch Panel STM32F469\n");   
 8006bd2:	482e      	ldr	r0, [pc, #184]	; (8006c8c <HAL_UART_RxCpltCallback+0x338>)
 8006bd4:	f004 fde8 	bl	800b7a8 <puts>
    ProcessReceivedData(uartPacketReceived);
 8006bd8:	482d      	ldr	r0, [pc, #180]	; (8006c90 <HAL_UART_RxCpltCallback+0x33c>)
 8006bda:	f7ff fe2d 	bl	8006838 <_Z19ProcessReceivedDataR10UartPacket>
    HAL_UART_Receive_IT(&huart6, static_cast<uint8_t*>(uartPacketReceived), PACKET_SIZE);
 8006bde:	482c      	ldr	r0, [pc, #176]	; (8006c90 <HAL_UART_RxCpltCallback+0x33c>)
 8006be0:	f000 ffc0 	bl	8007b64 <_ZN10UartPacketcvPhEv>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2214      	movs	r2, #20
 8006be8:	4619      	mov	r1, r3
 8006bea:	4827      	ldr	r0, [pc, #156]	; (8006c88 <HAL_UART_RxCpltCallback+0x334>)
 8006bec:	f7fc fcea 	bl	80035c4 <HAL_UART_Receive_IT>
}
 8006bf0:	e006      	b.n	8006c00 <HAL_UART_RxCpltCallback+0x2ac>
    vector<string> extractedArguments;
 8006bf2:	f107 030c 	add.w	r3, r7, #12
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fc20 	bl	800543c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8006bfc:	f002 f863 	bl	8008cc6 <__cxa_end_cleanup>
}
 8006c00:	bf00      	nop
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20000718 	.word	0x20000718
 8006c0c:	0800e820 	.word	0x0800e820
 8006c10:	20000850 	.word	0x20000850
 8006c14:	0800e864 	.word	0x0800e864
 8006c18:	2000088c 	.word	0x2000088c
 8006c1c:	0800e874 	.word	0x0800e874
 8006c20:	0800e880 	.word	0x0800e880
 8006c24:	0800e89c 	.word	0x0800e89c
 8006c28:	0800e8ac 	.word	0x0800e8ac
 8006c2c:	0800e8cc 	.word	0x0800e8cc
 8006c30:	0800e8dc 	.word	0x0800e8dc
 8006c34:	0800e8fc 	.word	0x0800e8fc
 8006c38:	0800e90c 	.word	0x0800e90c
 8006c3c:	0800e92c 	.word	0x0800e92c
 8006c40:	0800e93c 	.word	0x0800e93c
 8006c44:	0800e95c 	.word	0x0800e95c
 8006c48:	0800e96c 	.word	0x0800e96c
 8006c4c:	0800e98c 	.word	0x0800e98c
 8006c50:	0800e998 	.word	0x0800e998
 8006c54:	0800e9b4 	.word	0x0800e9b4
 8006c58:	0800e9c4 	.word	0x0800e9c4
 8006c5c:	0800e9e4 	.word	0x0800e9e4
 8006c60:	0800e9f4 	.word	0x0800e9f4
 8006c64:	0800ea14 	.word	0x0800ea14
 8006c68:	0800ea24 	.word	0x0800ea24
 8006c6c:	0800ea44 	.word	0x0800ea44
 8006c70:	0800ea4c 	.word	0x0800ea4c
 8006c74:	0800ea64 	.word	0x0800ea64
 8006c78:	0800ea6c 	.word	0x0800ea6c
 8006c7c:	0800ea84 	.word	0x0800ea84
 8006c80:	0800ea90 	.word	0x0800ea90
 8006c84:	0800eaac 	.word	0x0800eaac
 8006c88:	20000798 	.word	0x20000798
 8006c8c:	0800ead4 	.word	0x0800ead4
 8006c90:	200007d8 	.word	0x200007d8

08006c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c98:	f7fb f8a8 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c9c:	f000 f82c 	bl	8006cf8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ca0:	f000 f9bc 	bl	800701c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8006ca4:	f000 f89a 	bl	8006ddc <_ZL12MX_ADC1_Initv>
  MX_USART1_UART_Init();
 8006ca8:	f000 f92e 	bl	8006f08 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 8006cac:	f000 f988 	bl	8006fc0 <_ZL19MX_USART6_UART_Initv>
  MX_USART2_UART_Init();
 8006cb0:	f000 f958 	bl	8006f64 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  
  HAL_UART_Receive_IT(&huart1, reinterpret_cast<uint8_t*>(receivedCommandBuffer), COMMAND_LENGTH);
 8006cb4:	223c      	movs	r2, #60	; 0x3c
 8006cb6:	490a      	ldr	r1, [pc, #40]	; (8006ce0 <main+0x4c>)
 8006cb8:	480a      	ldr	r0, [pc, #40]	; (8006ce4 <main+0x50>)
 8006cba:	f7fc fc83 	bl	80035c4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, static_cast<uint8_t*>(uartPacketReceived), PACKET_SIZE);
 8006cbe:	480a      	ldr	r0, [pc, #40]	; (8006ce8 <main+0x54>)
 8006cc0:	f000 ff50 	bl	8007b64 <_ZN10UartPacketcvPhEv>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2214      	movs	r2, #20
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4808      	ldr	r0, [pc, #32]	; (8006cec <main+0x58>)
 8006ccc:	f7fc fc7a 	bl	80035c4 <HAL_UART_Receive_IT>
  
  HAL_ADC_Start(&hadc1);
 8006cd0:	4807      	ldr	r0, [pc, #28]	; (8006cf0 <main+0x5c>)
 8006cd2:	f7fb f963 	bl	8001f9c <HAL_ADC_Start>
  
  printf("System initialized\n");
 8006cd6:	4807      	ldr	r0, [pc, #28]	; (8006cf4 <main+0x60>)
 8006cd8:	f004 fd66 	bl	800b7a8 <puts>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006cdc:	e7fe      	b.n	8006cdc <main+0x48>
 8006cde:	bf00      	nop
 8006ce0:	20000850 	.word	0x20000850
 8006ce4:	20000718 	.word	0x20000718
 8006ce8:	200007d8 	.word	0x200007d8
 8006cec:	20000798 	.word	0x20000798
 8006cf0:	20000808 	.word	0x20000808
 8006cf4:	0800eb10 	.word	0x0800eb10

08006cf8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b094      	sub	sp, #80	; 0x50
 8006cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006cfe:	f107 0320 	add.w	r3, r7, #32
 8006d02:	2230      	movs	r2, #48	; 0x30
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f004 fc15 	bl	800b536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d0c:	f107 030c 	add.w	r3, r7, #12
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	609a      	str	r2, [r3, #8]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	4b2c      	ldr	r3, [pc, #176]	; (8006dd4 <_Z18SystemClock_Configv+0xdc>)
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <_Z18SystemClock_Configv+0xdc>)
 8006d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d2c:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <_Z18SystemClock_Configv+0xdc>)
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	607b      	str	r3, [r7, #4]
 8006d3c:	4b26      	ldr	r3, [pc, #152]	; (8006dd8 <_Z18SystemClock_Configv+0xe0>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a25      	ldr	r2, [pc, #148]	; (8006dd8 <_Z18SystemClock_Configv+0xe0>)
 8006d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	4b23      	ldr	r3, [pc, #140]	; (8006dd8 <_Z18SystemClock_Configv+0xe0>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006d54:	2302      	movs	r3, #2
 8006d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d60:	2302      	movs	r3, #2
 8006d62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006d64:	2300      	movs	r3, #0
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006d68:	2308      	movs	r3, #8
 8006d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8006d6c:	2364      	movs	r3, #100	; 0x64
 8006d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006d70:	2302      	movs	r3, #2
 8006d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006d74:	2304      	movs	r3, #4
 8006d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d78:	f107 0320 	add.w	r3, r7, #32
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fb fed9 	bl	8002b34 <HAL_RCC_OscConfig>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bf14      	ite	ne
 8006d88:	2301      	movne	r3, #1
 8006d8a:	2300      	moveq	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8006d92:	f000 f9b3 	bl	80070fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d96:	230f      	movs	r3, #15
 8006d98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006dac:	f107 030c 	add.w	r3, r7, #12
 8006db0:	2103      	movs	r1, #3
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fc f92e 	bl	8003014 <HAL_RCC_ClockConfig>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bf14      	ite	ne
 8006dbe:	2301      	movne	r3, #1
 8006dc0:	2300      	moveq	r3, #0
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8006dc8:	f000 f998 	bl	80070fc <Error_Handler>
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3750      	adds	r7, #80	; 0x50
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	40007000 	.word	0x40007000

08006ddc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006de2:	463b      	mov	r3, r7
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	605a      	str	r2, [r3, #4]
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8006dee:	4b43      	ldr	r3, [pc, #268]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006df0:	4a43      	ldr	r2, [pc, #268]	; (8006f00 <_ZL12MX_ADC1_Initv+0x124>)
 8006df2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006df4:	4b41      	ldr	r3, [pc, #260]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006dfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006dfc:	4b3f      	ldr	r3, [pc, #252]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006e02:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006e08:	4b3c      	ldr	r3, [pc, #240]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006e0e:	4b3b      	ldr	r3, [pc, #236]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006e16:	4b39      	ldr	r3, [pc, #228]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e1c:	4b37      	ldr	r3, [pc, #220]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e1e:	4a39      	ldr	r2, [pc, #228]	; (8006f04 <_ZL12MX_ADC1_Initv+0x128>)
 8006e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006e22:	4b36      	ldr	r3, [pc, #216]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8006e28:	4b34      	ldr	r3, [pc, #208]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006e2e:	4b33      	ldr	r3, [pc, #204]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006e36:	4b31      	ldr	r3, [pc, #196]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006e3c:	482f      	ldr	r0, [pc, #188]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e3e:	f7fb f869 	bl	8001f14 <HAL_ADC_Init>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bf14      	ite	ne
 8006e48:	2301      	movne	r3, #1
 8006e4a:	2300      	moveq	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8006e52:	f000 f953 	bl	80070fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e62:	463b      	mov	r3, r7
 8006e64:	4619      	mov	r1, r3
 8006e66:	4825      	ldr	r0, [pc, #148]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e68:	f7fb f94c 	bl	8002104 <HAL_ADC_ConfigChannel>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bf14      	ite	ne
 8006e72:	2301      	movne	r3, #1
 8006e74:	2300      	moveq	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8006e7c:	f000 f93e 	bl	80070fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006e80:	2301      	movs	r3, #1
 8006e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006e84:	2302      	movs	r3, #2
 8006e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e88:	463b      	mov	r3, r7
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	481b      	ldr	r0, [pc, #108]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006e8e:	f7fb f939 	bl	8002104 <HAL_ADC_ConfigChannel>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf14      	ite	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	2300      	moveq	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <_ZL12MX_ADC1_Initv+0xca>
  {
    Error_Handler();
 8006ea2:	f000 f92b 	bl	80070fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006ea6:	2304      	movs	r3, #4
 8006ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006eae:	463b      	mov	r3, r7
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4812      	ldr	r0, [pc, #72]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006eb4:	f7fb f926 	bl	8002104 <HAL_ADC_ConfigChannel>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bf14      	ite	ne
 8006ebe:	2301      	movne	r3, #1
 8006ec0:	2300      	moveq	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <_ZL12MX_ADC1_Initv+0xf0>
  {
    Error_Handler();
 8006ec8:	f000 f918 	bl	80070fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006ecc:	2306      	movs	r3, #6
 8006ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4808      	ldr	r0, [pc, #32]	; (8006efc <_ZL12MX_ADC1_Initv+0x120>)
 8006eda:	f7fb f913 	bl	8002104 <HAL_ADC_ConfigChannel>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bf14      	ite	ne
 8006ee4:	2301      	movne	r3, #1
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <_ZL12MX_ADC1_Initv+0x116>
  {
    Error_Handler();
 8006eee:	f000 f905 	bl	80070fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  
  /* USER CODE END ADC1_Init 2 */

}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000808 	.word	0x20000808
 8006f00:	40012000 	.word	0x40012000
 8006f04:	0f000001 	.word	0x0f000001

08006f08 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006f0c:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006f0e:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <_ZL19MX_USART1_UART_Initv+0x58>)
 8006f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006f12:	4b12      	ldr	r3, [pc, #72]	; (8006f5c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f1a:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f26:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f2c:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006f2e:	220c      	movs	r2, #12
 8006f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f32:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f38:	4b08      	ldr	r3, [pc, #32]	; (8006f5c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f3e:	4807      	ldr	r0, [pc, #28]	; (8006f5c <_ZL19MX_USART1_UART_Initv+0x54>)
 8006f40:	f7fc fa5a 	bl	80033f8 <HAL_UART_Init>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bf14      	ite	ne
 8006f4a:	2301      	movne	r3, #1
 8006f4c:	2300      	moveq	r3, #0
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8006f54:	f000 f8d2 	bl	80070fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  
  /* USER CODE END USART1_Init 2 */

}
 8006f58:	bf00      	nop
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20000718 	.word	0x20000718
 8006f60:	40011000 	.word	0x40011000

08006f64 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006f68:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006f6a:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <_ZL19MX_USART2_UART_Initv+0x58>)
 8006f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006f6e:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006f76:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006f88:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006f8a:	220c      	movs	r2, #12
 8006f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	; (8006fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f94:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006f9a:	4807      	ldr	r0, [pc, #28]	; (8006fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8006f9c:	f7fc fa2c 	bl	80033f8 <HAL_UART_Init>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bf14      	ite	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	2300      	moveq	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8006fb0:	f000 f8a4 	bl	80070fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  
  /* USER CODE END USART2_Init 2 */

}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000758 	.word	0x20000758
 8006fbc:	40004400 	.word	0x40004400

08006fc0 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
  
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006fc4:	4b13      	ldr	r3, [pc, #76]	; (8007014 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006fc6:	4a14      	ldr	r2, [pc, #80]	; (8007018 <_ZL19MX_USART6_UART_Initv+0x58>)
 8006fc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8006fca:	4b12      	ldr	r3, [pc, #72]	; (8007014 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006fd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006fd2:	4b10      	ldr	r3, [pc, #64]	; (8007014 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006fd8:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006fde:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006fe6:	220c      	movs	r2, #12
 8006fe8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fea:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ff0:	4b08      	ldr	r3, [pc, #32]	; (8007014 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006ff6:	4807      	ldr	r0, [pc, #28]	; (8007014 <_ZL19MX_USART6_UART_Initv+0x54>)
 8006ff8:	f7fc f9fe 	bl	80033f8 <HAL_UART_Init>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf14      	ite	ne
 8007002:	2301      	movne	r3, #1
 8007004:	2300      	moveq	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 800700c:	f000 f876 	bl	80070fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  
  /* USER CODE END USART6_Init 2 */

}
 8007010:	bf00      	nop
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000798 	.word	0x20000798
 8007018:	40011400 	.word	0x40011400

0800701c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007022:	f107 0314 	add.w	r3, r7, #20
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	605a      	str	r2, [r3, #4]
 800702c:	609a      	str	r2, [r3, #8]
 800702e:	60da      	str	r2, [r3, #12]
 8007030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	4a2c      	ldr	r2, [pc, #176]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 800703c:	f043 0304 	orr.w	r3, r3, #4
 8007040:	6313      	str	r3, [r2, #48]	; 0x30
 8007042:	4b2a      	ldr	r3, [pc, #168]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	4b26      	ldr	r3, [pc, #152]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	4a25      	ldr	r2, [pc, #148]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 8007058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705c:	6313      	str	r3, [r2, #48]	; 0x30
 800705e:	4b23      	ldr	r3, [pc, #140]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800706a:	2300      	movs	r3, #0
 800706c:	60bb      	str	r3, [r7, #8]
 800706e:	4b1f      	ldr	r3, [pc, #124]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 8007074:	f043 0301 	orr.w	r3, r3, #1
 8007078:	6313      	str	r3, [r2, #48]	; 0x30
 800707a:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	60bb      	str	r3, [r7, #8]
 8007084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007086:	2300      	movs	r3, #0
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	4b18      	ldr	r3, [pc, #96]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	4a17      	ldr	r2, [pc, #92]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 8007090:	f043 0302 	orr.w	r3, r3, #2
 8007094:	6313      	str	r3, [r2, #48]	; 0x30
 8007096:	4b15      	ldr	r3, [pc, #84]	; (80070ec <_ZL12MX_GPIO_Initv+0xd0>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80070a2:	2200      	movs	r2, #0
 80070a4:	2120      	movs	r1, #32
 80070a6:	4812      	ldr	r0, [pc, #72]	; (80070f0 <_ZL12MX_GPIO_Initv+0xd4>)
 80070a8:	f7fb fd10 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80070ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80070b2:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <_ZL12MX_GPIO_Initv+0xd8>)
 80070b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ba:	f107 0314 	add.w	r3, r7, #20
 80070be:	4619      	mov	r1, r3
 80070c0:	480d      	ldr	r0, [pc, #52]	; (80070f8 <_ZL12MX_GPIO_Initv+0xdc>)
 80070c2:	f7fb fb81 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80070c6:	2320      	movs	r3, #32
 80070c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070ca:	2301      	movs	r3, #1
 80070cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d2:	2300      	movs	r3, #0
 80070d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070d6:	f107 0314 	add.w	r3, r7, #20
 80070da:	4619      	mov	r1, r3
 80070dc:	4804      	ldr	r0, [pc, #16]	; (80070f0 <_ZL12MX_GPIO_Initv+0xd4>)
 80070de:	f7fb fb73 	bl	80027c8 <HAL_GPIO_Init>

}
 80070e2:	bf00      	nop
 80070e4:	3728      	adds	r7, #40	; 0x28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	40023800 	.word	0x40023800
 80070f0:	40020000 	.word	0x40020000
 80070f4:	10110000 	.word	0x10110000
 80070f8:	40020800 	.word	0x40020800

080070fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  
  /* USER CODE END Error_Handler_Debug */
}
 8007100:	bf00      	nop
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <_Z41__static_initialization_and_destruction_0ii>:
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d10a      	bne.n	8007132 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007122:	4293      	cmp	r3, r2
 8007124:	d105      	bne.n	8007132 <_Z41__static_initialization_and_destruction_0ii+0x26>
UartPacket uartPacketReceived;
 8007126:	480a      	ldr	r0, [pc, #40]	; (8007150 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8007128:	f000 fcca 	bl	8007ac0 <_ZN10UartPacketC1Ev>
string fullCommandBuffer;
 800712c:	4809      	ldr	r0, [pc, #36]	; (8007154 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800712e:	f002 fcea 	bl	8009b06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d107      	bne.n	8007148 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800713e:	4293      	cmp	r3, r2
 8007140:	d102      	bne.n	8007148 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8007142:	4804      	ldr	r0, [pc, #16]	; (8007154 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8007144:	f002 fd00 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	200007d8 	.word	0x200007d8
 8007154:	2000088c 	.word	0x2000088c

08007158 <_GLOBAL__sub_I_huart1>:
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
 800715c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007160:	2001      	movs	r0, #1
 8007162:	f7ff ffd3 	bl	800710c <_Z41__static_initialization_and_destruction_0ii>
 8007166:	bd80      	pop	{r7, pc}

08007168 <_GLOBAL__sub_D_huart1>:
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
 800716c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007170:	2000      	movs	r0, #0
 8007172:	f7ff ffcb 	bl	800710c <_Z41__static_initialization_and_destruction_0ii>
 8007176:	bd80      	pop	{r7, pc}

08007178 <_ZN6Module22EnableParameterByIndexEi>:
  
private:
  bool m_ParameterStates[PARAMETERS_COUNT] {false};
  double m_ParameterValues[PARAMETERS_COUNT] {0.0};
  
  void EnableParameterByIndex(int index) {m_ParameterStates[index] = true;}
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	4413      	add	r3, r2
 8007188:	2201      	movs	r2, #1
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <_ZN6Module23DisableParameterByIndexEi>:
  void DisableParameterByIndex(int index) {m_ParameterStates[index] = false;}
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	4413      	add	r3, r2
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <_ZN6Module19SetParameterByIndexEid>:
  void SetParameterByIndex(int index, double value) {m_ParameterValues[index] = value;}
 80071b8:	b490      	push	{r4, r7}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	ed87 0b00 	vstr	d0, [r7]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	3302      	adds	r3, #2
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	441a      	add	r2, r3
 80071d0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80071d4:	e9c2 3400 	strd	r3, r4, [r2]
 80071d8:	bf00      	nop
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc90      	pop	{r4, r7}
 80071e0:	4770      	bx	lr
	...

080071e4 <_ZN6Module15EnableParameterE9Parameter>:
#include "module.h"
#include <cstdio>

void Module::EnableParameter(Parameter parameter)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  switch(parameter)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	3b31      	subs	r3, #49	; 0x31
 80071f2:	2b30      	cmp	r3, #48	; 0x30
 80071f4:	f200 8098 	bhi.w	8007328 <_ZN6Module15EnableParameterE9Parameter+0x144>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <_ZN6Module15EnableParameterE9Parameter+0x1c>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	080072c5 	.word	0x080072c5
 8007204:	080072cf 	.word	0x080072cf
 8007208:	080072d9 	.word	0x080072d9
 800720c:	080072e3 	.word	0x080072e3
 8007210:	080072ed 	.word	0x080072ed
 8007214:	080072f7 	.word	0x080072f7
 8007218:	08007301 	.word	0x08007301
 800721c:	0800730b 	.word	0x0800730b
 8007220:	08007315 	.word	0x08007315
 8007224:	08007329 	.word	0x08007329
 8007228:	08007329 	.word	0x08007329
 800722c:	08007329 	.word	0x08007329
 8007230:	08007329 	.word	0x08007329
 8007234:	08007329 	.word	0x08007329
 8007238:	08007329 	.word	0x08007329
 800723c:	08007329 	.word	0x08007329
 8007240:	08007329 	.word	0x08007329
 8007244:	08007329 	.word	0x08007329
 8007248:	08007329 	.word	0x08007329
 800724c:	08007329 	.word	0x08007329
 8007250:	08007329 	.word	0x08007329
 8007254:	08007329 	.word	0x08007329
 8007258:	08007329 	.word	0x08007329
 800725c:	08007329 	.word	0x08007329
 8007260:	08007329 	.word	0x08007329
 8007264:	08007329 	.word	0x08007329
 8007268:	08007329 	.word	0x08007329
 800726c:	08007329 	.word	0x08007329
 8007270:	08007329 	.word	0x08007329
 8007274:	08007329 	.word	0x08007329
 8007278:	08007329 	.word	0x08007329
 800727c:	08007329 	.word	0x08007329
 8007280:	08007329 	.word	0x08007329
 8007284:	08007329 	.word	0x08007329
 8007288:	08007329 	.word	0x08007329
 800728c:	08007329 	.word	0x08007329
 8007290:	08007329 	.word	0x08007329
 8007294:	08007329 	.word	0x08007329
 8007298:	08007329 	.word	0x08007329
 800729c:	08007329 	.word	0x08007329
 80072a0:	08007329 	.word	0x08007329
 80072a4:	08007329 	.word	0x08007329
 80072a8:	08007329 	.word	0x08007329
 80072ac:	08007329 	.word	0x08007329
 80072b0:	08007329 	.word	0x08007329
 80072b4:	08007329 	.word	0x08007329
 80072b8:	08007329 	.word	0x08007329
 80072bc:	08007329 	.word	0x08007329
 80072c0:	0800731f 	.word	0x0800731f
  {
  case Parameter::PARAMETER1:
    EnableParameterByIndex(0);
 80072c4:	2100      	movs	r1, #0
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ff56 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 80072cc:	e02f      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER2:
    EnableParameterByIndex(1);
 80072ce:	2101      	movs	r1, #1
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ff51 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 80072d6:	e02a      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER3:
    EnableParameterByIndex(2);
 80072d8:	2102      	movs	r1, #2
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff ff4c 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 80072e0:	e025      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER4:
    EnableParameterByIndex(3);
 80072e2:	2103      	movs	r1, #3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff ff47 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 80072ea:	e020      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER5:
    EnableParameterByIndex(4);
 80072ec:	2104      	movs	r1, #4
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff ff42 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 80072f4:	e01b      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER6:
    EnableParameterByIndex(5);
 80072f6:	2105      	movs	r1, #5
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff ff3d 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 80072fe:	e016      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER7:
    EnableParameterByIndex(6);
 8007300:	2106      	movs	r1, #6
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ff38 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 8007308:	e011      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER8:
    EnableParameterByIndex(7);
 800730a:	2107      	movs	r1, #7
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ff33 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 8007312:	e00c      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER9:
    EnableParameterByIndex(8);
 8007314:	2108      	movs	r1, #8
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ff2e 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800731c:	e007      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER10:
    EnableParameterByIndex(9);
 800731e:	2109      	movs	r1, #9
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ff29 	bl	8007178 <_ZN6Module22EnableParameterByIndexEi>
    break;
 8007326:	e002      	b.n	800732e <_ZN6Module15EnableParameterE9Parameter+0x14a>
  default:
    printf("Wrong parameter number\n");
 8007328:	4803      	ldr	r0, [pc, #12]	; (8007338 <_ZN6Module15EnableParameterE9Parameter+0x154>)
 800732a:	f004 fa3d 	bl	800b7a8 <puts>
  }
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	0800eb24 	.word	0x0800eb24

0800733c <_ZN6Module16DisableParameterE9Parameter>:

void Module::DisableParameter(Parameter parameter)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  switch(parameter)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	3b31      	subs	r3, #49	; 0x31
 800734a:	2b30      	cmp	r3, #48	; 0x30
 800734c:	f200 8098 	bhi.w	8007480 <_ZN6Module16DisableParameterE9Parameter+0x144>
 8007350:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <_ZN6Module16DisableParameterE9Parameter+0x1c>)
 8007352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007356:	bf00      	nop
 8007358:	0800741d 	.word	0x0800741d
 800735c:	08007427 	.word	0x08007427
 8007360:	08007431 	.word	0x08007431
 8007364:	0800743b 	.word	0x0800743b
 8007368:	08007445 	.word	0x08007445
 800736c:	0800744f 	.word	0x0800744f
 8007370:	08007459 	.word	0x08007459
 8007374:	08007463 	.word	0x08007463
 8007378:	0800746d 	.word	0x0800746d
 800737c:	08007481 	.word	0x08007481
 8007380:	08007481 	.word	0x08007481
 8007384:	08007481 	.word	0x08007481
 8007388:	08007481 	.word	0x08007481
 800738c:	08007481 	.word	0x08007481
 8007390:	08007481 	.word	0x08007481
 8007394:	08007481 	.word	0x08007481
 8007398:	08007481 	.word	0x08007481
 800739c:	08007481 	.word	0x08007481
 80073a0:	08007481 	.word	0x08007481
 80073a4:	08007481 	.word	0x08007481
 80073a8:	08007481 	.word	0x08007481
 80073ac:	08007481 	.word	0x08007481
 80073b0:	08007481 	.word	0x08007481
 80073b4:	08007481 	.word	0x08007481
 80073b8:	08007481 	.word	0x08007481
 80073bc:	08007481 	.word	0x08007481
 80073c0:	08007481 	.word	0x08007481
 80073c4:	08007481 	.word	0x08007481
 80073c8:	08007481 	.word	0x08007481
 80073cc:	08007481 	.word	0x08007481
 80073d0:	08007481 	.word	0x08007481
 80073d4:	08007481 	.word	0x08007481
 80073d8:	08007481 	.word	0x08007481
 80073dc:	08007481 	.word	0x08007481
 80073e0:	08007481 	.word	0x08007481
 80073e4:	08007481 	.word	0x08007481
 80073e8:	08007481 	.word	0x08007481
 80073ec:	08007481 	.word	0x08007481
 80073f0:	08007481 	.word	0x08007481
 80073f4:	08007481 	.word	0x08007481
 80073f8:	08007481 	.word	0x08007481
 80073fc:	08007481 	.word	0x08007481
 8007400:	08007481 	.word	0x08007481
 8007404:	08007481 	.word	0x08007481
 8007408:	08007481 	.word	0x08007481
 800740c:	08007481 	.word	0x08007481
 8007410:	08007481 	.word	0x08007481
 8007414:	08007481 	.word	0x08007481
 8007418:	08007477 	.word	0x08007477
  {
  case Parameter::PARAMETER1:
    DisableParameterByIndex(0);
 800741c:	2100      	movs	r1, #0
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff feba 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 8007424:	e02f      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER2:
    DisableParameterByIndex(1);
 8007426:	2101      	movs	r1, #1
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff feb5 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800742e:	e02a      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER3:
    DisableParameterByIndex(2);
 8007430:	2102      	movs	r1, #2
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff feb0 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 8007438:	e025      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER4:
    DisableParameterByIndex(3);
 800743a:	2103      	movs	r1, #3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff feab 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 8007442:	e020      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER5:
    DisableParameterByIndex(4);
 8007444:	2104      	movs	r1, #4
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fea6 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800744c:	e01b      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER6:
    DisableParameterByIndex(5);
 800744e:	2105      	movs	r1, #5
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fea1 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 8007456:	e016      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER7:
    DisableParameterByIndex(6);
 8007458:	2106      	movs	r1, #6
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fe9c 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 8007460:	e011      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER8:
    DisableParameterByIndex(7);
 8007462:	2107      	movs	r1, #7
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff fe97 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800746a:	e00c      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER9:
    DisableParameterByIndex(8);
 800746c:	2108      	movs	r1, #8
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff fe92 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 8007474:	e007      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER10:
    DisableParameterByIndex(9);
 8007476:	2109      	movs	r1, #9
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff fe8d 	bl	8007198 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800747e:	e002      	b.n	8007486 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  default:
    printf("Wrong parameter number\n");
 8007480:	4803      	ldr	r0, [pc, #12]	; (8007490 <_ZN6Module16DisableParameterE9Parameter+0x154>)
 8007482:	f004 f991 	bl	800b7a8 <puts>
  }
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	0800eb24 	.word	0x0800eb24

08007494 <_ZN6Module12SetParameterE9Parameterd>:

void Module::SetParameter(Parameter parameter, double value)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	ed87 0b00 	vstr	d0, [r7]
  switch(parameter)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3b31      	subs	r3, #49	; 0x31
 80074a6:	2b30      	cmp	r3, #48	; 0x30
 80074a8:	f200 80ac 	bhi.w	8007604 <_ZN6Module12SetParameterE9Parameterd+0x170>
 80074ac:	a201      	add	r2, pc, #4	; (adr r2, 80074b4 <_ZN6Module12SetParameterE9Parameterd+0x20>)
 80074ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b2:	bf00      	nop
 80074b4:	08007579 	.word	0x08007579
 80074b8:	08007587 	.word	0x08007587
 80074bc:	08007595 	.word	0x08007595
 80074c0:	080075a3 	.word	0x080075a3
 80074c4:	080075b1 	.word	0x080075b1
 80074c8:	080075bf 	.word	0x080075bf
 80074cc:	080075cd 	.word	0x080075cd
 80074d0:	080075db 	.word	0x080075db
 80074d4:	080075e9 	.word	0x080075e9
 80074d8:	08007605 	.word	0x08007605
 80074dc:	08007605 	.word	0x08007605
 80074e0:	08007605 	.word	0x08007605
 80074e4:	08007605 	.word	0x08007605
 80074e8:	08007605 	.word	0x08007605
 80074ec:	08007605 	.word	0x08007605
 80074f0:	08007605 	.word	0x08007605
 80074f4:	08007605 	.word	0x08007605
 80074f8:	08007605 	.word	0x08007605
 80074fc:	08007605 	.word	0x08007605
 8007500:	08007605 	.word	0x08007605
 8007504:	08007605 	.word	0x08007605
 8007508:	08007605 	.word	0x08007605
 800750c:	08007605 	.word	0x08007605
 8007510:	08007605 	.word	0x08007605
 8007514:	08007605 	.word	0x08007605
 8007518:	08007605 	.word	0x08007605
 800751c:	08007605 	.word	0x08007605
 8007520:	08007605 	.word	0x08007605
 8007524:	08007605 	.word	0x08007605
 8007528:	08007605 	.word	0x08007605
 800752c:	08007605 	.word	0x08007605
 8007530:	08007605 	.word	0x08007605
 8007534:	08007605 	.word	0x08007605
 8007538:	08007605 	.word	0x08007605
 800753c:	08007605 	.word	0x08007605
 8007540:	08007605 	.word	0x08007605
 8007544:	08007605 	.word	0x08007605
 8007548:	08007605 	.word	0x08007605
 800754c:	08007605 	.word	0x08007605
 8007550:	08007605 	.word	0x08007605
 8007554:	08007605 	.word	0x08007605
 8007558:	08007605 	.word	0x08007605
 800755c:	08007605 	.word	0x08007605
 8007560:	08007605 	.word	0x08007605
 8007564:	08007605 	.word	0x08007605
 8007568:	08007605 	.word	0x08007605
 800756c:	08007605 	.word	0x08007605
 8007570:	08007605 	.word	0x08007605
 8007574:	080075f7 	.word	0x080075f7
  {
  case Parameter::PARAMETER1:
    SetParameterByIndex(0, value);
 8007578:	ed97 0b00 	vldr	d0, [r7]
 800757c:	2100      	movs	r1, #0
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff fe1a 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 8007584:	e041      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER2:
    SetParameterByIndex(1, value);
 8007586:	ed97 0b00 	vldr	d0, [r7]
 800758a:	2101      	movs	r1, #1
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff fe13 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 8007592:	e03a      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER3:
    SetParameterByIndex(2, value);
 8007594:	ed97 0b00 	vldr	d0, [r7]
 8007598:	2102      	movs	r1, #2
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff fe0c 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 80075a0:	e033      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER4:
    SetParameterByIndex(3, value);
 80075a2:	ed97 0b00 	vldr	d0, [r7]
 80075a6:	2103      	movs	r1, #3
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f7ff fe05 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 80075ae:	e02c      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER5:
    SetParameterByIndex(4, value);
 80075b0:	ed97 0b00 	vldr	d0, [r7]
 80075b4:	2104      	movs	r1, #4
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fdfe 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 80075bc:	e025      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER6:
    SetParameterByIndex(5, value);
 80075be:	ed97 0b00 	vldr	d0, [r7]
 80075c2:	2105      	movs	r1, #5
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7ff fdf7 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 80075ca:	e01e      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER7:
    SetParameterByIndex(6, value);
 80075cc:	ed97 0b00 	vldr	d0, [r7]
 80075d0:	2106      	movs	r1, #6
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7ff fdf0 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 80075d8:	e017      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER8:
    SetParameterByIndex(7, value);
 80075da:	ed97 0b00 	vldr	d0, [r7]
 80075de:	2107      	movs	r1, #7
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f7ff fde9 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 80075e6:	e010      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER9:
    SetParameterByIndex(8, value);
 80075e8:	ed97 0b00 	vldr	d0, [r7]
 80075ec:	2108      	movs	r1, #8
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff fde2 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 80075f4:	e009      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER10:
    SetParameterByIndex(9, value);
 80075f6:	ed97 0b00 	vldr	d0, [r7]
 80075fa:	2109      	movs	r1, #9
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fddb 	bl	80071b8 <_ZN6Module19SetParameterByIndexEid>
    break;
 8007602:	e002      	b.n	800760a <_ZN6Module12SetParameterE9Parameterd+0x176>
  default:
    printf("Wrong parameter number\n");
 8007604:	4803      	ldr	r0, [pc, #12]	; (8007614 <_ZN6Module12SetParameterE9Parameterd+0x180>)
 8007606:	f004 f8cf 	bl	800b7a8 <puts>
  }
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	0800eb24 	.word	0x0800eb24

08007618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	4b10      	ldr	r3, [pc, #64]	; (8007664 <HAL_MspInit+0x4c>)
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	4a0f      	ldr	r2, [pc, #60]	; (8007664 <HAL_MspInit+0x4c>)
 8007628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800762c:	6453      	str	r3, [r2, #68]	; 0x44
 800762e:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <HAL_MspInit+0x4c>)
 8007630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007636:	607b      	str	r3, [r7, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800763a:	2300      	movs	r3, #0
 800763c:	603b      	str	r3, [r7, #0]
 800763e:	4b09      	ldr	r3, [pc, #36]	; (8007664 <HAL_MspInit+0x4c>)
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	4a08      	ldr	r2, [pc, #32]	; (8007664 <HAL_MspInit+0x4c>)
 8007644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007648:	6413      	str	r3, [r2, #64]	; 0x40
 800764a:	4b06      	ldr	r3, [pc, #24]	; (8007664 <HAL_MspInit+0x4c>)
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8007656:	2006      	movs	r0, #6
 8007658:	f7fb f852 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40023800 	.word	0x40023800

08007668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08a      	sub	sp, #40	; 0x28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007670:	f107 0314 	add.w	r3, r7, #20
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	605a      	str	r2, [r3, #4]
 800767a:	609a      	str	r2, [r3, #8]
 800767c:	60da      	str	r2, [r3, #12]
 800767e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a17      	ldr	r2, [pc, #92]	; (80076e4 <HAL_ADC_MspInit+0x7c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d127      	bne.n	80076da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	4b16      	ldr	r3, [pc, #88]	; (80076e8 <HAL_ADC_MspInit+0x80>)
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	4a15      	ldr	r2, [pc, #84]	; (80076e8 <HAL_ADC_MspInit+0x80>)
 8007694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007698:	6453      	str	r3, [r2, #68]	; 0x44
 800769a:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <HAL_ADC_MspInit+0x80>)
 800769c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <HAL_ADC_MspInit+0x80>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	4a0e      	ldr	r2, [pc, #56]	; (80076e8 <HAL_ADC_MspInit+0x80>)
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	6313      	str	r3, [r2, #48]	; 0x30
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <HAL_ADC_MspInit+0x80>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 80076c2:	2353      	movs	r3, #83	; 0x53
 80076c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80076c6:	2303      	movs	r3, #3
 80076c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076ce:	f107 0314 	add.w	r3, r7, #20
 80076d2:	4619      	mov	r1, r3
 80076d4:	4805      	ldr	r0, [pc, #20]	; (80076ec <HAL_ADC_MspInit+0x84>)
 80076d6:	f7fb f877 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80076da:	bf00      	nop
 80076dc:	3728      	adds	r7, #40	; 0x28
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	40012000 	.word	0x40012000
 80076e8:	40023800 	.word	0x40023800
 80076ec:	40020000 	.word	0x40020000

080076f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08e      	sub	sp, #56	; 0x38
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	605a      	str	r2, [r3, #4]
 8007702:	609a      	str	r2, [r3, #8]
 8007704:	60da      	str	r2, [r3, #12]
 8007706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a53      	ldr	r2, [pc, #332]	; (800785c <HAL_UART_MspInit+0x16c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d135      	bne.n	800777e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007712:	2300      	movs	r3, #0
 8007714:	623b      	str	r3, [r7, #32]
 8007716:	4b52      	ldr	r3, [pc, #328]	; (8007860 <HAL_UART_MspInit+0x170>)
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	4a51      	ldr	r2, [pc, #324]	; (8007860 <HAL_UART_MspInit+0x170>)
 800771c:	f043 0310 	orr.w	r3, r3, #16
 8007720:	6453      	str	r3, [r2, #68]	; 0x44
 8007722:	4b4f      	ldr	r3, [pc, #316]	; (8007860 <HAL_UART_MspInit+0x170>)
 8007724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	623b      	str	r3, [r7, #32]
 800772c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	4b4b      	ldr	r3, [pc, #300]	; (8007860 <HAL_UART_MspInit+0x170>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	4a4a      	ldr	r2, [pc, #296]	; (8007860 <HAL_UART_MspInit+0x170>)
 8007738:	f043 0301 	orr.w	r3, r3, #1
 800773c:	6313      	str	r3, [r2, #48]	; 0x30
 800773e:	4b48      	ldr	r3, [pc, #288]	; (8007860 <HAL_UART_MspInit+0x170>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800774a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007750:	2302      	movs	r3, #2
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007754:	2300      	movs	r3, #0
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007758:	2303      	movs	r3, #3
 800775a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800775c:	2307      	movs	r3, #7
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007764:	4619      	mov	r1, r3
 8007766:	483f      	ldr	r0, [pc, #252]	; (8007864 <HAL_UART_MspInit+0x174>)
 8007768:	f7fb f82e 	bl	80027c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800776c:	2200      	movs	r2, #0
 800776e:	2101      	movs	r1, #1
 8007770:	2025      	movs	r0, #37	; 0x25
 8007772:	f7fa ffd0 	bl	8002716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007776:	2025      	movs	r0, #37	; 0x25
 8007778:	f7fa ffe9 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800777c:	e06a      	b.n	8007854 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a39      	ldr	r2, [pc, #228]	; (8007868 <HAL_UART_MspInit+0x178>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d12c      	bne.n	80077e2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007788:	2300      	movs	r3, #0
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	4b34      	ldr	r3, [pc, #208]	; (8007860 <HAL_UART_MspInit+0x170>)
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	4a33      	ldr	r2, [pc, #204]	; (8007860 <HAL_UART_MspInit+0x170>)
 8007792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007796:	6413      	str	r3, [r2, #64]	; 0x40
 8007798:	4b31      	ldr	r3, [pc, #196]	; (8007860 <HAL_UART_MspInit+0x170>)
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a0:	61bb      	str	r3, [r7, #24]
 80077a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	4b2d      	ldr	r3, [pc, #180]	; (8007860 <HAL_UART_MspInit+0x170>)
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	4a2c      	ldr	r2, [pc, #176]	; (8007860 <HAL_UART_MspInit+0x170>)
 80077ae:	f043 0301 	orr.w	r3, r3, #1
 80077b2:	6313      	str	r3, [r2, #48]	; 0x30
 80077b4:	4b2a      	ldr	r3, [pc, #168]	; (8007860 <HAL_UART_MspInit+0x170>)
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80077c0:	230c      	movs	r3, #12
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c4:	2302      	movs	r3, #2
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077cc:	2303      	movs	r3, #3
 80077ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80077d0:	2307      	movs	r3, #7
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077d8:	4619      	mov	r1, r3
 80077da:	4822      	ldr	r0, [pc, #136]	; (8007864 <HAL_UART_MspInit+0x174>)
 80077dc:	f7fa fff4 	bl	80027c8 <HAL_GPIO_Init>
}
 80077e0:	e038      	b.n	8007854 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a21      	ldr	r2, [pc, #132]	; (800786c <HAL_UART_MspInit+0x17c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d133      	bne.n	8007854 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 80077ec:	2300      	movs	r3, #0
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	4b1b      	ldr	r3, [pc, #108]	; (8007860 <HAL_UART_MspInit+0x170>)
 80077f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f4:	4a1a      	ldr	r2, [pc, #104]	; (8007860 <HAL_UART_MspInit+0x170>)
 80077f6:	f043 0320 	orr.w	r3, r3, #32
 80077fa:	6453      	str	r3, [r2, #68]	; 0x44
 80077fc:	4b18      	ldr	r3, [pc, #96]	; (8007860 <HAL_UART_MspInit+0x170>)
 80077fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	4b14      	ldr	r3, [pc, #80]	; (8007860 <HAL_UART_MspInit+0x170>)
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	4a13      	ldr	r2, [pc, #76]	; (8007860 <HAL_UART_MspInit+0x170>)
 8007812:	f043 0304 	orr.w	r3, r3, #4
 8007816:	6313      	str	r3, [r2, #48]	; 0x30
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <HAL_UART_MspInit+0x170>)
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007824:	23c0      	movs	r3, #192	; 0xc0
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007828:	2302      	movs	r3, #2
 800782a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800782c:	2300      	movs	r3, #0
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007830:	2303      	movs	r3, #3
 8007832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007834:	2308      	movs	r3, #8
 8007836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800783c:	4619      	mov	r1, r3
 800783e:	480c      	ldr	r0, [pc, #48]	; (8007870 <HAL_UART_MspInit+0x180>)
 8007840:	f7fa ffc2 	bl	80027c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8007844:	2200      	movs	r2, #0
 8007846:	2101      	movs	r1, #1
 8007848:	2047      	movs	r0, #71	; 0x47
 800784a:	f7fa ff64 	bl	8002716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800784e:	2047      	movs	r0, #71	; 0x47
 8007850:	f7fa ff7d 	bl	800274e <HAL_NVIC_EnableIRQ>
}
 8007854:	bf00      	nop
 8007856:	3738      	adds	r7, #56	; 0x38
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40011000 	.word	0x40011000
 8007860:	40023800 	.word	0x40023800
 8007864:	40020000 	.word	0x40020000
 8007868:	40004400 	.word	0x40004400
 800786c:	40011400 	.word	0x40011400
 8007870:	40020800 	.word	0x40020800

08007874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007878:	bf00      	nop
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007882:	b480      	push	{r7}
 8007884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007886:	e7fe      	b.n	8007886 <HardFault_Handler+0x4>

08007888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800788c:	e7fe      	b.n	800788c <MemManage_Handler+0x4>

0800788e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800788e:	b480      	push	{r7}
 8007890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007892:	e7fe      	b.n	8007892 <BusFault_Handler+0x4>

08007894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007898:	e7fe      	b.n	8007898 <UsageFault_Handler+0x4>

0800789a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800789a:	b480      	push	{r7}
 800789c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800789e:	bf00      	nop
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078b6:	b480      	push	{r7}
 80078b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078ba:	bf00      	nop
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078c8:	f7fa fae2 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078cc:	bf00      	nop
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80078d4:	4802      	ldr	r0, [pc, #8]	; (80078e0 <USART1_IRQHandler+0x10>)
 80078d6:	f7fb fecb 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80078da:	bf00      	nop
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000718 	.word	0x20000718

080078e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80078e8:	4802      	ldr	r0, [pc, #8]	; (80078f4 <USART6_IRQHandler+0x10>)
 80078ea:	f7fb fec1 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80078ee:	bf00      	nop
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000798 	.word	0x20000798

080078f8 <__io_putchar>:

char *__env[1] = { 0 };
char **environ = __env;

__attribute__((weak)) int __io_putchar(int ch)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8007900:	1d39      	adds	r1, r7, #4
 8007902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007906:	2201      	movs	r2, #1
 8007908:	4803      	ldr	r0, [pc, #12]	; (8007918 <__io_putchar+0x20>)
 800790a:	f7fb fdc2 	bl	8003492 <HAL_UART_Transmit>
    return ch;
 800790e:	687b      	ldr	r3, [r7, #4]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000758 	.word	0x20000758

0800791c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
	return 1;
 8007920:	2301      	movs	r3, #1
}
 8007922:	4618      	mov	r0, r3
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <_kill>:

int _kill(int pid, int sig)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007936:	f003 fbb3 	bl	800b0a0 <__errno>
 800793a:	4602      	mov	r2, r0
 800793c:	2316      	movs	r3, #22
 800793e:	6013      	str	r3, [r2, #0]
	return -1;
 8007940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <_exit>:

void _exit (int status)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007954:	f04f 31ff 	mov.w	r1, #4294967295
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff ffe7 	bl	800792c <_kill>
	while (1) {}		/* Make sure we hang here */
 800795e:	e7fe      	b.n	800795e <_exit+0x12>

08007960 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	e00a      	b.n	8007988 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007972:	f3af 8000 	nop.w
 8007976:	4601      	mov	r1, r0
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	60ba      	str	r2, [r7, #8]
 800797e:	b2ca      	uxtb	r2, r1
 8007980:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	3301      	adds	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	429a      	cmp	r2, r3
 800798e:	dbf0      	blt.n	8007972 <_read+0x12>
	}

return len;
 8007990:	687b      	ldr	r3, [r7, #4]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	e009      	b.n	80079c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	60ba      	str	r2, [r7, #8]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff ff9f 	bl	80078f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	3301      	adds	r3, #1
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	dbf1      	blt.n	80079ac <_write+0x12>
	}
	return len;
 80079c8:	687b      	ldr	r3, [r7, #4]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <_close>:

int _close(int file)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
	return -1;
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80079fa:	605a      	str	r2, [r3, #4]
	return 0;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <_isatty>:

int _isatty(int file)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
	return 1;
 8007a12:	2301      	movs	r3, #1
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a44:	4b11      	ldr	r3, [pc, #68]	; (8007a8c <_sbrk+0x50>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <_sbrk+0x16>
		heap_end = &end;
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <_sbrk+0x50>)
 8007a4e:	4a10      	ldr	r2, [pc, #64]	; (8007a90 <_sbrk+0x54>)
 8007a50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a52:	4b0e      	ldr	r3, [pc, #56]	; (8007a8c <_sbrk+0x50>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a58:	4b0c      	ldr	r3, [pc, #48]	; (8007a8c <_sbrk+0x50>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4413      	add	r3, r2
 8007a60:	466a      	mov	r2, sp
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d907      	bls.n	8007a76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a66:	f003 fb1b 	bl	800b0a0 <__errno>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295
 8007a74:	e006      	b.n	8007a84 <_sbrk+0x48>
	}

	heap_end += incr;
 8007a76:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <_sbrk+0x50>)
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	4a03      	ldr	r2, [pc, #12]	; (8007a8c <_sbrk+0x50>)
 8007a80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	200008a4 	.word	0x200008a4
 8007a90:	200008e8 	.word	0x200008e8

08007a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a98:	4b08      	ldr	r3, [pc, #32]	; (8007abc <SystemInit+0x28>)
 8007a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9e:	4a07      	ldr	r2, [pc, #28]	; (8007abc <SystemInit+0x28>)
 8007aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <SystemInit+0x28>)
 8007aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007aae:	609a      	str	r2, [r3, #8]
#endif
}
 8007ab0:	bf00      	nop
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	e000ed00 	.word	0xe000ed00

08007ac0 <_ZN10UartPacketC1Ev>:
int const CRC_BYTE1_POSITION = 19;
int const CRC_BYTE2_POSITION = 18;
int const CRC_BYTE3_POSITION = 17;
int const CRC_BYTE4_POSITION = 16;

UartPacket::UartPacket()
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	461a      	mov	r2, r3
 8007acc:	2300      	movs	r3, #0
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	6053      	str	r3, [r2, #4]
 8007ad2:	6093      	str	r3, [r2, #8]
 8007ad4:	60d3      	str	r3, [r2, #12]
 8007ad6:	6113      	str	r3, [r2, #16]
  void PrintPacket(bool withCrc = false) const;
  
private:
  std::array<uint8_t, PACKET_SIZE> m_PacketTable = {0};
  
  uint8_t& m_Source = m_PacketTable[0];
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fb50 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	615a      	str	r2, [r3, #20]
  uint8_t& m_Module = m_PacketTable[1];
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2101      	movs	r1, #1
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fb48 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 8007af2:	4602      	mov	r2, r0
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	619a      	str	r2, [r3, #24]
  uint8_t& m_Function = m_PacketTable[2];
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2102      	movs	r1, #2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fb40 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 8007b02:	4602      	mov	r2, r0
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	61da      	str	r2, [r3, #28]
  uint8_t& m_Parameter = m_PacketTable[3];
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2103      	movs	r1, #3
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fb38 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 8007b12:	4602      	mov	r2, r0
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	621a      	str	r2, [r3, #32]
  uint8_t& m_Sign = m_PacketTable[4];
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2104      	movs	r1, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fb30 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 8007b22:	4602      	mov	r2, r0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	625a      	str	r2, [r3, #36]	; 0x24
  uint8_t& m_Length = m_PacketTable[5];
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2105      	movs	r1, #5
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fb28 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 8007b32:	4602      	mov	r2, r0
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	629a      	str	r2, [r3, #40]	; 0x28
  uint8_t* m_Payload = &m_PacketTable[6];
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2106      	movs	r1, #6
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fb20 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 8007b42:	4602      	mov	r2, r0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	62da      	str	r2, [r3, #44]	; 0x2c
{
  m_PacketTable.fill(0);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	73fa      	strb	r2, [r7, #15]
 8007b4e:	f107 020f 	add.w	r2, r7, #15
 8007b52:	4611      	mov	r1, r2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fb2e 	bl	80081b6 <_ZNSt5arrayIhLj20EE4fillERKh>
}
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <_ZN10UartPacketcvPhEv>:
{  
  memcpy(m_PacketTable.data(), uartPacketTable, PACKET_SIZE);
}

UartPacket::operator uint8_t*()
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  return m_PacketTable.data();
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fb37 	bl	80081e2 <_ZNSt5arrayIhLj20EE4dataEv>
 8007b74:	4603      	mov	r3, r0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <_ZN10UartPacket9SetSourceE6Source>:

void UartPacket::SetSource(Source source)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  if(source == Source::SOURCE_TARGET1)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b31      	cmp	r3, #49	; 0x31
 8007b8c:	d103      	bne.n	8007b96 <_ZN10UartPacket9SetSourceE6Source+0x18>
  {
    m_Source = static_cast<uint8_t>(Source::SOURCE_TARGET1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	2231      	movs	r2, #49	; 0x31
 8007b94:	701a      	strb	r2, [r3, #0]
  }
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <_ZN10UartPacket9SetModuleEi>:
    m_Module = static_cast<uint8_t>(ModuleID::MODULE3);
  }
}

void UartPacket::SetModule(int module)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  m_Module = static_cast<uint8_t>(module) + '0';
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	3230      	adds	r2, #48	; 0x30
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <_ZN10UartPacket11SetFunctionE8Function>:

void UartPacket::SetFunction(Function function)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
  if(function == Function::DATA_PACKET)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b31      	cmp	r3, #49	; 0x31
 8007bd4:	d104      	bne.n	8007be0 <_ZN10UartPacket11SetFunctionE8Function+0x1a>
  {
    m_Function = static_cast<uint8_t>(Function::DATA_PACKET);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	2231      	movs	r2, #49	; 0x31
 8007bdc:	701a      	strb	r2, [r3, #0]
  }
  else if(function == Function::SET_GRAPH_TIME_RANGE)
  {
    m_Function = static_cast<uint8_t>(Function::SET_GRAPH_TIME_RANGE);
  }
}
 8007bde:	e03e      	b.n	8007c5e <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::INIT_PACKET)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b32      	cmp	r3, #50	; 0x32
 8007be4:	d104      	bne.n	8007bf0 <_ZN10UartPacket11SetFunctionE8Function+0x2a>
    m_Function = static_cast<uint8_t>(Function::INIT_PACKET);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	2232      	movs	r2, #50	; 0x32
 8007bec:	701a      	strb	r2, [r3, #0]
}
 8007bee:	e036      	b.n	8007c5e <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::DEINIT_PACKET)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b33      	cmp	r3, #51	; 0x33
 8007bf4:	d104      	bne.n	8007c00 <_ZN10UartPacket11SetFunctionE8Function+0x3a>
    m_Function = static_cast<uint8_t>(Function::DEINIT_PACKET);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	2233      	movs	r2, #51	; 0x33
 8007bfc:	701a      	strb	r2, [r3, #0]
}
 8007bfe:	e02e      	b.n	8007c5e <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::ENABLE_PARAMETER_PACKET)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b34      	cmp	r3, #52	; 0x34
 8007c04:	d104      	bne.n	8007c10 <_ZN10UartPacket11SetFunctionE8Function+0x4a>
    m_Function = static_cast<uint8_t>(Function::ENABLE_PARAMETER_PACKET);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	2234      	movs	r2, #52	; 0x34
 8007c0c:	701a      	strb	r2, [r3, #0]
}
 8007c0e:	e026      	b.n	8007c5e <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::DISABLE_PARAMETER_PACKET)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b35      	cmp	r3, #53	; 0x35
 8007c14:	d104      	bne.n	8007c20 <_ZN10UartPacket11SetFunctionE8Function+0x5a>
    m_Function = static_cast<uint8_t>(Function::DISABLE_PARAMETER_PACKET);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	2235      	movs	r2, #53	; 0x35
 8007c1c:	701a      	strb	r2, [r3, #0]
}
 8007c1e:	e01e      	b.n	8007c5e <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::SET_PARAMETER_PACKET)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b36      	cmp	r3, #54	; 0x36
 8007c24:	d104      	bne.n	8007c30 <_ZN10UartPacket11SetFunctionE8Function+0x6a>
    m_Function = static_cast<uint8_t>(Function::SET_PARAMETER_PACKET);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	2236      	movs	r2, #54	; 0x36
 8007c2c:	701a      	strb	r2, [r3, #0]
}
 8007c2e:	e016      	b.n	8007c5e <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::SET_GRAPH_RANGE_MIN)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b37      	cmp	r3, #55	; 0x37
 8007c34:	d104      	bne.n	8007c40 <_ZN10UartPacket11SetFunctionE8Function+0x7a>
    m_Function = static_cast<uint8_t>(Function::SET_GRAPH_RANGE_MIN);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	2237      	movs	r2, #55	; 0x37
 8007c3c:	701a      	strb	r2, [r3, #0]
}
 8007c3e:	e00e      	b.n	8007c5e <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::SET_GRAPH_RANGE_MAX)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b38      	cmp	r3, #56	; 0x38
 8007c44:	d104      	bne.n	8007c50 <_ZN10UartPacket11SetFunctionE8Function+0x8a>
    m_Function = static_cast<uint8_t>(Function::SET_GRAPH_RANGE_MAX);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	2238      	movs	r2, #56	; 0x38
 8007c4c:	701a      	strb	r2, [r3, #0]
}
 8007c4e:	e006      	b.n	8007c5e <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::SET_GRAPH_TIME_RANGE)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b39      	cmp	r3, #57	; 0x39
 8007c54:	d103      	bne.n	8007c5e <_ZN10UartPacket11SetFunctionE8Function+0x98>
    m_Function = static_cast<uint8_t>(Function::SET_GRAPH_TIME_RANGE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	2239      	movs	r2, #57	; 0x39
 8007c5c:	701a      	strb	r2, [r3, #0]
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <_ZN10UartPacket12SetParameterE9Parameter>:

void UartPacket::SetParameter(Parameter parameter)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
  if(parameter == Parameter::NULL_PARAMETER)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b30      	cmp	r3, #48	; 0x30
 8007c78:	d104      	bne.n	8007c84 <_ZN10UartPacket12SetParameterE9Parameter+0x1a>
  {
    m_Parameter = static_cast<uint8_t>(Parameter::NULL_PARAMETER);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	2230      	movs	r2, #48	; 0x30
 8007c80:	701a      	strb	r2, [r3, #0]
  }
  else if(parameter == Parameter::PARAMETER10)
  {
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER10);
  }
}
 8007c82:	e06e      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::GRAPH_PARAMETER1)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b62      	cmp	r3, #98	; 0x62
 8007c88:	d104      	bne.n	8007c94 <_ZN10UartPacket12SetParameterE9Parameter+0x2a>
    m_Parameter = static_cast<uint8_t>(Parameter::GRAPH_PARAMETER1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	2262      	movs	r2, #98	; 0x62
 8007c90:	701a      	strb	r2, [r3, #0]
}
 8007c92:	e066      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::GRAPH_PARAMETER2)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b63      	cmp	r3, #99	; 0x63
 8007c98:	d104      	bne.n	8007ca4 <_ZN10UartPacket12SetParameterE9Parameter+0x3a>
    m_Parameter = static_cast<uint8_t>(Parameter::GRAPH_PARAMETER2);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	2263      	movs	r2, #99	; 0x63
 8007ca0:	701a      	strb	r2, [r3, #0]
}
 8007ca2:	e05e      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::GRAPH_PARAMETER3)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b64      	cmp	r3, #100	; 0x64
 8007ca8:	d104      	bne.n	8007cb4 <_ZN10UartPacket12SetParameterE9Parameter+0x4a>
    m_Parameter = static_cast<uint8_t>(Parameter::GRAPH_PARAMETER3);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	2264      	movs	r2, #100	; 0x64
 8007cb0:	701a      	strb	r2, [r3, #0]
}
 8007cb2:	e056      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::GRAPH_PARAMETER4)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b65      	cmp	r3, #101	; 0x65
 8007cb8:	d104      	bne.n	8007cc4 <_ZN10UartPacket12SetParameterE9Parameter+0x5a>
    m_Parameter = static_cast<uint8_t>(Parameter::GRAPH_PARAMETER4);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	2265      	movs	r2, #101	; 0x65
 8007cc0:	701a      	strb	r2, [r3, #0]
}
 8007cc2:	e04e      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER1)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b31      	cmp	r3, #49	; 0x31
 8007cc8:	d104      	bne.n	8007cd4 <_ZN10UartPacket12SetParameterE9Parameter+0x6a>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER1);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	2231      	movs	r2, #49	; 0x31
 8007cd0:	701a      	strb	r2, [r3, #0]
}
 8007cd2:	e046      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER2)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b32      	cmp	r3, #50	; 0x32
 8007cd8:	d104      	bne.n	8007ce4 <_ZN10UartPacket12SetParameterE9Parameter+0x7a>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER2);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	2232      	movs	r2, #50	; 0x32
 8007ce0:	701a      	strb	r2, [r3, #0]
}
 8007ce2:	e03e      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER3)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b33      	cmp	r3, #51	; 0x33
 8007ce8:	d104      	bne.n	8007cf4 <_ZN10UartPacket12SetParameterE9Parameter+0x8a>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER3);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	2233      	movs	r2, #51	; 0x33
 8007cf0:	701a      	strb	r2, [r3, #0]
}
 8007cf2:	e036      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER4)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b34      	cmp	r3, #52	; 0x34
 8007cf8:	d104      	bne.n	8007d04 <_ZN10UartPacket12SetParameterE9Parameter+0x9a>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER4);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	2234      	movs	r2, #52	; 0x34
 8007d00:	701a      	strb	r2, [r3, #0]
}
 8007d02:	e02e      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER5)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b35      	cmp	r3, #53	; 0x35
 8007d08:	d104      	bne.n	8007d14 <_ZN10UartPacket12SetParameterE9Parameter+0xaa>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER5);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	2235      	movs	r2, #53	; 0x35
 8007d10:	701a      	strb	r2, [r3, #0]
}
 8007d12:	e026      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER6)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b36      	cmp	r3, #54	; 0x36
 8007d18:	d104      	bne.n	8007d24 <_ZN10UartPacket12SetParameterE9Parameter+0xba>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER6);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	2236      	movs	r2, #54	; 0x36
 8007d20:	701a      	strb	r2, [r3, #0]
}
 8007d22:	e01e      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER7)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b37      	cmp	r3, #55	; 0x37
 8007d28:	d104      	bne.n	8007d34 <_ZN10UartPacket12SetParameterE9Parameter+0xca>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER7);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	2237      	movs	r2, #55	; 0x37
 8007d30:	701a      	strb	r2, [r3, #0]
}
 8007d32:	e016      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER8)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b38      	cmp	r3, #56	; 0x38
 8007d38:	d104      	bne.n	8007d44 <_ZN10UartPacket12SetParameterE9Parameter+0xda>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER8);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	2238      	movs	r2, #56	; 0x38
 8007d40:	701a      	strb	r2, [r3, #0]
}
 8007d42:	e00e      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER9)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b39      	cmp	r3, #57	; 0x39
 8007d48:	d104      	bne.n	8007d54 <_ZN10UartPacket12SetParameterE9Parameter+0xea>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER9);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	2239      	movs	r2, #57	; 0x39
 8007d50:	701a      	strb	r2, [r3, #0]
}
 8007d52:	e006      	b.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER10)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b61      	cmp	r3, #97	; 0x61
 8007d58:	d103      	bne.n	8007d62 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER10);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	2261      	movs	r2, #97	; 0x61
 8007d60:	701a      	strb	r2, [r3, #0]
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <_ZN10UartPacket12SetParameterEh>:

void UartPacket::SetParameter(uint8_t parameter)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
  m_Parameter = parameter;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	78fa      	ldrb	r2, [r7, #3]
 8007d80:	701a      	strb	r2, [r3, #0]
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <_ZN10UartPacket7SetSignE4Sign>:

void UartPacket::SetSign(Sign sign)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
  if(sign == Sign::POSITIVE_SIGN)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b31      	cmp	r3, #49	; 0x31
 8007d9c:	d104      	bne.n	8007da8 <_ZN10UartPacket7SetSignE4Sign+0x1a>
  {
    m_Sign = static_cast<uint8_t>(Sign::POSITIVE_SIGN);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2231      	movs	r2, #49	; 0x31
 8007da4:	701a      	strb	r2, [r3, #0]
  }
  else if(sign == Sign::NEGATIVE_SIGN)
  {
    m_Sign = static_cast<uint8_t>(Sign::NEGATIVE_SIGN);
  }
}
 8007da6:	e006      	b.n	8007db6 <_ZN10UartPacket7SetSignE4Sign+0x28>
  else if(sign == Sign::NEGATIVE_SIGN)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b32      	cmp	r3, #50	; 0x32
 8007dac:	d103      	bne.n	8007db6 <_ZN10UartPacket7SetSignE4Sign+0x28>
    m_Sign = static_cast<uint8_t>(Sign::NEGATIVE_SIGN);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2232      	movs	r2, #50	; 0x32
 8007db4:	701a      	strb	r2, [r3, #0]
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <_ZN10UartPacket9SetLengthE6Length>:

void UartPacket::SetLength(Length length)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	6039      	str	r1, [r7, #0]
  if(length == Length::NO_PAYLOAD)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b30      	cmp	r3, #48	; 0x30
 8007dd0:	d103      	bne.n	8007dda <_ZN10UartPacket9SetLengthE6Length+0x18>
  {
    m_Length = static_cast<uint8_t>(Length::NO_PAYLOAD);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	2230      	movs	r2, #48	; 0x30
 8007dd8:	701a      	strb	r2, [r3, #0]
  }
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <_ZN10UartPacket9SetLengthEi>:

void UartPacket::SetLength(int length)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  m_Length = static_cast<uint8_t>(length + '0');
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df8:	3230      	adds	r2, #48	; 0x30
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	701a      	strb	r2, [r3, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <_ZN10UartPacket10SetPayloadEPh>:

void UartPacket::SetPayload(uint8_t* payload)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
  memcpy(m_Payload, payload, PAYLOAD_SIZE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	220a      	movs	r2, #10
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f003 fb66 	bl	800b4ee <memcpy>
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <_ZNK10UartPacket9GetModuleEv>:
    return Source::SOURCE_ERROR;
  }
}

ModuleID UartPacket::GetModule() const
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  if(m_Module == static_cast<uint8_t>(ModuleID::MODULE1))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b31      	cmp	r3, #49	; 0x31
 8007e3a:	d101      	bne.n	8007e40 <_ZNK10UartPacket9GetModuleEv+0x16>
  {
    return ModuleID::MODULE1;
 8007e3c:	2331      	movs	r3, #49	; 0x31
 8007e3e:	e00e      	b.n	8007e5e <_ZNK10UartPacket9GetModuleEv+0x34>
  }
  else if(m_Module == static_cast<uint8_t>(ModuleID::MODULE2))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b32      	cmp	r3, #50	; 0x32
 8007e48:	d101      	bne.n	8007e4e <_ZNK10UartPacket9GetModuleEv+0x24>
  {
    return ModuleID::MODULE2;
 8007e4a:	2332      	movs	r3, #50	; 0x32
 8007e4c:	e007      	b.n	8007e5e <_ZNK10UartPacket9GetModuleEv+0x34>
  }
  else if(m_Module == static_cast<uint8_t>(ModuleID::MODULE3))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b33      	cmp	r3, #51	; 0x33
 8007e56:	d101      	bne.n	8007e5c <_ZNK10UartPacket9GetModuleEv+0x32>
  {
    return ModuleID::MODULE3;
 8007e58:	2333      	movs	r3, #51	; 0x33
 8007e5a:	e000      	b.n	8007e5e <_ZNK10UartPacket9GetModuleEv+0x34>
  }
  else
  {
    return ModuleID::MODULEID_ERROR;
 8007e5c:	2300      	movs	r3, #0
  }
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <_ZNK10UartPacket11GetFunctionEv>:

Function UartPacket::GetFunction() const
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  if(m_Function == static_cast<uint8_t>(Function::DATA_PACKET))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b31      	cmp	r3, #49	; 0x31
 8007e7a:	d101      	bne.n	8007e80 <_ZNK10UartPacket11GetFunctionEv+0x16>
  {
    return Function::DATA_PACKET;
 8007e7c:	2331      	movs	r3, #49	; 0x31
 8007e7e:	e038      	b.n	8007ef2 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::INIT_PACKET))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b32      	cmp	r3, #50	; 0x32
 8007e88:	d101      	bne.n	8007e8e <_ZNK10UartPacket11GetFunctionEv+0x24>
  {
    return Function::INIT_PACKET;
 8007e8a:	2332      	movs	r3, #50	; 0x32
 8007e8c:	e031      	b.n	8007ef2 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::DEINIT_PACKET))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b33      	cmp	r3, #51	; 0x33
 8007e96:	d101      	bne.n	8007e9c <_ZNK10UartPacket11GetFunctionEv+0x32>
  {
    return Function::DEINIT_PACKET;
 8007e98:	2333      	movs	r3, #51	; 0x33
 8007e9a:	e02a      	b.n	8007ef2 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::ENABLE_PARAMETER_PACKET))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b34      	cmp	r3, #52	; 0x34
 8007ea4:	d101      	bne.n	8007eaa <_ZNK10UartPacket11GetFunctionEv+0x40>
  {
    return Function::ENABLE_PARAMETER_PACKET;
 8007ea6:	2334      	movs	r3, #52	; 0x34
 8007ea8:	e023      	b.n	8007ef2 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::DISABLE_PARAMETER_PACKET))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b35      	cmp	r3, #53	; 0x35
 8007eb2:	d101      	bne.n	8007eb8 <_ZNK10UartPacket11GetFunctionEv+0x4e>
  {
    return Function::DISABLE_PARAMETER_PACKET;
 8007eb4:	2335      	movs	r3, #53	; 0x35
 8007eb6:	e01c      	b.n	8007ef2 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::SET_PARAMETER_PACKET))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b36      	cmp	r3, #54	; 0x36
 8007ec0:	d101      	bne.n	8007ec6 <_ZNK10UartPacket11GetFunctionEv+0x5c>
  {
    return Function::SET_PARAMETER_PACKET;
 8007ec2:	2336      	movs	r3, #54	; 0x36
 8007ec4:	e015      	b.n	8007ef2 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::SET_GRAPH_RANGE_MIN))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b37      	cmp	r3, #55	; 0x37
 8007ece:	d101      	bne.n	8007ed4 <_ZNK10UartPacket11GetFunctionEv+0x6a>
  {
    return Function::SET_GRAPH_RANGE_MIN;
 8007ed0:	2337      	movs	r3, #55	; 0x37
 8007ed2:	e00e      	b.n	8007ef2 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::SET_GRAPH_RANGE_MAX))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b38      	cmp	r3, #56	; 0x38
 8007edc:	d101      	bne.n	8007ee2 <_ZNK10UartPacket11GetFunctionEv+0x78>
  {
    return Function::SET_GRAPH_RANGE_MAX;
 8007ede:	2338      	movs	r3, #56	; 0x38
 8007ee0:	e007      	b.n	8007ef2 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::SET_GRAPH_TIME_RANGE))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b39      	cmp	r3, #57	; 0x39
 8007eea:	d101      	bne.n	8007ef0 <_ZNK10UartPacket11GetFunctionEv+0x86>
  {
    return Function::SET_GRAPH_TIME_RANGE;
 8007eec:	2339      	movs	r3, #57	; 0x39
 8007eee:	e000      	b.n	8007ef2 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else
  {
    return Function::FUNCTION_ERROR;
 8007ef0:	2300      	movs	r3, #0
  }
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <_ZNK10UartPacket12GetParameterEv>:

Parameter UartPacket::GetParameter() const
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  if(m_Parameter == static_cast<uint8_t>(Parameter::NULL_PARAMETER))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b30      	cmp	r3, #48	; 0x30
 8007f0e:	d101      	bne.n	8007f14 <_ZNK10UartPacket12GetParameterEv+0x16>
  {
    return Parameter::NULL_PARAMETER;
 8007f10:	2330      	movs	r3, #48	; 0x30
 8007f12:	e062      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::GRAPH_PARAMETER1))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b62      	cmp	r3, #98	; 0x62
 8007f1c:	d101      	bne.n	8007f22 <_ZNK10UartPacket12GetParameterEv+0x24>
  {
    return Parameter::GRAPH_PARAMETER1;
 8007f1e:	2362      	movs	r3, #98	; 0x62
 8007f20:	e05b      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::GRAPH_PARAMETER2))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b63      	cmp	r3, #99	; 0x63
 8007f2a:	d101      	bne.n	8007f30 <_ZNK10UartPacket12GetParameterEv+0x32>
  {
    return Parameter::GRAPH_PARAMETER2;
 8007f2c:	2363      	movs	r3, #99	; 0x63
 8007f2e:	e054      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::GRAPH_PARAMETER3))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b64      	cmp	r3, #100	; 0x64
 8007f38:	d101      	bne.n	8007f3e <_ZNK10UartPacket12GetParameterEv+0x40>
  {
    return Parameter::GRAPH_PARAMETER3;
 8007f3a:	2364      	movs	r3, #100	; 0x64
 8007f3c:	e04d      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::GRAPH_PARAMETER4))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b65      	cmp	r3, #101	; 0x65
 8007f46:	d101      	bne.n	8007f4c <_ZNK10UartPacket12GetParameterEv+0x4e>
  {
    return Parameter::GRAPH_PARAMETER4;
 8007f48:	2365      	movs	r3, #101	; 0x65
 8007f4a:	e046      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER1))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b31      	cmp	r3, #49	; 0x31
 8007f54:	d101      	bne.n	8007f5a <_ZNK10UartPacket12GetParameterEv+0x5c>
  {
    return Parameter::PARAMETER1;
 8007f56:	2331      	movs	r3, #49	; 0x31
 8007f58:	e03f      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER2))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b32      	cmp	r3, #50	; 0x32
 8007f62:	d101      	bne.n	8007f68 <_ZNK10UartPacket12GetParameterEv+0x6a>
  {
    return Parameter::PARAMETER2;
 8007f64:	2332      	movs	r3, #50	; 0x32
 8007f66:	e038      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER3))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b33      	cmp	r3, #51	; 0x33
 8007f70:	d101      	bne.n	8007f76 <_ZNK10UartPacket12GetParameterEv+0x78>
  {
    return Parameter::PARAMETER3;
 8007f72:	2333      	movs	r3, #51	; 0x33
 8007f74:	e031      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER4))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b34      	cmp	r3, #52	; 0x34
 8007f7e:	d101      	bne.n	8007f84 <_ZNK10UartPacket12GetParameterEv+0x86>
  {
    return Parameter::PARAMETER4;
 8007f80:	2334      	movs	r3, #52	; 0x34
 8007f82:	e02a      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER5))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	2b35      	cmp	r3, #53	; 0x35
 8007f8c:	d101      	bne.n	8007f92 <_ZNK10UartPacket12GetParameterEv+0x94>
  {
    return Parameter::PARAMETER5;
 8007f8e:	2335      	movs	r3, #53	; 0x35
 8007f90:	e023      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER6))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b36      	cmp	r3, #54	; 0x36
 8007f9a:	d101      	bne.n	8007fa0 <_ZNK10UartPacket12GetParameterEv+0xa2>
  {
    return Parameter::PARAMETER6;
 8007f9c:	2336      	movs	r3, #54	; 0x36
 8007f9e:	e01c      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER7))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b37      	cmp	r3, #55	; 0x37
 8007fa8:	d101      	bne.n	8007fae <_ZNK10UartPacket12GetParameterEv+0xb0>
  {
    return Parameter::PARAMETER7;
 8007faa:	2337      	movs	r3, #55	; 0x37
 8007fac:	e015      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER8))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b38      	cmp	r3, #56	; 0x38
 8007fb6:	d101      	bne.n	8007fbc <_ZNK10UartPacket12GetParameterEv+0xbe>
  {
    return Parameter::PARAMETER8;
 8007fb8:	2338      	movs	r3, #56	; 0x38
 8007fba:	e00e      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER9))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b39      	cmp	r3, #57	; 0x39
 8007fc4:	d101      	bne.n	8007fca <_ZNK10UartPacket12GetParameterEv+0xcc>
  {
    return Parameter::PARAMETER9;
 8007fc6:	2339      	movs	r3, #57	; 0x39
 8007fc8:	e007      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER10))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b61      	cmp	r3, #97	; 0x61
 8007fd2:	d101      	bne.n	8007fd8 <_ZNK10UartPacket12GetParameterEv+0xda>
  {
    return Parameter::PARAMETER10;
 8007fd4:	2361      	movs	r3, #97	; 0x61
 8007fd6:	e000      	b.n	8007fda <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else
  {
    return Parameter::PARAMETER_ERROR;
 8007fd8:	2300      	movs	r3, #0
  }
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <_ZNK10UartPacket7GetSignEv>:

Sign UartPacket::GetSign() const
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  if(m_Sign == static_cast<uint8_t>(Sign::POSITIVE_SIGN))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b31      	cmp	r3, #49	; 0x31
 8007ff6:	d101      	bne.n	8007ffc <_ZNK10UartPacket7GetSignEv+0x16>
  {
    return Sign::POSITIVE_SIGN;
 8007ff8:	2331      	movs	r3, #49	; 0x31
 8007ffa:	e007      	b.n	800800c <_ZNK10UartPacket7GetSignEv+0x26>
  }
  else if(m_Sign == static_cast<uint8_t>(Sign::NEGATIVE_SIGN))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b32      	cmp	r3, #50	; 0x32
 8008004:	d101      	bne.n	800800a <_ZNK10UartPacket7GetSignEv+0x24>
  {
    return Sign::NEGATIVE_SIGN;
 8008006:	2332      	movs	r3, #50	; 0x32
 8008008:	e000      	b.n	800800c <_ZNK10UartPacket7GetSignEv+0x26>
  }
  else
  {
    return Sign::SIGN_ERROR;
 800800a:	2300      	movs	r3, #0
  }
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <_ZN10UartPacket11SetWrongCrcEv>:
{
  return m_Length - '0';
}

void UartPacket::SetWrongCrc()
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
    m_PacketTable[CRC_BYTE1_POSITION] = 0;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2113      	movs	r1, #19
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f8ac 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 800802a:	4603      	mov	r3, r0
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
    m_PacketTable[CRC_BYTE2_POSITION] = 0;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2112      	movs	r1, #18
 8008034:	4618      	mov	r0, r3
 8008036:	f000 f8a4 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 800803a:	4603      	mov	r3, r0
 800803c:	2200      	movs	r2, #0
 800803e:	701a      	strb	r2, [r3, #0]
    m_PacketTable[CRC_BYTE3_POSITION] = 0;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2111      	movs	r1, #17
 8008044:	4618      	mov	r0, r3
 8008046:	f000 f89c 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 800804a:	4603      	mov	r3, r0
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]
    m_PacketTable[CRC_BYTE4_POSITION] = 0;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2110      	movs	r1, #16
 8008054:	4618      	mov	r0, r3
 8008056:	f000 f894 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 800805a:	4603      	mov	r3, r0
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <_ZN10UartPacket17AppendCrcToPacketEv>:

void UartPacket::AppendCrcToPacket()
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t crcValueCalculated = CalculateCrc32(m_PacketTable.data(), PACKET_SIZE_WITHOUT_CRC);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f8b5 	bl	80081e2 <_ZNSt5arrayIhLj20EE4dataEv>
 8008078:	4603      	mov	r3, r0
 800807a:	2110      	movs	r1, #16
 800807c:	4618      	mov	r0, r3
 800807e:	f7fd fb53 	bl	8005728 <_Z14CalculateCrc32PKhi>
 8008082:	4603      	mov	r3, r0
 8008084:	60bb      	str	r3, [r7, #8]
  uint32_t* crcAddress = &crcValueCalculated;
 8008086:	f107 0308 	add.w	r3, r7, #8
 800808a:	61fb      	str	r3, [r7, #28]
  
  uint8_t* p1 = reinterpret_cast<uint8_t*>(crcAddress);
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	61bb      	str	r3, [r7, #24]
  uint8_t* p2 = reinterpret_cast<uint8_t*>(crcAddress) + 1;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	617b      	str	r3, [r7, #20]
  uint8_t* p3 = reinterpret_cast<uint8_t*>(crcAddress) + 2;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	3302      	adds	r3, #2
 800809a:	613b      	str	r3, [r7, #16]
  uint8_t* p4 = reinterpret_cast<uint8_t*>(crcAddress) + 3;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	3303      	adds	r3, #3
 80080a0:	60fb      	str	r3, [r7, #12]
  
  m_PacketTable[CRC_BYTE1_POSITION] = *p1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2113      	movs	r1, #19
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f86b 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 80080ac:	4602      	mov	r2, r0
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	7013      	strb	r3, [r2, #0]
  m_PacketTable[CRC_BYTE2_POSITION] = *p2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2112      	movs	r1, #18
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f862 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 80080be:	4602      	mov	r2, r0
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	7013      	strb	r3, [r2, #0]
  m_PacketTable[CRC_BYTE3_POSITION] = *p3;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2111      	movs	r1, #17
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f859 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	7013      	strb	r3, [r2, #0]
  m_PacketTable[CRC_BYTE4_POSITION] = *p4;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2110      	movs	r1, #16
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f850 	bl	8008182 <_ZNSt5arrayIhLj20EEixEj>
 80080e2:	4602      	mov	r2, r0
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	7013      	strb	r3, [r2, #0]
}
 80080ea:	bf00      	nop
 80080ec:	3720      	adds	r7, #32
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <_ZNK10UartPacket10CheckCrc32Ev>:

bool UartPacket::CheckCrc32() const
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b086      	sub	sp, #24
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  uint8_t crcValueReceivedRaw8Bit[4] = {0};
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
  uint32_t crcValueCalculated = CalculateCrc32(m_PacketTable.data(), PACKET_SIZE_WITHOUT_CRC);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f87b 	bl	80081fc <_ZNKSt5arrayIhLj20EE4dataEv>
 8008106:	4603      	mov	r3, r0
 8008108:	2110      	movs	r1, #16
 800810a:	4618      	mov	r0, r3
 800810c:	f7fd fb0c 	bl	8005728 <_Z14CalculateCrc32PKhi>
 8008110:	4603      	mov	r3, r0
 8008112:	617b      	str	r3, [r7, #20]
  
  crcValueReceivedRaw8Bit[0] = m_PacketTable[CRC_BYTE4_POSITION];
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2110      	movs	r1, #16
 8008118:	4618      	mov	r0, r3
 800811a:	f000 f87c 	bl	8008216 <_ZNKSt5arrayIhLj20EEixEj>
 800811e:	4603      	mov	r3, r0
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	733b      	strb	r3, [r7, #12]
  crcValueReceivedRaw8Bit[1] = m_PacketTable[CRC_BYTE3_POSITION];
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2111      	movs	r1, #17
 8008128:	4618      	mov	r0, r3
 800812a:	f000 f874 	bl	8008216 <_ZNKSt5arrayIhLj20EEixEj>
 800812e:	4603      	mov	r3, r0
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	737b      	strb	r3, [r7, #13]
  crcValueReceivedRaw8Bit[2] = m_PacketTable[CRC_BYTE2_POSITION];
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2112      	movs	r1, #18
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f86c 	bl	8008216 <_ZNKSt5arrayIhLj20EEixEj>
 800813e:	4603      	mov	r3, r0
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	73bb      	strb	r3, [r7, #14]
  crcValueReceivedRaw8Bit[3] = m_PacketTable[CRC_BYTE1_POSITION];
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2113      	movs	r1, #19
 8008148:	4618      	mov	r0, r3
 800814a:	f000 f864 	bl	8008216 <_ZNKSt5arrayIhLj20EEixEj>
 800814e:	4603      	mov	r3, r0
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	73fb      	strb	r3, [r7, #15]
  
  uint32_t crcValueReceived = crcValueReceivedRaw8Bit[3] | crcValueReceivedRaw8Bit[2] << 8 | crcValueReceivedRaw8Bit[1] << 16 | crcValueReceivedRaw8Bit[0] << 24;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
 8008156:	461a      	mov	r2, r3
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	431a      	orrs	r2, r3
 800815e:	7b7b      	ldrb	r3, [r7, #13]
 8008160:	041b      	lsls	r3, r3, #16
 8008162:	431a      	orrs	r2, r3
 8008164:	7b3b      	ldrb	r3, [r7, #12]
 8008166:	061b      	lsls	r3, r3, #24
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
  
  return crcValueCalculated == crcValueReceived;
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	429a      	cmp	r2, r3
 8008172:	bf0c      	ite	eq
 8008174:	2301      	moveq	r3, #1
 8008176:	2300      	movne	r3, #0
 8008178:	b2db      	uxtb	r3, r3
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <_ZNSt5arrayIhLj20EEixEj>:
      constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f84f 	bl	8008234 <_ZNSt14__array_traitsIhLj20EE6_S_refERA20_Khj>
 8008196:	4603      	mov	r3, r0
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <_ZNKSt5arrayIhLj20EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	2314      	movs	r3, #20
 80081aa:	4618      	mov	r0, r3
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <_ZNSt5arrayIhLj20EE4fillERKh>:
      fill(const value_type& __u)
 80081b6:	b590      	push	{r4, r7, lr}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f845 	bl	8008250 <_ZNSt5arrayIhLj20EE5beginEv>
 80081c6:	4604      	mov	r4, r0
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff ffe9 	bl	80081a0 <_ZNKSt5arrayIhLj20EE4sizeEv>
 80081ce:	4603      	mov	r3, r0
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 f847 	bl	8008268 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd90      	pop	{r4, r7, pc}

080081e2 <_ZNSt5arrayIhLj20EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 f84f 	bl	8008290 <_ZNSt14__array_traitsIhLj20EE6_S_ptrERA20_Kh>
 80081f2:	4603      	mov	r3, r0
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <_ZNKSt5arrayIhLj20EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f842 	bl	8008290 <_ZNSt14__array_traitsIhLj20EE6_S_ptrERA20_Kh>
 800820c:	4603      	mov	r3, r0
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <_ZNKSt5arrayIhLj20EEixEj>:
      operator[](size_type __n) const noexcept
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f805 	bl	8008234 <_ZNSt14__array_traitsIhLj20EE6_S_refERA20_Khj>
 800822a:	4603      	mov	r3, r0
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <_ZNSt14__array_traitsIhLj20EE6_S_refERA20_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	4413      	add	r3, r2
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <_ZNSt5arrayIhLj20EE5beginEv>:
      begin() noexcept
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff ffc2 	bl	80081e2 <_ZNSt5arrayIhLj20EE4dataEv>
 800825e:	4603      	mov	r3, r0
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f816 	bl	80082a6 <_ZSt12__niter_baseIPhET_S1_>
 800827a:	4603      	mov	r3, r0
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	4618      	mov	r0, r3
 8008282:	f000 f81b 	bl	80082bc <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 8008286:	4603      	mov	r3, r0
    }
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <_ZNSt14__array_traitsIhLj20EE6_S_ptrERA20_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
    { return __it; }
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	4413      	add	r3, r2
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4619      	mov	r1, r3
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f807 	bl	80082e6 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4413      	add	r3, r2
    }
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b086      	sub	sp, #24
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	4619      	mov	r1, r3
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f003 f912 	bl	800b536 <memset>
    }
 8008312:	bf00      	nop
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <_ZdlPvS_>:
inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <_Z16GetArgumentCountNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
using std::string;

extern UART_HandleTypeDef huart6;

int GetArgumentCount(std::string input)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08c      	sub	sp, #48	; 0x30
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  int commasCount = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
  int index = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
  
  while ((index = input.find_first_of(',')) != string::npos)
 8008358:	2200      	movs	r2, #0
 800835a:	212c      	movs	r1, #44	; 0x2c
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 fd0d 	bl	8009d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>
 8008362:	4603      	mov	r3, r0
 8008364:	62bb      	str	r3, [r7, #40]	; 0x28
 8008366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836c:	bf14      	ite	ne
 800836e:	2301      	movne	r3, #1
 8008370:	2300      	moveq	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d018      	beq.n	80083aa <_Z16GetArgumentCountNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
  {
    ++commasCount;
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	3301      	adds	r3, #1
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
    input = input.substr(index + 1);
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	3301      	adds	r3, #1
 8008382:	461a      	mov	r2, r3
 8008384:	f107 000c 	add.w	r0, r7, #12
 8008388:	f04f 33ff 	mov.w	r3, #4294967295
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	f001 fd6d 	bl	8009e6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8008392:	f107 030c 	add.w	r3, r7, #12
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fbdb 	bl	8009b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 fbd0 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  while ((index = input.find_first_of(',')) != string::npos)
 80083a8:	e7d6      	b.n	8008358 <_Z16GetArgumentCountNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
  }
  
  /*First comma is separating command from the first argument so number of commas is equal to number of arguments*/
  int argumentsCount = commasCount;
 80083aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
  
  return argumentsCount;
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3730      	adds	r7, #48	; 0x30
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>:

bool ExtractArguments(string& input, int requiredArgumentCount, std::vector<std::string>& extractedArguments)
{
 80083b8:	b590      	push	{r4, r7, lr}
 80083ba:	b0a7      	sub	sp, #156	; 0x9c
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  string argument;
 80083c4:	f107 0314 	add.w	r3, r7, #20
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fb9c 	bl	8009b06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  int index = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  
  if (input.find_first_of(' ') != string::npos)
 80083d4:	2200      	movs	r2, #0
 80083d6:	2120      	movs	r1, #32
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f001 fccf 	bl	8009d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>
 80083de:	4603      	mov	r3, r0
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e4:	bf14      	ite	ne
 80083e6:	2301      	movne	r3, #1
 80083e8:	2300      	moveq	r3, #0
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d004      	beq.n	80083fa <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x42>
  {
    printf("ERROR, Spaces are not allowed, aborting\n");
 80083f0:	4851      	ldr	r0, [pc, #324]	; (8008538 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x180>)
 80083f2:	f003 f9d9 	bl	800b7a8 <puts>
    return false;
 80083f6:	2400      	movs	r4, #0
 80083f8:	e085      	b.n	8008506 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x14e>
  }
  
  int argumentCount = GetArgumentCount(input);
 80083fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80083fe:	68f9      	ldr	r1, [r7, #12]
 8008400:	4618      	mov	r0, r3
 8008402:	f001 fce3 	bl	8009dcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff ff9c 	bl	8008348 <_Z16GetArgumentCountNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008410:	4603      	mov	r3, r0
 8008412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800841a:	4618      	mov	r0, r3
 800841c:	f001 fb94 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  
  if (argumentCount != requiredArgumentCount)
 8008420:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	429a      	cmp	r2, r3
 8008428:	d007      	beq.n	800843a <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x82>
  {
    printf("ERROR, Wrong number of arguments, expected %d, got %d\n",requiredArgumentCount, argumentCount);
 800842a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	4842      	ldr	r0, [pc, #264]	; (800853c <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x184>)
 8008432:	f003 f931 	bl	800b698 <iprintf>
    return false;
 8008436:	2400      	movs	r4, #0
 8008438:	e065      	b.n	8008506 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x14e>
  }
  
  /*Skip extraction of first parameter because it is command*/
  index = input.find_first_of(',');
 800843a:	2200      	movs	r2, #0
 800843c:	212c      	movs	r1, #44	; 0x2c
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f001 fc9c 	bl	8009d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>
 8008444:	4603      	mov	r3, r0
 8008446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  input = input.substr(index + 1);
 800844a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800844e:	3301      	adds	r3, #1
 8008450:	461a      	mov	r2, r3
 8008452:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008456:	f04f 33ff 	mov.w	r3, #4294967295
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	f001 fd06 	bl	8009e6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8008460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008464:	4619      	mov	r1, r3
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f001 fb74 	bl	8009b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800846c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008470:	4618      	mov	r0, r3
 8008472:	f001 fb69 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  
  for (int argumentIndex = 0; argumentIndex < requiredArgumentCount; argumentIndex++)
 8008476:	2300      	movs	r3, #0
 8008478:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800847c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	429a      	cmp	r2, r3
 8008484:	da3e      	bge.n	8008504 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x14c>
  {
    index = input.find_first_of(',');
 8008486:	2200      	movs	r2, #0
 8008488:	212c      	movs	r1, #44	; 0x2c
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f001 fc76 	bl	8009d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>
 8008490:	4603      	mov	r3, r0
 8008492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    
    argument = input.substr(0, index);
 8008496:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800849a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800849e:	2200      	movs	r2, #0
 80084a0:	68f9      	ldr	r1, [r7, #12]
 80084a2:	f001 fce3 	bl	8009e6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80084a6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80084aa:	f107 0314 	add.w	r3, r7, #20
 80084ae:	4611      	mov	r1, r2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 fb4f 	bl	8009b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80084b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 fb44 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    
    input = input.substr(index + 1);
 80084c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084c4:	3301      	adds	r3, #1
 80084c6:	461a      	mov	r2, r3
 80084c8:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80084cc:	f04f 33ff 	mov.w	r3, #4294967295
 80084d0:	68f9      	ldr	r1, [r7, #12]
 80084d2:	f001 fccb 	bl	8009e6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80084d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80084da:	4619      	mov	r1, r3
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f001 fb39 	bl	8009b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80084e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 fb2e 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    
    extractedArguments.push_back(argument);
 80084ec:	f107 0314 	add.w	r3, r7, #20
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f83e 	bl	8008574 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
  for (int argumentIndex = 0; argumentIndex < requiredArgumentCount; argumentIndex++)
 80084f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084fc:	3301      	adds	r3, #1
 80084fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008502:	e7bb      	b.n	800847c <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0xc4>
  }
  
  return true;
 8008504:	2401      	movs	r4, #1
  string argument;
 8008506:	f107 0314 	add.w	r3, r7, #20
 800850a:	4618      	mov	r0, r3
 800850c:	f001 fb1c 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008510:	4623      	mov	r3, r4
 8008512:	e00c      	b.n	800852e <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x176>
  int argumentCount = GetArgumentCount(input);
 8008514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fb15 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800851e:	e7ff      	b.n	8008520 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x168>
  string argument;
 8008520:	f107 0314 	add.w	r3, r7, #20
 8008524:	4618      	mov	r0, r3
 8008526:	f001 fb0f 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800852a:	f000 fbcc 	bl	8008cc6 <__cxa_end_cleanup>
}
 800852e:	4618      	mov	r0, r3
 8008530:	379c      	adds	r7, #156	; 0x9c
 8008532:	46bd      	mov	sp, r7
 8008534:	bd90      	pop	{r4, r7, pc}
 8008536:	bf00      	nop
 8008538:	0800eb3c 	.word	0x0800eb3c
 800853c:	0800eb64 	.word	0x0800eb64

08008540 <_Z17SendPacketViaUartR10UartPacket>:

void SendPacketViaUart(UartPacket& uartPacket)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart6, static_cast<uint8_t*>(uartPacket), PACKET_SIZE, UART_TX_WAITING);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff fb0b 	bl	8007b64 <_ZN10UartPacketcvPhEv>
 800854e:	4601      	mov	r1, r0
 8008550:	2332      	movs	r3, #50	; 0x32
 8008552:	2214      	movs	r2, #20
 8008554:	4805      	ldr	r0, [pc, #20]	; (800856c <_Z17SendPacketViaUartR10UartPacket+0x2c>)
 8008556:	f7fa ff9c 	bl	8003492 <HAL_UART_Transmit>
  
  /*Toggle green LED*/
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800855a:	2120      	movs	r1, #32
 800855c:	4804      	ldr	r0, [pc, #16]	; (8008570 <_Z17SendPacketViaUartR10UartPacket+0x30>)
 800855e:	f7fa face 	bl	8002afe <HAL_GPIO_TogglePin>
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000798 	.word	0x20000798
 8008570:	40020000 	.word	0x40020000

08008574 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	429a      	cmp	r2, r3
 8008588:	d00d      	beq.n	80085a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	4619      	mov	r1, r3
 8008594:	f000 f81f 	bl	80085d6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f103 0218 	add.w	r2, r3, #24
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 80085a4:	e008      	b.n	80085b8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x44>
	  _M_realloc_insert(end(), __x);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f828 	bl	80085fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 80085ac:	4603      	mov	r3, r0
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f834 	bl	8008620 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	60b9      	str	r1, [r7, #8]
 80085e0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff ffec 	bl	80085c0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f8dc 	bl	80087ac <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	f107 030c 	add.w	r3, r7, #12
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f8ed 	bl	80087ee <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8008620:	b5b0      	push	{r4, r5, r7, lr}
 8008622:	b08a      	sub	sp, #40	; 0x28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800862c:	4a5d      	ldr	r2, [pc, #372]	; (80087a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x184>)
 800862e:	2101      	movs	r1, #1
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f8ec 	bl	800880e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8008636:	4603      	mov	r3, r0
 8008638:	623b      	str	r3, [r7, #32]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 f92f 	bl	800889e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8008640:	4603      	mov	r3, r0
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	f107 0214 	add.w	r2, r7, #20
 8008648:	f107 0308 	add.w	r3, r7, #8
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f936 	bl	80088c0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8008654:	4603      	mov	r3, r0
 8008656:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a39      	ldr	r1, [r7, #32]
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f94b 	bl	80088f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8008662:	4603      	mov	r3, r0
 8008664:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800866a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800866c:	69fa      	ldr	r2, [r7, #28]
 800866e:	4613      	mov	r3, r2
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	4413      	add	r3, r2
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	189d      	adds	r5, r3, r2
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff ff9f 	bl	80085c0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8008682:	4603      	mov	r3, r0
 8008684:	461a      	mov	r2, r3
 8008686:	4629      	mov	r1, r5
 8008688:	4620      	mov	r0, r4
 800868a:	f7ff ffa4 	bl	80085d6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800868e:	2300      	movs	r3, #0
 8008690:	627b      	str	r3, [r7, #36]	; 0x24

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681c      	ldr	r4, [r3, #0]
 8008696:	f107 0308 	add.w	r3, r7, #8
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f940 	bl	8008920 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80086a0:	4603      	mov	r3, r0
 80086a2:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fc ff2e 	bl	8005508 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80086ac:	4603      	mov	r3, r0
	  __new_finish
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	4629      	mov	r1, r5
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 f93f 	bl	8008936 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80086b8:	4603      	mov	r3, r0
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24

	  ++__new_finish;
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	3318      	adds	r3, #24
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f92a 	bl	8008920 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80086cc:	4603      	mov	r3, r0
 80086ce:	681c      	ldr	r4, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fc ff16 	bl	8005508 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80086dc:	4603      	mov	r3, r0
	  __new_finish
 80086de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e0:	4629      	mov	r1, r5
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 f927 	bl	8008936 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80086e8:	4603      	mov	r3, r0
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681c      	ldr	r4, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fc ff06 	bl	8005508 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80086fc:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80086fe:	461a      	mov	r2, r3
 8008700:	4629      	mov	r1, r5
 8008702:	4620      	mov	r0, r4
 8008704:	f7fc ff0b 	bl	800551e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8008712:	461a      	mov	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	10db      	asrs	r3, r3, #3
 800871c:	4a22      	ldr	r2, [pc, #136]	; (80087a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 800871e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8008722:	461a      	mov	r2, r3
 8008724:	f7fc ff5e 	bl	80055e4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008732:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008734:	6a3a      	ldr	r2, [r7, #32]
 8008736:	4613      	mov	r3, r2
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	4413      	add	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	461a      	mov	r2, r3
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	441a      	add	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	609a      	str	r2, [r3, #8]
    }
 8008748:	e029      	b.n	800879e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x17e>
 800874a:	4603      	mov	r3, r0
      __catch(...)
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fe6d 	bl	800942c <__cxa_begin_catch>
	  if (!__new_finish)
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10c      	bne.n	8008772 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x152>
	    _Alloc_traits::destroy(this->_M_impl,
 8008758:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	4613      	mov	r3, r2
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	4413      	add	r3, r2
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	461a      	mov	r2, r3
	    _Alloc_traits::destroy(this->_M_impl,
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	4413      	add	r3, r2
 800876a:	4619      	mov	r1, r3
 800876c:	f000 f8fc 	bl	8008968 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
 8008770:	e009      	b.n	8008786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x166>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4618      	mov	r0, r3
 8008776:	f7fc fec7 	bl	8005508 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800877a:	4603      	mov	r3, r0
 800877c:	461a      	mov	r2, r3
 800877e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008780:	69b8      	ldr	r0, [r7, #24]
 8008782:	f7fc fecc 	bl	800551e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a3a      	ldr	r2, [r7, #32]
 800878a:	69b9      	ldr	r1, [r7, #24]
 800878c:	4618      	mov	r0, r3
 800878e:	f7fc ff29 	bl	80055e4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
	  __throw_exception_again;
 8008792:	f000 fdf5 	bl	8009380 <__cxa_rethrow>
      __catch(...)
 8008796:	f000 fe73 	bl	8009480 <__cxa_end_catch>
 800879a:	f000 fa94 	bl	8008cc6 <__cxa_end_cleanup>
    }
 800879e:	3728      	adds	r7, #40	; 0x28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bdb0      	pop	{r4, r5, r7, pc}
 80087a4:	0800eb9c 	.word	0x0800eb9c
 80087a8:	aaaaaaab 	.word	0xaaaaaaab

080087ac <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80087ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff ff01 	bl	80085c0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80087be:	4606      	mov	r6, r0
 80087c0:	68bd      	ldr	r5, [r7, #8]
 80087c2:	4629      	mov	r1, r5
 80087c4:	2018      	movs	r0, #24
 80087c6:	f7ff fda8 	bl	800831a <_ZnwjPv>
 80087ca:	4604      	mov	r4, r0
 80087cc:	2c00      	cmp	r4, #0
 80087ce:	d00a      	beq.n	80087e6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_+0x3a>
 80087d0:	4631      	mov	r1, r6
 80087d2:	4620      	mov	r0, r4
 80087d4:	f001 fafa 	bl	8009dcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80087d8:	e005      	b.n	80087e6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_+0x3a>
 80087da:	4629      	mov	r1, r5
 80087dc:	4620      	mov	r0, r4
 80087de:	f7ff fda8 	bl	8008332 <_ZdlPvS_>
 80087e2:	f000 fa70 	bl	8008cc6 <__cxa_end_cleanup>
 80087e6:	bf00      	nop
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087ee <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4618      	mov	r0, r3
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800880e:	b590      	push	{r4, r7, lr}
 8008810:	b087      	sub	sp, #28
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 f8b1 	bl	8008982 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8008820:	4604      	mov	r4, r0
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7fc fefe 	bl	8005624 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008828:	4603      	mov	r3, r0
 800882a:	1ae2      	subs	r2, r4, r3
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	429a      	cmp	r2, r3
 8008830:	bf34      	ite	cc
 8008832:	2301      	movcc	r3, #1
 8008834:	2300      	movcs	r3, #0
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4618      	mov	r0, r3
 8008840:	f001 f86f 	bl	8009922 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f7fc feed 	bl	8005624 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800884a:	4604      	mov	r4, r0
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f7fc fee9 	bl	8005624 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008852:	4603      	mov	r3, r0
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	f107 0208 	add.w	r2, r7, #8
 800885a:	f107 0310 	add.w	r3, r7, #16
 800885e:	4611      	mov	r1, r2
 8008860:	4618      	mov	r0, r3
 8008862:	f000 f89f 	bl	80089a4 <_ZSt3maxIjERKT_S2_S2_>
 8008866:	4603      	mov	r3, r0
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4423      	add	r3, r4
 800886c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7fc fed8 	bl	8005624 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008874:	4602      	mov	r2, r0
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	4293      	cmp	r3, r2
 800887a:	d306      	bcc.n	800888a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 f880 	bl	8008982 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8008882:	4602      	mov	r2, r0
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	4293      	cmp	r3, r2
 8008888:	d904      	bls.n	8008894 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 f879 	bl	8008982 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8008890:	4603      	mov	r3, r0
 8008892:	e000      	b.n	8008896 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 8008894:	697b      	ldr	r3, [r7, #20]
      }
 8008896:	4618      	mov	r0, r3
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	bd90      	pop	{r4, r7, pc}

0800889e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	f107 030c 	add.w	r3, r7, #12
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7ff ff9d 	bl	80087ee <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f828 	bl	8008920 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80088d0:	4603      	mov	r3, r0
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461c      	mov	r4, r3
 80088d6:	6838      	ldr	r0, [r7, #0]
 80088d8:	f000 f822 	bl	8008920 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80088dc:	4603      	mov	r3, r0
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	1ae3      	subs	r3, r4, r3
 80088e2:	10db      	asrs	r3, r3, #3
 80088e4:	4a03      	ldr	r2, [pc, #12]	; (80088f4 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 80088e6:	fb02 f303 	mul.w	r3, r2, r3
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd90      	pop	{r4, r7, pc}
 80088f2:	bf00      	nop
 80088f4:	aaaaaaab 	.word	0xaaaaaaab

080088f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d006      	beq.n	8008916 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f85d 	bl	80089cc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8008912:	4603      	mov	r3, r0
 8008914:	e000      	b.n	8008918 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8008916:	2300      	movs	r3, #0
      }
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8008936:	b590      	push	{r4, r7, lr}
 8008938:	b085      	sub	sp, #20
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 f850 	bl	80089ea <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800894a:	4604      	mov	r4, r0
 800894c:	68b8      	ldr	r0, [r7, #8]
 800894e:	f000 f84c 	bl	80089ea <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8008952:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	4620      	mov	r0, r4
 800895a:	f000 f855 	bl	8008a08 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800895e:	4603      	mov	r3, r0
    }
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	bd90      	pop	{r4, r7, pc}

08008968 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f858 	bl	8008a2a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 f864 	bl	8008a5a <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008992:	4603      	mov	r3, r0
 8008994:	4618      	mov	r0, r3
 8008996:	f000 f854 	bl	8008a42 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800899a:	4603      	mov	r3, r0
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d201      	bcs.n	80089be <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	e000      	b.n	80089c0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80089be:	687b      	ldr	r3, [r7, #4]
    }
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80089d6:	2200      	movs	r2, #0
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f848 	bl	8008a70 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 80089e0:	4603      	mov	r3, r0
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80089f2:	f107 030c 	add.w	r3, r7, #12
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 f85a 	bl	8008ab2 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f858 	bl	8008ad0 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8008a20:	4603      	mov	r3, r0
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
 8008a34:	6838      	ldr	r0, [r7, #0]
 8008a36:	f001 f887 	bl	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f852 	bl	8008af4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8008a50:	4603      	mov	r3, r0
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 f839 	bl	8008af4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8008a82:	4602      	mov	r2, r0
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	4293      	cmp	r3, r2
 8008a88:	bf8c      	ite	hi
 8008a8a:	2301      	movhi	r3, #1
 8008a8c:	2300      	movls	r3, #0
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008a94:	f000 ff3c 	bl	8009910 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	4413      	add	r3, r2
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 fd10 	bl	80094c8 <_Znwj>
 8008aa8:	4603      	mov	r3, r0
      }
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008adc:	2301      	movs	r3, #1
 8008ade:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	68b9      	ldr	r1, [r7, #8]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f813 	bl	8008b10 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 8008aea:	4603      	mov	r3, r0
    }
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008afc:	4b03      	ldr	r3, [pc, #12]	; (8008b0c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x18>)
 8008afe:	4618      	mov	r0, r3
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	0aaaaaaa 	.word	0x0aaaaaaa

08008b10 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008b10:	b590      	push	{r4, r7, lr}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8008b20:	f107 0208 	add.w	r2, r7, #8
 8008b24:	f107 030c 	add.w	r3, r7, #12
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f82e 	bl	8008b8c <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d016      	beq.n	8008b64 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8008b36:	6978      	ldr	r0, [r7, #20]
 8008b38:	f7fc fdb0 	bl	800569c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	f107 030c 	add.w	r3, r7, #12
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f844 	bl	8008bd0 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 f856 	bl	8008bfe <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8008b52:	f107 030c 	add.w	r3, r7, #12
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f829 	bl	8008bae <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	3318      	adds	r3, #24
 8008b60:	617b      	str	r3, [r7, #20]
 8008b62:	e7dd      	b.n	8008b20 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	e00d      	b.n	8008b84 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x74>
 8008b68:	4603      	mov	r3, r0
	  __catch(...)
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fc5e 	bl	800942c <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 8008b70:	6979      	ldr	r1, [r7, #20]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7fc fd49 	bl	800560a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
	      __throw_exception_again;
 8008b78:	f000 fc02 	bl	8009380 <__cxa_rethrow>
	  __catch(...)
 8008b7c:	f000 fc80 	bl	8009480 <__cxa_end_catch>
 8008b80:	f000 f8a1 	bl	8008cc6 <__cxa_end_cleanup>
	}
 8008b84:	4618      	mov	r0, r3
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd90      	pop	{r4, r7, pc}

08008b8c <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f849 	bl	8008c30 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	f083 0301 	eor.w	r3, r3, #1
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f103 0218 	add.w	r2, r3, #24
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
	return *this;
 8008bc2:	687b      	ldr	r3, [r7, #4]
      }
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8008bfe:	b590      	push	{r4, r7, lr}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8008c08:	6838      	ldr	r0, [r7, #0]
 8008c0a:	f7ff ffed 	bl	8008be8 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4619      	mov	r1, r3
 8008c14:	2018      	movs	r0, #24
 8008c16:	f7ff fb80 	bl	800831a <_ZnwjPv>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 8008c20:	4621      	mov	r1, r4
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 ff76 	bl	8009b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd90      	pop	{r4, r7, pc}

08008c30 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f80e 	bl	8008c5c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8008c40:	4604      	mov	r4, r0
 8008c42:	6838      	ldr	r0, [r7, #0]
 8008c44:	f000 f80a 	bl	8008c5c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	429c      	cmp	r4, r3
 8008c4c:	bf0c      	ite	eq
 8008c4e:	2301      	moveq	r3, #1
 8008c50:	2300      	movne	r3, #0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}

08008c5c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008c78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008c7a:	e003      	b.n	8008c84 <LoopCopyDataInit>

08008c7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008c7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008c80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008c82:	3104      	adds	r1, #4

08008c84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008c84:	480b      	ldr	r0, [pc, #44]	; (8008cb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008c86:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008c88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008c8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008c8c:	d3f6      	bcc.n	8008c7c <CopyDataInit>
  ldr  r2, =_sbss
 8008c8e:	4a0b      	ldr	r2, [pc, #44]	; (8008cbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008c90:	e002      	b.n	8008c98 <LoopFillZerobss>

08008c92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008c92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008c94:	f842 3b04 	str.w	r3, [r2], #4

08008c98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008c98:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008c9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008c9c:	d3f9      	bcc.n	8008c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008c9e:	f7fe fef9 	bl	8007a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008ca2:	f002 fb7d 	bl	800b3a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008ca6:	f7fd fff5 	bl	8006c94 <main>
  bx  lr    
 8008caa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008cac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008cb0:	0801108c 	.word	0x0801108c
  ldr  r0, =_sdata
 8008cb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008cb8:	200005d4 	.word	0x200005d4
  ldr  r2, =_sbss
 8008cbc:	200005d8 	.word	0x200005d8
  ldr  r3, = _ebss
 8008cc0:	200008e8 	.word	0x200008e8

08008cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008cc4:	e7fe      	b.n	8008cc4 <ADC_IRQHandler>

08008cc6 <__cxa_end_cleanup>:
 8008cc6:	b41e      	push	{r1, r2, r3, r4}
 8008cc8:	f000 f89b 	bl	8008e02 <__gnu_end_cleanup>
 8008ccc:	bc1e      	pop	{r1, r2, r3, r4}
 8008cce:	f7f8 fe89 	bl	80019e4 <_Unwind_Resume>

08008cd2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8008cd2:	7803      	ldrb	r3, [r0, #0]
 8008cd4:	2b47      	cmp	r3, #71	; 0x47
 8008cd6:	d117      	bne.n	8008d08 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008cd8:	7843      	ldrb	r3, [r0, #1]
 8008cda:	2b4e      	cmp	r3, #78	; 0x4e
 8008cdc:	d114      	bne.n	8008d08 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008cde:	7883      	ldrb	r3, [r0, #2]
 8008ce0:	2b55      	cmp	r3, #85	; 0x55
 8008ce2:	d111      	bne.n	8008d08 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008ce4:	78c3      	ldrb	r3, [r0, #3]
 8008ce6:	2b43      	cmp	r3, #67	; 0x43
 8008ce8:	d10e      	bne.n	8008d08 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008cea:	7903      	ldrb	r3, [r0, #4]
 8008cec:	2b43      	cmp	r3, #67	; 0x43
 8008cee:	d10b      	bne.n	8008d08 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008cf0:	7943      	ldrb	r3, [r0, #5]
 8008cf2:	2b2b      	cmp	r3, #43	; 0x2b
 8008cf4:	d108      	bne.n	8008d08 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008cf6:	7983      	ldrb	r3, [r0, #6]
 8008cf8:	2b2b      	cmp	r3, #43	; 0x2b
 8008cfa:	d105      	bne.n	8008d08 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008cfc:	79c0      	ldrb	r0, [r0, #7]
 8008cfe:	2801      	cmp	r0, #1
 8008d00:	bf8c      	ite	hi
 8008d02:	2000      	movhi	r0, #0
 8008d04:	2001      	movls	r0, #1
 8008d06:	4770      	bx	lr
 8008d08:	2000      	movs	r0, #0
 8008d0a:	4770      	bx	lr

08008d0c <__cxa_type_match>:
 8008d0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008d10:	461e      	mov	r6, r3
 8008d12:	7803      	ldrb	r3, [r0, #0]
 8008d14:	2b47      	cmp	r3, #71	; 0x47
 8008d16:	460d      	mov	r5, r1
 8008d18:	4602      	mov	r2, r0
 8008d1a:	79c1      	ldrb	r1, [r0, #7]
 8008d1c:	d113      	bne.n	8008d46 <__cxa_type_match+0x3a>
 8008d1e:	7843      	ldrb	r3, [r0, #1]
 8008d20:	2b4e      	cmp	r3, #78	; 0x4e
 8008d22:	d110      	bne.n	8008d46 <__cxa_type_match+0x3a>
 8008d24:	7883      	ldrb	r3, [r0, #2]
 8008d26:	2b55      	cmp	r3, #85	; 0x55
 8008d28:	d10d      	bne.n	8008d46 <__cxa_type_match+0x3a>
 8008d2a:	78c3      	ldrb	r3, [r0, #3]
 8008d2c:	2b43      	cmp	r3, #67	; 0x43
 8008d2e:	d10a      	bne.n	8008d46 <__cxa_type_match+0x3a>
 8008d30:	7903      	ldrb	r3, [r0, #4]
 8008d32:	2b46      	cmp	r3, #70	; 0x46
 8008d34:	d107      	bne.n	8008d46 <__cxa_type_match+0x3a>
 8008d36:	7943      	ldrb	r3, [r0, #5]
 8008d38:	2b4f      	cmp	r3, #79	; 0x4f
 8008d3a:	d104      	bne.n	8008d46 <__cxa_type_match+0x3a>
 8008d3c:	7983      	ldrb	r3, [r0, #6]
 8008d3e:	2b52      	cmp	r3, #82	; 0x52
 8008d40:	d101      	bne.n	8008d46 <__cxa_type_match+0x3a>
 8008d42:	2900      	cmp	r1, #0
 8008d44:	d031      	beq.n	8008daa <__cxa_type_match+0x9e>
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7ff ffc3 	bl	8008cd2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8008d4c:	f080 0001 	eor.w	r0, r0, #1
 8008d50:	b2c0      	uxtb	r0, r0
 8008d52:	2300      	movs	r3, #0
 8008d54:	2400      	movs	r4, #0
 8008d56:	9401      	str	r4, [sp, #4]
 8008d58:	bb53      	cbnz	r3, 8008db0 <__cxa_type_match+0xa4>
 8008d5a:	bb58      	cbnz	r0, 8008db4 <__cxa_type_match+0xa8>
 8008d5c:	2901      	cmp	r1, #1
 8008d5e:	bf0a      	itet	eq
 8008d60:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8008d64:	f1a2 0320 	subne.w	r3, r2, #32
 8008d68:	3b78      	subeq	r3, #120	; 0x78
 8008d6a:	2901      	cmp	r1, #1
 8008d6c:	bf08      	it	eq
 8008d6e:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8008d72:	681c      	ldr	r4, [r3, #0]
 8008d74:	bf18      	it	ne
 8008d76:	3258      	addne	r2, #88	; 0x58
 8008d78:	9201      	str	r2, [sp, #4]
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	4798      	blx	r3
 8008d82:	b1c8      	cbz	r0, 8008db8 <__cxa_type_match+0xac>
 8008d84:	9b01      	ldr	r3, [sp, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	2702      	movs	r7, #2
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	aa01      	add	r2, sp, #4
 8008d90:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8008d94:	4621      	mov	r1, r4
 8008d96:	2301      	movs	r3, #1
 8008d98:	4628      	mov	r0, r5
 8008d9a:	47c0      	blx	r8
 8008d9c:	b170      	cbz	r0, 8008dbc <__cxa_type_match+0xb0>
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	6033      	str	r3, [r6, #0]
 8008da2:	4638      	mov	r0, r7
 8008da4:	b002      	add	sp, #8
 8008da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008daa:	2301      	movs	r3, #1
 8008dac:	4608      	mov	r0, r1
 8008dae:	e7d1      	b.n	8008d54 <__cxa_type_match+0x48>
 8008db0:	4c03      	ldr	r4, [pc, #12]	; (8008dc0 <__cxa_type_match+0xb4>)
 8008db2:	e7e2      	b.n	8008d7a <__cxa_type_match+0x6e>
 8008db4:	4c03      	ldr	r4, [pc, #12]	; (8008dc4 <__cxa_type_match+0xb8>)
 8008db6:	e7e0      	b.n	8008d7a <__cxa_type_match+0x6e>
 8008db8:	2701      	movs	r7, #1
 8008dba:	e7e7      	b.n	8008d8c <__cxa_type_match+0x80>
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	e7f0      	b.n	8008da2 <__cxa_type_match+0x96>
 8008dc0:	08010084 	.word	0x08010084
 8008dc4:	0801008c 	.word	0x0801008c

08008dc8 <__cxa_begin_cleanup>:
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	4604      	mov	r4, r0
 8008dcc:	f000 f836 	bl	8008e3c <__cxa_get_globals>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f1a4 0120 	sub.w	r1, r4, #32
 8008dd8:	f7ff ff7b 	bl	8008cd2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8008ddc:	b160      	cbz	r0, 8008df8 <__cxa_begin_cleanup+0x30>
 8008dde:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008de2:	3301      	adds	r3, #1
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dea:	d103      	bne.n	8008df4 <__cxa_begin_cleanup+0x2c>
 8008dec:	6893      	ldr	r3, [r2, #8]
 8008dee:	f844 3c08 	str.w	r3, [r4, #-8]
 8008df2:	6091      	str	r1, [r2, #8]
 8008df4:	2001      	movs	r0, #1
 8008df6:	bd10      	pop	{r4, pc}
 8008df8:	6893      	ldr	r3, [r2, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f9      	beq.n	8008df2 <__cxa_begin_cleanup+0x2a>
 8008dfe:	f000 fc7d 	bl	80096fc <_ZSt9terminatev>

08008e02 <__gnu_end_cleanup>:
 8008e02:	b510      	push	{r4, lr}
 8008e04:	f000 f81a 	bl	8008e3c <__cxa_get_globals>
 8008e08:	6882      	ldr	r2, [r0, #8]
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	b90a      	cbnz	r2, 8008e12 <__gnu_end_cleanup+0x10>
 8008e0e:	f000 fc75 	bl	80096fc <_ZSt9terminatev>
 8008e12:	f102 0420 	add.w	r4, r2, #32
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7ff ff5b 	bl	8008cd2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8008e1c:	b140      	cbz	r0, 8008e30 <__gnu_end_cleanup+0x2e>
 8008e1e:	69d3      	ldr	r3, [r2, #28]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	61d3      	str	r3, [r2, #28]
 8008e24:	b913      	cbnz	r3, 8008e2c <__gnu_end_cleanup+0x2a>
 8008e26:	6990      	ldr	r0, [r2, #24]
 8008e28:	6088      	str	r0, [r1, #8]
 8008e2a:	6193      	str	r3, [r2, #24]
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	bd10      	pop	{r4, pc}
 8008e30:	6088      	str	r0, [r1, #8]
 8008e32:	e7fb      	b.n	8008e2c <__gnu_end_cleanup+0x2a>

08008e34 <__cxa_get_globals_fast>:
 8008e34:	4800      	ldr	r0, [pc, #0]	; (8008e38 <__cxa_get_globals_fast+0x4>)
 8008e36:	4770      	bx	lr
 8008e38:	200008a8 	.word	0x200008a8

08008e3c <__cxa_get_globals>:
 8008e3c:	4800      	ldr	r0, [pc, #0]	; (8008e40 <__cxa_get_globals+0x4>)
 8008e3e:	4770      	bx	lr
 8008e40:	200008a8 	.word	0x200008a8

08008e44 <_ZL12read_uleb128PKhPm>:
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	2300      	movs	r3, #0
 8008e48:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8008e4c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8008e50:	f810 5b01 	ldrb.w	r5, [r0], #1
 8008e54:	1994      	adds	r4, r2, r6
 8008e56:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8008e5a:	40a2      	lsls	r2, r4
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	062a      	lsls	r2, r5, #24
 8008e60:	d4f4      	bmi.n	8008e4c <_ZL12read_uleb128PKhPm+0x8>
 8008e62:	600b      	str	r3, [r1, #0]
 8008e64:	bd70      	pop	{r4, r5, r6, pc}

08008e66 <_ZL12read_sleb128PKhPl>:
 8008e66:	b530      	push	{r4, r5, lr}
 8008e68:	2300      	movs	r3, #0
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8008e70:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8008e74:	4095      	lsls	r5, r2
 8008e76:	432b      	orrs	r3, r5
 8008e78:	0625      	lsls	r5, r4, #24
 8008e7a:	f102 0207 	add.w	r2, r2, #7
 8008e7e:	d4f5      	bmi.n	8008e6c <_ZL12read_sleb128PKhPl+0x6>
 8008e80:	2a1f      	cmp	r2, #31
 8008e82:	d806      	bhi.n	8008e92 <_ZL12read_sleb128PKhPl+0x2c>
 8008e84:	0664      	lsls	r4, r4, #25
 8008e86:	bf42      	ittt	mi
 8008e88:	f04f 34ff 	movmi.w	r4, #4294967295
 8008e8c:	fa04 f202 	lslmi.w	r2, r4, r2
 8008e90:	4313      	orrmi	r3, r2
 8008e92:	600b      	str	r3, [r1, #0]
 8008e94:	bd30      	pop	{r4, r5, pc}

08008e96 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8008e96:	2850      	cmp	r0, #80	; 0x50
 8008e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	460e      	mov	r6, r1
 8008e9e:	4614      	mov	r4, r2
 8008ea0:	461f      	mov	r7, r3
 8008ea2:	d107      	bne.n	8008eb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8008ea4:	1cd0      	adds	r0, r2, #3
 8008ea6:	f020 0003 	bic.w	r0, r0, #3
 8008eaa:	f850 3b04 	ldr.w	r3, [r0], #4
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	b003      	add	sp, #12
 8008eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb4:	f000 030f 	and.w	r3, r0, #15
 8008eb8:	2b0c      	cmp	r3, #12
 8008eba:	d82e      	bhi.n	8008f1a <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8008ebc:	e8df f003 	tbb	[pc, r3]
 8008ec0:	251d0725 	.word	0x251d0725
 8008ec4:	2d2d2d29 	.word	0x2d2d2d29
 8008ec8:	2521182d 	.word	0x2521182d
 8008ecc:	29          	.byte	0x29
 8008ecd:	00          	.byte	0x00
 8008ece:	a901      	add	r1, sp, #4
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f7ff ffb7 	bl	8008e44 <_ZL12read_uleb128PKhPm>
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0e8      	beq.n	8008eae <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8008edc:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8008ee0:	2a10      	cmp	r2, #16
 8008ee2:	bf08      	it	eq
 8008ee4:	4626      	moveq	r6, r4
 8008ee6:	4433      	add	r3, r6
 8008ee8:	062a      	lsls	r2, r5, #24
 8008eea:	bf48      	it	mi
 8008eec:	681b      	ldrmi	r3, [r3, #0]
 8008eee:	e7de      	b.n	8008eae <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8008ef0:	a901      	add	r1, sp, #4
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7ff ffb7 	bl	8008e66 <_ZL12read_sleb128PKhPl>
 8008ef8:	e7ed      	b.n	8008ed6 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8008efa:	4620      	mov	r0, r4
 8008efc:	f830 3b02 	ldrh.w	r3, [r0], #2
 8008f00:	e7ea      	b.n	8008ed8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8008f02:	4620      	mov	r0, r4
 8008f04:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8008f08:	e7e6      	b.n	8008ed8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f850 3b04 	ldr.w	r3, [r0], #4
 8008f10:	e7e2      	b.n	8008ed8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8008f12:	4620      	mov	r0, r4
 8008f14:	f850 3b08 	ldr.w	r3, [r0], #8
 8008f18:	e7de      	b.n	8008ed8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8008f1a:	f002 f8b6 	bl	800b08a <abort>

08008f1e <_Unwind_GetGR>:
 8008f1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	2300      	movs	r3, #0
 8008f26:	460a      	mov	r2, r1
 8008f28:	4619      	mov	r1, r3
 8008f2a:	f7f8 f99f 	bl	800126c <_Unwind_VRS_Get>
 8008f2e:	9803      	ldr	r0, [sp, #12]
 8008f30:	b005      	add	sp, #20
 8008f32:	f85d fb04 	ldr.w	pc, [sp], #4

08008f36 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 8008f36:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008f3a:	2820      	cmp	r0, #32
 8008f3c:	b508      	push	{r3, lr}
 8008f3e:	d010      	beq.n	8008f62 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 8008f40:	d804      	bhi.n	8008f4c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x16>
 8008f42:	b1c0      	cbz	r0, 8008f76 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 8008f44:	2810      	cmp	r0, #16
 8008f46:	d016      	beq.n	8008f76 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 8008f48:	f002 f89f 	bl	800b08a <abort>
 8008f4c:	2840      	cmp	r0, #64	; 0x40
 8008f4e:	d00d      	beq.n	8008f6c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x36>
 8008f50:	2850      	cmp	r0, #80	; 0x50
 8008f52:	d010      	beq.n	8008f76 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 8008f54:	2830      	cmp	r0, #48	; 0x30
 8008f56:	d1f7      	bne.n	8008f48 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x12>
 8008f58:	4608      	mov	r0, r1
 8008f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f5e:	f7f8 bf3b 	b.w	8001dd8 <_Unwind_GetDataRelBase>
 8008f62:	4608      	mov	r0, r1
 8008f64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f68:	f7f8 bf3a 	b.w	8001de0 <_Unwind_GetTextRelBase>
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f72:	f7f8 bf21 	b.w	8001db8 <_Unwind_GetRegionStart>
 8008f76:	2000      	movs	r0, #0
 8008f78:	bd08      	pop	{r3, pc}

08008f7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8008f7a:	29ff      	cmp	r1, #255	; 0xff
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	460c      	mov	r4, r1
 8008f80:	4615      	mov	r5, r2
 8008f82:	461e      	mov	r6, r3
 8008f84:	d00b      	beq.n	8008f9e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj+0x24>
 8008f86:	4601      	mov	r1, r0
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f7ff ffd4 	bl	8008f36 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8008f8e:	4601      	mov	r1, r0
 8008f90:	4633      	mov	r3, r6
 8008f92:	462a      	mov	r2, r5
 8008f94:	4620      	mov	r0, r4
 8008f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f9a:	f7ff bf7c 	b.w	8008e96 <_ZL28read_encoded_value_with_basehjPKhPj>
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	e7f6      	b.n	8008f90 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj+0x16>

08008fa2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8008fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fa4:	460e      	mov	r6, r1
 8008fa6:	4614      	mov	r4, r2
 8008fa8:	4605      	mov	r5, r0
 8008faa:	b108      	cbz	r0, 8008fb0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8008fac:	f7f8 ff04 	bl	8001db8 <_Unwind_GetRegionStart>
 8008fb0:	6020      	str	r0, [r4, #0]
 8008fb2:	7831      	ldrb	r1, [r6, #0]
 8008fb4:	29ff      	cmp	r1, #255	; 0xff
 8008fb6:	f106 0201 	add.w	r2, r6, #1
 8008fba:	d01d      	beq.n	8008ff8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8008fbc:	1d23      	adds	r3, r4, #4
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f7ff ffdb 	bl	8008f7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	7813      	ldrb	r3, [r2, #0]
 8008fc8:	7523      	strb	r3, [r4, #20]
 8008fca:	2bff      	cmp	r3, #255	; 0xff
 8008fcc:	f102 0001 	add.w	r0, r2, #1
 8008fd0:	d014      	beq.n	8008ffc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8008fd2:	2310      	movs	r3, #16
 8008fd4:	7523      	strb	r3, [r4, #20]
 8008fd6:	a901      	add	r1, sp, #4
 8008fd8:	f7ff ff34 	bl	8008e44 <_ZL12read_uleb128PKhPm>
 8008fdc:	9b01      	ldr	r3, [sp, #4]
 8008fde:	4403      	add	r3, r0
 8008fe0:	60e3      	str	r3, [r4, #12]
 8008fe2:	7803      	ldrb	r3, [r0, #0]
 8008fe4:	7563      	strb	r3, [r4, #21]
 8008fe6:	a901      	add	r1, sp, #4
 8008fe8:	3001      	adds	r0, #1
 8008fea:	f7ff ff2b 	bl	8008e44 <_ZL12read_uleb128PKhPm>
 8008fee:	9b01      	ldr	r3, [sp, #4]
 8008ff0:	4403      	add	r3, r0
 8008ff2:	6123      	str	r3, [r4, #16]
 8008ff4:	b002      	add	sp, #8
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
 8008ff8:	6060      	str	r0, [r4, #4]
 8008ffa:	e7e4      	b.n	8008fc6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e7ef      	b.n	8008fe0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08009000 <__gxx_personality_v0>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	b091      	sub	sp, #68	; 0x44
 8009006:	2300      	movs	r3, #0
 8009008:	9304      	str	r3, [sp, #16]
 800900a:	f000 0303 	and.w	r3, r0, #3
 800900e:	2b01      	cmp	r3, #1
 8009010:	4607      	mov	r7, r0
 8009012:	460c      	mov	r4, r1
 8009014:	4616      	mov	r6, r2
 8009016:	d011      	beq.n	800903c <__gxx_personality_v0+0x3c>
 8009018:	d303      	bcc.n	8009022 <__gxx_personality_v0+0x22>
 800901a:	2b02      	cmp	r3, #2
 800901c:	d003      	beq.n	8009026 <__gxx_personality_v0+0x26>
 800901e:	f002 f834 	bl	800b08a <abort>
 8009022:	0702      	lsls	r2, r0, #28
 8009024:	d51a      	bpl.n	800905c <__gxx_personality_v0+0x5c>
 8009026:	4631      	mov	r1, r6
 8009028:	4620      	mov	r0, r4
 800902a:	f7f8 feb1 	bl	8001d90 <__gnu_unwind_frame>
 800902e:	b118      	cbz	r0, 8009038 <__gxx_personality_v0+0x38>
 8009030:	2009      	movs	r0, #9
 8009032:	b011      	add	sp, #68	; 0x44
 8009034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009038:	2008      	movs	r0, #8
 800903a:	e7fa      	b.n	8009032 <__gxx_personality_v0+0x32>
 800903c:	f000 0508 	and.w	r5, r0, #8
 8009040:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8009044:	bb75      	cbnz	r5, 80090a4 <__gxx_personality_v0+0xa4>
 8009046:	f8d1 9020 	ldr.w	r9, [r1, #32]
 800904a:	4610      	mov	r0, r2
 800904c:	210d      	movs	r1, #13
 800904e:	f7ff ff66 	bl	8008f1e <_Unwind_GetGR>
 8009052:	4581      	cmp	r9, r0
 8009054:	f040 8145 	bne.w	80092e2 <__gxx_personality_v0+0x2e2>
 8009058:	2506      	movs	r5, #6
 800905a:	e000      	b.n	800905e <__gxx_personality_v0+0x5e>
 800905c:	2501      	movs	r5, #1
 800905e:	ab10      	add	r3, sp, #64	; 0x40
 8009060:	f007 0708 	and.w	r7, r7, #8
 8009064:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	2300      	movs	r3, #0
 800906c:	433d      	orrs	r5, r7
 800906e:	220c      	movs	r2, #12
 8009070:	4619      	mov	r1, r3
 8009072:	4630      	mov	r0, r6
 8009074:	f7f8 f91c 	bl	80012b0 <_Unwind_VRS_Set>
 8009078:	2d06      	cmp	r5, #6
 800907a:	f040 813e 	bne.w	80092fa <__gxx_personality_v0+0x2fa>
 800907e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8009080:	e9d4 980a 	ldrd	r9, r8, [r4, #40]	; 0x28
 8009084:	2f00      	cmp	r7, #0
 8009086:	bf0c      	ite	eq
 8009088:	f04f 0a01 	moveq.w	sl, #1
 800908c:	f04f 0a03 	movne.w	sl, #3
 8009090:	f015 0508 	ands.w	r5, r5, #8
 8009094:	f000 80c7 	beq.w	8009226 <__gxx_personality_v0+0x226>
 8009098:	f1ba 0f01 	cmp.w	sl, #1
 800909c:	f040 80be 	bne.w	800921c <__gxx_personality_v0+0x21c>
 80090a0:	f000 fb2c 	bl	80096fc <_ZSt9terminatev>
 80090a4:	2502      	movs	r5, #2
 80090a6:	e7da      	b.n	800905e <__gxx_personality_v0+0x5e>
 80090a8:	2000      	movs	r0, #0
 80090aa:	e13b      	b.n	8009324 <__gxx_personality_v0+0x324>
 80090ac:	9a07      	ldr	r2, [sp, #28]
 80090ae:	4413      	add	r3, r2
 80090b0:	42bb      	cmp	r3, r7
 80090b2:	f240 813f 	bls.w	8009334 <__gxx_personality_v0+0x334>
 80090b6:	9f08      	ldr	r7, [sp, #32]
 80090b8:	b10f      	cbz	r7, 80090be <__gxx_personality_v0+0xbe>
 80090ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090bc:	441f      	add	r7, r3
 80090be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090c0:	b110      	cbz	r0, 80090c8 <__gxx_personality_v0+0xc8>
 80090c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090c4:	3801      	subs	r0, #1
 80090c6:	4418      	add	r0, r3
 80090c8:	2f00      	cmp	r7, #0
 80090ca:	d0ac      	beq.n	8009026 <__gxx_personality_v0+0x26>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f000 8104 	beq.w	80092da <__gxx_personality_v0+0x2da>
 80090d2:	f015 0308 	ands.w	r3, r5, #8
 80090d6:	9302      	str	r3, [sp, #8]
 80090d8:	d034      	beq.n	8009144 <__gxx_personality_v0+0x144>
 80090da:	2347      	movs	r3, #71	; 0x47
 80090dc:	7023      	strb	r3, [r4, #0]
 80090de:	234e      	movs	r3, #78	; 0x4e
 80090e0:	7063      	strb	r3, [r4, #1]
 80090e2:	2355      	movs	r3, #85	; 0x55
 80090e4:	70a3      	strb	r3, [r4, #2]
 80090e6:	2343      	movs	r3, #67	; 0x43
 80090e8:	70e3      	strb	r3, [r4, #3]
 80090ea:	2346      	movs	r3, #70	; 0x46
 80090ec:	7123      	strb	r3, [r4, #4]
 80090ee:	234f      	movs	r3, #79	; 0x4f
 80090f0:	7163      	strb	r3, [r4, #5]
 80090f2:	2352      	movs	r3, #82	; 0x52
 80090f4:	71a3      	strb	r3, [r4, #6]
 80090f6:	2300      	movs	r3, #0
 80090f8:	71e3      	strb	r3, [r4, #7]
 80090fa:	f04f 0a00 	mov.w	sl, #0
 80090fe:	f06f 0b03 	mvn.w	fp, #3
 8009102:	a907      	add	r1, sp, #28
 8009104:	f7ff feaf 	bl	8008e66 <_ZL12read_sleb128PKhPl>
 8009108:	a908      	add	r1, sp, #32
 800910a:	9003      	str	r0, [sp, #12]
 800910c:	f7ff feab 	bl	8008e66 <_ZL12read_sleb128PKhPl>
 8009110:	9907      	ldr	r1, [sp, #28]
 8009112:	2900      	cmp	r1, #0
 8009114:	d067      	beq.n	80091e6 <__gxx_personality_v0+0x1e6>
 8009116:	dd3e      	ble.n	8009196 <__gxx_personality_v0+0x196>
 8009118:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800911c:	28ff      	cmp	r0, #255	; 0xff
 800911e:	d034      	beq.n	800918a <__gxx_personality_v0+0x18a>
 8009120:	f000 0307 	and.w	r3, r0, #7
 8009124:	2b04      	cmp	r3, #4
 8009126:	f63f af7a 	bhi.w	800901e <__gxx_personality_v0+0x1e>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <__gxx_personality_v0+0x130>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009157 	.word	0x08009157
 8009134:	0800901f 	.word	0x0800901f
 8009138:	08009191 	.word	0x08009191
 800913c:	08009157 	.word	0x08009157
 8009140:	08009185 	.word	0x08009185
 8009144:	79e3      	ldrb	r3, [r4, #7]
 8009146:	2b01      	cmp	r3, #1
 8009148:	bf0c      	ite	eq
 800914a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800914e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8009152:	9304      	str	r3, [sp, #16]
 8009154:	e7d1      	b.n	80090fa <__gxx_personality_v0+0xfa>
 8009156:	f04f 0c04 	mov.w	ip, #4
 800915a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800915c:	ab09      	add	r3, sp, #36	; 0x24
 800915e:	fb0c 2211 	mls	r2, ip, r1, r2
 8009162:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009164:	f7ff fe97 	bl	8008e96 <_ZL28read_encoded_value_with_basehjPKhPj>
 8009168:	9909      	ldr	r1, [sp, #36]	; 0x24
 800916a:	b131      	cbz	r1, 800917a <__gxx_personality_v0+0x17a>
 800916c:	b37c      	cbz	r4, 80091ce <__gxx_personality_v0+0x1ce>
 800916e:	ab04      	add	r3, sp, #16
 8009170:	2200      	movs	r2, #0
 8009172:	4620      	mov	r0, r4
 8009174:	f7ff fdca 	bl	8008d0c <__cxa_type_match>
 8009178:	b348      	cbz	r0, 80091ce <__gxx_personality_v0+0x1ce>
 800917a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800917e:	f04f 0a03 	mov.w	sl, #3
 8009182:	e038      	b.n	80091f6 <__gxx_personality_v0+0x1f6>
 8009184:	f04f 0c08 	mov.w	ip, #8
 8009188:	e7e7      	b.n	800915a <__gxx_personality_v0+0x15a>
 800918a:	f04f 0c00 	mov.w	ip, #0
 800918e:	e7e4      	b.n	800915a <__gxx_personality_v0+0x15a>
 8009190:	f04f 0c02 	mov.w	ip, #2
 8009194:	e7e1      	b.n	800915a <__gxx_personality_v0+0x15a>
 8009196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009198:	fb01 b10b 	mla	r1, r1, fp, fp
 800919c:	eb03 0901 	add.w	r9, r3, r1
 80091a0:	b1e4      	cbz	r4, 80091dc <__gxx_personality_v0+0x1dc>
 80091a2:	9a02      	ldr	r2, [sp, #8]
 80091a4:	b9d2      	cbnz	r2, 80091dc <__gxx_personality_v0+0x1dc>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	9306      	str	r3, [sp, #24]
 80091aa:	f1a9 0904 	sub.w	r9, r9, #4
 80091ae:	f859 1f04 	ldr.w	r1, [r9, #4]!
 80091b2:	b141      	cbz	r1, 80091c6 <__gxx_personality_v0+0x1c6>
 80091b4:	ab06      	add	r3, sp, #24
 80091b6:	2200      	movs	r2, #0
 80091b8:	4449      	add	r1, r9
 80091ba:	4620      	mov	r0, r4
 80091bc:	f7ff fda6 	bl	8008d0c <__cxa_type_match>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d0f4      	beq.n	80091ae <__gxx_personality_v0+0x1ae>
 80091c4:	2101      	movs	r1, #1
 80091c6:	f081 0101 	eor.w	r1, r1, #1
 80091ca:	2900      	cmp	r1, #0
 80091cc:	d1d5      	bne.n	800917a <__gxx_personality_v0+0x17a>
 80091ce:	9808      	ldr	r0, [sp, #32]
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d07e      	beq.n	80092d2 <__gxx_personality_v0+0x2d2>
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	4403      	add	r3, r0
 80091d8:	4618      	mov	r0, r3
 80091da:	e792      	b.n	8009102 <__gxx_personality_v0+0x102>
 80091dc:	5859      	ldr	r1, [r3, r1]
 80091de:	fab1 f181 	clz	r1, r1
 80091e2:	0949      	lsrs	r1, r1, #5
 80091e4:	e7f1      	b.n	80091ca <__gxx_personality_v0+0x1ca>
 80091e6:	f04f 0a01 	mov.w	sl, #1
 80091ea:	e7f0      	b.n	80091ce <__gxx_personality_v0+0x1ce>
 80091ec:	f04f 0900 	mov.w	r9, #0
 80091f0:	464f      	mov	r7, r9
 80091f2:	f04f 0a01 	mov.w	sl, #1
 80091f6:	07eb      	lsls	r3, r5, #31
 80091f8:	f57f af4a 	bpl.w	8009090 <__gxx_personality_v0+0x90>
 80091fc:	f1ba 0f02 	cmp.w	sl, #2
 8009200:	f43f af11 	beq.w	8009026 <__gxx_personality_v0+0x26>
 8009204:	210d      	movs	r1, #13
 8009206:	4630      	mov	r0, r6
 8009208:	9d04      	ldr	r5, [sp, #16]
 800920a:	f7ff fe88 	bl	8008f1e <_Unwind_GetGR>
 800920e:	e9c4 980a 	strd	r9, r8, [r4, #40]	; 0x28
 8009212:	e9c4 0508 	strd	r0, r5, [r4, #32]
 8009216:	6327      	str	r7, [r4, #48]	; 0x30
 8009218:	2006      	movs	r0, #6
 800921a:	e70a      	b.n	8009032 <__gxx_personality_v0+0x32>
 800921c:	f1b9 0f00 	cmp.w	r9, #0
 8009220:	da2a      	bge.n	8009278 <__gxx_personality_v0+0x278>
 8009222:	f000 fa7d 	bl	8009720 <_ZSt10unexpectedv>
 8009226:	f1ba 0f01 	cmp.w	sl, #1
 800922a:	d102      	bne.n	8009232 <__gxx_personality_v0+0x232>
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fe68 	bl	8009f02 <__cxa_call_terminate>
 8009232:	f1b9 0f00 	cmp.w	r9, #0
 8009236:	da1f      	bge.n	8009278 <__gxx_personality_v0+0x278>
 8009238:	aa0a      	add	r2, sp, #40	; 0x28
 800923a:	4641      	mov	r1, r8
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff feb0 	bl	8008fa2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8009242:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8009246:	28ff      	cmp	r0, #255	; 0xff
 8009248:	d00f      	beq.n	800926a <__gxx_personality_v0+0x26a>
 800924a:	4631      	mov	r1, r6
 800924c:	f7ff fe73 	bl	8008f36 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8009250:	f06f 0303 	mvn.w	r3, #3
 8009254:	fb09 3203 	mla	r2, r9, r3, r3
 8009258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800925a:	900c      	str	r0, [sp, #48]	; 0x30
 800925c:	4413      	add	r3, r2
 800925e:	2200      	movs	r2, #0
 8009260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009264:	b119      	cbz	r1, 800926e <__gxx_personality_v0+0x26e>
 8009266:	3201      	adds	r2, #1
 8009268:	e7fa      	b.n	8009260 <__gxx_personality_v0+0x260>
 800926a:	4628      	mov	r0, r5
 800926c:	e7f0      	b.n	8009250 <__gxx_personality_v0+0x250>
 800926e:	e9c4 200a 	strd	r2, r0, [r4, #40]	; 0x28
 8009272:	2204      	movs	r2, #4
 8009274:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8009278:	ab10      	add	r3, sp, #64	; 0x40
 800927a:	4630      	mov	r0, r6
 800927c:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	2300      	movs	r3, #0
 8009284:	461a      	mov	r2, r3
 8009286:	4619      	mov	r1, r3
 8009288:	f7f8 f812 	bl	80012b0 <_Unwind_VRS_Set>
 800928c:	ab10      	add	r3, sp, #64	; 0x40
 800928e:	2201      	movs	r2, #1
 8009290:	f843 9d20 	str.w	r9, [r3, #-32]!
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	2300      	movs	r3, #0
 8009298:	4619      	mov	r1, r3
 800929a:	4630      	mov	r0, r6
 800929c:	f7f8 f808 	bl	80012b0 <_Unwind_VRS_Set>
 80092a0:	210f      	movs	r1, #15
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7ff fe3b 	bl	8008f1e <_Unwind_GetGR>
 80092a8:	ab10      	add	r3, sp, #64	; 0x40
 80092aa:	f000 0001 	and.w	r0, r0, #1
 80092ae:	4307      	orrs	r7, r0
 80092b0:	f843 7d24 	str.w	r7, [r3, #-36]!
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	2300      	movs	r3, #0
 80092b8:	220f      	movs	r2, #15
 80092ba:	4619      	mov	r1, r3
 80092bc:	4630      	mov	r0, r6
 80092be:	f7f7 fff7 	bl	80012b0 <_Unwind_VRS_Set>
 80092c2:	f1ba 0f02 	cmp.w	sl, #2
 80092c6:	d102      	bne.n	80092ce <__gxx_personality_v0+0x2ce>
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7ff fd7d 	bl	8008dc8 <__cxa_begin_cleanup>
 80092ce:	2007      	movs	r0, #7
 80092d0:	e6af      	b.n	8009032 <__gxx_personality_v0+0x32>
 80092d2:	f1ba 0f00 	cmp.w	sl, #0
 80092d6:	f43f aea6 	beq.w	8009026 <__gxx_personality_v0+0x26>
 80092da:	4681      	mov	r9, r0
 80092dc:	f04f 0a02 	mov.w	sl, #2
 80092e0:	e789      	b.n	80091f6 <__gxx_personality_v0+0x1f6>
 80092e2:	aa10      	add	r2, sp, #64	; 0x40
 80092e4:	4643      	mov	r3, r8
 80092e6:	f842 4d2c 	str.w	r4, [r2, #-44]!
 80092ea:	4641      	mov	r1, r8
 80092ec:	9200      	str	r2, [sp, #0]
 80092ee:	4630      	mov	r0, r6
 80092f0:	220c      	movs	r2, #12
 80092f2:	f045 0502 	orr.w	r5, r5, #2
 80092f6:	f7f7 ffdb 	bl	80012b0 <_Unwind_VRS_Set>
 80092fa:	4630      	mov	r0, r6
 80092fc:	f7f8 fd62 	bl	8001dc4 <_Unwind_GetLanguageSpecificData>
 8009300:	4680      	mov	r8, r0
 8009302:	2800      	cmp	r0, #0
 8009304:	f43f ae8f 	beq.w	8009026 <__gxx_personality_v0+0x26>
 8009308:	4601      	mov	r1, r0
 800930a:	aa0a      	add	r2, sp, #40	; 0x28
 800930c:	4630      	mov	r0, r6
 800930e:	f7ff fe48 	bl	8008fa2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8009312:	4681      	mov	r9, r0
 8009314:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8009318:	28ff      	cmp	r0, #255	; 0xff
 800931a:	f43f aec5 	beq.w	80090a8 <__gxx_personality_v0+0xa8>
 800931e:	4631      	mov	r1, r6
 8009320:	f7ff fe09 	bl	8008f36 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8009324:	900c      	str	r0, [sp, #48]	; 0x30
 8009326:	210f      	movs	r1, #15
 8009328:	4630      	mov	r0, r6
 800932a:	f7ff fdf8 	bl	8008f1e <_Unwind_GetGR>
 800932e:	f020 0001 	bic.w	r0, r0, #1
 8009332:	1e47      	subs	r7, r0, #1
 8009334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009336:	454b      	cmp	r3, r9
 8009338:	f67f af58 	bls.w	80091ec <__gxx_personality_v0+0x1ec>
 800933c:	464a      	mov	r2, r9
 800933e:	ab06      	add	r3, sp, #24
 8009340:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8009344:	2000      	movs	r0, #0
 8009346:	f7ff fe18 	bl	8008f7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800934a:	ab07      	add	r3, sp, #28
 800934c:	4602      	mov	r2, r0
 800934e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8009352:	2000      	movs	r0, #0
 8009354:	f7ff fe11 	bl	8008f7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8009358:	ab08      	add	r3, sp, #32
 800935a:	4602      	mov	r2, r0
 800935c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8009360:	2000      	movs	r0, #0
 8009362:	f7ff fe0a 	bl	8008f7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8009366:	a909      	add	r1, sp, #36	; 0x24
 8009368:	f7ff fd6c 	bl	8008e44 <_ZL12read_uleb128PKhPm>
 800936c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936e:	9a06      	ldr	r2, [sp, #24]
 8009370:	4413      	add	r3, r2
 8009372:	42bb      	cmp	r3, r7
 8009374:	4681      	mov	r9, r0
 8009376:	f67f ae99 	bls.w	80090ac <__gxx_personality_v0+0xac>
 800937a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800937e:	e7d9      	b.n	8009334 <__gxx_personality_v0+0x334>

08009380 <__cxa_rethrow>:
 8009380:	b508      	push	{r3, lr}
 8009382:	f7ff fd5b 	bl	8008e3c <__cxa_get_globals>
 8009386:	e9d0 4200 	ldrd	r4, r2, [r0]
 800938a:	3201      	adds	r2, #1
 800938c:	6042      	str	r2, [r0, #4]
 800938e:	b34c      	cbz	r4, 80093e4 <__cxa_rethrow+0x64>
 8009390:	f894 2020 	ldrb.w	r2, [r4, #32]
 8009394:	2a47      	cmp	r2, #71	; 0x47
 8009396:	d127      	bne.n	80093e8 <__cxa_rethrow+0x68>
 8009398:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800939c:	2a4e      	cmp	r2, #78	; 0x4e
 800939e:	d123      	bne.n	80093e8 <__cxa_rethrow+0x68>
 80093a0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80093a4:	2a55      	cmp	r2, #85	; 0x55
 80093a6:	d11f      	bne.n	80093e8 <__cxa_rethrow+0x68>
 80093a8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80093ac:	2a43      	cmp	r2, #67	; 0x43
 80093ae:	d11b      	bne.n	80093e8 <__cxa_rethrow+0x68>
 80093b0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80093b4:	2a43      	cmp	r2, #67	; 0x43
 80093b6:	d117      	bne.n	80093e8 <__cxa_rethrow+0x68>
 80093b8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80093bc:	2a2b      	cmp	r2, #43	; 0x2b
 80093be:	d113      	bne.n	80093e8 <__cxa_rethrow+0x68>
 80093c0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80093c4:	2a2b      	cmp	r2, #43	; 0x2b
 80093c6:	d10f      	bne.n	80093e8 <__cxa_rethrow+0x68>
 80093c8:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80093cc:	2a01      	cmp	r2, #1
 80093ce:	d80b      	bhi.n	80093e8 <__cxa_rethrow+0x68>
 80093d0:	6962      	ldr	r2, [r4, #20]
 80093d2:	4252      	negs	r2, r2
 80093d4:	6162      	str	r2, [r4, #20]
 80093d6:	3420      	adds	r4, #32
 80093d8:	4620      	mov	r0, r4
 80093da:	f7f8 fb15 	bl	8001a08 <_Unwind_Resume_or_Rethrow>
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 f824 	bl	800942c <__cxa_begin_catch>
 80093e4:	f000 f98a 	bl	80096fc <_ZSt9terminatev>
 80093e8:	2200      	movs	r2, #0
 80093ea:	6002      	str	r2, [r0, #0]
 80093ec:	e7f3      	b.n	80093d6 <__cxa_rethrow+0x56>

080093ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80093ee:	7803      	ldrb	r3, [r0, #0]
 80093f0:	2b47      	cmp	r3, #71	; 0x47
 80093f2:	d117      	bne.n	8009424 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80093f4:	7843      	ldrb	r3, [r0, #1]
 80093f6:	2b4e      	cmp	r3, #78	; 0x4e
 80093f8:	d114      	bne.n	8009424 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80093fa:	7883      	ldrb	r3, [r0, #2]
 80093fc:	2b55      	cmp	r3, #85	; 0x55
 80093fe:	d111      	bne.n	8009424 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009400:	78c3      	ldrb	r3, [r0, #3]
 8009402:	2b43      	cmp	r3, #67	; 0x43
 8009404:	d10e      	bne.n	8009424 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009406:	7903      	ldrb	r3, [r0, #4]
 8009408:	2b43      	cmp	r3, #67	; 0x43
 800940a:	d10b      	bne.n	8009424 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800940c:	7943      	ldrb	r3, [r0, #5]
 800940e:	2b2b      	cmp	r3, #43	; 0x2b
 8009410:	d108      	bne.n	8009424 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009412:	7983      	ldrb	r3, [r0, #6]
 8009414:	2b2b      	cmp	r3, #43	; 0x2b
 8009416:	d105      	bne.n	8009424 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009418:	79c0      	ldrb	r0, [r0, #7]
 800941a:	2801      	cmp	r0, #1
 800941c:	bf8c      	ite	hi
 800941e:	2000      	movhi	r0, #0
 8009420:	2001      	movls	r0, #1
 8009422:	4770      	bx	lr
 8009424:	2000      	movs	r0, #0
 8009426:	4770      	bx	lr

08009428 <__cxa_get_exception_ptr>:
 8009428:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800942a:	4770      	bx	lr

0800942c <__cxa_begin_catch>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4605      	mov	r5, r0
 8009430:	f7ff fd04 	bl	8008e3c <__cxa_get_globals>
 8009434:	4601      	mov	r1, r0
 8009436:	6802      	ldr	r2, [r0, #0]
 8009438:	4628      	mov	r0, r5
 800943a:	f1a5 0420 	sub.w	r4, r5, #32
 800943e:	f7ff ffd6 	bl	80093ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009442:	b930      	cbnz	r0, 8009452 <__cxa_begin_catch+0x26>
 8009444:	b10a      	cbz	r2, 800944a <__cxa_begin_catch+0x1e>
 8009446:	f000 f959 	bl	80096fc <_ZSt9terminatev>
 800944a:	600c      	str	r4, [r1, #0]
 800944c:	4614      	mov	r4, r2
 800944e:	4620      	mov	r0, r4
 8009450:	bd38      	pop	{r3, r4, r5, pc}
 8009452:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	bfb4      	ite	lt
 800945a:	f1c3 0301 	rsblt	r3, r3, #1
 800945e:	3301      	addge	r3, #1
 8009460:	f845 3c0c 	str.w	r3, [r5, #-12]
 8009464:	684b      	ldr	r3, [r1, #4]
 8009466:	42a2      	cmp	r2, r4
 8009468:	f103 33ff 	add.w	r3, r3, #4294967295
 800946c:	604b      	str	r3, [r1, #4]
 800946e:	4628      	mov	r0, r5
 8009470:	bf1c      	itt	ne
 8009472:	f845 2c10 	strne.w	r2, [r5, #-16]
 8009476:	600c      	strne	r4, [r1, #0]
 8009478:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800947a:	f7f7 feef 	bl	800125c <_Unwind_Complete>
 800947e:	e7e6      	b.n	800944e <__cxa_begin_catch+0x22>

08009480 <__cxa_end_catch>:
 8009480:	b510      	push	{r4, lr}
 8009482:	f7ff fcd7 	bl	8008e34 <__cxa_get_globals_fast>
 8009486:	6802      	ldr	r2, [r0, #0]
 8009488:	4601      	mov	r1, r0
 800948a:	b19a      	cbz	r2, 80094b4 <__cxa_end_catch+0x34>
 800948c:	f102 0420 	add.w	r4, r2, #32
 8009490:	4620      	mov	r0, r4
 8009492:	f7ff ffac 	bl	80093ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009496:	b928      	cbnz	r0, 80094a4 <__cxa_end_catch+0x24>
 8009498:	6008      	str	r0, [r1, #0]
 800949a:	4620      	mov	r0, r4
 800949c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a0:	f7f7 bede 	b.w	8001260 <_Unwind_DeleteException>
 80094a4:	6953      	ldr	r3, [r2, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da05      	bge.n	80094b6 <__cxa_end_catch+0x36>
 80094aa:	3301      	adds	r3, #1
 80094ac:	d101      	bne.n	80094b2 <__cxa_end_catch+0x32>
 80094ae:	6910      	ldr	r0, [r2, #16]
 80094b0:	6008      	str	r0, [r1, #0]
 80094b2:	6153      	str	r3, [r2, #20]
 80094b4:	bd10      	pop	{r4, pc}
 80094b6:	3b01      	subs	r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <__cxa_end_catch+0x42>
 80094bc:	6913      	ldr	r3, [r2, #16]
 80094be:	600b      	str	r3, [r1, #0]
 80094c0:	e7eb      	b.n	800949a <__cxa_end_catch+0x1a>
 80094c2:	daf6      	bge.n	80094b2 <__cxa_end_catch+0x32>
 80094c4:	f000 f91a 	bl	80096fc <_ZSt9terminatev>

080094c8 <_Znwj>:
 80094c8:	b510      	push	{r4, lr}
 80094ca:	2800      	cmp	r0, #0
 80094cc:	bf14      	ite	ne
 80094ce:	4604      	movne	r4, r0
 80094d0:	2401      	moveq	r4, #1
 80094d2:	4620      	mov	r0, r4
 80094d4:	f001 ffec 	bl	800b4b0 <malloc>
 80094d8:	b930      	cbnz	r0, 80094e8 <_Znwj+0x20>
 80094da:	f000 f8f9 	bl	80096d0 <_ZSt15get_new_handlerv>
 80094de:	b908      	cbnz	r0, 80094e4 <_Znwj+0x1c>
 80094e0:	f001 fdd3 	bl	800b08a <abort>
 80094e4:	4780      	blx	r0
 80094e6:	e7f4      	b.n	80094d2 <_Znwj+0xa>
 80094e8:	bd10      	pop	{r4, pc}

080094ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80094ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80094ec:	2400      	movs	r4, #0
 80094ee:	2310      	movs	r3, #16
 80094f0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80094f4:	6803      	ldr	r3, [r0, #0]
 80094f6:	9400      	str	r4, [sp, #0]
 80094f8:	4615      	mov	r5, r2
 80094fa:	699e      	ldr	r6, [r3, #24]
 80094fc:	f88d 4004 	strb.w	r4, [sp, #4]
 8009500:	466b      	mov	r3, sp
 8009502:	6812      	ldr	r2, [r2, #0]
 8009504:	47b0      	blx	r6
 8009506:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800950a:	f003 0306 	and.w	r3, r3, #6
 800950e:	2b06      	cmp	r3, #6
 8009510:	bf03      	ittte	eq
 8009512:	9b00      	ldreq	r3, [sp, #0]
 8009514:	602b      	streq	r3, [r5, #0]
 8009516:	2001      	moveq	r0, #1
 8009518:	4620      	movne	r0, r4
 800951a:	b004      	add	sp, #16
 800951c:	bd70      	pop	{r4, r5, r6, pc}

0800951e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800951e:	9800      	ldr	r0, [sp, #0]
 8009520:	4290      	cmp	r0, r2
 8009522:	bf0c      	ite	eq
 8009524:	2006      	moveq	r0, #6
 8009526:	2001      	movne	r0, #1
 8009528:	4770      	bx	lr
	...

0800952c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800952c:	b510      	push	{r4, lr}
 800952e:	4b03      	ldr	r3, [pc, #12]	; (800953c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8009530:	6003      	str	r3, [r0, #0]
 8009532:	4604      	mov	r4, r0
 8009534:	f000 fcaf 	bl	8009e96 <_ZNSt9type_infoD1Ev>
 8009538:	4620      	mov	r0, r4
 800953a:	bd10      	pop	{r4, pc}
 800953c:	0800fe78 	.word	0x0800fe78

08009540 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8009540:	b510      	push	{r4, lr}
 8009542:	4604      	mov	r4, r0
 8009544:	f7ff fff2 	bl	800952c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009548:	4620      	mov	r0, r4
 800954a:	2108      	movs	r1, #8
 800954c:	f000 fcfc 	bl	8009f48 <_ZdlPvj>
 8009550:	4620      	mov	r0, r4
 8009552:	bd10      	pop	{r4, pc}

08009554 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8009554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009558:	4698      	mov	r8, r3
 800955a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800955e:	9e06      	ldr	r6, [sp, #24]
 8009560:	429e      	cmp	r6, r3
 8009562:	4607      	mov	r7, r0
 8009564:	4615      	mov	r5, r2
 8009566:	d107      	bne.n	8009578 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8009568:	9907      	ldr	r1, [sp, #28]
 800956a:	f000 fc97 	bl	8009e9c <_ZNKSt9type_infoeqERKS_>
 800956e:	b118      	cbz	r0, 8009578 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8009570:	7165      	strb	r5, [r4, #5]
 8009572:	2000      	movs	r0, #0
 8009574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009578:	4641      	mov	r1, r8
 800957a:	4638      	mov	r0, r7
 800957c:	f000 fc8e 	bl	8009e9c <_ZNKSt9type_infoeqERKS_>
 8009580:	2800      	cmp	r0, #0
 8009582:	d0f6      	beq.n	8009572 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 8009584:	2301      	movs	r3, #1
 8009586:	6026      	str	r6, [r4, #0]
 8009588:	7125      	strb	r5, [r4, #4]
 800958a:	71a3      	strb	r3, [r4, #6]
 800958c:	e7f1      	b.n	8009572 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

0800958e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800958e:	b538      	push	{r3, r4, r5, lr}
 8009590:	4615      	mov	r5, r2
 8009592:	461c      	mov	r4, r3
 8009594:	f000 fc82 	bl	8009e9c <_ZNKSt9type_infoeqERKS_>
 8009598:	b120      	cbz	r0, 80095a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800959a:	2308      	movs	r3, #8
 800959c:	60e3      	str	r3, [r4, #12]
 800959e:	2306      	movs	r3, #6
 80095a0:	6025      	str	r5, [r4, #0]
 80095a2:	7123      	strb	r3, [r4, #4]
 80095a4:	bd38      	pop	{r3, r4, r5, pc}

080095a6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80095a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095aa:	4605      	mov	r5, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	4616      	mov	r6, r2
 80095b0:	461f      	mov	r7, r3
 80095b2:	f000 fc73 	bl	8009e9c <_ZNKSt9type_infoeqERKS_>
 80095b6:	b948      	cbnz	r0, 80095cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80095b8:	2f03      	cmp	r7, #3
 80095ba:	d807      	bhi.n	80095cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	4632      	mov	r2, r6
 80095c0:	4629      	mov	r1, r5
 80095c2:	4620      	mov	r0, r4
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ca:	4718      	bx	r3
 80095cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80095d4:	6003      	str	r3, [r0, #0]
 80095d6:	4604      	mov	r4, r0
 80095d8:	f7ff ffa8 	bl	800952c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80095dc:	4620      	mov	r0, r4
 80095de:	bd10      	pop	{r4, pc}
 80095e0:	0800fed8 	.word	0x0800fed8

080095e4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	4604      	mov	r4, r0
 80095e8:	f7ff fff2 	bl	80095d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80095ec:	4620      	mov	r0, r4
 80095ee:	210c      	movs	r1, #12
 80095f0:	f000 fcaa 	bl	8009f48 <_ZdlPvj>
 80095f4:	4620      	mov	r0, r4
 80095f6:	bd10      	pop	{r4, pc}

080095f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80095f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095fc:	9e06      	ldr	r6, [sp, #24]
 80095fe:	4296      	cmp	r6, r2
 8009600:	4607      	mov	r7, r0
 8009602:	4688      	mov	r8, r1
 8009604:	4615      	mov	r5, r2
 8009606:	461c      	mov	r4, r3
 8009608:	d00a      	beq.n	8009620 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 800960a:	68b8      	ldr	r0, [r7, #8]
 800960c:	6803      	ldr	r3, [r0, #0]
 800960e:	9606      	str	r6, [sp, #24]
 8009610:	6a1e      	ldr	r6, [r3, #32]
 8009612:	462a      	mov	r2, r5
 8009614:	4623      	mov	r3, r4
 8009616:	4641      	mov	r1, r8
 8009618:	46b4      	mov	ip, r6
 800961a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800961e:	4760      	bx	ip
 8009620:	4619      	mov	r1, r3
 8009622:	f000 fc3b 	bl	8009e9c <_ZNKSt9type_infoeqERKS_>
 8009626:	2800      	cmp	r0, #0
 8009628:	d0ef      	beq.n	800960a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 800962a:	2006      	movs	r0, #6
 800962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009630:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	460e      	mov	r6, r1
 8009636:	4619      	mov	r1, r3
 8009638:	4683      	mov	fp, r0
 800963a:	4617      	mov	r7, r2
 800963c:	4699      	mov	r9, r3
 800963e:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 8009642:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 8009646:	f000 fc29 	bl	8009e9c <_ZNKSt9type_infoeqERKS_>
 800964a:	b190      	cbz	r0, 8009672 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800964c:	2e00      	cmp	r6, #0
 800964e:	602c      	str	r4, [r5, #0]
 8009650:	712f      	strb	r7, [r5, #4]
 8009652:	db09      	blt.n	8009668 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8009654:	4434      	add	r4, r6
 8009656:	45a0      	cmp	r8, r4
 8009658:	bf0c      	ite	eq
 800965a:	2406      	moveq	r4, #6
 800965c:	2401      	movne	r4, #1
 800965e:	71ac      	strb	r4, [r5, #6]
 8009660:	2000      	movs	r0, #0
 8009662:	b001      	add	sp, #4
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	3602      	adds	r6, #2
 800966a:	d1f9      	bne.n	8009660 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800966c:	2301      	movs	r3, #1
 800966e:	71ab      	strb	r3, [r5, #6]
 8009670:	e7f6      	b.n	8009660 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009672:	4544      	cmp	r4, r8
 8009674:	d106      	bne.n	8009684 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8009676:	4651      	mov	r1, sl
 8009678:	4658      	mov	r0, fp
 800967a:	f000 fc0f 	bl	8009e9c <_ZNKSt9type_infoeqERKS_>
 800967e:	b108      	cbz	r0, 8009684 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8009680:	716f      	strb	r7, [r5, #5]
 8009682:	e7ed      	b.n	8009660 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009684:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009688:	6803      	ldr	r3, [r0, #0]
 800968a:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 800968e:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8009692:	69dc      	ldr	r4, [r3, #28]
 8009694:	463a      	mov	r2, r7
 8009696:	464b      	mov	r3, r9
 8009698:	4631      	mov	r1, r6
 800969a:	46a4      	mov	ip, r4
 800969c:	b001      	add	sp, #4
 800969e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a2:	4760      	bx	ip

080096a4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	4604      	mov	r4, r0
 80096aa:	460d      	mov	r5, r1
 80096ac:	4616      	mov	r6, r2
 80096ae:	461f      	mov	r7, r3
 80096b0:	f7ff ff6d 	bl	800958e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80096b4:	b948      	cbnz	r0, 80096ca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80096b6:	68a0      	ldr	r0, [r4, #8]
 80096b8:	6803      	ldr	r3, [r0, #0]
 80096ba:	699c      	ldr	r4, [r3, #24]
 80096bc:	4632      	mov	r2, r6
 80096be:	463b      	mov	r3, r7
 80096c0:	4629      	mov	r1, r5
 80096c2:	46a4      	mov	ip, r4
 80096c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	4760      	bx	ip
 80096ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080096d0 <_ZSt15get_new_handlerv>:
 80096d0:	4b02      	ldr	r3, [pc, #8]	; (80096dc <_ZSt15get_new_handlerv+0xc>)
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	f3bf 8f5b 	dmb	ish
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	200008b4 	.word	0x200008b4

080096e0 <_ZdlPv>:
 80096e0:	f001 beee 	b.w	800b4c0 <free>

080096e4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80096e4:	b508      	push	{r3, lr}
 80096e6:	4780      	blx	r0
 80096e8:	f001 fccf 	bl	800b08a <abort>

080096ec <_ZSt13get_terminatev>:
 80096ec:	4b02      	ldr	r3, [pc, #8]	; (80096f8 <_ZSt13get_terminatev+0xc>)
 80096ee:	6818      	ldr	r0, [r3, #0]
 80096f0:	f3bf 8f5b 	dmb	ish
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000400 	.word	0x20000400

080096fc <_ZSt9terminatev>:
 80096fc:	b508      	push	{r3, lr}
 80096fe:	f7ff fff5 	bl	80096ec <_ZSt13get_terminatev>
 8009702:	f7ff ffef 	bl	80096e4 <_ZN10__cxxabiv111__terminateEPFvvE>

08009706 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8009706:	b508      	push	{r3, lr}
 8009708:	4780      	blx	r0
 800970a:	f7ff fff7 	bl	80096fc <_ZSt9terminatev>
	...

08009710 <_ZSt14get_unexpectedv>:
 8009710:	4b02      	ldr	r3, [pc, #8]	; (800971c <_ZSt14get_unexpectedv+0xc>)
 8009712:	6818      	ldr	r0, [r3, #0]
 8009714:	f3bf 8f5b 	dmb	ish
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	200003fc 	.word	0x200003fc

08009720 <_ZSt10unexpectedv>:
 8009720:	b508      	push	{r3, lr}
 8009722:	f7ff fff5 	bl	8009710 <_ZSt14get_unexpectedv>
 8009726:	f7ff ffee 	bl	8009706 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

0800972c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4c08      	ldr	r4, [pc, #32]	; (8009750 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8009730:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8009734:	4628      	mov	r0, r5
 8009736:	60e5      	str	r5, [r4, #12]
 8009738:	f001 feba 	bl	800b4b0 <malloc>
 800973c:	60a0      	str	r0, [r4, #8]
 800973e:	b910      	cbnz	r0, 8009746 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8009740:	60e0      	str	r0, [r4, #12]
 8009742:	6060      	str	r0, [r4, #4]
 8009744:	bd38      	pop	{r3, r4, r5, pc}
 8009746:	2300      	movs	r3, #0
 8009748:	6060      	str	r0, [r4, #4]
 800974a:	6005      	str	r5, [r0, #0]
 800974c:	6043      	str	r3, [r0, #4]
 800974e:	e7f9      	b.n	8009744 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8009750:	200008b8 	.word	0x200008b8

08009754 <_ZNKSt11logic_error4whatEv>:
 8009754:	6840      	ldr	r0, [r0, #4]
 8009756:	4770      	bx	lr

08009758 <_ZNSt11logic_errorD1Ev>:
 8009758:	b510      	push	{r4, lr}
 800975a:	4b05      	ldr	r3, [pc, #20]	; (8009770 <_ZNSt11logic_errorD1Ev+0x18>)
 800975c:	4604      	mov	r4, r0
 800975e:	f840 3b04 	str.w	r3, [r0], #4
 8009762:	f000 f885 	bl	8009870 <_ZNSsD1Ev>
 8009766:	4620      	mov	r0, r4
 8009768:	f000 fb94 	bl	8009e94 <_ZNSt9exceptionD1Ev>
 800976c:	4620      	mov	r0, r4
 800976e:	bd10      	pop	{r4, pc}
 8009770:	0800ff44 	.word	0x0800ff44

08009774 <_ZNSt16invalid_argumentD1Ev>:
 8009774:	b510      	push	{r4, lr}
 8009776:	4b03      	ldr	r3, [pc, #12]	; (8009784 <_ZNSt16invalid_argumentD1Ev+0x10>)
 8009778:	6003      	str	r3, [r0, #0]
 800977a:	4604      	mov	r4, r0
 800977c:	f7ff ffec 	bl	8009758 <_ZNSt11logic_errorD1Ev>
 8009780:	4620      	mov	r0, r4
 8009782:	bd10      	pop	{r4, pc}
 8009784:	0800ff58 	.word	0x0800ff58

08009788 <_ZNSt11logic_errorD0Ev>:
 8009788:	b510      	push	{r4, lr}
 800978a:	4604      	mov	r4, r0
 800978c:	f7ff ffe4 	bl	8009758 <_ZNSt11logic_errorD1Ev>
 8009790:	4620      	mov	r0, r4
 8009792:	f7ff ffa5 	bl	80096e0 <_ZdlPv>
 8009796:	4620      	mov	r0, r4
 8009798:	bd10      	pop	{r4, pc}

0800979a <_ZNSt16invalid_argumentD0Ev>:
 800979a:	b510      	push	{r4, lr}
 800979c:	4604      	mov	r4, r0
 800979e:	f7ff ffe9 	bl	8009774 <_ZNSt16invalid_argumentD1Ev>
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7ff ff9c 	bl	80096e0 <_ZdlPv>
 80097a8:	4620      	mov	r0, r4
 80097aa:	bd10      	pop	{r4, pc}

080097ac <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80097ac:	b10a      	cbz	r2, 80097b2 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80097ae:	f001 be8f 	b.w	800b4d0 <memcmp>
 80097b2:	4610      	mov	r0, r2
 80097b4:	4770      	bx	lr

080097b6 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 80097b6:	4613      	mov	r3, r2
 80097b8:	460a      	mov	r2, r1
 80097ba:	b111      	cbz	r1, 80097c2 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 80097bc:	7819      	ldrb	r1, [r3, #0]
 80097be:	f7f6 bd0f 	b.w	80001e0 <memchr>
 80097c2:	4608      	mov	r0, r1
 80097c4:	4770      	bx	lr

080097c6 <_ZNSs7_M_copyEPcPKcj>:
 80097c6:	2a01      	cmp	r2, #1
 80097c8:	b430      	push	{r4, r5}
 80097ca:	d103      	bne.n	80097d4 <_ZNSs7_M_copyEPcPKcj+0xe>
 80097cc:	780b      	ldrb	r3, [r1, #0]
 80097ce:	7003      	strb	r3, [r0, #0]
 80097d0:	bc30      	pop	{r4, r5}
 80097d2:	4770      	bx	lr
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	d0fb      	beq.n	80097d0 <_ZNSs7_M_copyEPcPKcj+0xa>
 80097d8:	bc30      	pop	{r4, r5}
 80097da:	f001 be88 	b.w	800b4ee <memcpy>
	...

080097e0 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 80097e0:	4b04      	ldr	r3, [pc, #16]	; (80097f4 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 80097e2:	4298      	cmp	r0, r3
 80097e4:	d004      	beq.n	80097f0 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 80097e6:	2300      	movs	r3, #0
 80097e8:	6083      	str	r3, [r0, #8]
 80097ea:	6001      	str	r1, [r0, #0]
 80097ec:	4408      	add	r0, r1
 80097ee:	7303      	strb	r3, [r0, #12]
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	200008c8 	.word	0x200008c8

080097f8 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 80097f8:	4b13      	ldr	r3, [pc, #76]	; (8009848 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
 80097fa:	4298      	cmp	r0, r3
 80097fc:	b510      	push	{r4, lr}
 80097fe:	4604      	mov	r4, r0
 8009800:	d902      	bls.n	8009808 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8009802:	4812      	ldr	r0, [pc, #72]	; (800984c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
 8009804:	f000 f88d 	bl	8009922 <_ZSt20__throw_length_errorPKc>
 8009808:	4288      	cmp	r0, r1
 800980a:	d903      	bls.n	8009814 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 800980c:	004b      	lsls	r3, r1, #1
 800980e:	4298      	cmp	r0, r3
 8009810:	bf38      	it	cc
 8009812:	461c      	movcc	r4, r3
 8009814:	f104 031d 	add.w	r3, r4, #29
 8009818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800981c:	f104 000d 	add.w	r0, r4, #13
 8009820:	d90c      	bls.n	800983c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8009822:	428c      	cmp	r4, r1
 8009824:	d90a      	bls.n	800983c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8009826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800982a:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800982e:	1ae4      	subs	r4, r4, r3
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
 8009832:	429c      	cmp	r4, r3
 8009834:	bf28      	it	cs
 8009836:	461c      	movcs	r4, r3
 8009838:	f104 000d 	add.w	r0, r4, #13
 800983c:	f7ff fe44 	bl	80094c8 <_Znwj>
 8009840:	2200      	movs	r2, #0
 8009842:	6044      	str	r4, [r0, #4]
 8009844:	6082      	str	r2, [r0, #8]
 8009846:	bd10      	pop	{r4, pc}
 8009848:	3ffffffc 	.word	0x3ffffffc
 800984c:	0800ff64 	.word	0x0800ff64

08009850 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 8009850:	f7ff bf46 	b.w	80096e0 <_ZdlPv>

08009854 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 8009854:	4a05      	ldr	r2, [pc, #20]	; (800986c <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 8009856:	4290      	cmp	r0, r2
 8009858:	b510      	push	{r4, lr}
 800985a:	d006      	beq.n	800986a <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 800985c:	6882      	ldr	r2, [r0, #8]
 800985e:	1e54      	subs	r4, r2, #1
 8009860:	2a00      	cmp	r2, #0
 8009862:	6084      	str	r4, [r0, #8]
 8009864:	dc01      	bgt.n	800986a <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8009866:	f7ff fff3 	bl	8009850 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 800986a:	bd10      	pop	{r4, pc}
 800986c:	200008c8 	.word	0x200008c8

08009870 <_ZNSsD1Ev>:
 8009870:	b513      	push	{r0, r1, r4, lr}
 8009872:	4604      	mov	r4, r0
 8009874:	6800      	ldr	r0, [r0, #0]
 8009876:	a901      	add	r1, sp, #4
 8009878:	380c      	subs	r0, #12
 800987a:	f7ff ffeb 	bl	8009854 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 800987e:	4620      	mov	r0, r4
 8009880:	b002      	add	sp, #8
 8009882:	bd10      	pop	{r4, pc}

08009884 <_ZNSs4_Rep10_M_refcopyEv>:
 8009884:	4b03      	ldr	r3, [pc, #12]	; (8009894 <_ZNSs4_Rep10_M_refcopyEv+0x10>)
 8009886:	4298      	cmp	r0, r3
 8009888:	bf1e      	ittt	ne
 800988a:	6883      	ldrne	r3, [r0, #8]
 800988c:	3301      	addne	r3, #1
 800988e:	6083      	strne	r3, [r0, #8]
 8009890:	300c      	adds	r0, #12
 8009892:	4770      	bx	lr
 8009894:	200008c8 	.word	0x200008c8

08009898 <_ZNSs4_Rep8_M_cloneERKSaIcEj>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	4604      	mov	r4, r0
 800989c:	6800      	ldr	r0, [r0, #0]
 800989e:	4410      	add	r0, r2
 80098a0:	460a      	mov	r2, r1
 80098a2:	6861      	ldr	r1, [r4, #4]
 80098a4:	f7ff ffa8 	bl	80097f8 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 80098a8:	6822      	ldr	r2, [r4, #0]
 80098aa:	4606      	mov	r6, r0
 80098ac:	f100 050c 	add.w	r5, r0, #12
 80098b0:	b122      	cbz	r2, 80098bc <_ZNSs4_Rep8_M_cloneERKSaIcEj+0x24>
 80098b2:	f104 010c 	add.w	r1, r4, #12
 80098b6:	4628      	mov	r0, r5
 80098b8:	f7ff ff85 	bl	80097c6 <_ZNSs7_M_copyEPcPKcj>
 80098bc:	4630      	mov	r0, r6
 80098be:	6821      	ldr	r1, [r4, #0]
 80098c0:	f7ff ff8e 	bl	80097e0 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 80098c4:	4628      	mov	r0, r5
 80098c6:	bd70      	pop	{r4, r5, r6, pc}

080098c8 <_ZNSs4_Rep7_M_grabERKSaIcES2_>:
 80098c8:	b508      	push	{r3, lr}
 80098ca:	6883      	ldr	r3, [r0, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	db02      	blt.n	80098d6 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xe>
 80098d0:	f7ff ffd8 	bl	8009884 <_ZNSs4_Rep10_M_refcopyEv>
 80098d4:	bd08      	pop	{r3, pc}
 80098d6:	2200      	movs	r2, #0
 80098d8:	f7ff ffde 	bl	8009898 <_ZNSs4_Rep8_M_cloneERKSaIcEj>
 80098dc:	e7fa      	b.n	80098d4 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xc>

080098de <_ZNSsC1ERKSs>:
 80098de:	b513      	push	{r0, r1, r4, lr}
 80098e0:	4604      	mov	r4, r0
 80098e2:	6808      	ldr	r0, [r1, #0]
 80098e4:	aa01      	add	r2, sp, #4
 80098e6:	4669      	mov	r1, sp
 80098e8:	380c      	subs	r0, #12
 80098ea:	f7ff ffed 	bl	80098c8 <_ZNSs4_Rep7_M_grabERKSaIcES2_>
 80098ee:	6020      	str	r0, [r4, #0]
 80098f0:	4620      	mov	r0, r4
 80098f2:	b002      	add	sp, #8
 80098f4:	bd10      	pop	{r4, pc}
	...

080098f8 <_ZNSt11logic_errorC1ERKS_>:
 80098f8:	b510      	push	{r4, lr}
 80098fa:	4b04      	ldr	r3, [pc, #16]	; (800990c <_ZNSt11logic_errorC1ERKS_+0x14>)
 80098fc:	4604      	mov	r4, r0
 80098fe:	3104      	adds	r1, #4
 8009900:	f840 3b04 	str.w	r3, [r0], #4
 8009904:	f7ff ffeb 	bl	80098de <_ZNSsC1ERKSs>
 8009908:	4620      	mov	r0, r4
 800990a:	bd10      	pop	{r4, pc}
 800990c:	0800ff44 	.word	0x0800ff44

08009910 <_ZSt17__throw_bad_allocv>:
 8009910:	b508      	push	{r3, lr}
 8009912:	f001 fbba 	bl	800b08a <abort>

08009916 <_ZSt19__throw_logic_errorPKc>:
 8009916:	b508      	push	{r3, lr}
 8009918:	f001 fbb7 	bl	800b08a <abort>

0800991c <_ZSt24__throw_invalid_argumentPKc>:
 800991c:	b508      	push	{r3, lr}
 800991e:	f001 fbb4 	bl	800b08a <abort>

08009922 <_ZSt20__throw_length_errorPKc>:
 8009922:	b508      	push	{r3, lr}
 8009924:	f001 fbb1 	bl	800b08a <abort>

08009928 <_ZSt20__throw_out_of_rangePKc>:
 8009928:	b508      	push	{r3, lr}
 800992a:	f001 fbae 	bl	800b08a <abort>

0800992e <_ZSt24__throw_out_of_range_fmtPKcz>:
 800992e:	b40f      	push	{r0, r1, r2, r3}
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	f107 0410 	add.w	r4, r7, #16
 800993a:	f854 5b04 	ldr.w	r5, [r4], #4
 800993e:	4628      	mov	r0, r5
 8009940:	f7f6 fca8 	bl	8000294 <strlen>
 8009944:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8009948:	f023 0307 	bic.w	r3, r3, #7
 800994c:	ebad 0d03 	sub.w	sp, sp, r3
 8009950:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8009954:	4623      	mov	r3, r4
 8009956:	462a      	mov	r2, r5
 8009958:	4668      	mov	r0, sp
 800995a:	607c      	str	r4, [r7, #4]
 800995c:	f000 fb44 	bl	8009fe8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8009960:	f001 fb93 	bl	800b08a <abort>

08009964 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8009964:	b10a      	cbz	r2, 800996a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8009966:	f001 bdc2 	b.w	800b4ee <memcpy>
 800996a:	4770      	bx	lr

0800996c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800996c:	b508      	push	{r3, lr}
 800996e:	680b      	ldr	r3, [r1, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	da02      	bge.n	800997a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8009974:	4809      	ldr	r0, [pc, #36]	; (800999c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8009976:	f7ff ffd4 	bl	8009922 <_ZSt20__throw_length_errorPKc>
 800997a:	4293      	cmp	r3, r2
 800997c:	d908      	bls.n	8009990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800997e:	0052      	lsls	r2, r2, #1
 8009980:	4293      	cmp	r3, r2
 8009982:	d205      	bcs.n	8009990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8009984:	2a00      	cmp	r2, #0
 8009986:	bfb6      	itet	lt
 8009988:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800998c:	600a      	strge	r2, [r1, #0]
 800998e:	600b      	strlt	r3, [r1, #0]
 8009990:	6808      	ldr	r0, [r1, #0]
 8009992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009996:	3001      	adds	r0, #1
 8009998:	f7ff bd96 	b.w	80094c8 <_Znwj>
 800999c:	0801004f 	.word	0x0801004f

080099a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80099a0:	4603      	mov	r3, r0
 80099a2:	f853 0b08 	ldr.w	r0, [r3], #8
 80099a6:	4298      	cmp	r0, r3
 80099a8:	d001      	beq.n	80099ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80099aa:	f7ff be99 	b.w	80096e0 <_ZdlPv>
 80099ae:	4770      	bx	lr

080099b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	6843      	ldr	r3, [r0, #4]
 80099b4:	4299      	cmp	r1, r3
 80099b6:	4614      	mov	r4, r2
 80099b8:	d904      	bls.n	80099c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 80099ba:	460a      	mov	r2, r1
 80099bc:	4802      	ldr	r0, [pc, #8]	; (80099c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80099be:	4621      	mov	r1, r4
 80099c0:	f7ff ffb5 	bl	800992e <_ZSt24__throw_out_of_range_fmtPKcz>
 80099c4:	4608      	mov	r0, r1
 80099c6:	bd10      	pop	{r4, pc}
 80099c8:	0800ffd5 	.word	0x0800ffd5

080099cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80099cc:	b508      	push	{r3, lr}
 80099ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80099d2:	6840      	ldr	r0, [r0, #4]
 80099d4:	3901      	subs	r1, #1
 80099d6:	1a09      	subs	r1, r1, r0
 80099d8:	4291      	cmp	r1, r2
 80099da:	d202      	bcs.n	80099e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80099dc:	4618      	mov	r0, r3
 80099de:	f7ff ffa0 	bl	8009922 <_ZSt20__throw_length_errorPKc>
 80099e2:	bd08      	pop	{r3, pc}

080099e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80099e4:	6803      	ldr	r3, [r0, #0]
 80099e6:	428b      	cmp	r3, r1
 80099e8:	d806      	bhi.n	80099f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80099ea:	6840      	ldr	r0, [r0, #4]
 80099ec:	4418      	add	r0, r3
 80099ee:	4281      	cmp	r1, r0
 80099f0:	bf94      	ite	ls
 80099f2:	2000      	movls	r0, #0
 80099f4:	2001      	movhi	r0, #1
 80099f6:	4770      	bx	lr
 80099f8:	2001      	movs	r0, #1
 80099fa:	4770      	bx	lr

080099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80099fc:	2a01      	cmp	r2, #1
 80099fe:	b510      	push	{r4, lr}
 8009a00:	d102      	bne.n	8009a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8009a02:	780a      	ldrb	r2, [r1, #0]
 8009a04:	7002      	strb	r2, [r0, #0]
 8009a06:	bd10      	pop	{r4, pc}
 8009a08:	f7ff ffac 	bl	8009964 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8009a0c:	e7fb      	b.n	8009a06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08009a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8009a0e:	2a01      	cmp	r2, #1
 8009a10:	b430      	push	{r4, r5}
 8009a12:	d103      	bne.n	8009a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8009a14:	780b      	ldrb	r3, [r1, #0]
 8009a16:	7003      	strb	r3, [r0, #0]
 8009a18:	bc30      	pop	{r4, r5}
 8009a1a:	4770      	bx	lr
 8009a1c:	2a00      	cmp	r2, #0
 8009a1e:	d0fb      	beq.n	8009a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8009a20:	bc30      	pop	{r4, r5}
 8009a22:	f001 bd6f 	b.w	800b504 <memmove>

08009a26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8009a26:	b508      	push	{r3, lr}
 8009a28:	1a52      	subs	r2, r2, r1
 8009a2a:	f7ff ffe7 	bl	80099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009a2e:	bd08      	pop	{r3, pc}

08009a30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8009a30:	b508      	push	{r3, lr}
 8009a32:	1a52      	subs	r2, r2, r1
 8009a34:	f7ff ffe2 	bl	80099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009a38:	bd08      	pop	{r3, pc}

08009a3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8009a3a:	4288      	cmp	r0, r1
 8009a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a3e:	4604      	mov	r4, r0
 8009a40:	460e      	mov	r6, r1
 8009a42:	d01f      	beq.n	8009a84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4a>
 8009a44:	6802      	ldr	r2, [r0, #0]
 8009a46:	684d      	ldr	r5, [r1, #4]
 8009a48:	f100 0308 	add.w	r3, r0, #8
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	bf14      	ite	ne
 8009a50:	6882      	ldrne	r2, [r0, #8]
 8009a52:	220f      	moveq	r2, #15
 8009a54:	42aa      	cmp	r2, r5
 8009a56:	d20b      	bcs.n	8009a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 8009a58:	a902      	add	r1, sp, #8
 8009a5a:	f841 5d04 	str.w	r5, [r1, #-4]!
 8009a5e:	f7ff ff85 	bl	800996c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009a62:	4607      	mov	r7, r0
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff ff9b 	bl	80099a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	6027      	str	r7, [r4, #0]
 8009a6e:	60a3      	str	r3, [r4, #8]
 8009a70:	b125      	cbz	r5, 8009a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x42>
 8009a72:	462a      	mov	r2, r5
 8009a74:	6831      	ldr	r1, [r6, #0]
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	f7ff ffc0 	bl	80099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	6065      	str	r5, [r4, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	555a      	strb	r2, [r3, r5]
 8009a84:	b003      	add	sp, #12
 8009a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8009a88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a8c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8009a90:	4616      	mov	r6, r2
 8009a92:	6842      	ldr	r2, [r0, #4]
 8009a94:	469a      	mov	sl, r3
 8009a96:	eba8 0306 	sub.w	r3, r8, r6
 8009a9a:	1a57      	subs	r7, r2, r1
 8009a9c:	4413      	add	r3, r2
 8009a9e:	6802      	ldr	r2, [r0, #0]
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	f100 0308 	add.w	r3, r0, #8
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	bf14      	ite	ne
 8009aac:	6882      	ldrne	r2, [r0, #8]
 8009aae:	220f      	moveq	r2, #15
 8009ab0:	a901      	add	r1, sp, #4
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	f7ff ff5a 	bl	800996c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009ab8:	1bbf      	subs	r7, r7, r6
 8009aba:	4681      	mov	r9, r0
 8009abc:	b11d      	cbz	r5, 8009ac6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8009abe:	462a      	mov	r2, r5
 8009ac0:	6821      	ldr	r1, [r4, #0]
 8009ac2:	f7ff ff9b 	bl	80099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009ac6:	f1ba 0f00 	cmp.w	sl, #0
 8009aca:	d008      	beq.n	8009ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8009acc:	f1b8 0f00 	cmp.w	r8, #0
 8009ad0:	d005      	beq.n	8009ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	4651      	mov	r1, sl
 8009ad6:	eb09 0005 	add.w	r0, r9, r5
 8009ada:	f7ff ff8f 	bl	80099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009ade:	b147      	cbz	r7, 8009af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8009ae0:	6821      	ldr	r1, [r4, #0]
 8009ae2:	442e      	add	r6, r5
 8009ae4:	eb05 0008 	add.w	r0, r5, r8
 8009ae8:	463a      	mov	r2, r7
 8009aea:	4431      	add	r1, r6
 8009aec:	4448      	add	r0, r9
 8009aee:	f7ff ff85 	bl	80099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009af2:	4620      	mov	r0, r4
 8009af4:	f7ff ff54 	bl	80099a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009af8:	9b01      	ldr	r3, [sp, #4]
 8009afa:	f8c4 9000 	str.w	r9, [r4]
 8009afe:	60a3      	str	r3, [r4, #8]
 8009b00:	b002      	add	sp, #8
 8009b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009b06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8009b06:	f100 0208 	add.w	r2, r0, #8
 8009b0a:	6002      	str	r2, [r0, #0]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	6042      	str	r2, [r0, #4]
 8009b10:	7202      	strb	r2, [r0, #8]
 8009b12:	4770      	bx	lr

08009b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	4604      	mov	r4, r0
 8009b18:	460e      	mov	r6, r1
 8009b1a:	3008      	adds	r0, #8
 8009b1c:	6020      	str	r0, [r4, #0]
 8009b1e:	f856 3b08 	ldr.w	r3, [r6], #8
 8009b22:	429e      	cmp	r6, r3
 8009b24:	460d      	mov	r5, r1
 8009b26:	d10b      	bne.n	8009b40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8009b28:	2210      	movs	r2, #16
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	f7ff ff1a 	bl	8009964 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8009b30:	686b      	ldr	r3, [r5, #4]
 8009b32:	6063      	str	r3, [r4, #4]
 8009b34:	2300      	movs	r3, #0
 8009b36:	602e      	str	r6, [r5, #0]
 8009b38:	606b      	str	r3, [r5, #4]
 8009b3a:	722b      	strb	r3, [r5, #8]
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	688b      	ldr	r3, [r1, #8]
 8009b44:	60a3      	str	r3, [r4, #8]
 8009b46:	e7f3      	b.n	8009b30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	f7ff ff28 	bl	80099a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009b50:	4620      	mov	r0, r4
 8009b52:	bd10      	pop	{r4, pc}

08009b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	460b      	mov	r3, r1
 8009b58:	4606      	mov	r6, r0
 8009b5a:	f853 7b08 	ldr.w	r7, [r3], #8
 8009b5e:	f856 2b08 	ldr.w	r2, [r6], #8
 8009b62:	42bb      	cmp	r3, r7
 8009b64:	4605      	mov	r5, r0
 8009b66:	460c      	mov	r4, r1
 8009b68:	d016      	beq.n	8009b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 8009b6a:	6007      	str	r7, [r0, #0]
 8009b6c:	6849      	ldr	r1, [r1, #4]
 8009b6e:	6041      	str	r1, [r0, #4]
 8009b70:	4296      	cmp	r6, r2
 8009b72:	68a1      	ldr	r1, [r4, #8]
 8009b74:	bf18      	it	ne
 8009b76:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8009b7a:	6081      	str	r1, [r0, #8]
 8009b7c:	bf08      	it	eq
 8009b7e:	2200      	moveq	r2, #0
 8009b80:	b142      	cbz	r2, 8009b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8009b82:	6022      	str	r2, [r4, #0]
 8009b84:	f8c4 c008 	str.w	ip, [r4, #8]
 8009b88:	6822      	ldr	r2, [r4, #0]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6063      	str	r3, [r4, #4]
 8009b8e:	7013      	strb	r3, [r2, #0]
 8009b90:	4628      	mov	r0, r5
 8009b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	e7f7      	b.n	8009b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 8009b98:	f7ff ff4f 	bl	8009a3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8009b9c:	e7f4      	b.n	8009b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08009b9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8009b9e:	6802      	ldr	r2, [r0, #0]
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	6043      	str	r3, [r0, #4]
 8009ba4:	7013      	strb	r3, [r2, #0]
 8009ba6:	4770      	bx	lr

08009ba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj>:
 8009ba8:	b508      	push	{r3, lr}
 8009baa:	6842      	ldr	r2, [r0, #4]
 8009bac:	4291      	cmp	r1, r2
 8009bae:	d302      	bcc.n	8009bb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj+0xe>
 8009bb0:	4802      	ldr	r0, [pc, #8]	; (8009bbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj+0x14>)
 8009bb2:	f7ff febc 	bl	800992e <_ZSt24__throw_out_of_range_fmtPKcz>
 8009bb6:	6800      	ldr	r0, [r0, #0]
 8009bb8:	4408      	add	r0, r1
 8009bba:	bd08      	pop	{r3, pc}
 8009bbc:	0800ff7c 	.word	0x0800ff7c

08009bc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8009bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bc6:	4614      	mov	r4, r2
 8009bc8:	4681      	mov	r9, r0
 8009bca:	462a      	mov	r2, r5
 8009bcc:	460f      	mov	r7, r1
 8009bce:	4698      	mov	r8, r3
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4b37      	ldr	r3, [pc, #220]	; (8009cb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8009bd4:	f7ff fefa 	bl	80099cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8009bd8:	464a      	mov	r2, r9
 8009bda:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009bde:	f852 6b08 	ldr.w	r6, [r2], #8
 8009be2:	4296      	cmp	r6, r2
 8009be4:	eba5 0b04 	sub.w	fp, r5, r4
 8009be8:	bf18      	it	ne
 8009bea:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 8009bee:	eb03 0a0b 	add.w	sl, r3, fp
 8009bf2:	bf08      	it	eq
 8009bf4:	220f      	moveq	r2, #15
 8009bf6:	4552      	cmp	r2, sl
 8009bf8:	d34e      	bcc.n	8009c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 8009bfa:	443e      	add	r6, r7
 8009bfc:	4641      	mov	r1, r8
 8009bfe:	1bdf      	subs	r7, r3, r7
 8009c00:	4648      	mov	r0, r9
 8009c02:	1b3f      	subs	r7, r7, r4
 8009c04:	f7ff feee 	bl	80099e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8009c08:	b170      	cbz	r0, 8009c28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8009c0a:	b137      	cbz	r7, 8009c1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8009c0c:	42ac      	cmp	r4, r5
 8009c0e:	d004      	beq.n	8009c1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8009c10:	463a      	mov	r2, r7
 8009c12:	1931      	adds	r1, r6, r4
 8009c14:	1970      	adds	r0, r6, r5
 8009c16:	f7ff fefa 	bl	8009a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009c1a:	b30d      	cbz	r5, 8009c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8009c1c:	462a      	mov	r2, r5
 8009c1e:	4641      	mov	r1, r8
 8009c20:	4630      	mov	r0, r6
 8009c22:	f7ff feeb 	bl	80099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009c26:	e01b      	b.n	8009c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8009c28:	b135      	cbz	r5, 8009c38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 8009c2a:	42ac      	cmp	r4, r5
 8009c2c:	d33c      	bcc.n	8009ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 8009c2e:	462a      	mov	r2, r5
 8009c30:	4641      	mov	r1, r8
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7ff feeb 	bl	8009a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009c38:	b197      	cbz	r7, 8009c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8009c3a:	42ac      	cmp	r4, r5
 8009c3c:	d010      	beq.n	8009c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8009c3e:	463a      	mov	r2, r7
 8009c40:	1931      	adds	r1, r6, r4
 8009c42:	1970      	adds	r0, r6, r5
 8009c44:	f7ff fee3 	bl	8009a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009c48:	42ac      	cmp	r4, r5
 8009c4a:	d209      	bcs.n	8009c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8009c4c:	4434      	add	r4, r6
 8009c4e:	eb08 0305 	add.w	r3, r8, r5
 8009c52:	429c      	cmp	r4, r3
 8009c54:	d30f      	bcc.n	8009c76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 8009c56:	462a      	mov	r2, r5
 8009c58:	4641      	mov	r1, r8
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7ff fed7 	bl	8009a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009c60:	f8d9 3000 	ldr.w	r3, [r9]
 8009c64:	f8c9 a004 	str.w	sl, [r9, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	4648      	mov	r0, r9
 8009c6c:	f803 200a 	strb.w	r2, [r3, sl]
 8009c70:	b003      	add	sp, #12
 8009c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c76:	4544      	cmp	r4, r8
 8009c78:	d803      	bhi.n	8009c82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	eb08 010b 	add.w	r1, r8, fp
 8009c80:	e7ce      	b.n	8009c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009c82:	eba4 0408 	sub.w	r4, r4, r8
 8009c86:	4622      	mov	r2, r4
 8009c88:	4641      	mov	r1, r8
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff febf 	bl	8009a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009c90:	1b2a      	subs	r2, r5, r4
 8009c92:	1971      	adds	r1, r6, r5
 8009c94:	1930      	adds	r0, r6, r4
 8009c96:	e7c4      	b.n	8009c22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8009c98:	9500      	str	r5, [sp, #0]
 8009c9a:	4643      	mov	r3, r8
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	4648      	mov	r0, r9
 8009ca2:	f7ff fef1 	bl	8009a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009ca6:	e7db      	b.n	8009c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8009ca8:	2f00      	cmp	r7, #0
 8009caa:	d0cf      	beq.n	8009c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8009cac:	e7c7      	b.n	8009c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8009cae:	bf00      	nop
 8009cb0:	0801000c 	.word	0x0801000c

08009cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8009cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	4608      	mov	r0, r1
 8009cba:	460d      	mov	r5, r1
 8009cbc:	f7f6 faea 	bl	8000294 <strlen>
 8009cc0:	462b      	mov	r3, r5
 8009cc2:	9000      	str	r0, [sp, #0]
 8009cc4:	6862      	ldr	r2, [r4, #4]
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f7ff ff79 	bl	8009bc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8009cce:	b003      	add	sp, #12
 8009cd0:	bd30      	pop	{r4, r5, pc}

08009cd2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8009cd2:	6800      	ldr	r0, [r0, #0]
 8009cd4:	4770      	bx	lr

08009cd6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 8009cd6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cda:	460e      	mov	r6, r1
 8009cdc:	461c      	mov	r4, r3
 8009cde:	6841      	ldr	r1, [r0, #4]
 8009ce0:	b923      	cbnz	r3, 8009cec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
 8009ce2:	4291      	cmp	r1, r2
 8009ce4:	d21f      	bcs.n	8009d26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x50>
 8009ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cea:	e01c      	b.n	8009d26 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x50>
 8009cec:	4291      	cmp	r1, r2
 8009cee:	d9fa      	bls.n	8009ce6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8009cf0:	f10d 0808 	add.w	r8, sp, #8
 8009cf4:	6805      	ldr	r5, [r0, #0]
 8009cf6:	7833      	ldrb	r3, [r6, #0]
 8009cf8:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009cfc:	186f      	adds	r7, r5, r1
 8009cfe:	18a8      	adds	r0, r5, r2
 8009d00:	1a89      	subs	r1, r1, r2
 8009d02:	f1c4 0901 	rsb	r9, r4, #1
 8009d06:	42a1      	cmp	r1, r4
 8009d08:	d3ed      	bcc.n	8009ce6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8009d0a:	4642      	mov	r2, r8
 8009d0c:	4449      	add	r1, r9
 8009d0e:	f7ff fd52 	bl	80097b6 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8009d12:	4682      	mov	sl, r0
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d0e6      	beq.n	8009ce6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	f7ff fd46 	bl	80097ac <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8009d20:	b928      	cbnz	r0, 8009d2e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x58>
 8009d22:	ebaa 0205 	sub.w	r2, sl, r5
 8009d26:	4610      	mov	r0, r2
 8009d28:	b002      	add	sp, #8
 8009d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2e:	f10a 0001 	add.w	r0, sl, #1
 8009d32:	1a39      	subs	r1, r7, r0
 8009d34:	e7e7      	b.n	8009d06 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x30>

08009d36 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
 8009d36:	b570      	push	{r4, r5, r6, lr}
 8009d38:	4605      	mov	r5, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	4616      	mov	r6, r2
 8009d40:	f7f6 faa8 	bl	8000294 <strlen>
 8009d44:	4632      	mov	r2, r6
 8009d46:	4603      	mov	r3, r0
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f7ff ffc3 	bl	8009cd6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 8009d50:	bd70      	pop	{r4, r5, r6, pc}

08009d52 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 8009d52:	b513      	push	{r0, r1, r4, lr}
 8009d54:	f88d 1007 	strb.w	r1, [sp, #7]
 8009d58:	6841      	ldr	r1, [r0, #4]
 8009d5a:	428a      	cmp	r2, r1
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	d20a      	bcs.n	8009d76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8009d60:	6804      	ldr	r4, [r0, #0]
 8009d62:	f10d 0207 	add.w	r2, sp, #7
 8009d66:	1ac9      	subs	r1, r1, r3
 8009d68:	18e0      	adds	r0, r4, r3
 8009d6a:	f7ff fd24 	bl	80097b6 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8009d6e:	b110      	cbz	r0, 8009d76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8009d70:	1b00      	subs	r0, r0, r4
 8009d72:	b002      	add	sp, #8
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7a:	e7fa      	b.n	8009d72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08009d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>:
 8009d7c:	b508      	push	{r3, lr}
 8009d7e:	f7ff ffe8 	bl	8009d52 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8009d82:	bd08      	pop	{r3, pc}

08009d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8009d84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d86:	4604      	mov	r4, r0
 8009d88:	4616      	mov	r6, r2
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	b919      	cbnz	r1, 8009d96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009d8e:	b112      	cbz	r2, 8009d96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009d90:	480d      	ldr	r0, [pc, #52]	; (8009dc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8009d92:	f7ff fdc0 	bl	8009916 <_ZSt19__throw_logic_errorPKc>
 8009d96:	1b73      	subs	r3, r6, r5
 8009d98:	2b0f      	cmp	r3, #15
 8009d9a:	9301      	str	r3, [sp, #4]
 8009d9c:	d907      	bls.n	8009dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8009d9e:	2200      	movs	r2, #0
 8009da0:	a901      	add	r1, sp, #4
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff fde2 	bl	800996c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009da8:	9b01      	ldr	r3, [sp, #4]
 8009daa:	6020      	str	r0, [r4, #0]
 8009dac:	60a3      	str	r3, [r4, #8]
 8009dae:	4632      	mov	r2, r6
 8009db0:	4629      	mov	r1, r5
 8009db2:	6820      	ldr	r0, [r4, #0]
 8009db4:	f7ff fe37 	bl	8009a26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8009db8:	9b01      	ldr	r3, [sp, #4]
 8009dba:	6822      	ldr	r2, [r4, #0]
 8009dbc:	6063      	str	r3, [r4, #4]
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	54d1      	strb	r1, [r2, r3]
 8009dc2:	b002      	add	sp, #8
 8009dc4:	bd70      	pop	{r4, r5, r6, pc}
 8009dc6:	bf00      	nop
 8009dc8:	08010025 	.word	0x08010025

08009dcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	f100 0208 	add.w	r2, r0, #8
 8009dd2:	6002      	str	r2, [r0, #0]
 8009dd4:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009dd8:	4604      	mov	r4, r0
 8009dda:	f04f 0300 	mov.w	r3, #0
 8009dde:	440a      	add	r2, r1
 8009de0:	f7ff ffd0 	bl	8009d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8009de4:	4620      	mov	r0, r4
 8009de6:	bd10      	pop	{r4, pc}

08009de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dea:	4604      	mov	r4, r0
 8009dec:	4616      	mov	r6, r2
 8009dee:	460d      	mov	r5, r1
 8009df0:	b919      	cbnz	r1, 8009dfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009df2:	b112      	cbz	r2, 8009dfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009df4:	480d      	ldr	r0, [pc, #52]	; (8009e2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8009df6:	f7ff fd8e 	bl	8009916 <_ZSt19__throw_logic_errorPKc>
 8009dfa:	1b73      	subs	r3, r6, r5
 8009dfc:	2b0f      	cmp	r3, #15
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	d907      	bls.n	8009e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8009e02:	2200      	movs	r2, #0
 8009e04:	a901      	add	r1, sp, #4
 8009e06:	4620      	mov	r0, r4
 8009e08:	f7ff fdb0 	bl	800996c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009e0c:	9b01      	ldr	r3, [sp, #4]
 8009e0e:	6020      	str	r0, [r4, #0]
 8009e10:	60a3      	str	r3, [r4, #8]
 8009e12:	4632      	mov	r2, r6
 8009e14:	4629      	mov	r1, r5
 8009e16:	6820      	ldr	r0, [r4, #0]
 8009e18:	f7ff fe0a 	bl	8009a30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009e1c:	9b01      	ldr	r3, [sp, #4]
 8009e1e:	6822      	ldr	r2, [r4, #0]
 8009e20:	6063      	str	r3, [r4, #4]
 8009e22:	2100      	movs	r1, #0
 8009e24:	54d1      	strb	r1, [r2, r3]
 8009e26:	b002      	add	sp, #8
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
 8009e2a:	bf00      	nop
 8009e2c:	08010025 	.word	0x08010025

08009e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	460d      	mov	r5, r1
 8009e34:	4616      	mov	r6, r2
 8009e36:	461f      	mov	r7, r3
 8009e38:	f100 0308 	add.w	r3, r0, #8
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	6003      	str	r3, [r0, #0]
 8009e40:	4631      	mov	r1, r6
 8009e42:	4a09      	ldr	r2, [pc, #36]	; (8009e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
 8009e44:	4628      	mov	r0, r5
 8009e46:	f7ff fdb3 	bl	80099b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8009e4a:	6829      	ldr	r1, [r5, #0]
 8009e4c:	686a      	ldr	r2, [r5, #4]
 8009e4e:	4401      	add	r1, r0
 8009e50:	1b92      	subs	r2, r2, r6
 8009e52:	4620      	mov	r0, r4
 8009e54:	f04f 0300 	mov.w	r3, #0
 8009e58:	42ba      	cmp	r2, r7
 8009e5a:	bf94      	ite	ls
 8009e5c:	188a      	addls	r2, r1, r2
 8009e5e:	19ca      	addhi	r2, r1, r7
 8009e60:	f7ff ffc2 	bl	8009de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8009e64:	4620      	mov	r0, r4
 8009e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e68:	08010067 	.word	0x08010067

08009e6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	460d      	mov	r5, r1
 8009e70:	4604      	mov	r4, r0
 8009e72:	4611      	mov	r1, r2
 8009e74:	4628      	mov	r0, r5
 8009e76:	4a06      	ldr	r2, [pc, #24]	; (8009e90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8009e78:	461e      	mov	r6, r3
 8009e7a:	f7ff fd99 	bl	80099b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8009e7e:	4633      	mov	r3, r6
 8009e80:	4602      	mov	r2, r0
 8009e82:	4629      	mov	r1, r5
 8009e84:	4620      	mov	r0, r4
 8009e86:	f7ff ffd3 	bl	8009e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800ffc0 	.word	0x0800ffc0

08009e94 <_ZNSt9exceptionD1Ev>:
 8009e94:	4770      	bx	lr

08009e96 <_ZNSt9type_infoD1Ev>:
 8009e96:	4770      	bx	lr

08009e98 <_ZNKSt9type_info14__is_pointer_pEv>:
 8009e98:	2000      	movs	r0, #0
 8009e9a:	4770      	bx	lr

08009e9c <_ZNKSt9type_infoeqERKS_>:
 8009e9c:	4281      	cmp	r1, r0
 8009e9e:	b508      	push	{r3, lr}
 8009ea0:	d00e      	beq.n	8009ec0 <_ZNKSt9type_infoeqERKS_+0x24>
 8009ea2:	6840      	ldr	r0, [r0, #4]
 8009ea4:	7803      	ldrb	r3, [r0, #0]
 8009ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea8:	d00c      	beq.n	8009ec4 <_ZNKSt9type_infoeqERKS_+0x28>
 8009eaa:	6849      	ldr	r1, [r1, #4]
 8009eac:	780b      	ldrb	r3, [r1, #0]
 8009eae:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb0:	bf08      	it	eq
 8009eb2:	3101      	addeq	r1, #1
 8009eb4:	f7f6 f9e4 	bl	8000280 <strcmp>
 8009eb8:	fab0 f080 	clz	r0, r0
 8009ebc:	0940      	lsrs	r0, r0, #5
 8009ebe:	bd08      	pop	{r3, pc}
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	e7fc      	b.n	8009ebe <_ZNKSt9type_infoeqERKS_+0x22>
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	e7fa      	b.n	8009ebe <_ZNKSt9type_infoeqERKS_+0x22>

08009ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8009ec8:	7803      	ldrb	r3, [r0, #0]
 8009eca:	2b47      	cmp	r3, #71	; 0x47
 8009ecc:	d117      	bne.n	8009efe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009ece:	7843      	ldrb	r3, [r0, #1]
 8009ed0:	2b4e      	cmp	r3, #78	; 0x4e
 8009ed2:	d114      	bne.n	8009efe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009ed4:	7883      	ldrb	r3, [r0, #2]
 8009ed6:	2b55      	cmp	r3, #85	; 0x55
 8009ed8:	d111      	bne.n	8009efe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009eda:	78c3      	ldrb	r3, [r0, #3]
 8009edc:	2b43      	cmp	r3, #67	; 0x43
 8009ede:	d10e      	bne.n	8009efe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009ee0:	7903      	ldrb	r3, [r0, #4]
 8009ee2:	2b43      	cmp	r3, #67	; 0x43
 8009ee4:	d10b      	bne.n	8009efe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009ee6:	7943      	ldrb	r3, [r0, #5]
 8009ee8:	2b2b      	cmp	r3, #43	; 0x2b
 8009eea:	d108      	bne.n	8009efe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009eec:	7983      	ldrb	r3, [r0, #6]
 8009eee:	2b2b      	cmp	r3, #43	; 0x2b
 8009ef0:	d105      	bne.n	8009efe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009ef2:	79c0      	ldrb	r0, [r0, #7]
 8009ef4:	2801      	cmp	r0, #1
 8009ef6:	bf8c      	ite	hi
 8009ef8:	2000      	movhi	r0, #0
 8009efa:	2001      	movls	r0, #1
 8009efc:	4770      	bx	lr
 8009efe:	2000      	movs	r0, #0
 8009f00:	4770      	bx	lr

08009f02 <__cxa_call_terminate>:
 8009f02:	b510      	push	{r4, lr}
 8009f04:	4604      	mov	r4, r0
 8009f06:	b148      	cbz	r0, 8009f1c <__cxa_call_terminate+0x1a>
 8009f08:	f7ff fa90 	bl	800942c <__cxa_begin_catch>
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f7ff ffdb 	bl	8009ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009f12:	b118      	cbz	r0, 8009f1c <__cxa_call_terminate+0x1a>
 8009f14:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8009f18:	f7ff fbe4 	bl	80096e4 <_ZN10__cxxabiv111__terminateEPFvvE>
 8009f1c:	f7ff fbee 	bl	80096fc <_ZSt9terminatev>

08009f20 <__cxa_call_unexpected>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4602      	mov	r2, r0
 8009f24:	f7ff ffd0 	bl	8009ec8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009f28:	b140      	cbz	r0, 8009f3c <__cxa_call_unexpected+0x1c>
 8009f2a:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8009f2e:	2500      	movs	r5, #0
 8009f30:	4610      	mov	r0, r2
 8009f32:	f7ff fa7b 	bl	800942c <__cxa_begin_catch>
 8009f36:	b125      	cbz	r5, 8009f42 <__cxa_call_unexpected+0x22>
 8009f38:	f7ff fbf2 	bl	8009720 <_ZSt10unexpectedv>
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	2501      	movs	r5, #1
 8009f40:	e7f6      	b.n	8009f30 <__cxa_call_unexpected+0x10>
 8009f42:	4620      	mov	r0, r4
 8009f44:	f7ff fbdf 	bl	8009706 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08009f48 <_ZdlPvj>:
 8009f48:	f7ff bbca 	b.w	80096e0 <_ZdlPv>

08009f4c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b09c      	sub	sp, #112	; 0x70
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	1a0e      	subs	r6, r1, r0
 8009f54:	4680      	mov	r8, r0
 8009f56:	2269      	movs	r2, #105	; 0x69
 8009f58:	490e      	ldr	r1, [pc, #56]	; (8009f94 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8009f5a:	1d38      	adds	r0, r7, #4
 8009f5c:	f001 fac7 	bl	800b4ee <memcpy>
 8009f60:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8009f64:	f023 0307 	bic.w	r3, r3, #7
 8009f68:	ebad 0d03 	sub.w	sp, sp, r3
 8009f6c:	466c      	mov	r4, sp
 8009f6e:	2268      	movs	r2, #104	; 0x68
 8009f70:	1d39      	adds	r1, r7, #4
 8009f72:	1c75      	adds	r5, r6, #1
 8009f74:	4620      	mov	r0, r4
 8009f76:	f001 faba 	bl	800b4ee <memcpy>
 8009f7a:	4425      	add	r5, r4
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	4641      	mov	r1, r8
 8009f80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f84:	f001 fab3 	bl	800b4ee <memcpy>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7ff fcc1 	bl	8009916 <_ZSt19__throw_logic_errorPKc>
 8009f94:	08010110 	.word	0x08010110

08009f98 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	b086      	sub	sp, #24
 8009f9e:	466d      	mov	r5, sp
 8009fa0:	f105 040c 	add.w	r4, r5, #12
 8009fa4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8009fe4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8009fa8:	4623      	mov	r3, r4
 8009faa:	f04f 0c0a 	mov.w	ip, #10
 8009fae:	fbb2 f6fc 	udiv	r6, r2, ip
 8009fb2:	fb0c 2216 	mls	r2, ip, r6, r2
 8009fb6:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8009fba:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8009fbe:	4632      	mov	r2, r6
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	d1f4      	bne.n	8009fae <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8009fc4:	1ae4      	subs	r4, r4, r3
 8009fc6:	428c      	cmp	r4, r1
 8009fc8:	d808      	bhi.n	8009fdc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8009fca:	f1c4 010c 	rsb	r1, r4, #12
 8009fce:	4622      	mov	r2, r4
 8009fd0:	4429      	add	r1, r5
 8009fd2:	f001 fa8c 	bl	800b4ee <memcpy>
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8009fe0:	e7f9      	b.n	8009fd6 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8009fe2:	bf00      	nop
 8009fe4:	08010105 	.word	0x08010105

08009fe8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8009fe8:	3901      	subs	r1, #1
 8009fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fee:	4606      	mov	r6, r0
 8009ff0:	4615      	mov	r5, r2
 8009ff2:	1847      	adds	r7, r0, r1
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	782a      	ldrb	r2, [r5, #0]
 8009ff8:	b392      	cbz	r2, 800a060 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 8009ffa:	42bc      	cmp	r4, r7
 8009ffc:	d22c      	bcs.n	800a058 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8009ffe:	2a25      	cmp	r2, #37	; 0x25
 800a000:	d107      	bne.n	800a012 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800a002:	786a      	ldrb	r2, [r5, #1]
 800a004:	2a73      	cmp	r2, #115	; 0x73
 800a006:	d009      	beq.n	800a01c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 800a008:	2a7a      	cmp	r2, #122	; 0x7a
 800a00a:	d012      	beq.n	800a032 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 800a00c:	2a25      	cmp	r2, #37	; 0x25
 800a00e:	d100      	bne.n	800a012 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800a010:	3501      	adds	r5, #1
 800a012:	782a      	ldrb	r2, [r5, #0]
 800a014:	7022      	strb	r2, [r4, #0]
 800a016:	3501      	adds	r5, #1
 800a018:	3401      	adds	r4, #1
 800a01a:	e7ec      	b.n	8009ff6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800a01c:	1d19      	adds	r1, r3, #4
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3b01      	subs	r3, #1
 800a022:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800a026:	b1a2      	cbz	r2, 800a052 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 800a028:	42bc      	cmp	r4, r7
 800a02a:	d015      	beq.n	800a058 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800a02c:	f804 2b01 	strb.w	r2, [r4], #1
 800a030:	e7f7      	b.n	800a022 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 800a032:	78aa      	ldrb	r2, [r5, #2]
 800a034:	2a75      	cmp	r2, #117	; 0x75
 800a036:	d1ec      	bne.n	800a012 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	1b39      	subs	r1, r7, r4
 800a03c:	4620      	mov	r0, r4
 800a03e:	f103 0804 	add.w	r8, r3, #4
 800a042:	f7ff ffa9 	bl	8009f98 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800a046:	2800      	cmp	r0, #0
 800a048:	dd06      	ble.n	800a058 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800a04a:	4404      	add	r4, r0
 800a04c:	3503      	adds	r5, #3
 800a04e:	4643      	mov	r3, r8
 800a050:	e7d1      	b.n	8009ff6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800a052:	3502      	adds	r5, #2
 800a054:	460b      	mov	r3, r1
 800a056:	e7ce      	b.n	8009ff6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800a058:	4621      	mov	r1, r4
 800a05a:	4630      	mov	r0, r6
 800a05c:	f7ff ff76 	bl	8009f4c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800a060:	7022      	strb	r2, [r4, #0]
 800a062:	1ba0      	subs	r0, r4, r6
 800a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a068 <sin>:
 800a068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a06a:	ec51 0b10 	vmov	r0, r1, d0
 800a06e:	4a20      	ldr	r2, [pc, #128]	; (800a0f0 <sin+0x88>)
 800a070:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a074:	4293      	cmp	r3, r2
 800a076:	dc07      	bgt.n	800a088 <sin+0x20>
 800a078:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800a0e8 <sin+0x80>
 800a07c:	2000      	movs	r0, #0
 800a07e:	f000 fe37 	bl	800acf0 <__kernel_sin>
 800a082:	ec51 0b10 	vmov	r0, r1, d0
 800a086:	e007      	b.n	800a098 <sin+0x30>
 800a088:	4a1a      	ldr	r2, [pc, #104]	; (800a0f4 <sin+0x8c>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	dd09      	ble.n	800a0a2 <sin+0x3a>
 800a08e:	ee10 2a10 	vmov	r2, s0
 800a092:	460b      	mov	r3, r1
 800a094:	f7f6 f90a 	bl	80002ac <__aeabi_dsub>
 800a098:	ec41 0b10 	vmov	d0, r0, r1
 800a09c:	b005      	add	sp, #20
 800a09e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0a2:	4668      	mov	r0, sp
 800a0a4:	f000 f828 	bl	800a0f8 <__ieee754_rem_pio2>
 800a0a8:	f000 0003 	and.w	r0, r0, #3
 800a0ac:	2801      	cmp	r0, #1
 800a0ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0b2:	ed9d 0b00 	vldr	d0, [sp]
 800a0b6:	d004      	beq.n	800a0c2 <sin+0x5a>
 800a0b8:	2802      	cmp	r0, #2
 800a0ba:	d005      	beq.n	800a0c8 <sin+0x60>
 800a0bc:	b970      	cbnz	r0, 800a0dc <sin+0x74>
 800a0be:	2001      	movs	r0, #1
 800a0c0:	e7dd      	b.n	800a07e <sin+0x16>
 800a0c2:	f000 fa0d 	bl	800a4e0 <__kernel_cos>
 800a0c6:	e7dc      	b.n	800a082 <sin+0x1a>
 800a0c8:	2001      	movs	r0, #1
 800a0ca:	f000 fe11 	bl	800acf0 <__kernel_sin>
 800a0ce:	ec53 2b10 	vmov	r2, r3, d0
 800a0d2:	ee10 0a10 	vmov	r0, s0
 800a0d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a0da:	e7dd      	b.n	800a098 <sin+0x30>
 800a0dc:	f000 fa00 	bl	800a4e0 <__kernel_cos>
 800a0e0:	e7f5      	b.n	800a0ce <sin+0x66>
 800a0e2:	bf00      	nop
 800a0e4:	f3af 8000 	nop.w
	...
 800a0f0:	3fe921fb 	.word	0x3fe921fb
 800a0f4:	7fefffff 	.word	0x7fefffff

0800a0f8 <__ieee754_rem_pio2>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	ec57 6b10 	vmov	r6, r7, d0
 800a100:	4bc3      	ldr	r3, [pc, #780]	; (800a410 <__ieee754_rem_pio2+0x318>)
 800a102:	b08d      	sub	sp, #52	; 0x34
 800a104:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a108:	4598      	cmp	r8, r3
 800a10a:	4604      	mov	r4, r0
 800a10c:	9704      	str	r7, [sp, #16]
 800a10e:	dc07      	bgt.n	800a120 <__ieee754_rem_pio2+0x28>
 800a110:	2200      	movs	r2, #0
 800a112:	2300      	movs	r3, #0
 800a114:	ed84 0b00 	vstr	d0, [r4]
 800a118:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a11c:	2500      	movs	r5, #0
 800a11e:	e027      	b.n	800a170 <__ieee754_rem_pio2+0x78>
 800a120:	4bbc      	ldr	r3, [pc, #752]	; (800a414 <__ieee754_rem_pio2+0x31c>)
 800a122:	4598      	cmp	r8, r3
 800a124:	dc75      	bgt.n	800a212 <__ieee754_rem_pio2+0x11a>
 800a126:	9b04      	ldr	r3, [sp, #16]
 800a128:	4dbb      	ldr	r5, [pc, #748]	; (800a418 <__ieee754_rem_pio2+0x320>)
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	ee10 0a10 	vmov	r0, s0
 800a130:	a3a9      	add	r3, pc, #676	; (adr r3, 800a3d8 <__ieee754_rem_pio2+0x2e0>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	4639      	mov	r1, r7
 800a138:	dd36      	ble.n	800a1a8 <__ieee754_rem_pio2+0xb0>
 800a13a:	f7f6 f8b7 	bl	80002ac <__aeabi_dsub>
 800a13e:	45a8      	cmp	r8, r5
 800a140:	4606      	mov	r6, r0
 800a142:	460f      	mov	r7, r1
 800a144:	d018      	beq.n	800a178 <__ieee754_rem_pio2+0x80>
 800a146:	a3a6      	add	r3, pc, #664	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x2e8>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 f8ae 	bl	80002ac <__aeabi_dsub>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	e9c4 2300 	strd	r2, r3, [r4]
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 f8a6 	bl	80002ac <__aeabi_dsub>
 800a160:	a39f      	add	r3, pc, #636	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x2e8>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f7f6 f8a1 	bl	80002ac <__aeabi_dsub>
 800a16a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a16e:	2501      	movs	r5, #1
 800a170:	4628      	mov	r0, r5
 800a172:	b00d      	add	sp, #52	; 0x34
 800a174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a178:	a39b      	add	r3, pc, #620	; (adr r3, 800a3e8 <__ieee754_rem_pio2+0x2f0>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 f895 	bl	80002ac <__aeabi_dsub>
 800a182:	a39b      	add	r3, pc, #620	; (adr r3, 800a3f0 <__ieee754_rem_pio2+0x2f8>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	4606      	mov	r6, r0
 800a18a:	460f      	mov	r7, r1
 800a18c:	f7f6 f88e 	bl	80002ac <__aeabi_dsub>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	e9c4 2300 	strd	r2, r3, [r4]
 800a198:	4630      	mov	r0, r6
 800a19a:	4639      	mov	r1, r7
 800a19c:	f7f6 f886 	bl	80002ac <__aeabi_dsub>
 800a1a0:	a393      	add	r3, pc, #588	; (adr r3, 800a3f0 <__ieee754_rem_pio2+0x2f8>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	e7de      	b.n	800a166 <__ieee754_rem_pio2+0x6e>
 800a1a8:	f7f6 f882 	bl	80002b0 <__adddf3>
 800a1ac:	45a8      	cmp	r8, r5
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	460f      	mov	r7, r1
 800a1b2:	d016      	beq.n	800a1e2 <__ieee754_rem_pio2+0xea>
 800a1b4:	a38a      	add	r3, pc, #552	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x2e8>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f7f6 f879 	bl	80002b0 <__adddf3>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	e9c4 2300 	strd	r2, r3, [r4]
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	f7f6 f86f 	bl	80002ac <__aeabi_dsub>
 800a1ce:	a384      	add	r3, pc, #528	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x2e8>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f7f6 f86c 	bl	80002b0 <__adddf3>
 800a1d8:	f04f 35ff 	mov.w	r5, #4294967295
 800a1dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1e0:	e7c6      	b.n	800a170 <__ieee754_rem_pio2+0x78>
 800a1e2:	a381      	add	r3, pc, #516	; (adr r3, 800a3e8 <__ieee754_rem_pio2+0x2f0>)
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f7f6 f862 	bl	80002b0 <__adddf3>
 800a1ec:	a380      	add	r3, pc, #512	; (adr r3, 800a3f0 <__ieee754_rem_pio2+0x2f8>)
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	460f      	mov	r7, r1
 800a1f6:	f7f6 f85b 	bl	80002b0 <__adddf3>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	e9c4 2300 	strd	r2, r3, [r4]
 800a202:	4630      	mov	r0, r6
 800a204:	4639      	mov	r1, r7
 800a206:	f7f6 f851 	bl	80002ac <__aeabi_dsub>
 800a20a:	a379      	add	r3, pc, #484	; (adr r3, 800a3f0 <__ieee754_rem_pio2+0x2f8>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	e7e0      	b.n	800a1d4 <__ieee754_rem_pio2+0xdc>
 800a212:	4b82      	ldr	r3, [pc, #520]	; (800a41c <__ieee754_rem_pio2+0x324>)
 800a214:	4598      	cmp	r8, r3
 800a216:	f300 80d0 	bgt.w	800a3ba <__ieee754_rem_pio2+0x2c2>
 800a21a:	f000 fe23 	bl	800ae64 <fabs>
 800a21e:	ec57 6b10 	vmov	r6, r7, d0
 800a222:	ee10 0a10 	vmov	r0, s0
 800a226:	a374      	add	r3, pc, #464	; (adr r3, 800a3f8 <__ieee754_rem_pio2+0x300>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	4639      	mov	r1, r7
 800a22e:	f7f6 f9f5 	bl	800061c <__aeabi_dmul>
 800a232:	2200      	movs	r2, #0
 800a234:	4b7a      	ldr	r3, [pc, #488]	; (800a420 <__ieee754_rem_pio2+0x328>)
 800a236:	f7f6 f83b 	bl	80002b0 <__adddf3>
 800a23a:	f7f6 fc89 	bl	8000b50 <__aeabi_d2iz>
 800a23e:	4605      	mov	r5, r0
 800a240:	f7f6 f982 	bl	8000548 <__aeabi_i2d>
 800a244:	a364      	add	r3, pc, #400	; (adr r3, 800a3d8 <__ieee754_rem_pio2+0x2e0>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a24e:	f7f6 f9e5 	bl	800061c <__aeabi_dmul>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	4630      	mov	r0, r6
 800a258:	4639      	mov	r1, r7
 800a25a:	f7f6 f827 	bl	80002ac <__aeabi_dsub>
 800a25e:	a360      	add	r3, pc, #384	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x2e8>)
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	4682      	mov	sl, r0
 800a266:	468b      	mov	fp, r1
 800a268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a26c:	f7f6 f9d6 	bl	800061c <__aeabi_dmul>
 800a270:	2d1f      	cmp	r5, #31
 800a272:	4606      	mov	r6, r0
 800a274:	460f      	mov	r7, r1
 800a276:	dc0c      	bgt.n	800a292 <__ieee754_rem_pio2+0x19a>
 800a278:	1e6a      	subs	r2, r5, #1
 800a27a:	4b6a      	ldr	r3, [pc, #424]	; (800a424 <__ieee754_rem_pio2+0x32c>)
 800a27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a280:	4543      	cmp	r3, r8
 800a282:	d006      	beq.n	800a292 <__ieee754_rem_pio2+0x19a>
 800a284:	4632      	mov	r2, r6
 800a286:	463b      	mov	r3, r7
 800a288:	4650      	mov	r0, sl
 800a28a:	4659      	mov	r1, fp
 800a28c:	f7f6 f80e 	bl	80002ac <__aeabi_dsub>
 800a290:	e00e      	b.n	800a2b0 <__ieee754_rem_pio2+0x1b8>
 800a292:	4632      	mov	r2, r6
 800a294:	463b      	mov	r3, r7
 800a296:	4650      	mov	r0, sl
 800a298:	4659      	mov	r1, fp
 800a29a:	f7f6 f807 	bl	80002ac <__aeabi_dsub>
 800a29e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a2a2:	9305      	str	r3, [sp, #20]
 800a2a4:	9a05      	ldr	r2, [sp, #20]
 800a2a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	2b10      	cmp	r3, #16
 800a2ae:	dc02      	bgt.n	800a2b6 <__ieee754_rem_pio2+0x1be>
 800a2b0:	e9c4 0100 	strd	r0, r1, [r4]
 800a2b4:	e039      	b.n	800a32a <__ieee754_rem_pio2+0x232>
 800a2b6:	a34c      	add	r3, pc, #304	; (adr r3, 800a3e8 <__ieee754_rem_pio2+0x2f0>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c0:	f7f6 f9ac 	bl	800061c <__aeabi_dmul>
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	460f      	mov	r7, r1
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4650      	mov	r0, sl
 800a2ce:	4659      	mov	r1, fp
 800a2d0:	f7f5 ffec 	bl	80002ac <__aeabi_dsub>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	4680      	mov	r8, r0
 800a2da:	4689      	mov	r9, r1
 800a2dc:	4650      	mov	r0, sl
 800a2de:	4659      	mov	r1, fp
 800a2e0:	f7f5 ffe4 	bl	80002ac <__aeabi_dsub>
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	f7f5 ffe0 	bl	80002ac <__aeabi_dsub>
 800a2ec:	a340      	add	r3, pc, #256	; (adr r3, 800a3f0 <__ieee754_rem_pio2+0x2f8>)
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	460f      	mov	r7, r1
 800a2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2fa:	f7f6 f98f 	bl	800061c <__aeabi_dmul>
 800a2fe:	4632      	mov	r2, r6
 800a300:	463b      	mov	r3, r7
 800a302:	f7f5 ffd3 	bl	80002ac <__aeabi_dsub>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	4606      	mov	r6, r0
 800a30c:	460f      	mov	r7, r1
 800a30e:	4640      	mov	r0, r8
 800a310:	4649      	mov	r1, r9
 800a312:	f7f5 ffcb 	bl	80002ac <__aeabi_dsub>
 800a316:	9a05      	ldr	r2, [sp, #20]
 800a318:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	2b31      	cmp	r3, #49	; 0x31
 800a320:	dc20      	bgt.n	800a364 <__ieee754_rem_pio2+0x26c>
 800a322:	e9c4 0100 	strd	r0, r1, [r4]
 800a326:	46c2      	mov	sl, r8
 800a328:	46cb      	mov	fp, r9
 800a32a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a32e:	4650      	mov	r0, sl
 800a330:	4642      	mov	r2, r8
 800a332:	464b      	mov	r3, r9
 800a334:	4659      	mov	r1, fp
 800a336:	f7f5 ffb9 	bl	80002ac <__aeabi_dsub>
 800a33a:	463b      	mov	r3, r7
 800a33c:	4632      	mov	r2, r6
 800a33e:	f7f5 ffb5 	bl	80002ac <__aeabi_dsub>
 800a342:	9b04      	ldr	r3, [sp, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a34a:	f6bf af11 	bge.w	800a170 <__ieee754_rem_pio2+0x78>
 800a34e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a352:	6063      	str	r3, [r4, #4]
 800a354:	f8c4 8000 	str.w	r8, [r4]
 800a358:	60a0      	str	r0, [r4, #8]
 800a35a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a35e:	60e3      	str	r3, [r4, #12]
 800a360:	426d      	negs	r5, r5
 800a362:	e705      	b.n	800a170 <__ieee754_rem_pio2+0x78>
 800a364:	a326      	add	r3, pc, #152	; (adr r3, 800a400 <__ieee754_rem_pio2+0x308>)
 800a366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a36e:	f7f6 f955 	bl	800061c <__aeabi_dmul>
 800a372:	4606      	mov	r6, r0
 800a374:	460f      	mov	r7, r1
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	4640      	mov	r0, r8
 800a37c:	4649      	mov	r1, r9
 800a37e:	f7f5 ff95 	bl	80002ac <__aeabi_dsub>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4682      	mov	sl, r0
 800a388:	468b      	mov	fp, r1
 800a38a:	4640      	mov	r0, r8
 800a38c:	4649      	mov	r1, r9
 800a38e:	f7f5 ff8d 	bl	80002ac <__aeabi_dsub>
 800a392:	4632      	mov	r2, r6
 800a394:	463b      	mov	r3, r7
 800a396:	f7f5 ff89 	bl	80002ac <__aeabi_dsub>
 800a39a:	a31b      	add	r3, pc, #108	; (adr r3, 800a408 <__ieee754_rem_pio2+0x310>)
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	460f      	mov	r7, r1
 800a3a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a8:	f7f6 f938 	bl	800061c <__aeabi_dmul>
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	f7f5 ff7c 	bl	80002ac <__aeabi_dsub>
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	460f      	mov	r7, r1
 800a3b8:	e764      	b.n	800a284 <__ieee754_rem_pio2+0x18c>
 800a3ba:	4b1b      	ldr	r3, [pc, #108]	; (800a428 <__ieee754_rem_pio2+0x330>)
 800a3bc:	4598      	cmp	r8, r3
 800a3be:	dd35      	ble.n	800a42c <__ieee754_rem_pio2+0x334>
 800a3c0:	ee10 2a10 	vmov	r2, s0
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	f7f5 ff6f 	bl	80002ac <__aeabi_dsub>
 800a3ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a3d2:	e9c4 0100 	strd	r0, r1, [r4]
 800a3d6:	e6a1      	b.n	800a11c <__ieee754_rem_pio2+0x24>
 800a3d8:	54400000 	.word	0x54400000
 800a3dc:	3ff921fb 	.word	0x3ff921fb
 800a3e0:	1a626331 	.word	0x1a626331
 800a3e4:	3dd0b461 	.word	0x3dd0b461
 800a3e8:	1a600000 	.word	0x1a600000
 800a3ec:	3dd0b461 	.word	0x3dd0b461
 800a3f0:	2e037073 	.word	0x2e037073
 800a3f4:	3ba3198a 	.word	0x3ba3198a
 800a3f8:	6dc9c883 	.word	0x6dc9c883
 800a3fc:	3fe45f30 	.word	0x3fe45f30
 800a400:	2e000000 	.word	0x2e000000
 800a404:	3ba3198a 	.word	0x3ba3198a
 800a408:	252049c1 	.word	0x252049c1
 800a40c:	397b839a 	.word	0x397b839a
 800a410:	3fe921fb 	.word	0x3fe921fb
 800a414:	4002d97b 	.word	0x4002d97b
 800a418:	3ff921fb 	.word	0x3ff921fb
 800a41c:	413921fb 	.word	0x413921fb
 800a420:	3fe00000 	.word	0x3fe00000
 800a424:	0801017c 	.word	0x0801017c
 800a428:	7fefffff 	.word	0x7fefffff
 800a42c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a430:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a434:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a438:	4630      	mov	r0, r6
 800a43a:	460f      	mov	r7, r1
 800a43c:	f7f6 fb88 	bl	8000b50 <__aeabi_d2iz>
 800a440:	f7f6 f882 	bl	8000548 <__aeabi_i2d>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4630      	mov	r0, r6
 800a44a:	4639      	mov	r1, r7
 800a44c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a450:	f7f5 ff2c 	bl	80002ac <__aeabi_dsub>
 800a454:	2200      	movs	r2, #0
 800a456:	4b1f      	ldr	r3, [pc, #124]	; (800a4d4 <__ieee754_rem_pio2+0x3dc>)
 800a458:	f7f6 f8e0 	bl	800061c <__aeabi_dmul>
 800a45c:	460f      	mov	r7, r1
 800a45e:	4606      	mov	r6, r0
 800a460:	f7f6 fb76 	bl	8000b50 <__aeabi_d2iz>
 800a464:	f7f6 f870 	bl	8000548 <__aeabi_i2d>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a474:	f7f5 ff1a 	bl	80002ac <__aeabi_dsub>
 800a478:	2200      	movs	r2, #0
 800a47a:	4b16      	ldr	r3, [pc, #88]	; (800a4d4 <__ieee754_rem_pio2+0x3dc>)
 800a47c:	f7f6 f8ce 	bl	800061c <__aeabi_dmul>
 800a480:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a484:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a488:	f04f 0803 	mov.w	r8, #3
 800a48c:	2600      	movs	r6, #0
 800a48e:	2700      	movs	r7, #0
 800a490:	4632      	mov	r2, r6
 800a492:	463b      	mov	r3, r7
 800a494:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a498:	f108 3aff 	add.w	sl, r8, #4294967295
 800a49c:	f7f6 fb26 	bl	8000aec <__aeabi_dcmpeq>
 800a4a0:	b9b0      	cbnz	r0, 800a4d0 <__ieee754_rem_pio2+0x3d8>
 800a4a2:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <__ieee754_rem_pio2+0x3e0>)
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4643      	mov	r3, r8
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	a806      	add	r0, sp, #24
 800a4b2:	f000 f8dd 	bl	800a670 <__kernel_rem_pio2>
 800a4b6:	9b04      	ldr	r3, [sp, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	f6bf ae58 	bge.w	800a170 <__ieee754_rem_pio2+0x78>
 800a4c0:	6863      	ldr	r3, [r4, #4]
 800a4c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a4c6:	6063      	str	r3, [r4, #4]
 800a4c8:	68e3      	ldr	r3, [r4, #12]
 800a4ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a4ce:	e746      	b.n	800a35e <__ieee754_rem_pio2+0x266>
 800a4d0:	46d0      	mov	r8, sl
 800a4d2:	e7dd      	b.n	800a490 <__ieee754_rem_pio2+0x398>
 800a4d4:	41700000 	.word	0x41700000
 800a4d8:	080101fc 	.word	0x080101fc
 800a4dc:	00000000 	.word	0x00000000

0800a4e0 <__kernel_cos>:
 800a4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	ec59 8b10 	vmov	r8, r9, d0
 800a4e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a4ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a4f0:	ed2d 8b02 	vpush	{d8}
 800a4f4:	eeb0 8a41 	vmov.f32	s16, s2
 800a4f8:	eef0 8a61 	vmov.f32	s17, s3
 800a4fc:	da07      	bge.n	800a50e <__kernel_cos+0x2e>
 800a4fe:	ee10 0a10 	vmov	r0, s0
 800a502:	4649      	mov	r1, r9
 800a504:	f7f6 fb24 	bl	8000b50 <__aeabi_d2iz>
 800a508:	2800      	cmp	r0, #0
 800a50a:	f000 8089 	beq.w	800a620 <__kernel_cos+0x140>
 800a50e:	4642      	mov	r2, r8
 800a510:	464b      	mov	r3, r9
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	f7f6 f881 	bl	800061c <__aeabi_dmul>
 800a51a:	2200      	movs	r2, #0
 800a51c:	4b4e      	ldr	r3, [pc, #312]	; (800a658 <__kernel_cos+0x178>)
 800a51e:	4604      	mov	r4, r0
 800a520:	460d      	mov	r5, r1
 800a522:	f7f6 f87b 	bl	800061c <__aeabi_dmul>
 800a526:	a340      	add	r3, pc, #256	; (adr r3, 800a628 <__kernel_cos+0x148>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	4682      	mov	sl, r0
 800a52e:	468b      	mov	fp, r1
 800a530:	4620      	mov	r0, r4
 800a532:	4629      	mov	r1, r5
 800a534:	f7f6 f872 	bl	800061c <__aeabi_dmul>
 800a538:	a33d      	add	r3, pc, #244	; (adr r3, 800a630 <__kernel_cos+0x150>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f7f5 feb7 	bl	80002b0 <__adddf3>
 800a542:	4622      	mov	r2, r4
 800a544:	462b      	mov	r3, r5
 800a546:	f7f6 f869 	bl	800061c <__aeabi_dmul>
 800a54a:	a33b      	add	r3, pc, #236	; (adr r3, 800a638 <__kernel_cos+0x158>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f7f5 feac 	bl	80002ac <__aeabi_dsub>
 800a554:	4622      	mov	r2, r4
 800a556:	462b      	mov	r3, r5
 800a558:	f7f6 f860 	bl	800061c <__aeabi_dmul>
 800a55c:	a338      	add	r3, pc, #224	; (adr r3, 800a640 <__kernel_cos+0x160>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f5 fea5 	bl	80002b0 <__adddf3>
 800a566:	4622      	mov	r2, r4
 800a568:	462b      	mov	r3, r5
 800a56a:	f7f6 f857 	bl	800061c <__aeabi_dmul>
 800a56e:	a336      	add	r3, pc, #216	; (adr r3, 800a648 <__kernel_cos+0x168>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f5 fe9a 	bl	80002ac <__aeabi_dsub>
 800a578:	4622      	mov	r2, r4
 800a57a:	462b      	mov	r3, r5
 800a57c:	f7f6 f84e 	bl	800061c <__aeabi_dmul>
 800a580:	a333      	add	r3, pc, #204	; (adr r3, 800a650 <__kernel_cos+0x170>)
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	f7f5 fe93 	bl	80002b0 <__adddf3>
 800a58a:	4622      	mov	r2, r4
 800a58c:	462b      	mov	r3, r5
 800a58e:	f7f6 f845 	bl	800061c <__aeabi_dmul>
 800a592:	4622      	mov	r2, r4
 800a594:	462b      	mov	r3, r5
 800a596:	f7f6 f841 	bl	800061c <__aeabi_dmul>
 800a59a:	ec53 2b18 	vmov	r2, r3, d8
 800a59e:	4604      	mov	r4, r0
 800a5a0:	460d      	mov	r5, r1
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	f7f6 f839 	bl	800061c <__aeabi_dmul>
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f7f5 fe7b 	bl	80002ac <__aeabi_dsub>
 800a5b6:	4b29      	ldr	r3, [pc, #164]	; (800a65c <__kernel_cos+0x17c>)
 800a5b8:	429e      	cmp	r6, r3
 800a5ba:	4680      	mov	r8, r0
 800a5bc:	4689      	mov	r9, r1
 800a5be:	dc11      	bgt.n	800a5e4 <__kernel_cos+0x104>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	4650      	mov	r0, sl
 800a5c6:	4659      	mov	r1, fp
 800a5c8:	f7f5 fe70 	bl	80002ac <__aeabi_dsub>
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4924      	ldr	r1, [pc, #144]	; (800a660 <__kernel_cos+0x180>)
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	f7f5 fe6a 	bl	80002ac <__aeabi_dsub>
 800a5d8:	ecbd 8b02 	vpop	{d8}
 800a5dc:	ec41 0b10 	vmov	d0, r0, r1
 800a5e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e4:	4b1f      	ldr	r3, [pc, #124]	; (800a664 <__kernel_cos+0x184>)
 800a5e6:	491e      	ldr	r1, [pc, #120]	; (800a660 <__kernel_cos+0x180>)
 800a5e8:	429e      	cmp	r6, r3
 800a5ea:	bfcc      	ite	gt
 800a5ec:	4d1e      	ldrgt	r5, [pc, #120]	; (800a668 <__kernel_cos+0x188>)
 800a5ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a5f2:	2400      	movs	r4, #0
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	462b      	mov	r3, r5
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	f7f5 fe57 	bl	80002ac <__aeabi_dsub>
 800a5fe:	4622      	mov	r2, r4
 800a600:	4606      	mov	r6, r0
 800a602:	460f      	mov	r7, r1
 800a604:	462b      	mov	r3, r5
 800a606:	4650      	mov	r0, sl
 800a608:	4659      	mov	r1, fp
 800a60a:	f7f5 fe4f 	bl	80002ac <__aeabi_dsub>
 800a60e:	4642      	mov	r2, r8
 800a610:	464b      	mov	r3, r9
 800a612:	f7f5 fe4b 	bl	80002ac <__aeabi_dsub>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4630      	mov	r0, r6
 800a61c:	4639      	mov	r1, r7
 800a61e:	e7d9      	b.n	800a5d4 <__kernel_cos+0xf4>
 800a620:	2000      	movs	r0, #0
 800a622:	490f      	ldr	r1, [pc, #60]	; (800a660 <__kernel_cos+0x180>)
 800a624:	e7d8      	b.n	800a5d8 <__kernel_cos+0xf8>
 800a626:	bf00      	nop
 800a628:	be8838d4 	.word	0xbe8838d4
 800a62c:	bda8fae9 	.word	0xbda8fae9
 800a630:	bdb4b1c4 	.word	0xbdb4b1c4
 800a634:	3e21ee9e 	.word	0x3e21ee9e
 800a638:	809c52ad 	.word	0x809c52ad
 800a63c:	3e927e4f 	.word	0x3e927e4f
 800a640:	19cb1590 	.word	0x19cb1590
 800a644:	3efa01a0 	.word	0x3efa01a0
 800a648:	16c15177 	.word	0x16c15177
 800a64c:	3f56c16c 	.word	0x3f56c16c
 800a650:	5555554c 	.word	0x5555554c
 800a654:	3fa55555 	.word	0x3fa55555
 800a658:	3fe00000 	.word	0x3fe00000
 800a65c:	3fd33332 	.word	0x3fd33332
 800a660:	3ff00000 	.word	0x3ff00000
 800a664:	3fe90000 	.word	0x3fe90000
 800a668:	3fd20000 	.word	0x3fd20000
 800a66c:	00000000 	.word	0x00000000

0800a670 <__kernel_rem_pio2>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	ed2d 8b02 	vpush	{d8}
 800a678:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a67c:	1ed4      	subs	r4, r2, #3
 800a67e:	9308      	str	r3, [sp, #32]
 800a680:	9101      	str	r1, [sp, #4]
 800a682:	4bc5      	ldr	r3, [pc, #788]	; (800a998 <__kernel_rem_pio2+0x328>)
 800a684:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a686:	9009      	str	r0, [sp, #36]	; 0x24
 800a688:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	9b08      	ldr	r3, [sp, #32]
 800a690:	3b01      	subs	r3, #1
 800a692:	9307      	str	r3, [sp, #28]
 800a694:	2318      	movs	r3, #24
 800a696:	fb94 f4f3 	sdiv	r4, r4, r3
 800a69a:	f06f 0317 	mvn.w	r3, #23
 800a69e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a6a2:	fb04 3303 	mla	r3, r4, r3, r3
 800a6a6:	eb03 0a02 	add.w	sl, r3, r2
 800a6aa:	9b04      	ldr	r3, [sp, #16]
 800a6ac:	9a07      	ldr	r2, [sp, #28]
 800a6ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a988 <__kernel_rem_pio2+0x318>
 800a6b2:	eb03 0802 	add.w	r8, r3, r2
 800a6b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a6b8:	1aa7      	subs	r7, r4, r2
 800a6ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a6be:	ae22      	add	r6, sp, #136	; 0x88
 800a6c0:	2500      	movs	r5, #0
 800a6c2:	4545      	cmp	r5, r8
 800a6c4:	dd13      	ble.n	800a6ee <__kernel_rem_pio2+0x7e>
 800a6c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a988 <__kernel_rem_pio2+0x318>
 800a6ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a6ce:	2600      	movs	r6, #0
 800a6d0:	9b04      	ldr	r3, [sp, #16]
 800a6d2:	429e      	cmp	r6, r3
 800a6d4:	dc32      	bgt.n	800a73c <__kernel_rem_pio2+0xcc>
 800a6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d8:	9302      	str	r3, [sp, #8]
 800a6da:	9b08      	ldr	r3, [sp, #32]
 800a6dc:	199d      	adds	r5, r3, r6
 800a6de:	ab22      	add	r3, sp, #136	; 0x88
 800a6e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6e4:	9306      	str	r3, [sp, #24]
 800a6e6:	ec59 8b18 	vmov	r8, r9, d8
 800a6ea:	2700      	movs	r7, #0
 800a6ec:	e01f      	b.n	800a72e <__kernel_rem_pio2+0xbe>
 800a6ee:	42ef      	cmn	r7, r5
 800a6f0:	d407      	bmi.n	800a702 <__kernel_rem_pio2+0x92>
 800a6f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a6f6:	f7f5 ff27 	bl	8000548 <__aeabi_i2d>
 800a6fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a6fe:	3501      	adds	r5, #1
 800a700:	e7df      	b.n	800a6c2 <__kernel_rem_pio2+0x52>
 800a702:	ec51 0b18 	vmov	r0, r1, d8
 800a706:	e7f8      	b.n	800a6fa <__kernel_rem_pio2+0x8a>
 800a708:	9906      	ldr	r1, [sp, #24]
 800a70a:	9d02      	ldr	r5, [sp, #8]
 800a70c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a710:	9106      	str	r1, [sp, #24]
 800a712:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a716:	9502      	str	r5, [sp, #8]
 800a718:	f7f5 ff80 	bl	800061c <__aeabi_dmul>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	4640      	mov	r0, r8
 800a722:	4649      	mov	r1, r9
 800a724:	f7f5 fdc4 	bl	80002b0 <__adddf3>
 800a728:	3701      	adds	r7, #1
 800a72a:	4680      	mov	r8, r0
 800a72c:	4689      	mov	r9, r1
 800a72e:	9b07      	ldr	r3, [sp, #28]
 800a730:	429f      	cmp	r7, r3
 800a732:	dde9      	ble.n	800a708 <__kernel_rem_pio2+0x98>
 800a734:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a738:	3601      	adds	r6, #1
 800a73a:	e7c9      	b.n	800a6d0 <__kernel_rem_pio2+0x60>
 800a73c:	9b04      	ldr	r3, [sp, #16]
 800a73e:	aa0e      	add	r2, sp, #56	; 0x38
 800a740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a744:	930c      	str	r3, [sp, #48]	; 0x30
 800a746:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a748:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a74c:	9c04      	ldr	r4, [sp, #16]
 800a74e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a750:	ab9a      	add	r3, sp, #616	; 0x268
 800a752:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a756:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a75a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a75e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a762:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a766:	ab9a      	add	r3, sp, #616	; 0x268
 800a768:	445b      	add	r3, fp
 800a76a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a76e:	2500      	movs	r5, #0
 800a770:	1b63      	subs	r3, r4, r5
 800a772:	2b00      	cmp	r3, #0
 800a774:	dc78      	bgt.n	800a868 <__kernel_rem_pio2+0x1f8>
 800a776:	4650      	mov	r0, sl
 800a778:	ec49 8b10 	vmov	d0, r8, r9
 800a77c:	f000 fc00 	bl	800af80 <scalbn>
 800a780:	ec57 6b10 	vmov	r6, r7, d0
 800a784:	2200      	movs	r2, #0
 800a786:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a78a:	ee10 0a10 	vmov	r0, s0
 800a78e:	4639      	mov	r1, r7
 800a790:	f7f5 ff44 	bl	800061c <__aeabi_dmul>
 800a794:	ec41 0b10 	vmov	d0, r0, r1
 800a798:	f000 fb6e 	bl	800ae78 <floor>
 800a79c:	2200      	movs	r2, #0
 800a79e:	ec51 0b10 	vmov	r0, r1, d0
 800a7a2:	4b7e      	ldr	r3, [pc, #504]	; (800a99c <__kernel_rem_pio2+0x32c>)
 800a7a4:	f7f5 ff3a 	bl	800061c <__aeabi_dmul>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	f7f5 fd7c 	bl	80002ac <__aeabi_dsub>
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	f7f6 f9ca 	bl	8000b50 <__aeabi_d2iz>
 800a7bc:	9006      	str	r0, [sp, #24]
 800a7be:	f7f5 fec3 	bl	8000548 <__aeabi_i2d>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	f7f5 fd6f 	bl	80002ac <__aeabi_dsub>
 800a7ce:	f1ba 0f00 	cmp.w	sl, #0
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	460f      	mov	r7, r1
 800a7d6:	dd6c      	ble.n	800a8b2 <__kernel_rem_pio2+0x242>
 800a7d8:	1e62      	subs	r2, r4, #1
 800a7da:	ab0e      	add	r3, sp, #56	; 0x38
 800a7dc:	f1ca 0118 	rsb	r1, sl, #24
 800a7e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a7e4:	9d06      	ldr	r5, [sp, #24]
 800a7e6:	fa40 f301 	asr.w	r3, r0, r1
 800a7ea:	441d      	add	r5, r3
 800a7ec:	408b      	lsls	r3, r1
 800a7ee:	1ac0      	subs	r0, r0, r3
 800a7f0:	ab0e      	add	r3, sp, #56	; 0x38
 800a7f2:	9506      	str	r5, [sp, #24]
 800a7f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a7f8:	f1ca 0317 	rsb	r3, sl, #23
 800a7fc:	fa40 f303 	asr.w	r3, r0, r3
 800a800:	9302      	str	r3, [sp, #8]
 800a802:	9b02      	ldr	r3, [sp, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dd62      	ble.n	800a8ce <__kernel_rem_pio2+0x25e>
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	2200      	movs	r2, #0
 800a80c:	3301      	adds	r3, #1
 800a80e:	9306      	str	r3, [sp, #24]
 800a810:	4615      	mov	r5, r2
 800a812:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a816:	4294      	cmp	r4, r2
 800a818:	f300 8095 	bgt.w	800a946 <__kernel_rem_pio2+0x2d6>
 800a81c:	f1ba 0f00 	cmp.w	sl, #0
 800a820:	dd07      	ble.n	800a832 <__kernel_rem_pio2+0x1c2>
 800a822:	f1ba 0f01 	cmp.w	sl, #1
 800a826:	f000 80a2 	beq.w	800a96e <__kernel_rem_pio2+0x2fe>
 800a82a:	f1ba 0f02 	cmp.w	sl, #2
 800a82e:	f000 80c1 	beq.w	800a9b4 <__kernel_rem_pio2+0x344>
 800a832:	9b02      	ldr	r3, [sp, #8]
 800a834:	2b02      	cmp	r3, #2
 800a836:	d14a      	bne.n	800a8ce <__kernel_rem_pio2+0x25e>
 800a838:	4632      	mov	r2, r6
 800a83a:	463b      	mov	r3, r7
 800a83c:	2000      	movs	r0, #0
 800a83e:	4958      	ldr	r1, [pc, #352]	; (800a9a0 <__kernel_rem_pio2+0x330>)
 800a840:	f7f5 fd34 	bl	80002ac <__aeabi_dsub>
 800a844:	4606      	mov	r6, r0
 800a846:	460f      	mov	r7, r1
 800a848:	2d00      	cmp	r5, #0
 800a84a:	d040      	beq.n	800a8ce <__kernel_rem_pio2+0x25e>
 800a84c:	4650      	mov	r0, sl
 800a84e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a990 <__kernel_rem_pio2+0x320>
 800a852:	f000 fb95 	bl	800af80 <scalbn>
 800a856:	4630      	mov	r0, r6
 800a858:	4639      	mov	r1, r7
 800a85a:	ec53 2b10 	vmov	r2, r3, d0
 800a85e:	f7f5 fd25 	bl	80002ac <__aeabi_dsub>
 800a862:	4606      	mov	r6, r0
 800a864:	460f      	mov	r7, r1
 800a866:	e032      	b.n	800a8ce <__kernel_rem_pio2+0x25e>
 800a868:	2200      	movs	r2, #0
 800a86a:	4b4e      	ldr	r3, [pc, #312]	; (800a9a4 <__kernel_rem_pio2+0x334>)
 800a86c:	4640      	mov	r0, r8
 800a86e:	4649      	mov	r1, r9
 800a870:	f7f5 fed4 	bl	800061c <__aeabi_dmul>
 800a874:	f7f6 f96c 	bl	8000b50 <__aeabi_d2iz>
 800a878:	f7f5 fe66 	bl	8000548 <__aeabi_i2d>
 800a87c:	2200      	movs	r2, #0
 800a87e:	4b4a      	ldr	r3, [pc, #296]	; (800a9a8 <__kernel_rem_pio2+0x338>)
 800a880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a884:	f7f5 feca 	bl	800061c <__aeabi_dmul>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4640      	mov	r0, r8
 800a88e:	4649      	mov	r1, r9
 800a890:	f7f5 fd0c 	bl	80002ac <__aeabi_dsub>
 800a894:	f7f6 f95c 	bl	8000b50 <__aeabi_d2iz>
 800a898:	ab0e      	add	r3, sp, #56	; 0x38
 800a89a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a89e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a8a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8a6:	f7f5 fd03 	bl	80002b0 <__adddf3>
 800a8aa:	3501      	adds	r5, #1
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	4689      	mov	r9, r1
 800a8b0:	e75e      	b.n	800a770 <__kernel_rem_pio2+0x100>
 800a8b2:	d105      	bne.n	800a8c0 <__kernel_rem_pio2+0x250>
 800a8b4:	1e63      	subs	r3, r4, #1
 800a8b6:	aa0e      	add	r2, sp, #56	; 0x38
 800a8b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a8bc:	15c3      	asrs	r3, r0, #23
 800a8be:	e79f      	b.n	800a800 <__kernel_rem_pio2+0x190>
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	4b3a      	ldr	r3, [pc, #232]	; (800a9ac <__kernel_rem_pio2+0x33c>)
 800a8c4:	f7f6 f930 	bl	8000b28 <__aeabi_dcmpge>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d139      	bne.n	800a940 <__kernel_rem_pio2+0x2d0>
 800a8cc:	9002      	str	r0, [sp, #8]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	f7f6 f909 	bl	8000aec <__aeabi_dcmpeq>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f000 80c7 	beq.w	800aa6e <__kernel_rem_pio2+0x3fe>
 800a8e0:	1e65      	subs	r5, r4, #1
 800a8e2:	462b      	mov	r3, r5
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	9904      	ldr	r1, [sp, #16]
 800a8e8:	428b      	cmp	r3, r1
 800a8ea:	da6a      	bge.n	800a9c2 <__kernel_rem_pio2+0x352>
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	f000 8088 	beq.w	800aa02 <__kernel_rem_pio2+0x392>
 800a8f2:	ab0e      	add	r3, sp, #56	; 0x38
 800a8f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a8f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80b4 	beq.w	800aa6a <__kernel_rem_pio2+0x3fa>
 800a902:	4650      	mov	r0, sl
 800a904:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a990 <__kernel_rem_pio2+0x320>
 800a908:	f000 fb3a 	bl	800af80 <scalbn>
 800a90c:	00ec      	lsls	r4, r5, #3
 800a90e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a910:	191e      	adds	r6, r3, r4
 800a912:	ec59 8b10 	vmov	r8, r9, d0
 800a916:	f106 0a08 	add.w	sl, r6, #8
 800a91a:	462f      	mov	r7, r5
 800a91c:	2f00      	cmp	r7, #0
 800a91e:	f280 80df 	bge.w	800aae0 <__kernel_rem_pio2+0x470>
 800a922:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a988 <__kernel_rem_pio2+0x318>
 800a926:	f04f 0a00 	mov.w	sl, #0
 800a92a:	eba5 030a 	sub.w	r3, r5, sl
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f2c0 810a 	blt.w	800ab48 <__kernel_rem_pio2+0x4d8>
 800a934:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a9b0 <__kernel_rem_pio2+0x340>
 800a938:	ec59 8b18 	vmov	r8, r9, d8
 800a93c:	2700      	movs	r7, #0
 800a93e:	e0f5      	b.n	800ab2c <__kernel_rem_pio2+0x4bc>
 800a940:	2302      	movs	r3, #2
 800a942:	9302      	str	r3, [sp, #8]
 800a944:	e760      	b.n	800a808 <__kernel_rem_pio2+0x198>
 800a946:	ab0e      	add	r3, sp, #56	; 0x38
 800a948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94c:	b94d      	cbnz	r5, 800a962 <__kernel_rem_pio2+0x2f2>
 800a94e:	b12b      	cbz	r3, 800a95c <__kernel_rem_pio2+0x2ec>
 800a950:	a80e      	add	r0, sp, #56	; 0x38
 800a952:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a956:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a95a:	2301      	movs	r3, #1
 800a95c:	3201      	adds	r2, #1
 800a95e:	461d      	mov	r5, r3
 800a960:	e759      	b.n	800a816 <__kernel_rem_pio2+0x1a6>
 800a962:	a80e      	add	r0, sp, #56	; 0x38
 800a964:	1acb      	subs	r3, r1, r3
 800a966:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a96a:	462b      	mov	r3, r5
 800a96c:	e7f6      	b.n	800a95c <__kernel_rem_pio2+0x2ec>
 800a96e:	1e62      	subs	r2, r4, #1
 800a970:	ab0e      	add	r3, sp, #56	; 0x38
 800a972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a976:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a97a:	a90e      	add	r1, sp, #56	; 0x38
 800a97c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a980:	e757      	b.n	800a832 <__kernel_rem_pio2+0x1c2>
 800a982:	bf00      	nop
 800a984:	f3af 8000 	nop.w
	...
 800a994:	3ff00000 	.word	0x3ff00000
 800a998:	08010348 	.word	0x08010348
 800a99c:	40200000 	.word	0x40200000
 800a9a0:	3ff00000 	.word	0x3ff00000
 800a9a4:	3e700000 	.word	0x3e700000
 800a9a8:	41700000 	.word	0x41700000
 800a9ac:	3fe00000 	.word	0x3fe00000
 800a9b0:	08010308 	.word	0x08010308
 800a9b4:	1e62      	subs	r2, r4, #1
 800a9b6:	ab0e      	add	r3, sp, #56	; 0x38
 800a9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a9c0:	e7db      	b.n	800a97a <__kernel_rem_pio2+0x30a>
 800a9c2:	a90e      	add	r1, sp, #56	; 0x38
 800a9c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	e78b      	b.n	800a8e6 <__kernel_rem_pio2+0x276>
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a9d4:	2900      	cmp	r1, #0
 800a9d6:	d0fa      	beq.n	800a9ce <__kernel_rem_pio2+0x35e>
 800a9d8:	9a08      	ldr	r2, [sp, #32]
 800a9da:	4422      	add	r2, r4
 800a9dc:	00d2      	lsls	r2, r2, #3
 800a9de:	a922      	add	r1, sp, #136	; 0x88
 800a9e0:	18e3      	adds	r3, r4, r3
 800a9e2:	9206      	str	r2, [sp, #24]
 800a9e4:	440a      	add	r2, r1
 800a9e6:	9302      	str	r3, [sp, #8]
 800a9e8:	f10b 0108 	add.w	r1, fp, #8
 800a9ec:	f102 0308 	add.w	r3, r2, #8
 800a9f0:	1c66      	adds	r6, r4, #1
 800a9f2:	910a      	str	r1, [sp, #40]	; 0x28
 800a9f4:	2500      	movs	r5, #0
 800a9f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a9f8:	9b02      	ldr	r3, [sp, #8]
 800a9fa:	42b3      	cmp	r3, r6
 800a9fc:	da04      	bge.n	800aa08 <__kernel_rem_pio2+0x398>
 800a9fe:	461c      	mov	r4, r3
 800aa00:	e6a6      	b.n	800a750 <__kernel_rem_pio2+0xe0>
 800aa02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa04:	2301      	movs	r3, #1
 800aa06:	e7e3      	b.n	800a9d0 <__kernel_rem_pio2+0x360>
 800aa08:	9b06      	ldr	r3, [sp, #24]
 800aa0a:	18ef      	adds	r7, r5, r3
 800aa0c:	ab22      	add	r3, sp, #136	; 0x88
 800aa0e:	441f      	add	r7, r3
 800aa10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aa16:	f7f5 fd97 	bl	8000548 <__aeabi_i2d>
 800aa1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa1c:	461c      	mov	r4, r3
 800aa1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa20:	e9c7 0100 	strd	r0, r1, [r7]
 800aa24:	eb03 0b05 	add.w	fp, r3, r5
 800aa28:	2700      	movs	r7, #0
 800aa2a:	f04f 0800 	mov.w	r8, #0
 800aa2e:	f04f 0900 	mov.w	r9, #0
 800aa32:	9b07      	ldr	r3, [sp, #28]
 800aa34:	429f      	cmp	r7, r3
 800aa36:	dd08      	ble.n	800aa4a <__kernel_rem_pio2+0x3da>
 800aa38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3a:	aa72      	add	r2, sp, #456	; 0x1c8
 800aa3c:	18eb      	adds	r3, r5, r3
 800aa3e:	4413      	add	r3, r2
 800aa40:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800aa44:	3601      	adds	r6, #1
 800aa46:	3508      	adds	r5, #8
 800aa48:	e7d6      	b.n	800a9f8 <__kernel_rem_pio2+0x388>
 800aa4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800aa4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aa52:	f7f5 fde3 	bl	800061c <__aeabi_dmul>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	f7f5 fc27 	bl	80002b0 <__adddf3>
 800aa62:	3701      	adds	r7, #1
 800aa64:	4680      	mov	r8, r0
 800aa66:	4689      	mov	r9, r1
 800aa68:	e7e3      	b.n	800aa32 <__kernel_rem_pio2+0x3c2>
 800aa6a:	3d01      	subs	r5, #1
 800aa6c:	e741      	b.n	800a8f2 <__kernel_rem_pio2+0x282>
 800aa6e:	f1ca 0000 	rsb	r0, sl, #0
 800aa72:	ec47 6b10 	vmov	d0, r6, r7
 800aa76:	f000 fa83 	bl	800af80 <scalbn>
 800aa7a:	ec57 6b10 	vmov	r6, r7, d0
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4b99      	ldr	r3, [pc, #612]	; (800ace8 <__kernel_rem_pio2+0x678>)
 800aa82:	ee10 0a10 	vmov	r0, s0
 800aa86:	4639      	mov	r1, r7
 800aa88:	f7f6 f84e 	bl	8000b28 <__aeabi_dcmpge>
 800aa8c:	b1f8      	cbz	r0, 800aace <__kernel_rem_pio2+0x45e>
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4b96      	ldr	r3, [pc, #600]	; (800acec <__kernel_rem_pio2+0x67c>)
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f5 fdc1 	bl	800061c <__aeabi_dmul>
 800aa9a:	f7f6 f859 	bl	8000b50 <__aeabi_d2iz>
 800aa9e:	4680      	mov	r8, r0
 800aaa0:	f7f5 fd52 	bl	8000548 <__aeabi_i2d>
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	4b90      	ldr	r3, [pc, #576]	; (800ace8 <__kernel_rem_pio2+0x678>)
 800aaa8:	f7f5 fdb8 	bl	800061c <__aeabi_dmul>
 800aaac:	460b      	mov	r3, r1
 800aaae:	4602      	mov	r2, r0
 800aab0:	4639      	mov	r1, r7
 800aab2:	4630      	mov	r0, r6
 800aab4:	f7f5 fbfa 	bl	80002ac <__aeabi_dsub>
 800aab8:	f7f6 f84a 	bl	8000b50 <__aeabi_d2iz>
 800aabc:	1c65      	adds	r5, r4, #1
 800aabe:	ab0e      	add	r3, sp, #56	; 0x38
 800aac0:	f10a 0a18 	add.w	sl, sl, #24
 800aac4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aac8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800aacc:	e719      	b.n	800a902 <__kernel_rem_pio2+0x292>
 800aace:	4630      	mov	r0, r6
 800aad0:	4639      	mov	r1, r7
 800aad2:	f7f6 f83d 	bl	8000b50 <__aeabi_d2iz>
 800aad6:	ab0e      	add	r3, sp, #56	; 0x38
 800aad8:	4625      	mov	r5, r4
 800aada:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aade:	e710      	b.n	800a902 <__kernel_rem_pio2+0x292>
 800aae0:	ab0e      	add	r3, sp, #56	; 0x38
 800aae2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800aae6:	f7f5 fd2f 	bl	8000548 <__aeabi_i2d>
 800aaea:	4642      	mov	r2, r8
 800aaec:	464b      	mov	r3, r9
 800aaee:	f7f5 fd95 	bl	800061c <__aeabi_dmul>
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800aaf8:	4b7c      	ldr	r3, [pc, #496]	; (800acec <__kernel_rem_pio2+0x67c>)
 800aafa:	4640      	mov	r0, r8
 800aafc:	4649      	mov	r1, r9
 800aafe:	f7f5 fd8d 	bl	800061c <__aeabi_dmul>
 800ab02:	3f01      	subs	r7, #1
 800ab04:	4680      	mov	r8, r0
 800ab06:	4689      	mov	r9, r1
 800ab08:	e708      	b.n	800a91c <__kernel_rem_pio2+0x2ac>
 800ab0a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ab16:	f7f5 fd81 	bl	800061c <__aeabi_dmul>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	4640      	mov	r0, r8
 800ab20:	4649      	mov	r1, r9
 800ab22:	f7f5 fbc5 	bl	80002b0 <__adddf3>
 800ab26:	3701      	adds	r7, #1
 800ab28:	4680      	mov	r8, r0
 800ab2a:	4689      	mov	r9, r1
 800ab2c:	9b04      	ldr	r3, [sp, #16]
 800ab2e:	429f      	cmp	r7, r3
 800ab30:	dc01      	bgt.n	800ab36 <__kernel_rem_pio2+0x4c6>
 800ab32:	45ba      	cmp	sl, r7
 800ab34:	dae9      	bge.n	800ab0a <__kernel_rem_pio2+0x49a>
 800ab36:	ab4a      	add	r3, sp, #296	; 0x128
 800ab38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab3c:	e9c3 8900 	strd	r8, r9, [r3]
 800ab40:	f10a 0a01 	add.w	sl, sl, #1
 800ab44:	3e08      	subs	r6, #8
 800ab46:	e6f0      	b.n	800a92a <__kernel_rem_pio2+0x2ba>
 800ab48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ab4a:	2b03      	cmp	r3, #3
 800ab4c:	d85b      	bhi.n	800ac06 <__kernel_rem_pio2+0x596>
 800ab4e:	e8df f003 	tbb	[pc, r3]
 800ab52:	264a      	.short	0x264a
 800ab54:	0226      	.short	0x0226
 800ab56:	ab9a      	add	r3, sp, #616	; 0x268
 800ab58:	441c      	add	r4, r3
 800ab5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ab5e:	46a2      	mov	sl, r4
 800ab60:	46ab      	mov	fp, r5
 800ab62:	f1bb 0f00 	cmp.w	fp, #0
 800ab66:	dc6c      	bgt.n	800ac42 <__kernel_rem_pio2+0x5d2>
 800ab68:	46a2      	mov	sl, r4
 800ab6a:	46ab      	mov	fp, r5
 800ab6c:	f1bb 0f01 	cmp.w	fp, #1
 800ab70:	f300 8086 	bgt.w	800ac80 <__kernel_rem_pio2+0x610>
 800ab74:	2000      	movs	r0, #0
 800ab76:	2100      	movs	r1, #0
 800ab78:	2d01      	cmp	r5, #1
 800ab7a:	f300 80a0 	bgt.w	800acbe <__kernel_rem_pio2+0x64e>
 800ab7e:	9b02      	ldr	r3, [sp, #8]
 800ab80:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ab84:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f040 809e 	bne.w	800acca <__kernel_rem_pio2+0x65a>
 800ab8e:	9b01      	ldr	r3, [sp, #4]
 800ab90:	e9c3 7800 	strd	r7, r8, [r3]
 800ab94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ab98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ab9c:	e033      	b.n	800ac06 <__kernel_rem_pio2+0x596>
 800ab9e:	3408      	adds	r4, #8
 800aba0:	ab4a      	add	r3, sp, #296	; 0x128
 800aba2:	441c      	add	r4, r3
 800aba4:	462e      	mov	r6, r5
 800aba6:	2000      	movs	r0, #0
 800aba8:	2100      	movs	r1, #0
 800abaa:	2e00      	cmp	r6, #0
 800abac:	da3a      	bge.n	800ac24 <__kernel_rem_pio2+0x5b4>
 800abae:	9b02      	ldr	r3, [sp, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d03d      	beq.n	800ac30 <__kernel_rem_pio2+0x5c0>
 800abb4:	4602      	mov	r2, r0
 800abb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abba:	9c01      	ldr	r4, [sp, #4]
 800abbc:	e9c4 2300 	strd	r2, r3, [r4]
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800abc8:	f7f5 fb70 	bl	80002ac <__aeabi_dsub>
 800abcc:	ae4c      	add	r6, sp, #304	; 0x130
 800abce:	2401      	movs	r4, #1
 800abd0:	42a5      	cmp	r5, r4
 800abd2:	da30      	bge.n	800ac36 <__kernel_rem_pio2+0x5c6>
 800abd4:	9b02      	ldr	r3, [sp, #8]
 800abd6:	b113      	cbz	r3, 800abde <__kernel_rem_pio2+0x56e>
 800abd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abdc:	4619      	mov	r1, r3
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800abe4:	e00f      	b.n	800ac06 <__kernel_rem_pio2+0x596>
 800abe6:	ab9a      	add	r3, sp, #616	; 0x268
 800abe8:	441c      	add	r4, r3
 800abea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800abee:	2000      	movs	r0, #0
 800abf0:	2100      	movs	r1, #0
 800abf2:	2d00      	cmp	r5, #0
 800abf4:	da10      	bge.n	800ac18 <__kernel_rem_pio2+0x5a8>
 800abf6:	9b02      	ldr	r3, [sp, #8]
 800abf8:	b113      	cbz	r3, 800ac00 <__kernel_rem_pio2+0x590>
 800abfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abfe:	4619      	mov	r1, r3
 800ac00:	9b01      	ldr	r3, [sp, #4]
 800ac02:	e9c3 0100 	strd	r0, r1, [r3]
 800ac06:	9b06      	ldr	r3, [sp, #24]
 800ac08:	f003 0007 	and.w	r0, r3, #7
 800ac0c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ac10:	ecbd 8b02 	vpop	{d8}
 800ac14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac18:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ac1c:	f7f5 fb48 	bl	80002b0 <__adddf3>
 800ac20:	3d01      	subs	r5, #1
 800ac22:	e7e6      	b.n	800abf2 <__kernel_rem_pio2+0x582>
 800ac24:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ac28:	f7f5 fb42 	bl	80002b0 <__adddf3>
 800ac2c:	3e01      	subs	r6, #1
 800ac2e:	e7bc      	b.n	800abaa <__kernel_rem_pio2+0x53a>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	e7c1      	b.n	800abba <__kernel_rem_pio2+0x54a>
 800ac36:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ac3a:	f7f5 fb39 	bl	80002b0 <__adddf3>
 800ac3e:	3401      	adds	r4, #1
 800ac40:	e7c6      	b.n	800abd0 <__kernel_rem_pio2+0x560>
 800ac42:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800ac46:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ac4a:	4640      	mov	r0, r8
 800ac4c:	ec53 2b17 	vmov	r2, r3, d7
 800ac50:	4649      	mov	r1, r9
 800ac52:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac56:	f7f5 fb2b 	bl	80002b0 <__adddf3>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4606      	mov	r6, r0
 800ac60:	460f      	mov	r7, r1
 800ac62:	4640      	mov	r0, r8
 800ac64:	4649      	mov	r1, r9
 800ac66:	f7f5 fb21 	bl	80002ac <__aeabi_dsub>
 800ac6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac6e:	f7f5 fb1f 	bl	80002b0 <__adddf3>
 800ac72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac76:	e9ca 0100 	strd	r0, r1, [sl]
 800ac7a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800ac7e:	e770      	b.n	800ab62 <__kernel_rem_pio2+0x4f2>
 800ac80:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800ac84:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ac88:	4630      	mov	r0, r6
 800ac8a:	ec53 2b17 	vmov	r2, r3, d7
 800ac8e:	4639      	mov	r1, r7
 800ac90:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac94:	f7f5 fb0c 	bl	80002b0 <__adddf3>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4680      	mov	r8, r0
 800ac9e:	4689      	mov	r9, r1
 800aca0:	4630      	mov	r0, r6
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 fb02 	bl	80002ac <__aeabi_dsub>
 800aca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acac:	f7f5 fb00 	bl	80002b0 <__adddf3>
 800acb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acb4:	e9ca 0100 	strd	r0, r1, [sl]
 800acb8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800acbc:	e756      	b.n	800ab6c <__kernel_rem_pio2+0x4fc>
 800acbe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800acc2:	f7f5 faf5 	bl	80002b0 <__adddf3>
 800acc6:	3d01      	subs	r5, #1
 800acc8:	e756      	b.n	800ab78 <__kernel_rem_pio2+0x508>
 800acca:	9b01      	ldr	r3, [sp, #4]
 800accc:	9a01      	ldr	r2, [sp, #4]
 800acce:	601f      	str	r7, [r3, #0]
 800acd0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800acd4:	605c      	str	r4, [r3, #4]
 800acd6:	609d      	str	r5, [r3, #8]
 800acd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800acdc:	60d3      	str	r3, [r2, #12]
 800acde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ace2:	6110      	str	r0, [r2, #16]
 800ace4:	6153      	str	r3, [r2, #20]
 800ace6:	e78e      	b.n	800ac06 <__kernel_rem_pio2+0x596>
 800ace8:	41700000 	.word	0x41700000
 800acec:	3e700000 	.word	0x3e700000

0800acf0 <__kernel_sin>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	ec55 4b10 	vmov	r4, r5, d0
 800acf8:	b085      	sub	sp, #20
 800acfa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800acfe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ad02:	ed8d 1b00 	vstr	d1, [sp]
 800ad06:	9002      	str	r0, [sp, #8]
 800ad08:	da06      	bge.n	800ad18 <__kernel_sin+0x28>
 800ad0a:	ee10 0a10 	vmov	r0, s0
 800ad0e:	4629      	mov	r1, r5
 800ad10:	f7f5 ff1e 	bl	8000b50 <__aeabi_d2iz>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d051      	beq.n	800adbc <__kernel_sin+0xcc>
 800ad18:	4622      	mov	r2, r4
 800ad1a:	462b      	mov	r3, r5
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	4629      	mov	r1, r5
 800ad20:	f7f5 fc7c 	bl	800061c <__aeabi_dmul>
 800ad24:	4682      	mov	sl, r0
 800ad26:	468b      	mov	fp, r1
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 fc74 	bl	800061c <__aeabi_dmul>
 800ad34:	a341      	add	r3, pc, #260	; (adr r3, 800ae3c <__kernel_sin+0x14c>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	4689      	mov	r9, r1
 800ad3e:	4650      	mov	r0, sl
 800ad40:	4659      	mov	r1, fp
 800ad42:	f7f5 fc6b 	bl	800061c <__aeabi_dmul>
 800ad46:	a33f      	add	r3, pc, #252	; (adr r3, 800ae44 <__kernel_sin+0x154>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	f7f5 faae 	bl	80002ac <__aeabi_dsub>
 800ad50:	4652      	mov	r2, sl
 800ad52:	465b      	mov	r3, fp
 800ad54:	f7f5 fc62 	bl	800061c <__aeabi_dmul>
 800ad58:	a33c      	add	r3, pc, #240	; (adr r3, 800ae4c <__kernel_sin+0x15c>)
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	f7f5 faa7 	bl	80002b0 <__adddf3>
 800ad62:	4652      	mov	r2, sl
 800ad64:	465b      	mov	r3, fp
 800ad66:	f7f5 fc59 	bl	800061c <__aeabi_dmul>
 800ad6a:	a33a      	add	r3, pc, #232	; (adr r3, 800ae54 <__kernel_sin+0x164>)
 800ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad70:	f7f5 fa9c 	bl	80002ac <__aeabi_dsub>
 800ad74:	4652      	mov	r2, sl
 800ad76:	465b      	mov	r3, fp
 800ad78:	f7f5 fc50 	bl	800061c <__aeabi_dmul>
 800ad7c:	a337      	add	r3, pc, #220	; (adr r3, 800ae5c <__kernel_sin+0x16c>)
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	f7f5 fa95 	bl	80002b0 <__adddf3>
 800ad86:	9b02      	ldr	r3, [sp, #8]
 800ad88:	4606      	mov	r6, r0
 800ad8a:	460f      	mov	r7, r1
 800ad8c:	b9db      	cbnz	r3, 800adc6 <__kernel_sin+0xd6>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4650      	mov	r0, sl
 800ad94:	4659      	mov	r1, fp
 800ad96:	f7f5 fc41 	bl	800061c <__aeabi_dmul>
 800ad9a:	a325      	add	r3, pc, #148	; (adr r3, 800ae30 <__kernel_sin+0x140>)
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	f7f5 fa84 	bl	80002ac <__aeabi_dsub>
 800ada4:	4642      	mov	r2, r8
 800ada6:	464b      	mov	r3, r9
 800ada8:	f7f5 fc38 	bl	800061c <__aeabi_dmul>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4620      	mov	r0, r4
 800adb2:	4629      	mov	r1, r5
 800adb4:	f7f5 fa7c 	bl	80002b0 <__adddf3>
 800adb8:	4604      	mov	r4, r0
 800adba:	460d      	mov	r5, r1
 800adbc:	ec45 4b10 	vmov	d0, r4, r5
 800adc0:	b005      	add	sp, #20
 800adc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc6:	2200      	movs	r2, #0
 800adc8:	4b1b      	ldr	r3, [pc, #108]	; (800ae38 <__kernel_sin+0x148>)
 800adca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adce:	f7f5 fc25 	bl	800061c <__aeabi_dmul>
 800add2:	4632      	mov	r2, r6
 800add4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800add8:	463b      	mov	r3, r7
 800adda:	4640      	mov	r0, r8
 800addc:	4649      	mov	r1, r9
 800adde:	f7f5 fc1d 	bl	800061c <__aeabi_dmul>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adea:	f7f5 fa5f 	bl	80002ac <__aeabi_dsub>
 800adee:	4652      	mov	r2, sl
 800adf0:	465b      	mov	r3, fp
 800adf2:	f7f5 fc13 	bl	800061c <__aeabi_dmul>
 800adf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adfa:	f7f5 fa57 	bl	80002ac <__aeabi_dsub>
 800adfe:	a30c      	add	r3, pc, #48	; (adr r3, 800ae30 <__kernel_sin+0x140>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	4606      	mov	r6, r0
 800ae06:	460f      	mov	r7, r1
 800ae08:	4640      	mov	r0, r8
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	f7f5 fc06 	bl	800061c <__aeabi_dmul>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4630      	mov	r0, r6
 800ae16:	4639      	mov	r1, r7
 800ae18:	f7f5 fa4a 	bl	80002b0 <__adddf3>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4620      	mov	r0, r4
 800ae22:	4629      	mov	r1, r5
 800ae24:	f7f5 fa42 	bl	80002ac <__aeabi_dsub>
 800ae28:	e7c6      	b.n	800adb8 <__kernel_sin+0xc8>
 800ae2a:	bf00      	nop
 800ae2c:	f3af 8000 	nop.w
 800ae30:	55555549 	.word	0x55555549
 800ae34:	3fc55555 	.word	0x3fc55555
 800ae38:	3fe00000 	.word	0x3fe00000
 800ae3c:	5acfd57c 	.word	0x5acfd57c
 800ae40:	3de5d93a 	.word	0x3de5d93a
 800ae44:	8a2b9ceb 	.word	0x8a2b9ceb
 800ae48:	3e5ae5e6 	.word	0x3e5ae5e6
 800ae4c:	57b1fe7d 	.word	0x57b1fe7d
 800ae50:	3ec71de3 	.word	0x3ec71de3
 800ae54:	19c161d5 	.word	0x19c161d5
 800ae58:	3f2a01a0 	.word	0x3f2a01a0
 800ae5c:	1110f8a6 	.word	0x1110f8a6
 800ae60:	3f811111 	.word	0x3f811111

0800ae64 <fabs>:
 800ae64:	ec51 0b10 	vmov	r0, r1, d0
 800ae68:	ee10 2a10 	vmov	r2, s0
 800ae6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae70:	ec43 2b10 	vmov	d0, r2, r3
 800ae74:	4770      	bx	lr
	...

0800ae78 <floor>:
 800ae78:	ec51 0b10 	vmov	r0, r1, d0
 800ae7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ae84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ae88:	2e13      	cmp	r6, #19
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	ee10 5a10 	vmov	r5, s0
 800ae90:	4680      	mov	r8, r0
 800ae92:	dc34      	bgt.n	800aefe <floor+0x86>
 800ae94:	2e00      	cmp	r6, #0
 800ae96:	da16      	bge.n	800aec6 <floor+0x4e>
 800ae98:	a335      	add	r3, pc, #212	; (adr r3, 800af70 <floor+0xf8>)
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	f7f5 fa07 	bl	80002b0 <__adddf3>
 800aea2:	2200      	movs	r2, #0
 800aea4:	2300      	movs	r3, #0
 800aea6:	f7f5 fe49 	bl	8000b3c <__aeabi_dcmpgt>
 800aeaa:	b148      	cbz	r0, 800aec0 <floor+0x48>
 800aeac:	2c00      	cmp	r4, #0
 800aeae:	da59      	bge.n	800af64 <floor+0xec>
 800aeb0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800aeb4:	4a30      	ldr	r2, [pc, #192]	; (800af78 <floor+0x100>)
 800aeb6:	432b      	orrs	r3, r5
 800aeb8:	2500      	movs	r5, #0
 800aeba:	42ab      	cmp	r3, r5
 800aebc:	bf18      	it	ne
 800aebe:	4614      	movne	r4, r2
 800aec0:	4621      	mov	r1, r4
 800aec2:	4628      	mov	r0, r5
 800aec4:	e025      	b.n	800af12 <floor+0x9a>
 800aec6:	4f2d      	ldr	r7, [pc, #180]	; (800af7c <floor+0x104>)
 800aec8:	4137      	asrs	r7, r6
 800aeca:	ea01 0307 	and.w	r3, r1, r7
 800aece:	4303      	orrs	r3, r0
 800aed0:	d01f      	beq.n	800af12 <floor+0x9a>
 800aed2:	a327      	add	r3, pc, #156	; (adr r3, 800af70 <floor+0xf8>)
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f7f5 f9ea 	bl	80002b0 <__adddf3>
 800aedc:	2200      	movs	r2, #0
 800aede:	2300      	movs	r3, #0
 800aee0:	f7f5 fe2c 	bl	8000b3c <__aeabi_dcmpgt>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d0eb      	beq.n	800aec0 <floor+0x48>
 800aee8:	2c00      	cmp	r4, #0
 800aeea:	bfbe      	ittt	lt
 800aeec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aef0:	fa43 f606 	asrlt.w	r6, r3, r6
 800aef4:	19a4      	addlt	r4, r4, r6
 800aef6:	ea24 0407 	bic.w	r4, r4, r7
 800aefa:	2500      	movs	r5, #0
 800aefc:	e7e0      	b.n	800aec0 <floor+0x48>
 800aefe:	2e33      	cmp	r6, #51	; 0x33
 800af00:	dd0b      	ble.n	800af1a <floor+0xa2>
 800af02:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af06:	d104      	bne.n	800af12 <floor+0x9a>
 800af08:	ee10 2a10 	vmov	r2, s0
 800af0c:	460b      	mov	r3, r1
 800af0e:	f7f5 f9cf 	bl	80002b0 <__adddf3>
 800af12:	ec41 0b10 	vmov	d0, r0, r1
 800af16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af1a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800af1e:	f04f 33ff 	mov.w	r3, #4294967295
 800af22:	fa23 f707 	lsr.w	r7, r3, r7
 800af26:	4207      	tst	r7, r0
 800af28:	d0f3      	beq.n	800af12 <floor+0x9a>
 800af2a:	a311      	add	r3, pc, #68	; (adr r3, 800af70 <floor+0xf8>)
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	f7f5 f9be 	bl	80002b0 <__adddf3>
 800af34:	2200      	movs	r2, #0
 800af36:	2300      	movs	r3, #0
 800af38:	f7f5 fe00 	bl	8000b3c <__aeabi_dcmpgt>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d0bf      	beq.n	800aec0 <floor+0x48>
 800af40:	2c00      	cmp	r4, #0
 800af42:	da02      	bge.n	800af4a <floor+0xd2>
 800af44:	2e14      	cmp	r6, #20
 800af46:	d103      	bne.n	800af50 <floor+0xd8>
 800af48:	3401      	adds	r4, #1
 800af4a:	ea25 0507 	bic.w	r5, r5, r7
 800af4e:	e7b7      	b.n	800aec0 <floor+0x48>
 800af50:	2301      	movs	r3, #1
 800af52:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800af56:	fa03 f606 	lsl.w	r6, r3, r6
 800af5a:	4435      	add	r5, r6
 800af5c:	4545      	cmp	r5, r8
 800af5e:	bf38      	it	cc
 800af60:	18e4      	addcc	r4, r4, r3
 800af62:	e7f2      	b.n	800af4a <floor+0xd2>
 800af64:	2500      	movs	r5, #0
 800af66:	462c      	mov	r4, r5
 800af68:	e7aa      	b.n	800aec0 <floor+0x48>
 800af6a:	bf00      	nop
 800af6c:	f3af 8000 	nop.w
 800af70:	8800759c 	.word	0x8800759c
 800af74:	7e37e43c 	.word	0x7e37e43c
 800af78:	bff00000 	.word	0xbff00000
 800af7c:	000fffff 	.word	0x000fffff

0800af80 <scalbn>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	ec55 4b10 	vmov	r4, r5, d0
 800af86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800af8a:	4606      	mov	r6, r0
 800af8c:	462b      	mov	r3, r5
 800af8e:	b9aa      	cbnz	r2, 800afbc <scalbn+0x3c>
 800af90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af94:	4323      	orrs	r3, r4
 800af96:	d03b      	beq.n	800b010 <scalbn+0x90>
 800af98:	4b31      	ldr	r3, [pc, #196]	; (800b060 <scalbn+0xe0>)
 800af9a:	4629      	mov	r1, r5
 800af9c:	2200      	movs	r2, #0
 800af9e:	ee10 0a10 	vmov	r0, s0
 800afa2:	f7f5 fb3b 	bl	800061c <__aeabi_dmul>
 800afa6:	4b2f      	ldr	r3, [pc, #188]	; (800b064 <scalbn+0xe4>)
 800afa8:	429e      	cmp	r6, r3
 800afaa:	4604      	mov	r4, r0
 800afac:	460d      	mov	r5, r1
 800afae:	da12      	bge.n	800afd6 <scalbn+0x56>
 800afb0:	a327      	add	r3, pc, #156	; (adr r3, 800b050 <scalbn+0xd0>)
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	f7f5 fb31 	bl	800061c <__aeabi_dmul>
 800afba:	e009      	b.n	800afd0 <scalbn+0x50>
 800afbc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800afc0:	428a      	cmp	r2, r1
 800afc2:	d10c      	bne.n	800afde <scalbn+0x5e>
 800afc4:	ee10 2a10 	vmov	r2, s0
 800afc8:	4620      	mov	r0, r4
 800afca:	4629      	mov	r1, r5
 800afcc:	f7f5 f970 	bl	80002b0 <__adddf3>
 800afd0:	4604      	mov	r4, r0
 800afd2:	460d      	mov	r5, r1
 800afd4:	e01c      	b.n	800b010 <scalbn+0x90>
 800afd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800afda:	460b      	mov	r3, r1
 800afdc:	3a36      	subs	r2, #54	; 0x36
 800afde:	4432      	add	r2, r6
 800afe0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800afe4:	428a      	cmp	r2, r1
 800afe6:	dd0b      	ble.n	800b000 <scalbn+0x80>
 800afe8:	ec45 4b11 	vmov	d1, r4, r5
 800afec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b058 <scalbn+0xd8>
 800aff0:	f000 f83c 	bl	800b06c <copysign>
 800aff4:	a318      	add	r3, pc, #96	; (adr r3, 800b058 <scalbn+0xd8>)
 800aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affa:	ec51 0b10 	vmov	r0, r1, d0
 800affe:	e7da      	b.n	800afb6 <scalbn+0x36>
 800b000:	2a00      	cmp	r2, #0
 800b002:	dd08      	ble.n	800b016 <scalbn+0x96>
 800b004:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b008:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b00c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b010:	ec45 4b10 	vmov	d0, r4, r5
 800b014:	bd70      	pop	{r4, r5, r6, pc}
 800b016:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b01a:	da0d      	bge.n	800b038 <scalbn+0xb8>
 800b01c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b020:	429e      	cmp	r6, r3
 800b022:	ec45 4b11 	vmov	d1, r4, r5
 800b026:	dce1      	bgt.n	800afec <scalbn+0x6c>
 800b028:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b050 <scalbn+0xd0>
 800b02c:	f000 f81e 	bl	800b06c <copysign>
 800b030:	a307      	add	r3, pc, #28	; (adr r3, 800b050 <scalbn+0xd0>)
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	e7e0      	b.n	800affa <scalbn+0x7a>
 800b038:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b03c:	3236      	adds	r2, #54	; 0x36
 800b03e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b042:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b046:	4620      	mov	r0, r4
 800b048:	4629      	mov	r1, r5
 800b04a:	2200      	movs	r2, #0
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <scalbn+0xe8>)
 800b04e:	e7b2      	b.n	800afb6 <scalbn+0x36>
 800b050:	c2f8f359 	.word	0xc2f8f359
 800b054:	01a56e1f 	.word	0x01a56e1f
 800b058:	8800759c 	.word	0x8800759c
 800b05c:	7e37e43c 	.word	0x7e37e43c
 800b060:	43500000 	.word	0x43500000
 800b064:	ffff3cb0 	.word	0xffff3cb0
 800b068:	3c900000 	.word	0x3c900000

0800b06c <copysign>:
 800b06c:	ec51 0b10 	vmov	r0, r1, d0
 800b070:	ee11 0a90 	vmov	r0, s3
 800b074:	ee10 2a10 	vmov	r2, s0
 800b078:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b07c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b080:	ea41 0300 	orr.w	r3, r1, r0
 800b084:	ec43 2b10 	vmov	d0, r2, r3
 800b088:	4770      	bx	lr

0800b08a <abort>:
 800b08a:	b508      	push	{r3, lr}
 800b08c:	2006      	movs	r0, #6
 800b08e:	f000 fbcb 	bl	800b828 <raise>
 800b092:	2001      	movs	r0, #1
 800b094:	f7fc fc5a 	bl	800794c <_exit>

0800b098 <atof>:
 800b098:	2100      	movs	r1, #0
 800b09a:	f001 ba69 	b.w	800c570 <strtod>
	...

0800b0a0 <__errno>:
 800b0a0:	4b01      	ldr	r3, [pc, #4]	; (800b0a8 <__errno+0x8>)
 800b0a2:	6818      	ldr	r0, [r3, #0]
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	20000404 	.word	0x20000404

0800b0ac <__sflush_r>:
 800b0ac:	898a      	ldrh	r2, [r1, #12]
 800b0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	0710      	lsls	r0, r2, #28
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	d458      	bmi.n	800b16c <__sflush_r+0xc0>
 800b0ba:	684b      	ldr	r3, [r1, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	dc05      	bgt.n	800b0cc <__sflush_r+0x20>
 800b0c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	dc02      	bgt.n	800b0cc <__sflush_r+0x20>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0ce:	2e00      	cmp	r6, #0
 800b0d0:	d0f9      	beq.n	800b0c6 <__sflush_r+0x1a>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0d8:	682f      	ldr	r7, [r5, #0]
 800b0da:	6a21      	ldr	r1, [r4, #32]
 800b0dc:	602b      	str	r3, [r5, #0]
 800b0de:	d032      	beq.n	800b146 <__sflush_r+0x9a>
 800b0e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	075a      	lsls	r2, r3, #29
 800b0e6:	d505      	bpl.n	800b0f4 <__sflush_r+0x48>
 800b0e8:	6863      	ldr	r3, [r4, #4]
 800b0ea:	1ac0      	subs	r0, r0, r3
 800b0ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0ee:	b10b      	cbz	r3, 800b0f4 <__sflush_r+0x48>
 800b0f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0f2:	1ac0      	subs	r0, r0, r3
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0fa:	6a21      	ldr	r1, [r4, #32]
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	47b0      	blx	r6
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	d106      	bne.n	800b114 <__sflush_r+0x68>
 800b106:	6829      	ldr	r1, [r5, #0]
 800b108:	291d      	cmp	r1, #29
 800b10a:	d848      	bhi.n	800b19e <__sflush_r+0xf2>
 800b10c:	4a29      	ldr	r2, [pc, #164]	; (800b1b4 <__sflush_r+0x108>)
 800b10e:	40ca      	lsrs	r2, r1
 800b110:	07d6      	lsls	r6, r2, #31
 800b112:	d544      	bpl.n	800b19e <__sflush_r+0xf2>
 800b114:	2200      	movs	r2, #0
 800b116:	6062      	str	r2, [r4, #4]
 800b118:	04d9      	lsls	r1, r3, #19
 800b11a:	6922      	ldr	r2, [r4, #16]
 800b11c:	6022      	str	r2, [r4, #0]
 800b11e:	d504      	bpl.n	800b12a <__sflush_r+0x7e>
 800b120:	1c42      	adds	r2, r0, #1
 800b122:	d101      	bne.n	800b128 <__sflush_r+0x7c>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b903      	cbnz	r3, 800b12a <__sflush_r+0x7e>
 800b128:	6560      	str	r0, [r4, #84]	; 0x54
 800b12a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12c:	602f      	str	r7, [r5, #0]
 800b12e:	2900      	cmp	r1, #0
 800b130:	d0c9      	beq.n	800b0c6 <__sflush_r+0x1a>
 800b132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b136:	4299      	cmp	r1, r3
 800b138:	d002      	beq.n	800b140 <__sflush_r+0x94>
 800b13a:	4628      	mov	r0, r5
 800b13c:	f000 fa04 	bl	800b548 <_free_r>
 800b140:	2000      	movs	r0, #0
 800b142:	6360      	str	r0, [r4, #52]	; 0x34
 800b144:	e7c0      	b.n	800b0c8 <__sflush_r+0x1c>
 800b146:	2301      	movs	r3, #1
 800b148:	4628      	mov	r0, r5
 800b14a:	47b0      	blx	r6
 800b14c:	1c41      	adds	r1, r0, #1
 800b14e:	d1c8      	bne.n	800b0e2 <__sflush_r+0x36>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d0c5      	beq.n	800b0e2 <__sflush_r+0x36>
 800b156:	2b1d      	cmp	r3, #29
 800b158:	d001      	beq.n	800b15e <__sflush_r+0xb2>
 800b15a:	2b16      	cmp	r3, #22
 800b15c:	d101      	bne.n	800b162 <__sflush_r+0xb6>
 800b15e:	602f      	str	r7, [r5, #0]
 800b160:	e7b1      	b.n	800b0c6 <__sflush_r+0x1a>
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b168:	81a3      	strh	r3, [r4, #12]
 800b16a:	e7ad      	b.n	800b0c8 <__sflush_r+0x1c>
 800b16c:	690f      	ldr	r7, [r1, #16]
 800b16e:	2f00      	cmp	r7, #0
 800b170:	d0a9      	beq.n	800b0c6 <__sflush_r+0x1a>
 800b172:	0793      	lsls	r3, r2, #30
 800b174:	680e      	ldr	r6, [r1, #0]
 800b176:	bf08      	it	eq
 800b178:	694b      	ldreq	r3, [r1, #20]
 800b17a:	600f      	str	r7, [r1, #0]
 800b17c:	bf18      	it	ne
 800b17e:	2300      	movne	r3, #0
 800b180:	eba6 0807 	sub.w	r8, r6, r7
 800b184:	608b      	str	r3, [r1, #8]
 800b186:	f1b8 0f00 	cmp.w	r8, #0
 800b18a:	dd9c      	ble.n	800b0c6 <__sflush_r+0x1a>
 800b18c:	4643      	mov	r3, r8
 800b18e:	463a      	mov	r2, r7
 800b190:	6a21      	ldr	r1, [r4, #32]
 800b192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b194:	4628      	mov	r0, r5
 800b196:	47b0      	blx	r6
 800b198:	2800      	cmp	r0, #0
 800b19a:	dc06      	bgt.n	800b1aa <__sflush_r+0xfe>
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1a2:	81a3      	strh	r3, [r4, #12]
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	e78e      	b.n	800b0c8 <__sflush_r+0x1c>
 800b1aa:	4407      	add	r7, r0
 800b1ac:	eba8 0800 	sub.w	r8, r8, r0
 800b1b0:	e7e9      	b.n	800b186 <__sflush_r+0xda>
 800b1b2:	bf00      	nop
 800b1b4:	20400001 	.word	0x20400001

0800b1b8 <_fflush_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	690b      	ldr	r3, [r1, #16]
 800b1bc:	4605      	mov	r5, r0
 800b1be:	460c      	mov	r4, r1
 800b1c0:	b1db      	cbz	r3, 800b1fa <_fflush_r+0x42>
 800b1c2:	b118      	cbz	r0, 800b1cc <_fflush_r+0x14>
 800b1c4:	6983      	ldr	r3, [r0, #24]
 800b1c6:	b90b      	cbnz	r3, 800b1cc <_fflush_r+0x14>
 800b1c8:	f000 f860 	bl	800b28c <__sinit>
 800b1cc:	4b0c      	ldr	r3, [pc, #48]	; (800b200 <_fflush_r+0x48>)
 800b1ce:	429c      	cmp	r4, r3
 800b1d0:	d109      	bne.n	800b1e6 <_fflush_r+0x2e>
 800b1d2:	686c      	ldr	r4, [r5, #4]
 800b1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1d8:	b17b      	cbz	r3, 800b1fa <_fflush_r+0x42>
 800b1da:	4621      	mov	r1, r4
 800b1dc:	4628      	mov	r0, r5
 800b1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1e2:	f7ff bf63 	b.w	800b0ac <__sflush_r>
 800b1e6:	4b07      	ldr	r3, [pc, #28]	; (800b204 <_fflush_r+0x4c>)
 800b1e8:	429c      	cmp	r4, r3
 800b1ea:	d101      	bne.n	800b1f0 <_fflush_r+0x38>
 800b1ec:	68ac      	ldr	r4, [r5, #8]
 800b1ee:	e7f1      	b.n	800b1d4 <_fflush_r+0x1c>
 800b1f0:	4b05      	ldr	r3, [pc, #20]	; (800b208 <_fflush_r+0x50>)
 800b1f2:	429c      	cmp	r4, r3
 800b1f4:	bf08      	it	eq
 800b1f6:	68ec      	ldreq	r4, [r5, #12]
 800b1f8:	e7ec      	b.n	800b1d4 <_fflush_r+0x1c>
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	08010378 	.word	0x08010378
 800b204:	08010398 	.word	0x08010398
 800b208:	08010358 	.word	0x08010358

0800b20c <std>:
 800b20c:	2300      	movs	r3, #0
 800b20e:	b510      	push	{r4, lr}
 800b210:	4604      	mov	r4, r0
 800b212:	e9c0 3300 	strd	r3, r3, [r0]
 800b216:	6083      	str	r3, [r0, #8]
 800b218:	8181      	strh	r1, [r0, #12]
 800b21a:	6643      	str	r3, [r0, #100]	; 0x64
 800b21c:	81c2      	strh	r2, [r0, #14]
 800b21e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b222:	6183      	str	r3, [r0, #24]
 800b224:	4619      	mov	r1, r3
 800b226:	2208      	movs	r2, #8
 800b228:	305c      	adds	r0, #92	; 0x5c
 800b22a:	f000 f984 	bl	800b536 <memset>
 800b22e:	4b05      	ldr	r3, [pc, #20]	; (800b244 <std+0x38>)
 800b230:	6263      	str	r3, [r4, #36]	; 0x24
 800b232:	4b05      	ldr	r3, [pc, #20]	; (800b248 <std+0x3c>)
 800b234:	62a3      	str	r3, [r4, #40]	; 0x28
 800b236:	4b05      	ldr	r3, [pc, #20]	; (800b24c <std+0x40>)
 800b238:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b23a:	4b05      	ldr	r3, [pc, #20]	; (800b250 <std+0x44>)
 800b23c:	6224      	str	r4, [r4, #32]
 800b23e:	6323      	str	r3, [r4, #48]	; 0x30
 800b240:	bd10      	pop	{r4, pc}
 800b242:	bf00      	nop
 800b244:	0800b8c9 	.word	0x0800b8c9
 800b248:	0800b8eb 	.word	0x0800b8eb
 800b24c:	0800b923 	.word	0x0800b923
 800b250:	0800b947 	.word	0x0800b947

0800b254 <_cleanup_r>:
 800b254:	4901      	ldr	r1, [pc, #4]	; (800b25c <_cleanup_r+0x8>)
 800b256:	f000 b885 	b.w	800b364 <_fwalk_reent>
 800b25a:	bf00      	nop
 800b25c:	0800b1b9 	.word	0x0800b1b9

0800b260 <__sfmoreglue>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	1e4a      	subs	r2, r1, #1
 800b264:	2568      	movs	r5, #104	; 0x68
 800b266:	4355      	muls	r5, r2
 800b268:	460e      	mov	r6, r1
 800b26a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b26e:	f000 f9b9 	bl	800b5e4 <_malloc_r>
 800b272:	4604      	mov	r4, r0
 800b274:	b140      	cbz	r0, 800b288 <__sfmoreglue+0x28>
 800b276:	2100      	movs	r1, #0
 800b278:	e9c0 1600 	strd	r1, r6, [r0]
 800b27c:	300c      	adds	r0, #12
 800b27e:	60a0      	str	r0, [r4, #8]
 800b280:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b284:	f000 f957 	bl	800b536 <memset>
 800b288:	4620      	mov	r0, r4
 800b28a:	bd70      	pop	{r4, r5, r6, pc}

0800b28c <__sinit>:
 800b28c:	6983      	ldr	r3, [r0, #24]
 800b28e:	b510      	push	{r4, lr}
 800b290:	4604      	mov	r4, r0
 800b292:	bb33      	cbnz	r3, 800b2e2 <__sinit+0x56>
 800b294:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b298:	6503      	str	r3, [r0, #80]	; 0x50
 800b29a:	4b12      	ldr	r3, [pc, #72]	; (800b2e4 <__sinit+0x58>)
 800b29c:	4a12      	ldr	r2, [pc, #72]	; (800b2e8 <__sinit+0x5c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6282      	str	r2, [r0, #40]	; 0x28
 800b2a2:	4298      	cmp	r0, r3
 800b2a4:	bf04      	itt	eq
 800b2a6:	2301      	moveq	r3, #1
 800b2a8:	6183      	streq	r3, [r0, #24]
 800b2aa:	f000 f81f 	bl	800b2ec <__sfp>
 800b2ae:	6060      	str	r0, [r4, #4]
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 f81b 	bl	800b2ec <__sfp>
 800b2b6:	60a0      	str	r0, [r4, #8]
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 f817 	bl	800b2ec <__sfp>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	60e0      	str	r0, [r4, #12]
 800b2c2:	2104      	movs	r1, #4
 800b2c4:	6860      	ldr	r0, [r4, #4]
 800b2c6:	f7ff ffa1 	bl	800b20c <std>
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	2109      	movs	r1, #9
 800b2ce:	68a0      	ldr	r0, [r4, #8]
 800b2d0:	f7ff ff9c 	bl	800b20c <std>
 800b2d4:	2202      	movs	r2, #2
 800b2d6:	2112      	movs	r1, #18
 800b2d8:	68e0      	ldr	r0, [r4, #12]
 800b2da:	f7ff ff97 	bl	800b20c <std>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	61a3      	str	r3, [r4, #24]
 800b2e2:	bd10      	pop	{r4, pc}
 800b2e4:	080103b8 	.word	0x080103b8
 800b2e8:	0800b255 	.word	0x0800b255

0800b2ec <__sfp>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	4b1b      	ldr	r3, [pc, #108]	; (800b35c <__sfp+0x70>)
 800b2f0:	681e      	ldr	r6, [r3, #0]
 800b2f2:	69b3      	ldr	r3, [r6, #24]
 800b2f4:	4607      	mov	r7, r0
 800b2f6:	b913      	cbnz	r3, 800b2fe <__sfp+0x12>
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f7ff ffc7 	bl	800b28c <__sinit>
 800b2fe:	3648      	adds	r6, #72	; 0x48
 800b300:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b304:	3b01      	subs	r3, #1
 800b306:	d503      	bpl.n	800b310 <__sfp+0x24>
 800b308:	6833      	ldr	r3, [r6, #0]
 800b30a:	b133      	cbz	r3, 800b31a <__sfp+0x2e>
 800b30c:	6836      	ldr	r6, [r6, #0]
 800b30e:	e7f7      	b.n	800b300 <__sfp+0x14>
 800b310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b314:	b16d      	cbz	r5, 800b332 <__sfp+0x46>
 800b316:	3468      	adds	r4, #104	; 0x68
 800b318:	e7f4      	b.n	800b304 <__sfp+0x18>
 800b31a:	2104      	movs	r1, #4
 800b31c:	4638      	mov	r0, r7
 800b31e:	f7ff ff9f 	bl	800b260 <__sfmoreglue>
 800b322:	6030      	str	r0, [r6, #0]
 800b324:	2800      	cmp	r0, #0
 800b326:	d1f1      	bne.n	800b30c <__sfp+0x20>
 800b328:	230c      	movs	r3, #12
 800b32a:	603b      	str	r3, [r7, #0]
 800b32c:	4604      	mov	r4, r0
 800b32e:	4620      	mov	r0, r4
 800b330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b332:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <__sfp+0x74>)
 800b334:	6665      	str	r5, [r4, #100]	; 0x64
 800b336:	e9c4 5500 	strd	r5, r5, [r4]
 800b33a:	60a5      	str	r5, [r4, #8]
 800b33c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b340:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b344:	2208      	movs	r2, #8
 800b346:	4629      	mov	r1, r5
 800b348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b34c:	f000 f8f3 	bl	800b536 <memset>
 800b350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b358:	e7e9      	b.n	800b32e <__sfp+0x42>
 800b35a:	bf00      	nop
 800b35c:	080103b8 	.word	0x080103b8
 800b360:	ffff0001 	.word	0xffff0001

0800b364 <_fwalk_reent>:
 800b364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b368:	4680      	mov	r8, r0
 800b36a:	4689      	mov	r9, r1
 800b36c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b370:	2600      	movs	r6, #0
 800b372:	b914      	cbnz	r4, 800b37a <_fwalk_reent+0x16>
 800b374:	4630      	mov	r0, r6
 800b376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b37e:	3f01      	subs	r7, #1
 800b380:	d501      	bpl.n	800b386 <_fwalk_reent+0x22>
 800b382:	6824      	ldr	r4, [r4, #0]
 800b384:	e7f5      	b.n	800b372 <_fwalk_reent+0xe>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d907      	bls.n	800b39c <_fwalk_reent+0x38>
 800b38c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b390:	3301      	adds	r3, #1
 800b392:	d003      	beq.n	800b39c <_fwalk_reent+0x38>
 800b394:	4629      	mov	r1, r5
 800b396:	4640      	mov	r0, r8
 800b398:	47c8      	blx	r9
 800b39a:	4306      	orrs	r6, r0
 800b39c:	3568      	adds	r5, #104	; 0x68
 800b39e:	e7ee      	b.n	800b37e <_fwalk_reent+0x1a>

0800b3a0 <__libc_init_array>:
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	4e0d      	ldr	r6, [pc, #52]	; (800b3d8 <__libc_init_array+0x38>)
 800b3a4:	4c0d      	ldr	r4, [pc, #52]	; (800b3dc <__libc_init_array+0x3c>)
 800b3a6:	1ba4      	subs	r4, r4, r6
 800b3a8:	10a4      	asrs	r4, r4, #2
 800b3aa:	2500      	movs	r5, #0
 800b3ac:	42a5      	cmp	r5, r4
 800b3ae:	d109      	bne.n	800b3c4 <__libc_init_array+0x24>
 800b3b0:	4e0b      	ldr	r6, [pc, #44]	; (800b3e0 <__libc_init_array+0x40>)
 800b3b2:	4c0c      	ldr	r4, [pc, #48]	; (800b3e4 <__libc_init_array+0x44>)
 800b3b4:	f002 ff60 	bl	800e278 <_init>
 800b3b8:	1ba4      	subs	r4, r4, r6
 800b3ba:	10a4      	asrs	r4, r4, #2
 800b3bc:	2500      	movs	r5, #0
 800b3be:	42a5      	cmp	r5, r4
 800b3c0:	d105      	bne.n	800b3ce <__libc_init_array+0x2e>
 800b3c2:	bd70      	pop	{r4, r5, r6, pc}
 800b3c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3c8:	4798      	blx	r3
 800b3ca:	3501      	adds	r5, #1
 800b3cc:	e7ee      	b.n	800b3ac <__libc_init_array+0xc>
 800b3ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3d2:	4798      	blx	r3
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	e7f2      	b.n	800b3be <__libc_init_array+0x1e>
 800b3d8:	08011078 	.word	0x08011078
 800b3dc:	08011078 	.word	0x08011078
 800b3e0:	08011078 	.word	0x08011078
 800b3e4:	08011084 	.word	0x08011084

0800b3e8 <__swhatbuf_r>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	460e      	mov	r6, r1
 800b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f0:	2900      	cmp	r1, #0
 800b3f2:	b096      	sub	sp, #88	; 0x58
 800b3f4:	4614      	mov	r4, r2
 800b3f6:	461d      	mov	r5, r3
 800b3f8:	da07      	bge.n	800b40a <__swhatbuf_r+0x22>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	602b      	str	r3, [r5, #0]
 800b3fe:	89b3      	ldrh	r3, [r6, #12]
 800b400:	061a      	lsls	r2, r3, #24
 800b402:	d410      	bmi.n	800b426 <__swhatbuf_r+0x3e>
 800b404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b408:	e00e      	b.n	800b428 <__swhatbuf_r+0x40>
 800b40a:	466a      	mov	r2, sp
 800b40c:	f001 fb02 	bl	800ca14 <_fstat_r>
 800b410:	2800      	cmp	r0, #0
 800b412:	dbf2      	blt.n	800b3fa <__swhatbuf_r+0x12>
 800b414:	9a01      	ldr	r2, [sp, #4]
 800b416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b41a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b41e:	425a      	negs	r2, r3
 800b420:	415a      	adcs	r2, r3
 800b422:	602a      	str	r2, [r5, #0]
 800b424:	e7ee      	b.n	800b404 <__swhatbuf_r+0x1c>
 800b426:	2340      	movs	r3, #64	; 0x40
 800b428:	2000      	movs	r0, #0
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	b016      	add	sp, #88	; 0x58
 800b42e:	bd70      	pop	{r4, r5, r6, pc}

0800b430 <__smakebuf_r>:
 800b430:	898b      	ldrh	r3, [r1, #12]
 800b432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b434:	079d      	lsls	r5, r3, #30
 800b436:	4606      	mov	r6, r0
 800b438:	460c      	mov	r4, r1
 800b43a:	d507      	bpl.n	800b44c <__smakebuf_r+0x1c>
 800b43c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	6123      	str	r3, [r4, #16]
 800b444:	2301      	movs	r3, #1
 800b446:	6163      	str	r3, [r4, #20]
 800b448:	b002      	add	sp, #8
 800b44a:	bd70      	pop	{r4, r5, r6, pc}
 800b44c:	ab01      	add	r3, sp, #4
 800b44e:	466a      	mov	r2, sp
 800b450:	f7ff ffca 	bl	800b3e8 <__swhatbuf_r>
 800b454:	9900      	ldr	r1, [sp, #0]
 800b456:	4605      	mov	r5, r0
 800b458:	4630      	mov	r0, r6
 800b45a:	f000 f8c3 	bl	800b5e4 <_malloc_r>
 800b45e:	b948      	cbnz	r0, 800b474 <__smakebuf_r+0x44>
 800b460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b464:	059a      	lsls	r2, r3, #22
 800b466:	d4ef      	bmi.n	800b448 <__smakebuf_r+0x18>
 800b468:	f023 0303 	bic.w	r3, r3, #3
 800b46c:	f043 0302 	orr.w	r3, r3, #2
 800b470:	81a3      	strh	r3, [r4, #12]
 800b472:	e7e3      	b.n	800b43c <__smakebuf_r+0xc>
 800b474:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <__smakebuf_r+0x7c>)
 800b476:	62b3      	str	r3, [r6, #40]	; 0x28
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	6020      	str	r0, [r4, #0]
 800b47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b480:	81a3      	strh	r3, [r4, #12]
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	6163      	str	r3, [r4, #20]
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	6120      	str	r0, [r4, #16]
 800b48a:	b15b      	cbz	r3, 800b4a4 <__smakebuf_r+0x74>
 800b48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b490:	4630      	mov	r0, r6
 800b492:	f001 fdf7 	bl	800d084 <_isatty_r>
 800b496:	b128      	cbz	r0, 800b4a4 <__smakebuf_r+0x74>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f023 0303 	bic.w	r3, r3, #3
 800b49e:	f043 0301 	orr.w	r3, r3, #1
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	431d      	orrs	r5, r3
 800b4a8:	81a5      	strh	r5, [r4, #12]
 800b4aa:	e7cd      	b.n	800b448 <__smakebuf_r+0x18>
 800b4ac:	0800b255 	.word	0x0800b255

0800b4b0 <malloc>:
 800b4b0:	4b02      	ldr	r3, [pc, #8]	; (800b4bc <malloc+0xc>)
 800b4b2:	4601      	mov	r1, r0
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	f000 b895 	b.w	800b5e4 <_malloc_r>
 800b4ba:	bf00      	nop
 800b4bc:	20000404 	.word	0x20000404

0800b4c0 <free>:
 800b4c0:	4b02      	ldr	r3, [pc, #8]	; (800b4cc <free+0xc>)
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	6818      	ldr	r0, [r3, #0]
 800b4c6:	f000 b83f 	b.w	800b548 <_free_r>
 800b4ca:	bf00      	nop
 800b4cc:	20000404 	.word	0x20000404

0800b4d0 <memcmp>:
 800b4d0:	b530      	push	{r4, r5, lr}
 800b4d2:	2400      	movs	r4, #0
 800b4d4:	42a2      	cmp	r2, r4
 800b4d6:	d101      	bne.n	800b4dc <memcmp+0xc>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	e007      	b.n	800b4ec <memcmp+0x1c>
 800b4dc:	5d03      	ldrb	r3, [r0, r4]
 800b4de:	3401      	adds	r4, #1
 800b4e0:	190d      	adds	r5, r1, r4
 800b4e2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800b4e6:	42ab      	cmp	r3, r5
 800b4e8:	d0f4      	beq.n	800b4d4 <memcmp+0x4>
 800b4ea:	1b58      	subs	r0, r3, r5
 800b4ec:	bd30      	pop	{r4, r5, pc}

0800b4ee <memcpy>:
 800b4ee:	b510      	push	{r4, lr}
 800b4f0:	1e43      	subs	r3, r0, #1
 800b4f2:	440a      	add	r2, r1
 800b4f4:	4291      	cmp	r1, r2
 800b4f6:	d100      	bne.n	800b4fa <memcpy+0xc>
 800b4f8:	bd10      	pop	{r4, pc}
 800b4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b502:	e7f7      	b.n	800b4f4 <memcpy+0x6>

0800b504 <memmove>:
 800b504:	4288      	cmp	r0, r1
 800b506:	b510      	push	{r4, lr}
 800b508:	eb01 0302 	add.w	r3, r1, r2
 800b50c:	d807      	bhi.n	800b51e <memmove+0x1a>
 800b50e:	1e42      	subs	r2, r0, #1
 800b510:	4299      	cmp	r1, r3
 800b512:	d00a      	beq.n	800b52a <memmove+0x26>
 800b514:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b518:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b51c:	e7f8      	b.n	800b510 <memmove+0xc>
 800b51e:	4283      	cmp	r3, r0
 800b520:	d9f5      	bls.n	800b50e <memmove+0xa>
 800b522:	1881      	adds	r1, r0, r2
 800b524:	1ad2      	subs	r2, r2, r3
 800b526:	42d3      	cmn	r3, r2
 800b528:	d100      	bne.n	800b52c <memmove+0x28>
 800b52a:	bd10      	pop	{r4, pc}
 800b52c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b530:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b534:	e7f7      	b.n	800b526 <memmove+0x22>

0800b536 <memset>:
 800b536:	4402      	add	r2, r0
 800b538:	4603      	mov	r3, r0
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d100      	bne.n	800b540 <memset+0xa>
 800b53e:	4770      	bx	lr
 800b540:	f803 1b01 	strb.w	r1, [r3], #1
 800b544:	e7f9      	b.n	800b53a <memset+0x4>
	...

0800b548 <_free_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4605      	mov	r5, r0
 800b54c:	2900      	cmp	r1, #0
 800b54e:	d045      	beq.n	800b5dc <_free_r+0x94>
 800b550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b554:	1f0c      	subs	r4, r1, #4
 800b556:	2b00      	cmp	r3, #0
 800b558:	bfb8      	it	lt
 800b55a:	18e4      	addlt	r4, r4, r3
 800b55c:	f001 fdcc 	bl	800d0f8 <__malloc_lock>
 800b560:	4a1f      	ldr	r2, [pc, #124]	; (800b5e0 <_free_r+0x98>)
 800b562:	6813      	ldr	r3, [r2, #0]
 800b564:	4610      	mov	r0, r2
 800b566:	b933      	cbnz	r3, 800b576 <_free_r+0x2e>
 800b568:	6063      	str	r3, [r4, #4]
 800b56a:	6014      	str	r4, [r2, #0]
 800b56c:	4628      	mov	r0, r5
 800b56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b572:	f001 bdc2 	b.w	800d0fa <__malloc_unlock>
 800b576:	42a3      	cmp	r3, r4
 800b578:	d90c      	bls.n	800b594 <_free_r+0x4c>
 800b57a:	6821      	ldr	r1, [r4, #0]
 800b57c:	1862      	adds	r2, r4, r1
 800b57e:	4293      	cmp	r3, r2
 800b580:	bf04      	itt	eq
 800b582:	681a      	ldreq	r2, [r3, #0]
 800b584:	685b      	ldreq	r3, [r3, #4]
 800b586:	6063      	str	r3, [r4, #4]
 800b588:	bf04      	itt	eq
 800b58a:	1852      	addeq	r2, r2, r1
 800b58c:	6022      	streq	r2, [r4, #0]
 800b58e:	6004      	str	r4, [r0, #0]
 800b590:	e7ec      	b.n	800b56c <_free_r+0x24>
 800b592:	4613      	mov	r3, r2
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	b10a      	cbz	r2, 800b59c <_free_r+0x54>
 800b598:	42a2      	cmp	r2, r4
 800b59a:	d9fa      	bls.n	800b592 <_free_r+0x4a>
 800b59c:	6819      	ldr	r1, [r3, #0]
 800b59e:	1858      	adds	r0, r3, r1
 800b5a0:	42a0      	cmp	r0, r4
 800b5a2:	d10b      	bne.n	800b5bc <_free_r+0x74>
 800b5a4:	6820      	ldr	r0, [r4, #0]
 800b5a6:	4401      	add	r1, r0
 800b5a8:	1858      	adds	r0, r3, r1
 800b5aa:	4282      	cmp	r2, r0
 800b5ac:	6019      	str	r1, [r3, #0]
 800b5ae:	d1dd      	bne.n	800b56c <_free_r+0x24>
 800b5b0:	6810      	ldr	r0, [r2, #0]
 800b5b2:	6852      	ldr	r2, [r2, #4]
 800b5b4:	605a      	str	r2, [r3, #4]
 800b5b6:	4401      	add	r1, r0
 800b5b8:	6019      	str	r1, [r3, #0]
 800b5ba:	e7d7      	b.n	800b56c <_free_r+0x24>
 800b5bc:	d902      	bls.n	800b5c4 <_free_r+0x7c>
 800b5be:	230c      	movs	r3, #12
 800b5c0:	602b      	str	r3, [r5, #0]
 800b5c2:	e7d3      	b.n	800b56c <_free_r+0x24>
 800b5c4:	6820      	ldr	r0, [r4, #0]
 800b5c6:	1821      	adds	r1, r4, r0
 800b5c8:	428a      	cmp	r2, r1
 800b5ca:	bf04      	itt	eq
 800b5cc:	6811      	ldreq	r1, [r2, #0]
 800b5ce:	6852      	ldreq	r2, [r2, #4]
 800b5d0:	6062      	str	r2, [r4, #4]
 800b5d2:	bf04      	itt	eq
 800b5d4:	1809      	addeq	r1, r1, r0
 800b5d6:	6021      	streq	r1, [r4, #0]
 800b5d8:	605c      	str	r4, [r3, #4]
 800b5da:	e7c7      	b.n	800b56c <_free_r+0x24>
 800b5dc:	bd38      	pop	{r3, r4, r5, pc}
 800b5de:	bf00      	nop
 800b5e0:	200008d8 	.word	0x200008d8

0800b5e4 <_malloc_r>:
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	1ccd      	adds	r5, r1, #3
 800b5e8:	f025 0503 	bic.w	r5, r5, #3
 800b5ec:	3508      	adds	r5, #8
 800b5ee:	2d0c      	cmp	r5, #12
 800b5f0:	bf38      	it	cc
 800b5f2:	250c      	movcc	r5, #12
 800b5f4:	2d00      	cmp	r5, #0
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	db01      	blt.n	800b5fe <_malloc_r+0x1a>
 800b5fa:	42a9      	cmp	r1, r5
 800b5fc:	d903      	bls.n	800b606 <_malloc_r+0x22>
 800b5fe:	230c      	movs	r3, #12
 800b600:	6033      	str	r3, [r6, #0]
 800b602:	2000      	movs	r0, #0
 800b604:	bd70      	pop	{r4, r5, r6, pc}
 800b606:	f001 fd77 	bl	800d0f8 <__malloc_lock>
 800b60a:	4a21      	ldr	r2, [pc, #132]	; (800b690 <_malloc_r+0xac>)
 800b60c:	6814      	ldr	r4, [r2, #0]
 800b60e:	4621      	mov	r1, r4
 800b610:	b991      	cbnz	r1, 800b638 <_malloc_r+0x54>
 800b612:	4c20      	ldr	r4, [pc, #128]	; (800b694 <_malloc_r+0xb0>)
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	b91b      	cbnz	r3, 800b620 <_malloc_r+0x3c>
 800b618:	4630      	mov	r0, r6
 800b61a:	f000 f8cd 	bl	800b7b8 <_sbrk_r>
 800b61e:	6020      	str	r0, [r4, #0]
 800b620:	4629      	mov	r1, r5
 800b622:	4630      	mov	r0, r6
 800b624:	f000 f8c8 	bl	800b7b8 <_sbrk_r>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d124      	bne.n	800b676 <_malloc_r+0x92>
 800b62c:	230c      	movs	r3, #12
 800b62e:	6033      	str	r3, [r6, #0]
 800b630:	4630      	mov	r0, r6
 800b632:	f001 fd62 	bl	800d0fa <__malloc_unlock>
 800b636:	e7e4      	b.n	800b602 <_malloc_r+0x1e>
 800b638:	680b      	ldr	r3, [r1, #0]
 800b63a:	1b5b      	subs	r3, r3, r5
 800b63c:	d418      	bmi.n	800b670 <_malloc_r+0x8c>
 800b63e:	2b0b      	cmp	r3, #11
 800b640:	d90f      	bls.n	800b662 <_malloc_r+0x7e>
 800b642:	600b      	str	r3, [r1, #0]
 800b644:	50cd      	str	r5, [r1, r3]
 800b646:	18cc      	adds	r4, r1, r3
 800b648:	4630      	mov	r0, r6
 800b64a:	f001 fd56 	bl	800d0fa <__malloc_unlock>
 800b64e:	f104 000b 	add.w	r0, r4, #11
 800b652:	1d23      	adds	r3, r4, #4
 800b654:	f020 0007 	bic.w	r0, r0, #7
 800b658:	1ac3      	subs	r3, r0, r3
 800b65a:	d0d3      	beq.n	800b604 <_malloc_r+0x20>
 800b65c:	425a      	negs	r2, r3
 800b65e:	50e2      	str	r2, [r4, r3]
 800b660:	e7d0      	b.n	800b604 <_malloc_r+0x20>
 800b662:	428c      	cmp	r4, r1
 800b664:	684b      	ldr	r3, [r1, #4]
 800b666:	bf16      	itet	ne
 800b668:	6063      	strne	r3, [r4, #4]
 800b66a:	6013      	streq	r3, [r2, #0]
 800b66c:	460c      	movne	r4, r1
 800b66e:	e7eb      	b.n	800b648 <_malloc_r+0x64>
 800b670:	460c      	mov	r4, r1
 800b672:	6849      	ldr	r1, [r1, #4]
 800b674:	e7cc      	b.n	800b610 <_malloc_r+0x2c>
 800b676:	1cc4      	adds	r4, r0, #3
 800b678:	f024 0403 	bic.w	r4, r4, #3
 800b67c:	42a0      	cmp	r0, r4
 800b67e:	d005      	beq.n	800b68c <_malloc_r+0xa8>
 800b680:	1a21      	subs	r1, r4, r0
 800b682:	4630      	mov	r0, r6
 800b684:	f000 f898 	bl	800b7b8 <_sbrk_r>
 800b688:	3001      	adds	r0, #1
 800b68a:	d0cf      	beq.n	800b62c <_malloc_r+0x48>
 800b68c:	6025      	str	r5, [r4, #0]
 800b68e:	e7db      	b.n	800b648 <_malloc_r+0x64>
 800b690:	200008d8 	.word	0x200008d8
 800b694:	200008dc 	.word	0x200008dc

0800b698 <iprintf>:
 800b698:	b40f      	push	{r0, r1, r2, r3}
 800b69a:	4b0a      	ldr	r3, [pc, #40]	; (800b6c4 <iprintf+0x2c>)
 800b69c:	b513      	push	{r0, r1, r4, lr}
 800b69e:	681c      	ldr	r4, [r3, #0]
 800b6a0:	b124      	cbz	r4, 800b6ac <iprintf+0x14>
 800b6a2:	69a3      	ldr	r3, [r4, #24]
 800b6a4:	b913      	cbnz	r3, 800b6ac <iprintf+0x14>
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f7ff fdf0 	bl	800b28c <__sinit>
 800b6ac:	ab05      	add	r3, sp, #20
 800b6ae:	9a04      	ldr	r2, [sp, #16]
 800b6b0:	68a1      	ldr	r1, [r4, #8]
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f002 faab 	bl	800dc10 <_vfiprintf_r>
 800b6ba:	b002      	add	sp, #8
 800b6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c0:	b004      	add	sp, #16
 800b6c2:	4770      	bx	lr
 800b6c4:	20000404 	.word	0x20000404

0800b6c8 <putchar>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <putchar+0x24>)
 800b6cc:	681c      	ldr	r4, [r3, #0]
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	b124      	cbz	r4, 800b6dc <putchar+0x14>
 800b6d2:	69a3      	ldr	r3, [r4, #24]
 800b6d4:	b913      	cbnz	r3, 800b6dc <putchar+0x14>
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f7ff fdd8 	bl	800b28c <__sinit>
 800b6dc:	68a2      	ldr	r2, [r4, #8]
 800b6de:	4629      	mov	r1, r5
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6e6:	f002 bd31 	b.w	800e14c <_putc_r>
 800b6ea:	bf00      	nop
 800b6ec:	20000404 	.word	0x20000404

0800b6f0 <_puts_r>:
 800b6f0:	b570      	push	{r4, r5, r6, lr}
 800b6f2:	460e      	mov	r6, r1
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	b118      	cbz	r0, 800b700 <_puts_r+0x10>
 800b6f8:	6983      	ldr	r3, [r0, #24]
 800b6fa:	b90b      	cbnz	r3, 800b700 <_puts_r+0x10>
 800b6fc:	f7ff fdc6 	bl	800b28c <__sinit>
 800b700:	69ab      	ldr	r3, [r5, #24]
 800b702:	68ac      	ldr	r4, [r5, #8]
 800b704:	b913      	cbnz	r3, 800b70c <_puts_r+0x1c>
 800b706:	4628      	mov	r0, r5
 800b708:	f7ff fdc0 	bl	800b28c <__sinit>
 800b70c:	4b23      	ldr	r3, [pc, #140]	; (800b79c <_puts_r+0xac>)
 800b70e:	429c      	cmp	r4, r3
 800b710:	d117      	bne.n	800b742 <_puts_r+0x52>
 800b712:	686c      	ldr	r4, [r5, #4]
 800b714:	89a3      	ldrh	r3, [r4, #12]
 800b716:	071b      	lsls	r3, r3, #28
 800b718:	d51d      	bpl.n	800b756 <_puts_r+0x66>
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	b1db      	cbz	r3, 800b756 <_puts_r+0x66>
 800b71e:	3e01      	subs	r6, #1
 800b720:	68a3      	ldr	r3, [r4, #8]
 800b722:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b726:	3b01      	subs	r3, #1
 800b728:	60a3      	str	r3, [r4, #8]
 800b72a:	b9e9      	cbnz	r1, 800b768 <_puts_r+0x78>
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	da2e      	bge.n	800b78e <_puts_r+0x9e>
 800b730:	4622      	mov	r2, r4
 800b732:	210a      	movs	r1, #10
 800b734:	4628      	mov	r0, r5
 800b736:	f001 f88b 	bl	800c850 <__swbuf_r>
 800b73a:	3001      	adds	r0, #1
 800b73c:	d011      	beq.n	800b762 <_puts_r+0x72>
 800b73e:	200a      	movs	r0, #10
 800b740:	e011      	b.n	800b766 <_puts_r+0x76>
 800b742:	4b17      	ldr	r3, [pc, #92]	; (800b7a0 <_puts_r+0xb0>)
 800b744:	429c      	cmp	r4, r3
 800b746:	d101      	bne.n	800b74c <_puts_r+0x5c>
 800b748:	68ac      	ldr	r4, [r5, #8]
 800b74a:	e7e3      	b.n	800b714 <_puts_r+0x24>
 800b74c:	4b15      	ldr	r3, [pc, #84]	; (800b7a4 <_puts_r+0xb4>)
 800b74e:	429c      	cmp	r4, r3
 800b750:	bf08      	it	eq
 800b752:	68ec      	ldreq	r4, [r5, #12]
 800b754:	e7de      	b.n	800b714 <_puts_r+0x24>
 800b756:	4621      	mov	r1, r4
 800b758:	4628      	mov	r0, r5
 800b75a:	f001 f8dd 	bl	800c918 <__swsetup_r>
 800b75e:	2800      	cmp	r0, #0
 800b760:	d0dd      	beq.n	800b71e <_puts_r+0x2e>
 800b762:	f04f 30ff 	mov.w	r0, #4294967295
 800b766:	bd70      	pop	{r4, r5, r6, pc}
 800b768:	2b00      	cmp	r3, #0
 800b76a:	da04      	bge.n	800b776 <_puts_r+0x86>
 800b76c:	69a2      	ldr	r2, [r4, #24]
 800b76e:	429a      	cmp	r2, r3
 800b770:	dc06      	bgt.n	800b780 <_puts_r+0x90>
 800b772:	290a      	cmp	r1, #10
 800b774:	d004      	beq.n	800b780 <_puts_r+0x90>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	1c5a      	adds	r2, r3, #1
 800b77a:	6022      	str	r2, [r4, #0]
 800b77c:	7019      	strb	r1, [r3, #0]
 800b77e:	e7cf      	b.n	800b720 <_puts_r+0x30>
 800b780:	4622      	mov	r2, r4
 800b782:	4628      	mov	r0, r5
 800b784:	f001 f864 	bl	800c850 <__swbuf_r>
 800b788:	3001      	adds	r0, #1
 800b78a:	d1c9      	bne.n	800b720 <_puts_r+0x30>
 800b78c:	e7e9      	b.n	800b762 <_puts_r+0x72>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	200a      	movs	r0, #10
 800b792:	1c5a      	adds	r2, r3, #1
 800b794:	6022      	str	r2, [r4, #0]
 800b796:	7018      	strb	r0, [r3, #0]
 800b798:	e7e5      	b.n	800b766 <_puts_r+0x76>
 800b79a:	bf00      	nop
 800b79c:	08010378 	.word	0x08010378
 800b7a0:	08010398 	.word	0x08010398
 800b7a4:	08010358 	.word	0x08010358

0800b7a8 <puts>:
 800b7a8:	4b02      	ldr	r3, [pc, #8]	; (800b7b4 <puts+0xc>)
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	6818      	ldr	r0, [r3, #0]
 800b7ae:	f7ff bf9f 	b.w	800b6f0 <_puts_r>
 800b7b2:	bf00      	nop
 800b7b4:	20000404 	.word	0x20000404

0800b7b8 <_sbrk_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4c06      	ldr	r4, [pc, #24]	; (800b7d4 <_sbrk_r+0x1c>)
 800b7bc:	2300      	movs	r3, #0
 800b7be:	4605      	mov	r5, r0
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	f7fc f93a 	bl	8007a3c <_sbrk>
 800b7c8:	1c43      	adds	r3, r0, #1
 800b7ca:	d102      	bne.n	800b7d2 <_sbrk_r+0x1a>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	b103      	cbz	r3, 800b7d2 <_sbrk_r+0x1a>
 800b7d0:	602b      	str	r3, [r5, #0]
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	200008e4 	.word	0x200008e4

0800b7d8 <_raise_r>:
 800b7d8:	291f      	cmp	r1, #31
 800b7da:	b538      	push	{r3, r4, r5, lr}
 800b7dc:	4604      	mov	r4, r0
 800b7de:	460d      	mov	r5, r1
 800b7e0:	d904      	bls.n	800b7ec <_raise_r+0x14>
 800b7e2:	2316      	movs	r3, #22
 800b7e4:	6003      	str	r3, [r0, #0]
 800b7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7ee:	b112      	cbz	r2, 800b7f6 <_raise_r+0x1e>
 800b7f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7f4:	b94b      	cbnz	r3, 800b80a <_raise_r+0x32>
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 f830 	bl	800b85c <_getpid_r>
 800b7fc:	462a      	mov	r2, r5
 800b7fe:	4601      	mov	r1, r0
 800b800:	4620      	mov	r0, r4
 800b802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b806:	f000 b817 	b.w	800b838 <_kill_r>
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d00a      	beq.n	800b824 <_raise_r+0x4c>
 800b80e:	1c59      	adds	r1, r3, #1
 800b810:	d103      	bne.n	800b81a <_raise_r+0x42>
 800b812:	2316      	movs	r3, #22
 800b814:	6003      	str	r3, [r0, #0]
 800b816:	2001      	movs	r0, #1
 800b818:	e7e7      	b.n	800b7ea <_raise_r+0x12>
 800b81a:	2400      	movs	r4, #0
 800b81c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b820:	4628      	mov	r0, r5
 800b822:	4798      	blx	r3
 800b824:	2000      	movs	r0, #0
 800b826:	e7e0      	b.n	800b7ea <_raise_r+0x12>

0800b828 <raise>:
 800b828:	4b02      	ldr	r3, [pc, #8]	; (800b834 <raise+0xc>)
 800b82a:	4601      	mov	r1, r0
 800b82c:	6818      	ldr	r0, [r3, #0]
 800b82e:	f7ff bfd3 	b.w	800b7d8 <_raise_r>
 800b832:	bf00      	nop
 800b834:	20000404 	.word	0x20000404

0800b838 <_kill_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4c07      	ldr	r4, [pc, #28]	; (800b858 <_kill_r+0x20>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4605      	mov	r5, r0
 800b840:	4608      	mov	r0, r1
 800b842:	4611      	mov	r1, r2
 800b844:	6023      	str	r3, [r4, #0]
 800b846:	f7fc f871 	bl	800792c <_kill>
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	d102      	bne.n	800b854 <_kill_r+0x1c>
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	b103      	cbz	r3, 800b854 <_kill_r+0x1c>
 800b852:	602b      	str	r3, [r5, #0]
 800b854:	bd38      	pop	{r3, r4, r5, pc}
 800b856:	bf00      	nop
 800b858:	200008e4 	.word	0x200008e4

0800b85c <_getpid_r>:
 800b85c:	f7fc b85e 	b.w	800791c <_getpid>

0800b860 <sniprintf>:
 800b860:	b40c      	push	{r2, r3}
 800b862:	b530      	push	{r4, r5, lr}
 800b864:	4b17      	ldr	r3, [pc, #92]	; (800b8c4 <sniprintf+0x64>)
 800b866:	1e0c      	subs	r4, r1, #0
 800b868:	b09d      	sub	sp, #116	; 0x74
 800b86a:	681d      	ldr	r5, [r3, #0]
 800b86c:	da08      	bge.n	800b880 <sniprintf+0x20>
 800b86e:	238b      	movs	r3, #139	; 0x8b
 800b870:	602b      	str	r3, [r5, #0]
 800b872:	f04f 30ff 	mov.w	r0, #4294967295
 800b876:	b01d      	add	sp, #116	; 0x74
 800b878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b87c:	b002      	add	sp, #8
 800b87e:	4770      	bx	lr
 800b880:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b884:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b888:	bf14      	ite	ne
 800b88a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b88e:	4623      	moveq	r3, r4
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	9307      	str	r3, [sp, #28]
 800b894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b898:	9002      	str	r0, [sp, #8]
 800b89a:	9006      	str	r0, [sp, #24]
 800b89c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b8a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b8a2:	ab21      	add	r3, sp, #132	; 0x84
 800b8a4:	a902      	add	r1, sp, #8
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	f002 f88f 	bl	800d9cc <_svfiprintf_r>
 800b8ae:	1c43      	adds	r3, r0, #1
 800b8b0:	bfbc      	itt	lt
 800b8b2:	238b      	movlt	r3, #139	; 0x8b
 800b8b4:	602b      	strlt	r3, [r5, #0]
 800b8b6:	2c00      	cmp	r4, #0
 800b8b8:	d0dd      	beq.n	800b876 <sniprintf+0x16>
 800b8ba:	9b02      	ldr	r3, [sp, #8]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	701a      	strb	r2, [r3, #0]
 800b8c0:	e7d9      	b.n	800b876 <sniprintf+0x16>
 800b8c2:	bf00      	nop
 800b8c4:	20000404 	.word	0x20000404

0800b8c8 <__sread>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d0:	f002 fc72 	bl	800e1b8 <_read_r>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	bfab      	itete	ge
 800b8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8da:	89a3      	ldrhlt	r3, [r4, #12]
 800b8dc:	181b      	addge	r3, r3, r0
 800b8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8e2:	bfac      	ite	ge
 800b8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8e6:	81a3      	strhlt	r3, [r4, #12]
 800b8e8:	bd10      	pop	{r4, pc}

0800b8ea <__swrite>:
 800b8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ee:	461f      	mov	r7, r3
 800b8f0:	898b      	ldrh	r3, [r1, #12]
 800b8f2:	05db      	lsls	r3, r3, #23
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	4616      	mov	r6, r2
 800b8fa:	d505      	bpl.n	800b908 <__swrite+0x1e>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	2200      	movs	r2, #0
 800b900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b904:	f001 fbd4 	bl	800d0b0 <_lseek_r>
 800b908:	89a3      	ldrh	r3, [r4, #12]
 800b90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b912:	81a3      	strh	r3, [r4, #12]
 800b914:	4632      	mov	r2, r6
 800b916:	463b      	mov	r3, r7
 800b918:	4628      	mov	r0, r5
 800b91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b91e:	f000 bfe9 	b.w	800c8f4 <_write_r>

0800b922 <__sseek>:
 800b922:	b510      	push	{r4, lr}
 800b924:	460c      	mov	r4, r1
 800b926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b92a:	f001 fbc1 	bl	800d0b0 <_lseek_r>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	bf15      	itete	ne
 800b934:	6560      	strne	r0, [r4, #84]	; 0x54
 800b936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b93e:	81a3      	strheq	r3, [r4, #12]
 800b940:	bf18      	it	ne
 800b942:	81a3      	strhne	r3, [r4, #12]
 800b944:	bd10      	pop	{r4, pc}

0800b946 <__sclose>:
 800b946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b94a:	f001 b853 	b.w	800c9f4 <_close_r>

0800b94e <sulp>:
 800b94e:	b570      	push	{r4, r5, r6, lr}
 800b950:	4604      	mov	r4, r0
 800b952:	460d      	mov	r5, r1
 800b954:	ec45 4b10 	vmov	d0, r4, r5
 800b958:	4616      	mov	r6, r2
 800b95a:	f001 fe9b 	bl	800d694 <__ulp>
 800b95e:	ec51 0b10 	vmov	r0, r1, d0
 800b962:	b17e      	cbz	r6, 800b984 <sulp+0x36>
 800b964:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b968:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	dd09      	ble.n	800b984 <sulp+0x36>
 800b970:	051b      	lsls	r3, r3, #20
 800b972:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b976:	2400      	movs	r4, #0
 800b978:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b97c:	4622      	mov	r2, r4
 800b97e:	462b      	mov	r3, r5
 800b980:	f7f4 fe4c 	bl	800061c <__aeabi_dmul>
 800b984:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b988 <_strtod_l>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	461f      	mov	r7, r3
 800b98e:	b0a1      	sub	sp, #132	; 0x84
 800b990:	2300      	movs	r3, #0
 800b992:	4681      	mov	r9, r0
 800b994:	4638      	mov	r0, r7
 800b996:	460e      	mov	r6, r1
 800b998:	9217      	str	r2, [sp, #92]	; 0x5c
 800b99a:	931c      	str	r3, [sp, #112]	; 0x70
 800b99c:	f001 fb85 	bl	800d0aa <__localeconv_l>
 800b9a0:	4680      	mov	r8, r0
 800b9a2:	6800      	ldr	r0, [r0, #0]
 800b9a4:	f7f4 fc76 	bl	8000294 <strlen>
 800b9a8:	f04f 0a00 	mov.w	sl, #0
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	f04f 0b00 	mov.w	fp, #0
 800b9b2:	961b      	str	r6, [sp, #108]	; 0x6c
 800b9b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9b6:	781a      	ldrb	r2, [r3, #0]
 800b9b8:	2a0d      	cmp	r2, #13
 800b9ba:	d832      	bhi.n	800ba22 <_strtod_l+0x9a>
 800b9bc:	2a09      	cmp	r2, #9
 800b9be:	d236      	bcs.n	800ba2e <_strtod_l+0xa6>
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	d03e      	beq.n	800ba42 <_strtod_l+0xba>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	930d      	str	r3, [sp, #52]	; 0x34
 800b9c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b9ca:	782b      	ldrb	r3, [r5, #0]
 800b9cc:	2b30      	cmp	r3, #48	; 0x30
 800b9ce:	f040 80ac 	bne.w	800bb2a <_strtod_l+0x1a2>
 800b9d2:	786b      	ldrb	r3, [r5, #1]
 800b9d4:	2b58      	cmp	r3, #88	; 0x58
 800b9d6:	d001      	beq.n	800b9dc <_strtod_l+0x54>
 800b9d8:	2b78      	cmp	r3, #120	; 0x78
 800b9da:	d167      	bne.n	800baac <_strtod_l+0x124>
 800b9dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9de:	9301      	str	r3, [sp, #4]
 800b9e0:	ab1c      	add	r3, sp, #112	; 0x70
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	9702      	str	r7, [sp, #8]
 800b9e6:	ab1d      	add	r3, sp, #116	; 0x74
 800b9e8:	4a88      	ldr	r2, [pc, #544]	; (800bc0c <_strtod_l+0x284>)
 800b9ea:	a91b      	add	r1, sp, #108	; 0x6c
 800b9ec:	4648      	mov	r0, r9
 800b9ee:	f001 f872 	bl	800cad6 <__gethex>
 800b9f2:	f010 0407 	ands.w	r4, r0, #7
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	d005      	beq.n	800ba06 <_strtod_l+0x7e>
 800b9fa:	2c06      	cmp	r4, #6
 800b9fc:	d12b      	bne.n	800ba56 <_strtod_l+0xce>
 800b9fe:	3501      	adds	r5, #1
 800ba00:	2300      	movs	r3, #0
 800ba02:	951b      	str	r5, [sp, #108]	; 0x6c
 800ba04:	930d      	str	r3, [sp, #52]	; 0x34
 800ba06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f040 859a 	bne.w	800c542 <_strtod_l+0xbba>
 800ba0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba10:	b1e3      	cbz	r3, 800ba4c <_strtod_l+0xc4>
 800ba12:	4652      	mov	r2, sl
 800ba14:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ba18:	ec43 2b10 	vmov	d0, r2, r3
 800ba1c:	b021      	add	sp, #132	; 0x84
 800ba1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba22:	2a2b      	cmp	r2, #43	; 0x2b
 800ba24:	d015      	beq.n	800ba52 <_strtod_l+0xca>
 800ba26:	2a2d      	cmp	r2, #45	; 0x2d
 800ba28:	d004      	beq.n	800ba34 <_strtod_l+0xac>
 800ba2a:	2a20      	cmp	r2, #32
 800ba2c:	d1ca      	bne.n	800b9c4 <_strtod_l+0x3c>
 800ba2e:	3301      	adds	r3, #1
 800ba30:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba32:	e7bf      	b.n	800b9b4 <_strtod_l+0x2c>
 800ba34:	2201      	movs	r2, #1
 800ba36:	920d      	str	r2, [sp, #52]	; 0x34
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ba3c:	785b      	ldrb	r3, [r3, #1]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1c2      	bne.n	800b9c8 <_strtod_l+0x40>
 800ba42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba44:	961b      	str	r6, [sp, #108]	; 0x6c
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f040 8579 	bne.w	800c53e <_strtod_l+0xbb6>
 800ba4c:	4652      	mov	r2, sl
 800ba4e:	465b      	mov	r3, fp
 800ba50:	e7e2      	b.n	800ba18 <_strtod_l+0x90>
 800ba52:	2200      	movs	r2, #0
 800ba54:	e7ef      	b.n	800ba36 <_strtod_l+0xae>
 800ba56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ba58:	b13a      	cbz	r2, 800ba6a <_strtod_l+0xe2>
 800ba5a:	2135      	movs	r1, #53	; 0x35
 800ba5c:	a81e      	add	r0, sp, #120	; 0x78
 800ba5e:	f001 ff11 	bl	800d884 <__copybits>
 800ba62:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba64:	4648      	mov	r0, r9
 800ba66:	f001 fb7d 	bl	800d164 <_Bfree>
 800ba6a:	3c01      	subs	r4, #1
 800ba6c:	2c04      	cmp	r4, #4
 800ba6e:	d806      	bhi.n	800ba7e <_strtod_l+0xf6>
 800ba70:	e8df f004 	tbb	[pc, r4]
 800ba74:	1714030a 	.word	0x1714030a
 800ba78:	0a          	.byte	0x0a
 800ba79:	00          	.byte	0x00
 800ba7a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ba7e:	0730      	lsls	r0, r6, #28
 800ba80:	d5c1      	bpl.n	800ba06 <_strtod_l+0x7e>
 800ba82:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ba86:	e7be      	b.n	800ba06 <_strtod_l+0x7e>
 800ba88:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ba8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ba8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ba92:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba96:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba9a:	e7f0      	b.n	800ba7e <_strtod_l+0xf6>
 800ba9c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bc10 <_strtod_l+0x288>
 800baa0:	e7ed      	b.n	800ba7e <_strtod_l+0xf6>
 800baa2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800baa6:	f04f 3aff 	mov.w	sl, #4294967295
 800baaa:	e7e8      	b.n	800ba7e <_strtod_l+0xf6>
 800baac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	921b      	str	r2, [sp, #108]	; 0x6c
 800bab2:	785b      	ldrb	r3, [r3, #1]
 800bab4:	2b30      	cmp	r3, #48	; 0x30
 800bab6:	d0f9      	beq.n	800baac <_strtod_l+0x124>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0a4      	beq.n	800ba06 <_strtod_l+0x7e>
 800babc:	2301      	movs	r3, #1
 800babe:	2500      	movs	r5, #0
 800bac0:	9306      	str	r3, [sp, #24]
 800bac2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bac4:	9308      	str	r3, [sp, #32]
 800bac6:	9507      	str	r5, [sp, #28]
 800bac8:	9505      	str	r5, [sp, #20]
 800baca:	220a      	movs	r2, #10
 800bacc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bace:	7807      	ldrb	r7, [r0, #0]
 800bad0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bad4:	b2d9      	uxtb	r1, r3
 800bad6:	2909      	cmp	r1, #9
 800bad8:	d929      	bls.n	800bb2e <_strtod_l+0x1a6>
 800bada:	4622      	mov	r2, r4
 800badc:	f8d8 1000 	ldr.w	r1, [r8]
 800bae0:	f002 fb7c 	bl	800e1dc <strncmp>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d031      	beq.n	800bb4c <_strtod_l+0x1c4>
 800bae8:	2000      	movs	r0, #0
 800baea:	9c05      	ldr	r4, [sp, #20]
 800baec:	9004      	str	r0, [sp, #16]
 800baee:	463b      	mov	r3, r7
 800baf0:	4602      	mov	r2, r0
 800baf2:	2b65      	cmp	r3, #101	; 0x65
 800baf4:	d001      	beq.n	800bafa <_strtod_l+0x172>
 800baf6:	2b45      	cmp	r3, #69	; 0x45
 800baf8:	d114      	bne.n	800bb24 <_strtod_l+0x19c>
 800bafa:	b924      	cbnz	r4, 800bb06 <_strtod_l+0x17e>
 800bafc:	b910      	cbnz	r0, 800bb04 <_strtod_l+0x17c>
 800bafe:	9b06      	ldr	r3, [sp, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d09e      	beq.n	800ba42 <_strtod_l+0xba>
 800bb04:	2400      	movs	r4, #0
 800bb06:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bb08:	1c73      	adds	r3, r6, #1
 800bb0a:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb0c:	7873      	ldrb	r3, [r6, #1]
 800bb0e:	2b2b      	cmp	r3, #43	; 0x2b
 800bb10:	d078      	beq.n	800bc04 <_strtod_l+0x27c>
 800bb12:	2b2d      	cmp	r3, #45	; 0x2d
 800bb14:	d070      	beq.n	800bbf8 <_strtod_l+0x270>
 800bb16:	f04f 0c00 	mov.w	ip, #0
 800bb1a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bb1e:	2f09      	cmp	r7, #9
 800bb20:	d97c      	bls.n	800bc1c <_strtod_l+0x294>
 800bb22:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb24:	f04f 0e00 	mov.w	lr, #0
 800bb28:	e09a      	b.n	800bc60 <_strtod_l+0x2d8>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	e7c7      	b.n	800babe <_strtod_l+0x136>
 800bb2e:	9905      	ldr	r1, [sp, #20]
 800bb30:	2908      	cmp	r1, #8
 800bb32:	bfdd      	ittte	le
 800bb34:	9907      	ldrle	r1, [sp, #28]
 800bb36:	fb02 3301 	mlale	r3, r2, r1, r3
 800bb3a:	9307      	strle	r3, [sp, #28]
 800bb3c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bb40:	9b05      	ldr	r3, [sp, #20]
 800bb42:	3001      	adds	r0, #1
 800bb44:	3301      	adds	r3, #1
 800bb46:	9305      	str	r3, [sp, #20]
 800bb48:	901b      	str	r0, [sp, #108]	; 0x6c
 800bb4a:	e7bf      	b.n	800bacc <_strtod_l+0x144>
 800bb4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb4e:	191a      	adds	r2, r3, r4
 800bb50:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb52:	9a05      	ldr	r2, [sp, #20]
 800bb54:	5d1b      	ldrb	r3, [r3, r4]
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	d037      	beq.n	800bbca <_strtod_l+0x242>
 800bb5a:	9c05      	ldr	r4, [sp, #20]
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bb62:	2909      	cmp	r1, #9
 800bb64:	d913      	bls.n	800bb8e <_strtod_l+0x206>
 800bb66:	2101      	movs	r1, #1
 800bb68:	9104      	str	r1, [sp, #16]
 800bb6a:	e7c2      	b.n	800baf2 <_strtod_l+0x16a>
 800bb6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb72:	785b      	ldrb	r3, [r3, #1]
 800bb74:	3001      	adds	r0, #1
 800bb76:	2b30      	cmp	r3, #48	; 0x30
 800bb78:	d0f8      	beq.n	800bb6c <_strtod_l+0x1e4>
 800bb7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bb7e:	2a08      	cmp	r2, #8
 800bb80:	f200 84e4 	bhi.w	800c54c <_strtod_l+0xbc4>
 800bb84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bb86:	9208      	str	r2, [sp, #32]
 800bb88:	4602      	mov	r2, r0
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bb92:	f100 0101 	add.w	r1, r0, #1
 800bb96:	d012      	beq.n	800bbbe <_strtod_l+0x236>
 800bb98:	440a      	add	r2, r1
 800bb9a:	eb00 0c04 	add.w	ip, r0, r4
 800bb9e:	4621      	mov	r1, r4
 800bba0:	270a      	movs	r7, #10
 800bba2:	458c      	cmp	ip, r1
 800bba4:	d113      	bne.n	800bbce <_strtod_l+0x246>
 800bba6:	1821      	adds	r1, r4, r0
 800bba8:	2908      	cmp	r1, #8
 800bbaa:	f104 0401 	add.w	r4, r4, #1
 800bbae:	4404      	add	r4, r0
 800bbb0:	dc19      	bgt.n	800bbe6 <_strtod_l+0x25e>
 800bbb2:	9b07      	ldr	r3, [sp, #28]
 800bbb4:	210a      	movs	r1, #10
 800bbb6:	fb01 e303 	mla	r3, r1, r3, lr
 800bbba:	9307      	str	r3, [sp, #28]
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbc0:	1c58      	adds	r0, r3, #1
 800bbc2:	901b      	str	r0, [sp, #108]	; 0x6c
 800bbc4:	785b      	ldrb	r3, [r3, #1]
 800bbc6:	4608      	mov	r0, r1
 800bbc8:	e7c9      	b.n	800bb5e <_strtod_l+0x1d6>
 800bbca:	9805      	ldr	r0, [sp, #20]
 800bbcc:	e7d3      	b.n	800bb76 <_strtod_l+0x1ee>
 800bbce:	2908      	cmp	r1, #8
 800bbd0:	f101 0101 	add.w	r1, r1, #1
 800bbd4:	dc03      	bgt.n	800bbde <_strtod_l+0x256>
 800bbd6:	9b07      	ldr	r3, [sp, #28]
 800bbd8:	437b      	muls	r3, r7
 800bbda:	9307      	str	r3, [sp, #28]
 800bbdc:	e7e1      	b.n	800bba2 <_strtod_l+0x21a>
 800bbde:	2910      	cmp	r1, #16
 800bbe0:	bfd8      	it	le
 800bbe2:	437d      	mulle	r5, r7
 800bbe4:	e7dd      	b.n	800bba2 <_strtod_l+0x21a>
 800bbe6:	2c10      	cmp	r4, #16
 800bbe8:	bfdc      	itt	le
 800bbea:	210a      	movle	r1, #10
 800bbec:	fb01 e505 	mlale	r5, r1, r5, lr
 800bbf0:	e7e4      	b.n	800bbbc <_strtod_l+0x234>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	9304      	str	r3, [sp, #16]
 800bbf6:	e781      	b.n	800bafc <_strtod_l+0x174>
 800bbf8:	f04f 0c01 	mov.w	ip, #1
 800bbfc:	1cb3      	adds	r3, r6, #2
 800bbfe:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc00:	78b3      	ldrb	r3, [r6, #2]
 800bc02:	e78a      	b.n	800bb1a <_strtod_l+0x192>
 800bc04:	f04f 0c00 	mov.w	ip, #0
 800bc08:	e7f8      	b.n	800bbfc <_strtod_l+0x274>
 800bc0a:	bf00      	nop
 800bc0c:	080103c8 	.word	0x080103c8
 800bc10:	7ff00000 	.word	0x7ff00000
 800bc14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc16:	1c5f      	adds	r7, r3, #1
 800bc18:	971b      	str	r7, [sp, #108]	; 0x6c
 800bc1a:	785b      	ldrb	r3, [r3, #1]
 800bc1c:	2b30      	cmp	r3, #48	; 0x30
 800bc1e:	d0f9      	beq.n	800bc14 <_strtod_l+0x28c>
 800bc20:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bc24:	2f08      	cmp	r7, #8
 800bc26:	f63f af7d 	bhi.w	800bb24 <_strtod_l+0x19c>
 800bc2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bc2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc30:	930a      	str	r3, [sp, #40]	; 0x28
 800bc32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc34:	1c5f      	adds	r7, r3, #1
 800bc36:	971b      	str	r7, [sp, #108]	; 0x6c
 800bc38:	785b      	ldrb	r3, [r3, #1]
 800bc3a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bc3e:	f1b8 0f09 	cmp.w	r8, #9
 800bc42:	d937      	bls.n	800bcb4 <_strtod_l+0x32c>
 800bc44:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bc46:	1a7f      	subs	r7, r7, r1
 800bc48:	2f08      	cmp	r7, #8
 800bc4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bc4e:	dc37      	bgt.n	800bcc0 <_strtod_l+0x338>
 800bc50:	45be      	cmp	lr, r7
 800bc52:	bfa8      	it	ge
 800bc54:	46be      	movge	lr, r7
 800bc56:	f1bc 0f00 	cmp.w	ip, #0
 800bc5a:	d001      	beq.n	800bc60 <_strtod_l+0x2d8>
 800bc5c:	f1ce 0e00 	rsb	lr, lr, #0
 800bc60:	2c00      	cmp	r4, #0
 800bc62:	d151      	bne.n	800bd08 <_strtod_l+0x380>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	f47f aece 	bne.w	800ba06 <_strtod_l+0x7e>
 800bc6a:	9a06      	ldr	r2, [sp, #24]
 800bc6c:	2a00      	cmp	r2, #0
 800bc6e:	f47f aeca 	bne.w	800ba06 <_strtod_l+0x7e>
 800bc72:	9a04      	ldr	r2, [sp, #16]
 800bc74:	2a00      	cmp	r2, #0
 800bc76:	f47f aee4 	bne.w	800ba42 <_strtod_l+0xba>
 800bc7a:	2b4e      	cmp	r3, #78	; 0x4e
 800bc7c:	d027      	beq.n	800bcce <_strtod_l+0x346>
 800bc7e:	dc21      	bgt.n	800bcc4 <_strtod_l+0x33c>
 800bc80:	2b49      	cmp	r3, #73	; 0x49
 800bc82:	f47f aede 	bne.w	800ba42 <_strtod_l+0xba>
 800bc86:	49a0      	ldr	r1, [pc, #640]	; (800bf08 <_strtod_l+0x580>)
 800bc88:	a81b      	add	r0, sp, #108	; 0x6c
 800bc8a:	f001 f957 	bl	800cf3c <__match>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	f43f aed7 	beq.w	800ba42 <_strtod_l+0xba>
 800bc94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc96:	499d      	ldr	r1, [pc, #628]	; (800bf0c <_strtod_l+0x584>)
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	a81b      	add	r0, sp, #108	; 0x6c
 800bc9c:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc9e:	f001 f94d 	bl	800cf3c <__match>
 800bca2:	b910      	cbnz	r0, 800bcaa <_strtod_l+0x322>
 800bca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bca6:	3301      	adds	r3, #1
 800bca8:	931b      	str	r3, [sp, #108]	; 0x6c
 800bcaa:	f8df b274 	ldr.w	fp, [pc, #628]	; 800bf20 <_strtod_l+0x598>
 800bcae:	f04f 0a00 	mov.w	sl, #0
 800bcb2:	e6a8      	b.n	800ba06 <_strtod_l+0x7e>
 800bcb4:	210a      	movs	r1, #10
 800bcb6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bcba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bcbe:	e7b8      	b.n	800bc32 <_strtod_l+0x2aa>
 800bcc0:	46be      	mov	lr, r7
 800bcc2:	e7c8      	b.n	800bc56 <_strtod_l+0x2ce>
 800bcc4:	2b69      	cmp	r3, #105	; 0x69
 800bcc6:	d0de      	beq.n	800bc86 <_strtod_l+0x2fe>
 800bcc8:	2b6e      	cmp	r3, #110	; 0x6e
 800bcca:	f47f aeba 	bne.w	800ba42 <_strtod_l+0xba>
 800bcce:	4990      	ldr	r1, [pc, #576]	; (800bf10 <_strtod_l+0x588>)
 800bcd0:	a81b      	add	r0, sp, #108	; 0x6c
 800bcd2:	f001 f933 	bl	800cf3c <__match>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	f43f aeb3 	beq.w	800ba42 <_strtod_l+0xba>
 800bcdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	2b28      	cmp	r3, #40	; 0x28
 800bce2:	d10e      	bne.n	800bd02 <_strtod_l+0x37a>
 800bce4:	aa1e      	add	r2, sp, #120	; 0x78
 800bce6:	498b      	ldr	r1, [pc, #556]	; (800bf14 <_strtod_l+0x58c>)
 800bce8:	a81b      	add	r0, sp, #108	; 0x6c
 800bcea:	f001 f93b 	bl	800cf64 <__hexnan>
 800bcee:	2805      	cmp	r0, #5
 800bcf0:	d107      	bne.n	800bd02 <_strtod_l+0x37a>
 800bcf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bcf4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800bcf8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bcfc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bd00:	e681      	b.n	800ba06 <_strtod_l+0x7e>
 800bd02:	f8df b224 	ldr.w	fp, [pc, #548]	; 800bf28 <_strtod_l+0x5a0>
 800bd06:	e7d2      	b.n	800bcae <_strtod_l+0x326>
 800bd08:	ebae 0302 	sub.w	r3, lr, r2
 800bd0c:	9306      	str	r3, [sp, #24]
 800bd0e:	9b05      	ldr	r3, [sp, #20]
 800bd10:	9807      	ldr	r0, [sp, #28]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	bf08      	it	eq
 800bd16:	4623      	moveq	r3, r4
 800bd18:	2c10      	cmp	r4, #16
 800bd1a:	9305      	str	r3, [sp, #20]
 800bd1c:	46a0      	mov	r8, r4
 800bd1e:	bfa8      	it	ge
 800bd20:	f04f 0810 	movge.w	r8, #16
 800bd24:	f7f4 fc00 	bl	8000528 <__aeabi_ui2d>
 800bd28:	2c09      	cmp	r4, #9
 800bd2a:	4682      	mov	sl, r0
 800bd2c:	468b      	mov	fp, r1
 800bd2e:	dc13      	bgt.n	800bd58 <_strtod_l+0x3d0>
 800bd30:	9b06      	ldr	r3, [sp, #24]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f43f ae67 	beq.w	800ba06 <_strtod_l+0x7e>
 800bd38:	9b06      	ldr	r3, [sp, #24]
 800bd3a:	dd7a      	ble.n	800be32 <_strtod_l+0x4aa>
 800bd3c:	2b16      	cmp	r3, #22
 800bd3e:	dc61      	bgt.n	800be04 <_strtod_l+0x47c>
 800bd40:	4a75      	ldr	r2, [pc, #468]	; (800bf18 <_strtod_l+0x590>)
 800bd42:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bd46:	e9de 0100 	ldrd	r0, r1, [lr]
 800bd4a:	4652      	mov	r2, sl
 800bd4c:	465b      	mov	r3, fp
 800bd4e:	f7f4 fc65 	bl	800061c <__aeabi_dmul>
 800bd52:	4682      	mov	sl, r0
 800bd54:	468b      	mov	fp, r1
 800bd56:	e656      	b.n	800ba06 <_strtod_l+0x7e>
 800bd58:	4b6f      	ldr	r3, [pc, #444]	; (800bf18 <_strtod_l+0x590>)
 800bd5a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bd5e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bd62:	f7f4 fc5b 	bl	800061c <__aeabi_dmul>
 800bd66:	4606      	mov	r6, r0
 800bd68:	4628      	mov	r0, r5
 800bd6a:	460f      	mov	r7, r1
 800bd6c:	f7f4 fbdc 	bl	8000528 <__aeabi_ui2d>
 800bd70:	4602      	mov	r2, r0
 800bd72:	460b      	mov	r3, r1
 800bd74:	4630      	mov	r0, r6
 800bd76:	4639      	mov	r1, r7
 800bd78:	f7f4 fa9a 	bl	80002b0 <__adddf3>
 800bd7c:	2c0f      	cmp	r4, #15
 800bd7e:	4682      	mov	sl, r0
 800bd80:	468b      	mov	fp, r1
 800bd82:	ddd5      	ble.n	800bd30 <_strtod_l+0x3a8>
 800bd84:	9b06      	ldr	r3, [sp, #24]
 800bd86:	eba4 0808 	sub.w	r8, r4, r8
 800bd8a:	4498      	add	r8, r3
 800bd8c:	f1b8 0f00 	cmp.w	r8, #0
 800bd90:	f340 8096 	ble.w	800bec0 <_strtod_l+0x538>
 800bd94:	f018 030f 	ands.w	r3, r8, #15
 800bd98:	d00a      	beq.n	800bdb0 <_strtod_l+0x428>
 800bd9a:	495f      	ldr	r1, [pc, #380]	; (800bf18 <_strtod_l+0x590>)
 800bd9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bda0:	4652      	mov	r2, sl
 800bda2:	465b      	mov	r3, fp
 800bda4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda8:	f7f4 fc38 	bl	800061c <__aeabi_dmul>
 800bdac:	4682      	mov	sl, r0
 800bdae:	468b      	mov	fp, r1
 800bdb0:	f038 080f 	bics.w	r8, r8, #15
 800bdb4:	d073      	beq.n	800be9e <_strtod_l+0x516>
 800bdb6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bdba:	dd47      	ble.n	800be4c <_strtod_l+0x4c4>
 800bdbc:	2400      	movs	r4, #0
 800bdbe:	46a0      	mov	r8, r4
 800bdc0:	9407      	str	r4, [sp, #28]
 800bdc2:	9405      	str	r4, [sp, #20]
 800bdc4:	2322      	movs	r3, #34	; 0x22
 800bdc6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800bf20 <_strtod_l+0x598>
 800bdca:	f8c9 3000 	str.w	r3, [r9]
 800bdce:	f04f 0a00 	mov.w	sl, #0
 800bdd2:	9b07      	ldr	r3, [sp, #28]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f43f ae16 	beq.w	800ba06 <_strtod_l+0x7e>
 800bdda:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bddc:	4648      	mov	r0, r9
 800bdde:	f001 f9c1 	bl	800d164 <_Bfree>
 800bde2:	9905      	ldr	r1, [sp, #20]
 800bde4:	4648      	mov	r0, r9
 800bde6:	f001 f9bd 	bl	800d164 <_Bfree>
 800bdea:	4641      	mov	r1, r8
 800bdec:	4648      	mov	r0, r9
 800bdee:	f001 f9b9 	bl	800d164 <_Bfree>
 800bdf2:	9907      	ldr	r1, [sp, #28]
 800bdf4:	4648      	mov	r0, r9
 800bdf6:	f001 f9b5 	bl	800d164 <_Bfree>
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4648      	mov	r0, r9
 800bdfe:	f001 f9b1 	bl	800d164 <_Bfree>
 800be02:	e600      	b.n	800ba06 <_strtod_l+0x7e>
 800be04:	9a06      	ldr	r2, [sp, #24]
 800be06:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800be0a:	4293      	cmp	r3, r2
 800be0c:	dbba      	blt.n	800bd84 <_strtod_l+0x3fc>
 800be0e:	4d42      	ldr	r5, [pc, #264]	; (800bf18 <_strtod_l+0x590>)
 800be10:	f1c4 040f 	rsb	r4, r4, #15
 800be14:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800be18:	4652      	mov	r2, sl
 800be1a:	465b      	mov	r3, fp
 800be1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be20:	f7f4 fbfc 	bl	800061c <__aeabi_dmul>
 800be24:	9b06      	ldr	r3, [sp, #24]
 800be26:	1b1c      	subs	r4, r3, r4
 800be28:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800be2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be30:	e78d      	b.n	800bd4e <_strtod_l+0x3c6>
 800be32:	f113 0f16 	cmn.w	r3, #22
 800be36:	dba5      	blt.n	800bd84 <_strtod_l+0x3fc>
 800be38:	4a37      	ldr	r2, [pc, #220]	; (800bf18 <_strtod_l+0x590>)
 800be3a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800be3e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800be42:	4650      	mov	r0, sl
 800be44:	4659      	mov	r1, fp
 800be46:	f7f4 fd13 	bl	8000870 <__aeabi_ddiv>
 800be4a:	e782      	b.n	800bd52 <_strtod_l+0x3ca>
 800be4c:	2300      	movs	r3, #0
 800be4e:	4e33      	ldr	r6, [pc, #204]	; (800bf1c <_strtod_l+0x594>)
 800be50:	ea4f 1828 	mov.w	r8, r8, asr #4
 800be54:	4650      	mov	r0, sl
 800be56:	4659      	mov	r1, fp
 800be58:	461d      	mov	r5, r3
 800be5a:	f1b8 0f01 	cmp.w	r8, #1
 800be5e:	dc21      	bgt.n	800bea4 <_strtod_l+0x51c>
 800be60:	b10b      	cbz	r3, 800be66 <_strtod_l+0x4de>
 800be62:	4682      	mov	sl, r0
 800be64:	468b      	mov	fp, r1
 800be66:	4b2d      	ldr	r3, [pc, #180]	; (800bf1c <_strtod_l+0x594>)
 800be68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800be6c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800be70:	4652      	mov	r2, sl
 800be72:	465b      	mov	r3, fp
 800be74:	e9d5 0100 	ldrd	r0, r1, [r5]
 800be78:	f7f4 fbd0 	bl	800061c <__aeabi_dmul>
 800be7c:	4b28      	ldr	r3, [pc, #160]	; (800bf20 <_strtod_l+0x598>)
 800be7e:	460a      	mov	r2, r1
 800be80:	400b      	ands	r3, r1
 800be82:	4928      	ldr	r1, [pc, #160]	; (800bf24 <_strtod_l+0x59c>)
 800be84:	428b      	cmp	r3, r1
 800be86:	4682      	mov	sl, r0
 800be88:	d898      	bhi.n	800bdbc <_strtod_l+0x434>
 800be8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800be8e:	428b      	cmp	r3, r1
 800be90:	bf86      	itte	hi
 800be92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bf2c <_strtod_l+0x5a4>
 800be96:	f04f 3aff 	movhi.w	sl, #4294967295
 800be9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800be9e:	2300      	movs	r3, #0
 800bea0:	9304      	str	r3, [sp, #16]
 800bea2:	e077      	b.n	800bf94 <_strtod_l+0x60c>
 800bea4:	f018 0f01 	tst.w	r8, #1
 800bea8:	d006      	beq.n	800beb8 <_strtod_l+0x530>
 800beaa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	f7f4 fbb3 	bl	800061c <__aeabi_dmul>
 800beb6:	2301      	movs	r3, #1
 800beb8:	3501      	adds	r5, #1
 800beba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bebe:	e7cc      	b.n	800be5a <_strtod_l+0x4d2>
 800bec0:	d0ed      	beq.n	800be9e <_strtod_l+0x516>
 800bec2:	f1c8 0800 	rsb	r8, r8, #0
 800bec6:	f018 020f 	ands.w	r2, r8, #15
 800beca:	d00a      	beq.n	800bee2 <_strtod_l+0x55a>
 800becc:	4b12      	ldr	r3, [pc, #72]	; (800bf18 <_strtod_l+0x590>)
 800bece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bed2:	4650      	mov	r0, sl
 800bed4:	4659      	mov	r1, fp
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	f7f4 fcc9 	bl	8000870 <__aeabi_ddiv>
 800bede:	4682      	mov	sl, r0
 800bee0:	468b      	mov	fp, r1
 800bee2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bee6:	d0da      	beq.n	800be9e <_strtod_l+0x516>
 800bee8:	f1b8 0f1f 	cmp.w	r8, #31
 800beec:	dd20      	ble.n	800bf30 <_strtod_l+0x5a8>
 800beee:	2400      	movs	r4, #0
 800bef0:	46a0      	mov	r8, r4
 800bef2:	9407      	str	r4, [sp, #28]
 800bef4:	9405      	str	r4, [sp, #20]
 800bef6:	2322      	movs	r3, #34	; 0x22
 800bef8:	f04f 0a00 	mov.w	sl, #0
 800befc:	f04f 0b00 	mov.w	fp, #0
 800bf00:	f8c9 3000 	str.w	r3, [r9]
 800bf04:	e765      	b.n	800bdd2 <_strtod_l+0x44a>
 800bf06:	bf00      	nop
 800bf08:	080103bc 	.word	0x080103bc
 800bf0c:	080103bf 	.word	0x080103bf
 800bf10:	080103c5 	.word	0x080103c5
 800bf14:	080103dc 	.word	0x080103dc
 800bf18:	08010450 	.word	0x08010450
 800bf1c:	08010428 	.word	0x08010428
 800bf20:	7ff00000 	.word	0x7ff00000
 800bf24:	7ca00000 	.word	0x7ca00000
 800bf28:	fff80000 	.word	0xfff80000
 800bf2c:	7fefffff 	.word	0x7fefffff
 800bf30:	f018 0310 	ands.w	r3, r8, #16
 800bf34:	bf18      	it	ne
 800bf36:	236a      	movne	r3, #106	; 0x6a
 800bf38:	4da0      	ldr	r5, [pc, #640]	; (800c1bc <_strtod_l+0x834>)
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	4650      	mov	r0, sl
 800bf3e:	4659      	mov	r1, fp
 800bf40:	2300      	movs	r3, #0
 800bf42:	f1b8 0f00 	cmp.w	r8, #0
 800bf46:	f300 810a 	bgt.w	800c15e <_strtod_l+0x7d6>
 800bf4a:	b10b      	cbz	r3, 800bf50 <_strtod_l+0x5c8>
 800bf4c:	4682      	mov	sl, r0
 800bf4e:	468b      	mov	fp, r1
 800bf50:	9b04      	ldr	r3, [sp, #16]
 800bf52:	b1bb      	cbz	r3, 800bf84 <_strtod_l+0x5fc>
 800bf54:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bf58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	4659      	mov	r1, fp
 800bf60:	dd10      	ble.n	800bf84 <_strtod_l+0x5fc>
 800bf62:	2b1f      	cmp	r3, #31
 800bf64:	f340 8107 	ble.w	800c176 <_strtod_l+0x7ee>
 800bf68:	2b34      	cmp	r3, #52	; 0x34
 800bf6a:	bfde      	ittt	le
 800bf6c:	3b20      	suble	r3, #32
 800bf6e:	f04f 32ff 	movle.w	r2, #4294967295
 800bf72:	fa02 f303 	lslle.w	r3, r2, r3
 800bf76:	f04f 0a00 	mov.w	sl, #0
 800bf7a:	bfcc      	ite	gt
 800bf7c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bf80:	ea03 0b01 	andle.w	fp, r3, r1
 800bf84:	2200      	movs	r2, #0
 800bf86:	2300      	movs	r3, #0
 800bf88:	4650      	mov	r0, sl
 800bf8a:	4659      	mov	r1, fp
 800bf8c:	f7f4 fdae 	bl	8000aec <__aeabi_dcmpeq>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d1ac      	bne.n	800beee <_strtod_l+0x566>
 800bf94:	9b07      	ldr	r3, [sp, #28]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	9a05      	ldr	r2, [sp, #20]
 800bf9a:	9908      	ldr	r1, [sp, #32]
 800bf9c:	4623      	mov	r3, r4
 800bf9e:	4648      	mov	r0, r9
 800bfa0:	f001 f932 	bl	800d208 <__s2b>
 800bfa4:	9007      	str	r0, [sp, #28]
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	f43f af08 	beq.w	800bdbc <_strtod_l+0x434>
 800bfac:	9a06      	ldr	r2, [sp, #24]
 800bfae:	9b06      	ldr	r3, [sp, #24]
 800bfb0:	2a00      	cmp	r2, #0
 800bfb2:	f1c3 0300 	rsb	r3, r3, #0
 800bfb6:	bfa8      	it	ge
 800bfb8:	2300      	movge	r3, #0
 800bfba:	930e      	str	r3, [sp, #56]	; 0x38
 800bfbc:	2400      	movs	r4, #0
 800bfbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bfc2:	9316      	str	r3, [sp, #88]	; 0x58
 800bfc4:	46a0      	mov	r8, r4
 800bfc6:	9b07      	ldr	r3, [sp, #28]
 800bfc8:	4648      	mov	r0, r9
 800bfca:	6859      	ldr	r1, [r3, #4]
 800bfcc:	f001 f896 	bl	800d0fc <_Balloc>
 800bfd0:	9005      	str	r0, [sp, #20]
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	f43f aef6 	beq.w	800bdc4 <_strtod_l+0x43c>
 800bfd8:	9b07      	ldr	r3, [sp, #28]
 800bfda:	691a      	ldr	r2, [r3, #16]
 800bfdc:	3202      	adds	r2, #2
 800bfde:	f103 010c 	add.w	r1, r3, #12
 800bfe2:	0092      	lsls	r2, r2, #2
 800bfe4:	300c      	adds	r0, #12
 800bfe6:	f7ff fa82 	bl	800b4ee <memcpy>
 800bfea:	aa1e      	add	r2, sp, #120	; 0x78
 800bfec:	a91d      	add	r1, sp, #116	; 0x74
 800bfee:	ec4b ab10 	vmov	d0, sl, fp
 800bff2:	4648      	mov	r0, r9
 800bff4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800bff8:	f001 fbc2 	bl	800d780 <__d2b>
 800bffc:	901c      	str	r0, [sp, #112]	; 0x70
 800bffe:	2800      	cmp	r0, #0
 800c000:	f43f aee0 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c004:	2101      	movs	r1, #1
 800c006:	4648      	mov	r0, r9
 800c008:	f001 f98a 	bl	800d320 <__i2b>
 800c00c:	4680      	mov	r8, r0
 800c00e:	2800      	cmp	r0, #0
 800c010:	f43f aed8 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c014:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c016:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c018:	2e00      	cmp	r6, #0
 800c01a:	bfab      	itete	ge
 800c01c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c01e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c020:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c022:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c024:	bfac      	ite	ge
 800c026:	18f7      	addge	r7, r6, r3
 800c028:	1b9d      	sublt	r5, r3, r6
 800c02a:	9b04      	ldr	r3, [sp, #16]
 800c02c:	1af6      	subs	r6, r6, r3
 800c02e:	4416      	add	r6, r2
 800c030:	4b63      	ldr	r3, [pc, #396]	; (800c1c0 <_strtod_l+0x838>)
 800c032:	3e01      	subs	r6, #1
 800c034:	429e      	cmp	r6, r3
 800c036:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c03a:	f280 80af 	bge.w	800c19c <_strtod_l+0x814>
 800c03e:	1b9b      	subs	r3, r3, r6
 800c040:	2b1f      	cmp	r3, #31
 800c042:	eba2 0203 	sub.w	r2, r2, r3
 800c046:	f04f 0101 	mov.w	r1, #1
 800c04a:	f300 809b 	bgt.w	800c184 <_strtod_l+0x7fc>
 800c04e:	fa01 f303 	lsl.w	r3, r1, r3
 800c052:	930f      	str	r3, [sp, #60]	; 0x3c
 800c054:	2300      	movs	r3, #0
 800c056:	930a      	str	r3, [sp, #40]	; 0x28
 800c058:	18be      	adds	r6, r7, r2
 800c05a:	9b04      	ldr	r3, [sp, #16]
 800c05c:	42b7      	cmp	r7, r6
 800c05e:	4415      	add	r5, r2
 800c060:	441d      	add	r5, r3
 800c062:	463b      	mov	r3, r7
 800c064:	bfa8      	it	ge
 800c066:	4633      	movge	r3, r6
 800c068:	42ab      	cmp	r3, r5
 800c06a:	bfa8      	it	ge
 800c06c:	462b      	movge	r3, r5
 800c06e:	2b00      	cmp	r3, #0
 800c070:	bfc2      	ittt	gt
 800c072:	1af6      	subgt	r6, r6, r3
 800c074:	1aed      	subgt	r5, r5, r3
 800c076:	1aff      	subgt	r7, r7, r3
 800c078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c07a:	b1bb      	cbz	r3, 800c0ac <_strtod_l+0x724>
 800c07c:	4641      	mov	r1, r8
 800c07e:	461a      	mov	r2, r3
 800c080:	4648      	mov	r0, r9
 800c082:	f001 f9ed 	bl	800d460 <__pow5mult>
 800c086:	4680      	mov	r8, r0
 800c088:	2800      	cmp	r0, #0
 800c08a:	f43f ae9b 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c08e:	4601      	mov	r1, r0
 800c090:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c092:	4648      	mov	r0, r9
 800c094:	f001 f94d 	bl	800d332 <__multiply>
 800c098:	900c      	str	r0, [sp, #48]	; 0x30
 800c09a:	2800      	cmp	r0, #0
 800c09c:	f43f ae92 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c0a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c0a2:	4648      	mov	r0, r9
 800c0a4:	f001 f85e 	bl	800d164 <_Bfree>
 800c0a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0aa:	931c      	str	r3, [sp, #112]	; 0x70
 800c0ac:	2e00      	cmp	r6, #0
 800c0ae:	dc7a      	bgt.n	800c1a6 <_strtod_l+0x81e>
 800c0b0:	9b06      	ldr	r3, [sp, #24]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	dd08      	ble.n	800c0c8 <_strtod_l+0x740>
 800c0b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c0b8:	9905      	ldr	r1, [sp, #20]
 800c0ba:	4648      	mov	r0, r9
 800c0bc:	f001 f9d0 	bl	800d460 <__pow5mult>
 800c0c0:	9005      	str	r0, [sp, #20]
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	f43f ae7e 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	dd08      	ble.n	800c0de <_strtod_l+0x756>
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	9905      	ldr	r1, [sp, #20]
 800c0d0:	4648      	mov	r0, r9
 800c0d2:	f001 fa13 	bl	800d4fc <__lshift>
 800c0d6:	9005      	str	r0, [sp, #20]
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	f43f ae73 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c0de:	2f00      	cmp	r7, #0
 800c0e0:	dd08      	ble.n	800c0f4 <_strtod_l+0x76c>
 800c0e2:	4641      	mov	r1, r8
 800c0e4:	463a      	mov	r2, r7
 800c0e6:	4648      	mov	r0, r9
 800c0e8:	f001 fa08 	bl	800d4fc <__lshift>
 800c0ec:	4680      	mov	r8, r0
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f ae68 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c0f4:	9a05      	ldr	r2, [sp, #20]
 800c0f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c0f8:	4648      	mov	r0, r9
 800c0fa:	f001 fa6d 	bl	800d5d8 <__mdiff>
 800c0fe:	4604      	mov	r4, r0
 800c100:	2800      	cmp	r0, #0
 800c102:	f43f ae5f 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c106:	68c3      	ldr	r3, [r0, #12]
 800c108:	930c      	str	r3, [sp, #48]	; 0x30
 800c10a:	2300      	movs	r3, #0
 800c10c:	60c3      	str	r3, [r0, #12]
 800c10e:	4641      	mov	r1, r8
 800c110:	f001 fa48 	bl	800d5a4 <__mcmp>
 800c114:	2800      	cmp	r0, #0
 800c116:	da55      	bge.n	800c1c4 <_strtod_l+0x83c>
 800c118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c11a:	b9e3      	cbnz	r3, 800c156 <_strtod_l+0x7ce>
 800c11c:	f1ba 0f00 	cmp.w	sl, #0
 800c120:	d119      	bne.n	800c156 <_strtod_l+0x7ce>
 800c122:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c126:	b9b3      	cbnz	r3, 800c156 <_strtod_l+0x7ce>
 800c128:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c12c:	0d1b      	lsrs	r3, r3, #20
 800c12e:	051b      	lsls	r3, r3, #20
 800c130:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c134:	d90f      	bls.n	800c156 <_strtod_l+0x7ce>
 800c136:	6963      	ldr	r3, [r4, #20]
 800c138:	b913      	cbnz	r3, 800c140 <_strtod_l+0x7b8>
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	dd0a      	ble.n	800c156 <_strtod_l+0x7ce>
 800c140:	4621      	mov	r1, r4
 800c142:	2201      	movs	r2, #1
 800c144:	4648      	mov	r0, r9
 800c146:	f001 f9d9 	bl	800d4fc <__lshift>
 800c14a:	4641      	mov	r1, r8
 800c14c:	4604      	mov	r4, r0
 800c14e:	f001 fa29 	bl	800d5a4 <__mcmp>
 800c152:	2800      	cmp	r0, #0
 800c154:	dc67      	bgt.n	800c226 <_strtod_l+0x89e>
 800c156:	9b04      	ldr	r3, [sp, #16]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d171      	bne.n	800c240 <_strtod_l+0x8b8>
 800c15c:	e63d      	b.n	800bdda <_strtod_l+0x452>
 800c15e:	f018 0f01 	tst.w	r8, #1
 800c162:	d004      	beq.n	800c16e <_strtod_l+0x7e6>
 800c164:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c168:	f7f4 fa58 	bl	800061c <__aeabi_dmul>
 800c16c:	2301      	movs	r3, #1
 800c16e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c172:	3508      	adds	r5, #8
 800c174:	e6e5      	b.n	800bf42 <_strtod_l+0x5ba>
 800c176:	f04f 32ff 	mov.w	r2, #4294967295
 800c17a:	fa02 f303 	lsl.w	r3, r2, r3
 800c17e:	ea03 0a0a 	and.w	sl, r3, sl
 800c182:	e6ff      	b.n	800bf84 <_strtod_l+0x5fc>
 800c184:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c188:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c18c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c190:	36e2      	adds	r6, #226	; 0xe2
 800c192:	fa01 f306 	lsl.w	r3, r1, r6
 800c196:	930a      	str	r3, [sp, #40]	; 0x28
 800c198:	910f      	str	r1, [sp, #60]	; 0x3c
 800c19a:	e75d      	b.n	800c058 <_strtod_l+0x6d0>
 800c19c:	2300      	movs	r3, #0
 800c19e:	930a      	str	r3, [sp, #40]	; 0x28
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1a4:	e758      	b.n	800c058 <_strtod_l+0x6d0>
 800c1a6:	4632      	mov	r2, r6
 800c1a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c1aa:	4648      	mov	r0, r9
 800c1ac:	f001 f9a6 	bl	800d4fc <__lshift>
 800c1b0:	901c      	str	r0, [sp, #112]	; 0x70
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	f47f af7c 	bne.w	800c0b0 <_strtod_l+0x728>
 800c1b8:	e604      	b.n	800bdc4 <_strtod_l+0x43c>
 800c1ba:	bf00      	nop
 800c1bc:	080103f0 	.word	0x080103f0
 800c1c0:	fffffc02 	.word	0xfffffc02
 800c1c4:	465d      	mov	r5, fp
 800c1c6:	f040 8086 	bne.w	800c2d6 <_strtod_l+0x94e>
 800c1ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1d0:	b32a      	cbz	r2, 800c21e <_strtod_l+0x896>
 800c1d2:	4aaf      	ldr	r2, [pc, #700]	; (800c490 <_strtod_l+0xb08>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d153      	bne.n	800c280 <_strtod_l+0x8f8>
 800c1d8:	9b04      	ldr	r3, [sp, #16]
 800c1da:	4650      	mov	r0, sl
 800c1dc:	b1d3      	cbz	r3, 800c214 <_strtod_l+0x88c>
 800c1de:	4aad      	ldr	r2, [pc, #692]	; (800c494 <_strtod_l+0xb0c>)
 800c1e0:	402a      	ands	r2, r5
 800c1e2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c1e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c1ea:	d816      	bhi.n	800c21a <_strtod_l+0x892>
 800c1ec:	0d12      	lsrs	r2, r2, #20
 800c1ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c1f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c1f6:	4298      	cmp	r0, r3
 800c1f8:	d142      	bne.n	800c280 <_strtod_l+0x8f8>
 800c1fa:	4ba7      	ldr	r3, [pc, #668]	; (800c498 <_strtod_l+0xb10>)
 800c1fc:	429d      	cmp	r5, r3
 800c1fe:	d102      	bne.n	800c206 <_strtod_l+0x87e>
 800c200:	3001      	adds	r0, #1
 800c202:	f43f addf 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c206:	4ba3      	ldr	r3, [pc, #652]	; (800c494 <_strtod_l+0xb0c>)
 800c208:	402b      	ands	r3, r5
 800c20a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c20e:	f04f 0a00 	mov.w	sl, #0
 800c212:	e7a0      	b.n	800c156 <_strtod_l+0x7ce>
 800c214:	f04f 33ff 	mov.w	r3, #4294967295
 800c218:	e7ed      	b.n	800c1f6 <_strtod_l+0x86e>
 800c21a:	460b      	mov	r3, r1
 800c21c:	e7eb      	b.n	800c1f6 <_strtod_l+0x86e>
 800c21e:	bb7b      	cbnz	r3, 800c280 <_strtod_l+0x8f8>
 800c220:	f1ba 0f00 	cmp.w	sl, #0
 800c224:	d12c      	bne.n	800c280 <_strtod_l+0x8f8>
 800c226:	9904      	ldr	r1, [sp, #16]
 800c228:	4a9a      	ldr	r2, [pc, #616]	; (800c494 <_strtod_l+0xb0c>)
 800c22a:	465b      	mov	r3, fp
 800c22c:	b1f1      	cbz	r1, 800c26c <_strtod_l+0x8e4>
 800c22e:	ea02 010b 	and.w	r1, r2, fp
 800c232:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c236:	dc19      	bgt.n	800c26c <_strtod_l+0x8e4>
 800c238:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c23c:	f77f ae5b 	ble.w	800bef6 <_strtod_l+0x56e>
 800c240:	4a96      	ldr	r2, [pc, #600]	; (800c49c <_strtod_l+0xb14>)
 800c242:	2300      	movs	r3, #0
 800c244:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c248:	4650      	mov	r0, sl
 800c24a:	4659      	mov	r1, fp
 800c24c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c250:	f7f4 f9e4 	bl	800061c <__aeabi_dmul>
 800c254:	4682      	mov	sl, r0
 800c256:	468b      	mov	fp, r1
 800c258:	2900      	cmp	r1, #0
 800c25a:	f47f adbe 	bne.w	800bdda <_strtod_l+0x452>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f47f adbb 	bne.w	800bdda <_strtod_l+0x452>
 800c264:	2322      	movs	r3, #34	; 0x22
 800c266:	f8c9 3000 	str.w	r3, [r9]
 800c26a:	e5b6      	b.n	800bdda <_strtod_l+0x452>
 800c26c:	4013      	ands	r3, r2
 800c26e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c272:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c276:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c27a:	f04f 3aff 	mov.w	sl, #4294967295
 800c27e:	e76a      	b.n	800c156 <_strtod_l+0x7ce>
 800c280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c282:	b193      	cbz	r3, 800c2aa <_strtod_l+0x922>
 800c284:	422b      	tst	r3, r5
 800c286:	f43f af66 	beq.w	800c156 <_strtod_l+0x7ce>
 800c28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c28c:	9a04      	ldr	r2, [sp, #16]
 800c28e:	4650      	mov	r0, sl
 800c290:	4659      	mov	r1, fp
 800c292:	b173      	cbz	r3, 800c2b2 <_strtod_l+0x92a>
 800c294:	f7ff fb5b 	bl	800b94e <sulp>
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2a0:	f7f4 f806 	bl	80002b0 <__adddf3>
 800c2a4:	4682      	mov	sl, r0
 800c2a6:	468b      	mov	fp, r1
 800c2a8:	e755      	b.n	800c156 <_strtod_l+0x7ce>
 800c2aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2ac:	ea13 0f0a 	tst.w	r3, sl
 800c2b0:	e7e9      	b.n	800c286 <_strtod_l+0x8fe>
 800c2b2:	f7ff fb4c 	bl	800b94e <sulp>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2be:	f7f3 fff5 	bl	80002ac <__aeabi_dsub>
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4682      	mov	sl, r0
 800c2c8:	468b      	mov	fp, r1
 800c2ca:	f7f4 fc0f 	bl	8000aec <__aeabi_dcmpeq>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f47f ae11 	bne.w	800bef6 <_strtod_l+0x56e>
 800c2d4:	e73f      	b.n	800c156 <_strtod_l+0x7ce>
 800c2d6:	4641      	mov	r1, r8
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f001 faa0 	bl	800d81e <__ratio>
 800c2de:	ec57 6b10 	vmov	r6, r7, d0
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2e8:	ee10 0a10 	vmov	r0, s0
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	f7f4 fc11 	bl	8000b14 <__aeabi_dcmple>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d077      	beq.n	800c3e6 <_strtod_l+0xa5e>
 800c2f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d04a      	beq.n	800c392 <_strtod_l+0xa0a>
 800c2fc:	4b68      	ldr	r3, [pc, #416]	; (800c4a0 <_strtod_l+0xb18>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c304:	4f66      	ldr	r7, [pc, #408]	; (800c4a0 <_strtod_l+0xb18>)
 800c306:	2600      	movs	r6, #0
 800c308:	4b62      	ldr	r3, [pc, #392]	; (800c494 <_strtod_l+0xb0c>)
 800c30a:	402b      	ands	r3, r5
 800c30c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c30e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c310:	4b64      	ldr	r3, [pc, #400]	; (800c4a4 <_strtod_l+0xb1c>)
 800c312:	429a      	cmp	r2, r3
 800c314:	f040 80ce 	bne.w	800c4b4 <_strtod_l+0xb2c>
 800c318:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c31c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c320:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c324:	ec4b ab10 	vmov	d0, sl, fp
 800c328:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c32c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c330:	f001 f9b0 	bl	800d694 <__ulp>
 800c334:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c338:	ec53 2b10 	vmov	r2, r3, d0
 800c33c:	f7f4 f96e 	bl	800061c <__aeabi_dmul>
 800c340:	4652      	mov	r2, sl
 800c342:	465b      	mov	r3, fp
 800c344:	f7f3 ffb4 	bl	80002b0 <__adddf3>
 800c348:	460b      	mov	r3, r1
 800c34a:	4952      	ldr	r1, [pc, #328]	; (800c494 <_strtod_l+0xb0c>)
 800c34c:	4a56      	ldr	r2, [pc, #344]	; (800c4a8 <_strtod_l+0xb20>)
 800c34e:	4019      	ands	r1, r3
 800c350:	4291      	cmp	r1, r2
 800c352:	4682      	mov	sl, r0
 800c354:	d95b      	bls.n	800c40e <_strtod_l+0xa86>
 800c356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c358:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d103      	bne.n	800c368 <_strtod_l+0x9e0>
 800c360:	9b08      	ldr	r3, [sp, #32]
 800c362:	3301      	adds	r3, #1
 800c364:	f43f ad2e 	beq.w	800bdc4 <_strtod_l+0x43c>
 800c368:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c498 <_strtod_l+0xb10>
 800c36c:	f04f 3aff 	mov.w	sl, #4294967295
 800c370:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c372:	4648      	mov	r0, r9
 800c374:	f000 fef6 	bl	800d164 <_Bfree>
 800c378:	9905      	ldr	r1, [sp, #20]
 800c37a:	4648      	mov	r0, r9
 800c37c:	f000 fef2 	bl	800d164 <_Bfree>
 800c380:	4641      	mov	r1, r8
 800c382:	4648      	mov	r0, r9
 800c384:	f000 feee 	bl	800d164 <_Bfree>
 800c388:	4621      	mov	r1, r4
 800c38a:	4648      	mov	r0, r9
 800c38c:	f000 feea 	bl	800d164 <_Bfree>
 800c390:	e619      	b.n	800bfc6 <_strtod_l+0x63e>
 800c392:	f1ba 0f00 	cmp.w	sl, #0
 800c396:	d11a      	bne.n	800c3ce <_strtod_l+0xa46>
 800c398:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c39c:	b9eb      	cbnz	r3, 800c3da <_strtod_l+0xa52>
 800c39e:	2200      	movs	r2, #0
 800c3a0:	4b3f      	ldr	r3, [pc, #252]	; (800c4a0 <_strtod_l+0xb18>)
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	4639      	mov	r1, r7
 800c3a6:	f7f4 fbab 	bl	8000b00 <__aeabi_dcmplt>
 800c3aa:	b9c8      	cbnz	r0, 800c3e0 <_strtod_l+0xa58>
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	4639      	mov	r1, r7
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	4b3e      	ldr	r3, [pc, #248]	; (800c4ac <_strtod_l+0xb24>)
 800c3b4:	f7f4 f932 	bl	800061c <__aeabi_dmul>
 800c3b8:	4606      	mov	r6, r0
 800c3ba:	460f      	mov	r7, r1
 800c3bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c3c0:	9618      	str	r6, [sp, #96]	; 0x60
 800c3c2:	9319      	str	r3, [sp, #100]	; 0x64
 800c3c4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c3c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c3cc:	e79c      	b.n	800c308 <_strtod_l+0x980>
 800c3ce:	f1ba 0f01 	cmp.w	sl, #1
 800c3d2:	d102      	bne.n	800c3da <_strtod_l+0xa52>
 800c3d4:	2d00      	cmp	r5, #0
 800c3d6:	f43f ad8e 	beq.w	800bef6 <_strtod_l+0x56e>
 800c3da:	2200      	movs	r2, #0
 800c3dc:	4b34      	ldr	r3, [pc, #208]	; (800c4b0 <_strtod_l+0xb28>)
 800c3de:	e78f      	b.n	800c300 <_strtod_l+0x978>
 800c3e0:	2600      	movs	r6, #0
 800c3e2:	4f32      	ldr	r7, [pc, #200]	; (800c4ac <_strtod_l+0xb24>)
 800c3e4:	e7ea      	b.n	800c3bc <_strtod_l+0xa34>
 800c3e6:	4b31      	ldr	r3, [pc, #196]	; (800c4ac <_strtod_l+0xb24>)
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	4639      	mov	r1, r7
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f7f4 f915 	bl	800061c <__aeabi_dmul>
 800c3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	460f      	mov	r7, r1
 800c3f8:	b933      	cbnz	r3, 800c408 <_strtod_l+0xa80>
 800c3fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3fe:	9010      	str	r0, [sp, #64]	; 0x40
 800c400:	9311      	str	r3, [sp, #68]	; 0x44
 800c402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c406:	e7df      	b.n	800c3c8 <_strtod_l+0xa40>
 800c408:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c40c:	e7f9      	b.n	800c402 <_strtod_l+0xa7a>
 800c40e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c412:	9b04      	ldr	r3, [sp, #16]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1ab      	bne.n	800c370 <_strtod_l+0x9e8>
 800c418:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c41c:	0d1b      	lsrs	r3, r3, #20
 800c41e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c420:	051b      	lsls	r3, r3, #20
 800c422:	429a      	cmp	r2, r3
 800c424:	465d      	mov	r5, fp
 800c426:	d1a3      	bne.n	800c370 <_strtod_l+0x9e8>
 800c428:	4639      	mov	r1, r7
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7f4 fb90 	bl	8000b50 <__aeabi_d2iz>
 800c430:	f7f4 f88a 	bl	8000548 <__aeabi_i2d>
 800c434:	460b      	mov	r3, r1
 800c436:	4602      	mov	r2, r0
 800c438:	4639      	mov	r1, r7
 800c43a:	4630      	mov	r0, r6
 800c43c:	f7f3 ff36 	bl	80002ac <__aeabi_dsub>
 800c440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c442:	4606      	mov	r6, r0
 800c444:	460f      	mov	r7, r1
 800c446:	b933      	cbnz	r3, 800c456 <_strtod_l+0xace>
 800c448:	f1ba 0f00 	cmp.w	sl, #0
 800c44c:	d103      	bne.n	800c456 <_strtod_l+0xace>
 800c44e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c452:	2d00      	cmp	r5, #0
 800c454:	d06d      	beq.n	800c532 <_strtod_l+0xbaa>
 800c456:	a30a      	add	r3, pc, #40	; (adr r3, 800c480 <_strtod_l+0xaf8>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	4630      	mov	r0, r6
 800c45e:	4639      	mov	r1, r7
 800c460:	f7f4 fb4e 	bl	8000b00 <__aeabi_dcmplt>
 800c464:	2800      	cmp	r0, #0
 800c466:	f47f acb8 	bne.w	800bdda <_strtod_l+0x452>
 800c46a:	a307      	add	r3, pc, #28	; (adr r3, 800c488 <_strtod_l+0xb00>)
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	4630      	mov	r0, r6
 800c472:	4639      	mov	r1, r7
 800c474:	f7f4 fb62 	bl	8000b3c <__aeabi_dcmpgt>
 800c478:	2800      	cmp	r0, #0
 800c47a:	f43f af79 	beq.w	800c370 <_strtod_l+0x9e8>
 800c47e:	e4ac      	b.n	800bdda <_strtod_l+0x452>
 800c480:	94a03595 	.word	0x94a03595
 800c484:	3fdfffff 	.word	0x3fdfffff
 800c488:	35afe535 	.word	0x35afe535
 800c48c:	3fe00000 	.word	0x3fe00000
 800c490:	000fffff 	.word	0x000fffff
 800c494:	7ff00000 	.word	0x7ff00000
 800c498:	7fefffff 	.word	0x7fefffff
 800c49c:	39500000 	.word	0x39500000
 800c4a0:	3ff00000 	.word	0x3ff00000
 800c4a4:	7fe00000 	.word	0x7fe00000
 800c4a8:	7c9fffff 	.word	0x7c9fffff
 800c4ac:	3fe00000 	.word	0x3fe00000
 800c4b0:	bff00000 	.word	0xbff00000
 800c4b4:	9b04      	ldr	r3, [sp, #16]
 800c4b6:	b333      	cbz	r3, 800c506 <_strtod_l+0xb7e>
 800c4b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c4be:	d822      	bhi.n	800c506 <_strtod_l+0xb7e>
 800c4c0:	a327      	add	r3, pc, #156	; (adr r3, 800c560 <_strtod_l+0xbd8>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	f7f4 fb23 	bl	8000b14 <__aeabi_dcmple>
 800c4ce:	b1a0      	cbz	r0, 800c4fa <_strtod_l+0xb72>
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7f4 fb64 	bl	8000ba0 <__aeabi_d2uiz>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	bf08      	it	eq
 800c4dc:	2001      	moveq	r0, #1
 800c4de:	f7f4 f823 	bl	8000528 <__aeabi_ui2d>
 800c4e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	460f      	mov	r7, r1
 800c4e8:	bb03      	cbnz	r3, 800c52c <_strtod_l+0xba4>
 800c4ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4ee:	9012      	str	r0, [sp, #72]	; 0x48
 800c4f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c4f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c4f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4fe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c502:	1a9b      	subs	r3, r3, r2
 800c504:	930b      	str	r3, [sp, #44]	; 0x2c
 800c506:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c50a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c50e:	f001 f8c1 	bl	800d694 <__ulp>
 800c512:	4650      	mov	r0, sl
 800c514:	ec53 2b10 	vmov	r2, r3, d0
 800c518:	4659      	mov	r1, fp
 800c51a:	f7f4 f87f 	bl	800061c <__aeabi_dmul>
 800c51e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c522:	f7f3 fec5 	bl	80002b0 <__adddf3>
 800c526:	4682      	mov	sl, r0
 800c528:	468b      	mov	fp, r1
 800c52a:	e772      	b.n	800c412 <_strtod_l+0xa8a>
 800c52c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c530:	e7df      	b.n	800c4f2 <_strtod_l+0xb6a>
 800c532:	a30d      	add	r3, pc, #52	; (adr r3, 800c568 <_strtod_l+0xbe0>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	f7f4 fae2 	bl	8000b00 <__aeabi_dcmplt>
 800c53c:	e79c      	b.n	800c478 <_strtod_l+0xaf0>
 800c53e:	2300      	movs	r3, #0
 800c540:	930d      	str	r3, [sp, #52]	; 0x34
 800c542:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c546:	6013      	str	r3, [r2, #0]
 800c548:	f7ff ba61 	b.w	800ba0e <_strtod_l+0x86>
 800c54c:	2b65      	cmp	r3, #101	; 0x65
 800c54e:	f04f 0200 	mov.w	r2, #0
 800c552:	f43f ab4e 	beq.w	800bbf2 <_strtod_l+0x26a>
 800c556:	2101      	movs	r1, #1
 800c558:	4614      	mov	r4, r2
 800c55a:	9104      	str	r1, [sp, #16]
 800c55c:	f7ff bacb 	b.w	800baf6 <_strtod_l+0x16e>
 800c560:	ffc00000 	.word	0xffc00000
 800c564:	41dfffff 	.word	0x41dfffff
 800c568:	94a03595 	.word	0x94a03595
 800c56c:	3fcfffff 	.word	0x3fcfffff

0800c570 <strtod>:
 800c570:	4b07      	ldr	r3, [pc, #28]	; (800c590 <strtod+0x20>)
 800c572:	4a08      	ldr	r2, [pc, #32]	; (800c594 <strtod+0x24>)
 800c574:	b410      	push	{r4}
 800c576:	681c      	ldr	r4, [r3, #0]
 800c578:	6a23      	ldr	r3, [r4, #32]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	bf08      	it	eq
 800c57e:	4613      	moveq	r3, r2
 800c580:	460a      	mov	r2, r1
 800c582:	4601      	mov	r1, r0
 800c584:	4620      	mov	r0, r4
 800c586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c58a:	f7ff b9fd 	b.w	800b988 <_strtod_l>
 800c58e:	bf00      	nop
 800c590:	20000404 	.word	0x20000404
 800c594:	20000468 	.word	0x20000468

0800c598 <_strtol_l.isra.0>:
 800c598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c59c:	4680      	mov	r8, r0
 800c59e:	4689      	mov	r9, r1
 800c5a0:	4692      	mov	sl, r2
 800c5a2:	461e      	mov	r6, r3
 800c5a4:	460f      	mov	r7, r1
 800c5a6:	463d      	mov	r5, r7
 800c5a8:	9808      	ldr	r0, [sp, #32]
 800c5aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5ae:	f000 fd79 	bl	800d0a4 <__locale_ctype_ptr_l>
 800c5b2:	4420      	add	r0, r4
 800c5b4:	7843      	ldrb	r3, [r0, #1]
 800c5b6:	f013 0308 	ands.w	r3, r3, #8
 800c5ba:	d132      	bne.n	800c622 <_strtol_l.isra.0+0x8a>
 800c5bc:	2c2d      	cmp	r4, #45	; 0x2d
 800c5be:	d132      	bne.n	800c626 <_strtol_l.isra.0+0x8e>
 800c5c0:	787c      	ldrb	r4, [r7, #1]
 800c5c2:	1cbd      	adds	r5, r7, #2
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	2e00      	cmp	r6, #0
 800c5c8:	d05d      	beq.n	800c686 <_strtol_l.isra.0+0xee>
 800c5ca:	2e10      	cmp	r6, #16
 800c5cc:	d109      	bne.n	800c5e2 <_strtol_l.isra.0+0x4a>
 800c5ce:	2c30      	cmp	r4, #48	; 0x30
 800c5d0:	d107      	bne.n	800c5e2 <_strtol_l.isra.0+0x4a>
 800c5d2:	782b      	ldrb	r3, [r5, #0]
 800c5d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c5d8:	2b58      	cmp	r3, #88	; 0x58
 800c5da:	d14f      	bne.n	800c67c <_strtol_l.isra.0+0xe4>
 800c5dc:	786c      	ldrb	r4, [r5, #1]
 800c5de:	2610      	movs	r6, #16
 800c5e0:	3502      	adds	r5, #2
 800c5e2:	2a00      	cmp	r2, #0
 800c5e4:	bf14      	ite	ne
 800c5e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c5ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c5ee:	2700      	movs	r7, #0
 800c5f0:	fbb1 fcf6 	udiv	ip, r1, r6
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c5fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c5fe:	2b09      	cmp	r3, #9
 800c600:	d817      	bhi.n	800c632 <_strtol_l.isra.0+0x9a>
 800c602:	461c      	mov	r4, r3
 800c604:	42a6      	cmp	r6, r4
 800c606:	dd23      	ble.n	800c650 <_strtol_l.isra.0+0xb8>
 800c608:	1c7b      	adds	r3, r7, #1
 800c60a:	d007      	beq.n	800c61c <_strtol_l.isra.0+0x84>
 800c60c:	4584      	cmp	ip, r0
 800c60e:	d31c      	bcc.n	800c64a <_strtol_l.isra.0+0xb2>
 800c610:	d101      	bne.n	800c616 <_strtol_l.isra.0+0x7e>
 800c612:	45a6      	cmp	lr, r4
 800c614:	db19      	blt.n	800c64a <_strtol_l.isra.0+0xb2>
 800c616:	fb00 4006 	mla	r0, r0, r6, r4
 800c61a:	2701      	movs	r7, #1
 800c61c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c620:	e7eb      	b.n	800c5fa <_strtol_l.isra.0+0x62>
 800c622:	462f      	mov	r7, r5
 800c624:	e7bf      	b.n	800c5a6 <_strtol_l.isra.0+0xe>
 800c626:	2c2b      	cmp	r4, #43	; 0x2b
 800c628:	bf04      	itt	eq
 800c62a:	1cbd      	addeq	r5, r7, #2
 800c62c:	787c      	ldrbeq	r4, [r7, #1]
 800c62e:	461a      	mov	r2, r3
 800c630:	e7c9      	b.n	800c5c6 <_strtol_l.isra.0+0x2e>
 800c632:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c636:	2b19      	cmp	r3, #25
 800c638:	d801      	bhi.n	800c63e <_strtol_l.isra.0+0xa6>
 800c63a:	3c37      	subs	r4, #55	; 0x37
 800c63c:	e7e2      	b.n	800c604 <_strtol_l.isra.0+0x6c>
 800c63e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c642:	2b19      	cmp	r3, #25
 800c644:	d804      	bhi.n	800c650 <_strtol_l.isra.0+0xb8>
 800c646:	3c57      	subs	r4, #87	; 0x57
 800c648:	e7dc      	b.n	800c604 <_strtol_l.isra.0+0x6c>
 800c64a:	f04f 37ff 	mov.w	r7, #4294967295
 800c64e:	e7e5      	b.n	800c61c <_strtol_l.isra.0+0x84>
 800c650:	1c7b      	adds	r3, r7, #1
 800c652:	d108      	bne.n	800c666 <_strtol_l.isra.0+0xce>
 800c654:	2322      	movs	r3, #34	; 0x22
 800c656:	f8c8 3000 	str.w	r3, [r8]
 800c65a:	4608      	mov	r0, r1
 800c65c:	f1ba 0f00 	cmp.w	sl, #0
 800c660:	d107      	bne.n	800c672 <_strtol_l.isra.0+0xda>
 800c662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c666:	b102      	cbz	r2, 800c66a <_strtol_l.isra.0+0xd2>
 800c668:	4240      	negs	r0, r0
 800c66a:	f1ba 0f00 	cmp.w	sl, #0
 800c66e:	d0f8      	beq.n	800c662 <_strtol_l.isra.0+0xca>
 800c670:	b10f      	cbz	r7, 800c676 <_strtol_l.isra.0+0xde>
 800c672:	f105 39ff 	add.w	r9, r5, #4294967295
 800c676:	f8ca 9000 	str.w	r9, [sl]
 800c67a:	e7f2      	b.n	800c662 <_strtol_l.isra.0+0xca>
 800c67c:	2430      	movs	r4, #48	; 0x30
 800c67e:	2e00      	cmp	r6, #0
 800c680:	d1af      	bne.n	800c5e2 <_strtol_l.isra.0+0x4a>
 800c682:	2608      	movs	r6, #8
 800c684:	e7ad      	b.n	800c5e2 <_strtol_l.isra.0+0x4a>
 800c686:	2c30      	cmp	r4, #48	; 0x30
 800c688:	d0a3      	beq.n	800c5d2 <_strtol_l.isra.0+0x3a>
 800c68a:	260a      	movs	r6, #10
 800c68c:	e7a9      	b.n	800c5e2 <_strtol_l.isra.0+0x4a>
	...

0800c690 <strtol>:
 800c690:	4b08      	ldr	r3, [pc, #32]	; (800c6b4 <strtol+0x24>)
 800c692:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c694:	681c      	ldr	r4, [r3, #0]
 800c696:	4d08      	ldr	r5, [pc, #32]	; (800c6b8 <strtol+0x28>)
 800c698:	6a23      	ldr	r3, [r4, #32]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bf08      	it	eq
 800c69e:	462b      	moveq	r3, r5
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	460a      	mov	r2, r1
 800c6a6:	4601      	mov	r1, r0
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f7ff ff75 	bl	800c598 <_strtol_l.isra.0>
 800c6ae:	b003      	add	sp, #12
 800c6b0:	bd30      	pop	{r4, r5, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20000404 	.word	0x20000404
 800c6b8:	20000468 	.word	0x20000468

0800c6bc <_strtoll_l.isra.0>:
 800c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c0:	b089      	sub	sp, #36	; 0x24
 800c6c2:	468a      	mov	sl, r1
 800c6c4:	9007      	str	r0, [sp, #28]
 800c6c6:	4693      	mov	fp, r2
 800c6c8:	461f      	mov	r7, r3
 800c6ca:	4688      	mov	r8, r1
 800c6cc:	4645      	mov	r5, r8
 800c6ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c6d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6d4:	f000 fce6 	bl	800d0a4 <__locale_ctype_ptr_l>
 800c6d8:	4420      	add	r0, r4
 800c6da:	7846      	ldrb	r6, [r0, #1]
 800c6dc:	f016 0608 	ands.w	r6, r6, #8
 800c6e0:	d155      	bne.n	800c78e <_strtoll_l.isra.0+0xd2>
 800c6e2:	2c2d      	cmp	r4, #45	; 0x2d
 800c6e4:	d155      	bne.n	800c792 <_strtoll_l.isra.0+0xd6>
 800c6e6:	f898 4001 	ldrb.w	r4, [r8, #1]
 800c6ea:	f108 0502 	add.w	r5, r8, #2
 800c6ee:	2601      	movs	r6, #1
 800c6f0:	2f00      	cmp	r7, #0
 800c6f2:	f000 8091 	beq.w	800c818 <_strtoll_l.isra.0+0x15c>
 800c6f6:	2f10      	cmp	r7, #16
 800c6f8:	d10a      	bne.n	800c710 <_strtoll_l.isra.0+0x54>
 800c6fa:	2c30      	cmp	r4, #48	; 0x30
 800c6fc:	d108      	bne.n	800c710 <_strtoll_l.isra.0+0x54>
 800c6fe:	782b      	ldrb	r3, [r5, #0]
 800c700:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c704:	2b58      	cmp	r3, #88	; 0x58
 800c706:	f040 8081 	bne.w	800c80c <_strtoll_l.isra.0+0x150>
 800c70a:	786c      	ldrb	r4, [r5, #1]
 800c70c:	2710      	movs	r7, #16
 800c70e:	3502      	adds	r5, #2
 800c710:	2e00      	cmp	r6, #0
 800c712:	d145      	bne.n	800c7a0 <_strtoll_l.isra.0+0xe4>
 800c714:	f04f 39ff 	mov.w	r9, #4294967295
 800c718:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800c71c:	463a      	mov	r2, r7
 800c71e:	17fb      	asrs	r3, r7, #31
 800c720:	4648      	mov	r0, r9
 800c722:	4641      	mov	r1, r8
 800c724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c728:	f7f4 fa5a 	bl	8000be0 <__aeabi_uldivmod>
 800c72c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c730:	4696      	mov	lr, r2
 800c732:	2100      	movs	r1, #0
 800c734:	2200      	movs	r2, #0
 800c736:	e9cd 1200 	strd	r1, r2, [sp]
 800c73a:	2300      	movs	r3, #0
 800c73c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c740:	f1bc 0f09 	cmp.w	ip, #9
 800c744:	d831      	bhi.n	800c7aa <_strtoll_l.isra.0+0xee>
 800c746:	4664      	mov	r4, ip
 800c748:	42a7      	cmp	r7, r4
 800c74a:	dd3f      	ble.n	800c7cc <_strtoll_l.isra.0+0x110>
 800c74c:	1c59      	adds	r1, r3, #1
 800c74e:	d01b      	beq.n	800c788 <_strtoll_l.isra.0+0xcc>
 800c750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c754:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c758:	4299      	cmp	r1, r3
 800c75a:	bf08      	it	eq
 800c75c:	4290      	cmpeq	r0, r2
 800c75e:	d332      	bcc.n	800c7c6 <_strtoll_l.isra.0+0x10a>
 800c760:	d101      	bne.n	800c766 <_strtoll_l.isra.0+0xaa>
 800c762:	45a6      	cmp	lr, r4
 800c764:	db2f      	blt.n	800c7c6 <_strtoll_l.isra.0+0x10a>
 800c766:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 800c76a:	9800      	ldr	r0, [sp, #0]
 800c76c:	434b      	muls	r3, r1
 800c76e:	9903      	ldr	r1, [sp, #12]
 800c770:	fb00 3301 	mla	r3, r0, r1, r3
 800c774:	9902      	ldr	r1, [sp, #8]
 800c776:	fba1 0100 	umull	r0, r1, r1, r0
 800c77a:	1902      	adds	r2, r0, r4
 800c77c:	4419      	add	r1, r3
 800c77e:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 800c782:	e9cd 2300 	strd	r2, r3, [sp]
 800c786:	2301      	movs	r3, #1
 800c788:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c78c:	e7d6      	b.n	800c73c <_strtoll_l.isra.0+0x80>
 800c78e:	46a8      	mov	r8, r5
 800c790:	e79c      	b.n	800c6cc <_strtoll_l.isra.0+0x10>
 800c792:	2c2b      	cmp	r4, #43	; 0x2b
 800c794:	bf04      	itt	eq
 800c796:	f108 0502 	addeq.w	r5, r8, #2
 800c79a:	f898 4001 	ldrbeq.w	r4, [r8, #1]
 800c79e:	e7a7      	b.n	800c6f0 <_strtoll_l.isra.0+0x34>
 800c7a0:	f04f 0900 	mov.w	r9, #0
 800c7a4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c7a8:	e7b8      	b.n	800c71c <_strtoll_l.isra.0+0x60>
 800c7aa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c7ae:	f1bc 0f19 	cmp.w	ip, #25
 800c7b2:	d801      	bhi.n	800c7b8 <_strtoll_l.isra.0+0xfc>
 800c7b4:	3c37      	subs	r4, #55	; 0x37
 800c7b6:	e7c7      	b.n	800c748 <_strtoll_l.isra.0+0x8c>
 800c7b8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c7bc:	f1bc 0f19 	cmp.w	ip, #25
 800c7c0:	d804      	bhi.n	800c7cc <_strtoll_l.isra.0+0x110>
 800c7c2:	3c57      	subs	r4, #87	; 0x57
 800c7c4:	e7c0      	b.n	800c748 <_strtoll_l.isra.0+0x8c>
 800c7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ca:	e7dd      	b.n	800c788 <_strtoll_l.isra.0+0xcc>
 800c7cc:	1c5a      	adds	r2, r3, #1
 800c7ce:	d10c      	bne.n	800c7ea <_strtoll_l.isra.0+0x12e>
 800c7d0:	9a07      	ldr	r2, [sp, #28]
 800c7d2:	2322      	movs	r3, #34	; 0x22
 800c7d4:	6013      	str	r3, [r2, #0]
 800c7d6:	e9cd 9800 	strd	r9, r8, [sp]
 800c7da:	f1bb 0f00 	cmp.w	fp, #0
 800c7de:	d110      	bne.n	800c802 <_strtoll_l.isra.0+0x146>
 800c7e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7e4:	b009      	add	sp, #36	; 0x24
 800c7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ea:	b136      	cbz	r6, 800c7fa <_strtoll_l.isra.0+0x13e>
 800c7ec:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c7f0:	4249      	negs	r1, r1
 800c7f2:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 800c7f6:	e9cd 1200 	strd	r1, r2, [sp]
 800c7fa:	f1bb 0f00 	cmp.w	fp, #0
 800c7fe:	d0ef      	beq.n	800c7e0 <_strtoll_l.isra.0+0x124>
 800c800:	b10b      	cbz	r3, 800c806 <_strtoll_l.isra.0+0x14a>
 800c802:	f105 3aff 	add.w	sl, r5, #4294967295
 800c806:	f8cb a000 	str.w	sl, [fp]
 800c80a:	e7e9      	b.n	800c7e0 <_strtoll_l.isra.0+0x124>
 800c80c:	2430      	movs	r4, #48	; 0x30
 800c80e:	2f00      	cmp	r7, #0
 800c810:	f47f af7e 	bne.w	800c710 <_strtoll_l.isra.0+0x54>
 800c814:	2708      	movs	r7, #8
 800c816:	e77b      	b.n	800c710 <_strtoll_l.isra.0+0x54>
 800c818:	2c30      	cmp	r4, #48	; 0x30
 800c81a:	f43f af70 	beq.w	800c6fe <_strtoll_l.isra.0+0x42>
 800c81e:	270a      	movs	r7, #10
 800c820:	e776      	b.n	800c710 <_strtoll_l.isra.0+0x54>
	...

0800c824 <strtoll>:
 800c824:	4b08      	ldr	r3, [pc, #32]	; (800c848 <strtoll+0x24>)
 800c826:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c828:	681c      	ldr	r4, [r3, #0]
 800c82a:	4d08      	ldr	r5, [pc, #32]	; (800c84c <strtoll+0x28>)
 800c82c:	6a23      	ldr	r3, [r4, #32]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	bf08      	it	eq
 800c832:	462b      	moveq	r3, r5
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	4613      	mov	r3, r2
 800c838:	460a      	mov	r2, r1
 800c83a:	4601      	mov	r1, r0
 800c83c:	4620      	mov	r0, r4
 800c83e:	f7ff ff3d 	bl	800c6bc <_strtoll_l.isra.0>
 800c842:	b003      	add	sp, #12
 800c844:	bd30      	pop	{r4, r5, pc}
 800c846:	bf00      	nop
 800c848:	20000404 	.word	0x20000404
 800c84c:	20000468 	.word	0x20000468

0800c850 <__swbuf_r>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	460e      	mov	r6, r1
 800c854:	4614      	mov	r4, r2
 800c856:	4605      	mov	r5, r0
 800c858:	b118      	cbz	r0, 800c862 <__swbuf_r+0x12>
 800c85a:	6983      	ldr	r3, [r0, #24]
 800c85c:	b90b      	cbnz	r3, 800c862 <__swbuf_r+0x12>
 800c85e:	f7fe fd15 	bl	800b28c <__sinit>
 800c862:	4b21      	ldr	r3, [pc, #132]	; (800c8e8 <__swbuf_r+0x98>)
 800c864:	429c      	cmp	r4, r3
 800c866:	d12a      	bne.n	800c8be <__swbuf_r+0x6e>
 800c868:	686c      	ldr	r4, [r5, #4]
 800c86a:	69a3      	ldr	r3, [r4, #24]
 800c86c:	60a3      	str	r3, [r4, #8]
 800c86e:	89a3      	ldrh	r3, [r4, #12]
 800c870:	071a      	lsls	r2, r3, #28
 800c872:	d52e      	bpl.n	800c8d2 <__swbuf_r+0x82>
 800c874:	6923      	ldr	r3, [r4, #16]
 800c876:	b363      	cbz	r3, 800c8d2 <__swbuf_r+0x82>
 800c878:	6923      	ldr	r3, [r4, #16]
 800c87a:	6820      	ldr	r0, [r4, #0]
 800c87c:	1ac0      	subs	r0, r0, r3
 800c87e:	6963      	ldr	r3, [r4, #20]
 800c880:	b2f6      	uxtb	r6, r6
 800c882:	4283      	cmp	r3, r0
 800c884:	4637      	mov	r7, r6
 800c886:	dc04      	bgt.n	800c892 <__swbuf_r+0x42>
 800c888:	4621      	mov	r1, r4
 800c88a:	4628      	mov	r0, r5
 800c88c:	f7fe fc94 	bl	800b1b8 <_fflush_r>
 800c890:	bb28      	cbnz	r0, 800c8de <__swbuf_r+0x8e>
 800c892:	68a3      	ldr	r3, [r4, #8]
 800c894:	3b01      	subs	r3, #1
 800c896:	60a3      	str	r3, [r4, #8]
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	6022      	str	r2, [r4, #0]
 800c89e:	701e      	strb	r6, [r3, #0]
 800c8a0:	6963      	ldr	r3, [r4, #20]
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	4283      	cmp	r3, r0
 800c8a6:	d004      	beq.n	800c8b2 <__swbuf_r+0x62>
 800c8a8:	89a3      	ldrh	r3, [r4, #12]
 800c8aa:	07db      	lsls	r3, r3, #31
 800c8ac:	d519      	bpl.n	800c8e2 <__swbuf_r+0x92>
 800c8ae:	2e0a      	cmp	r6, #10
 800c8b0:	d117      	bne.n	800c8e2 <__swbuf_r+0x92>
 800c8b2:	4621      	mov	r1, r4
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	f7fe fc7f 	bl	800b1b8 <_fflush_r>
 800c8ba:	b190      	cbz	r0, 800c8e2 <__swbuf_r+0x92>
 800c8bc:	e00f      	b.n	800c8de <__swbuf_r+0x8e>
 800c8be:	4b0b      	ldr	r3, [pc, #44]	; (800c8ec <__swbuf_r+0x9c>)
 800c8c0:	429c      	cmp	r4, r3
 800c8c2:	d101      	bne.n	800c8c8 <__swbuf_r+0x78>
 800c8c4:	68ac      	ldr	r4, [r5, #8]
 800c8c6:	e7d0      	b.n	800c86a <__swbuf_r+0x1a>
 800c8c8:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <__swbuf_r+0xa0>)
 800c8ca:	429c      	cmp	r4, r3
 800c8cc:	bf08      	it	eq
 800c8ce:	68ec      	ldreq	r4, [r5, #12]
 800c8d0:	e7cb      	b.n	800c86a <__swbuf_r+0x1a>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f000 f81f 	bl	800c918 <__swsetup_r>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d0cc      	beq.n	800c878 <__swbuf_r+0x28>
 800c8de:	f04f 37ff 	mov.w	r7, #4294967295
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	08010378 	.word	0x08010378
 800c8ec:	08010398 	.word	0x08010398
 800c8f0:	08010358 	.word	0x08010358

0800c8f4 <_write_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4c07      	ldr	r4, [pc, #28]	; (800c914 <_write_r+0x20>)
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	4608      	mov	r0, r1
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	2200      	movs	r2, #0
 800c900:	6022      	str	r2, [r4, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	f7fb f849 	bl	800799a <_write>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_write_r+0x1e>
 800c90c:	6823      	ldr	r3, [r4, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_write_r+0x1e>
 800c910:	602b      	str	r3, [r5, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	200008e4 	.word	0x200008e4

0800c918 <__swsetup_r>:
 800c918:	4b32      	ldr	r3, [pc, #200]	; (800c9e4 <__swsetup_r+0xcc>)
 800c91a:	b570      	push	{r4, r5, r6, lr}
 800c91c:	681d      	ldr	r5, [r3, #0]
 800c91e:	4606      	mov	r6, r0
 800c920:	460c      	mov	r4, r1
 800c922:	b125      	cbz	r5, 800c92e <__swsetup_r+0x16>
 800c924:	69ab      	ldr	r3, [r5, #24]
 800c926:	b913      	cbnz	r3, 800c92e <__swsetup_r+0x16>
 800c928:	4628      	mov	r0, r5
 800c92a:	f7fe fcaf 	bl	800b28c <__sinit>
 800c92e:	4b2e      	ldr	r3, [pc, #184]	; (800c9e8 <__swsetup_r+0xd0>)
 800c930:	429c      	cmp	r4, r3
 800c932:	d10f      	bne.n	800c954 <__swsetup_r+0x3c>
 800c934:	686c      	ldr	r4, [r5, #4]
 800c936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	0715      	lsls	r5, r2, #28
 800c93e:	d42c      	bmi.n	800c99a <__swsetup_r+0x82>
 800c940:	06d0      	lsls	r0, r2, #27
 800c942:	d411      	bmi.n	800c968 <__swsetup_r+0x50>
 800c944:	2209      	movs	r2, #9
 800c946:	6032      	str	r2, [r6, #0]
 800c948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c94c:	81a3      	strh	r3, [r4, #12]
 800c94e:	f04f 30ff 	mov.w	r0, #4294967295
 800c952:	e03e      	b.n	800c9d2 <__swsetup_r+0xba>
 800c954:	4b25      	ldr	r3, [pc, #148]	; (800c9ec <__swsetup_r+0xd4>)
 800c956:	429c      	cmp	r4, r3
 800c958:	d101      	bne.n	800c95e <__swsetup_r+0x46>
 800c95a:	68ac      	ldr	r4, [r5, #8]
 800c95c:	e7eb      	b.n	800c936 <__swsetup_r+0x1e>
 800c95e:	4b24      	ldr	r3, [pc, #144]	; (800c9f0 <__swsetup_r+0xd8>)
 800c960:	429c      	cmp	r4, r3
 800c962:	bf08      	it	eq
 800c964:	68ec      	ldreq	r4, [r5, #12]
 800c966:	e7e6      	b.n	800c936 <__swsetup_r+0x1e>
 800c968:	0751      	lsls	r1, r2, #29
 800c96a:	d512      	bpl.n	800c992 <__swsetup_r+0x7a>
 800c96c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c96e:	b141      	cbz	r1, 800c982 <__swsetup_r+0x6a>
 800c970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c974:	4299      	cmp	r1, r3
 800c976:	d002      	beq.n	800c97e <__swsetup_r+0x66>
 800c978:	4630      	mov	r0, r6
 800c97a:	f7fe fde5 	bl	800b548 <_free_r>
 800c97e:	2300      	movs	r3, #0
 800c980:	6363      	str	r3, [r4, #52]	; 0x34
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c988:	81a3      	strh	r3, [r4, #12]
 800c98a:	2300      	movs	r3, #0
 800c98c:	6063      	str	r3, [r4, #4]
 800c98e:	6923      	ldr	r3, [r4, #16]
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	f043 0308 	orr.w	r3, r3, #8
 800c998:	81a3      	strh	r3, [r4, #12]
 800c99a:	6923      	ldr	r3, [r4, #16]
 800c99c:	b94b      	cbnz	r3, 800c9b2 <__swsetup_r+0x9a>
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9a8:	d003      	beq.n	800c9b2 <__swsetup_r+0x9a>
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7fe fd3f 	bl	800b430 <__smakebuf_r>
 800c9b2:	89a2      	ldrh	r2, [r4, #12]
 800c9b4:	f012 0301 	ands.w	r3, r2, #1
 800c9b8:	d00c      	beq.n	800c9d4 <__swsetup_r+0xbc>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60a3      	str	r3, [r4, #8]
 800c9be:	6963      	ldr	r3, [r4, #20]
 800c9c0:	425b      	negs	r3, r3
 800c9c2:	61a3      	str	r3, [r4, #24]
 800c9c4:	6923      	ldr	r3, [r4, #16]
 800c9c6:	b953      	cbnz	r3, 800c9de <__swsetup_r+0xc6>
 800c9c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c9d0:	d1ba      	bne.n	800c948 <__swsetup_r+0x30>
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	0792      	lsls	r2, r2, #30
 800c9d6:	bf58      	it	pl
 800c9d8:	6963      	ldrpl	r3, [r4, #20]
 800c9da:	60a3      	str	r3, [r4, #8]
 800c9dc:	e7f2      	b.n	800c9c4 <__swsetup_r+0xac>
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e7f7      	b.n	800c9d2 <__swsetup_r+0xba>
 800c9e2:	bf00      	nop
 800c9e4:	20000404 	.word	0x20000404
 800c9e8:	08010378 	.word	0x08010378
 800c9ec:	08010398 	.word	0x08010398
 800c9f0:	08010358 	.word	0x08010358

0800c9f4 <_close_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4c06      	ldr	r4, [pc, #24]	; (800ca10 <_close_r+0x1c>)
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	6023      	str	r3, [r4, #0]
 800ca00:	f7fa ffe7 	bl	80079d2 <_close>
 800ca04:	1c43      	adds	r3, r0, #1
 800ca06:	d102      	bne.n	800ca0e <_close_r+0x1a>
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	b103      	cbz	r3, 800ca0e <_close_r+0x1a>
 800ca0c:	602b      	str	r3, [r5, #0]
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
 800ca10:	200008e4 	.word	0x200008e4

0800ca14 <_fstat_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4c07      	ldr	r4, [pc, #28]	; (800ca34 <_fstat_r+0x20>)
 800ca18:	2300      	movs	r3, #0
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	4611      	mov	r1, r2
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	f7fa ffe2 	bl	80079ea <_fstat>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	d102      	bne.n	800ca30 <_fstat_r+0x1c>
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	b103      	cbz	r3, 800ca30 <_fstat_r+0x1c>
 800ca2e:	602b      	str	r3, [r5, #0]
 800ca30:	bd38      	pop	{r3, r4, r5, pc}
 800ca32:	bf00      	nop
 800ca34:	200008e4 	.word	0x200008e4

0800ca38 <rshift>:
 800ca38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca3a:	6906      	ldr	r6, [r0, #16]
 800ca3c:	114b      	asrs	r3, r1, #5
 800ca3e:	429e      	cmp	r6, r3
 800ca40:	f100 0414 	add.w	r4, r0, #20
 800ca44:	dd30      	ble.n	800caa8 <rshift+0x70>
 800ca46:	f011 011f 	ands.w	r1, r1, #31
 800ca4a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ca4e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ca52:	d108      	bne.n	800ca66 <rshift+0x2e>
 800ca54:	4621      	mov	r1, r4
 800ca56:	42b2      	cmp	r2, r6
 800ca58:	460b      	mov	r3, r1
 800ca5a:	d211      	bcs.n	800ca80 <rshift+0x48>
 800ca5c:	f852 3b04 	ldr.w	r3, [r2], #4
 800ca60:	f841 3b04 	str.w	r3, [r1], #4
 800ca64:	e7f7      	b.n	800ca56 <rshift+0x1e>
 800ca66:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ca6a:	f1c1 0c20 	rsb	ip, r1, #32
 800ca6e:	40cd      	lsrs	r5, r1
 800ca70:	3204      	adds	r2, #4
 800ca72:	4623      	mov	r3, r4
 800ca74:	42b2      	cmp	r2, r6
 800ca76:	4617      	mov	r7, r2
 800ca78:	d30c      	bcc.n	800ca94 <rshift+0x5c>
 800ca7a:	601d      	str	r5, [r3, #0]
 800ca7c:	b105      	cbz	r5, 800ca80 <rshift+0x48>
 800ca7e:	3304      	adds	r3, #4
 800ca80:	1b1a      	subs	r2, r3, r4
 800ca82:	42a3      	cmp	r3, r4
 800ca84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca88:	bf08      	it	eq
 800ca8a:	2300      	moveq	r3, #0
 800ca8c:	6102      	str	r2, [r0, #16]
 800ca8e:	bf08      	it	eq
 800ca90:	6143      	streq	r3, [r0, #20]
 800ca92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca94:	683f      	ldr	r7, [r7, #0]
 800ca96:	fa07 f70c 	lsl.w	r7, r7, ip
 800ca9a:	433d      	orrs	r5, r7
 800ca9c:	f843 5b04 	str.w	r5, [r3], #4
 800caa0:	f852 5b04 	ldr.w	r5, [r2], #4
 800caa4:	40cd      	lsrs	r5, r1
 800caa6:	e7e5      	b.n	800ca74 <rshift+0x3c>
 800caa8:	4623      	mov	r3, r4
 800caaa:	e7e9      	b.n	800ca80 <rshift+0x48>

0800caac <__hexdig_fun>:
 800caac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cab0:	2b09      	cmp	r3, #9
 800cab2:	d802      	bhi.n	800caba <__hexdig_fun+0xe>
 800cab4:	3820      	subs	r0, #32
 800cab6:	b2c0      	uxtb	r0, r0
 800cab8:	4770      	bx	lr
 800caba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cabe:	2b05      	cmp	r3, #5
 800cac0:	d801      	bhi.n	800cac6 <__hexdig_fun+0x1a>
 800cac2:	3847      	subs	r0, #71	; 0x47
 800cac4:	e7f7      	b.n	800cab6 <__hexdig_fun+0xa>
 800cac6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800caca:	2b05      	cmp	r3, #5
 800cacc:	d801      	bhi.n	800cad2 <__hexdig_fun+0x26>
 800cace:	3827      	subs	r0, #39	; 0x27
 800cad0:	e7f1      	b.n	800cab6 <__hexdig_fun+0xa>
 800cad2:	2000      	movs	r0, #0
 800cad4:	4770      	bx	lr

0800cad6 <__gethex>:
 800cad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cada:	b08b      	sub	sp, #44	; 0x2c
 800cadc:	468a      	mov	sl, r1
 800cade:	9002      	str	r0, [sp, #8]
 800cae0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cae2:	9306      	str	r3, [sp, #24]
 800cae4:	4690      	mov	r8, r2
 800cae6:	f000 fae0 	bl	800d0aa <__localeconv_l>
 800caea:	6803      	ldr	r3, [r0, #0]
 800caec:	9303      	str	r3, [sp, #12]
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f3 fbd0 	bl	8000294 <strlen>
 800caf4:	9b03      	ldr	r3, [sp, #12]
 800caf6:	9001      	str	r0, [sp, #4]
 800caf8:	4403      	add	r3, r0
 800cafa:	f04f 0b00 	mov.w	fp, #0
 800cafe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cb02:	9307      	str	r3, [sp, #28]
 800cb04:	f8da 3000 	ldr.w	r3, [sl]
 800cb08:	3302      	adds	r3, #2
 800cb0a:	461f      	mov	r7, r3
 800cb0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb10:	2830      	cmp	r0, #48	; 0x30
 800cb12:	d06c      	beq.n	800cbee <__gethex+0x118>
 800cb14:	f7ff ffca 	bl	800caac <__hexdig_fun>
 800cb18:	4604      	mov	r4, r0
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d16a      	bne.n	800cbf4 <__gethex+0x11e>
 800cb1e:	9a01      	ldr	r2, [sp, #4]
 800cb20:	9903      	ldr	r1, [sp, #12]
 800cb22:	4638      	mov	r0, r7
 800cb24:	f001 fb5a 	bl	800e1dc <strncmp>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d166      	bne.n	800cbfa <__gethex+0x124>
 800cb2c:	9b01      	ldr	r3, [sp, #4]
 800cb2e:	5cf8      	ldrb	r0, [r7, r3]
 800cb30:	18fe      	adds	r6, r7, r3
 800cb32:	f7ff ffbb 	bl	800caac <__hexdig_fun>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d062      	beq.n	800cc00 <__gethex+0x12a>
 800cb3a:	4633      	mov	r3, r6
 800cb3c:	7818      	ldrb	r0, [r3, #0]
 800cb3e:	2830      	cmp	r0, #48	; 0x30
 800cb40:	461f      	mov	r7, r3
 800cb42:	f103 0301 	add.w	r3, r3, #1
 800cb46:	d0f9      	beq.n	800cb3c <__gethex+0x66>
 800cb48:	f7ff ffb0 	bl	800caac <__hexdig_fun>
 800cb4c:	fab0 f580 	clz	r5, r0
 800cb50:	096d      	lsrs	r5, r5, #5
 800cb52:	4634      	mov	r4, r6
 800cb54:	f04f 0b01 	mov.w	fp, #1
 800cb58:	463a      	mov	r2, r7
 800cb5a:	4616      	mov	r6, r2
 800cb5c:	3201      	adds	r2, #1
 800cb5e:	7830      	ldrb	r0, [r6, #0]
 800cb60:	f7ff ffa4 	bl	800caac <__hexdig_fun>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d1f8      	bne.n	800cb5a <__gethex+0x84>
 800cb68:	9a01      	ldr	r2, [sp, #4]
 800cb6a:	9903      	ldr	r1, [sp, #12]
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f001 fb35 	bl	800e1dc <strncmp>
 800cb72:	b950      	cbnz	r0, 800cb8a <__gethex+0xb4>
 800cb74:	b954      	cbnz	r4, 800cb8c <__gethex+0xb6>
 800cb76:	9b01      	ldr	r3, [sp, #4]
 800cb78:	18f4      	adds	r4, r6, r3
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	4616      	mov	r6, r2
 800cb7e:	3201      	adds	r2, #1
 800cb80:	7830      	ldrb	r0, [r6, #0]
 800cb82:	f7ff ff93 	bl	800caac <__hexdig_fun>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d1f8      	bne.n	800cb7c <__gethex+0xa6>
 800cb8a:	b10c      	cbz	r4, 800cb90 <__gethex+0xba>
 800cb8c:	1ba4      	subs	r4, r4, r6
 800cb8e:	00a4      	lsls	r4, r4, #2
 800cb90:	7833      	ldrb	r3, [r6, #0]
 800cb92:	2b50      	cmp	r3, #80	; 0x50
 800cb94:	d001      	beq.n	800cb9a <__gethex+0xc4>
 800cb96:	2b70      	cmp	r3, #112	; 0x70
 800cb98:	d140      	bne.n	800cc1c <__gethex+0x146>
 800cb9a:	7873      	ldrb	r3, [r6, #1]
 800cb9c:	2b2b      	cmp	r3, #43	; 0x2b
 800cb9e:	d031      	beq.n	800cc04 <__gethex+0x12e>
 800cba0:	2b2d      	cmp	r3, #45	; 0x2d
 800cba2:	d033      	beq.n	800cc0c <__gethex+0x136>
 800cba4:	1c71      	adds	r1, r6, #1
 800cba6:	f04f 0900 	mov.w	r9, #0
 800cbaa:	7808      	ldrb	r0, [r1, #0]
 800cbac:	f7ff ff7e 	bl	800caac <__hexdig_fun>
 800cbb0:	1e43      	subs	r3, r0, #1
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b18      	cmp	r3, #24
 800cbb6:	d831      	bhi.n	800cc1c <__gethex+0x146>
 800cbb8:	f1a0 0210 	sub.w	r2, r0, #16
 800cbbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cbc0:	f7ff ff74 	bl	800caac <__hexdig_fun>
 800cbc4:	1e43      	subs	r3, r0, #1
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	2b18      	cmp	r3, #24
 800cbca:	d922      	bls.n	800cc12 <__gethex+0x13c>
 800cbcc:	f1b9 0f00 	cmp.w	r9, #0
 800cbd0:	d000      	beq.n	800cbd4 <__gethex+0xfe>
 800cbd2:	4252      	negs	r2, r2
 800cbd4:	4414      	add	r4, r2
 800cbd6:	f8ca 1000 	str.w	r1, [sl]
 800cbda:	b30d      	cbz	r5, 800cc20 <__gethex+0x14a>
 800cbdc:	f1bb 0f00 	cmp.w	fp, #0
 800cbe0:	bf0c      	ite	eq
 800cbe2:	2706      	moveq	r7, #6
 800cbe4:	2700      	movne	r7, #0
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	b00b      	add	sp, #44	; 0x2c
 800cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbee:	f10b 0b01 	add.w	fp, fp, #1
 800cbf2:	e78a      	b.n	800cb0a <__gethex+0x34>
 800cbf4:	2500      	movs	r5, #0
 800cbf6:	462c      	mov	r4, r5
 800cbf8:	e7ae      	b.n	800cb58 <__gethex+0x82>
 800cbfa:	463e      	mov	r6, r7
 800cbfc:	2501      	movs	r5, #1
 800cbfe:	e7c7      	b.n	800cb90 <__gethex+0xba>
 800cc00:	4604      	mov	r4, r0
 800cc02:	e7fb      	b.n	800cbfc <__gethex+0x126>
 800cc04:	f04f 0900 	mov.w	r9, #0
 800cc08:	1cb1      	adds	r1, r6, #2
 800cc0a:	e7ce      	b.n	800cbaa <__gethex+0xd4>
 800cc0c:	f04f 0901 	mov.w	r9, #1
 800cc10:	e7fa      	b.n	800cc08 <__gethex+0x132>
 800cc12:	230a      	movs	r3, #10
 800cc14:	fb03 0202 	mla	r2, r3, r2, r0
 800cc18:	3a10      	subs	r2, #16
 800cc1a:	e7cf      	b.n	800cbbc <__gethex+0xe6>
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	e7da      	b.n	800cbd6 <__gethex+0x100>
 800cc20:	1bf3      	subs	r3, r6, r7
 800cc22:	3b01      	subs	r3, #1
 800cc24:	4629      	mov	r1, r5
 800cc26:	2b07      	cmp	r3, #7
 800cc28:	dc49      	bgt.n	800ccbe <__gethex+0x1e8>
 800cc2a:	9802      	ldr	r0, [sp, #8]
 800cc2c:	f000 fa66 	bl	800d0fc <_Balloc>
 800cc30:	9b01      	ldr	r3, [sp, #4]
 800cc32:	f100 0914 	add.w	r9, r0, #20
 800cc36:	f04f 0b00 	mov.w	fp, #0
 800cc3a:	f1c3 0301 	rsb	r3, r3, #1
 800cc3e:	4605      	mov	r5, r0
 800cc40:	f8cd 9010 	str.w	r9, [sp, #16]
 800cc44:	46da      	mov	sl, fp
 800cc46:	9308      	str	r3, [sp, #32]
 800cc48:	42b7      	cmp	r7, r6
 800cc4a:	d33b      	bcc.n	800ccc4 <__gethex+0x1ee>
 800cc4c:	9804      	ldr	r0, [sp, #16]
 800cc4e:	f840 ab04 	str.w	sl, [r0], #4
 800cc52:	eba0 0009 	sub.w	r0, r0, r9
 800cc56:	1080      	asrs	r0, r0, #2
 800cc58:	6128      	str	r0, [r5, #16]
 800cc5a:	0147      	lsls	r7, r0, #5
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	f000 fb11 	bl	800d284 <__hi0bits>
 800cc62:	f8d8 6000 	ldr.w	r6, [r8]
 800cc66:	1a3f      	subs	r7, r7, r0
 800cc68:	42b7      	cmp	r7, r6
 800cc6a:	dd64      	ble.n	800cd36 <__gethex+0x260>
 800cc6c:	1bbf      	subs	r7, r7, r6
 800cc6e:	4639      	mov	r1, r7
 800cc70:	4628      	mov	r0, r5
 800cc72:	f000 fe21 	bl	800d8b8 <__any_on>
 800cc76:	4682      	mov	sl, r0
 800cc78:	b178      	cbz	r0, 800cc9a <__gethex+0x1c4>
 800cc7a:	1e7b      	subs	r3, r7, #1
 800cc7c:	1159      	asrs	r1, r3, #5
 800cc7e:	f003 021f 	and.w	r2, r3, #31
 800cc82:	f04f 0a01 	mov.w	sl, #1
 800cc86:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cc8a:	fa0a f202 	lsl.w	r2, sl, r2
 800cc8e:	420a      	tst	r2, r1
 800cc90:	d003      	beq.n	800cc9a <__gethex+0x1c4>
 800cc92:	4553      	cmp	r3, sl
 800cc94:	dc46      	bgt.n	800cd24 <__gethex+0x24e>
 800cc96:	f04f 0a02 	mov.w	sl, #2
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	f7ff fecb 	bl	800ca38 <rshift>
 800cca2:	443c      	add	r4, r7
 800cca4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cca8:	42a3      	cmp	r3, r4
 800ccaa:	da52      	bge.n	800cd52 <__gethex+0x27c>
 800ccac:	4629      	mov	r1, r5
 800ccae:	9802      	ldr	r0, [sp, #8]
 800ccb0:	f000 fa58 	bl	800d164 <_Bfree>
 800ccb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	27a3      	movs	r7, #163	; 0xa3
 800ccbc:	e793      	b.n	800cbe6 <__gethex+0x110>
 800ccbe:	3101      	adds	r1, #1
 800ccc0:	105b      	asrs	r3, r3, #1
 800ccc2:	e7b0      	b.n	800cc26 <__gethex+0x150>
 800ccc4:	1e73      	subs	r3, r6, #1
 800ccc6:	9305      	str	r3, [sp, #20]
 800ccc8:	9a07      	ldr	r2, [sp, #28]
 800ccca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d018      	beq.n	800cd04 <__gethex+0x22e>
 800ccd2:	f1bb 0f20 	cmp.w	fp, #32
 800ccd6:	d107      	bne.n	800cce8 <__gethex+0x212>
 800ccd8:	9b04      	ldr	r3, [sp, #16]
 800ccda:	f8c3 a000 	str.w	sl, [r3]
 800ccde:	3304      	adds	r3, #4
 800cce0:	f04f 0a00 	mov.w	sl, #0
 800cce4:	9304      	str	r3, [sp, #16]
 800cce6:	46d3      	mov	fp, sl
 800cce8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ccec:	f7ff fede 	bl	800caac <__hexdig_fun>
 800ccf0:	f000 000f 	and.w	r0, r0, #15
 800ccf4:	fa00 f00b 	lsl.w	r0, r0, fp
 800ccf8:	ea4a 0a00 	orr.w	sl, sl, r0
 800ccfc:	f10b 0b04 	add.w	fp, fp, #4
 800cd00:	9b05      	ldr	r3, [sp, #20]
 800cd02:	e00d      	b.n	800cd20 <__gethex+0x24a>
 800cd04:	9b05      	ldr	r3, [sp, #20]
 800cd06:	9a08      	ldr	r2, [sp, #32]
 800cd08:	4413      	add	r3, r2
 800cd0a:	42bb      	cmp	r3, r7
 800cd0c:	d3e1      	bcc.n	800ccd2 <__gethex+0x1fc>
 800cd0e:	4618      	mov	r0, r3
 800cd10:	9a01      	ldr	r2, [sp, #4]
 800cd12:	9903      	ldr	r1, [sp, #12]
 800cd14:	9309      	str	r3, [sp, #36]	; 0x24
 800cd16:	f001 fa61 	bl	800e1dc <strncmp>
 800cd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d1d8      	bne.n	800ccd2 <__gethex+0x1fc>
 800cd20:	461e      	mov	r6, r3
 800cd22:	e791      	b.n	800cc48 <__gethex+0x172>
 800cd24:	1eb9      	subs	r1, r7, #2
 800cd26:	4628      	mov	r0, r5
 800cd28:	f000 fdc6 	bl	800d8b8 <__any_on>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d0b2      	beq.n	800cc96 <__gethex+0x1c0>
 800cd30:	f04f 0a03 	mov.w	sl, #3
 800cd34:	e7b1      	b.n	800cc9a <__gethex+0x1c4>
 800cd36:	da09      	bge.n	800cd4c <__gethex+0x276>
 800cd38:	1bf7      	subs	r7, r6, r7
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	463a      	mov	r2, r7
 800cd3e:	9802      	ldr	r0, [sp, #8]
 800cd40:	f000 fbdc 	bl	800d4fc <__lshift>
 800cd44:	1be4      	subs	r4, r4, r7
 800cd46:	4605      	mov	r5, r0
 800cd48:	f100 0914 	add.w	r9, r0, #20
 800cd4c:	f04f 0a00 	mov.w	sl, #0
 800cd50:	e7a8      	b.n	800cca4 <__gethex+0x1ce>
 800cd52:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cd56:	42a0      	cmp	r0, r4
 800cd58:	dd6a      	ble.n	800ce30 <__gethex+0x35a>
 800cd5a:	1b04      	subs	r4, r0, r4
 800cd5c:	42a6      	cmp	r6, r4
 800cd5e:	dc2e      	bgt.n	800cdbe <__gethex+0x2e8>
 800cd60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d022      	beq.n	800cdae <__gethex+0x2d8>
 800cd68:	2b03      	cmp	r3, #3
 800cd6a:	d024      	beq.n	800cdb6 <__gethex+0x2e0>
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d115      	bne.n	800cd9c <__gethex+0x2c6>
 800cd70:	42a6      	cmp	r6, r4
 800cd72:	d113      	bne.n	800cd9c <__gethex+0x2c6>
 800cd74:	2e01      	cmp	r6, #1
 800cd76:	dc0b      	bgt.n	800cd90 <__gethex+0x2ba>
 800cd78:	9a06      	ldr	r2, [sp, #24]
 800cd7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	2301      	movs	r3, #1
 800cd82:	612b      	str	r3, [r5, #16]
 800cd84:	f8c9 3000 	str.w	r3, [r9]
 800cd88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd8a:	2762      	movs	r7, #98	; 0x62
 800cd8c:	601d      	str	r5, [r3, #0]
 800cd8e:	e72a      	b.n	800cbe6 <__gethex+0x110>
 800cd90:	1e71      	subs	r1, r6, #1
 800cd92:	4628      	mov	r0, r5
 800cd94:	f000 fd90 	bl	800d8b8 <__any_on>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d1ed      	bne.n	800cd78 <__gethex+0x2a2>
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	9802      	ldr	r0, [sp, #8]
 800cda0:	f000 f9e0 	bl	800d164 <_Bfree>
 800cda4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cda6:	2300      	movs	r3, #0
 800cda8:	6013      	str	r3, [r2, #0]
 800cdaa:	2750      	movs	r7, #80	; 0x50
 800cdac:	e71b      	b.n	800cbe6 <__gethex+0x110>
 800cdae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0e1      	beq.n	800cd78 <__gethex+0x2a2>
 800cdb4:	e7f2      	b.n	800cd9c <__gethex+0x2c6>
 800cdb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1dd      	bne.n	800cd78 <__gethex+0x2a2>
 800cdbc:	e7ee      	b.n	800cd9c <__gethex+0x2c6>
 800cdbe:	1e67      	subs	r7, r4, #1
 800cdc0:	f1ba 0f00 	cmp.w	sl, #0
 800cdc4:	d131      	bne.n	800ce2a <__gethex+0x354>
 800cdc6:	b127      	cbz	r7, 800cdd2 <__gethex+0x2fc>
 800cdc8:	4639      	mov	r1, r7
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f000 fd74 	bl	800d8b8 <__any_on>
 800cdd0:	4682      	mov	sl, r0
 800cdd2:	117a      	asrs	r2, r7, #5
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	f007 071f 	and.w	r7, r7, #31
 800cdda:	fa03 f707 	lsl.w	r7, r3, r7
 800cdde:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800cde2:	4621      	mov	r1, r4
 800cde4:	421f      	tst	r7, r3
 800cde6:	4628      	mov	r0, r5
 800cde8:	bf18      	it	ne
 800cdea:	f04a 0a02 	orrne.w	sl, sl, #2
 800cdee:	1b36      	subs	r6, r6, r4
 800cdf0:	f7ff fe22 	bl	800ca38 <rshift>
 800cdf4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800cdf8:	2702      	movs	r7, #2
 800cdfa:	f1ba 0f00 	cmp.w	sl, #0
 800cdfe:	d048      	beq.n	800ce92 <__gethex+0x3bc>
 800ce00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d015      	beq.n	800ce34 <__gethex+0x35e>
 800ce08:	2b03      	cmp	r3, #3
 800ce0a:	d017      	beq.n	800ce3c <__gethex+0x366>
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d109      	bne.n	800ce24 <__gethex+0x34e>
 800ce10:	f01a 0f02 	tst.w	sl, #2
 800ce14:	d006      	beq.n	800ce24 <__gethex+0x34e>
 800ce16:	f8d9 3000 	ldr.w	r3, [r9]
 800ce1a:	ea4a 0a03 	orr.w	sl, sl, r3
 800ce1e:	f01a 0f01 	tst.w	sl, #1
 800ce22:	d10e      	bne.n	800ce42 <__gethex+0x36c>
 800ce24:	f047 0710 	orr.w	r7, r7, #16
 800ce28:	e033      	b.n	800ce92 <__gethex+0x3bc>
 800ce2a:	f04f 0a01 	mov.w	sl, #1
 800ce2e:	e7d0      	b.n	800cdd2 <__gethex+0x2fc>
 800ce30:	2701      	movs	r7, #1
 800ce32:	e7e2      	b.n	800cdfa <__gethex+0x324>
 800ce34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce36:	f1c3 0301 	rsb	r3, r3, #1
 800ce3a:	9315      	str	r3, [sp, #84]	; 0x54
 800ce3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d0f0      	beq.n	800ce24 <__gethex+0x34e>
 800ce42:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ce46:	f105 0314 	add.w	r3, r5, #20
 800ce4a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ce4e:	eb03 010a 	add.w	r1, r3, sl
 800ce52:	f04f 0c00 	mov.w	ip, #0
 800ce56:	4618      	mov	r0, r3
 800ce58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce60:	d01c      	beq.n	800ce9c <__gethex+0x3c6>
 800ce62:	3201      	adds	r2, #1
 800ce64:	6002      	str	r2, [r0, #0]
 800ce66:	2f02      	cmp	r7, #2
 800ce68:	f105 0314 	add.w	r3, r5, #20
 800ce6c:	d138      	bne.n	800cee0 <__gethex+0x40a>
 800ce6e:	f8d8 2000 	ldr.w	r2, [r8]
 800ce72:	3a01      	subs	r2, #1
 800ce74:	42b2      	cmp	r2, r6
 800ce76:	d10a      	bne.n	800ce8e <__gethex+0x3b8>
 800ce78:	1171      	asrs	r1, r6, #5
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f006 061f 	and.w	r6, r6, #31
 800ce80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce84:	fa02 f606 	lsl.w	r6, r2, r6
 800ce88:	421e      	tst	r6, r3
 800ce8a:	bf18      	it	ne
 800ce8c:	4617      	movne	r7, r2
 800ce8e:	f047 0720 	orr.w	r7, r7, #32
 800ce92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce94:	601d      	str	r5, [r3, #0]
 800ce96:	9b06      	ldr	r3, [sp, #24]
 800ce98:	601c      	str	r4, [r3, #0]
 800ce9a:	e6a4      	b.n	800cbe6 <__gethex+0x110>
 800ce9c:	4299      	cmp	r1, r3
 800ce9e:	f843 cc04 	str.w	ip, [r3, #-4]
 800cea2:	d8d8      	bhi.n	800ce56 <__gethex+0x380>
 800cea4:	68ab      	ldr	r3, [r5, #8]
 800cea6:	4599      	cmp	r9, r3
 800cea8:	db12      	blt.n	800ced0 <__gethex+0x3fa>
 800ceaa:	6869      	ldr	r1, [r5, #4]
 800ceac:	9802      	ldr	r0, [sp, #8]
 800ceae:	3101      	adds	r1, #1
 800ceb0:	f000 f924 	bl	800d0fc <_Balloc>
 800ceb4:	692a      	ldr	r2, [r5, #16]
 800ceb6:	3202      	adds	r2, #2
 800ceb8:	f105 010c 	add.w	r1, r5, #12
 800cebc:	4683      	mov	fp, r0
 800cebe:	0092      	lsls	r2, r2, #2
 800cec0:	300c      	adds	r0, #12
 800cec2:	f7fe fb14 	bl	800b4ee <memcpy>
 800cec6:	4629      	mov	r1, r5
 800cec8:	9802      	ldr	r0, [sp, #8]
 800ceca:	f000 f94b 	bl	800d164 <_Bfree>
 800cece:	465d      	mov	r5, fp
 800ced0:	692b      	ldr	r3, [r5, #16]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ced8:	612a      	str	r2, [r5, #16]
 800ceda:	2201      	movs	r2, #1
 800cedc:	615a      	str	r2, [r3, #20]
 800cede:	e7c2      	b.n	800ce66 <__gethex+0x390>
 800cee0:	692a      	ldr	r2, [r5, #16]
 800cee2:	454a      	cmp	r2, r9
 800cee4:	dd0b      	ble.n	800cefe <__gethex+0x428>
 800cee6:	2101      	movs	r1, #1
 800cee8:	4628      	mov	r0, r5
 800ceea:	f7ff fda5 	bl	800ca38 <rshift>
 800ceee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cef2:	3401      	adds	r4, #1
 800cef4:	42a3      	cmp	r3, r4
 800cef6:	f6ff aed9 	blt.w	800ccac <__gethex+0x1d6>
 800cefa:	2701      	movs	r7, #1
 800cefc:	e7c7      	b.n	800ce8e <__gethex+0x3b8>
 800cefe:	f016 061f 	ands.w	r6, r6, #31
 800cf02:	d0fa      	beq.n	800cefa <__gethex+0x424>
 800cf04:	449a      	add	sl, r3
 800cf06:	f1c6 0620 	rsb	r6, r6, #32
 800cf0a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cf0e:	f000 f9b9 	bl	800d284 <__hi0bits>
 800cf12:	42b0      	cmp	r0, r6
 800cf14:	dbe7      	blt.n	800cee6 <__gethex+0x410>
 800cf16:	e7f0      	b.n	800cefa <__gethex+0x424>

0800cf18 <L_shift>:
 800cf18:	f1c2 0208 	rsb	r2, r2, #8
 800cf1c:	0092      	lsls	r2, r2, #2
 800cf1e:	b570      	push	{r4, r5, r6, lr}
 800cf20:	f1c2 0620 	rsb	r6, r2, #32
 800cf24:	6843      	ldr	r3, [r0, #4]
 800cf26:	6804      	ldr	r4, [r0, #0]
 800cf28:	fa03 f506 	lsl.w	r5, r3, r6
 800cf2c:	432c      	orrs	r4, r5
 800cf2e:	40d3      	lsrs	r3, r2
 800cf30:	6004      	str	r4, [r0, #0]
 800cf32:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf36:	4288      	cmp	r0, r1
 800cf38:	d3f4      	bcc.n	800cf24 <L_shift+0xc>
 800cf3a:	bd70      	pop	{r4, r5, r6, pc}

0800cf3c <__match>:
 800cf3c:	b530      	push	{r4, r5, lr}
 800cf3e:	6803      	ldr	r3, [r0, #0]
 800cf40:	3301      	adds	r3, #1
 800cf42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf46:	b914      	cbnz	r4, 800cf4e <__match+0x12>
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	2001      	movs	r0, #1
 800cf4c:	bd30      	pop	{r4, r5, pc}
 800cf4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf56:	2d19      	cmp	r5, #25
 800cf58:	bf98      	it	ls
 800cf5a:	3220      	addls	r2, #32
 800cf5c:	42a2      	cmp	r2, r4
 800cf5e:	d0f0      	beq.n	800cf42 <__match+0x6>
 800cf60:	2000      	movs	r0, #0
 800cf62:	e7f3      	b.n	800cf4c <__match+0x10>

0800cf64 <__hexnan>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	680b      	ldr	r3, [r1, #0]
 800cf6a:	6801      	ldr	r1, [r0, #0]
 800cf6c:	115f      	asrs	r7, r3, #5
 800cf6e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cf72:	f013 031f 	ands.w	r3, r3, #31
 800cf76:	b087      	sub	sp, #28
 800cf78:	bf18      	it	ne
 800cf7a:	3704      	addne	r7, #4
 800cf7c:	2500      	movs	r5, #0
 800cf7e:	1f3e      	subs	r6, r7, #4
 800cf80:	4682      	mov	sl, r0
 800cf82:	4690      	mov	r8, r2
 800cf84:	9301      	str	r3, [sp, #4]
 800cf86:	f847 5c04 	str.w	r5, [r7, #-4]
 800cf8a:	46b1      	mov	r9, r6
 800cf8c:	4634      	mov	r4, r6
 800cf8e:	9502      	str	r5, [sp, #8]
 800cf90:	46ab      	mov	fp, r5
 800cf92:	784a      	ldrb	r2, [r1, #1]
 800cf94:	1c4b      	adds	r3, r1, #1
 800cf96:	9303      	str	r3, [sp, #12]
 800cf98:	b342      	cbz	r2, 800cfec <__hexnan+0x88>
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	9105      	str	r1, [sp, #20]
 800cf9e:	9204      	str	r2, [sp, #16]
 800cfa0:	f7ff fd84 	bl	800caac <__hexdig_fun>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d143      	bne.n	800d030 <__hexnan+0xcc>
 800cfa8:	9a04      	ldr	r2, [sp, #16]
 800cfaa:	9905      	ldr	r1, [sp, #20]
 800cfac:	2a20      	cmp	r2, #32
 800cfae:	d818      	bhi.n	800cfe2 <__hexnan+0x7e>
 800cfb0:	9b02      	ldr	r3, [sp, #8]
 800cfb2:	459b      	cmp	fp, r3
 800cfb4:	dd13      	ble.n	800cfde <__hexnan+0x7a>
 800cfb6:	454c      	cmp	r4, r9
 800cfb8:	d206      	bcs.n	800cfc8 <__hexnan+0x64>
 800cfba:	2d07      	cmp	r5, #7
 800cfbc:	dc04      	bgt.n	800cfc8 <__hexnan+0x64>
 800cfbe:	462a      	mov	r2, r5
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f7ff ffa8 	bl	800cf18 <L_shift>
 800cfc8:	4544      	cmp	r4, r8
 800cfca:	d944      	bls.n	800d056 <__hexnan+0xf2>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f1a4 0904 	sub.w	r9, r4, #4
 800cfd2:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfd6:	f8cd b008 	str.w	fp, [sp, #8]
 800cfda:	464c      	mov	r4, r9
 800cfdc:	461d      	mov	r5, r3
 800cfde:	9903      	ldr	r1, [sp, #12]
 800cfe0:	e7d7      	b.n	800cf92 <__hexnan+0x2e>
 800cfe2:	2a29      	cmp	r2, #41	; 0x29
 800cfe4:	d14a      	bne.n	800d07c <__hexnan+0x118>
 800cfe6:	3102      	adds	r1, #2
 800cfe8:	f8ca 1000 	str.w	r1, [sl]
 800cfec:	f1bb 0f00 	cmp.w	fp, #0
 800cff0:	d044      	beq.n	800d07c <__hexnan+0x118>
 800cff2:	454c      	cmp	r4, r9
 800cff4:	d206      	bcs.n	800d004 <__hexnan+0xa0>
 800cff6:	2d07      	cmp	r5, #7
 800cff8:	dc04      	bgt.n	800d004 <__hexnan+0xa0>
 800cffa:	462a      	mov	r2, r5
 800cffc:	4649      	mov	r1, r9
 800cffe:	4620      	mov	r0, r4
 800d000:	f7ff ff8a 	bl	800cf18 <L_shift>
 800d004:	4544      	cmp	r4, r8
 800d006:	d928      	bls.n	800d05a <__hexnan+0xf6>
 800d008:	4643      	mov	r3, r8
 800d00a:	f854 2b04 	ldr.w	r2, [r4], #4
 800d00e:	f843 2b04 	str.w	r2, [r3], #4
 800d012:	42a6      	cmp	r6, r4
 800d014:	d2f9      	bcs.n	800d00a <__hexnan+0xa6>
 800d016:	2200      	movs	r2, #0
 800d018:	f843 2b04 	str.w	r2, [r3], #4
 800d01c:	429e      	cmp	r6, r3
 800d01e:	d2fb      	bcs.n	800d018 <__hexnan+0xb4>
 800d020:	6833      	ldr	r3, [r6, #0]
 800d022:	b91b      	cbnz	r3, 800d02c <__hexnan+0xc8>
 800d024:	4546      	cmp	r6, r8
 800d026:	d127      	bne.n	800d078 <__hexnan+0x114>
 800d028:	2301      	movs	r3, #1
 800d02a:	6033      	str	r3, [r6, #0]
 800d02c:	2005      	movs	r0, #5
 800d02e:	e026      	b.n	800d07e <__hexnan+0x11a>
 800d030:	3501      	adds	r5, #1
 800d032:	2d08      	cmp	r5, #8
 800d034:	f10b 0b01 	add.w	fp, fp, #1
 800d038:	dd06      	ble.n	800d048 <__hexnan+0xe4>
 800d03a:	4544      	cmp	r4, r8
 800d03c:	d9cf      	bls.n	800cfde <__hexnan+0x7a>
 800d03e:	2300      	movs	r3, #0
 800d040:	f844 3c04 	str.w	r3, [r4, #-4]
 800d044:	2501      	movs	r5, #1
 800d046:	3c04      	subs	r4, #4
 800d048:	6822      	ldr	r2, [r4, #0]
 800d04a:	f000 000f 	and.w	r0, r0, #15
 800d04e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d052:	6020      	str	r0, [r4, #0]
 800d054:	e7c3      	b.n	800cfde <__hexnan+0x7a>
 800d056:	2508      	movs	r5, #8
 800d058:	e7c1      	b.n	800cfde <__hexnan+0x7a>
 800d05a:	9b01      	ldr	r3, [sp, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d0df      	beq.n	800d020 <__hexnan+0xbc>
 800d060:	f04f 32ff 	mov.w	r2, #4294967295
 800d064:	f1c3 0320 	rsb	r3, r3, #32
 800d068:	fa22 f303 	lsr.w	r3, r2, r3
 800d06c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d070:	401a      	ands	r2, r3
 800d072:	f847 2c04 	str.w	r2, [r7, #-4]
 800d076:	e7d3      	b.n	800d020 <__hexnan+0xbc>
 800d078:	3e04      	subs	r6, #4
 800d07a:	e7d1      	b.n	800d020 <__hexnan+0xbc>
 800d07c:	2004      	movs	r0, #4
 800d07e:	b007      	add	sp, #28
 800d080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d084 <_isatty_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4c06      	ldr	r4, [pc, #24]	; (800d0a0 <_isatty_r+0x1c>)
 800d088:	2300      	movs	r3, #0
 800d08a:	4605      	mov	r5, r0
 800d08c:	4608      	mov	r0, r1
 800d08e:	6023      	str	r3, [r4, #0]
 800d090:	f7fa fcbb 	bl	8007a0a <_isatty>
 800d094:	1c43      	adds	r3, r0, #1
 800d096:	d102      	bne.n	800d09e <_isatty_r+0x1a>
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	b103      	cbz	r3, 800d09e <_isatty_r+0x1a>
 800d09c:	602b      	str	r3, [r5, #0]
 800d09e:	bd38      	pop	{r3, r4, r5, pc}
 800d0a0:	200008e4 	.word	0x200008e4

0800d0a4 <__locale_ctype_ptr_l>:
 800d0a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d0a8:	4770      	bx	lr

0800d0aa <__localeconv_l>:
 800d0aa:	30f0      	adds	r0, #240	; 0xf0
 800d0ac:	4770      	bx	lr
	...

0800d0b0 <_lseek_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4c07      	ldr	r4, [pc, #28]	; (800d0d0 <_lseek_r+0x20>)
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	4608      	mov	r0, r1
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	6022      	str	r2, [r4, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f7fa fcae 	bl	8007a20 <_lseek>
 800d0c4:	1c43      	adds	r3, r0, #1
 800d0c6:	d102      	bne.n	800d0ce <_lseek_r+0x1e>
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	b103      	cbz	r3, 800d0ce <_lseek_r+0x1e>
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	bd38      	pop	{r3, r4, r5, pc}
 800d0d0:	200008e4 	.word	0x200008e4

0800d0d4 <__ascii_mbtowc>:
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	b901      	cbnz	r1, 800d0da <__ascii_mbtowc+0x6>
 800d0d8:	a901      	add	r1, sp, #4
 800d0da:	b142      	cbz	r2, 800d0ee <__ascii_mbtowc+0x1a>
 800d0dc:	b14b      	cbz	r3, 800d0f2 <__ascii_mbtowc+0x1e>
 800d0de:	7813      	ldrb	r3, [r2, #0]
 800d0e0:	600b      	str	r3, [r1, #0]
 800d0e2:	7812      	ldrb	r2, [r2, #0]
 800d0e4:	1c10      	adds	r0, r2, #0
 800d0e6:	bf18      	it	ne
 800d0e8:	2001      	movne	r0, #1
 800d0ea:	b002      	add	sp, #8
 800d0ec:	4770      	bx	lr
 800d0ee:	4610      	mov	r0, r2
 800d0f0:	e7fb      	b.n	800d0ea <__ascii_mbtowc+0x16>
 800d0f2:	f06f 0001 	mvn.w	r0, #1
 800d0f6:	e7f8      	b.n	800d0ea <__ascii_mbtowc+0x16>

0800d0f8 <__malloc_lock>:
 800d0f8:	4770      	bx	lr

0800d0fa <__malloc_unlock>:
 800d0fa:	4770      	bx	lr

0800d0fc <_Balloc>:
 800d0fc:	b570      	push	{r4, r5, r6, lr}
 800d0fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d100:	4604      	mov	r4, r0
 800d102:	460e      	mov	r6, r1
 800d104:	b93d      	cbnz	r5, 800d116 <_Balloc+0x1a>
 800d106:	2010      	movs	r0, #16
 800d108:	f7fe f9d2 	bl	800b4b0 <malloc>
 800d10c:	6260      	str	r0, [r4, #36]	; 0x24
 800d10e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d112:	6005      	str	r5, [r0, #0]
 800d114:	60c5      	str	r5, [r0, #12]
 800d116:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d118:	68eb      	ldr	r3, [r5, #12]
 800d11a:	b183      	cbz	r3, 800d13e <_Balloc+0x42>
 800d11c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d124:	b9b8      	cbnz	r0, 800d156 <_Balloc+0x5a>
 800d126:	2101      	movs	r1, #1
 800d128:	fa01 f506 	lsl.w	r5, r1, r6
 800d12c:	1d6a      	adds	r2, r5, #5
 800d12e:	0092      	lsls	r2, r2, #2
 800d130:	4620      	mov	r0, r4
 800d132:	f000 fbe2 	bl	800d8fa <_calloc_r>
 800d136:	b160      	cbz	r0, 800d152 <_Balloc+0x56>
 800d138:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d13c:	e00e      	b.n	800d15c <_Balloc+0x60>
 800d13e:	2221      	movs	r2, #33	; 0x21
 800d140:	2104      	movs	r1, #4
 800d142:	4620      	mov	r0, r4
 800d144:	f000 fbd9 	bl	800d8fa <_calloc_r>
 800d148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d14a:	60e8      	str	r0, [r5, #12]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1e4      	bne.n	800d11c <_Balloc+0x20>
 800d152:	2000      	movs	r0, #0
 800d154:	bd70      	pop	{r4, r5, r6, pc}
 800d156:	6802      	ldr	r2, [r0, #0]
 800d158:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d15c:	2300      	movs	r3, #0
 800d15e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d162:	e7f7      	b.n	800d154 <_Balloc+0x58>

0800d164 <_Bfree>:
 800d164:	b570      	push	{r4, r5, r6, lr}
 800d166:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d168:	4606      	mov	r6, r0
 800d16a:	460d      	mov	r5, r1
 800d16c:	b93c      	cbnz	r4, 800d17e <_Bfree+0x1a>
 800d16e:	2010      	movs	r0, #16
 800d170:	f7fe f99e 	bl	800b4b0 <malloc>
 800d174:	6270      	str	r0, [r6, #36]	; 0x24
 800d176:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d17a:	6004      	str	r4, [r0, #0]
 800d17c:	60c4      	str	r4, [r0, #12]
 800d17e:	b13d      	cbz	r5, 800d190 <_Bfree+0x2c>
 800d180:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d182:	686a      	ldr	r2, [r5, #4]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d18a:	6029      	str	r1, [r5, #0]
 800d18c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d190:	bd70      	pop	{r4, r5, r6, pc}

0800d192 <__multadd>:
 800d192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d196:	690d      	ldr	r5, [r1, #16]
 800d198:	461f      	mov	r7, r3
 800d19a:	4606      	mov	r6, r0
 800d19c:	460c      	mov	r4, r1
 800d19e:	f101 0c14 	add.w	ip, r1, #20
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f8dc 0000 	ldr.w	r0, [ip]
 800d1a8:	b281      	uxth	r1, r0
 800d1aa:	fb02 7101 	mla	r1, r2, r1, r7
 800d1ae:	0c0f      	lsrs	r7, r1, #16
 800d1b0:	0c00      	lsrs	r0, r0, #16
 800d1b2:	fb02 7000 	mla	r0, r2, r0, r7
 800d1b6:	b289      	uxth	r1, r1
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d1be:	429d      	cmp	r5, r3
 800d1c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d1c4:	f84c 1b04 	str.w	r1, [ip], #4
 800d1c8:	dcec      	bgt.n	800d1a4 <__multadd+0x12>
 800d1ca:	b1d7      	cbz	r7, 800d202 <__multadd+0x70>
 800d1cc:	68a3      	ldr	r3, [r4, #8]
 800d1ce:	42ab      	cmp	r3, r5
 800d1d0:	dc12      	bgt.n	800d1f8 <__multadd+0x66>
 800d1d2:	6861      	ldr	r1, [r4, #4]
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	3101      	adds	r1, #1
 800d1d8:	f7ff ff90 	bl	800d0fc <_Balloc>
 800d1dc:	6922      	ldr	r2, [r4, #16]
 800d1de:	3202      	adds	r2, #2
 800d1e0:	f104 010c 	add.w	r1, r4, #12
 800d1e4:	4680      	mov	r8, r0
 800d1e6:	0092      	lsls	r2, r2, #2
 800d1e8:	300c      	adds	r0, #12
 800d1ea:	f7fe f980 	bl	800b4ee <memcpy>
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	f7ff ffb7 	bl	800d164 <_Bfree>
 800d1f6:	4644      	mov	r4, r8
 800d1f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1fc:	3501      	adds	r5, #1
 800d1fe:	615f      	str	r7, [r3, #20]
 800d200:	6125      	str	r5, [r4, #16]
 800d202:	4620      	mov	r0, r4
 800d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d208 <__s2b>:
 800d208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d20c:	460c      	mov	r4, r1
 800d20e:	4615      	mov	r5, r2
 800d210:	461f      	mov	r7, r3
 800d212:	2209      	movs	r2, #9
 800d214:	3308      	adds	r3, #8
 800d216:	4606      	mov	r6, r0
 800d218:	fb93 f3f2 	sdiv	r3, r3, r2
 800d21c:	2100      	movs	r1, #0
 800d21e:	2201      	movs	r2, #1
 800d220:	429a      	cmp	r2, r3
 800d222:	db20      	blt.n	800d266 <__s2b+0x5e>
 800d224:	4630      	mov	r0, r6
 800d226:	f7ff ff69 	bl	800d0fc <_Balloc>
 800d22a:	9b08      	ldr	r3, [sp, #32]
 800d22c:	6143      	str	r3, [r0, #20]
 800d22e:	2d09      	cmp	r5, #9
 800d230:	f04f 0301 	mov.w	r3, #1
 800d234:	6103      	str	r3, [r0, #16]
 800d236:	dd19      	ble.n	800d26c <__s2b+0x64>
 800d238:	f104 0809 	add.w	r8, r4, #9
 800d23c:	46c1      	mov	r9, r8
 800d23e:	442c      	add	r4, r5
 800d240:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d244:	4601      	mov	r1, r0
 800d246:	3b30      	subs	r3, #48	; 0x30
 800d248:	220a      	movs	r2, #10
 800d24a:	4630      	mov	r0, r6
 800d24c:	f7ff ffa1 	bl	800d192 <__multadd>
 800d250:	45a1      	cmp	r9, r4
 800d252:	d1f5      	bne.n	800d240 <__s2b+0x38>
 800d254:	eb08 0405 	add.w	r4, r8, r5
 800d258:	3c08      	subs	r4, #8
 800d25a:	1b2d      	subs	r5, r5, r4
 800d25c:	1963      	adds	r3, r4, r5
 800d25e:	42bb      	cmp	r3, r7
 800d260:	db07      	blt.n	800d272 <__s2b+0x6a>
 800d262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d266:	0052      	lsls	r2, r2, #1
 800d268:	3101      	adds	r1, #1
 800d26a:	e7d9      	b.n	800d220 <__s2b+0x18>
 800d26c:	340a      	adds	r4, #10
 800d26e:	2509      	movs	r5, #9
 800d270:	e7f3      	b.n	800d25a <__s2b+0x52>
 800d272:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d276:	4601      	mov	r1, r0
 800d278:	3b30      	subs	r3, #48	; 0x30
 800d27a:	220a      	movs	r2, #10
 800d27c:	4630      	mov	r0, r6
 800d27e:	f7ff ff88 	bl	800d192 <__multadd>
 800d282:	e7eb      	b.n	800d25c <__s2b+0x54>

0800d284 <__hi0bits>:
 800d284:	0c02      	lsrs	r2, r0, #16
 800d286:	0412      	lsls	r2, r2, #16
 800d288:	4603      	mov	r3, r0
 800d28a:	b9b2      	cbnz	r2, 800d2ba <__hi0bits+0x36>
 800d28c:	0403      	lsls	r3, r0, #16
 800d28e:	2010      	movs	r0, #16
 800d290:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d294:	bf04      	itt	eq
 800d296:	021b      	lsleq	r3, r3, #8
 800d298:	3008      	addeq	r0, #8
 800d29a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d29e:	bf04      	itt	eq
 800d2a0:	011b      	lsleq	r3, r3, #4
 800d2a2:	3004      	addeq	r0, #4
 800d2a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2a8:	bf04      	itt	eq
 800d2aa:	009b      	lsleq	r3, r3, #2
 800d2ac:	3002      	addeq	r0, #2
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	db06      	blt.n	800d2c0 <__hi0bits+0x3c>
 800d2b2:	005b      	lsls	r3, r3, #1
 800d2b4:	d503      	bpl.n	800d2be <__hi0bits+0x3a>
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	4770      	bx	lr
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	e7e8      	b.n	800d290 <__hi0bits+0xc>
 800d2be:	2020      	movs	r0, #32
 800d2c0:	4770      	bx	lr

0800d2c2 <__lo0bits>:
 800d2c2:	6803      	ldr	r3, [r0, #0]
 800d2c4:	f013 0207 	ands.w	r2, r3, #7
 800d2c8:	4601      	mov	r1, r0
 800d2ca:	d00b      	beq.n	800d2e4 <__lo0bits+0x22>
 800d2cc:	07da      	lsls	r2, r3, #31
 800d2ce:	d423      	bmi.n	800d318 <__lo0bits+0x56>
 800d2d0:	0798      	lsls	r0, r3, #30
 800d2d2:	bf49      	itett	mi
 800d2d4:	085b      	lsrmi	r3, r3, #1
 800d2d6:	089b      	lsrpl	r3, r3, #2
 800d2d8:	2001      	movmi	r0, #1
 800d2da:	600b      	strmi	r3, [r1, #0]
 800d2dc:	bf5c      	itt	pl
 800d2de:	600b      	strpl	r3, [r1, #0]
 800d2e0:	2002      	movpl	r0, #2
 800d2e2:	4770      	bx	lr
 800d2e4:	b298      	uxth	r0, r3
 800d2e6:	b9a8      	cbnz	r0, 800d314 <__lo0bits+0x52>
 800d2e8:	0c1b      	lsrs	r3, r3, #16
 800d2ea:	2010      	movs	r0, #16
 800d2ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d2f0:	bf04      	itt	eq
 800d2f2:	0a1b      	lsreq	r3, r3, #8
 800d2f4:	3008      	addeq	r0, #8
 800d2f6:	071a      	lsls	r2, r3, #28
 800d2f8:	bf04      	itt	eq
 800d2fa:	091b      	lsreq	r3, r3, #4
 800d2fc:	3004      	addeq	r0, #4
 800d2fe:	079a      	lsls	r2, r3, #30
 800d300:	bf04      	itt	eq
 800d302:	089b      	lsreq	r3, r3, #2
 800d304:	3002      	addeq	r0, #2
 800d306:	07da      	lsls	r2, r3, #31
 800d308:	d402      	bmi.n	800d310 <__lo0bits+0x4e>
 800d30a:	085b      	lsrs	r3, r3, #1
 800d30c:	d006      	beq.n	800d31c <__lo0bits+0x5a>
 800d30e:	3001      	adds	r0, #1
 800d310:	600b      	str	r3, [r1, #0]
 800d312:	4770      	bx	lr
 800d314:	4610      	mov	r0, r2
 800d316:	e7e9      	b.n	800d2ec <__lo0bits+0x2a>
 800d318:	2000      	movs	r0, #0
 800d31a:	4770      	bx	lr
 800d31c:	2020      	movs	r0, #32
 800d31e:	4770      	bx	lr

0800d320 <__i2b>:
 800d320:	b510      	push	{r4, lr}
 800d322:	460c      	mov	r4, r1
 800d324:	2101      	movs	r1, #1
 800d326:	f7ff fee9 	bl	800d0fc <_Balloc>
 800d32a:	2201      	movs	r2, #1
 800d32c:	6144      	str	r4, [r0, #20]
 800d32e:	6102      	str	r2, [r0, #16]
 800d330:	bd10      	pop	{r4, pc}

0800d332 <__multiply>:
 800d332:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d336:	4614      	mov	r4, r2
 800d338:	690a      	ldr	r2, [r1, #16]
 800d33a:	6923      	ldr	r3, [r4, #16]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	bfb8      	it	lt
 800d340:	460b      	movlt	r3, r1
 800d342:	4688      	mov	r8, r1
 800d344:	bfbc      	itt	lt
 800d346:	46a0      	movlt	r8, r4
 800d348:	461c      	movlt	r4, r3
 800d34a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d34e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d352:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d356:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d35a:	eb07 0609 	add.w	r6, r7, r9
 800d35e:	42b3      	cmp	r3, r6
 800d360:	bfb8      	it	lt
 800d362:	3101      	addlt	r1, #1
 800d364:	f7ff feca 	bl	800d0fc <_Balloc>
 800d368:	f100 0514 	add.w	r5, r0, #20
 800d36c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d370:	462b      	mov	r3, r5
 800d372:	2200      	movs	r2, #0
 800d374:	4573      	cmp	r3, lr
 800d376:	d316      	bcc.n	800d3a6 <__multiply+0x74>
 800d378:	f104 0214 	add.w	r2, r4, #20
 800d37c:	f108 0114 	add.w	r1, r8, #20
 800d380:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d384:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	9b00      	ldr	r3, [sp, #0]
 800d38c:	9201      	str	r2, [sp, #4]
 800d38e:	4293      	cmp	r3, r2
 800d390:	d80c      	bhi.n	800d3ac <__multiply+0x7a>
 800d392:	2e00      	cmp	r6, #0
 800d394:	dd03      	ble.n	800d39e <__multiply+0x6c>
 800d396:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d05d      	beq.n	800d45a <__multiply+0x128>
 800d39e:	6106      	str	r6, [r0, #16]
 800d3a0:	b003      	add	sp, #12
 800d3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a6:	f843 2b04 	str.w	r2, [r3], #4
 800d3aa:	e7e3      	b.n	800d374 <__multiply+0x42>
 800d3ac:	f8b2 b000 	ldrh.w	fp, [r2]
 800d3b0:	f1bb 0f00 	cmp.w	fp, #0
 800d3b4:	d023      	beq.n	800d3fe <__multiply+0xcc>
 800d3b6:	4689      	mov	r9, r1
 800d3b8:	46ac      	mov	ip, r5
 800d3ba:	f04f 0800 	mov.w	r8, #0
 800d3be:	f859 4b04 	ldr.w	r4, [r9], #4
 800d3c2:	f8dc a000 	ldr.w	sl, [ip]
 800d3c6:	b2a3      	uxth	r3, r4
 800d3c8:	fa1f fa8a 	uxth.w	sl, sl
 800d3cc:	fb0b a303 	mla	r3, fp, r3, sl
 800d3d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d3d4:	f8dc 4000 	ldr.w	r4, [ip]
 800d3d8:	4443      	add	r3, r8
 800d3da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d3de:	fb0b 840a 	mla	r4, fp, sl, r8
 800d3e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d3e6:	46e2      	mov	sl, ip
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d3ee:	454f      	cmp	r7, r9
 800d3f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d3f4:	f84a 3b04 	str.w	r3, [sl], #4
 800d3f8:	d82b      	bhi.n	800d452 <__multiply+0x120>
 800d3fa:	f8cc 8004 	str.w	r8, [ip, #4]
 800d3fe:	9b01      	ldr	r3, [sp, #4]
 800d400:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d404:	3204      	adds	r2, #4
 800d406:	f1ba 0f00 	cmp.w	sl, #0
 800d40a:	d020      	beq.n	800d44e <__multiply+0x11c>
 800d40c:	682b      	ldr	r3, [r5, #0]
 800d40e:	4689      	mov	r9, r1
 800d410:	46a8      	mov	r8, r5
 800d412:	f04f 0b00 	mov.w	fp, #0
 800d416:	f8b9 c000 	ldrh.w	ip, [r9]
 800d41a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d41e:	fb0a 440c 	mla	r4, sl, ip, r4
 800d422:	445c      	add	r4, fp
 800d424:	46c4      	mov	ip, r8
 800d426:	b29b      	uxth	r3, r3
 800d428:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d42c:	f84c 3b04 	str.w	r3, [ip], #4
 800d430:	f859 3b04 	ldr.w	r3, [r9], #4
 800d434:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d438:	0c1b      	lsrs	r3, r3, #16
 800d43a:	fb0a b303 	mla	r3, sl, r3, fp
 800d43e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d442:	454f      	cmp	r7, r9
 800d444:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d448:	d805      	bhi.n	800d456 <__multiply+0x124>
 800d44a:	f8c8 3004 	str.w	r3, [r8, #4]
 800d44e:	3504      	adds	r5, #4
 800d450:	e79b      	b.n	800d38a <__multiply+0x58>
 800d452:	46d4      	mov	ip, sl
 800d454:	e7b3      	b.n	800d3be <__multiply+0x8c>
 800d456:	46e0      	mov	r8, ip
 800d458:	e7dd      	b.n	800d416 <__multiply+0xe4>
 800d45a:	3e01      	subs	r6, #1
 800d45c:	e799      	b.n	800d392 <__multiply+0x60>
	...

0800d460 <__pow5mult>:
 800d460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d464:	4615      	mov	r5, r2
 800d466:	f012 0203 	ands.w	r2, r2, #3
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	d007      	beq.n	800d480 <__pow5mult+0x20>
 800d470:	3a01      	subs	r2, #1
 800d472:	4c21      	ldr	r4, [pc, #132]	; (800d4f8 <__pow5mult+0x98>)
 800d474:	2300      	movs	r3, #0
 800d476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d47a:	f7ff fe8a 	bl	800d192 <__multadd>
 800d47e:	4607      	mov	r7, r0
 800d480:	10ad      	asrs	r5, r5, #2
 800d482:	d035      	beq.n	800d4f0 <__pow5mult+0x90>
 800d484:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d486:	b93c      	cbnz	r4, 800d498 <__pow5mult+0x38>
 800d488:	2010      	movs	r0, #16
 800d48a:	f7fe f811 	bl	800b4b0 <malloc>
 800d48e:	6270      	str	r0, [r6, #36]	; 0x24
 800d490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d494:	6004      	str	r4, [r0, #0]
 800d496:	60c4      	str	r4, [r0, #12]
 800d498:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d49c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4a0:	b94c      	cbnz	r4, 800d4b6 <__pow5mult+0x56>
 800d4a2:	f240 2171 	movw	r1, #625	; 0x271
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	f7ff ff3a 	bl	800d320 <__i2b>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	6003      	str	r3, [r0, #0]
 800d4b6:	f04f 0800 	mov.w	r8, #0
 800d4ba:	07eb      	lsls	r3, r5, #31
 800d4bc:	d50a      	bpl.n	800d4d4 <__pow5mult+0x74>
 800d4be:	4639      	mov	r1, r7
 800d4c0:	4622      	mov	r2, r4
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f7ff ff35 	bl	800d332 <__multiply>
 800d4c8:	4639      	mov	r1, r7
 800d4ca:	4681      	mov	r9, r0
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f7ff fe49 	bl	800d164 <_Bfree>
 800d4d2:	464f      	mov	r7, r9
 800d4d4:	106d      	asrs	r5, r5, #1
 800d4d6:	d00b      	beq.n	800d4f0 <__pow5mult+0x90>
 800d4d8:	6820      	ldr	r0, [r4, #0]
 800d4da:	b938      	cbnz	r0, 800d4ec <__pow5mult+0x8c>
 800d4dc:	4622      	mov	r2, r4
 800d4de:	4621      	mov	r1, r4
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	f7ff ff26 	bl	800d332 <__multiply>
 800d4e6:	6020      	str	r0, [r4, #0]
 800d4e8:	f8c0 8000 	str.w	r8, [r0]
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	e7e4      	b.n	800d4ba <__pow5mult+0x5a>
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4f6:	bf00      	nop
 800d4f8:	08010518 	.word	0x08010518

0800d4fc <__lshift>:
 800d4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d500:	460c      	mov	r4, r1
 800d502:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d506:	6923      	ldr	r3, [r4, #16]
 800d508:	6849      	ldr	r1, [r1, #4]
 800d50a:	eb0a 0903 	add.w	r9, sl, r3
 800d50e:	68a3      	ldr	r3, [r4, #8]
 800d510:	4607      	mov	r7, r0
 800d512:	4616      	mov	r6, r2
 800d514:	f109 0501 	add.w	r5, r9, #1
 800d518:	42ab      	cmp	r3, r5
 800d51a:	db32      	blt.n	800d582 <__lshift+0x86>
 800d51c:	4638      	mov	r0, r7
 800d51e:	f7ff fded 	bl	800d0fc <_Balloc>
 800d522:	2300      	movs	r3, #0
 800d524:	4680      	mov	r8, r0
 800d526:	f100 0114 	add.w	r1, r0, #20
 800d52a:	461a      	mov	r2, r3
 800d52c:	4553      	cmp	r3, sl
 800d52e:	db2b      	blt.n	800d588 <__lshift+0x8c>
 800d530:	6920      	ldr	r0, [r4, #16]
 800d532:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d536:	f104 0314 	add.w	r3, r4, #20
 800d53a:	f016 021f 	ands.w	r2, r6, #31
 800d53e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d542:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d546:	d025      	beq.n	800d594 <__lshift+0x98>
 800d548:	f1c2 0e20 	rsb	lr, r2, #32
 800d54c:	2000      	movs	r0, #0
 800d54e:	681e      	ldr	r6, [r3, #0]
 800d550:	468a      	mov	sl, r1
 800d552:	4096      	lsls	r6, r2
 800d554:	4330      	orrs	r0, r6
 800d556:	f84a 0b04 	str.w	r0, [sl], #4
 800d55a:	f853 0b04 	ldr.w	r0, [r3], #4
 800d55e:	459c      	cmp	ip, r3
 800d560:	fa20 f00e 	lsr.w	r0, r0, lr
 800d564:	d814      	bhi.n	800d590 <__lshift+0x94>
 800d566:	6048      	str	r0, [r1, #4]
 800d568:	b108      	cbz	r0, 800d56e <__lshift+0x72>
 800d56a:	f109 0502 	add.w	r5, r9, #2
 800d56e:	3d01      	subs	r5, #1
 800d570:	4638      	mov	r0, r7
 800d572:	f8c8 5010 	str.w	r5, [r8, #16]
 800d576:	4621      	mov	r1, r4
 800d578:	f7ff fdf4 	bl	800d164 <_Bfree>
 800d57c:	4640      	mov	r0, r8
 800d57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d582:	3101      	adds	r1, #1
 800d584:	005b      	lsls	r3, r3, #1
 800d586:	e7c7      	b.n	800d518 <__lshift+0x1c>
 800d588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d58c:	3301      	adds	r3, #1
 800d58e:	e7cd      	b.n	800d52c <__lshift+0x30>
 800d590:	4651      	mov	r1, sl
 800d592:	e7dc      	b.n	800d54e <__lshift+0x52>
 800d594:	3904      	subs	r1, #4
 800d596:	f853 2b04 	ldr.w	r2, [r3], #4
 800d59a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d59e:	459c      	cmp	ip, r3
 800d5a0:	d8f9      	bhi.n	800d596 <__lshift+0x9a>
 800d5a2:	e7e4      	b.n	800d56e <__lshift+0x72>

0800d5a4 <__mcmp>:
 800d5a4:	6903      	ldr	r3, [r0, #16]
 800d5a6:	690a      	ldr	r2, [r1, #16]
 800d5a8:	1a9b      	subs	r3, r3, r2
 800d5aa:	b530      	push	{r4, r5, lr}
 800d5ac:	d10c      	bne.n	800d5c8 <__mcmp+0x24>
 800d5ae:	0092      	lsls	r2, r2, #2
 800d5b0:	3014      	adds	r0, #20
 800d5b2:	3114      	adds	r1, #20
 800d5b4:	1884      	adds	r4, r0, r2
 800d5b6:	4411      	add	r1, r2
 800d5b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d5bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d5c0:	4295      	cmp	r5, r2
 800d5c2:	d003      	beq.n	800d5cc <__mcmp+0x28>
 800d5c4:	d305      	bcc.n	800d5d2 <__mcmp+0x2e>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	bd30      	pop	{r4, r5, pc}
 800d5cc:	42a0      	cmp	r0, r4
 800d5ce:	d3f3      	bcc.n	800d5b8 <__mcmp+0x14>
 800d5d0:	e7fa      	b.n	800d5c8 <__mcmp+0x24>
 800d5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d6:	e7f7      	b.n	800d5c8 <__mcmp+0x24>

0800d5d8 <__mdiff>:
 800d5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5dc:	460d      	mov	r5, r1
 800d5de:	4607      	mov	r7, r0
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	4614      	mov	r4, r2
 800d5e6:	f7ff ffdd 	bl	800d5a4 <__mcmp>
 800d5ea:	1e06      	subs	r6, r0, #0
 800d5ec:	d108      	bne.n	800d600 <__mdiff+0x28>
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	f7ff fd83 	bl	800d0fc <_Balloc>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d600:	bfa4      	itt	ge
 800d602:	4623      	movge	r3, r4
 800d604:	462c      	movge	r4, r5
 800d606:	4638      	mov	r0, r7
 800d608:	6861      	ldr	r1, [r4, #4]
 800d60a:	bfa6      	itte	ge
 800d60c:	461d      	movge	r5, r3
 800d60e:	2600      	movge	r6, #0
 800d610:	2601      	movlt	r6, #1
 800d612:	f7ff fd73 	bl	800d0fc <_Balloc>
 800d616:	692b      	ldr	r3, [r5, #16]
 800d618:	60c6      	str	r6, [r0, #12]
 800d61a:	6926      	ldr	r6, [r4, #16]
 800d61c:	f105 0914 	add.w	r9, r5, #20
 800d620:	f104 0214 	add.w	r2, r4, #20
 800d624:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d628:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d62c:	f100 0514 	add.w	r5, r0, #20
 800d630:	f04f 0e00 	mov.w	lr, #0
 800d634:	f852 ab04 	ldr.w	sl, [r2], #4
 800d638:	f859 4b04 	ldr.w	r4, [r9], #4
 800d63c:	fa1e f18a 	uxtah	r1, lr, sl
 800d640:	b2a3      	uxth	r3, r4
 800d642:	1ac9      	subs	r1, r1, r3
 800d644:	0c23      	lsrs	r3, r4, #16
 800d646:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d64a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d64e:	b289      	uxth	r1, r1
 800d650:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d654:	45c8      	cmp	r8, r9
 800d656:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d65a:	4694      	mov	ip, r2
 800d65c:	f845 3b04 	str.w	r3, [r5], #4
 800d660:	d8e8      	bhi.n	800d634 <__mdiff+0x5c>
 800d662:	45bc      	cmp	ip, r7
 800d664:	d304      	bcc.n	800d670 <__mdiff+0x98>
 800d666:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d66a:	b183      	cbz	r3, 800d68e <__mdiff+0xb6>
 800d66c:	6106      	str	r6, [r0, #16]
 800d66e:	e7c5      	b.n	800d5fc <__mdiff+0x24>
 800d670:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d674:	fa1e f381 	uxtah	r3, lr, r1
 800d678:	141a      	asrs	r2, r3, #16
 800d67a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d67e:	b29b      	uxth	r3, r3
 800d680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d684:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d688:	f845 3b04 	str.w	r3, [r5], #4
 800d68c:	e7e9      	b.n	800d662 <__mdiff+0x8a>
 800d68e:	3e01      	subs	r6, #1
 800d690:	e7e9      	b.n	800d666 <__mdiff+0x8e>
	...

0800d694 <__ulp>:
 800d694:	4b12      	ldr	r3, [pc, #72]	; (800d6e0 <__ulp+0x4c>)
 800d696:	ee10 2a90 	vmov	r2, s1
 800d69a:	401a      	ands	r2, r3
 800d69c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	dd04      	ble.n	800d6ae <__ulp+0x1a>
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	ec41 0b10 	vmov	d0, r0, r1
 800d6ac:	4770      	bx	lr
 800d6ae:	425b      	negs	r3, r3
 800d6b0:	151b      	asrs	r3, r3, #20
 800d6b2:	2b13      	cmp	r3, #19
 800d6b4:	f04f 0000 	mov.w	r0, #0
 800d6b8:	f04f 0100 	mov.w	r1, #0
 800d6bc:	dc04      	bgt.n	800d6c8 <__ulp+0x34>
 800d6be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d6c2:	fa42 f103 	asr.w	r1, r2, r3
 800d6c6:	e7ef      	b.n	800d6a8 <__ulp+0x14>
 800d6c8:	3b14      	subs	r3, #20
 800d6ca:	2b1e      	cmp	r3, #30
 800d6cc:	f04f 0201 	mov.w	r2, #1
 800d6d0:	bfda      	itte	le
 800d6d2:	f1c3 031f 	rsble	r3, r3, #31
 800d6d6:	fa02 f303 	lslle.w	r3, r2, r3
 800d6da:	4613      	movgt	r3, r2
 800d6dc:	4618      	mov	r0, r3
 800d6de:	e7e3      	b.n	800d6a8 <__ulp+0x14>
 800d6e0:	7ff00000 	.word	0x7ff00000

0800d6e4 <__b2d>:
 800d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e6:	6905      	ldr	r5, [r0, #16]
 800d6e8:	f100 0714 	add.w	r7, r0, #20
 800d6ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d6f0:	1f2e      	subs	r6, r5, #4
 800d6f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f7ff fdc4 	bl	800d284 <__hi0bits>
 800d6fc:	f1c0 0320 	rsb	r3, r0, #32
 800d700:	280a      	cmp	r0, #10
 800d702:	600b      	str	r3, [r1, #0]
 800d704:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d77c <__b2d+0x98>
 800d708:	dc14      	bgt.n	800d734 <__b2d+0x50>
 800d70a:	f1c0 0e0b 	rsb	lr, r0, #11
 800d70e:	fa24 f10e 	lsr.w	r1, r4, lr
 800d712:	42b7      	cmp	r7, r6
 800d714:	ea41 030c 	orr.w	r3, r1, ip
 800d718:	bf34      	ite	cc
 800d71a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d71e:	2100      	movcs	r1, #0
 800d720:	3015      	adds	r0, #21
 800d722:	fa04 f000 	lsl.w	r0, r4, r0
 800d726:	fa21 f10e 	lsr.w	r1, r1, lr
 800d72a:	ea40 0201 	orr.w	r2, r0, r1
 800d72e:	ec43 2b10 	vmov	d0, r2, r3
 800d732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d734:	42b7      	cmp	r7, r6
 800d736:	bf3a      	itte	cc
 800d738:	f1a5 0608 	subcc.w	r6, r5, #8
 800d73c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d740:	2100      	movcs	r1, #0
 800d742:	380b      	subs	r0, #11
 800d744:	d015      	beq.n	800d772 <__b2d+0x8e>
 800d746:	4084      	lsls	r4, r0
 800d748:	f1c0 0520 	rsb	r5, r0, #32
 800d74c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d750:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d754:	42be      	cmp	r6, r7
 800d756:	fa21 fc05 	lsr.w	ip, r1, r5
 800d75a:	ea44 030c 	orr.w	r3, r4, ip
 800d75e:	bf8c      	ite	hi
 800d760:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d764:	2400      	movls	r4, #0
 800d766:	fa01 f000 	lsl.w	r0, r1, r0
 800d76a:	40ec      	lsrs	r4, r5
 800d76c:	ea40 0204 	orr.w	r2, r0, r4
 800d770:	e7dd      	b.n	800d72e <__b2d+0x4a>
 800d772:	ea44 030c 	orr.w	r3, r4, ip
 800d776:	460a      	mov	r2, r1
 800d778:	e7d9      	b.n	800d72e <__b2d+0x4a>
 800d77a:	bf00      	nop
 800d77c:	3ff00000 	.word	0x3ff00000

0800d780 <__d2b>:
 800d780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d784:	460e      	mov	r6, r1
 800d786:	2101      	movs	r1, #1
 800d788:	ec59 8b10 	vmov	r8, r9, d0
 800d78c:	4615      	mov	r5, r2
 800d78e:	f7ff fcb5 	bl	800d0fc <_Balloc>
 800d792:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d796:	4607      	mov	r7, r0
 800d798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d79c:	bb34      	cbnz	r4, 800d7ec <__d2b+0x6c>
 800d79e:	9301      	str	r3, [sp, #4]
 800d7a0:	f1b8 0300 	subs.w	r3, r8, #0
 800d7a4:	d027      	beq.n	800d7f6 <__d2b+0x76>
 800d7a6:	a802      	add	r0, sp, #8
 800d7a8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d7ac:	f7ff fd89 	bl	800d2c2 <__lo0bits>
 800d7b0:	9900      	ldr	r1, [sp, #0]
 800d7b2:	b1f0      	cbz	r0, 800d7f2 <__d2b+0x72>
 800d7b4:	9a01      	ldr	r2, [sp, #4]
 800d7b6:	f1c0 0320 	rsb	r3, r0, #32
 800d7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d7be:	430b      	orrs	r3, r1
 800d7c0:	40c2      	lsrs	r2, r0
 800d7c2:	617b      	str	r3, [r7, #20]
 800d7c4:	9201      	str	r2, [sp, #4]
 800d7c6:	9b01      	ldr	r3, [sp, #4]
 800d7c8:	61bb      	str	r3, [r7, #24]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	bf14      	ite	ne
 800d7ce:	2102      	movne	r1, #2
 800d7d0:	2101      	moveq	r1, #1
 800d7d2:	6139      	str	r1, [r7, #16]
 800d7d4:	b1c4      	cbz	r4, 800d808 <__d2b+0x88>
 800d7d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d7da:	4404      	add	r4, r0
 800d7dc:	6034      	str	r4, [r6, #0]
 800d7de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7e2:	6028      	str	r0, [r5, #0]
 800d7e4:	4638      	mov	r0, r7
 800d7e6:	b003      	add	sp, #12
 800d7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7f0:	e7d5      	b.n	800d79e <__d2b+0x1e>
 800d7f2:	6179      	str	r1, [r7, #20]
 800d7f4:	e7e7      	b.n	800d7c6 <__d2b+0x46>
 800d7f6:	a801      	add	r0, sp, #4
 800d7f8:	f7ff fd63 	bl	800d2c2 <__lo0bits>
 800d7fc:	9b01      	ldr	r3, [sp, #4]
 800d7fe:	617b      	str	r3, [r7, #20]
 800d800:	2101      	movs	r1, #1
 800d802:	6139      	str	r1, [r7, #16]
 800d804:	3020      	adds	r0, #32
 800d806:	e7e5      	b.n	800d7d4 <__d2b+0x54>
 800d808:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d80c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d810:	6030      	str	r0, [r6, #0]
 800d812:	6918      	ldr	r0, [r3, #16]
 800d814:	f7ff fd36 	bl	800d284 <__hi0bits>
 800d818:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d81c:	e7e1      	b.n	800d7e2 <__d2b+0x62>

0800d81e <__ratio>:
 800d81e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d822:	4688      	mov	r8, r1
 800d824:	4669      	mov	r1, sp
 800d826:	4681      	mov	r9, r0
 800d828:	f7ff ff5c 	bl	800d6e4 <__b2d>
 800d82c:	a901      	add	r1, sp, #4
 800d82e:	4640      	mov	r0, r8
 800d830:	ec57 6b10 	vmov	r6, r7, d0
 800d834:	f7ff ff56 	bl	800d6e4 <__b2d>
 800d838:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d83c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d840:	eba3 0c02 	sub.w	ip, r3, r2
 800d844:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d848:	1a9b      	subs	r3, r3, r2
 800d84a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d84e:	ec5b ab10 	vmov	sl, fp, d0
 800d852:	2b00      	cmp	r3, #0
 800d854:	bfce      	itee	gt
 800d856:	463a      	movgt	r2, r7
 800d858:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d85c:	465a      	movle	r2, fp
 800d85e:	4659      	mov	r1, fp
 800d860:	463d      	mov	r5, r7
 800d862:	bfd4      	ite	le
 800d864:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d868:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d86c:	4630      	mov	r0, r6
 800d86e:	ee10 2a10 	vmov	r2, s0
 800d872:	460b      	mov	r3, r1
 800d874:	4629      	mov	r1, r5
 800d876:	f7f2 fffb 	bl	8000870 <__aeabi_ddiv>
 800d87a:	ec41 0b10 	vmov	d0, r0, r1
 800d87e:	b003      	add	sp, #12
 800d880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d884 <__copybits>:
 800d884:	3901      	subs	r1, #1
 800d886:	b510      	push	{r4, lr}
 800d888:	1149      	asrs	r1, r1, #5
 800d88a:	6914      	ldr	r4, [r2, #16]
 800d88c:	3101      	adds	r1, #1
 800d88e:	f102 0314 	add.w	r3, r2, #20
 800d892:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d896:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d89a:	42a3      	cmp	r3, r4
 800d89c:	4602      	mov	r2, r0
 800d89e:	d303      	bcc.n	800d8a8 <__copybits+0x24>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	428a      	cmp	r2, r1
 800d8a4:	d305      	bcc.n	800d8b2 <__copybits+0x2e>
 800d8a6:	bd10      	pop	{r4, pc}
 800d8a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ac:	f840 2b04 	str.w	r2, [r0], #4
 800d8b0:	e7f3      	b.n	800d89a <__copybits+0x16>
 800d8b2:	f842 3b04 	str.w	r3, [r2], #4
 800d8b6:	e7f4      	b.n	800d8a2 <__copybits+0x1e>

0800d8b8 <__any_on>:
 800d8b8:	f100 0214 	add.w	r2, r0, #20
 800d8bc:	6900      	ldr	r0, [r0, #16]
 800d8be:	114b      	asrs	r3, r1, #5
 800d8c0:	4298      	cmp	r0, r3
 800d8c2:	b510      	push	{r4, lr}
 800d8c4:	db11      	blt.n	800d8ea <__any_on+0x32>
 800d8c6:	dd0a      	ble.n	800d8de <__any_on+0x26>
 800d8c8:	f011 011f 	ands.w	r1, r1, #31
 800d8cc:	d007      	beq.n	800d8de <__any_on+0x26>
 800d8ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8d2:	fa24 f001 	lsr.w	r0, r4, r1
 800d8d6:	fa00 f101 	lsl.w	r1, r0, r1
 800d8da:	428c      	cmp	r4, r1
 800d8dc:	d10b      	bne.n	800d8f6 <__any_on+0x3e>
 800d8de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d803      	bhi.n	800d8ee <__any_on+0x36>
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	e7f7      	b.n	800d8de <__any_on+0x26>
 800d8ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8f2:	2900      	cmp	r1, #0
 800d8f4:	d0f5      	beq.n	800d8e2 <__any_on+0x2a>
 800d8f6:	2001      	movs	r0, #1
 800d8f8:	e7f6      	b.n	800d8e8 <__any_on+0x30>

0800d8fa <_calloc_r>:
 800d8fa:	b538      	push	{r3, r4, r5, lr}
 800d8fc:	fb02 f401 	mul.w	r4, r2, r1
 800d900:	4621      	mov	r1, r4
 800d902:	f7fd fe6f 	bl	800b5e4 <_malloc_r>
 800d906:	4605      	mov	r5, r0
 800d908:	b118      	cbz	r0, 800d912 <_calloc_r+0x18>
 800d90a:	4622      	mov	r2, r4
 800d90c:	2100      	movs	r1, #0
 800d90e:	f7fd fe12 	bl	800b536 <memset>
 800d912:	4628      	mov	r0, r5
 800d914:	bd38      	pop	{r3, r4, r5, pc}

0800d916 <__ssputs_r>:
 800d916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d91a:	688e      	ldr	r6, [r1, #8]
 800d91c:	429e      	cmp	r6, r3
 800d91e:	4682      	mov	sl, r0
 800d920:	460c      	mov	r4, r1
 800d922:	4690      	mov	r8, r2
 800d924:	4699      	mov	r9, r3
 800d926:	d837      	bhi.n	800d998 <__ssputs_r+0x82>
 800d928:	898a      	ldrh	r2, [r1, #12]
 800d92a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d92e:	d031      	beq.n	800d994 <__ssputs_r+0x7e>
 800d930:	6825      	ldr	r5, [r4, #0]
 800d932:	6909      	ldr	r1, [r1, #16]
 800d934:	1a6f      	subs	r7, r5, r1
 800d936:	6965      	ldr	r5, [r4, #20]
 800d938:	2302      	movs	r3, #2
 800d93a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d93e:	fb95 f5f3 	sdiv	r5, r5, r3
 800d942:	f109 0301 	add.w	r3, r9, #1
 800d946:	443b      	add	r3, r7
 800d948:	429d      	cmp	r5, r3
 800d94a:	bf38      	it	cc
 800d94c:	461d      	movcc	r5, r3
 800d94e:	0553      	lsls	r3, r2, #21
 800d950:	d530      	bpl.n	800d9b4 <__ssputs_r+0x9e>
 800d952:	4629      	mov	r1, r5
 800d954:	f7fd fe46 	bl	800b5e4 <_malloc_r>
 800d958:	4606      	mov	r6, r0
 800d95a:	b950      	cbnz	r0, 800d972 <__ssputs_r+0x5c>
 800d95c:	230c      	movs	r3, #12
 800d95e:	f8ca 3000 	str.w	r3, [sl]
 800d962:	89a3      	ldrh	r3, [r4, #12]
 800d964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d968:	81a3      	strh	r3, [r4, #12]
 800d96a:	f04f 30ff 	mov.w	r0, #4294967295
 800d96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d972:	463a      	mov	r2, r7
 800d974:	6921      	ldr	r1, [r4, #16]
 800d976:	f7fd fdba 	bl	800b4ee <memcpy>
 800d97a:	89a3      	ldrh	r3, [r4, #12]
 800d97c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d984:	81a3      	strh	r3, [r4, #12]
 800d986:	6126      	str	r6, [r4, #16]
 800d988:	6165      	str	r5, [r4, #20]
 800d98a:	443e      	add	r6, r7
 800d98c:	1bed      	subs	r5, r5, r7
 800d98e:	6026      	str	r6, [r4, #0]
 800d990:	60a5      	str	r5, [r4, #8]
 800d992:	464e      	mov	r6, r9
 800d994:	454e      	cmp	r6, r9
 800d996:	d900      	bls.n	800d99a <__ssputs_r+0x84>
 800d998:	464e      	mov	r6, r9
 800d99a:	4632      	mov	r2, r6
 800d99c:	4641      	mov	r1, r8
 800d99e:	6820      	ldr	r0, [r4, #0]
 800d9a0:	f7fd fdb0 	bl	800b504 <memmove>
 800d9a4:	68a3      	ldr	r3, [r4, #8]
 800d9a6:	1b9b      	subs	r3, r3, r6
 800d9a8:	60a3      	str	r3, [r4, #8]
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	441e      	add	r6, r3
 800d9ae:	6026      	str	r6, [r4, #0]
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	e7dc      	b.n	800d96e <__ssputs_r+0x58>
 800d9b4:	462a      	mov	r2, r5
 800d9b6:	f000 fc30 	bl	800e21a <_realloc_r>
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	2800      	cmp	r0, #0
 800d9be:	d1e2      	bne.n	800d986 <__ssputs_r+0x70>
 800d9c0:	6921      	ldr	r1, [r4, #16]
 800d9c2:	4650      	mov	r0, sl
 800d9c4:	f7fd fdc0 	bl	800b548 <_free_r>
 800d9c8:	e7c8      	b.n	800d95c <__ssputs_r+0x46>
	...

0800d9cc <_svfiprintf_r>:
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	461d      	mov	r5, r3
 800d9d2:	898b      	ldrh	r3, [r1, #12]
 800d9d4:	061f      	lsls	r7, r3, #24
 800d9d6:	b09d      	sub	sp, #116	; 0x74
 800d9d8:	4680      	mov	r8, r0
 800d9da:	460c      	mov	r4, r1
 800d9dc:	4616      	mov	r6, r2
 800d9de:	d50f      	bpl.n	800da00 <_svfiprintf_r+0x34>
 800d9e0:	690b      	ldr	r3, [r1, #16]
 800d9e2:	b96b      	cbnz	r3, 800da00 <_svfiprintf_r+0x34>
 800d9e4:	2140      	movs	r1, #64	; 0x40
 800d9e6:	f7fd fdfd 	bl	800b5e4 <_malloc_r>
 800d9ea:	6020      	str	r0, [r4, #0]
 800d9ec:	6120      	str	r0, [r4, #16]
 800d9ee:	b928      	cbnz	r0, 800d9fc <_svfiprintf_r+0x30>
 800d9f0:	230c      	movs	r3, #12
 800d9f2:	f8c8 3000 	str.w	r3, [r8]
 800d9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9fa:	e0c8      	b.n	800db8e <_svfiprintf_r+0x1c2>
 800d9fc:	2340      	movs	r3, #64	; 0x40
 800d9fe:	6163      	str	r3, [r4, #20]
 800da00:	2300      	movs	r3, #0
 800da02:	9309      	str	r3, [sp, #36]	; 0x24
 800da04:	2320      	movs	r3, #32
 800da06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da0a:	2330      	movs	r3, #48	; 0x30
 800da0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da10:	9503      	str	r5, [sp, #12]
 800da12:	f04f 0b01 	mov.w	fp, #1
 800da16:	4637      	mov	r7, r6
 800da18:	463d      	mov	r5, r7
 800da1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da1e:	b10b      	cbz	r3, 800da24 <_svfiprintf_r+0x58>
 800da20:	2b25      	cmp	r3, #37	; 0x25
 800da22:	d13e      	bne.n	800daa2 <_svfiprintf_r+0xd6>
 800da24:	ebb7 0a06 	subs.w	sl, r7, r6
 800da28:	d00b      	beq.n	800da42 <_svfiprintf_r+0x76>
 800da2a:	4653      	mov	r3, sl
 800da2c:	4632      	mov	r2, r6
 800da2e:	4621      	mov	r1, r4
 800da30:	4640      	mov	r0, r8
 800da32:	f7ff ff70 	bl	800d916 <__ssputs_r>
 800da36:	3001      	adds	r0, #1
 800da38:	f000 80a4 	beq.w	800db84 <_svfiprintf_r+0x1b8>
 800da3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da3e:	4453      	add	r3, sl
 800da40:	9309      	str	r3, [sp, #36]	; 0x24
 800da42:	783b      	ldrb	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	f000 809d 	beq.w	800db84 <_svfiprintf_r+0x1b8>
 800da4a:	2300      	movs	r3, #0
 800da4c:	f04f 32ff 	mov.w	r2, #4294967295
 800da50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da54:	9304      	str	r3, [sp, #16]
 800da56:	9307      	str	r3, [sp, #28]
 800da58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da5c:	931a      	str	r3, [sp, #104]	; 0x68
 800da5e:	462f      	mov	r7, r5
 800da60:	2205      	movs	r2, #5
 800da62:	f817 1b01 	ldrb.w	r1, [r7], #1
 800da66:	4850      	ldr	r0, [pc, #320]	; (800dba8 <_svfiprintf_r+0x1dc>)
 800da68:	f7f2 fbba 	bl	80001e0 <memchr>
 800da6c:	9b04      	ldr	r3, [sp, #16]
 800da6e:	b9d0      	cbnz	r0, 800daa6 <_svfiprintf_r+0xda>
 800da70:	06d9      	lsls	r1, r3, #27
 800da72:	bf44      	itt	mi
 800da74:	2220      	movmi	r2, #32
 800da76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da7a:	071a      	lsls	r2, r3, #28
 800da7c:	bf44      	itt	mi
 800da7e:	222b      	movmi	r2, #43	; 0x2b
 800da80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da84:	782a      	ldrb	r2, [r5, #0]
 800da86:	2a2a      	cmp	r2, #42	; 0x2a
 800da88:	d015      	beq.n	800dab6 <_svfiprintf_r+0xea>
 800da8a:	9a07      	ldr	r2, [sp, #28]
 800da8c:	462f      	mov	r7, r5
 800da8e:	2000      	movs	r0, #0
 800da90:	250a      	movs	r5, #10
 800da92:	4639      	mov	r1, r7
 800da94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da98:	3b30      	subs	r3, #48	; 0x30
 800da9a:	2b09      	cmp	r3, #9
 800da9c:	d94d      	bls.n	800db3a <_svfiprintf_r+0x16e>
 800da9e:	b1b8      	cbz	r0, 800dad0 <_svfiprintf_r+0x104>
 800daa0:	e00f      	b.n	800dac2 <_svfiprintf_r+0xf6>
 800daa2:	462f      	mov	r7, r5
 800daa4:	e7b8      	b.n	800da18 <_svfiprintf_r+0x4c>
 800daa6:	4a40      	ldr	r2, [pc, #256]	; (800dba8 <_svfiprintf_r+0x1dc>)
 800daa8:	1a80      	subs	r0, r0, r2
 800daaa:	fa0b f000 	lsl.w	r0, fp, r0
 800daae:	4318      	orrs	r0, r3
 800dab0:	9004      	str	r0, [sp, #16]
 800dab2:	463d      	mov	r5, r7
 800dab4:	e7d3      	b.n	800da5e <_svfiprintf_r+0x92>
 800dab6:	9a03      	ldr	r2, [sp, #12]
 800dab8:	1d11      	adds	r1, r2, #4
 800daba:	6812      	ldr	r2, [r2, #0]
 800dabc:	9103      	str	r1, [sp, #12]
 800dabe:	2a00      	cmp	r2, #0
 800dac0:	db01      	blt.n	800dac6 <_svfiprintf_r+0xfa>
 800dac2:	9207      	str	r2, [sp, #28]
 800dac4:	e004      	b.n	800dad0 <_svfiprintf_r+0x104>
 800dac6:	4252      	negs	r2, r2
 800dac8:	f043 0302 	orr.w	r3, r3, #2
 800dacc:	9207      	str	r2, [sp, #28]
 800dace:	9304      	str	r3, [sp, #16]
 800dad0:	783b      	ldrb	r3, [r7, #0]
 800dad2:	2b2e      	cmp	r3, #46	; 0x2e
 800dad4:	d10c      	bne.n	800daf0 <_svfiprintf_r+0x124>
 800dad6:	787b      	ldrb	r3, [r7, #1]
 800dad8:	2b2a      	cmp	r3, #42	; 0x2a
 800dada:	d133      	bne.n	800db44 <_svfiprintf_r+0x178>
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	1d1a      	adds	r2, r3, #4
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	9203      	str	r2, [sp, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	bfb8      	it	lt
 800dae8:	f04f 33ff 	movlt.w	r3, #4294967295
 800daec:	3702      	adds	r7, #2
 800daee:	9305      	str	r3, [sp, #20]
 800daf0:	4d2e      	ldr	r5, [pc, #184]	; (800dbac <_svfiprintf_r+0x1e0>)
 800daf2:	7839      	ldrb	r1, [r7, #0]
 800daf4:	2203      	movs	r2, #3
 800daf6:	4628      	mov	r0, r5
 800daf8:	f7f2 fb72 	bl	80001e0 <memchr>
 800dafc:	b138      	cbz	r0, 800db0e <_svfiprintf_r+0x142>
 800dafe:	2340      	movs	r3, #64	; 0x40
 800db00:	1b40      	subs	r0, r0, r5
 800db02:	fa03 f000 	lsl.w	r0, r3, r0
 800db06:	9b04      	ldr	r3, [sp, #16]
 800db08:	4303      	orrs	r3, r0
 800db0a:	3701      	adds	r7, #1
 800db0c:	9304      	str	r3, [sp, #16]
 800db0e:	7839      	ldrb	r1, [r7, #0]
 800db10:	4827      	ldr	r0, [pc, #156]	; (800dbb0 <_svfiprintf_r+0x1e4>)
 800db12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db16:	2206      	movs	r2, #6
 800db18:	1c7e      	adds	r6, r7, #1
 800db1a:	f7f2 fb61 	bl	80001e0 <memchr>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d038      	beq.n	800db94 <_svfiprintf_r+0x1c8>
 800db22:	4b24      	ldr	r3, [pc, #144]	; (800dbb4 <_svfiprintf_r+0x1e8>)
 800db24:	bb13      	cbnz	r3, 800db6c <_svfiprintf_r+0x1a0>
 800db26:	9b03      	ldr	r3, [sp, #12]
 800db28:	3307      	adds	r3, #7
 800db2a:	f023 0307 	bic.w	r3, r3, #7
 800db2e:	3308      	adds	r3, #8
 800db30:	9303      	str	r3, [sp, #12]
 800db32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db34:	444b      	add	r3, r9
 800db36:	9309      	str	r3, [sp, #36]	; 0x24
 800db38:	e76d      	b.n	800da16 <_svfiprintf_r+0x4a>
 800db3a:	fb05 3202 	mla	r2, r5, r2, r3
 800db3e:	2001      	movs	r0, #1
 800db40:	460f      	mov	r7, r1
 800db42:	e7a6      	b.n	800da92 <_svfiprintf_r+0xc6>
 800db44:	2300      	movs	r3, #0
 800db46:	3701      	adds	r7, #1
 800db48:	9305      	str	r3, [sp, #20]
 800db4a:	4619      	mov	r1, r3
 800db4c:	250a      	movs	r5, #10
 800db4e:	4638      	mov	r0, r7
 800db50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db54:	3a30      	subs	r2, #48	; 0x30
 800db56:	2a09      	cmp	r2, #9
 800db58:	d903      	bls.n	800db62 <_svfiprintf_r+0x196>
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d0c8      	beq.n	800daf0 <_svfiprintf_r+0x124>
 800db5e:	9105      	str	r1, [sp, #20]
 800db60:	e7c6      	b.n	800daf0 <_svfiprintf_r+0x124>
 800db62:	fb05 2101 	mla	r1, r5, r1, r2
 800db66:	2301      	movs	r3, #1
 800db68:	4607      	mov	r7, r0
 800db6a:	e7f0      	b.n	800db4e <_svfiprintf_r+0x182>
 800db6c:	ab03      	add	r3, sp, #12
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	4622      	mov	r2, r4
 800db72:	4b11      	ldr	r3, [pc, #68]	; (800dbb8 <_svfiprintf_r+0x1ec>)
 800db74:	a904      	add	r1, sp, #16
 800db76:	4640      	mov	r0, r8
 800db78:	f3af 8000 	nop.w
 800db7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800db80:	4681      	mov	r9, r0
 800db82:	d1d6      	bne.n	800db32 <_svfiprintf_r+0x166>
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	065b      	lsls	r3, r3, #25
 800db88:	f53f af35 	bmi.w	800d9f6 <_svfiprintf_r+0x2a>
 800db8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db8e:	b01d      	add	sp, #116	; 0x74
 800db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db94:	ab03      	add	r3, sp, #12
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	4622      	mov	r2, r4
 800db9a:	4b07      	ldr	r3, [pc, #28]	; (800dbb8 <_svfiprintf_r+0x1ec>)
 800db9c:	a904      	add	r1, sp, #16
 800db9e:	4640      	mov	r0, r8
 800dba0:	f000 f9c2 	bl	800df28 <_printf_i>
 800dba4:	e7ea      	b.n	800db7c <_svfiprintf_r+0x1b0>
 800dba6:	bf00      	nop
 800dba8:	08010524 	.word	0x08010524
 800dbac:	0801052a 	.word	0x0801052a
 800dbb0:	0801052e 	.word	0x0801052e
 800dbb4:	00000000 	.word	0x00000000
 800dbb8:	0800d917 	.word	0x0800d917

0800dbbc <__sfputc_r>:
 800dbbc:	6893      	ldr	r3, [r2, #8]
 800dbbe:	3b01      	subs	r3, #1
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	b410      	push	{r4}
 800dbc4:	6093      	str	r3, [r2, #8]
 800dbc6:	da08      	bge.n	800dbda <__sfputc_r+0x1e>
 800dbc8:	6994      	ldr	r4, [r2, #24]
 800dbca:	42a3      	cmp	r3, r4
 800dbcc:	db01      	blt.n	800dbd2 <__sfputc_r+0x16>
 800dbce:	290a      	cmp	r1, #10
 800dbd0:	d103      	bne.n	800dbda <__sfputc_r+0x1e>
 800dbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbd6:	f7fe be3b 	b.w	800c850 <__swbuf_r>
 800dbda:	6813      	ldr	r3, [r2, #0]
 800dbdc:	1c58      	adds	r0, r3, #1
 800dbde:	6010      	str	r0, [r2, #0]
 800dbe0:	7019      	strb	r1, [r3, #0]
 800dbe2:	4608      	mov	r0, r1
 800dbe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <__sfputs_r>:
 800dbea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbec:	4606      	mov	r6, r0
 800dbee:	460f      	mov	r7, r1
 800dbf0:	4614      	mov	r4, r2
 800dbf2:	18d5      	adds	r5, r2, r3
 800dbf4:	42ac      	cmp	r4, r5
 800dbf6:	d101      	bne.n	800dbfc <__sfputs_r+0x12>
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	e007      	b.n	800dc0c <__sfputs_r+0x22>
 800dbfc:	463a      	mov	r2, r7
 800dbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc02:	4630      	mov	r0, r6
 800dc04:	f7ff ffda 	bl	800dbbc <__sfputc_r>
 800dc08:	1c43      	adds	r3, r0, #1
 800dc0a:	d1f3      	bne.n	800dbf4 <__sfputs_r+0xa>
 800dc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc10 <_vfiprintf_r>:
 800dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc14:	460c      	mov	r4, r1
 800dc16:	b09d      	sub	sp, #116	; 0x74
 800dc18:	4617      	mov	r7, r2
 800dc1a:	461d      	mov	r5, r3
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	b118      	cbz	r0, 800dc28 <_vfiprintf_r+0x18>
 800dc20:	6983      	ldr	r3, [r0, #24]
 800dc22:	b90b      	cbnz	r3, 800dc28 <_vfiprintf_r+0x18>
 800dc24:	f7fd fb32 	bl	800b28c <__sinit>
 800dc28:	4b7c      	ldr	r3, [pc, #496]	; (800de1c <_vfiprintf_r+0x20c>)
 800dc2a:	429c      	cmp	r4, r3
 800dc2c:	d158      	bne.n	800dce0 <_vfiprintf_r+0xd0>
 800dc2e:	6874      	ldr	r4, [r6, #4]
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	0718      	lsls	r0, r3, #28
 800dc34:	d55e      	bpl.n	800dcf4 <_vfiprintf_r+0xe4>
 800dc36:	6923      	ldr	r3, [r4, #16]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d05b      	beq.n	800dcf4 <_vfiprintf_r+0xe4>
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc40:	2320      	movs	r3, #32
 800dc42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc46:	2330      	movs	r3, #48	; 0x30
 800dc48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc4c:	9503      	str	r5, [sp, #12]
 800dc4e:	f04f 0b01 	mov.w	fp, #1
 800dc52:	46b8      	mov	r8, r7
 800dc54:	4645      	mov	r5, r8
 800dc56:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dc5a:	b10b      	cbz	r3, 800dc60 <_vfiprintf_r+0x50>
 800dc5c:	2b25      	cmp	r3, #37	; 0x25
 800dc5e:	d154      	bne.n	800dd0a <_vfiprintf_r+0xfa>
 800dc60:	ebb8 0a07 	subs.w	sl, r8, r7
 800dc64:	d00b      	beq.n	800dc7e <_vfiprintf_r+0x6e>
 800dc66:	4653      	mov	r3, sl
 800dc68:	463a      	mov	r2, r7
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	f7ff ffbc 	bl	800dbea <__sfputs_r>
 800dc72:	3001      	adds	r0, #1
 800dc74:	f000 80c2 	beq.w	800ddfc <_vfiprintf_r+0x1ec>
 800dc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc7a:	4453      	add	r3, sl
 800dc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc7e:	f898 3000 	ldrb.w	r3, [r8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f000 80ba 	beq.w	800ddfc <_vfiprintf_r+0x1ec>
 800dc88:	2300      	movs	r3, #0
 800dc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc92:	9304      	str	r3, [sp, #16]
 800dc94:	9307      	str	r3, [sp, #28]
 800dc96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc9a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc9c:	46a8      	mov	r8, r5
 800dc9e:	2205      	movs	r2, #5
 800dca0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dca4:	485e      	ldr	r0, [pc, #376]	; (800de20 <_vfiprintf_r+0x210>)
 800dca6:	f7f2 fa9b 	bl	80001e0 <memchr>
 800dcaa:	9b04      	ldr	r3, [sp, #16]
 800dcac:	bb78      	cbnz	r0, 800dd0e <_vfiprintf_r+0xfe>
 800dcae:	06d9      	lsls	r1, r3, #27
 800dcb0:	bf44      	itt	mi
 800dcb2:	2220      	movmi	r2, #32
 800dcb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dcb8:	071a      	lsls	r2, r3, #28
 800dcba:	bf44      	itt	mi
 800dcbc:	222b      	movmi	r2, #43	; 0x2b
 800dcbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dcc2:	782a      	ldrb	r2, [r5, #0]
 800dcc4:	2a2a      	cmp	r2, #42	; 0x2a
 800dcc6:	d02a      	beq.n	800dd1e <_vfiprintf_r+0x10e>
 800dcc8:	9a07      	ldr	r2, [sp, #28]
 800dcca:	46a8      	mov	r8, r5
 800dccc:	2000      	movs	r0, #0
 800dcce:	250a      	movs	r5, #10
 800dcd0:	4641      	mov	r1, r8
 800dcd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcd6:	3b30      	subs	r3, #48	; 0x30
 800dcd8:	2b09      	cmp	r3, #9
 800dcda:	d969      	bls.n	800ddb0 <_vfiprintf_r+0x1a0>
 800dcdc:	b360      	cbz	r0, 800dd38 <_vfiprintf_r+0x128>
 800dcde:	e024      	b.n	800dd2a <_vfiprintf_r+0x11a>
 800dce0:	4b50      	ldr	r3, [pc, #320]	; (800de24 <_vfiprintf_r+0x214>)
 800dce2:	429c      	cmp	r4, r3
 800dce4:	d101      	bne.n	800dcea <_vfiprintf_r+0xda>
 800dce6:	68b4      	ldr	r4, [r6, #8]
 800dce8:	e7a2      	b.n	800dc30 <_vfiprintf_r+0x20>
 800dcea:	4b4f      	ldr	r3, [pc, #316]	; (800de28 <_vfiprintf_r+0x218>)
 800dcec:	429c      	cmp	r4, r3
 800dcee:	bf08      	it	eq
 800dcf0:	68f4      	ldreq	r4, [r6, #12]
 800dcf2:	e79d      	b.n	800dc30 <_vfiprintf_r+0x20>
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f7fe fe0e 	bl	800c918 <__swsetup_r>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	d09d      	beq.n	800dc3c <_vfiprintf_r+0x2c>
 800dd00:	f04f 30ff 	mov.w	r0, #4294967295
 800dd04:	b01d      	add	sp, #116	; 0x74
 800dd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0a:	46a8      	mov	r8, r5
 800dd0c:	e7a2      	b.n	800dc54 <_vfiprintf_r+0x44>
 800dd0e:	4a44      	ldr	r2, [pc, #272]	; (800de20 <_vfiprintf_r+0x210>)
 800dd10:	1a80      	subs	r0, r0, r2
 800dd12:	fa0b f000 	lsl.w	r0, fp, r0
 800dd16:	4318      	orrs	r0, r3
 800dd18:	9004      	str	r0, [sp, #16]
 800dd1a:	4645      	mov	r5, r8
 800dd1c:	e7be      	b.n	800dc9c <_vfiprintf_r+0x8c>
 800dd1e:	9a03      	ldr	r2, [sp, #12]
 800dd20:	1d11      	adds	r1, r2, #4
 800dd22:	6812      	ldr	r2, [r2, #0]
 800dd24:	9103      	str	r1, [sp, #12]
 800dd26:	2a00      	cmp	r2, #0
 800dd28:	db01      	blt.n	800dd2e <_vfiprintf_r+0x11e>
 800dd2a:	9207      	str	r2, [sp, #28]
 800dd2c:	e004      	b.n	800dd38 <_vfiprintf_r+0x128>
 800dd2e:	4252      	negs	r2, r2
 800dd30:	f043 0302 	orr.w	r3, r3, #2
 800dd34:	9207      	str	r2, [sp, #28]
 800dd36:	9304      	str	r3, [sp, #16]
 800dd38:	f898 3000 	ldrb.w	r3, [r8]
 800dd3c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd3e:	d10e      	bne.n	800dd5e <_vfiprintf_r+0x14e>
 800dd40:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dd44:	2b2a      	cmp	r3, #42	; 0x2a
 800dd46:	d138      	bne.n	800ddba <_vfiprintf_r+0x1aa>
 800dd48:	9b03      	ldr	r3, [sp, #12]
 800dd4a:	1d1a      	adds	r2, r3, #4
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	9203      	str	r2, [sp, #12]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	bfb8      	it	lt
 800dd54:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd58:	f108 0802 	add.w	r8, r8, #2
 800dd5c:	9305      	str	r3, [sp, #20]
 800dd5e:	4d33      	ldr	r5, [pc, #204]	; (800de2c <_vfiprintf_r+0x21c>)
 800dd60:	f898 1000 	ldrb.w	r1, [r8]
 800dd64:	2203      	movs	r2, #3
 800dd66:	4628      	mov	r0, r5
 800dd68:	f7f2 fa3a 	bl	80001e0 <memchr>
 800dd6c:	b140      	cbz	r0, 800dd80 <_vfiprintf_r+0x170>
 800dd6e:	2340      	movs	r3, #64	; 0x40
 800dd70:	1b40      	subs	r0, r0, r5
 800dd72:	fa03 f000 	lsl.w	r0, r3, r0
 800dd76:	9b04      	ldr	r3, [sp, #16]
 800dd78:	4303      	orrs	r3, r0
 800dd7a:	f108 0801 	add.w	r8, r8, #1
 800dd7e:	9304      	str	r3, [sp, #16]
 800dd80:	f898 1000 	ldrb.w	r1, [r8]
 800dd84:	482a      	ldr	r0, [pc, #168]	; (800de30 <_vfiprintf_r+0x220>)
 800dd86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd8a:	2206      	movs	r2, #6
 800dd8c:	f108 0701 	add.w	r7, r8, #1
 800dd90:	f7f2 fa26 	bl	80001e0 <memchr>
 800dd94:	2800      	cmp	r0, #0
 800dd96:	d037      	beq.n	800de08 <_vfiprintf_r+0x1f8>
 800dd98:	4b26      	ldr	r3, [pc, #152]	; (800de34 <_vfiprintf_r+0x224>)
 800dd9a:	bb1b      	cbnz	r3, 800dde4 <_vfiprintf_r+0x1d4>
 800dd9c:	9b03      	ldr	r3, [sp, #12]
 800dd9e:	3307      	adds	r3, #7
 800dda0:	f023 0307 	bic.w	r3, r3, #7
 800dda4:	3308      	adds	r3, #8
 800dda6:	9303      	str	r3, [sp, #12]
 800dda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddaa:	444b      	add	r3, r9
 800ddac:	9309      	str	r3, [sp, #36]	; 0x24
 800ddae:	e750      	b.n	800dc52 <_vfiprintf_r+0x42>
 800ddb0:	fb05 3202 	mla	r2, r5, r2, r3
 800ddb4:	2001      	movs	r0, #1
 800ddb6:	4688      	mov	r8, r1
 800ddb8:	e78a      	b.n	800dcd0 <_vfiprintf_r+0xc0>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	f108 0801 	add.w	r8, r8, #1
 800ddc0:	9305      	str	r3, [sp, #20]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	250a      	movs	r5, #10
 800ddc6:	4640      	mov	r0, r8
 800ddc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddcc:	3a30      	subs	r2, #48	; 0x30
 800ddce:	2a09      	cmp	r2, #9
 800ddd0:	d903      	bls.n	800ddda <_vfiprintf_r+0x1ca>
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d0c3      	beq.n	800dd5e <_vfiprintf_r+0x14e>
 800ddd6:	9105      	str	r1, [sp, #20]
 800ddd8:	e7c1      	b.n	800dd5e <_vfiprintf_r+0x14e>
 800ddda:	fb05 2101 	mla	r1, r5, r1, r2
 800ddde:	2301      	movs	r3, #1
 800dde0:	4680      	mov	r8, r0
 800dde2:	e7f0      	b.n	800ddc6 <_vfiprintf_r+0x1b6>
 800dde4:	ab03      	add	r3, sp, #12
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	4622      	mov	r2, r4
 800ddea:	4b13      	ldr	r3, [pc, #76]	; (800de38 <_vfiprintf_r+0x228>)
 800ddec:	a904      	add	r1, sp, #16
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f3af 8000 	nop.w
 800ddf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ddf8:	4681      	mov	r9, r0
 800ddfa:	d1d5      	bne.n	800dda8 <_vfiprintf_r+0x198>
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	065b      	lsls	r3, r3, #25
 800de00:	f53f af7e 	bmi.w	800dd00 <_vfiprintf_r+0xf0>
 800de04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de06:	e77d      	b.n	800dd04 <_vfiprintf_r+0xf4>
 800de08:	ab03      	add	r3, sp, #12
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	4622      	mov	r2, r4
 800de0e:	4b0a      	ldr	r3, [pc, #40]	; (800de38 <_vfiprintf_r+0x228>)
 800de10:	a904      	add	r1, sp, #16
 800de12:	4630      	mov	r0, r6
 800de14:	f000 f888 	bl	800df28 <_printf_i>
 800de18:	e7ec      	b.n	800ddf4 <_vfiprintf_r+0x1e4>
 800de1a:	bf00      	nop
 800de1c:	08010378 	.word	0x08010378
 800de20:	08010524 	.word	0x08010524
 800de24:	08010398 	.word	0x08010398
 800de28:	08010358 	.word	0x08010358
 800de2c:	0801052a 	.word	0x0801052a
 800de30:	0801052e 	.word	0x0801052e
 800de34:	00000000 	.word	0x00000000
 800de38:	0800dbeb 	.word	0x0800dbeb

0800de3c <_printf_common>:
 800de3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de40:	4691      	mov	r9, r2
 800de42:	461f      	mov	r7, r3
 800de44:	688a      	ldr	r2, [r1, #8]
 800de46:	690b      	ldr	r3, [r1, #16]
 800de48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de4c:	4293      	cmp	r3, r2
 800de4e:	bfb8      	it	lt
 800de50:	4613      	movlt	r3, r2
 800de52:	f8c9 3000 	str.w	r3, [r9]
 800de56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de5a:	4606      	mov	r6, r0
 800de5c:	460c      	mov	r4, r1
 800de5e:	b112      	cbz	r2, 800de66 <_printf_common+0x2a>
 800de60:	3301      	adds	r3, #1
 800de62:	f8c9 3000 	str.w	r3, [r9]
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	0699      	lsls	r1, r3, #26
 800de6a:	bf42      	ittt	mi
 800de6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800de70:	3302      	addmi	r3, #2
 800de72:	f8c9 3000 	strmi.w	r3, [r9]
 800de76:	6825      	ldr	r5, [r4, #0]
 800de78:	f015 0506 	ands.w	r5, r5, #6
 800de7c:	d107      	bne.n	800de8e <_printf_common+0x52>
 800de7e:	f104 0a19 	add.w	sl, r4, #25
 800de82:	68e3      	ldr	r3, [r4, #12]
 800de84:	f8d9 2000 	ldr.w	r2, [r9]
 800de88:	1a9b      	subs	r3, r3, r2
 800de8a:	42ab      	cmp	r3, r5
 800de8c:	dc28      	bgt.n	800dee0 <_printf_common+0xa4>
 800de8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800de92:	6822      	ldr	r2, [r4, #0]
 800de94:	3300      	adds	r3, #0
 800de96:	bf18      	it	ne
 800de98:	2301      	movne	r3, #1
 800de9a:	0692      	lsls	r2, r2, #26
 800de9c:	d42d      	bmi.n	800defa <_printf_common+0xbe>
 800de9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dea2:	4639      	mov	r1, r7
 800dea4:	4630      	mov	r0, r6
 800dea6:	47c0      	blx	r8
 800dea8:	3001      	adds	r0, #1
 800deaa:	d020      	beq.n	800deee <_printf_common+0xb2>
 800deac:	6823      	ldr	r3, [r4, #0]
 800deae:	68e5      	ldr	r5, [r4, #12]
 800deb0:	f8d9 2000 	ldr.w	r2, [r9]
 800deb4:	f003 0306 	and.w	r3, r3, #6
 800deb8:	2b04      	cmp	r3, #4
 800deba:	bf08      	it	eq
 800debc:	1aad      	subeq	r5, r5, r2
 800debe:	68a3      	ldr	r3, [r4, #8]
 800dec0:	6922      	ldr	r2, [r4, #16]
 800dec2:	bf0c      	ite	eq
 800dec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dec8:	2500      	movne	r5, #0
 800deca:	4293      	cmp	r3, r2
 800decc:	bfc4      	itt	gt
 800dece:	1a9b      	subgt	r3, r3, r2
 800ded0:	18ed      	addgt	r5, r5, r3
 800ded2:	f04f 0900 	mov.w	r9, #0
 800ded6:	341a      	adds	r4, #26
 800ded8:	454d      	cmp	r5, r9
 800deda:	d11a      	bne.n	800df12 <_printf_common+0xd6>
 800dedc:	2000      	movs	r0, #0
 800dede:	e008      	b.n	800def2 <_printf_common+0xb6>
 800dee0:	2301      	movs	r3, #1
 800dee2:	4652      	mov	r2, sl
 800dee4:	4639      	mov	r1, r7
 800dee6:	4630      	mov	r0, r6
 800dee8:	47c0      	blx	r8
 800deea:	3001      	adds	r0, #1
 800deec:	d103      	bne.n	800def6 <_printf_common+0xba>
 800deee:	f04f 30ff 	mov.w	r0, #4294967295
 800def2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def6:	3501      	adds	r5, #1
 800def8:	e7c3      	b.n	800de82 <_printf_common+0x46>
 800defa:	18e1      	adds	r1, r4, r3
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	2030      	movs	r0, #48	; 0x30
 800df00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df04:	4422      	add	r2, r4
 800df06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df0e:	3302      	adds	r3, #2
 800df10:	e7c5      	b.n	800de9e <_printf_common+0x62>
 800df12:	2301      	movs	r3, #1
 800df14:	4622      	mov	r2, r4
 800df16:	4639      	mov	r1, r7
 800df18:	4630      	mov	r0, r6
 800df1a:	47c0      	blx	r8
 800df1c:	3001      	adds	r0, #1
 800df1e:	d0e6      	beq.n	800deee <_printf_common+0xb2>
 800df20:	f109 0901 	add.w	r9, r9, #1
 800df24:	e7d8      	b.n	800ded8 <_printf_common+0x9c>
	...

0800df28 <_printf_i>:
 800df28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800df30:	460c      	mov	r4, r1
 800df32:	7e09      	ldrb	r1, [r1, #24]
 800df34:	b085      	sub	sp, #20
 800df36:	296e      	cmp	r1, #110	; 0x6e
 800df38:	4617      	mov	r7, r2
 800df3a:	4606      	mov	r6, r0
 800df3c:	4698      	mov	r8, r3
 800df3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df40:	f000 80b3 	beq.w	800e0aa <_printf_i+0x182>
 800df44:	d822      	bhi.n	800df8c <_printf_i+0x64>
 800df46:	2963      	cmp	r1, #99	; 0x63
 800df48:	d036      	beq.n	800dfb8 <_printf_i+0x90>
 800df4a:	d80a      	bhi.n	800df62 <_printf_i+0x3a>
 800df4c:	2900      	cmp	r1, #0
 800df4e:	f000 80b9 	beq.w	800e0c4 <_printf_i+0x19c>
 800df52:	2958      	cmp	r1, #88	; 0x58
 800df54:	f000 8083 	beq.w	800e05e <_printf_i+0x136>
 800df58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800df60:	e032      	b.n	800dfc8 <_printf_i+0xa0>
 800df62:	2964      	cmp	r1, #100	; 0x64
 800df64:	d001      	beq.n	800df6a <_printf_i+0x42>
 800df66:	2969      	cmp	r1, #105	; 0x69
 800df68:	d1f6      	bne.n	800df58 <_printf_i+0x30>
 800df6a:	6820      	ldr	r0, [r4, #0]
 800df6c:	6813      	ldr	r3, [r2, #0]
 800df6e:	0605      	lsls	r5, r0, #24
 800df70:	f103 0104 	add.w	r1, r3, #4
 800df74:	d52a      	bpl.n	800dfcc <_printf_i+0xa4>
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	6011      	str	r1, [r2, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	da03      	bge.n	800df86 <_printf_i+0x5e>
 800df7e:	222d      	movs	r2, #45	; 0x2d
 800df80:	425b      	negs	r3, r3
 800df82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800df86:	486f      	ldr	r0, [pc, #444]	; (800e144 <_printf_i+0x21c>)
 800df88:	220a      	movs	r2, #10
 800df8a:	e039      	b.n	800e000 <_printf_i+0xd8>
 800df8c:	2973      	cmp	r1, #115	; 0x73
 800df8e:	f000 809d 	beq.w	800e0cc <_printf_i+0x1a4>
 800df92:	d808      	bhi.n	800dfa6 <_printf_i+0x7e>
 800df94:	296f      	cmp	r1, #111	; 0x6f
 800df96:	d020      	beq.n	800dfda <_printf_i+0xb2>
 800df98:	2970      	cmp	r1, #112	; 0x70
 800df9a:	d1dd      	bne.n	800df58 <_printf_i+0x30>
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	f043 0320 	orr.w	r3, r3, #32
 800dfa2:	6023      	str	r3, [r4, #0]
 800dfa4:	e003      	b.n	800dfae <_printf_i+0x86>
 800dfa6:	2975      	cmp	r1, #117	; 0x75
 800dfa8:	d017      	beq.n	800dfda <_printf_i+0xb2>
 800dfaa:	2978      	cmp	r1, #120	; 0x78
 800dfac:	d1d4      	bne.n	800df58 <_printf_i+0x30>
 800dfae:	2378      	movs	r3, #120	; 0x78
 800dfb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfb4:	4864      	ldr	r0, [pc, #400]	; (800e148 <_printf_i+0x220>)
 800dfb6:	e055      	b.n	800e064 <_printf_i+0x13c>
 800dfb8:	6813      	ldr	r3, [r2, #0]
 800dfba:	1d19      	adds	r1, r3, #4
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	6011      	str	r1, [r2, #0]
 800dfc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfc8:	2301      	movs	r3, #1
 800dfca:	e08c      	b.n	800e0e6 <_printf_i+0x1be>
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	6011      	str	r1, [r2, #0]
 800dfd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dfd4:	bf18      	it	ne
 800dfd6:	b21b      	sxthne	r3, r3
 800dfd8:	e7cf      	b.n	800df7a <_printf_i+0x52>
 800dfda:	6813      	ldr	r3, [r2, #0]
 800dfdc:	6825      	ldr	r5, [r4, #0]
 800dfde:	1d18      	adds	r0, r3, #4
 800dfe0:	6010      	str	r0, [r2, #0]
 800dfe2:	0628      	lsls	r0, r5, #24
 800dfe4:	d501      	bpl.n	800dfea <_printf_i+0xc2>
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	e002      	b.n	800dff0 <_printf_i+0xc8>
 800dfea:	0668      	lsls	r0, r5, #25
 800dfec:	d5fb      	bpl.n	800dfe6 <_printf_i+0xbe>
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	4854      	ldr	r0, [pc, #336]	; (800e144 <_printf_i+0x21c>)
 800dff2:	296f      	cmp	r1, #111	; 0x6f
 800dff4:	bf14      	ite	ne
 800dff6:	220a      	movne	r2, #10
 800dff8:	2208      	moveq	r2, #8
 800dffa:	2100      	movs	r1, #0
 800dffc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e000:	6865      	ldr	r5, [r4, #4]
 800e002:	60a5      	str	r5, [r4, #8]
 800e004:	2d00      	cmp	r5, #0
 800e006:	f2c0 8095 	blt.w	800e134 <_printf_i+0x20c>
 800e00a:	6821      	ldr	r1, [r4, #0]
 800e00c:	f021 0104 	bic.w	r1, r1, #4
 800e010:	6021      	str	r1, [r4, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d13d      	bne.n	800e092 <_printf_i+0x16a>
 800e016:	2d00      	cmp	r5, #0
 800e018:	f040 808e 	bne.w	800e138 <_printf_i+0x210>
 800e01c:	4665      	mov	r5, ip
 800e01e:	2a08      	cmp	r2, #8
 800e020:	d10b      	bne.n	800e03a <_printf_i+0x112>
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	07db      	lsls	r3, r3, #31
 800e026:	d508      	bpl.n	800e03a <_printf_i+0x112>
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	6862      	ldr	r2, [r4, #4]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	bfde      	ittt	le
 800e030:	2330      	movle	r3, #48	; 0x30
 800e032:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e036:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e03a:	ebac 0305 	sub.w	r3, ip, r5
 800e03e:	6123      	str	r3, [r4, #16]
 800e040:	f8cd 8000 	str.w	r8, [sp]
 800e044:	463b      	mov	r3, r7
 800e046:	aa03      	add	r2, sp, #12
 800e048:	4621      	mov	r1, r4
 800e04a:	4630      	mov	r0, r6
 800e04c:	f7ff fef6 	bl	800de3c <_printf_common>
 800e050:	3001      	adds	r0, #1
 800e052:	d14d      	bne.n	800e0f0 <_printf_i+0x1c8>
 800e054:	f04f 30ff 	mov.w	r0, #4294967295
 800e058:	b005      	add	sp, #20
 800e05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e05e:	4839      	ldr	r0, [pc, #228]	; (800e144 <_printf_i+0x21c>)
 800e060:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e064:	6813      	ldr	r3, [r2, #0]
 800e066:	6821      	ldr	r1, [r4, #0]
 800e068:	1d1d      	adds	r5, r3, #4
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	6015      	str	r5, [r2, #0]
 800e06e:	060a      	lsls	r2, r1, #24
 800e070:	d50b      	bpl.n	800e08a <_printf_i+0x162>
 800e072:	07ca      	lsls	r2, r1, #31
 800e074:	bf44      	itt	mi
 800e076:	f041 0120 	orrmi.w	r1, r1, #32
 800e07a:	6021      	strmi	r1, [r4, #0]
 800e07c:	b91b      	cbnz	r3, 800e086 <_printf_i+0x15e>
 800e07e:	6822      	ldr	r2, [r4, #0]
 800e080:	f022 0220 	bic.w	r2, r2, #32
 800e084:	6022      	str	r2, [r4, #0]
 800e086:	2210      	movs	r2, #16
 800e088:	e7b7      	b.n	800dffa <_printf_i+0xd2>
 800e08a:	064d      	lsls	r5, r1, #25
 800e08c:	bf48      	it	mi
 800e08e:	b29b      	uxthmi	r3, r3
 800e090:	e7ef      	b.n	800e072 <_printf_i+0x14a>
 800e092:	4665      	mov	r5, ip
 800e094:	fbb3 f1f2 	udiv	r1, r3, r2
 800e098:	fb02 3311 	mls	r3, r2, r1, r3
 800e09c:	5cc3      	ldrb	r3, [r0, r3]
 800e09e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	2900      	cmp	r1, #0
 800e0a6:	d1f5      	bne.n	800e094 <_printf_i+0x16c>
 800e0a8:	e7b9      	b.n	800e01e <_printf_i+0xf6>
 800e0aa:	6813      	ldr	r3, [r2, #0]
 800e0ac:	6825      	ldr	r5, [r4, #0]
 800e0ae:	6961      	ldr	r1, [r4, #20]
 800e0b0:	1d18      	adds	r0, r3, #4
 800e0b2:	6010      	str	r0, [r2, #0]
 800e0b4:	0628      	lsls	r0, r5, #24
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	d501      	bpl.n	800e0be <_printf_i+0x196>
 800e0ba:	6019      	str	r1, [r3, #0]
 800e0bc:	e002      	b.n	800e0c4 <_printf_i+0x19c>
 800e0be:	066a      	lsls	r2, r5, #25
 800e0c0:	d5fb      	bpl.n	800e0ba <_printf_i+0x192>
 800e0c2:	8019      	strh	r1, [r3, #0]
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	6123      	str	r3, [r4, #16]
 800e0c8:	4665      	mov	r5, ip
 800e0ca:	e7b9      	b.n	800e040 <_printf_i+0x118>
 800e0cc:	6813      	ldr	r3, [r2, #0]
 800e0ce:	1d19      	adds	r1, r3, #4
 800e0d0:	6011      	str	r1, [r2, #0]
 800e0d2:	681d      	ldr	r5, [r3, #0]
 800e0d4:	6862      	ldr	r2, [r4, #4]
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	4628      	mov	r0, r5
 800e0da:	f7f2 f881 	bl	80001e0 <memchr>
 800e0de:	b108      	cbz	r0, 800e0e4 <_printf_i+0x1bc>
 800e0e0:	1b40      	subs	r0, r0, r5
 800e0e2:	6060      	str	r0, [r4, #4]
 800e0e4:	6863      	ldr	r3, [r4, #4]
 800e0e6:	6123      	str	r3, [r4, #16]
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0ee:	e7a7      	b.n	800e040 <_printf_i+0x118>
 800e0f0:	6923      	ldr	r3, [r4, #16]
 800e0f2:	462a      	mov	r2, r5
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	47c0      	blx	r8
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	d0aa      	beq.n	800e054 <_printf_i+0x12c>
 800e0fe:	6823      	ldr	r3, [r4, #0]
 800e100:	079b      	lsls	r3, r3, #30
 800e102:	d413      	bmi.n	800e12c <_printf_i+0x204>
 800e104:	68e0      	ldr	r0, [r4, #12]
 800e106:	9b03      	ldr	r3, [sp, #12]
 800e108:	4298      	cmp	r0, r3
 800e10a:	bfb8      	it	lt
 800e10c:	4618      	movlt	r0, r3
 800e10e:	e7a3      	b.n	800e058 <_printf_i+0x130>
 800e110:	2301      	movs	r3, #1
 800e112:	464a      	mov	r2, r9
 800e114:	4639      	mov	r1, r7
 800e116:	4630      	mov	r0, r6
 800e118:	47c0      	blx	r8
 800e11a:	3001      	adds	r0, #1
 800e11c:	d09a      	beq.n	800e054 <_printf_i+0x12c>
 800e11e:	3501      	adds	r5, #1
 800e120:	68e3      	ldr	r3, [r4, #12]
 800e122:	9a03      	ldr	r2, [sp, #12]
 800e124:	1a9b      	subs	r3, r3, r2
 800e126:	42ab      	cmp	r3, r5
 800e128:	dcf2      	bgt.n	800e110 <_printf_i+0x1e8>
 800e12a:	e7eb      	b.n	800e104 <_printf_i+0x1dc>
 800e12c:	2500      	movs	r5, #0
 800e12e:	f104 0919 	add.w	r9, r4, #25
 800e132:	e7f5      	b.n	800e120 <_printf_i+0x1f8>
 800e134:	2b00      	cmp	r3, #0
 800e136:	d1ac      	bne.n	800e092 <_printf_i+0x16a>
 800e138:	7803      	ldrb	r3, [r0, #0]
 800e13a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e13e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e142:	e76c      	b.n	800e01e <_printf_i+0xf6>
 800e144:	08010535 	.word	0x08010535
 800e148:	08010546 	.word	0x08010546

0800e14c <_putc_r>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	460d      	mov	r5, r1
 800e150:	4614      	mov	r4, r2
 800e152:	4606      	mov	r6, r0
 800e154:	b118      	cbz	r0, 800e15e <_putc_r+0x12>
 800e156:	6983      	ldr	r3, [r0, #24]
 800e158:	b90b      	cbnz	r3, 800e15e <_putc_r+0x12>
 800e15a:	f7fd f897 	bl	800b28c <__sinit>
 800e15e:	4b13      	ldr	r3, [pc, #76]	; (800e1ac <_putc_r+0x60>)
 800e160:	429c      	cmp	r4, r3
 800e162:	d112      	bne.n	800e18a <_putc_r+0x3e>
 800e164:	6874      	ldr	r4, [r6, #4]
 800e166:	68a3      	ldr	r3, [r4, #8]
 800e168:	3b01      	subs	r3, #1
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	60a3      	str	r3, [r4, #8]
 800e16e:	da16      	bge.n	800e19e <_putc_r+0x52>
 800e170:	69a2      	ldr	r2, [r4, #24]
 800e172:	4293      	cmp	r3, r2
 800e174:	db02      	blt.n	800e17c <_putc_r+0x30>
 800e176:	b2eb      	uxtb	r3, r5
 800e178:	2b0a      	cmp	r3, #10
 800e17a:	d110      	bne.n	800e19e <_putc_r+0x52>
 800e17c:	4622      	mov	r2, r4
 800e17e:	4629      	mov	r1, r5
 800e180:	4630      	mov	r0, r6
 800e182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e186:	f7fe bb63 	b.w	800c850 <__swbuf_r>
 800e18a:	4b09      	ldr	r3, [pc, #36]	; (800e1b0 <_putc_r+0x64>)
 800e18c:	429c      	cmp	r4, r3
 800e18e:	d101      	bne.n	800e194 <_putc_r+0x48>
 800e190:	68b4      	ldr	r4, [r6, #8]
 800e192:	e7e8      	b.n	800e166 <_putc_r+0x1a>
 800e194:	4b07      	ldr	r3, [pc, #28]	; (800e1b4 <_putc_r+0x68>)
 800e196:	429c      	cmp	r4, r3
 800e198:	bf08      	it	eq
 800e19a:	68f4      	ldreq	r4, [r6, #12]
 800e19c:	e7e3      	b.n	800e166 <_putc_r+0x1a>
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	1c5a      	adds	r2, r3, #1
 800e1a2:	6022      	str	r2, [r4, #0]
 800e1a4:	701d      	strb	r5, [r3, #0]
 800e1a6:	b2e8      	uxtb	r0, r5
 800e1a8:	bd70      	pop	{r4, r5, r6, pc}
 800e1aa:	bf00      	nop
 800e1ac:	08010378 	.word	0x08010378
 800e1b0:	08010398 	.word	0x08010398
 800e1b4:	08010358 	.word	0x08010358

0800e1b8 <_read_r>:
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	4c07      	ldr	r4, [pc, #28]	; (800e1d8 <_read_r+0x20>)
 800e1bc:	4605      	mov	r5, r0
 800e1be:	4608      	mov	r0, r1
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	6022      	str	r2, [r4, #0]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	f7f9 fbca 	bl	8007960 <_read>
 800e1cc:	1c43      	adds	r3, r0, #1
 800e1ce:	d102      	bne.n	800e1d6 <_read_r+0x1e>
 800e1d0:	6823      	ldr	r3, [r4, #0]
 800e1d2:	b103      	cbz	r3, 800e1d6 <_read_r+0x1e>
 800e1d4:	602b      	str	r3, [r5, #0]
 800e1d6:	bd38      	pop	{r3, r4, r5, pc}
 800e1d8:	200008e4 	.word	0x200008e4

0800e1dc <strncmp>:
 800e1dc:	b510      	push	{r4, lr}
 800e1de:	b16a      	cbz	r2, 800e1fc <strncmp+0x20>
 800e1e0:	3901      	subs	r1, #1
 800e1e2:	1884      	adds	r4, r0, r2
 800e1e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e1e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d103      	bne.n	800e1f8 <strncmp+0x1c>
 800e1f0:	42a0      	cmp	r0, r4
 800e1f2:	d001      	beq.n	800e1f8 <strncmp+0x1c>
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1f5      	bne.n	800e1e4 <strncmp+0x8>
 800e1f8:	1a98      	subs	r0, r3, r2
 800e1fa:	bd10      	pop	{r4, pc}
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	e7fc      	b.n	800e1fa <strncmp+0x1e>

0800e200 <__ascii_wctomb>:
 800e200:	b149      	cbz	r1, 800e216 <__ascii_wctomb+0x16>
 800e202:	2aff      	cmp	r2, #255	; 0xff
 800e204:	bf85      	ittet	hi
 800e206:	238a      	movhi	r3, #138	; 0x8a
 800e208:	6003      	strhi	r3, [r0, #0]
 800e20a:	700a      	strbls	r2, [r1, #0]
 800e20c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e210:	bf98      	it	ls
 800e212:	2001      	movls	r0, #1
 800e214:	4770      	bx	lr
 800e216:	4608      	mov	r0, r1
 800e218:	4770      	bx	lr

0800e21a <_realloc_r>:
 800e21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21c:	4607      	mov	r7, r0
 800e21e:	4614      	mov	r4, r2
 800e220:	460e      	mov	r6, r1
 800e222:	b921      	cbnz	r1, 800e22e <_realloc_r+0x14>
 800e224:	4611      	mov	r1, r2
 800e226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e22a:	f7fd b9db 	b.w	800b5e4 <_malloc_r>
 800e22e:	b922      	cbnz	r2, 800e23a <_realloc_r+0x20>
 800e230:	f7fd f98a 	bl	800b548 <_free_r>
 800e234:	4625      	mov	r5, r4
 800e236:	4628      	mov	r0, r5
 800e238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e23a:	f000 f814 	bl	800e266 <_malloc_usable_size_r>
 800e23e:	42a0      	cmp	r0, r4
 800e240:	d20f      	bcs.n	800e262 <_realloc_r+0x48>
 800e242:	4621      	mov	r1, r4
 800e244:	4638      	mov	r0, r7
 800e246:	f7fd f9cd 	bl	800b5e4 <_malloc_r>
 800e24a:	4605      	mov	r5, r0
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d0f2      	beq.n	800e236 <_realloc_r+0x1c>
 800e250:	4631      	mov	r1, r6
 800e252:	4622      	mov	r2, r4
 800e254:	f7fd f94b 	bl	800b4ee <memcpy>
 800e258:	4631      	mov	r1, r6
 800e25a:	4638      	mov	r0, r7
 800e25c:	f7fd f974 	bl	800b548 <_free_r>
 800e260:	e7e9      	b.n	800e236 <_realloc_r+0x1c>
 800e262:	4635      	mov	r5, r6
 800e264:	e7e7      	b.n	800e236 <_realloc_r+0x1c>

0800e266 <_malloc_usable_size_r>:
 800e266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e26a:	1f18      	subs	r0, r3, #4
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	bfbc      	itt	lt
 800e270:	580b      	ldrlt	r3, [r1, r0]
 800e272:	18c0      	addlt	r0, r0, r3
 800e274:	4770      	bx	lr
	...

0800e278 <_init>:
 800e278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27a:	bf00      	nop
 800e27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e27e:	bc08      	pop	{r3}
 800e280:	469e      	mov	lr, r3
 800e282:	4770      	bx	lr

0800e284 <_fini>:
 800e284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e286:	bf00      	nop
 800e288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e28a:	bc08      	pop	{r3}
 800e28c:	469e      	mov	lr, r3
 800e28e:	4770      	bx	lr
