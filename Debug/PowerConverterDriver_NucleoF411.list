
PowerConverterDriver_NucleoF411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000195fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003750  080197a0  080197a0  000297a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000007dc  0801cef0  0801cef0  0002cef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000005d0  0801d6cc  0801d6cc  0002d6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dc9c  0801dc9c  00030db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801dc9c  0801dc9c  0002dc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801dcac  0801dcac  0002dcac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000db0  20000000  0801dcb4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000db0  0801ea64  00030db0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010fc  0801ea64  000310fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030db0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033795  00000000  00000000  00030de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048fa  00000000  00000000  00064575  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  00068e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00069d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc91  00000000  00000000  0006ab00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea85  00000000  00000000  00087791  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a175b  00000000  00000000  00096216  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a06c  00000000  00000000  001379ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000db0 	.word	0x20000db0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08019784 	.word	0x08019784

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000db4 	.word	0x20000db4
 80001dc:	08019784 	.word	0x08019784

080001e0 <d_make_comp>:
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
 80001e2:	1e4c      	subs	r4, r1, #1
 80001e4:	4605      	mov	r5, r0
 80001e6:	2c4e      	cmp	r4, #78	; 0x4e
 80001e8:	d83f      	bhi.n	800026a <d_make_comp+0x8a>
 80001ea:	e8df f004 	tbb	[pc, r4]
 80001ee:	3b3b      	.short	0x3b3b
 80001f0:	3e3e3b3b 	.word	0x3e3e3b3b
 80001f4:	28283e3e 	.word	0x28283e3e
 80001f8:	2828283b 	.word	0x2828283b
 80001fc:	28282828 	.word	0x28282828
 8000200:	28282828 	.word	0x28282828
 8000204:	29293e28 	.word	0x29293e28
 8000208:	29292929 	.word	0x29292929
 800020c:	283b2929 	.word	0x283b2929
 8000210:	28282828 	.word	0x28282828
 8000214:	3c29283e 	.word	0x3c29283e
 8000218:	293b3e3b 	.word	0x293b3e3b
 800021c:	3e3e3c29 	.word	0x3e3e3c29
 8000220:	3b282828 	.word	0x3b282828
 8000224:	3b3b3b3b 	.word	0x3b3b3b3b
 8000228:	283b3b28 	.word	0x283b3b28
 800022c:	283e3e3b 	.word	0x283e3e3b
 8000230:	3e3e2828 	.word	0x3e3e2828
 8000234:	2828283e 	.word	0x2828283e
 8000238:	293b293b 	.word	0x293b293b
 800023c:	29          	.byte	0x29
 800023d:	00          	.byte	0x00
 800023e:	b1a2      	cbz	r2, 800026a <d_make_comp+0x8a>
 8000240:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
 8000244:	4284      	cmp	r4, r0
 8000246:	da10      	bge.n	800026a <d_make_comp+0x8a>
 8000248:	692f      	ldr	r7, [r5, #16]
 800024a:	0126      	lsls	r6, r4, #4
 800024c:	19b8      	adds	r0, r7, r6
 800024e:	3401      	adds	r4, #1
 8000250:	f04f 0c00 	mov.w	ip, #0
 8000254:	f8c0 c004 	str.w	ip, [r0, #4]
 8000258:	616c      	str	r4, [r5, #20]
 800025a:	55b9      	strb	r1, [r7, r6]
 800025c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8000260:	bcf0      	pop	{r4, r5, r6, r7}
 8000262:	4770      	bx	lr
 8000264:	b10a      	cbz	r2, 800026a <d_make_comp+0x8a>
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1ea      	bne.n	8000240 <d_make_comp+0x60>
 800026a:	2000      	movs	r0, #0
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
 800026e:	4770      	bx	lr

08000270 <d_ref_qualifier>:
 8000270:	b410      	push	{r4}
 8000272:	68c3      	ldr	r3, [r0, #12]
 8000274:	781c      	ldrb	r4, [r3, #0]
 8000276:	2c52      	cmp	r4, #82	; 0x52
 8000278:	460a      	mov	r2, r1
 800027a:	d00f      	beq.n	800029c <d_ref_qualifier+0x2c>
 800027c:	2c4f      	cmp	r4, #79	; 0x4f
 800027e:	d003      	beq.n	8000288 <d_ref_qualifier+0x18>
 8000280:	4608      	mov	r0, r1
 8000282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800028a:	3103      	adds	r1, #3
 800028c:	6301      	str	r1, [r0, #48]	; 0x30
 800028e:	2120      	movs	r1, #32
 8000290:	3301      	adds	r3, #1
 8000292:	60c3      	str	r3, [r0, #12]
 8000294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000298:	2300      	movs	r3, #0
 800029a:	e7a1      	b.n	80001e0 <d_make_comp>
 800029c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800029e:	3102      	adds	r1, #2
 80002a0:	6301      	str	r1, [r0, #48]	; 0x30
 80002a2:	211f      	movs	r1, #31
 80002a4:	e7f4      	b.n	8000290 <d_ref_qualifier+0x20>
 80002a6:	bf00      	nop

080002a8 <d_count_templates_scopes>:
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	d04e      	beq.n	800034a <d_count_templates_scopes+0xa2>
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	4605      	mov	r5, r0
 80002b0:	460e      	mov	r6, r1
 80002b2:	4614      	mov	r4, r2
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	2b4e      	cmp	r3, #78	; 0x4e
 80002ba:	d82c      	bhi.n	8000316 <d_count_templates_scopes+0x6e>
 80002bc:	e8df f003 	tbb	[pc, r3]
 80002c0:	40373737 	.word	0x40373737
 80002c4:	28282b2b 	.word	0x28282b2b
 80002c8:	37373737 	.word	0x37373737
 80002cc:	37373737 	.word	0x37373737
 80002d0:	37373737 	.word	0x37373737
 80002d4:	2b373737 	.word	0x2b373737
 80002d8:	37373737 	.word	0x37373737
 80002dc:	37373737 	.word	0x37373737
 80002e0:	30303737 	.word	0x30303737
 80002e4:	372b3737 	.word	0x372b3737
 80002e8:	2c373737 	.word	0x2c373737
 80002ec:	37373737 	.word	0x37373737
 80002f0:	3737282b 	.word	0x3737282b
 80002f4:	37373737 	.word	0x37373737
 80002f8:	37373737 	.word	0x37373737
 80002fc:	2b373737 	.word	0x2b373737
 8000300:	2c2c372b 	.word	0x2c2c372b
 8000304:	372b2c2c 	.word	0x372b2c2c
 8000308:	37373737 	.word	0x37373737
 800030c:	3737      	.short	0x3737
 800030e:	37          	.byte	0x37
 800030f:	00          	.byte	0x00
 8000310:	68e4      	ldr	r4, [r4, #12]
 8000312:	2c00      	cmp	r4, #0
 8000314:	d1ce      	bne.n	80002b4 <d_count_templates_scopes+0xc>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	68a4      	ldr	r4, [r4, #8]
 800031a:	2c00      	cmp	r4, #0
 800031c:	d1ca      	bne.n	80002b4 <d_count_templates_scopes+0xc>
 800031e:	e7fa      	b.n	8000316 <d_count_templates_scopes+0x6e>
 8000320:	68a2      	ldr	r2, [r4, #8]
 8000322:	7813      	ldrb	r3, [r2, #0]
 8000324:	2b05      	cmp	r3, #5
 8000326:	d103      	bne.n	8000330 <d_count_templates_scopes+0x88>
 8000328:	6833      	ldr	r3, [r6, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	6033      	str	r3, [r6, #0]
 800032e:	68a2      	ldr	r2, [r4, #8]
 8000330:	4631      	mov	r1, r6
 8000332:	4628      	mov	r0, r5
 8000334:	f7ff ffb8 	bl	80002a8 <d_count_templates_scopes>
 8000338:	68e4      	ldr	r4, [r4, #12]
 800033a:	2c00      	cmp	r4, #0
 800033c:	d1ba      	bne.n	80002b4 <d_count_templates_scopes+0xc>
 800033e:	e7ea      	b.n	8000316 <d_count_templates_scopes+0x6e>
 8000340:	682b      	ldr	r3, [r5, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	602b      	str	r3, [r5, #0]
 8000346:	68a2      	ldr	r2, [r4, #8]
 8000348:	e7f2      	b.n	8000330 <d_count_templates_scopes+0x88>
 800034a:	4770      	bx	lr

0800034c <d_append_buffer>:
 800034c:	b39a      	cbz	r2, 80003b6 <d_append_buffer+0x6a>
 800034e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000352:	188e      	adds	r6, r1, r2
 8000354:	4604      	mov	r4, r0
 8000356:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800035a:	3e01      	subs	r6, #1
 800035c:	1e4d      	subs	r5, r1, #1
 800035e:	2700      	movs	r7, #0
 8000360:	e016      	b.n	8000390 <d_append_buffer+0x44>
 8000362:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000366:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800036a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800036e:	4798      	blx	r3
 8000370:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000374:	2200      	movs	r2, #0
 8000376:	3301      	adds	r3, #1
 8000378:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800037c:	42b5      	cmp	r5, r6
 800037e:	f04f 0301 	mov.w	r3, #1
 8000382:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8000386:	f804 8002 	strb.w	r8, [r4, r2]
 800038a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800038e:	d010      	beq.n	80003b2 <d_append_buffer+0x66>
 8000390:	2bff      	cmp	r3, #255	; 0xff
 8000392:	4619      	mov	r1, r3
 8000394:	4620      	mov	r0, r4
 8000396:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 800039a:	d0e2      	beq.n	8000362 <d_append_buffer+0x16>
 800039c:	461a      	mov	r2, r3
 800039e:	42b5      	cmp	r5, r6
 80003a0:	f103 0301 	add.w	r3, r3, #1
 80003a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003a8:	f804 8002 	strb.w	r8, [r4, r2]
 80003ac:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003b0:	d1ee      	bne.n	8000390 <d_append_buffer+0x44>
 80003b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003b6:	4770      	bx	lr

080003b8 <is_fnqual_component_type>:
 80003b8:	f1a0 031c 	sub.w	r3, r0, #28
 80003bc:	2b04      	cmp	r3, #4
 80003be:	d907      	bls.n	80003d0 <is_fnqual_component_type+0x18>
 80003c0:	284c      	cmp	r0, #76	; 0x4c
 80003c2:	d005      	beq.n	80003d0 <is_fnqual_component_type+0x18>
 80003c4:	384e      	subs	r0, #78	; 0x4e
 80003c6:	2801      	cmp	r0, #1
 80003c8:	bf8c      	ite	hi
 80003ca:	2000      	movhi	r0, #0
 80003cc:	2001      	movls	r0, #1
 80003ce:	4770      	bx	lr
 80003d0:	2001      	movs	r0, #1
 80003d2:	4770      	bx	lr

080003d4 <d_number.isra.1>:
 80003d4:	b470      	push	{r4, r5, r6}
 80003d6:	6802      	ldr	r2, [r0, #0]
 80003d8:	7811      	ldrb	r1, [r2, #0]
 80003da:	296e      	cmp	r1, #110	; 0x6e
 80003dc:	d018      	beq.n	8000410 <d_number.isra.1+0x3c>
 80003de:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80003e2:	2b09      	cmp	r3, #9
 80003e4:	d81e      	bhi.n	8000424 <d_number.isra.1+0x50>
 80003e6:	2600      	movs	r6, #0
 80003e8:	2300      	movs	r3, #0
 80003ea:	3201      	adds	r2, #1
 80003ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80003f0:	6002      	str	r2, [r0, #0]
 80003f2:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80003f6:	7811      	ldrb	r1, [r2, #0]
 80003f8:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 80003fc:	2d09      	cmp	r5, #9
 80003fe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000402:	d9f2      	bls.n	80003ea <d_number.isra.1+0x16>
 8000404:	b10e      	cbz	r6, 800040a <d_number.isra.1+0x36>
 8000406:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 800040a:	4618      	mov	r0, r3
 800040c:	bc70      	pop	{r4, r5, r6}
 800040e:	4770      	bx	lr
 8000410:	1c53      	adds	r3, r2, #1
 8000412:	6003      	str	r3, [r0, #0]
 8000414:	7851      	ldrb	r1, [r2, #1]
 8000416:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800041a:	2a09      	cmp	r2, #9
 800041c:	d802      	bhi.n	8000424 <d_number.isra.1+0x50>
 800041e:	461a      	mov	r2, r3
 8000420:	2601      	movs	r6, #1
 8000422:	e7e1      	b.n	80003e8 <d_number.isra.1+0x14>
 8000424:	2300      	movs	r3, #0
 8000426:	4618      	mov	r0, r3
 8000428:	bc70      	pop	{r4, r5, r6}
 800042a:	4770      	bx	lr

0800042c <d_number_component>:
 800042c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000430:	4293      	cmp	r3, r2
 8000432:	b570      	push	{r4, r5, r6, lr}
 8000434:	da0e      	bge.n	8000454 <d_number_component+0x28>
 8000436:	6901      	ldr	r1, [r0, #16]
 8000438:	011a      	lsls	r2, r3, #4
 800043a:	188c      	adds	r4, r1, r2
 800043c:	3301      	adds	r3, #1
 800043e:	2600      	movs	r6, #0
 8000440:	2541      	movs	r5, #65	; 0x41
 8000442:	6066      	str	r6, [r4, #4]
 8000444:	300c      	adds	r0, #12
 8000446:	6083      	str	r3, [r0, #8]
 8000448:	548d      	strb	r5, [r1, r2]
 800044a:	f7ff ffc3 	bl	80003d4 <d_number.isra.1>
 800044e:	60a0      	str	r0, [r4, #8]
 8000450:	4620      	mov	r0, r4
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	2400      	movs	r4, #0
 8000456:	4620      	mov	r0, r4
 8000458:	bd70      	pop	{r4, r5, r6, pc}
 800045a:	bf00      	nop

0800045c <d_compact_number>:
 800045c:	b510      	push	{r4, lr}
 800045e:	68c3      	ldr	r3, [r0, #12]
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	2a5f      	cmp	r2, #95	; 0x5f
 8000464:	4604      	mov	r4, r0
 8000466:	d00d      	beq.n	8000484 <d_compact_number+0x28>
 8000468:	2a6e      	cmp	r2, #110	; 0x6e
 800046a:	d00d      	beq.n	8000488 <d_compact_number+0x2c>
 800046c:	300c      	adds	r0, #12
 800046e:	f7ff ffb1 	bl	80003d4 <d_number.isra.1>
 8000472:	3001      	adds	r0, #1
 8000474:	d408      	bmi.n	8000488 <d_compact_number+0x2c>
 8000476:	68e3      	ldr	r3, [r4, #12]
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	2a5f      	cmp	r2, #95	; 0x5f
 800047c:	d104      	bne.n	8000488 <d_compact_number+0x2c>
 800047e:	3301      	adds	r3, #1
 8000480:	60e3      	str	r3, [r4, #12]
 8000482:	bd10      	pop	{r4, pc}
 8000484:	2000      	movs	r0, #0
 8000486:	e7fa      	b.n	800047e <d_compact_number+0x22>
 8000488:	f04f 30ff 	mov.w	r0, #4294967295
 800048c:	bd10      	pop	{r4, pc}
 800048e:	bf00      	nop

08000490 <d_template_param>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	68c3      	ldr	r3, [r0, #12]
 8000494:	781a      	ldrb	r2, [r3, #0]
 8000496:	2a54      	cmp	r2, #84	; 0x54
 8000498:	d119      	bne.n	80004ce <d_template_param+0x3e>
 800049a:	3301      	adds	r3, #1
 800049c:	60c3      	str	r3, [r0, #12]
 800049e:	4604      	mov	r4, r0
 80004a0:	f7ff ffdc 	bl	800045c <d_compact_number>
 80004a4:	1e05      	subs	r5, r0, #0
 80004a6:	db12      	blt.n	80004ce <d_template_param+0x3e>
 80004a8:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80004ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004ae:	428b      	cmp	r3, r1
 80004b0:	f102 0201 	add.w	r2, r2, #1
 80004b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80004b6:	da0a      	bge.n	80004ce <d_template_param+0x3e>
 80004b8:	6921      	ldr	r1, [r4, #16]
 80004ba:	011a      	lsls	r2, r3, #4
 80004bc:	1888      	adds	r0, r1, r2
 80004be:	3301      	adds	r3, #1
 80004c0:	2700      	movs	r7, #0
 80004c2:	2605      	movs	r6, #5
 80004c4:	6047      	str	r7, [r0, #4]
 80004c6:	6163      	str	r3, [r4, #20]
 80004c8:	548e      	strb	r6, [r1, r2]
 80004ca:	6085      	str	r5, [r0, #8]
 80004cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004ce:	2000      	movs	r0, #0
 80004d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d2:	bf00      	nop

080004d4 <d_source_name>:
 80004d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004d8:	4604      	mov	r4, r0
 80004da:	300c      	adds	r0, #12
 80004dc:	f7ff ff7a 	bl	80003d4 <d_number.isra.1>
 80004e0:	1e07      	subs	r7, r0, #0
 80004e2:	dd49      	ble.n	8000578 <d_source_name+0xa4>
 80004e4:	68e5      	ldr	r5, [r4, #12]
 80004e6:	6863      	ldr	r3, [r4, #4]
 80004e8:	1b5b      	subs	r3, r3, r5
 80004ea:	429f      	cmp	r7, r3
 80004ec:	dc42      	bgt.n	8000574 <d_source_name+0xa0>
 80004ee:	68a2      	ldr	r2, [r4, #8]
 80004f0:	19eb      	adds	r3, r5, r7
 80004f2:	0752      	lsls	r2, r2, #29
 80004f4:	60e3      	str	r3, [r4, #12]
 80004f6:	d504      	bpl.n	8000502 <d_source_name+0x2e>
 80004f8:	5dea      	ldrb	r2, [r5, r7]
 80004fa:	2a24      	cmp	r2, #36	; 0x24
 80004fc:	bf04      	itt	eq
 80004fe:	3301      	addeq	r3, #1
 8000500:	60e3      	streq	r3, [r4, #12]
 8000502:	2f09      	cmp	r7, #9
 8000504:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
 8000508:	dc10      	bgt.n	800052c <d_source_name+0x58>
 800050a:	45b0      	cmp	r8, r6
 800050c:	dd32      	ble.n	8000574 <d_source_name+0xa0>
 800050e:	6921      	ldr	r1, [r4, #16]
 8000510:	0132      	lsls	r2, r6, #4
 8000512:	1888      	adds	r0, r1, r2
 8000514:	3601      	adds	r6, #1
 8000516:	2300      	movs	r3, #0
 8000518:	6043      	str	r3, [r0, #4]
 800051a:	6166      	str	r6, [r4, #20]
 800051c:	b355      	cbz	r5, 8000574 <d_source_name+0xa0>
 800051e:	6043      	str	r3, [r0, #4]
 8000520:	548b      	strb	r3, [r1, r2]
 8000522:	e9c0 5702 	strd	r5, r7, [r0, #8]
 8000526:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800052c:	2208      	movs	r2, #8
 800052e:	4914      	ldr	r1, [pc, #80]	; (8000580 <d_source_name+0xac>)
 8000530:	4628      	mov	r0, r5
 8000532:	f012 fdfb 	bl	801312c <memcmp>
 8000536:	2800      	cmp	r0, #0
 8000538:	d1e7      	bne.n	800050a <d_source_name+0x36>
 800053a:	7a2b      	ldrb	r3, [r5, #8]
 800053c:	2b2e      	cmp	r3, #46	; 0x2e
 800053e:	d003      	beq.n	8000548 <d_source_name+0x74>
 8000540:	2b5f      	cmp	r3, #95	; 0x5f
 8000542:	d001      	beq.n	8000548 <d_source_name+0x74>
 8000544:	2b24      	cmp	r3, #36	; 0x24
 8000546:	d1e0      	bne.n	800050a <d_source_name+0x36>
 8000548:	7a6b      	ldrb	r3, [r5, #9]
 800054a:	2b4e      	cmp	r3, #78	; 0x4e
 800054c:	d1dd      	bne.n	800050a <d_source_name+0x36>
 800054e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000550:	3316      	adds	r3, #22
 8000552:	1bdf      	subs	r7, r3, r7
 8000554:	45b0      	cmp	r8, r6
 8000556:	6327      	str	r7, [r4, #48]	; 0x30
 8000558:	dd0c      	ble.n	8000574 <d_source_name+0xa0>
 800055a:	6922      	ldr	r2, [r4, #16]
 800055c:	4d09      	ldr	r5, [pc, #36]	; (8000584 <d_source_name+0xb0>)
 800055e:	0133      	lsls	r3, r6, #4
 8000560:	18d0      	adds	r0, r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	3601      	adds	r6, #1
 8000566:	6166      	str	r6, [r4, #20]
 8000568:	6041      	str	r1, [r0, #4]
 800056a:	54d1      	strb	r1, [r2, r3]
 800056c:	2315      	movs	r3, #21
 800056e:	e9c0 5302 	strd	r5, r3, [r0, #8]
 8000572:	e7d8      	b.n	8000526 <d_source_name+0x52>
 8000574:	2000      	movs	r0, #0
 8000576:	e7d6      	b.n	8000526 <d_source_name+0x52>
 8000578:	2000      	movs	r0, #0
 800057a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800057e:	bf00      	nop
 8000580:	0801c1c8 	.word	0x0801c1c8
 8000584:	0801c1d4 	.word	0x0801c1d4

08000588 <d_abi_tags>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	68c3      	ldr	r3, [r0, #12]
 800058c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	2a42      	cmp	r2, #66	; 0x42
 8000592:	4604      	mov	r4, r0
 8000594:	460d      	mov	r5, r1
 8000596:	d10f      	bne.n	80005b8 <d_abi_tags+0x30>
 8000598:	3301      	adds	r3, #1
 800059a:	60e3      	str	r3, [r4, #12]
 800059c:	4620      	mov	r0, r4
 800059e:	f7ff ff99 	bl	80004d4 <d_source_name>
 80005a2:	462a      	mov	r2, r5
 80005a4:	4603      	mov	r3, r0
 80005a6:	214b      	movs	r1, #75	; 0x4b
 80005a8:	4620      	mov	r0, r4
 80005aa:	f7ff fe19 	bl	80001e0 <d_make_comp>
 80005ae:	68e3      	ldr	r3, [r4, #12]
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	2a42      	cmp	r2, #66	; 0x42
 80005b4:	4605      	mov	r5, r0
 80005b6:	d0ef      	beq.n	8000598 <d_abi_tags+0x10>
 80005b8:	62e6      	str	r6, [r4, #44]	; 0x2c
 80005ba:	4628      	mov	r0, r5
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	bf00      	nop

080005c0 <d_substitution>:
 80005c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005c4:	4605      	mov	r5, r0
 80005c6:	68c0      	ldr	r0, [r0, #12]
 80005c8:	7803      	ldrb	r3, [r0, #0]
 80005ca:	2b53      	cmp	r3, #83	; 0x53
 80005cc:	d131      	bne.n	8000632 <d_substitution+0x72>
 80005ce:	1c43      	adds	r3, r0, #1
 80005d0:	60eb      	str	r3, [r5, #12]
 80005d2:	7842      	ldrb	r2, [r0, #1]
 80005d4:	b3a2      	cbz	r2, 8000640 <d_substitution+0x80>
 80005d6:	1c83      	adds	r3, r0, #2
 80005d8:	60eb      	str	r3, [r5, #12]
 80005da:	7842      	ldrb	r2, [r0, #1]
 80005dc:	2a5f      	cmp	r2, #95	; 0x5f
 80005de:	f000 8089 	beq.w	80006f4 <d_substitution+0x134>
 80005e2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80005e6:	b2e3      	uxtb	r3, r4
 80005e8:	2b09      	cmp	r3, #9
 80005ea:	d825      	bhi.n	8000638 <d_substitution+0x78>
 80005ec:	2100      	movs	r1, #0
 80005ee:	e00e      	b.n	800060e <d_substitution+0x4e>
 80005f0:	3b30      	subs	r3, #48	; 0x30
 80005f2:	4299      	cmp	r1, r3
 80005f4:	d81d      	bhi.n	8000632 <d_substitution+0x72>
 80005f6:	68e9      	ldr	r1, [r5, #12]
 80005f8:	780a      	ldrb	r2, [r1, #0]
 80005fa:	1c48      	adds	r0, r1, #1
 80005fc:	b122      	cbz	r2, 8000608 <d_substitution+0x48>
 80005fe:	60e8      	str	r0, [r5, #12]
 8000600:	780a      	ldrb	r2, [r1, #0]
 8000602:	2a5f      	cmp	r2, #95	; 0x5f
 8000604:	f000 8082 	beq.w	800070c <d_substitution+0x14c>
 8000608:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800060c:	4619      	mov	r1, r3
 800060e:	b2e4      	uxtb	r4, r4
 8000610:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000614:	2c09      	cmp	r4, #9
 8000616:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800061a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800061e:	d9e7      	bls.n	80005f0 <d_substitution+0x30>
 8000620:	2819      	cmp	r0, #25
 8000622:	d806      	bhi.n	8000632 <d_substitution+0x72>
 8000624:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800062c:	3b37      	subs	r3, #55	; 0x37
 800062e:	4299      	cmp	r1, r3
 8000630:	d9e1      	bls.n	80005f6 <d_substitution+0x36>
 8000632:	2000      	movs	r0, #0
 8000634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000638:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800063c:	2b19      	cmp	r3, #25
 800063e:	d9d5      	bls.n	80005ec <d_substitution+0x2c>
 8000640:	68ab      	ldr	r3, [r5, #8]
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	2b00      	cmp	r3, #0
 8000648:	bf14      	ite	ne
 800064a:	2401      	movne	r4, #1
 800064c:	2400      	moveq	r4, #0
 800064e:	d101      	bne.n	8000654 <d_substitution+0x94>
 8000650:	2900      	cmp	r1, #0
 8000652:	d15d      	bne.n	8000710 <d_substitution+0x150>
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <d_substitution+0x16c>)
 8000656:	2174      	movs	r1, #116	; 0x74
 8000658:	4291      	cmp	r1, r2
 800065a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800065e:	d005      	beq.n	800066c <d_substitution+0xac>
 8000660:	331c      	adds	r3, #28
 8000662:	4283      	cmp	r3, r0
 8000664:	d2e5      	bcs.n	8000632 <d_substitution+0x72>
 8000666:	7819      	ldrb	r1, [r3, #0]
 8000668:	4291      	cmp	r1, r2
 800066a:	d1f9      	bne.n	8000660 <d_substitution+0xa0>
 800066c:	6958      	ldr	r0, [r3, #20]
 800066e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
 8000672:	b1a8      	cbz	r0, 80006a0 <d_substitution+0xe0>
 8000674:	428a      	cmp	r2, r1
 8000676:	da57      	bge.n	8000728 <d_substitution+0x168>
 8000678:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800067c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8000680:	0117      	lsls	r7, r2, #4
 8000682:	eb0c 0607 	add.w	r6, ip, r7
 8000686:	3201      	adds	r2, #1
 8000688:	f04f 0900 	mov.w	r9, #0
 800068c:	f04f 0818 	mov.w	r8, #24
 8000690:	f8c6 9004 	str.w	r9, [r6, #4]
 8000694:	616a      	str	r2, [r5, #20]
 8000696:	f80c 8007 	strb.w	r8, [ip, r7]
 800069a:	e9c6 0e02 	strd	r0, lr, [r6, #8]
 800069e:	62ee      	str	r6, [r5, #44]	; 0x2c
 80006a0:	2c00      	cmp	r4, #0
 80006a2:	d13c      	bne.n	800071e <d_substitution+0x15e>
 80006a4:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
 80006a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006aa:	4291      	cmp	r1, r2
 80006ac:	4423      	add	r3, r4
 80006ae:	632b      	str	r3, [r5, #48]	; 0x30
 80006b0:	dd38      	ble.n	8000724 <d_substitution+0x164>
 80006b2:	6929      	ldr	r1, [r5, #16]
 80006b4:	0113      	lsls	r3, r2, #4
 80006b6:	18c8      	adds	r0, r1, r3
 80006b8:	3201      	adds	r2, #1
 80006ba:	f04f 0c00 	mov.w	ip, #0
 80006be:	2718      	movs	r7, #24
 80006c0:	f8c0 c004 	str.w	ip, [r0, #4]
 80006c4:	616a      	str	r2, [r5, #20]
 80006c6:	54cf      	strb	r7, [r1, r3]
 80006c8:	e9c0 6402 	strd	r6, r4, [r0, #8]
 80006cc:	68eb      	ldr	r3, [r5, #12]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b42      	cmp	r3, #66	; 0x42
 80006d2:	d1af      	bne.n	8000634 <d_substitution+0x74>
 80006d4:	4601      	mov	r1, r0
 80006d6:	4628      	mov	r0, r5
 80006d8:	f7ff ff56 	bl	8000588 <d_abi_tags>
 80006dc:	2800      	cmp	r0, #0
 80006de:	d0a8      	beq.n	8000632 <d_substitution+0x72>
 80006e0:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80006e4:	4293      	cmp	r3, r2
 80006e6:	daa5      	bge.n	8000634 <d_substitution+0x74>
 80006e8:	69e9      	ldr	r1, [r5, #28]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80006f0:	622a      	str	r2, [r5, #32]
 80006f2:	e79f      	b.n	8000634 <d_substitution+0x74>
 80006f4:	2300      	movs	r3, #0
 80006f6:	6a2a      	ldr	r2, [r5, #32]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d99a      	bls.n	8000632 <d_substitution+0x72>
 80006fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80006fe:	69e9      	ldr	r1, [r5, #28]
 8000700:	3201      	adds	r2, #1
 8000702:	62aa      	str	r2, [r5, #40]	; 0x28
 8000704:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800070c:	3301      	adds	r3, #1
 800070e:	e7f2      	b.n	80006f6 <d_substitution+0x136>
 8000710:	68eb      	ldr	r3, [r5, #12]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3b43      	subs	r3, #67	; 0x43
 8000716:	2b01      	cmp	r3, #1
 8000718:	bf98      	it	ls
 800071a:	460c      	movls	r4, r1
 800071c:	e79a      	b.n	8000654 <d_substitution+0x94>
 800071e:	e9d3 6403 	ldrd	r6, r4, [r3, #12]
 8000722:	e7c1      	b.n	80006a8 <d_substitution+0xe8>
 8000724:	2000      	movs	r0, #0
 8000726:	e7d1      	b.n	80006cc <d_substitution+0x10c>
 8000728:	2600      	movs	r6, #0
 800072a:	e7b8      	b.n	800069e <d_substitution+0xde>
 800072c:	0801a2b0 	.word	0x0801a2b0

08000730 <d_discriminator>:
 8000730:	68c3      	ldr	r3, [r0, #12]
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	2a5f      	cmp	r2, #95	; 0x5f
 8000736:	d001      	beq.n	800073c <d_discriminator+0xc>
 8000738:	2001      	movs	r0, #1
 800073a:	4770      	bx	lr
 800073c:	b510      	push	{r4, lr}
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	4604      	mov	r4, r0
 8000742:	f840 2f0c 	str.w	r2, [r0, #12]!
 8000746:	785a      	ldrb	r2, [r3, #1]
 8000748:	2a5f      	cmp	r2, #95	; 0x5f
 800074a:	d004      	beq.n	8000756 <d_discriminator+0x26>
 800074c:	f7ff fe42 	bl	80003d4 <d_number.isra.1>
 8000750:	43c0      	mvns	r0, r0
 8000752:	0fc0      	lsrs	r0, r0, #31
 8000754:	bd10      	pop	{r4, pc}
 8000756:	3302      	adds	r3, #2
 8000758:	60e3      	str	r3, [r4, #12]
 800075a:	f7ff fe3b 	bl	80003d4 <d_number.isra.1>
 800075e:	2800      	cmp	r0, #0
 8000760:	db05      	blt.n	800076e <d_discriminator+0x3e>
 8000762:	2809      	cmp	r0, #9
 8000764:	dd07      	ble.n	8000776 <d_discriminator+0x46>
 8000766:	68e3      	ldr	r3, [r4, #12]
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	2a5f      	cmp	r2, #95	; 0x5f
 800076c:	d001      	beq.n	8000772 <d_discriminator+0x42>
 800076e:	2000      	movs	r0, #0
 8000770:	bd10      	pop	{r4, pc}
 8000772:	3301      	adds	r3, #1
 8000774:	60e3      	str	r3, [r4, #12]
 8000776:	2001      	movs	r0, #1
 8000778:	bd10      	pop	{r4, pc}
 800077a:	bf00      	nop

0800077c <d_index_template_argument.part.9>:
 800077c:	b170      	cbz	r0, 800079c <d_index_template_argument.part.9+0x20>
 800077e:	7803      	ldrb	r3, [r0, #0]
 8000780:	2b2f      	cmp	r3, #47	; 0x2f
 8000782:	d10f      	bne.n	80007a4 <d_index_template_argument.part.9+0x28>
 8000784:	2900      	cmp	r1, #0
 8000786:	dc04      	bgt.n	8000792 <d_index_template_argument.part.9+0x16>
 8000788:	e009      	b.n	800079e <d_index_template_argument.part.9+0x22>
 800078a:	7803      	ldrb	r3, [r0, #0]
 800078c:	2b2f      	cmp	r3, #47	; 0x2f
 800078e:	d109      	bne.n	80007a4 <d_index_template_argument.part.9+0x28>
 8000790:	b131      	cbz	r1, 80007a0 <d_index_template_argument.part.9+0x24>
 8000792:	68c0      	ldr	r0, [r0, #12]
 8000794:	3901      	subs	r1, #1
 8000796:	2800      	cmp	r0, #0
 8000798:	d1f7      	bne.n	800078a <d_index_template_argument.part.9+0xe>
 800079a:	4770      	bx	lr
 800079c:	4770      	bx	lr
 800079e:	d101      	bne.n	80007a4 <d_index_template_argument.part.9+0x28>
 80007a0:	6880      	ldr	r0, [r0, #8]
 80007a2:	4770      	bx	lr
 80007a4:	2000      	movs	r0, #0
 80007a6:	4770      	bx	lr

080007a8 <d_lookup_template_argument.isra.10>:
 80007a8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80007ac:	b133      	cbz	r3, 80007bc <d_lookup_template_argument.isra.10+0x14>
 80007ae:	6809      	ldr	r1, [r1, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2900      	cmp	r1, #0
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	db04      	blt.n	80007c2 <d_lookup_template_argument.isra.10+0x1a>
 80007b8:	4618      	mov	r0, r3
 80007ba:	e7df      	b.n	800077c <d_index_template_argument.part.9>
 80007bc:	2201      	movs	r2, #1
 80007be:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80007c2:	4618      	mov	r0, r3
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <d_find_pack>:
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d042      	beq.n	8000852 <d_find_pack+0x8a>
 80007cc:	b538      	push	{r3, r4, r5, lr}
 80007ce:	4605      	mov	r5, r0
 80007d0:	460c      	mov	r4, r1
 80007d2:	7823      	ldrb	r3, [r4, #0]
 80007d4:	2b4b      	cmp	r3, #75	; 0x4b
 80007d6:	d827      	bhi.n	8000828 <d_find_pack+0x60>
 80007d8:	e8df f003 	tbb	[pc, r3]
 80007dc:	2626262e 	.word	0x2626262e
 80007e0:	2b2e3026 	.word	0x2b2e3026
 80007e4:	2626262b 	.word	0x2626262b
 80007e8:	26262626 	.word	0x26262626
 80007ec:	26262626 	.word	0x26262626
 80007f0:	26262626 	.word	0x26262626
 80007f4:	2626262e 	.word	0x2626262e
 80007f8:	26262626 	.word	0x26262626
 80007fc:	26262626 	.word	0x26262626
 8000800:	2e262626 	.word	0x2e262626
 8000804:	26262626 	.word	0x26262626
 8000808:	2626262e 	.word	0x2626262e
 800080c:	262b2e26 	.word	0x262b2e26
 8000810:	26262626 	.word	0x26262626
 8000814:	26262626 	.word	0x26262626
 8000818:	26262626 	.word	0x26262626
 800081c:	26262e2e 	.word	0x26262e2e
 8000820:	2e2e2e26 	.word	0x2e2e2e26
 8000824:	2e2e2626 	.word	0x2e2e2626
 8000828:	68a1      	ldr	r1, [r4, #8]
 800082a:	4628      	mov	r0, r5
 800082c:	f7ff ffcc 	bl	80007c8 <d_find_pack>
 8000830:	b918      	cbnz	r0, 800083a <d_find_pack+0x72>
 8000832:	68e4      	ldr	r4, [r4, #12]
 8000834:	2c00      	cmp	r4, #0
 8000836:	d1cc      	bne.n	80007d2 <d_find_pack+0xa>
 8000838:	2000      	movs	r0, #0
 800083a:	bd38      	pop	{r3, r4, r5, pc}
 800083c:	f104 0108 	add.w	r1, r4, #8
 8000840:	4628      	mov	r0, r5
 8000842:	f7ff ffb1 	bl	80007a8 <d_lookup_template_argument.isra.10>
 8000846:	2800      	cmp	r0, #0
 8000848:	d0f6      	beq.n	8000838 <d_find_pack+0x70>
 800084a:	7803      	ldrb	r3, [r0, #0]
 800084c:	2b2f      	cmp	r3, #47	; 0x2f
 800084e:	d1f3      	bne.n	8000838 <d_find_pack+0x70>
 8000850:	bd38      	pop	{r3, r4, r5, pc}
 8000852:	2000      	movs	r0, #0
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <d_growable_string_callback_adapter>:
 8000858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800085c:	4614      	mov	r4, r2
 800085e:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
 8000862:	6852      	ldr	r2, [r2, #4]
 8000864:	1c4b      	adds	r3, r1, #1
 8000866:	4413      	add	r3, r2
 8000868:	42ab      	cmp	r3, r5
 800086a:	b082      	sub	sp, #8
 800086c:	460e      	mov	r6, r1
 800086e:	4680      	mov	r8, r0
 8000870:	d814      	bhi.n	800089c <d_growable_string_callback_adapter+0x44>
 8000872:	b117      	cbz	r7, 800087a <d_growable_string_callback_adapter+0x22>
 8000874:	b002      	add	sp, #8
 8000876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800087a:	e9d4 0300 	ldrd	r0, r3, [r4]
 800087e:	4632      	mov	r2, r6
 8000880:	4641      	mov	r1, r8
 8000882:	4418      	add	r0, r3
 8000884:	f012 fc61 	bl	801314a <memcpy>
 8000888:	e9d4 3200 	ldrd	r3, r2, [r4]
 800088c:	4433      	add	r3, r6
 800088e:	549f      	strb	r7, [r3, r2]
 8000890:	6863      	ldr	r3, [r4, #4]
 8000892:	441e      	add	r6, r3
 8000894:	6066      	str	r6, [r4, #4]
 8000896:	b002      	add	sp, #8
 8000898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800089c:	2f00      	cmp	r7, #0
 800089e:	d1e9      	bne.n	8000874 <d_growable_string_callback_adapter+0x1c>
 80008a0:	b91d      	cbnz	r5, 80008aa <d_growable_string_callback_adapter+0x52>
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	f04f 0502 	mov.w	r5, #2
 80008a8:	d902      	bls.n	80008b0 <d_growable_string_callback_adapter+0x58>
 80008aa:	006d      	lsls	r5, r5, #1
 80008ac:	42ab      	cmp	r3, r5
 80008ae:	d8fc      	bhi.n	80008aa <d_growable_string_callback_adapter+0x52>
 80008b0:	4629      	mov	r1, r5
 80008b2:	6820      	ldr	r0, [r4, #0]
 80008b4:	f012 fcec 	bl	8013290 <realloc>
 80008b8:	b128      	cbz	r0, 80008c6 <d_growable_string_callback_adapter+0x6e>
 80008ba:	68e7      	ldr	r7, [r4, #12]
 80008bc:	6020      	str	r0, [r4, #0]
 80008be:	60a5      	str	r5, [r4, #8]
 80008c0:	2f00      	cmp	r7, #0
 80008c2:	d1d7      	bne.n	8000874 <d_growable_string_callback_adapter+0x1c>
 80008c4:	e7d9      	b.n	800087a <d_growable_string_callback_adapter+0x22>
 80008c6:	9001      	str	r0, [sp, #4]
 80008c8:	6820      	ldr	r0, [r4, #0]
 80008ca:	f012 f9f1 	bl	8012cb0 <free>
 80008ce:	9b01      	ldr	r3, [sp, #4]
 80008d0:	2201      	movs	r2, #1
 80008d2:	e9c4 3300 	strd	r3, r3, [r4]
 80008d6:	e9c4 3202 	strd	r3, r2, [r4, #8]
 80008da:	e7cb      	b.n	8000874 <d_growable_string_callback_adapter+0x1c>

080008dc <d_call_offset>:
 80008dc:	b538      	push	{r3, r4, r5, lr}
 80008de:	4604      	mov	r4, r0
 80008e0:	b929      	cbnz	r1, 80008ee <d_call_offset+0x12>
 80008e2:	68c3      	ldr	r3, [r0, #12]
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	b132      	cbz	r2, 80008f6 <d_call_offset+0x1a>
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	60c2      	str	r2, [r0, #12]
 80008ec:	7819      	ldrb	r1, [r3, #0]
 80008ee:	2968      	cmp	r1, #104	; 0x68
 80008f0:	d012      	beq.n	8000918 <d_call_offset+0x3c>
 80008f2:	2976      	cmp	r1, #118	; 0x76
 80008f4:	d001      	beq.n	80008fa <d_call_offset+0x1e>
 80008f6:	2000      	movs	r0, #0
 80008f8:	bd38      	pop	{r3, r4, r5, pc}
 80008fa:	f104 050c 	add.w	r5, r4, #12
 80008fe:	4628      	mov	r0, r5
 8000900:	f7ff fd68 	bl	80003d4 <d_number.isra.1>
 8000904:	68e3      	ldr	r3, [r4, #12]
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	2a5f      	cmp	r2, #95	; 0x5f
 800090a:	d1f4      	bne.n	80008f6 <d_call_offset+0x1a>
 800090c:	3301      	adds	r3, #1
 800090e:	60e3      	str	r3, [r4, #12]
 8000910:	4628      	mov	r0, r5
 8000912:	f7ff fd5f 	bl	80003d4 <d_number.isra.1>
 8000916:	e003      	b.n	8000920 <d_call_offset+0x44>
 8000918:	f104 000c 	add.w	r0, r4, #12
 800091c:	f7ff fd5a 	bl	80003d4 <d_number.isra.1>
 8000920:	68e3      	ldr	r3, [r4, #12]
 8000922:	781a      	ldrb	r2, [r3, #0]
 8000924:	2a5f      	cmp	r2, #95	; 0x5f
 8000926:	d1e6      	bne.n	80008f6 <d_call_offset+0x1a>
 8000928:	3301      	adds	r3, #1
 800092a:	60e3      	str	r3, [r4, #12]
 800092c:	2001      	movs	r0, #1
 800092e:	bd38      	pop	{r3, r4, r5, pc}

08000930 <d_append_num>:
 8000930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000934:	b088      	sub	sp, #32
 8000936:	460a      	mov	r2, r1
 8000938:	4604      	mov	r4, r0
 800093a:	491c      	ldr	r1, [pc, #112]	; (80009ac <d_append_num+0x7c>)
 800093c:	a801      	add	r0, sp, #4
 800093e:	f012 fee1 	bl	8013704 <sprintf>
 8000942:	a801      	add	r0, sp, #4
 8000944:	f006 fa16 	bl	8006d74 <strlen>
 8000948:	b368      	cbz	r0, 80009a6 <d_append_num+0x76>
 800094a:	ad01      	add	r5, sp, #4
 800094c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000950:	182e      	adds	r6, r5, r0
 8000952:	2700      	movs	r7, #0
 8000954:	e016      	b.n	8000984 <d_append_num+0x54>
 8000956:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800095a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800095e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8000962:	4798      	blx	r3
 8000964:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000968:	2200      	movs	r2, #0
 800096a:	3301      	adds	r3, #1
 800096c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8000970:	42ae      	cmp	r6, r5
 8000972:	f04f 0301 	mov.w	r3, #1
 8000976:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800097a:	f804 8002 	strb.w	r8, [r4, r2]
 800097e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000982:	d010      	beq.n	80009a6 <d_append_num+0x76>
 8000984:	2bff      	cmp	r3, #255	; 0xff
 8000986:	4619      	mov	r1, r3
 8000988:	4620      	mov	r0, r4
 800098a:	f815 8b01 	ldrb.w	r8, [r5], #1
 800098e:	d0e2      	beq.n	8000956 <d_append_num+0x26>
 8000990:	461a      	mov	r2, r3
 8000992:	42ae      	cmp	r6, r5
 8000994:	f103 0301 	add.w	r3, r3, #1
 8000998:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800099c:	f804 8002 	strb.w	r8, [r4, r2]
 80009a0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009a4:	d1ee      	bne.n	8000984 <d_append_num+0x54>
 80009a6:	b008      	add	sp, #32
 80009a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009ac:	0801c1ec 	.word	0x0801c1ec

080009b0 <d_exprlist>:
 80009b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009b4:	68c3      	ldr	r3, [r0, #12]
 80009b6:	781d      	ldrb	r5, [r3, #0]
 80009b8:	b083      	sub	sp, #12
 80009ba:	2200      	movs	r2, #0
 80009bc:	428d      	cmp	r5, r1
 80009be:	4604      	mov	r4, r0
 80009c0:	9201      	str	r2, [sp, #4]
 80009c2:	f000 8199 	beq.w	8000cf8 <d_exprlist+0x348>
 80009c6:	f8df 94c0 	ldr.w	r9, [pc, #1216]	; 8000e88 <d_exprlist+0x4d8>
 80009ca:	4688      	mov	r8, r1
 80009cc:	af01      	add	r7, sp, #4
 80009ce:	2501      	movs	r5, #1
 80009d0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80009d2:	6365      	str	r5, [r4, #52]	; 0x34
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	2a4c      	cmp	r2, #76	; 0x4c
 80009d8:	d05c      	beq.n	8000a94 <d_exprlist+0xe4>
 80009da:	2a54      	cmp	r2, #84	; 0x54
 80009dc:	d066      	beq.n	8000aac <d_exprlist+0xfc>
 80009de:	2a73      	cmp	r2, #115	; 0x73
 80009e0:	d045      	beq.n	8000a6e <d_exprlist+0xbe>
 80009e2:	2a66      	cmp	r2, #102	; 0x66
 80009e4:	d11c      	bne.n	8000a20 <d_exprlist+0x70>
 80009e6:	785a      	ldrb	r2, [r3, #1]
 80009e8:	2a70      	cmp	r2, #112	; 0x70
 80009ea:	f000 8087 	beq.w	8000afc <d_exprlist+0x14c>
 80009ee:	4620      	mov	r0, r4
 80009f0:	f001 fa70 	bl	8001ed4 <d_operator_name>
 80009f4:	4605      	mov	r5, r0
 80009f6:	2800      	cmp	r0, #0
 80009f8:	f000 818c 	beq.w	8000d14 <d_exprlist+0x364>
 80009fc:	7803      	ldrb	r3, [r0, #0]
 80009fe:	2b31      	cmp	r3, #49	; 0x31
 8000a00:	f000 8098 	beq.w	8000b34 <d_exprlist+0x184>
 8000a04:	2b32      	cmp	r3, #50	; 0x32
 8000a06:	d056      	beq.n	8000ab6 <d_exprlist+0x106>
 8000a08:	2b33      	cmp	r3, #51	; 0x33
 8000a0a:	d171      	bne.n	8000af0 <d_exprlist+0x140>
 8000a0c:	68e3      	ldr	r3, [r4, #12]
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	2a5f      	cmp	r2, #95	; 0x5f
 8000a12:	f000 81da 	beq.w	8000dca <d_exprlist+0x41a>
 8000a16:	4620      	mov	r0, r4
 8000a18:	f000 fa38 	bl	8000e8c <d_expression_1>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	e0c1      	b.n	8000ba4 <d_exprlist+0x1f4>
 8000a20:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a24:	2909      	cmp	r1, #9
 8000a26:	f200 80e7 	bhi.w	8000bf8 <d_exprlist+0x248>
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f001 fbfe 	bl	800222c <d_unqualified_name>
 8000a30:	4605      	mov	r5, r0
 8000a32:	2800      	cmp	r0, #0
 8000a34:	f000 816e 	beq.w	8000d14 <d_exprlist+0x364>
 8000a38:	68e3      	ldr	r3, [r4, #12]
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	2a49      	cmp	r2, #73	; 0x49
 8000a3e:	f000 80b8 	beq.w	8000bb2 <d_exprlist+0x202>
 8000a42:	6366      	str	r6, [r4, #52]	; 0x34
 8000a44:	462a      	mov	r2, r5
 8000a46:	2300      	movs	r3, #0
 8000a48:	212e      	movs	r1, #46	; 0x2e
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	f7ff fbc8 	bl	80001e0 <d_make_comp>
 8000a50:	6038      	str	r0, [r7, #0]
 8000a52:	b330      	cbz	r0, 8000aa2 <d_exprlist+0xf2>
 8000a54:	68e3      	ldr	r3, [r4, #12]
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4542      	cmp	r2, r8
 8000a5a:	f100 070c 	add.w	r7, r0, #12
 8000a5e:	d1b6      	bne.n	80009ce <d_exprlist+0x1e>
 8000a60:	3301      	adds	r3, #1
 8000a62:	9d01      	ldr	r5, [sp, #4]
 8000a64:	60e3      	str	r3, [r4, #12]
 8000a66:	4628      	mov	r0, r5
 8000a68:	b003      	add	sp, #12
 8000a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a6e:	785a      	ldrb	r2, [r3, #1]
 8000a70:	2a72      	cmp	r2, #114	; 0x72
 8000a72:	f000 80ab 	beq.w	8000bcc <d_exprlist+0x21c>
 8000a76:	2a70      	cmp	r2, #112	; 0x70
 8000a78:	d1b9      	bne.n	80009ee <d_exprlist+0x3e>
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	60e3      	str	r3, [r4, #12]
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f000 fa04 	bl	8000e8c <d_expression_1>
 8000a84:	2300      	movs	r3, #0
 8000a86:	4602      	mov	r2, r0
 8000a88:	214a      	movs	r1, #74	; 0x4a
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f7ff fba8 	bl	80001e0 <d_make_comp>
 8000a90:	4605      	mov	r5, r0
 8000a92:	e003      	b.n	8000a9c <d_exprlist+0xec>
 8000a94:	4620      	mov	r0, r4
 8000a96:	f002 f813 	bl	8002ac0 <d_expr_primary>
 8000a9a:	4605      	mov	r5, r0
 8000a9c:	6366      	str	r6, [r4, #52]	; 0x34
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d1d0      	bne.n	8000a44 <d_exprlist+0x94>
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	b003      	add	sp, #12
 8000aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aac:	4620      	mov	r0, r4
 8000aae:	f7ff fcef 	bl	8000490 <d_template_param>
 8000ab2:	4605      	mov	r5, r0
 8000ab4:	e7f2      	b.n	8000a9c <d_exprlist+0xec>
 8000ab6:	6883      	ldr	r3, [r0, #8]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d819      	bhi.n	8000af0 <d_exprlist+0x140>
 8000abc:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <d_exprlist+0x114>)
 8000abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac2:	bf00      	nop
 8000ac4:	08000c57 	.word	0x08000c57
 8000ac8:	08000a17 	.word	0x08000a17
 8000acc:	08000af1 	.word	0x08000af1
 8000ad0:	08000af1 	.word	0x08000af1
 8000ad4:	2a74      	cmp	r2, #116	; 0x74
 8000ad6:	d18a      	bne.n	80009ee <d_exprlist+0x3e>
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	2b6c      	cmp	r3, #108	; 0x6c
 8000adc:	d187      	bne.n	80009ee <d_exprlist+0x3e>
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f000 fdfe 	bl	80016e0 <d_type>
 8000ae4:	68e3      	ldr	r3, [r4, #12]
 8000ae6:	785a      	ldrb	r2, [r3, #1]
 8000ae8:	4605      	mov	r5, r0
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	f040 8123 	bne.w	8000d36 <d_exprlist+0x386>
 8000af0:	2500      	movs	r5, #0
 8000af2:	4628      	mov	r0, r5
 8000af4:	6366      	str	r6, [r4, #52]	; 0x34
 8000af6:	b003      	add	sp, #12
 8000af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000afc:	1c9a      	adds	r2, r3, #2
 8000afe:	60e2      	str	r2, [r4, #12]
 8000b00:	789a      	ldrb	r2, [r3, #2]
 8000b02:	2a54      	cmp	r2, #84	; 0x54
 8000b04:	f040 8082 	bne.w	8000c0c <d_exprlist+0x25c>
 8000b08:	3303      	adds	r3, #3
 8000b0a:	60e3      	str	r3, [r4, #12]
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000b12:	4293      	cmp	r3, r2
 8000b14:	daec      	bge.n	8000af0 <d_exprlist+0x140>
 8000b16:	6921      	ldr	r1, [r4, #16]
 8000b18:	011a      	lsls	r2, r3, #4
 8000b1a:	188d      	adds	r5, r1, r2
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	f04f 0e00 	mov.w	lr, #0
 8000b22:	f04f 0c06 	mov.w	ip, #6
 8000b26:	f8c5 e004 	str.w	lr, [r5, #4]
 8000b2a:	6163      	str	r3, [r4, #20]
 8000b2c:	f801 c002 	strb.w	ip, [r1, r2]
 8000b30:	60a8      	str	r0, [r5, #8]
 8000b32:	e786      	b.n	8000a42 <d_exprlist+0x92>
 8000b34:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8000b38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b3a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b3e:	f8db a000 	ldr.w	sl, [fp]
 8000b42:	3a02      	subs	r2, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	6323      	str	r3, [r4, #48]	; 0x30
 8000b48:	4650      	mov	r0, sl
 8000b4a:	4649      	mov	r1, r9
 8000b4c:	f006 f908 	bl	8006d60 <strcmp>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	f000 80e4 	beq.w	8000d1e <d_exprlist+0x36e>
 8000b56:	f8db b00c 	ldr.w	fp, [fp, #12]
 8000b5a:	f1bb 0f03 	cmp.w	fp, #3
 8000b5e:	d8c7      	bhi.n	8000af0 <d_exprlist+0x140>
 8000b60:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8000b64:	00040079 	.word	0x00040079
 8000b68:	008100f7 	.word	0x008100f7
 8000b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b70:	2b70      	cmp	r3, #112	; 0x70
 8000b72:	d065      	beq.n	8000c40 <d_exprlist+0x290>
 8000b74:	2b6d      	cmp	r3, #109	; 0x6d
 8000b76:	d063      	beq.n	8000c40 <d_exprlist+0x290>
 8000b78:	f04f 0b00 	mov.w	fp, #0
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	49bd      	ldr	r1, [pc, #756]	; (8000e74 <d_exprlist+0x4c4>)
 8000b80:	f006 f8ee 	bl	8006d60 <strcmp>
 8000b84:	2800      	cmp	r0, #0
 8000b86:	f040 80c0 	bne.w	8000d0a <d_exprlist+0x35a>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f000 fb90 	bl	80012b0 <d_template_args_1>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f1bb 0f00 	cmp.w	fp, #0
 8000b96:	d005      	beq.n	8000ba4 <d_exprlist+0x1f4>
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2138      	movs	r1, #56	; 0x38
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f7ff fb1f 	bl	80001e0 <d_make_comp>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	462a      	mov	r2, r5
 8000ba6:	2136      	movs	r1, #54	; 0x36
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff fb19 	bl	80001e0 <d_make_comp>
 8000bae:	4605      	mov	r5, r0
 8000bb0:	e774      	b.n	8000a9c <d_exprlist+0xec>
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60e3      	str	r3, [r4, #12]
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f000 fb7a 	bl	80012b0 <d_template_args_1>
 8000bbc:	462a      	mov	r2, r5
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f7ff fb0c 	bl	80001e0 <d_make_comp>
 8000bc8:	4605      	mov	r5, r0
 8000bca:	e767      	b.n	8000a9c <d_exprlist+0xec>
 8000bcc:	3302      	adds	r3, #2
 8000bce:	60e3      	str	r3, [r4, #12]
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f000 fd85 	bl	80016e0 <d_type>
 8000bd6:	4682      	mov	sl, r0
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f001 fb27 	bl	800222c <d_unqualified_name>
 8000bde:	68e3      	ldr	r3, [r4, #12]
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	2a49      	cmp	r2, #73	; 0x49
 8000be4:	4683      	mov	fp, r0
 8000be6:	d01e      	beq.n	8000c26 <d_exprlist+0x276>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4629      	mov	r1, r5
 8000bec:	4652      	mov	r2, sl
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff faf6 	bl	80001e0 <d_make_comp>
 8000bf4:	4605      	mov	r5, r0
 8000bf6:	e751      	b.n	8000a9c <d_exprlist+0xec>
 8000bf8:	2a6f      	cmp	r2, #111	; 0x6f
 8000bfa:	f040 8094 	bne.w	8000d26 <d_exprlist+0x376>
 8000bfe:	785a      	ldrb	r2, [r3, #1]
 8000c00:	2a6e      	cmp	r2, #110	; 0x6e
 8000c02:	f47f aef4 	bne.w	80009ee <d_exprlist+0x3e>
 8000c06:	3302      	adds	r3, #2
 8000c08:	60e3      	str	r3, [r4, #12]
 8000c0a:	e70e      	b.n	8000a2a <d_exprlist+0x7a>
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff fc25 	bl	800045c <d_compact_number>
 8000c12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000c16:	4298      	cmp	r0, r3
 8000c18:	f43f af6a 	beq.w	8000af0 <d_exprlist+0x140>
 8000c1c:	1c43      	adds	r3, r0, #1
 8000c1e:	f43f af67 	beq.w	8000af0 <d_exprlist+0x140>
 8000c22:	3001      	adds	r0, #1
 8000c24:	e773      	b.n	8000b0e <d_exprlist+0x15e>
 8000c26:	3301      	adds	r3, #1
 8000c28:	60e3      	str	r3, [r4, #12]
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f000 fb40 	bl	80012b0 <d_template_args_1>
 8000c30:	465a      	mov	r2, fp
 8000c32:	4603      	mov	r3, r0
 8000c34:	2104      	movs	r1, #4
 8000c36:	4620      	mov	r0, r4
 8000c38:	f7ff fad2 	bl	80001e0 <d_make_comp>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	e7d4      	b.n	8000bea <d_exprlist+0x23a>
 8000c40:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d197      	bne.n	8000b78 <d_exprlist+0x1c8>
 8000c48:	68e3      	ldr	r3, [r4, #12]
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	2a5f      	cmp	r2, #95	; 0x5f
 8000c4e:	d195      	bne.n	8000b7c <d_exprlist+0x1cc>
 8000c50:	3301      	adds	r3, #1
 8000c52:	60e3      	str	r3, [r4, #12]
 8000c54:	e790      	b.n	8000b78 <d_exprlist+0x1c8>
 8000c56:	462a      	mov	r2, r5
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2135      	movs	r1, #53	; 0x35
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f7ff fabf 	bl	80001e0 <d_make_comp>
 8000c62:	4605      	mov	r5, r0
 8000c64:	e71a      	b.n	8000a9c <d_exprlist+0xec>
 8000c66:	f1ba 0f00 	cmp.w	sl, #0
 8000c6a:	f43f af41 	beq.w	8000af0 <d_exprlist+0x140>
 8000c6e:	4982      	ldr	r1, [pc, #520]	; (8000e78 <d_exprlist+0x4c8>)
 8000c70:	4650      	mov	r0, sl
 8000c72:	f006 f875 	bl	8006d60 <strcmp>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	f000 80c7 	beq.w	8000e0a <d_exprlist+0x45a>
 8000c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c80:	2b66      	cmp	r3, #102	; 0x66
 8000c82:	f000 80ed 	beq.w	8000e60 <d_exprlist+0x4b0>
 8000c86:	2b6e      	cmp	r3, #110	; 0x6e
 8000c88:	f47f af32 	bne.w	8000af0 <d_exprlist+0x140>
 8000c8c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000c90:	2b77      	cmp	r3, #119	; 0x77
 8000c92:	d002      	beq.n	8000c9a <d_exprlist+0x2ea>
 8000c94:	2b61      	cmp	r3, #97	; 0x61
 8000c96:	f47f af2b 	bne.w	8000af0 <d_exprlist+0x140>
 8000c9a:	215f      	movs	r1, #95	; 0x5f
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f7ff fe87 	bl	80009b0 <d_exprlist>
 8000ca2:	4682      	mov	sl, r0
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f000 fd1b 	bl	80016e0 <d_type>
 8000caa:	68e3      	ldr	r3, [r4, #12]
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	2a45      	cmp	r2, #69	; 0x45
 8000cb0:	4683      	mov	fp, r0
 8000cb2:	f000 8086 	beq.w	8000dc2 <d_exprlist+0x412>
 8000cb6:	2a70      	cmp	r2, #112	; 0x70
 8000cb8:	f000 80c6 	beq.w	8000e48 <d_exprlist+0x498>
 8000cbc:	2a69      	cmp	r2, #105	; 0x69
 8000cbe:	f47f af17 	bne.w	8000af0 <d_exprlist+0x140>
 8000cc2:	785b      	ldrb	r3, [r3, #1]
 8000cc4:	2b6c      	cmp	r3, #108	; 0x6c
 8000cc6:	f47f af13 	bne.w	8000af0 <d_exprlist+0x140>
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f000 f8de 	bl	8000e8c <d_expression_1>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	465a      	mov	r2, fp
 8000cd4:	213b      	movs	r1, #59	; 0x3b
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f7ff fa82 	bl	80001e0 <d_make_comp>
 8000cdc:	4652      	mov	r2, sl
 8000cde:	4603      	mov	r3, r0
 8000ce0:	213a      	movs	r1, #58	; 0x3a
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f7ff fa7c 	bl	80001e0 <d_make_comp>
 8000ce8:	462a      	mov	r2, r5
 8000cea:	4603      	mov	r3, r0
 8000cec:	2139      	movs	r1, #57	; 0x39
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f7ff fa76 	bl	80001e0 <d_make_comp>
 8000cf4:	4605      	mov	r5, r0
 8000cf6:	e6d1      	b.n	8000a9c <d_exprlist+0xec>
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	60c3      	str	r3, [r0, #12]
 8000cfc:	212e      	movs	r1, #46	; 0x2e
 8000cfe:	4613      	mov	r3, r2
 8000d00:	b003      	add	sp, #12
 8000d02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d06:	f7ff ba6b 	b.w	80001e0 <d_make_comp>
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f000 f8be 	bl	8000e8c <d_expression_1>
 8000d10:	4603      	mov	r3, r0
 8000d12:	e73e      	b.n	8000b92 <d_exprlist+0x1e2>
 8000d14:	4628      	mov	r0, r5
 8000d16:	6366      	str	r6, [r4, #52]	; 0x34
 8000d18:	b003      	add	sp, #12
 8000d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f000 fcde 	bl	80016e0 <d_type>
 8000d24:	e73d      	b.n	8000ba2 <d_exprlist+0x1f2>
 8000d26:	2a69      	cmp	r2, #105	; 0x69
 8000d28:	f47f aed4 	bne.w	8000ad4 <d_exprlist+0x124>
 8000d2c:	785a      	ldrb	r2, [r3, #1]
 8000d2e:	2a6c      	cmp	r2, #108	; 0x6c
 8000d30:	f47f ae5d 	bne.w	80009ee <d_exprlist+0x3e>
 8000d34:	2500      	movs	r5, #0
 8000d36:	3302      	adds	r3, #2
 8000d38:	60e3      	str	r3, [r4, #12]
 8000d3a:	2145      	movs	r1, #69	; 0x45
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f7ff fe37 	bl	80009b0 <d_exprlist>
 8000d42:	462a      	mov	r2, r5
 8000d44:	4603      	mov	r3, r0
 8000d46:	2130      	movs	r1, #48	; 0x30
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f7ff fa49 	bl	80001e0 <d_make_comp>
 8000d4e:	4605      	mov	r5, r0
 8000d50:	e6a4      	b.n	8000a9c <d_exprlist+0xec>
 8000d52:	f1ba 0f00 	cmp.w	sl, #0
 8000d56:	f43f aecb 	beq.w	8000af0 <d_exprlist+0x140>
 8000d5a:	68ab      	ldr	r3, [r5, #8]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	785a      	ldrb	r2, [r3, #1]
 8000d60:	2a63      	cmp	r2, #99	; 0x63
 8000d62:	d03a      	beq.n	8000dda <d_exprlist+0x42a>
 8000d64:	f89a 3000 	ldrb.w	r3, [sl]
 8000d68:	2b66      	cmp	r3, #102	; 0x66
 8000d6a:	d149      	bne.n	8000e00 <d_exprlist+0x450>
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f001 f8b1 	bl	8001ed4 <d_operator_name>
 8000d72:	4683      	mov	fp, r0
 8000d74:	4941      	ldr	r1, [pc, #260]	; (8000e7c <d_exprlist+0x4cc>)
 8000d76:	4650      	mov	r0, sl
 8000d78:	f005 fff2 	bl	8006d60 <strcmp>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d039      	beq.n	8000df4 <d_exprlist+0x444>
 8000d80:	493f      	ldr	r1, [pc, #252]	; (8000e80 <d_exprlist+0x4d0>)
 8000d82:	4650      	mov	r0, sl
 8000d84:	f005 ffec 	bl	8006d60 <strcmp>
 8000d88:	b128      	cbz	r0, 8000d96 <d_exprlist+0x3e6>
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	493d      	ldr	r1, [pc, #244]	; (8000e84 <d_exprlist+0x4d4>)
 8000d8e:	f005 ffe7 	bl	8006d60 <strcmp>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d168      	bne.n	8000e68 <d_exprlist+0x4b8>
 8000d96:	4620      	mov	r0, r4
 8000d98:	f001 fa48 	bl	800222c <d_unqualified_name>
 8000d9c:	68e3      	ldr	r3, [r4, #12]
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	2a49      	cmp	r2, #73	; 0x49
 8000da2:	4682      	mov	sl, r0
 8000da4:	d043      	beq.n	8000e2e <d_exprlist+0x47e>
 8000da6:	4653      	mov	r3, sl
 8000da8:	465a      	mov	r2, fp
 8000daa:	2138      	movs	r1, #56	; 0x38
 8000dac:	4620      	mov	r0, r4
 8000dae:	f7ff fa17 	bl	80001e0 <d_make_comp>
 8000db2:	462a      	mov	r2, r5
 8000db4:	4603      	mov	r3, r0
 8000db6:	2137      	movs	r1, #55	; 0x37
 8000db8:	4620      	mov	r0, r4
 8000dba:	f7ff fa11 	bl	80001e0 <d_make_comp>
 8000dbe:	4605      	mov	r5, r0
 8000dc0:	e66c      	b.n	8000a9c <d_exprlist+0xec>
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60e3      	str	r3, [r4, #12]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e783      	b.n	8000cd2 <d_exprlist+0x322>
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60e3      	str	r3, [r4, #12]
 8000dce:	2145      	movs	r1, #69	; 0x45
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f7ff fded 	bl	80009b0 <d_exprlist>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e6e4      	b.n	8000ba4 <d_exprlist+0x1f4>
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000de0:	2a01      	cmp	r2, #1
 8000de2:	d902      	bls.n	8000dea <d_exprlist+0x43a>
 8000de4:	3b72      	subs	r3, #114	; 0x72
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d8bc      	bhi.n	8000d64 <d_exprlist+0x3b4>
 8000dea:	4620      	mov	r0, r4
 8000dec:	f000 fc78 	bl	80016e0 <d_type>
 8000df0:	4683      	mov	fp, r0
 8000df2:	e7bf      	b.n	8000d74 <d_exprlist+0x3c4>
 8000df4:	2145      	movs	r1, #69	; 0x45
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff fdda 	bl	80009b0 <d_exprlist>
 8000dfc:	4682      	mov	sl, r0
 8000dfe:	e7d2      	b.n	8000da6 <d_exprlist+0x3f6>
 8000e00:	4620      	mov	r0, r4
 8000e02:	f000 f843 	bl	8000e8c <d_expression_1>
 8000e06:	4683      	mov	fp, r0
 8000e08:	e7b4      	b.n	8000d74 <d_exprlist+0x3c4>
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f000 f83e 	bl	8000e8c <d_expression_1>
 8000e10:	4682      	mov	sl, r0
 8000e12:	4620      	mov	r0, r4
 8000e14:	f000 f83a 	bl	8000e8c <d_expression_1>
 8000e18:	4683      	mov	fp, r0
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 f836 	bl	8000e8c <d_expression_1>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2800      	cmp	r0, #0
 8000e24:	f47f af55 	bne.w	8000cd2 <d_exprlist+0x322>
 8000e28:	6366      	str	r6, [r4, #52]	; 0x34
 8000e2a:	4605      	mov	r5, r0
 8000e2c:	e61b      	b.n	8000a66 <d_exprlist+0xb6>
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60e3      	str	r3, [r4, #12]
 8000e32:	4620      	mov	r0, r4
 8000e34:	f000 fa3c 	bl	80012b0 <d_template_args_1>
 8000e38:	4652      	mov	r2, sl
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f7ff f9ce 	bl	80001e0 <d_make_comp>
 8000e44:	4682      	mov	sl, r0
 8000e46:	e7ae      	b.n	8000da6 <d_exprlist+0x3f6>
 8000e48:	785a      	ldrb	r2, [r3, #1]
 8000e4a:	2a69      	cmp	r2, #105	; 0x69
 8000e4c:	f47f ae50 	bne.w	8000af0 <d_exprlist+0x140>
 8000e50:	3302      	adds	r3, #2
 8000e52:	60e3      	str	r3, [r4, #12]
 8000e54:	2145      	movs	r1, #69	; 0x45
 8000e56:	4620      	mov	r0, r4
 8000e58:	f7ff fdaa 	bl	80009b0 <d_exprlist>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	e738      	b.n	8000cd2 <d_exprlist+0x322>
 8000e60:	4620      	mov	r0, r4
 8000e62:	f001 f837 	bl	8001ed4 <d_operator_name>
 8000e66:	e7d3      	b.n	8000e10 <d_exprlist+0x460>
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f000 f80f 	bl	8000e8c <d_expression_1>
 8000e6e:	4682      	mov	sl, r0
 8000e70:	e799      	b.n	8000da6 <d_exprlist+0x3f6>
 8000e72:	bf00      	nop
 8000e74:	0801c1f0 	.word	0x0801c1f0
 8000e78:	0801c200 	.word	0x0801c200
 8000e7c:	0801c1f4 	.word	0x0801c1f4
 8000e80:	0801c1f8 	.word	0x0801c1f8
 8000e84:	0801c1fc 	.word	0x0801c1fc
 8000e88:	0801c70c 	.word	0x0801c70c

08000e8c <d_expression_1>:
 8000e8c:	68c1      	ldr	r1, [r0, #12]
 8000e8e:	780b      	ldrb	r3, [r1, #0]
 8000e90:	2b4c      	cmp	r3, #76	; 0x4c
 8000e92:	d067      	beq.n	8000f64 <d_expression_1+0xd8>
 8000e94:	2b54      	cmp	r3, #84	; 0x54
 8000e96:	d067      	beq.n	8000f68 <d_expression_1+0xdc>
 8000e98:	2b73      	cmp	r3, #115	; 0x73
 8000e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	d01c      	beq.n	8000edc <d_expression_1+0x50>
 8000ea2:	2b66      	cmp	r3, #102	; 0x66
 8000ea4:	d13d      	bne.n	8000f22 <d_expression_1+0x96>
 8000ea6:	784b      	ldrb	r3, [r1, #1]
 8000ea8:	2b70      	cmp	r3, #112	; 0x70
 8000eaa:	d11d      	bne.n	8000ee8 <d_expression_1+0x5c>
 8000eac:	1c8b      	adds	r3, r1, #2
 8000eae:	60c3      	str	r3, [r0, #12]
 8000eb0:	788b      	ldrb	r3, [r1, #2]
 8000eb2:	2b54      	cmp	r3, #84	; 0x54
 8000eb4:	f040 809a 	bne.w	8000fec <d_expression_1+0x160>
 8000eb8:	3103      	adds	r1, #3
 8000eba:	60c1      	str	r1, [r0, #12]
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	da4a      	bge.n	8000f5c <d_expression_1+0xd0>
 8000ec6:	6921      	ldr	r1, [r4, #16]
 8000ec8:	011a      	lsls	r2, r3, #4
 8000eca:	188d      	adds	r5, r1, r2
 8000ecc:	3301      	adds	r3, #1
 8000ece:	2700      	movs	r7, #0
 8000ed0:	2606      	movs	r6, #6
 8000ed2:	606f      	str	r7, [r5, #4]
 8000ed4:	6163      	str	r3, [r4, #20]
 8000ed6:	548e      	strb	r6, [r1, r2]
 8000ed8:	60a8      	str	r0, [r5, #8]
 8000eda:	e02f      	b.n	8000f3c <d_expression_1+0xb0>
 8000edc:	784b      	ldrb	r3, [r1, #1]
 8000ede:	2b72      	cmp	r3, #114	; 0x72
 8000ee0:	d06e      	beq.n	8000fc0 <d_expression_1+0x134>
 8000ee2:	2b70      	cmp	r3, #112	; 0x70
 8000ee4:	f000 8160 	beq.w	80011a8 <d_expression_1+0x31c>
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f000 fff3 	bl	8001ed4 <d_operator_name>
 8000eee:	4605      	mov	r5, r0
 8000ef0:	b3a0      	cbz	r0, 8000f5c <d_expression_1+0xd0>
 8000ef2:	7803      	ldrb	r3, [r0, #0]
 8000ef4:	2b31      	cmp	r3, #49	; 0x31
 8000ef6:	d039      	beq.n	8000f6c <d_expression_1+0xe0>
 8000ef8:	2b32      	cmp	r3, #50	; 0x32
 8000efa:	f000 8127 	beq.w	800114c <d_expression_1+0x2c0>
 8000efe:	2b33      	cmp	r3, #51	; 0x33
 8000f00:	d12c      	bne.n	8000f5c <d_expression_1+0xd0>
 8000f02:	68e3      	ldr	r3, [r4, #12]
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	2a5f      	cmp	r2, #95	; 0x5f
 8000f08:	f000 8176 	beq.w	80011f8 <d_expression_1+0x36c>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff ffbd 	bl	8000e8c <d_expression_1>
 8000f12:	4603      	mov	r3, r0
 8000f14:	462a      	mov	r2, r5
 8000f16:	4620      	mov	r0, r4
 8000f18:	2136      	movs	r1, #54	; 0x36
 8000f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f1e:	f7ff b95f 	b.w	80001e0 <d_make_comp>
 8000f22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f26:	2a09      	cmp	r2, #9
 8000f28:	d841      	bhi.n	8000fae <d_expression_1+0x122>
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f001 f97e 	bl	800222c <d_unqualified_name>
 8000f30:	4605      	mov	r5, r0
 8000f32:	b198      	cbz	r0, 8000f5c <d_expression_1+0xd0>
 8000f34:	68e3      	ldr	r3, [r4, #12]
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	2a49      	cmp	r2, #73	; 0x49
 8000f3a:	d02b      	beq.n	8000f94 <d_expression_1+0x108>
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f42:	2b74      	cmp	r3, #116	; 0x74
 8000f44:	d1d0      	bne.n	8000ee8 <d_expression_1+0x5c>
 8000f46:	784b      	ldrb	r3, [r1, #1]
 8000f48:	2b6c      	cmp	r3, #108	; 0x6c
 8000f4a:	d1cd      	bne.n	8000ee8 <d_expression_1+0x5c>
 8000f4c:	f000 fbc8 	bl	80016e0 <d_type>
 8000f50:	68e1      	ldr	r1, [r4, #12]
 8000f52:	784b      	ldrb	r3, [r1, #1]
 8000f54:	4605      	mov	r5, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f040 8190 	bne.w	800127c <d_expression_1+0x3f0>
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4628      	mov	r0, r5
 8000f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f64:	f001 bdac 	b.w	8002ac0 <d_expr_primary>
 8000f68:	f7ff ba92 	b.w	8000490 <d_template_param>
 8000f6c:	6887      	ldr	r7, [r0, #8]
 8000f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	683e      	ldr	r6, [r7, #0]
 8000f74:	49c8      	ldr	r1, [pc, #800]	; (8001298 <d_expression_1+0x40c>)
 8000f76:	3a02      	subs	r2, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	f005 feef 	bl	8006d60 <strcmp>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d05b      	beq.n	800103e <d_expression_1+0x1b2>
 8000f86:	68ff      	ldr	r7, [r7, #12]
 8000f88:	2f03      	cmp	r7, #3
 8000f8a:	d8e7      	bhi.n	8000f5c <d_expression_1+0xd0>
 8000f8c:	e8df f007 	tbb	[pc, r7]
 8000f90:	64a7385c 	.word	0x64a7385c
 8000f94:	3301      	adds	r3, #1
 8000f96:	60e3      	str	r3, [r4, #12]
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f000 f989 	bl	80012b0 <d_template_args_1>
 8000f9e:	462a      	mov	r2, r5
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000faa:	f7ff b919 	b.w	80001e0 <d_make_comp>
 8000fae:	2b6f      	cmp	r3, #111	; 0x6f
 8000fb0:	f040 815c 	bne.w	800126c <d_expression_1+0x3e0>
 8000fb4:	784b      	ldrb	r3, [r1, #1]
 8000fb6:	2b6e      	cmp	r3, #110	; 0x6e
 8000fb8:	d196      	bne.n	8000ee8 <d_expression_1+0x5c>
 8000fba:	3102      	adds	r1, #2
 8000fbc:	60c1      	str	r1, [r0, #12]
 8000fbe:	e7b4      	b.n	8000f2a <d_expression_1+0x9e>
 8000fc0:	3102      	adds	r1, #2
 8000fc2:	60c1      	str	r1, [r0, #12]
 8000fc4:	f000 fb8c 	bl	80016e0 <d_type>
 8000fc8:	4605      	mov	r5, r0
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f001 f92e 	bl	800222c <d_unqualified_name>
 8000fd0:	68e3      	ldr	r3, [r4, #12]
 8000fd2:	7819      	ldrb	r1, [r3, #0]
 8000fd4:	2949      	cmp	r1, #73	; 0x49
 8000fd6:	4606      	mov	r6, r0
 8000fd8:	f000 80d9 	beq.w	800118e <d_expression_1+0x302>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	462a      	mov	r2, r5
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe8:	f7ff b8fa 	b.w	80001e0 <d_make_comp>
 8000fec:	f7ff fa36 	bl	800045c <d_compact_number>
 8000ff0:	43c3      	mvns	r3, r0
 8000ff2:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8000ff6:	bf18      	it	ne
 8000ff8:	3001      	addne	r0, #1
 8000ffa:	f47f af60 	bne.w	8000ebe <d_expression_1+0x32>
 8000ffe:	e7ad      	b.n	8000f5c <d_expression_1+0xd0>
 8001000:	2e00      	cmp	r6, #0
 8001002:	d083      	beq.n	8000f0c <d_expression_1+0x80>
 8001004:	7833      	ldrb	r3, [r6, #0]
 8001006:	2b70      	cmp	r3, #112	; 0x70
 8001008:	f000 80b0 	beq.w	800116c <d_expression_1+0x2e0>
 800100c:	2b6d      	cmp	r3, #109	; 0x6d
 800100e:	f000 80ad 	beq.w	800116c <d_expression_1+0x2e0>
 8001012:	2700      	movs	r7, #0
 8001014:	4630      	mov	r0, r6
 8001016:	49a1      	ldr	r1, [pc, #644]	; (800129c <d_expression_1+0x410>)
 8001018:	f005 fea2 	bl	8006d60 <strcmp>
 800101c:	2800      	cmp	r0, #0
 800101e:	f040 80b1 	bne.w	8001184 <d_expression_1+0x2f8>
 8001022:	4620      	mov	r0, r4
 8001024:	f000 f944 	bl	80012b0 <d_template_args_1>
 8001028:	4603      	mov	r3, r0
 800102a:	2f00      	cmp	r7, #0
 800102c:	f43f af72 	beq.w	8000f14 <d_expression_1+0x88>
 8001030:	461a      	mov	r2, r3
 8001032:	2138      	movs	r1, #56	; 0x38
 8001034:	4620      	mov	r0, r4
 8001036:	f7ff f8d3 	bl	80001e0 <d_make_comp>
 800103a:	4603      	mov	r3, r0
 800103c:	e76a      	b.n	8000f14 <d_expression_1+0x88>
 800103e:	4620      	mov	r0, r4
 8001040:	f000 fb4e 	bl	80016e0 <d_type>
 8001044:	4603      	mov	r3, r0
 8001046:	e765      	b.n	8000f14 <d_expression_1+0x88>
 8001048:	462a      	mov	r2, r5
 800104a:	4620      	mov	r0, r4
 800104c:	2300      	movs	r3, #0
 800104e:	2135      	movs	r1, #53	; 0x35
 8001050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001054:	f7ff b8c4 	b.w	80001e0 <d_make_comp>
 8001058:	4991      	ldr	r1, [pc, #580]	; (80012a0 <d_expression_1+0x414>)
 800105a:	4630      	mov	r0, r6
 800105c:	f005 fe80 	bl	8006d60 <strcmp>
 8001060:	2800      	cmp	r0, #0
 8001062:	f000 80d1 	beq.w	8001208 <d_expression_1+0x37c>
 8001066:	7833      	ldrb	r3, [r6, #0]
 8001068:	2b66      	cmp	r3, #102	; 0x66
 800106a:	f000 80f6 	beq.w	800125a <d_expression_1+0x3ce>
 800106e:	2b6e      	cmp	r3, #110	; 0x6e
 8001070:	f47f af74 	bne.w	8000f5c <d_expression_1+0xd0>
 8001074:	7873      	ldrb	r3, [r6, #1]
 8001076:	2b77      	cmp	r3, #119	; 0x77
 8001078:	d002      	beq.n	8001080 <d_expression_1+0x1f4>
 800107a:	2b61      	cmp	r3, #97	; 0x61
 800107c:	f47f af6e 	bne.w	8000f5c <d_expression_1+0xd0>
 8001080:	215f      	movs	r1, #95	; 0x5f
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff fc94 	bl	80009b0 <d_exprlist>
 8001088:	4606      	mov	r6, r0
 800108a:	4620      	mov	r0, r4
 800108c:	f000 fb28 	bl	80016e0 <d_type>
 8001090:	68e3      	ldr	r3, [r4, #12]
 8001092:	7819      	ldrb	r1, [r3, #0]
 8001094:	2945      	cmp	r1, #69	; 0x45
 8001096:	4607      	mov	r7, r0
 8001098:	f000 80aa 	beq.w	80011f0 <d_expression_1+0x364>
 800109c:	2970      	cmp	r1, #112	; 0x70
 800109e:	f000 80d0 	beq.w	8001242 <d_expression_1+0x3b6>
 80010a2:	2969      	cmp	r1, #105	; 0x69
 80010a4:	f47f af5a 	bne.w	8000f5c <d_expression_1+0xd0>
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	2b6c      	cmp	r3, #108	; 0x6c
 80010ac:	f47f af56 	bne.w	8000f5c <d_expression_1+0xd0>
 80010b0:	4620      	mov	r0, r4
 80010b2:	f7ff feeb 	bl	8000e8c <d_expression_1>
 80010b6:	4603      	mov	r3, r0
 80010b8:	463a      	mov	r2, r7
 80010ba:	213b      	movs	r1, #59	; 0x3b
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff f88f 	bl	80001e0 <d_make_comp>
 80010c2:	4632      	mov	r2, r6
 80010c4:	4603      	mov	r3, r0
 80010c6:	213a      	movs	r1, #58	; 0x3a
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff f889 	bl	80001e0 <d_make_comp>
 80010ce:	462a      	mov	r2, r5
 80010d0:	4603      	mov	r3, r0
 80010d2:	2139      	movs	r1, #57	; 0x39
 80010d4:	4620      	mov	r0, r4
 80010d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010da:	f7ff b881 	b.w	80001e0 <d_make_comp>
 80010de:	2e00      	cmp	r6, #0
 80010e0:	f43f af3c 	beq.w	8000f5c <d_expression_1+0xd0>
 80010e4:	68ab      	ldr	r3, [r5, #8]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	785a      	ldrb	r2, [r3, #1]
 80010ea:	2a63      	cmp	r2, #99	; 0x63
 80010ec:	d068      	beq.n	80011c0 <d_expression_1+0x334>
 80010ee:	7833      	ldrb	r3, [r6, #0]
 80010f0:	2b66      	cmp	r3, #102	; 0x66
 80010f2:	d178      	bne.n	80011e6 <d_expression_1+0x35a>
 80010f4:	4620      	mov	r0, r4
 80010f6:	f000 feed 	bl	8001ed4 <d_operator_name>
 80010fa:	4607      	mov	r7, r0
 80010fc:	4969      	ldr	r1, [pc, #420]	; (80012a4 <d_expression_1+0x418>)
 80010fe:	4630      	mov	r0, r6
 8001100:	f005 fe2e 	bl	8006d60 <strcmp>
 8001104:	2800      	cmp	r0, #0
 8001106:	d068      	beq.n	80011da <d_expression_1+0x34e>
 8001108:	4967      	ldr	r1, [pc, #412]	; (80012a8 <d_expression_1+0x41c>)
 800110a:	4630      	mov	r0, r6
 800110c:	f005 fe28 	bl	8006d60 <strcmp>
 8001110:	b130      	cbz	r0, 8001120 <d_expression_1+0x294>
 8001112:	4630      	mov	r0, r6
 8001114:	4965      	ldr	r1, [pc, #404]	; (80012ac <d_expression_1+0x420>)
 8001116:	f005 fe23 	bl	8006d60 <strcmp>
 800111a:	2800      	cmp	r0, #0
 800111c:	f040 80a1 	bne.w	8001262 <d_expression_1+0x3d6>
 8001120:	4620      	mov	r0, r4
 8001122:	f001 f883 	bl	800222c <d_unqualified_name>
 8001126:	68e3      	ldr	r3, [r4, #12]
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	2a49      	cmp	r2, #73	; 0x49
 800112c:	4606      	mov	r6, r0
 800112e:	d07b      	beq.n	8001228 <d_expression_1+0x39c>
 8001130:	4633      	mov	r3, r6
 8001132:	463a      	mov	r2, r7
 8001134:	2138      	movs	r1, #56	; 0x38
 8001136:	4620      	mov	r0, r4
 8001138:	f7ff f852 	bl	80001e0 <d_make_comp>
 800113c:	462a      	mov	r2, r5
 800113e:	4603      	mov	r3, r0
 8001140:	2137      	movs	r1, #55	; 0x37
 8001142:	4620      	mov	r0, r4
 8001144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001148:	f7ff b84a 	b.w	80001e0 <d_make_comp>
 800114c:	6883      	ldr	r3, [r0, #8]
 800114e:	2b03      	cmp	r3, #3
 8001150:	f63f af04 	bhi.w	8000f5c <d_expression_1+0xd0>
 8001154:	a201      	add	r2, pc, #4	; (adr r2, 800115c <d_expression_1+0x2d0>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001049 	.word	0x08001049
 8001160:	08000f0d 	.word	0x08000f0d
 8001164:	08000f5d 	.word	0x08000f5d
 8001168:	08000f5d 	.word	0x08000f5d
 800116c:	7872      	ldrb	r2, [r6, #1]
 800116e:	429a      	cmp	r2, r3
 8001170:	f47f af4f 	bne.w	8001012 <d_expression_1+0x186>
 8001174:	68e3      	ldr	r3, [r4, #12]
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	2a5f      	cmp	r2, #95	; 0x5f
 800117a:	f47f af4b 	bne.w	8001014 <d_expression_1+0x188>
 800117e:	3301      	adds	r3, #1
 8001180:	60e3      	str	r3, [r4, #12]
 8001182:	e746      	b.n	8001012 <d_expression_1+0x186>
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fe81 	bl	8000e8c <d_expression_1>
 800118a:	4603      	mov	r3, r0
 800118c:	e74d      	b.n	800102a <d_expression_1+0x19e>
 800118e:	3301      	adds	r3, #1
 8001190:	60e3      	str	r3, [r4, #12]
 8001192:	4620      	mov	r0, r4
 8001194:	f000 f88c 	bl	80012b0 <d_template_args_1>
 8001198:	4632      	mov	r2, r6
 800119a:	4603      	mov	r3, r0
 800119c:	2104      	movs	r1, #4
 800119e:	4620      	mov	r0, r4
 80011a0:	f7ff f81e 	bl	80001e0 <d_make_comp>
 80011a4:	4603      	mov	r3, r0
 80011a6:	e71a      	b.n	8000fde <d_expression_1+0x152>
 80011a8:	3102      	adds	r1, #2
 80011aa:	60e1      	str	r1, [r4, #12]
 80011ac:	f7ff fe6e 	bl	8000e8c <d_expression_1>
 80011b0:	2300      	movs	r3, #0
 80011b2:	4602      	mov	r2, r0
 80011b4:	214a      	movs	r1, #74	; 0x4a
 80011b6:	4620      	mov	r0, r4
 80011b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011bc:	f7ff b810 	b.w	80001e0 <d_make_comp>
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80011c6:	2a01      	cmp	r2, #1
 80011c8:	d902      	bls.n	80011d0 <d_expression_1+0x344>
 80011ca:	3b72      	subs	r3, #114	; 0x72
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d88e      	bhi.n	80010ee <d_expression_1+0x262>
 80011d0:	4620      	mov	r0, r4
 80011d2:	f000 fa85 	bl	80016e0 <d_type>
 80011d6:	4607      	mov	r7, r0
 80011d8:	e790      	b.n	80010fc <d_expression_1+0x270>
 80011da:	2145      	movs	r1, #69	; 0x45
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff fbe7 	bl	80009b0 <d_exprlist>
 80011e2:	4606      	mov	r6, r0
 80011e4:	e7a4      	b.n	8001130 <d_expression_1+0x2a4>
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff fe50 	bl	8000e8c <d_expression_1>
 80011ec:	4607      	mov	r7, r0
 80011ee:	e785      	b.n	80010fc <d_expression_1+0x270>
 80011f0:	3301      	adds	r3, #1
 80011f2:	60e3      	str	r3, [r4, #12]
 80011f4:	2300      	movs	r3, #0
 80011f6:	e75f      	b.n	80010b8 <d_expression_1+0x22c>
 80011f8:	3301      	adds	r3, #1
 80011fa:	60e3      	str	r3, [r4, #12]
 80011fc:	2145      	movs	r1, #69	; 0x45
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff fbd6 	bl	80009b0 <d_exprlist>
 8001204:	4603      	mov	r3, r0
 8001206:	e685      	b.n	8000f14 <d_expression_1+0x88>
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff fe3f 	bl	8000e8c <d_expression_1>
 800120e:	4606      	mov	r6, r0
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff fe3b 	bl	8000e8c <d_expression_1>
 8001216:	4607      	mov	r7, r0
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fe37 	bl	8000e8c <d_expression_1>
 800121e:	4603      	mov	r3, r0
 8001220:	2800      	cmp	r0, #0
 8001222:	f47f af49 	bne.w	80010b8 <d_expression_1+0x22c>
 8001226:	e699      	b.n	8000f5c <d_expression_1+0xd0>
 8001228:	3301      	adds	r3, #1
 800122a:	60e3      	str	r3, [r4, #12]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 f83f 	bl	80012b0 <d_template_args_1>
 8001232:	4632      	mov	r2, r6
 8001234:	4603      	mov	r3, r0
 8001236:	2104      	movs	r1, #4
 8001238:	4620      	mov	r0, r4
 800123a:	f7fe ffd1 	bl	80001e0 <d_make_comp>
 800123e:	4606      	mov	r6, r0
 8001240:	e776      	b.n	8001130 <d_expression_1+0x2a4>
 8001242:	785a      	ldrb	r2, [r3, #1]
 8001244:	2a69      	cmp	r2, #105	; 0x69
 8001246:	f47f ae89 	bne.w	8000f5c <d_expression_1+0xd0>
 800124a:	3302      	adds	r3, #2
 800124c:	60e3      	str	r3, [r4, #12]
 800124e:	2145      	movs	r1, #69	; 0x45
 8001250:	4620      	mov	r0, r4
 8001252:	f7ff fbad 	bl	80009b0 <d_exprlist>
 8001256:	4603      	mov	r3, r0
 8001258:	e72e      	b.n	80010b8 <d_expression_1+0x22c>
 800125a:	4620      	mov	r0, r4
 800125c:	f000 fe3a 	bl	8001ed4 <d_operator_name>
 8001260:	e7d5      	b.n	800120e <d_expression_1+0x382>
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff fe12 	bl	8000e8c <d_expression_1>
 8001268:	4606      	mov	r6, r0
 800126a:	e761      	b.n	8001130 <d_expression_1+0x2a4>
 800126c:	2b69      	cmp	r3, #105	; 0x69
 800126e:	f47f ae68 	bne.w	8000f42 <d_expression_1+0xb6>
 8001272:	784b      	ldrb	r3, [r1, #1]
 8001274:	2b6c      	cmp	r3, #108	; 0x6c
 8001276:	f47f ae37 	bne.w	8000ee8 <d_expression_1+0x5c>
 800127a:	2500      	movs	r5, #0
 800127c:	3102      	adds	r1, #2
 800127e:	60e1      	str	r1, [r4, #12]
 8001280:	4620      	mov	r0, r4
 8001282:	2145      	movs	r1, #69	; 0x45
 8001284:	f7ff fb94 	bl	80009b0 <d_exprlist>
 8001288:	462a      	mov	r2, r5
 800128a:	4603      	mov	r3, r0
 800128c:	2130      	movs	r1, #48	; 0x30
 800128e:	4620      	mov	r0, r4
 8001290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001294:	f7fe bfa4 	b.w	80001e0 <d_make_comp>
 8001298:	0801c70c 	.word	0x0801c70c
 800129c:	0801c1f0 	.word	0x0801c1f0
 80012a0:	0801c200 	.word	0x0801c200
 80012a4:	0801c1f4 	.word	0x0801c1f4
 80012a8:	0801c1f8 	.word	0x0801c1f8
 80012ac:	0801c1fc 	.word	0x0801c1fc

080012b0 <d_template_args_1>:
 80012b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b4:	68c2      	ldr	r2, [r0, #12]
 80012b6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80012b8:	7813      	ldrb	r3, [r2, #0]
 80012ba:	2b45      	cmp	r3, #69	; 0x45
 80012bc:	b082      	sub	sp, #8
 80012be:	4604      	mov	r4, r0
 80012c0:	d04e      	beq.n	8001360 <d_template_args_1+0xb0>
 80012c2:	ad02      	add	r5, sp, #8
 80012c4:	2100      	movs	r1, #0
 80012c6:	f845 1d04 	str.w	r1, [r5, #-4]!
 80012ca:	2601      	movs	r6, #1
 80012cc:	3b49      	subs	r3, #73	; 0x49
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	d83d      	bhi.n	800134e <d_template_args_1+0x9e>
 80012d2:	e8df f003 	tbb	[pc, r3]
 80012d6:	3737      	.short	0x3737
 80012d8:	3c3c323c 	.word	0x3c3c323c
 80012dc:	3c3c3c3c 	.word	0x3c3c3c3c
 80012e0:	3c3c3c3c 	.word	0x3c3c3c3c
 80012e4:	083c      	.short	0x083c
 80012e6:	3201      	adds	r2, #1
 80012e8:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 80012ec:	60e2      	str	r2, [r4, #12]
 80012ee:	6366      	str	r6, [r4, #52]	; 0x34
 80012f0:	4620      	mov	r0, r4
 80012f2:	f7ff fdcb 	bl	8000e8c <d_expression_1>
 80012f6:	68e3      	ldr	r3, [r4, #12]
 80012f8:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	2a45      	cmp	r2, #69	; 0x45
 8001300:	4684      	mov	ip, r0
 8001302:	f103 0301 	add.w	r3, r3, #1
 8001306:	d127      	bne.n	8001358 <d_template_args_1+0xa8>
 8001308:	60e3      	str	r3, [r4, #12]
 800130a:	2300      	movs	r3, #0
 800130c:	212f      	movs	r1, #47	; 0x2f
 800130e:	4662      	mov	r2, ip
 8001310:	4620      	mov	r0, r4
 8001312:	f1bc 0f00 	cmp.w	ip, #0
 8001316:	d01f      	beq.n	8001358 <d_template_args_1+0xa8>
 8001318:	f7fe ff62 	bl	80001e0 <d_make_comp>
 800131c:	6028      	str	r0, [r5, #0]
 800131e:	f100 050c 	add.w	r5, r0, #12
 8001322:	b1c8      	cbz	r0, 8001358 <d_template_args_1+0xa8>
 8001324:	68e2      	ldr	r2, [r4, #12]
 8001326:	7813      	ldrb	r3, [r2, #0]
 8001328:	2b45      	cmp	r3, #69	; 0x45
 800132a:	d1cf      	bne.n	80012cc <d_template_args_1+0x1c>
 800132c:	9801      	ldr	r0, [sp, #4]
 800132e:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001330:	3201      	adds	r2, #1
 8001332:	60e2      	str	r2, [r4, #12]
 8001334:	b002      	add	sp, #8
 8001336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800133a:	4620      	mov	r0, r4
 800133c:	f001 fbc0 	bl	8002ac0 <d_expr_primary>
 8001340:	4684      	mov	ip, r0
 8001342:	e7e2      	b.n	800130a <d_template_args_1+0x5a>
 8001344:	4620      	mov	r0, r4
 8001346:	f000 f815 	bl	8001374 <d_template_args>
 800134a:	4684      	mov	ip, r0
 800134c:	e7dd      	b.n	800130a <d_template_args_1+0x5a>
 800134e:	4620      	mov	r0, r4
 8001350:	f000 f9c6 	bl	80016e0 <d_type>
 8001354:	4684      	mov	ip, r0
 8001356:	e7d8      	b.n	800130a <d_template_args_1+0x5a>
 8001358:	2000      	movs	r0, #0
 800135a:	b002      	add	sp, #8
 800135c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001360:	3201      	adds	r2, #1
 8001362:	2300      	movs	r3, #0
 8001364:	60c2      	str	r2, [r0, #12]
 8001366:	212f      	movs	r1, #47	; 0x2f
 8001368:	461a      	mov	r2, r3
 800136a:	b002      	add	sp, #8
 800136c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001370:	f7fe bf36 	b.w	80001e0 <d_make_comp>

08001374 <d_template_args>:
 8001374:	68c3      	ldr	r3, [r0, #12]
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	3a49      	subs	r2, #73	; 0x49
 800137a:	2a01      	cmp	r2, #1
 800137c:	d802      	bhi.n	8001384 <d_template_args+0x10>
 800137e:	3301      	adds	r3, #1
 8001380:	60c3      	str	r3, [r0, #12]
 8001382:	e795      	b.n	80012b0 <d_template_args_1>
 8001384:	2000      	movs	r0, #0
 8001386:	4770      	bx	lr

08001388 <d_name>:
 8001388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800138c:	68c2      	ldr	r2, [r0, #12]
 800138e:	7813      	ldrb	r3, [r2, #0]
 8001390:	3b4e      	subs	r3, #78	; 0x4e
 8001392:	b083      	sub	sp, #12
 8001394:	4604      	mov	r4, r0
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d846      	bhi.n	8001428 <d_name+0xa0>
 800139a:	e8df f003 	tbb	[pc, r3]
 800139e:	4567      	.short	0x4567
 80013a0:	0e454545 	.word	0x0e454545
 80013a4:	45450745 	.word	0x45450745
 80013a8:	4545      	.short	0x4545
 80013aa:	a4          	.byte	0xa4
 80013ab:	00          	.byte	0x00
 80013ac:	f000 ff3e 	bl	800222c <d_unqualified_name>
 80013b0:	4605      	mov	r5, r0
 80013b2:	4628      	mov	r0, r5
 80013b4:	b003      	add	sp, #12
 80013b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ba:	7853      	ldrb	r3, [r2, #1]
 80013bc:	2b74      	cmp	r3, #116	; 0x74
 80013be:	f040 80d7 	bne.w	8001570 <d_name+0x1e8>
 80013c2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80013c6:	3202      	adds	r2, #2
 80013c8:	428b      	cmp	r3, r1
 80013ca:	60c2      	str	r2, [r0, #12]
 80013cc:	f280 8127 	bge.w	800161e <d_name+0x296>
 80013d0:	6901      	ldr	r1, [r0, #16]
 80013d2:	48c0      	ldr	r0, [pc, #768]	; (80016d4 <d_name+0x34c>)
 80013d4:	011a      	lsls	r2, r3, #4
 80013d6:	188d      	adds	r5, r1, r2
 80013d8:	3301      	adds	r3, #1
 80013da:	6163      	str	r3, [r4, #20]
 80013dc:	2300      	movs	r3, #0
 80013de:	606b      	str	r3, [r5, #4]
 80013e0:	548b      	strb	r3, [r1, r2]
 80013e2:	2303      	movs	r3, #3
 80013e4:	e9c5 0302 	strd	r0, r3, [r5, #8]
 80013e8:	4620      	mov	r0, r4
 80013ea:	f000 ff1f 	bl	800222c <d_unqualified_name>
 80013ee:	462a      	mov	r2, r5
 80013f0:	4603      	mov	r3, r0
 80013f2:	2101      	movs	r1, #1
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7fe fef3 	bl	80001e0 <d_make_comp>
 80013fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013fc:	68e2      	ldr	r2, [r4, #12]
 80013fe:	3303      	adds	r3, #3
 8001400:	6323      	str	r3, [r4, #48]	; 0x30
 8001402:	7813      	ldrb	r3, [r2, #0]
 8001404:	2b49      	cmp	r3, #73	; 0x49
 8001406:	4605      	mov	r5, r0
 8001408:	d1d3      	bne.n	80013b2 <d_name+0x2a>
 800140a:	2800      	cmp	r0, #0
 800140c:	f000 80ba 	beq.w	8001584 <d_name+0x1fc>
 8001410:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001414:	4293      	cmp	r3, r2
 8001416:	f280 80b5 	bge.w	8001584 <d_name+0x1fc>
 800141a:	69e1      	ldr	r1, [r4, #28]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001422:	6222      	str	r2, [r4, #32]
 8001424:	4620      	mov	r0, r4
 8001426:	e014      	b.n	8001452 <d_name+0xca>
 8001428:	f000 ff00 	bl	800222c <d_unqualified_name>
 800142c:	68e3      	ldr	r3, [r4, #12]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b49      	cmp	r3, #73	; 0x49
 8001432:	4605      	mov	r5, r0
 8001434:	d1bd      	bne.n	80013b2 <d_name+0x2a>
 8001436:	2800      	cmp	r0, #0
 8001438:	f000 80a4 	beq.w	8001584 <d_name+0x1fc>
 800143c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001440:	4293      	cmp	r3, r2
 8001442:	f280 809f 	bge.w	8001584 <d_name+0x1fc>
 8001446:	69e1      	ldr	r1, [r4, #28]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800144e:	4620      	mov	r0, r4
 8001450:	6222      	str	r2, [r4, #32]
 8001452:	f7ff ff8f 	bl	8001374 <d_template_args>
 8001456:	462a      	mov	r2, r5
 8001458:	4603      	mov	r3, r0
 800145a:	2104      	movs	r1, #4
 800145c:	4620      	mov	r0, r4
 800145e:	f7fe febf 	bl	80001e0 <d_make_comp>
 8001462:	4605      	mov	r5, r0
 8001464:	4628      	mov	r0, r5
 8001466:	b003      	add	sp, #12
 8001468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800146c:	3201      	adds	r2, #1
 800146e:	60c2      	str	r2, [r0, #12]
 8001470:	a901      	add	r1, sp, #4
 8001472:	2201      	movs	r2, #1
 8001474:	f000 fde6 	bl	8002044 <d_cv_qualifiers>
 8001478:	4680      	mov	r8, r0
 800147a:	2800      	cmp	r0, #0
 800147c:	f000 8082 	beq.w	8001584 <d_name+0x1fc>
 8001480:	2100      	movs	r1, #0
 8001482:	4620      	mov	r0, r4
 8001484:	f7fe fef4 	bl	8000270 <d_ref_qualifier>
 8001488:	68e2      	ldr	r2, [r4, #12]
 800148a:	4e93      	ldr	r6, [pc, #588]	; (80016d8 <d_name+0x350>)
 800148c:	7815      	ldrb	r5, [r2, #0]
 800148e:	4681      	mov	r9, r0
 8001490:	2700      	movs	r7, #0
 8001492:	2d00      	cmp	r5, #0
 8001494:	f000 80b3 	beq.w	80015fe <d_name+0x276>
 8001498:	2d44      	cmp	r5, #68	; 0x44
 800149a:	f000 8096 	beq.w	80015ca <d_name+0x242>
 800149e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b1c      	cmp	r3, #28
 80014a6:	d96f      	bls.n	8001588 <d_name+0x200>
 80014a8:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b19      	cmp	r3, #25
 80014b0:	d96e      	bls.n	8001590 <d_name+0x208>
 80014b2:	2d55      	cmp	r5, #85	; 0x55
 80014b4:	f000 80a1 	beq.w	80015fa <d_name+0x272>
 80014b8:	2d53      	cmp	r5, #83	; 0x53
 80014ba:	f000 80b2 	beq.w	8001622 <d_name+0x29a>
 80014be:	2d49      	cmp	r5, #73	; 0x49
 80014c0:	f000 80a4 	beq.w	800160c <d_name+0x284>
 80014c4:	2d54      	cmp	r5, #84	; 0x54
 80014c6:	f000 80e6 	beq.w	8001696 <d_name+0x30e>
 80014ca:	2d45      	cmp	r5, #69	; 0x45
 80014cc:	f000 80e9 	beq.w	80016a2 <d_name+0x31a>
 80014d0:	2d4d      	cmp	r5, #77	; 0x4d
 80014d2:	f040 8094 	bne.w	80015fe <d_name+0x276>
 80014d6:	2f00      	cmp	r7, #0
 80014d8:	f000 8091 	beq.w	80015fe <d_name+0x276>
 80014dc:	1c53      	adds	r3, r2, #1
 80014de:	60e3      	str	r3, [r4, #12]
 80014e0:	7855      	ldrb	r5, [r2, #1]
 80014e2:	461a      	mov	r2, r3
 80014e4:	e7d5      	b.n	8001492 <d_name+0x10a>
 80014e6:	3201      	adds	r2, #1
 80014e8:	60c2      	str	r2, [r0, #12]
 80014ea:	2100      	movs	r1, #0
 80014ec:	f001 f83a 	bl	8002564 <d_encoding>
 80014f0:	68e3      	ldr	r3, [r4, #12]
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	2a45      	cmp	r2, #69	; 0x45
 80014f6:	4606      	mov	r6, r0
 80014f8:	d144      	bne.n	8001584 <d_name+0x1fc>
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60e2      	str	r2, [r4, #12]
 80014fe:	785a      	ldrb	r2, [r3, #1]
 8001500:	2a73      	cmp	r2, #115	; 0x73
 8001502:	f000 80b0 	beq.w	8001666 <d_name+0x2de>
 8001506:	2a64      	cmp	r2, #100	; 0x64
 8001508:	f000 8095 	beq.w	8001636 <d_name+0x2ae>
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff ff3b 	bl	8001388 <d_name>
 8001512:	4605      	mov	r5, r0
 8001514:	b308      	cbz	r0, 800155a <d_name+0x1d2>
 8001516:	7803      	ldrb	r3, [r0, #0]
 8001518:	2b45      	cmp	r3, #69	; 0x45
 800151a:	d01e      	beq.n	800155a <d_name+0x1d2>
 800151c:	2b47      	cmp	r3, #71	; 0x47
 800151e:	d01c      	beq.n	800155a <d_name+0x1d2>
 8001520:	f04f 37ff 	mov.w	r7, #4294967295
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff f903 	bl	8000730 <d_discriminator>
 800152a:	b358      	cbz	r0, 8001584 <d_name+0x1fc>
 800152c:	1c7b      	adds	r3, r7, #1
 800152e:	d014      	beq.n	800155a <d_name+0x1d2>
 8001530:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001534:	4293      	cmp	r3, r2
 8001536:	f280 8094 	bge.w	8001662 <d_name+0x2da>
 800153a:	6920      	ldr	r0, [r4, #16]
 800153c:	0119      	lsls	r1, r3, #4
 800153e:	1842      	adds	r2, r0, r1
 8001540:	3301      	adds	r3, #1
 8001542:	f04f 0e00 	mov.w	lr, #0
 8001546:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800154a:	f8c2 e004 	str.w	lr, [r2, #4]
 800154e:	6163      	str	r3, [r4, #20]
 8001550:	f800 c001 	strb.w	ip, [r0, r1]
 8001554:	e9c2 5702 	strd	r5, r7, [r2, #8]
 8001558:	4615      	mov	r5, r2
 800155a:	462b      	mov	r3, r5
 800155c:	4632      	mov	r2, r6
 800155e:	4620      	mov	r0, r4
 8001560:	2102      	movs	r1, #2
 8001562:	f7fe fe3d 	bl	80001e0 <d_make_comp>
 8001566:	4605      	mov	r5, r0
 8001568:	4628      	mov	r0, r5
 800156a:	b003      	add	sp, #12
 800156c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001570:	2100      	movs	r1, #0
 8001572:	f7ff f825 	bl	80005c0 <d_substitution>
 8001576:	68e3      	ldr	r3, [r4, #12]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b49      	cmp	r3, #73	; 0x49
 800157c:	4605      	mov	r5, r0
 800157e:	f47f af18 	bne.w	80013b2 <d_name+0x2a>
 8001582:	e74f      	b.n	8001424 <d_name+0x9c>
 8001584:	2500      	movs	r5, #0
 8001586:	e714      	b.n	80013b2 <d_name+0x2a>
 8001588:	fa26 f303 	lsr.w	r3, r6, r3
 800158c:	07d9      	lsls	r1, r3, #31
 800158e:	d58b      	bpl.n	80014a8 <d_name+0x120>
 8001590:	4620      	mov	r0, r4
 8001592:	f000 fe4b 	bl	800222c <d_unqualified_name>
 8001596:	b35f      	cbz	r7, 80015f0 <d_name+0x268>
 8001598:	2101      	movs	r1, #1
 800159a:	4603      	mov	r3, r0
 800159c:	463a      	mov	r2, r7
 800159e:	4620      	mov	r0, r4
 80015a0:	f7fe fe1e 	bl	80001e0 <d_make_comp>
 80015a4:	4607      	mov	r7, r0
 80015a6:	68e2      	ldr	r2, [r4, #12]
 80015a8:	2d53      	cmp	r5, #83	; 0x53
 80015aa:	7813      	ldrb	r3, [r2, #0]
 80015ac:	d01e      	beq.n	80015ec <d_name+0x264>
 80015ae:	2b45      	cmp	r3, #69	; 0x45
 80015b0:	d01a      	beq.n	80015e8 <d_name+0x260>
 80015b2:	b327      	cbz	r7, 80015fe <d_name+0x276>
 80015b4:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80015b8:	428b      	cmp	r3, r1
 80015ba:	da20      	bge.n	80015fe <d_name+0x276>
 80015bc:	69e1      	ldr	r1, [r4, #28]
 80015be:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80015c2:	3301      	adds	r3, #1
 80015c4:	6223      	str	r3, [r4, #32]
 80015c6:	7815      	ldrb	r5, [r2, #0]
 80015c8:	e763      	b.n	8001492 <d_name+0x10a>
 80015ca:	7853      	ldrb	r3, [r2, #1]
 80015cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80015d0:	2b54      	cmp	r3, #84	; 0x54
 80015d2:	4620      	mov	r0, r4
 80015d4:	d00e      	beq.n	80015f4 <d_name+0x26c>
 80015d6:	f000 fe29 	bl	800222c <d_unqualified_name>
 80015da:	2f00      	cmp	r7, #0
 80015dc:	d1dc      	bne.n	8001598 <d_name+0x210>
 80015de:	68e2      	ldr	r2, [r4, #12]
 80015e0:	7813      	ldrb	r3, [r2, #0]
 80015e2:	2b45      	cmp	r3, #69	; 0x45
 80015e4:	4607      	mov	r7, r0
 80015e6:	d1e4      	bne.n	80015b2 <d_name+0x22a>
 80015e8:	461d      	mov	r5, r3
 80015ea:	e758      	b.n	800149e <d_name+0x116>
 80015ec:	461d      	mov	r5, r3
 80015ee:	e750      	b.n	8001492 <d_name+0x10a>
 80015f0:	4607      	mov	r7, r0
 80015f2:	e7d8      	b.n	80015a6 <d_name+0x21e>
 80015f4:	f000 f874 	bl	80016e0 <d_type>
 80015f8:	e7ef      	b.n	80015da <d_name+0x252>
 80015fa:	4620      	mov	r0, r4
 80015fc:	e7eb      	b.n	80015d6 <d_name+0x24e>
 80015fe:	2500      	movs	r5, #0
 8001600:	4628      	mov	r0, r5
 8001602:	f8c8 5000 	str.w	r5, [r8]
 8001606:	b003      	add	sp, #12
 8001608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800160c:	2f00      	cmp	r7, #0
 800160e:	d0f6      	beq.n	80015fe <d_name+0x276>
 8001610:	3201      	adds	r2, #1
 8001612:	60e2      	str	r2, [r4, #12]
 8001614:	4620      	mov	r0, r4
 8001616:	f7ff fe4b 	bl	80012b0 <d_template_args_1>
 800161a:	2104      	movs	r1, #4
 800161c:	e7bd      	b.n	800159a <d_name+0x212>
 800161e:	2500      	movs	r5, #0
 8001620:	e6e2      	b.n	80013e8 <d_name+0x60>
 8001622:	2101      	movs	r1, #1
 8001624:	4620      	mov	r0, r4
 8001626:	f7fe ffcb 	bl	80005c0 <d_substitution>
 800162a:	2f00      	cmp	r7, #0
 800162c:	d1b4      	bne.n	8001598 <d_name+0x210>
 800162e:	68e2      	ldr	r2, [r4, #12]
 8001630:	4607      	mov	r7, r0
 8001632:	7815      	ldrb	r5, [r2, #0]
 8001634:	e72d      	b.n	8001492 <d_name+0x10a>
 8001636:	3302      	adds	r3, #2
 8001638:	60e3      	str	r3, [r4, #12]
 800163a:	4620      	mov	r0, r4
 800163c:	f7fe ff0e 	bl	800045c <d_compact_number>
 8001640:	1e07      	subs	r7, r0, #0
 8001642:	db9f      	blt.n	8001584 <d_name+0x1fc>
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff fe9f 	bl	8001388 <d_name>
 800164a:	4605      	mov	r5, r0
 800164c:	2800      	cmp	r0, #0
 800164e:	f43f af6f 	beq.w	8001530 <d_name+0x1a8>
 8001652:	7803      	ldrb	r3, [r0, #0]
 8001654:	2b45      	cmp	r3, #69	; 0x45
 8001656:	f43f af69 	beq.w	800152c <d_name+0x1a4>
 800165a:	2b47      	cmp	r3, #71	; 0x47
 800165c:	f43f af66 	beq.w	800152c <d_name+0x1a4>
 8001660:	e760      	b.n	8001524 <d_name+0x19c>
 8001662:	2500      	movs	r5, #0
 8001664:	e779      	b.n	800155a <d_name+0x1d2>
 8001666:	3302      	adds	r3, #2
 8001668:	60e3      	str	r3, [r4, #12]
 800166a:	4620      	mov	r0, r4
 800166c:	f7ff f860 	bl	8000730 <d_discriminator>
 8001670:	2800      	cmp	r0, #0
 8001672:	d087      	beq.n	8001584 <d_name+0x1fc>
 8001674:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8001678:	429a      	cmp	r2, r3
 800167a:	da10      	bge.n	800169e <d_name+0x316>
 800167c:	6920      	ldr	r0, [r4, #16]
 800167e:	4d17      	ldr	r5, [pc, #92]	; (80016dc <d_name+0x354>)
 8001680:	0111      	lsls	r1, r2, #4
 8001682:	1843      	adds	r3, r0, r1
 8001684:	3201      	adds	r2, #1
 8001686:	6162      	str	r2, [r4, #20]
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	5442      	strb	r2, [r0, r1]
 800168e:	220e      	movs	r2, #14
 8001690:	e9c3 5202 	strd	r5, r2, [r3, #8]
 8001694:	e762      	b.n	800155c <d_name+0x1d4>
 8001696:	4620      	mov	r0, r4
 8001698:	f7fe fefa 	bl	8000490 <d_template_param>
 800169c:	e79d      	b.n	80015da <d_name+0x252>
 800169e:	2300      	movs	r3, #0
 80016a0:	e75c      	b.n	800155c <d_name+0x1d4>
 80016a2:	f8c8 7000 	str.w	r7, [r8]
 80016a6:	2f00      	cmp	r7, #0
 80016a8:	f43f af6c 	beq.w	8001584 <d_name+0x1fc>
 80016ac:	f1b9 0f00 	cmp.w	r9, #0
 80016b0:	d004      	beq.n	80016bc <d_name+0x334>
 80016b2:	9b01      	ldr	r3, [sp, #4]
 80016b4:	f8c9 3008 	str.w	r3, [r9, #8]
 80016b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80016bc:	7813      	ldrb	r3, [r2, #0]
 80016be:	2b45      	cmp	r3, #69	; 0x45
 80016c0:	f47f af60 	bne.w	8001584 <d_name+0x1fc>
 80016c4:	9d01      	ldr	r5, [sp, #4]
 80016c6:	3201      	adds	r2, #1
 80016c8:	4628      	mov	r0, r5
 80016ca:	60e2      	str	r2, [r4, #12]
 80016cc:	b003      	add	sp, #12
 80016ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016d2:	bf00      	nop
 80016d4:	0801c214 	.word	0x0801c214
 80016d8:	100803ff 	.word	0x100803ff
 80016dc:	0801c204 	.word	0x0801c204

080016e0 <d_type>:
 80016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e4:	68c2      	ldr	r2, [r0, #12]
 80016e6:	7813      	ldrb	r3, [r2, #0]
 80016e8:	2b72      	cmp	r3, #114	; 0x72
 80016ea:	b083      	sub	sp, #12
 80016ec:	4604      	mov	r4, r0
 80016ee:	d05f      	beq.n	80017b0 <d_type+0xd0>
 80016f0:	2b56      	cmp	r3, #86	; 0x56
 80016f2:	d05d      	beq.n	80017b0 <d_type+0xd0>
 80016f4:	2b4b      	cmp	r3, #75	; 0x4b
 80016f6:	d05b      	beq.n	80017b0 <d_type+0xd0>
 80016f8:	2b44      	cmp	r3, #68	; 0x44
 80016fa:	d051      	beq.n	80017a0 <d_type+0xc0>
 80016fc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001700:	294a      	cmp	r1, #74	; 0x4a
 8001702:	f200 809e 	bhi.w	8001842 <d_type+0x162>
 8001706:	e8df f011 	tbh	[pc, r1, lsl #1]
 800170a:	0111      	.short	0x0111
 800170c:	01110111 	.word	0x01110111
 8001710:	01110111 	.word	0x01110111
 8001714:	01110111 	.word	0x01110111
 8001718:	01110111 	.word	0x01110111
 800171c:	009c0111 	.word	0x009c0111
 8001720:	009c009c 	.word	0x009c009c
 8001724:	009c009c 	.word	0x009c009c
 8001728:	009c009c 	.word	0x009c009c
 800172c:	009c021e 	.word	0x009c021e
 8001730:	009c013b 	.word	0x009c013b
 8001734:	0135009c 	.word	0x0135009c
 8001738:	009c0149 	.word	0x009c0149
 800173c:	009c009c 	.word	0x009c009c
 8001740:	009c009c 	.word	0x009c009c
 8001744:	01110206 	.word	0x01110206
 8001748:	01650157 	.word	0x01650157
 800174c:	0173009c 	.word	0x0173009c
 8001750:	01a50181 	.word	0x01a50181
 8001754:	009c01cc 	.word	0x009c01cc
 8001758:	009c009c 	.word	0x009c009c
 800175c:	0111009c 	.word	0x0111009c
 8001760:	009c009c 	.word	0x009c009c
 8001764:	009c009c 	.word	0x009c009c
 8001768:	009c009c 	.word	0x009c009c
 800176c:	01e401e4 	.word	0x01e401e4
 8001770:	01e401e4 	.word	0x01e401e4
 8001774:	01e401e4 	.word	0x01e401e4
 8001778:	01e401e4 	.word	0x01e401e4
 800177c:	01e401e4 	.word	0x01e401e4
 8001780:	01e4009c 	.word	0x01e4009c
 8001784:	01e401e4 	.word	0x01e401e4
 8001788:	009c01e4 	.word	0x009c01e4
 800178c:	009c009c 	.word	0x009c009c
 8001790:	01e401e4 	.word	0x01e401e4
 8001794:	01e40127 	.word	0x01e40127
 8001798:	01e401e4 	.word	0x01e401e4
 800179c:	01e401e4 	.word	0x01e401e4
 80017a0:	7853      	ldrb	r3, [r2, #1]
 80017a2:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80017a6:	294f      	cmp	r1, #79	; 0x4f
 80017a8:	d002      	beq.n	80017b0 <d_type+0xd0>
 80017aa:	3b77      	subs	r3, #119	; 0x77
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d84d      	bhi.n	800184c <d_type+0x16c>
 80017b0:	2200      	movs	r2, #0
 80017b2:	a901      	add	r1, sp, #4
 80017b4:	4620      	mov	r0, r4
 80017b6:	f000 fc45 	bl	8002044 <d_cv_qualifiers>
 80017ba:	4605      	mov	r5, r0
 80017bc:	2800      	cmp	r0, #0
 80017be:	d040      	beq.n	8001842 <d_type+0x162>
 80017c0:	68e3      	ldr	r3, [r4, #12]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b46      	cmp	r3, #70	; 0x46
 80017c6:	4620      	mov	r0, r4
 80017c8:	d119      	bne.n	80017fe <d_type+0x11e>
 80017ca:	f000 fd0f 	bl	80021ec <d_function_type>
 80017ce:	6028      	str	r0, [r5, #0]
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d036      	beq.n	8001842 <d_type+0x162>
 80017d4:	7803      	ldrb	r3, [r0, #0]
 80017d6:	9a01      	ldr	r2, [sp, #4]
 80017d8:	3b1f      	subs	r3, #31
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d913      	bls.n	8001806 <d_type+0x126>
 80017de:	2a00      	cmp	r2, #0
 80017e0:	d02f      	beq.n	8001842 <d_type+0x162>
 80017e2:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80017e6:	428b      	cmp	r3, r1
 80017e8:	da2b      	bge.n	8001842 <d_type+0x162>
 80017ea:	69e0      	ldr	r0, [r4, #28]
 80017ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80017f0:	1c59      	adds	r1, r3, #1
 80017f2:	9d01      	ldr	r5, [sp, #4]
 80017f4:	6221      	str	r1, [r4, #32]
 80017f6:	4628      	mov	r0, r5
 80017f8:	b003      	add	sp, #12
 80017fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017fe:	f7ff ff6f 	bl	80016e0 <d_type>
 8001802:	6028      	str	r0, [r5, #0]
 8001804:	e7e4      	b.n	80017d0 <d_type+0xf0>
 8001806:	6883      	ldr	r3, [r0, #8]
 8001808:	6082      	str	r2, [r0, #8]
 800180a:	682a      	ldr	r2, [r5, #0]
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	602b      	str	r3, [r5, #0]
 8001810:	9a01      	ldr	r2, [sp, #4]
 8001812:	e7e4      	b.n	80017de <d_type+0xfe>
 8001814:	2301      	movs	r3, #1
 8001816:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001818:	6343      	str	r3, [r0, #52]	; 0x34
 800181a:	f7ff fb37 	bl	8000e8c <d_expression_1>
 800181e:	6365      	str	r5, [r4, #52]	; 0x34
 8001820:	4602      	mov	r2, r0
 8001822:	2300      	movs	r3, #0
 8001824:	2142      	movs	r1, #66	; 0x42
 8001826:	4620      	mov	r0, r4
 8001828:	f7fe fcda 	bl	80001e0 <d_make_comp>
 800182c:	4605      	mov	r5, r0
 800182e:	9001      	str	r0, [sp, #4]
 8001830:	b138      	cbz	r0, 8001842 <d_type+0x162>
 8001832:	68e3      	ldr	r3, [r4, #12]
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	b122      	cbz	r2, 8001842 <d_type+0x162>
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	60e2      	str	r2, [r4, #12]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b45      	cmp	r3, #69	; 0x45
 8001840:	d07b      	beq.n	800193a <d_type+0x25a>
 8001842:	2500      	movs	r5, #0
 8001844:	4628      	mov	r0, r5
 8001846:	b003      	add	sp, #12
 8001848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800184c:	1c53      	adds	r3, r2, #1
 800184e:	60c3      	str	r3, [r0, #12]
 8001850:	7853      	ldrb	r3, [r2, #1]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f5      	beq.n	8001842 <d_type+0x162>
 8001856:	1c93      	adds	r3, r2, #2
 8001858:	60c3      	str	r3, [r0, #12]
 800185a:	7853      	ldrb	r3, [r2, #1]
 800185c:	3b46      	subs	r3, #70	; 0x46
 800185e:	2b30      	cmp	r3, #48	; 0x30
 8001860:	d8ef      	bhi.n	8001842 <d_type+0x162>
 8001862:	a101      	add	r1, pc, #4	; (adr r1, 8001868 <d_type+0x188>)
 8001864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001868:	08001d25 	.word	0x08001d25
 800186c:	08001843 	.word	0x08001843
 8001870:	08001843 	.word	0x08001843
 8001874:	08001843 	.word	0x08001843
 8001878:	08001843 	.word	0x08001843
 800187c:	08001843 	.word	0x08001843
 8001880:	08001843 	.word	0x08001843
 8001884:	08001843 	.word	0x08001843
 8001888:	08001843 	.word	0x08001843
 800188c:	08001843 	.word	0x08001843
 8001890:	08001843 	.word	0x08001843
 8001894:	08001843 	.word	0x08001843
 8001898:	08001843 	.word	0x08001843
 800189c:	08001843 	.word	0x08001843
 80018a0:	08001815 	.word	0x08001815
 80018a4:	08001843 	.word	0x08001843
 80018a8:	08001843 	.word	0x08001843
 80018ac:	08001843 	.word	0x08001843
 80018b0:	08001843 	.word	0x08001843
 80018b4:	08001843 	.word	0x08001843
 80018b8:	08001843 	.word	0x08001843
 80018bc:	08001843 	.word	0x08001843
 80018c0:	08001843 	.word	0x08001843
 80018c4:	08001843 	.word	0x08001843
 80018c8:	08001843 	.word	0x08001843
 80018cc:	08001843 	.word	0x08001843
 80018d0:	08001843 	.word	0x08001843
 80018d4:	08001d01 	.word	0x08001d01
 80018d8:	08001843 	.word	0x08001843
 80018dc:	08001cdd 	.word	0x08001cdd
 80018e0:	08001cb5 	.word	0x08001cb5
 80018e4:	08001c8d 	.word	0x08001c8d
 80018e8:	08001c65 	.word	0x08001c65
 80018ec:	08001843 	.word	0x08001843
 80018f0:	08001c3d 	.word	0x08001c3d
 80018f4:	08001dd9 	.word	0x08001dd9
 80018f8:	08001843 	.word	0x08001843
 80018fc:	08001843 	.word	0x08001843
 8001900:	08001843 	.word	0x08001843
 8001904:	08001843 	.word	0x08001843
 8001908:	08001d8d 	.word	0x08001d8d
 800190c:	08001843 	.word	0x08001843
 8001910:	08001c27 	.word	0x08001c27
 8001914:	08001843 	.word	0x08001843
 8001918:	08001843 	.word	0x08001843
 800191c:	08001bff 	.word	0x08001bff
 8001920:	08001815 	.word	0x08001815
 8001924:	08001843 	.word	0x08001843
 8001928:	08001bc5 	.word	0x08001bc5
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff fd2b 	bl	8001388 <d_name>
 8001932:	4605      	mov	r5, r0
 8001934:	9001      	str	r0, [sp, #4]
 8001936:	2d00      	cmp	r5, #0
 8001938:	d083      	beq.n	8001842 <d_type+0x162>
 800193a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800193e:	4293      	cmp	r3, r2
 8001940:	f6bf af7f 	bge.w	8001842 <d_type+0x162>
 8001944:	69e1      	ldr	r1, [r4, #28]
 8001946:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800194a:	9d01      	ldr	r5, [sp, #4]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	4628      	mov	r0, r5
 8001950:	6222      	str	r2, [r4, #32]
 8001952:	b003      	add	sp, #12
 8001954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001958:	3201      	adds	r2, #1
 800195a:	60e2      	str	r2, [r4, #12]
 800195c:	4620      	mov	r0, r4
 800195e:	f7fe fdb9 	bl	80004d4 <d_source_name>
 8001962:	2300      	movs	r3, #0
 8001964:	4602      	mov	r2, r0
 8001966:	2128      	movs	r1, #40	; 0x28
 8001968:	4620      	mov	r0, r4
 800196a:	f7fe fc39 	bl	80001e0 <d_make_comp>
 800196e:	4605      	mov	r5, r0
 8001970:	9001      	str	r0, [sp, #4]
 8001972:	e7e0      	b.n	8001936 <d_type+0x256>
 8001974:	4620      	mov	r0, r4
 8001976:	f000 fc39 	bl	80021ec <d_function_type>
 800197a:	4605      	mov	r5, r0
 800197c:	9001      	str	r0, [sp, #4]
 800197e:	e7da      	b.n	8001936 <d_type+0x256>
 8001980:	3201      	adds	r2, #1
 8001982:	60e2      	str	r2, [r4, #12]
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff feab 	bl	80016e0 <d_type>
 800198a:	2300      	movs	r3, #0
 800198c:	4602      	mov	r2, r0
 800198e:	2125      	movs	r1, #37	; 0x25
 8001990:	4620      	mov	r0, r4
 8001992:	f7fe fc25 	bl	80001e0 <d_make_comp>
 8001996:	4605      	mov	r5, r0
 8001998:	9001      	str	r0, [sp, #4]
 800199a:	e7cc      	b.n	8001936 <d_type+0x256>
 800199c:	3201      	adds	r2, #1
 800199e:	60e2      	str	r2, [r4, #12]
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fe9d 	bl	80016e0 <d_type>
 80019a6:	2300      	movs	r3, #0
 80019a8:	4602      	mov	r2, r0
 80019aa:	2126      	movs	r1, #38	; 0x26
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7fe fc17 	bl	80001e0 <d_make_comp>
 80019b2:	4605      	mov	r5, r0
 80019b4:	9001      	str	r0, [sp, #4]
 80019b6:	e7be      	b.n	8001936 <d_type+0x256>
 80019b8:	3201      	adds	r2, #1
 80019ba:	60e2      	str	r2, [r4, #12]
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff fe8f 	bl	80016e0 <d_type>
 80019c2:	2300      	movs	r3, #0
 80019c4:	4602      	mov	r2, r0
 80019c6:	2124      	movs	r1, #36	; 0x24
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7fe fc09 	bl	80001e0 <d_make_comp>
 80019ce:	4605      	mov	r5, r0
 80019d0:	9001      	str	r0, [sp, #4]
 80019d2:	e7b0      	b.n	8001936 <d_type+0x256>
 80019d4:	3201      	adds	r2, #1
 80019d6:	60e2      	str	r2, [r4, #12]
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff fe81 	bl	80016e0 <d_type>
 80019de:	2300      	movs	r3, #0
 80019e0:	4602      	mov	r2, r0
 80019e2:	2122      	movs	r1, #34	; 0x22
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7fe fbfb 	bl	80001e0 <d_make_comp>
 80019ea:	4605      	mov	r5, r0
 80019ec:	9001      	str	r0, [sp, #4]
 80019ee:	e7a2      	b.n	8001936 <d_type+0x256>
 80019f0:	3201      	adds	r2, #1
 80019f2:	60e2      	str	r2, [r4, #12]
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fe73 	bl	80016e0 <d_type>
 80019fa:	2300      	movs	r3, #0
 80019fc:	4602      	mov	r2, r0
 80019fe:	2123      	movs	r1, #35	; 0x23
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7fe fbed 	bl	80001e0 <d_make_comp>
 8001a06:	4605      	mov	r5, r0
 8001a08:	9001      	str	r0, [sp, #4]
 8001a0a:	e794      	b.n	8001936 <d_type+0x256>
 8001a0c:	7853      	ldrb	r3, [r2, #1]
 8001a0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a12:	2a09      	cmp	r2, #9
 8001a14:	d905      	bls.n	8001a22 <d_type+0x342>
 8001a16:	2b5f      	cmp	r3, #95	; 0x5f
 8001a18:	d003      	beq.n	8001a22 <d_type+0x342>
 8001a1a:	3b41      	subs	r3, #65	; 0x41
 8001a1c:	2b19      	cmp	r3, #25
 8001a1e:	f200 820f 	bhi.w	8001e40 <d_type+0x760>
 8001a22:	2100      	movs	r1, #0
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7fe fdcb 	bl	80005c0 <d_substitution>
 8001a2a:	68e3      	ldr	r3, [r4, #12]
 8001a2c:	9001      	str	r0, [sp, #4]
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	2a49      	cmp	r2, #73	; 0x49
 8001a32:	4605      	mov	r5, r0
 8001a34:	f47f aedf 	bne.w	80017f6 <d_type+0x116>
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60e3      	str	r3, [r4, #12]
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff fc37 	bl	80012b0 <d_template_args_1>
 8001a42:	4603      	mov	r3, r0
 8001a44:	462a      	mov	r2, r5
 8001a46:	2104      	movs	r1, #4
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7fe fbc9 	bl	80001e0 <d_make_comp>
 8001a4e:	4605      	mov	r5, r0
 8001a50:	9001      	str	r0, [sp, #4]
 8001a52:	e770      	b.n	8001936 <d_type+0x256>
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7fe fd1b 	bl	8000490 <d_template_param>
 8001a5a:	68e6      	ldr	r6, [r4, #12]
 8001a5c:	9001      	str	r0, [sp, #4]
 8001a5e:	7833      	ldrb	r3, [r6, #0]
 8001a60:	2b49      	cmp	r3, #73	; 0x49
 8001a62:	4605      	mov	r5, r0
 8001a64:	f47f af67 	bne.w	8001936 <d_type+0x256>
 8001a68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 81f5 	bne.w	8001e5a <d_type+0x77a>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	f43f aee6 	beq.w	8001842 <d_type+0x162>
 8001a76:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001a7a:	428a      	cmp	r2, r1
 8001a7c:	f6bf aee1 	bge.w	8001842 <d_type+0x162>
 8001a80:	69e1      	ldr	r1, [r4, #28]
 8001a82:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001a86:	3201      	adds	r2, #1
 8001a88:	6222      	str	r2, [r4, #32]
 8001a8a:	7831      	ldrb	r1, [r6, #0]
 8001a8c:	9d01      	ldr	r5, [sp, #4]
 8001a8e:	3949      	subs	r1, #73	; 0x49
 8001a90:	2901      	cmp	r1, #1
 8001a92:	d8d7      	bhi.n	8001a44 <d_type+0x364>
 8001a94:	3601      	adds	r6, #1
 8001a96:	60e6      	str	r6, [r4, #12]
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff fc09 	bl	80012b0 <d_template_args_1>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	e7d0      	b.n	8001a44 <d_type+0x364>
 8001aa2:	3201      	adds	r2, #1
 8001aa4:	60e2      	str	r2, [r4, #12]
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7fe fd14 	bl	80004d4 <d_source_name>
 8001aac:	68e3      	ldr	r3, [r4, #12]
 8001aae:	9001      	str	r0, [sp, #4]
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	2a49      	cmp	r2, #73	; 0x49
 8001ab4:	4605      	mov	r5, r0
 8001ab6:	f000 81a8 	beq.w	8001e0a <d_type+0x72a>
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff fe10 	bl	80016e0 <d_type>
 8001ac0:	9b01      	ldr	r3, [sp, #4]
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	2121      	movs	r1, #33	; 0x21
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7fe fb8a 	bl	80001e0 <d_make_comp>
 8001acc:	4605      	mov	r5, r0
 8001ace:	9001      	str	r0, [sp, #4]
 8001ad0:	e731      	b.n	8001936 <d_type+0x256>
 8001ad2:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8001ad6:	3b61      	subs	r3, #97	; 0x61
 8001ad8:	4db6      	ldr	r5, [pc, #728]	; (8001db4 <d_type+0x6d4>)
 8001ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ade:	4281      	cmp	r1, r0
 8001ae0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001ae4:	f280 818b 	bge.w	8001dfe <d_type+0x71e>
 8001ae8:	6858      	ldr	r0, [r3, #4]
 8001aea:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001aec:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8001af0:	010f      	lsls	r7, r1, #4
 8001af2:	eb0c 0507 	add.w	r5, ip, r7
 8001af6:	4406      	add	r6, r0
 8001af8:	4630      	mov	r0, r6
 8001afa:	3201      	adds	r2, #1
 8001afc:	3101      	adds	r1, #1
 8001afe:	f04f 0e00 	mov.w	lr, #0
 8001b02:	2627      	movs	r6, #39	; 0x27
 8001b04:	f8c5 e004 	str.w	lr, [r5, #4]
 8001b08:	6161      	str	r1, [r4, #20]
 8001b0a:	f80c 6007 	strb.w	r6, [ip, r7]
 8001b0e:	60ab      	str	r3, [r5, #8]
 8001b10:	60e2      	str	r2, [r4, #12]
 8001b12:	6320      	str	r0, [r4, #48]	; 0x30
 8001b14:	e66f      	b.n	80017f6 <d_type+0x116>
 8001b16:	3201      	adds	r2, #1
 8001b18:	60e2      	str	r2, [r4, #12]
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff fde0 	bl	80016e0 <d_type>
 8001b20:	4605      	mov	r5, r0
 8001b22:	2800      	cmp	r0, #0
 8001b24:	f43f ae8d 	beq.w	8001842 <d_type+0x162>
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff fdd9 	bl	80016e0 <d_type>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2800      	cmp	r0, #0
 8001b32:	f43f ae86 	beq.w	8001842 <d_type+0x162>
 8001b36:	462a      	mov	r2, r5
 8001b38:	212b      	movs	r1, #43	; 0x2b
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7fe fb50 	bl	80001e0 <d_make_comp>
 8001b40:	4605      	mov	r5, r0
 8001b42:	9001      	str	r0, [sp, #4]
 8001b44:	e6f7      	b.n	8001936 <d_type+0x256>
 8001b46:	1c55      	adds	r5, r2, #1
 8001b48:	60e5      	str	r5, [r4, #12]
 8001b4a:	7853      	ldrb	r3, [r2, #1]
 8001b4c:	2b5f      	cmp	r3, #95	; 0x5f
 8001b4e:	f000 815a 	beq.w	8001e06 <d_type+0x726>
 8001b52:	3b30      	subs	r3, #48	; 0x30
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	f200 8165 	bhi.w	8001e24 <d_type+0x744>
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	e000      	b.n	8001b60 <d_type+0x480>
 8001b5e:	4608      	mov	r0, r1
 8001b60:	1c41      	adds	r1, r0, #1
 8001b62:	60e1      	str	r1, [r4, #12]
 8001b64:	7843      	ldrb	r3, [r0, #1]
 8001b66:	3b30      	subs	r3, #48	; 0x30
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d9f8      	bls.n	8001b5e <d_type+0x47e>
 8001b6c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	eba1 0705 	sub.w	r7, r1, r5
 8001b76:	f6bf ae64 	bge.w	8001842 <d_type+0x162>
 8001b7a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001b7e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8001b82:	eb0e 060c 	add.w	r6, lr, ip
 8001b86:	3301      	adds	r3, #1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6072      	str	r2, [r6, #4]
 8001b8c:	6163      	str	r3, [r4, #20]
 8001b8e:	2f00      	cmp	r7, #0
 8001b90:	f43f ae57 	beq.w	8001842 <d_type+0x162>
 8001b94:	6072      	str	r2, [r6, #4]
 8001b96:	f80e 200c 	strb.w	r2, [lr, ip]
 8001b9a:	e9c6 5702 	strd	r5, r7, [r6, #8]
 8001b9e:	7843      	ldrb	r3, [r0, #1]
 8001ba0:	460d      	mov	r5, r1
 8001ba2:	2b5f      	cmp	r3, #95	; 0x5f
 8001ba4:	f47f ae4d 	bne.w	8001842 <d_type+0x162>
 8001ba8:	3501      	adds	r5, #1
 8001baa:	60e5      	str	r5, [r4, #12]
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff fd97 	bl	80016e0 <d_type>
 8001bb2:	4632      	mov	r2, r6
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	212a      	movs	r1, #42	; 0x2a
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7fe fb11 	bl	80001e0 <d_make_comp>
 8001bbe:	4605      	mov	r5, r0
 8001bc0:	9001      	str	r0, [sp, #4]
 8001bc2:	e6b8      	b.n	8001936 <d_type+0x256>
 8001bc4:	7893      	ldrb	r3, [r2, #2]
 8001bc6:	2b5f      	cmp	r3, #95	; 0x5f
 8001bc8:	f000 8178 	beq.w	8001ebc <d_type+0x7dc>
 8001bcc:	f7fe fc2e 	bl	800042c <d_number_component>
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	2d00      	cmp	r5, #0
 8001bd4:	f43f ae35 	beq.w	8001842 <d_type+0x162>
 8001bd8:	68e3      	ldr	r3, [r4, #12]
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	2a5f      	cmp	r2, #95	; 0x5f
 8001bde:	f47f ae30 	bne.w	8001842 <d_type+0x162>
 8001be2:	3301      	adds	r3, #1
 8001be4:	60e3      	str	r3, [r4, #12]
 8001be6:	4620      	mov	r0, r4
 8001be8:	f7ff fd7a 	bl	80016e0 <d_type>
 8001bec:	462a      	mov	r2, r5
 8001bee:	4603      	mov	r3, r0
 8001bf0:	212d      	movs	r1, #45	; 0x2d
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe faf4 	bl	80001e0 <d_make_comp>
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	9001      	str	r0, [sp, #4]
 8001bfc:	e69b      	b.n	8001936 <d_type+0x256>
 8001bfe:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c02:	4293      	cmp	r3, r2
 8001c04:	f280 80fb 	bge.w	8001dfe <d_type+0x71e>
 8001c08:	6900      	ldr	r0, [r0, #16]
 8001c0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c0c:	0119      	lsls	r1, r3, #4
 8001c0e:	1845      	adds	r5, r0, r1
 8001c10:	3301      	adds	r3, #1
 8001c12:	2600      	movs	r6, #0
 8001c14:	606e      	str	r6, [r5, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	6163      	str	r3, [r4, #20]
 8001c1a:	2627      	movs	r6, #39	; 0x27
 8001c1c:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <d_type+0x6d8>)
 8001c1e:	5446      	strb	r6, [r0, r1]
 8001c20:	60ab      	str	r3, [r5, #8]
 8001c22:	6322      	str	r2, [r4, #48]	; 0x30
 8001c24:	e5e7      	b.n	80017f6 <d_type+0x116>
 8001c26:	f7ff fd5b 	bl	80016e0 <d_type>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	214a      	movs	r1, #74	; 0x4a
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7fe fad5 	bl	80001e0 <d_make_comp>
 8001c36:	4605      	mov	r5, r0
 8001c38:	9001      	str	r0, [sp, #4]
 8001c3a:	e67c      	b.n	8001936 <d_type+0x256>
 8001c3c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	f280 80dc 	bge.w	8001dfe <d_type+0x71e>
 8001c46:	6900      	ldr	r0, [r0, #16]
 8001c48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c4a:	0119      	lsls	r1, r3, #4
 8001c4c:	1845      	adds	r5, r0, r1
 8001c4e:	3301      	adds	r3, #1
 8001c50:	2600      	movs	r6, #0
 8001c52:	606e      	str	r6, [r5, #4]
 8001c54:	3204      	adds	r2, #4
 8001c56:	6163      	str	r3, [r4, #20]
 8001c58:	2627      	movs	r6, #39	; 0x27
 8001c5a:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <d_type+0x6dc>)
 8001c5c:	5446      	strb	r6, [r0, r1]
 8001c5e:	60ab      	str	r3, [r5, #8]
 8001c60:	6322      	str	r2, [r4, #48]	; 0x30
 8001c62:	e5c8      	b.n	80017f6 <d_type+0x116>
 8001c64:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	f280 80c8 	bge.w	8001dfe <d_type+0x71e>
 8001c6e:	6900      	ldr	r0, [r0, #16]
 8001c70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c72:	0119      	lsls	r1, r3, #4
 8001c74:	1845      	adds	r5, r0, r1
 8001c76:	3301      	adds	r3, #1
 8001c78:	2600      	movs	r6, #0
 8001c7a:	606e      	str	r6, [r5, #4]
 8001c7c:	3209      	adds	r2, #9
 8001c7e:	6163      	str	r3, [r4, #20]
 8001c80:	2627      	movs	r6, #39	; 0x27
 8001c82:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <d_type+0x6e0>)
 8001c84:	5446      	strb	r6, [r0, r1]
 8001c86:	60ab      	str	r3, [r5, #8]
 8001c88:	6322      	str	r2, [r4, #48]	; 0x30
 8001c8a:	e5b4      	b.n	80017f6 <d_type+0x116>
 8001c8c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	f280 80b4 	bge.w	8001dfe <d_type+0x71e>
 8001c96:	6900      	ldr	r0, [r0, #16]
 8001c98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c9a:	0119      	lsls	r1, r3, #4
 8001c9c:	1845      	adds	r5, r0, r1
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	2600      	movs	r6, #0
 8001ca2:	606e      	str	r6, [r5, #4]
 8001ca4:	320a      	adds	r2, #10
 8001ca6:	6163      	str	r3, [r4, #20]
 8001ca8:	2627      	movs	r6, #39	; 0x27
 8001caa:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <d_type+0x6e4>)
 8001cac:	5446      	strb	r6, [r0, r1]
 8001cae:	60ab      	str	r3, [r5, #8]
 8001cb0:	6322      	str	r2, [r4, #48]	; 0x30
 8001cb2:	e5a0      	b.n	80017f6 <d_type+0x116>
 8001cb4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	f280 80a0 	bge.w	8001dfe <d_type+0x71e>
 8001cbe:	6900      	ldr	r0, [r0, #16]
 8001cc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cc2:	0119      	lsls	r1, r3, #4
 8001cc4:	1845      	adds	r5, r0, r1
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	2600      	movs	r6, #0
 8001cca:	606e      	str	r6, [r5, #4]
 8001ccc:	3209      	adds	r2, #9
 8001cce:	6163      	str	r3, [r4, #20]
 8001cd0:	2627      	movs	r6, #39	; 0x27
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <d_type+0x6e8>)
 8001cd4:	5446      	strb	r6, [r0, r1]
 8001cd6:	60ab      	str	r3, [r5, #8]
 8001cd8:	6322      	str	r2, [r4, #48]	; 0x30
 8001cda:	e58c      	b.n	80017f6 <d_type+0x116>
 8001cdc:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	f6bf adae 	bge.w	8001842 <d_type+0x162>
 8001ce6:	6901      	ldr	r1, [r0, #16]
 8001ce8:	4e38      	ldr	r6, [pc, #224]	; (8001dcc <d_type+0x6ec>)
 8001cea:	011a      	lsls	r2, r3, #4
 8001cec:	188d      	adds	r5, r1, r2
 8001cee:	3301      	adds	r3, #1
 8001cf0:	6143      	str	r3, [r0, #20]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	200e      	movs	r0, #14
 8001cf6:	606b      	str	r3, [r5, #4]
 8001cf8:	548b      	strb	r3, [r1, r2]
 8001cfa:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001cfe:	e57a      	b.n	80017f6 <d_type+0x116>
 8001d00:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d04:	4293      	cmp	r3, r2
 8001d06:	f6bf ad9c 	bge.w	8001842 <d_type+0x162>
 8001d0a:	6901      	ldr	r1, [r0, #16]
 8001d0c:	4e30      	ldr	r6, [pc, #192]	; (8001dd0 <d_type+0x6f0>)
 8001d0e:	011a      	lsls	r2, r3, #4
 8001d10:	188d      	adds	r5, r1, r2
 8001d12:	3301      	adds	r3, #1
 8001d14:	6143      	str	r3, [r0, #20]
 8001d16:	2300      	movs	r3, #0
 8001d18:	2004      	movs	r0, #4
 8001d1a:	606b      	str	r3, [r5, #4]
 8001d1c:	548b      	strb	r3, [r1, r2]
 8001d1e:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d22:	e568      	b.n	80017f6 <d_type+0x116>
 8001d24:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001d28:	428b      	cmp	r3, r1
 8001d2a:	f280 80af 	bge.w	8001e8c <d_type+0x7ac>
 8001d2e:	6905      	ldr	r5, [r0, #16]
 8001d30:	0118      	lsls	r0, r3, #4
 8001d32:	1829      	adds	r1, r5, r0
 8001d34:	3301      	adds	r3, #1
 8001d36:	2700      	movs	r7, #0
 8001d38:	262c      	movs	r6, #44	; 0x2c
 8001d3a:	604f      	str	r7, [r1, #4]
 8001d3c:	9101      	str	r1, [sp, #4]
 8001d3e:	6163      	str	r3, [r4, #20]
 8001d40:	542e      	strb	r6, [r5, r0]
 8001d42:	7893      	ldrb	r3, [r2, #2]
 8001d44:	3b30      	subs	r3, #48	; 0x30
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	bf94      	ite	ls
 8001d4c:	2301      	movls	r3, #1
 8001d4e:	463b      	movhi	r3, r7
 8001d50:	818b      	strh	r3, [r1, #12]
 8001d52:	f240 80ae 	bls.w	8001eb2 <d_type+0x7d2>
 8001d56:	4620      	mov	r0, r4
 8001d58:	9d01      	ldr	r5, [sp, #4]
 8001d5a:	f7ff fcc1 	bl	80016e0 <d_type>
 8001d5e:	9b01      	ldr	r3, [sp, #4]
 8001d60:	60a8      	str	r0, [r5, #8]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f43f ad6c 	beq.w	8001842 <d_type+0x162>
 8001d6a:	f104 000c 	add.w	r0, r4, #12
 8001d6e:	f7fe fb31 	bl	80003d4 <d_number.isra.1>
 8001d72:	68e2      	ldr	r2, [r4, #12]
 8001d74:	7813      	ldrb	r3, [r2, #0]
 8001d76:	b113      	cbz	r3, 8001d7e <d_type+0x69e>
 8001d78:	1c53      	adds	r3, r2, #1
 8001d7a:	60e3      	str	r3, [r4, #12]
 8001d7c:	7813      	ldrb	r3, [r2, #0]
 8001d7e:	9d01      	ldr	r5, [sp, #4]
 8001d80:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8001d84:	4253      	negs	r3, r2
 8001d86:	4153      	adcs	r3, r2
 8001d88:	81eb      	strh	r3, [r5, #14]
 8001d8a:	e534      	b.n	80017f6 <d_type+0x116>
 8001d8c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d90:	4293      	cmp	r3, r2
 8001d92:	da34      	bge.n	8001dfe <d_type+0x71e>
 8001d94:	6900      	ldr	r0, [r0, #16]
 8001d96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d98:	0119      	lsls	r1, r3, #4
 8001d9a:	1845      	adds	r5, r0, r1
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	2600      	movs	r6, #0
 8001da0:	606e      	str	r6, [r5, #4]
 8001da2:	3211      	adds	r2, #17
 8001da4:	6163      	str	r3, [r4, #20]
 8001da6:	2627      	movs	r6, #39	; 0x27
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <d_type+0x6f4>)
 8001daa:	5446      	strb	r6, [r0, r1]
 8001dac:	60ab      	str	r3, [r5, #8]
 8001dae:	6322      	str	r2, [r4, #48]	; 0x30
 8001db0:	e521      	b.n	80017f6 <d_type+0x116>
 8001db2:	bf00      	nop
 8001db4:	0801a374 	.word	0x0801a374
 8001db8:	0801a5cc 	.word	0x0801a5cc
 8001dbc:	0801a5b8 	.word	0x0801a5b8
 8001dc0:	0801a57c 	.word	0x0801a57c
 8001dc4:	0801a5a4 	.word	0x0801a5a4
 8001dc8:	0801a590 	.word	0x0801a590
 8001dcc:	0801c220 	.word	0x0801c220
 8001dd0:	0801c218 	.word	0x0801c218
 8001dd4:	0801a5f4 	.word	0x0801a5f4
 8001dd8:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	da0e      	bge.n	8001dfe <d_type+0x71e>
 8001de0:	6900      	ldr	r0, [r0, #16]
 8001de2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001de4:	0119      	lsls	r1, r3, #4
 8001de6:	1845      	adds	r5, r0, r1
 8001de8:	3301      	adds	r3, #1
 8001dea:	2600      	movs	r6, #0
 8001dec:	606e      	str	r6, [r5, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	6163      	str	r3, [r4, #20]
 8001df2:	2627      	movs	r6, #39	; 0x27
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <d_type+0x7f0>)
 8001df6:	5446      	strb	r6, [r0, r1]
 8001df8:	60ab      	str	r3, [r5, #8]
 8001dfa:	6322      	str	r2, [r4, #48]	; 0x30
 8001dfc:	e4fb      	b.n	80017f6 <d_type+0x116>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	deff      	udf	#255	; 0xff
 8001e06:	2600      	movs	r6, #0
 8001e08:	e6ce      	b.n	8001ba8 <d_type+0x4c8>
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60e3      	str	r3, [r4, #12]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f7ff fa4e 	bl	80012b0 <d_template_args_1>
 8001e14:	462a      	mov	r2, r5
 8001e16:	4603      	mov	r3, r0
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7fe f9e0 	bl	80001e0 <d_make_comp>
 8001e20:	9001      	str	r0, [sp, #4]
 8001e22:	e64a      	b.n	8001aba <d_type+0x3da>
 8001e24:	2301      	movs	r3, #1
 8001e26:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e28:	6363      	str	r3, [r4, #52]	; 0x34
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7ff f82e 	bl	8000e8c <d_expression_1>
 8001e30:	6365      	str	r5, [r4, #52]	; 0x34
 8001e32:	4606      	mov	r6, r0
 8001e34:	2800      	cmp	r0, #0
 8001e36:	f43f ad04 	beq.w	8001842 <d_type+0x162>
 8001e3a:	68e5      	ldr	r5, [r4, #12]
 8001e3c:	782b      	ldrb	r3, [r5, #0]
 8001e3e:	e6b0      	b.n	8001ba2 <d_type+0x4c2>
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff faa1 	bl	8001388 <d_name>
 8001e46:	4605      	mov	r5, r0
 8001e48:	9001      	str	r0, [sp, #4]
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	f43f acf9 	beq.w	8001842 <d_type+0x162>
 8001e50:	7803      	ldrb	r3, [r0, #0]
 8001e52:	2b18      	cmp	r3, #24
 8001e54:	f47f ad71 	bne.w	800193a <d_type+0x25a>
 8001e58:	e4cd      	b.n	80017f6 <d_type+0x116>
 8001e5a:	1c73      	adds	r3, r6, #1
 8001e5c:	60e3      	str	r3, [r4, #12]
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e64:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e68:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e6a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e6c:	f7ff fa20 	bl	80012b0 <d_template_args_1>
 8001e70:	68e2      	ldr	r2, [r4, #12]
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	2a49      	cmp	r2, #73	; 0x49
 8001e76:	4603      	mov	r3, r0
 8001e78:	d00b      	beq.n	8001e92 <d_type+0x7b2>
 8001e7a:	6325      	str	r5, [r4, #48]	; 0x30
 8001e7c:	60e6      	str	r6, [r4, #12]
 8001e7e:	f8c4 9014 	str.w	r9, [r4, #20]
 8001e82:	f8c4 8020 	str.w	r8, [r4, #32]
 8001e86:	62a7      	str	r7, [r4, #40]	; 0x28
 8001e88:	9d01      	ldr	r5, [sp, #4]
 8001e8a:	e554      	b.n	8001936 <d_type+0x256>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	701b      	strb	r3, [r3, #0]
 8001e90:	deff      	udf	#255	; 0xff
 8001e92:	9901      	ldr	r1, [sp, #4]
 8001e94:	2900      	cmp	r1, #0
 8001e96:	f43f acd4 	beq.w	8001842 <d_type+0x162>
 8001e9a:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001e9e:	4282      	cmp	r2, r0
 8001ea0:	f6bf accf 	bge.w	8001842 <d_type+0x162>
 8001ea4:	69e0      	ldr	r0, [r4, #28]
 8001ea6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8001eaa:	3201      	adds	r2, #1
 8001eac:	6222      	str	r2, [r4, #32]
 8001eae:	9a01      	ldr	r2, [sp, #4]
 8001eb0:	e5c9      	b.n	8001a46 <d_type+0x366>
 8001eb2:	f104 000c 	add.w	r0, r4, #12
 8001eb6:	f7fe fa8d 	bl	80003d4 <d_number.isra.1>
 8001eba:	e74c      	b.n	8001d56 <d_type+0x676>
 8001ebc:	3203      	adds	r2, #3
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001ec2:	60c2      	str	r2, [r0, #12]
 8001ec4:	6343      	str	r3, [r0, #52]	; 0x34
 8001ec6:	f7fe ffe1 	bl	8000e8c <d_expression_1>
 8001eca:	6366      	str	r6, [r4, #52]	; 0x34
 8001ecc:	4605      	mov	r5, r0
 8001ece:	e680      	b.n	8001bd2 <d_type+0x4f2>
 8001ed0:	0801a5e0 	.word	0x0801a5e0

08001ed4 <d_operator_name>:
 8001ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed6:	68c3      	ldr	r3, [r0, #12]
 8001ed8:	781e      	ldrb	r6, [r3, #0]
 8001eda:	4686      	mov	lr, r0
 8001edc:	b336      	cbz	r6, 8001f2c <d_operator_name+0x58>
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60c2      	str	r2, [r0, #12]
 8001ee2:	785a      	ldrb	r2, [r3, #1]
 8001ee4:	781e      	ldrb	r6, [r3, #0]
 8001ee6:	2a00      	cmp	r2, #0
 8001ee8:	d04a      	beq.n	8001f80 <d_operator_name+0xac>
 8001eea:	1c9a      	adds	r2, r3, #2
 8001eec:	60c2      	str	r2, [r0, #12]
 8001eee:	2e76      	cmp	r6, #118	; 0x76
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001ef6:	d145      	bne.n	8001f84 <d_operator_name+0xb0>
 8001ef8:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
 8001efc:	b2eb      	uxtb	r3, r5
 8001efe:	2b09      	cmp	r3, #9
 8001f00:	d815      	bhi.n	8001f2e <d_operator_name+0x5a>
 8001f02:	f7fe fae7 	bl	80004d4 <d_source_name>
 8001f06:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8001f0a:	428b      	cmp	r3, r1
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	da21      	bge.n	8001f54 <d_operator_name+0x80>
 8001f10:	6926      	ldr	r6, [r4, #16]
 8001f12:	0119      	lsls	r1, r3, #4
 8001f14:	1870      	adds	r0, r6, r1
 8001f16:	3301      	adds	r3, #1
 8001f18:	2700      	movs	r7, #0
 8001f1a:	6047      	str	r7, [r0, #4]
 8001f1c:	6163      	str	r3, [r4, #20]
 8001f1e:	b1ca      	cbz	r2, 8001f54 <d_operator_name+0x80>
 8001f20:	2332      	movs	r3, #50	; 0x32
 8001f22:	6047      	str	r7, [r0, #4]
 8001f24:	5473      	strb	r3, [r6, r1]
 8001f26:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8001f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f2c:	46b4      	mov	ip, r6
 8001f2e:	4c23      	ldr	r4, [pc, #140]	; (8001fbc <d_operator_name+0xe8>)
 8001f30:	2043      	movs	r0, #67	; 0x43
 8001f32:	2200      	movs	r2, #0
 8001f34:	1a83      	subs	r3, r0, r2
 8001f36:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f3a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f3e:	0119      	lsls	r1, r3, #4
 8001f40:	1867      	adds	r7, r4, r1
 8001f42:	5861      	ldr	r1, [r4, r1]
 8001f44:	780d      	ldrb	r5, [r1, #0]
 8001f46:	42b5      	cmp	r5, r6
 8001f48:	d006      	beq.n	8001f58 <d_operator_name+0x84>
 8001f4a:	bf94      	ite	ls
 8001f4c:	1c5a      	addls	r2, r3, #1
 8001f4e:	4618      	movhi	r0, r3
 8001f50:	4282      	cmp	r2, r0
 8001f52:	d1ef      	bne.n	8001f34 <d_operator_name+0x60>
 8001f54:	2000      	movs	r0, #0
 8001f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f58:	7849      	ldrb	r1, [r1, #1]
 8001f5a:	4561      	cmp	r1, ip
 8001f5c:	d1f5      	bne.n	8001f4a <d_operator_name+0x76>
 8001f5e:	e9de 3205 	ldrd	r3, r2, [lr, #20]
 8001f62:	4293      	cmp	r3, r2
 8001f64:	daf6      	bge.n	8001f54 <d_operator_name+0x80>
 8001f66:	f8de 1010 	ldr.w	r1, [lr, #16]
 8001f6a:	011a      	lsls	r2, r3, #4
 8001f6c:	1888      	adds	r0, r1, r2
 8001f6e:	3301      	adds	r3, #1
 8001f70:	2500      	movs	r5, #0
 8001f72:	2431      	movs	r4, #49	; 0x31
 8001f74:	6045      	str	r5, [r0, #4]
 8001f76:	f8ce 3014 	str.w	r3, [lr, #20]
 8001f7a:	548c      	strb	r4, [r1, r2]
 8001f7c:	6087      	str	r7, [r0, #8]
 8001f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f80:	4694      	mov	ip, r2
 8001f82:	e7d4      	b.n	8001f2e <d_operator_name+0x5a>
 8001f84:	2e63      	cmp	r6, #99	; 0x63
 8001f86:	d1d2      	bne.n	8001f2e <d_operator_name+0x5a>
 8001f88:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8001f8c:	d1cf      	bne.n	8001f2e <d_operator_name+0x5a>
 8001f8e:	e9d0 350d 	ldrd	r3, r5, [r0, #52]	; 0x34
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	6383      	str	r3, [r0, #56]	; 0x38
 8001f9a:	f7ff fba1 	bl	80016e0 <d_type>
 8001f9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	b92b      	cbnz	r3, 8001fb0 <d_operator_name+0xdc>
 8001fa4:	2133      	movs	r1, #51	; 0x33
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7fe f91a 	bl	80001e0 <d_make_comp>
 8001fac:	63a5      	str	r5, [r4, #56]	; 0x38
 8001fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2134      	movs	r1, #52	; 0x34
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7fe f913 	bl	80001e0 <d_make_comp>
 8001fba:	e7f7      	b.n	8001fac <d_operator_name+0xd8>
 8001fbc:	0801a608 	.word	0x0801a608

08001fc0 <d_parmlist>:
 8001fc0:	b530      	push	{r4, r5, lr}
 8001fc2:	68c2      	ldr	r2, [r0, #12]
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	7813      	ldrb	r3, [r2, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d036      	beq.n	800203e <d_parmlist+0x7e>
 8001fd0:	2b45      	cmp	r3, #69	; 0x45
 8001fd2:	d034      	beq.n	800203e <d_parmlist+0x7e>
 8001fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8001fd6:	d032      	beq.n	800203e <d_parmlist+0x7e>
 8001fd8:	4604      	mov	r4, r0
 8001fda:	ad01      	add	r5, sp, #4
 8001fdc:	e015      	b.n	800200a <d_parmlist+0x4a>
 8001fde:	2b4f      	cmp	r3, #79	; 0x4f
 8001fe0:	d016      	beq.n	8002010 <d_parmlist+0x50>
 8001fe2:	f7ff fb7d 	bl	80016e0 <d_type>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	4602      	mov	r2, r0
 8001fea:	212e      	movs	r1, #46	; 0x2e
 8001fec:	b338      	cbz	r0, 800203e <d_parmlist+0x7e>
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7fe f8f6 	bl	80001e0 <d_make_comp>
 8001ff4:	6028      	str	r0, [r5, #0]
 8001ff6:	b310      	cbz	r0, 800203e <d_parmlist+0x7e>
 8001ff8:	68e2      	ldr	r2, [r4, #12]
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	f100 050c 	add.w	r5, r0, #12
 8002000:	b14b      	cbz	r3, 8002016 <d_parmlist+0x56>
 8002002:	2b45      	cmp	r3, #69	; 0x45
 8002004:	d007      	beq.n	8002016 <d_parmlist+0x56>
 8002006:	2b2e      	cmp	r3, #46	; 0x2e
 8002008:	d005      	beq.n	8002016 <d_parmlist+0x56>
 800200a:	2b52      	cmp	r3, #82	; 0x52
 800200c:	4620      	mov	r0, r4
 800200e:	d1e6      	bne.n	8001fde <d_parmlist+0x1e>
 8002010:	7853      	ldrb	r3, [r2, #1]
 8002012:	2b45      	cmp	r3, #69	; 0x45
 8002014:	d1e5      	bne.n	8001fe2 <d_parmlist+0x22>
 8002016:	9801      	ldr	r0, [sp, #4]
 8002018:	b188      	cbz	r0, 800203e <d_parmlist+0x7e>
 800201a:	68c3      	ldr	r3, [r0, #12]
 800201c:	b10b      	cbz	r3, 8002022 <d_parmlist+0x62>
 800201e:	b003      	add	sp, #12
 8002020:	bd30      	pop	{r4, r5, pc}
 8002022:	6882      	ldr	r2, [r0, #8]
 8002024:	7811      	ldrb	r1, [r2, #0]
 8002026:	2927      	cmp	r1, #39	; 0x27
 8002028:	d1f9      	bne.n	800201e <d_parmlist+0x5e>
 800202a:	6892      	ldr	r2, [r2, #8]
 800202c:	7c11      	ldrb	r1, [r2, #16]
 800202e:	2909      	cmp	r1, #9
 8002030:	d1f5      	bne.n	800201e <d_parmlist+0x5e>
 8002032:	6851      	ldr	r1, [r2, #4]
 8002034:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002036:	1a52      	subs	r2, r2, r1
 8002038:	6322      	str	r2, [r4, #48]	; 0x30
 800203a:	6083      	str	r3, [r0, #8]
 800203c:	e7ef      	b.n	800201e <d_parmlist+0x5e>
 800203e:	2000      	movs	r0, #0
 8002040:	b003      	add	sp, #12
 8002042:	bd30      	pop	{r4, r5, pc}

08002044 <d_cv_qualifiers>:
 8002044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002048:	4689      	mov	r9, r1
 800204a:	b083      	sub	sp, #12
 800204c:	68c1      	ldr	r1, [r0, #12]
 800204e:	1e13      	subs	r3, r2, #0
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	4604      	mov	r4, r0
 8002054:	780b      	ldrb	r3, [r1, #0]
 8002056:	bf15      	itete	ne
 8002058:	f04f 081e 	movne.w	r8, #30
 800205c:	f04f 081b 	moveq.w	r8, #27
 8002060:	271d      	movne	r7, #29
 8002062:	271a      	moveq	r7, #26
 8002064:	bf14      	ite	ne
 8002066:	261c      	movne	r6, #28
 8002068:	2619      	moveq	r6, #25
 800206a:	464d      	mov	r5, r9
 800206c:	f04f 0a01 	mov.w	sl, #1
 8002070:	e01c      	b.n	80020ac <d_cv_qualifiers+0x68>
 8002072:	2b56      	cmp	r3, #86	; 0x56
 8002074:	d03f      	beq.n	80020f6 <d_cv_qualifiers+0xb2>
 8002076:	2b4b      	cmp	r3, #75	; 0x4b
 8002078:	d043      	beq.n	8002102 <d_cv_qualifiers+0xbe>
 800207a:	784b      	ldrb	r3, [r1, #1]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d035      	beq.n	80020ec <d_cv_qualifiers+0xa8>
 8002080:	1c8b      	adds	r3, r1, #2
 8002082:	60e3      	str	r3, [r4, #12]
 8002084:	784b      	ldrb	r3, [r1, #1]
 8002086:	2b78      	cmp	r3, #120	; 0x78
 8002088:	d041      	beq.n	800210e <d_cv_qualifiers+0xca>
 800208a:	2b6f      	cmp	r3, #111	; 0x6f
 800208c:	d145      	bne.n	800211a <d_cv_qualifiers+0xd6>
 800208e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002090:	3309      	adds	r3, #9
 8002092:	6323      	str	r3, [r4, #48]	; 0x30
 8002094:	214e      	movs	r1, #78	; 0x4e
 8002096:	2300      	movs	r3, #0
 8002098:	2200      	movs	r2, #0
 800209a:	4620      	mov	r0, r4
 800209c:	f7fe f8a0 	bl	80001e0 <d_make_comp>
 80020a0:	6028      	str	r0, [r5, #0]
 80020a2:	b318      	cbz	r0, 80020ec <d_cv_qualifiers+0xa8>
 80020a4:	68e1      	ldr	r1, [r4, #12]
 80020a6:	780b      	ldrb	r3, [r1, #0]
 80020a8:	f100 0508 	add.w	r5, r0, #8
 80020ac:	2b72      	cmp	r3, #114	; 0x72
 80020ae:	d00d      	beq.n	80020cc <d_cv_qualifiers+0x88>
 80020b0:	2b56      	cmp	r3, #86	; 0x56
 80020b2:	d00b      	beq.n	80020cc <d_cv_qualifiers+0x88>
 80020b4:	2b4b      	cmp	r3, #75	; 0x4b
 80020b6:	d009      	beq.n	80020cc <d_cv_qualifiers+0x88>
 80020b8:	2b44      	cmp	r3, #68	; 0x44
 80020ba:	d146      	bne.n	800214a <d_cv_qualifiers+0x106>
 80020bc:	784a      	ldrb	r2, [r1, #1]
 80020be:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 80020c2:	284f      	cmp	r0, #79	; 0x4f
 80020c4:	d002      	beq.n	80020cc <d_cv_qualifiers+0x88>
 80020c6:	3a77      	subs	r2, #119	; 0x77
 80020c8:	2a01      	cmp	r2, #1
 80020ca:	d83e      	bhi.n	800214a <d_cv_qualifiers+0x106>
 80020cc:	1c4a      	adds	r2, r1, #1
 80020ce:	2b72      	cmp	r3, #114	; 0x72
 80020d0:	60e2      	str	r2, [r4, #12]
 80020d2:	d1ce      	bne.n	8002072 <d_cv_qualifiers+0x2e>
 80020d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020d6:	3309      	adds	r3, #9
 80020d8:	6323      	str	r3, [r4, #48]	; 0x30
 80020da:	4631      	mov	r1, r6
 80020dc:	2300      	movs	r3, #0
 80020de:	2200      	movs	r2, #0
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7fe f87d 	bl	80001e0 <d_make_comp>
 80020e6:	6028      	str	r0, [r5, #0]
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d1db      	bne.n	80020a4 <d_cv_qualifiers+0x60>
 80020ec:	2500      	movs	r5, #0
 80020ee:	4628      	mov	r0, r5
 80020f0:	b003      	add	sp, #12
 80020f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020f8:	3309      	adds	r3, #9
 80020fa:	6323      	str	r3, [r4, #48]	; 0x30
 80020fc:	4639      	mov	r1, r7
 80020fe:	2300      	movs	r3, #0
 8002100:	e7ca      	b.n	8002098 <d_cv_qualifiers+0x54>
 8002102:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002104:	3306      	adds	r3, #6
 8002106:	6323      	str	r3, [r4, #48]	; 0x30
 8002108:	4641      	mov	r1, r8
 800210a:	2300      	movs	r3, #0
 800210c:	e7c4      	b.n	8002098 <d_cv_qualifiers+0x54>
 800210e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002110:	3311      	adds	r3, #17
 8002112:	6323      	str	r3, [r4, #48]	; 0x30
 8002114:	214c      	movs	r1, #76	; 0x4c
 8002116:	2300      	movs	r3, #0
 8002118:	e7be      	b.n	8002098 <d_cv_qualifiers+0x54>
 800211a:	2b4f      	cmp	r3, #79	; 0x4f
 800211c:	d132      	bne.n	8002184 <d_cv_qualifiers+0x140>
 800211e:	e9d4 3b0c 	ldrd	r3, fp, [r4, #48]	; 0x30
 8002122:	3309      	adds	r3, #9
 8002124:	6323      	str	r3, [r4, #48]	; 0x30
 8002126:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800212a:	4620      	mov	r0, r4
 800212c:	f7fe feae 	bl	8000e8c <d_expression_1>
 8002130:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8002134:	4603      	mov	r3, r0
 8002136:	2800      	cmp	r0, #0
 8002138:	d0d8      	beq.n	80020ec <d_cv_qualifiers+0xa8>
 800213a:	68e2      	ldr	r2, [r4, #12]
 800213c:	7811      	ldrb	r1, [r2, #0]
 800213e:	2945      	cmp	r1, #69	; 0x45
 8002140:	d1d4      	bne.n	80020ec <d_cv_qualifiers+0xa8>
 8002142:	3201      	adds	r2, #1
 8002144:	60e2      	str	r2, [r4, #12]
 8002146:	214e      	movs	r1, #78	; 0x4e
 8002148:	e7a6      	b.n	8002098 <d_cv_qualifiers+0x54>
 800214a:	9a01      	ldr	r2, [sp, #4]
 800214c:	2a00      	cmp	r2, #0
 800214e:	d1ce      	bne.n	80020ee <d_cv_qualifiers+0xaa>
 8002150:	2b46      	cmp	r3, #70	; 0x46
 8002152:	d1cc      	bne.n	80020ee <d_cv_qualifiers+0xaa>
 8002154:	454d      	cmp	r5, r9
 8002156:	d0ca      	beq.n	80020ee <d_cv_qualifiers+0xaa>
 8002158:	241d      	movs	r4, #29
 800215a:	201e      	movs	r0, #30
 800215c:	211c      	movs	r1, #28
 800215e:	e008      	b.n	8002172 <d_cv_qualifiers+0x12e>
 8002160:	2a1b      	cmp	r2, #27
 8002162:	d00d      	beq.n	8002180 <d_cv_qualifiers+0x13c>
 8002164:	2a19      	cmp	r2, #25
 8002166:	d100      	bne.n	800216a <d_cv_qualifiers+0x126>
 8002168:	7019      	strb	r1, [r3, #0]
 800216a:	f103 0908 	add.w	r9, r3, #8
 800216e:	454d      	cmp	r5, r9
 8002170:	d0bd      	beq.n	80020ee <d_cv_qualifiers+0xaa>
 8002172:	f8d9 3000 	ldr.w	r3, [r9]
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	2a1a      	cmp	r2, #26
 800217a:	d1f1      	bne.n	8002160 <d_cv_qualifiers+0x11c>
 800217c:	701c      	strb	r4, [r3, #0]
 800217e:	e7f4      	b.n	800216a <d_cv_qualifiers+0x126>
 8002180:	7018      	strb	r0, [r3, #0]
 8002182:	e7f2      	b.n	800216a <d_cv_qualifiers+0x126>
 8002184:	2b77      	cmp	r3, #119	; 0x77
 8002186:	d1b1      	bne.n	80020ec <d_cv_qualifiers+0xa8>
 8002188:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800218a:	3306      	adds	r3, #6
 800218c:	6323      	str	r3, [r4, #48]	; 0x30
 800218e:	4620      	mov	r0, r4
 8002190:	f7ff ff16 	bl	8001fc0 <d_parmlist>
 8002194:	4603      	mov	r3, r0
 8002196:	2800      	cmp	r0, #0
 8002198:	d0a8      	beq.n	80020ec <d_cv_qualifiers+0xa8>
 800219a:	68e2      	ldr	r2, [r4, #12]
 800219c:	7811      	ldrb	r1, [r2, #0]
 800219e:	2945      	cmp	r1, #69	; 0x45
 80021a0:	d1a4      	bne.n	80020ec <d_cv_qualifiers+0xa8>
 80021a2:	3201      	adds	r2, #1
 80021a4:	60e2      	str	r2, [r4, #12]
 80021a6:	214f      	movs	r1, #79	; 0x4f
 80021a8:	e776      	b.n	8002098 <d_cv_qualifiers+0x54>
 80021aa:	bf00      	nop

080021ac <d_bare_function_type>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	68c3      	ldr	r3, [r0, #12]
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	2a4a      	cmp	r2, #74	; 0x4a
 80021b4:	4604      	mov	r4, r0
 80021b6:	d013      	beq.n	80021e0 <d_bare_function_type+0x34>
 80021b8:	b181      	cbz	r1, 80021dc <d_bare_function_type+0x30>
 80021ba:	4620      	mov	r0, r4
 80021bc:	f7ff fa90 	bl	80016e0 <d_type>
 80021c0:	4605      	mov	r5, r0
 80021c2:	b180      	cbz	r0, 80021e6 <d_bare_function_type+0x3a>
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7ff fefb 	bl	8001fc0 <d_parmlist>
 80021ca:	b160      	cbz	r0, 80021e6 <d_bare_function_type+0x3a>
 80021cc:	4603      	mov	r3, r0
 80021ce:	462a      	mov	r2, r5
 80021d0:	4620      	mov	r0, r4
 80021d2:	2129      	movs	r1, #41	; 0x29
 80021d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021d8:	f7fe b802 	b.w	80001e0 <d_make_comp>
 80021dc:	460d      	mov	r5, r1
 80021de:	e7f1      	b.n	80021c4 <d_bare_function_type+0x18>
 80021e0:	3301      	adds	r3, #1
 80021e2:	60c3      	str	r3, [r0, #12]
 80021e4:	e7e9      	b.n	80021ba <d_bare_function_type+0xe>
 80021e6:	2000      	movs	r0, #0
 80021e8:	bd70      	pop	{r4, r5, r6, pc}
 80021ea:	bf00      	nop

080021ec <d_function_type>:
 80021ec:	68c3      	ldr	r3, [r0, #12]
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	2a46      	cmp	r2, #70	; 0x46
 80021f2:	d118      	bne.n	8002226 <d_function_type+0x3a>
 80021f4:	b510      	push	{r4, lr}
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	60c2      	str	r2, [r0, #12]
 80021fa:	785a      	ldrb	r2, [r3, #1]
 80021fc:	2a59      	cmp	r2, #89	; 0x59
 80021fe:	bf04      	itt	eq
 8002200:	3302      	addeq	r3, #2
 8002202:	60c3      	streq	r3, [r0, #12]
 8002204:	2101      	movs	r1, #1
 8002206:	4604      	mov	r4, r0
 8002208:	f7ff ffd0 	bl	80021ac <d_bare_function_type>
 800220c:	4601      	mov	r1, r0
 800220e:	4620      	mov	r0, r4
 8002210:	f7fe f82e 	bl	8000270 <d_ref_qualifier>
 8002214:	68e3      	ldr	r3, [r4, #12]
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	2a45      	cmp	r2, #69	; 0x45
 800221a:	d102      	bne.n	8002222 <d_function_type+0x36>
 800221c:	3301      	adds	r3, #1
 800221e:	60e3      	str	r3, [r4, #12]
 8002220:	bd10      	pop	{r4, pc}
 8002222:	2000      	movs	r0, #0
 8002224:	bd10      	pop	{r4, pc}
 8002226:	2000      	movs	r0, #0
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop

0800222c <d_unqualified_name>:
 800222c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002230:	68c1      	ldr	r1, [r0, #12]
 8002232:	780b      	ldrb	r3, [r1, #0]
 8002234:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002238:	2a09      	cmp	r2, #9
 800223a:	4604      	mov	r4, r0
 800223c:	d93c      	bls.n	80022b8 <d_unqualified_name+0x8c>
 800223e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002242:	2a19      	cmp	r2, #25
 8002244:	d922      	bls.n	800228c <d_unqualified_name+0x60>
 8002246:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800224a:	2a01      	cmp	r2, #1
 800224c:	d969      	bls.n	8002322 <d_unqualified_name+0xf6>
 800224e:	2b4c      	cmp	r3, #76	; 0x4c
 8002250:	d056      	beq.n	8002300 <d_unqualified_name+0xd4>
 8002252:	2b55      	cmp	r3, #85	; 0x55
 8002254:	d15f      	bne.n	8002316 <d_unqualified_name+0xea>
 8002256:	784b      	ldrb	r3, [r1, #1]
 8002258:	2b6c      	cmp	r3, #108	; 0x6c
 800225a:	f000 80e5 	beq.w	8002428 <d_unqualified_name+0x1fc>
 800225e:	2b74      	cmp	r3, #116	; 0x74
 8002260:	d159      	bne.n	8002316 <d_unqualified_name+0xea>
 8002262:	1c4b      	adds	r3, r1, #1
 8002264:	60c3      	str	r3, [r0, #12]
 8002266:	784b      	ldrb	r3, [r1, #1]
 8002268:	2b74      	cmp	r3, #116	; 0x74
 800226a:	d158      	bne.n	800231e <d_unqualified_name+0xf2>
 800226c:	3102      	adds	r1, #2
 800226e:	60c1      	str	r1, [r0, #12]
 8002270:	f7fe f8f4 	bl	800045c <d_compact_number>
 8002274:	2800      	cmp	r0, #0
 8002276:	f2c0 8155 	blt.w	8002524 <d_unqualified_name+0x2f8>
 800227a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800227e:	4293      	cmp	r3, r2
 8002280:	68e7      	ldr	r7, [r4, #12]
 8002282:	f2c0 80f3 	blt.w	800246c <d_unqualified_name+0x240>
 8002286:	783b      	ldrb	r3, [r7, #0]
 8002288:	2500      	movs	r5, #0
 800228a:	e010      	b.n	80022ae <d_unqualified_name+0x82>
 800228c:	2b6f      	cmp	r3, #111	; 0x6f
 800228e:	d104      	bne.n	800229a <d_unqualified_name+0x6e>
 8002290:	784b      	ldrb	r3, [r1, #1]
 8002292:	2b6e      	cmp	r3, #110	; 0x6e
 8002294:	bf04      	itt	eq
 8002296:	3102      	addeq	r1, #2
 8002298:	60c1      	streq	r1, [r0, #12]
 800229a:	4620      	mov	r0, r4
 800229c:	f7ff fe1a 	bl	8001ed4 <d_operator_name>
 80022a0:	4605      	mov	r5, r0
 80022a2:	b110      	cbz	r0, 80022aa <d_unqualified_name+0x7e>
 80022a4:	7803      	ldrb	r3, [r0, #0]
 80022a6:	2b31      	cmp	r3, #49	; 0x31
 80022a8:	d013      	beq.n	80022d2 <d_unqualified_name+0xa6>
 80022aa:	68e3      	ldr	r3, [r4, #12]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b42      	cmp	r3, #66	; 0x42
 80022b0:	d009      	beq.n	80022c6 <d_unqualified_name+0x9a>
 80022b2:	4628      	mov	r0, r5
 80022b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022b8:	f7fe f90c 	bl	80004d4 <d_source_name>
 80022bc:	68e3      	ldr	r3, [r4, #12]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b42      	cmp	r3, #66	; 0x42
 80022c2:	4605      	mov	r5, r0
 80022c4:	d1f5      	bne.n	80022b2 <d_unqualified_name+0x86>
 80022c6:	4629      	mov	r1, r5
 80022c8:	4620      	mov	r0, r4
 80022ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022ce:	f7fe b95b 	b.w	8000588 <d_abi_tags>
 80022d2:	6882      	ldr	r2, [r0, #8]
 80022d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022d6:	6896      	ldr	r6, [r2, #8]
 80022d8:	6810      	ldr	r0, [r2, #0]
 80022da:	49a1      	ldr	r1, [pc, #644]	; (8002560 <d_unqualified_name+0x334>)
 80022dc:	3307      	adds	r3, #7
 80022de:	4433      	add	r3, r6
 80022e0:	6323      	str	r3, [r4, #48]	; 0x30
 80022e2:	f004 fd3d 	bl	8006d60 <strcmp>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d1df      	bne.n	80022aa <d_unqualified_name+0x7e>
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7fe f8f2 	bl	80004d4 <d_source_name>
 80022f0:	462a      	mov	r2, r5
 80022f2:	4603      	mov	r3, r0
 80022f4:	2136      	movs	r1, #54	; 0x36
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7fd ff72 	bl	80001e0 <d_make_comp>
 80022fc:	4605      	mov	r5, r0
 80022fe:	e7d4      	b.n	80022aa <d_unqualified_name+0x7e>
 8002300:	3101      	adds	r1, #1
 8002302:	60c1      	str	r1, [r0, #12]
 8002304:	f7fe f8e6 	bl	80004d4 <d_source_name>
 8002308:	4605      	mov	r5, r0
 800230a:	b120      	cbz	r0, 8002316 <d_unqualified_name+0xea>
 800230c:	4620      	mov	r0, r4
 800230e:	f7fe fa0f 	bl	8000730 <d_discriminator>
 8002312:	2800      	cmp	r0, #0
 8002314:	d1c9      	bne.n	80022aa <d_unqualified_name+0x7e>
 8002316:	2500      	movs	r5, #0
 8002318:	4628      	mov	r0, r5
 800231a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800231e:	2500      	movs	r5, #0
 8002320:	e7c5      	b.n	80022ae <d_unqualified_name+0x82>
 8002322:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002324:	b132      	cbz	r2, 8002334 <d_unqualified_name+0x108>
 8002326:	7810      	ldrb	r0, [r2, #0]
 8002328:	b9e0      	cbnz	r0, 8002364 <d_unqualified_name+0x138>
 800232a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800232c:	68d0      	ldr	r0, [r2, #12]
 800232e:	4403      	add	r3, r0
 8002330:	6323      	str	r3, [r4, #48]	; 0x30
 8002332:	780b      	ldrb	r3, [r1, #0]
 8002334:	2b43      	cmp	r3, #67	; 0x43
 8002336:	d018      	beq.n	800236a <d_unqualified_name+0x13e>
 8002338:	2b44      	cmp	r3, #68	; 0x44
 800233a:	d1f0      	bne.n	800231e <d_unqualified_name+0xf2>
 800233c:	784b      	ldrb	r3, [r1, #1]
 800233e:	3b30      	subs	r3, #48	; 0x30
 8002340:	2b05      	cmp	r3, #5
 8002342:	d8e8      	bhi.n	8002316 <d_unqualified_name+0xea>
 8002344:	a001      	add	r0, pc, #4	; (adr r0, 800234c <d_unqualified_name+0x120>)
 8002346:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	080023bd 	.word	0x080023bd
 8002350:	08002387 	.word	0x08002387
 8002354:	080023cf 	.word	0x080023cf
 8002358:	08002317 	.word	0x08002317
 800235c:	080023c9 	.word	0x080023c9
 8002360:	080023c3 	.word	0x080023c3
 8002364:	2818      	cmp	r0, #24
 8002366:	d1e5      	bne.n	8002334 <d_unqualified_name+0x108>
 8002368:	e7df      	b.n	800232a <d_unqualified_name+0xfe>
 800236a:	784b      	ldrb	r3, [r1, #1]
 800236c:	2b49      	cmp	r3, #73	; 0x49
 800236e:	f000 80b0 	beq.w	80024d2 <d_unqualified_name+0x2a6>
 8002372:	3b31      	subs	r3, #49	; 0x31
 8002374:	2b04      	cmp	r3, #4
 8002376:	d8ce      	bhi.n	8002316 <d_unqualified_name+0xea>
 8002378:	e8df f013 	tbh	[pc, r3, lsl #1]
 800237c:	005100ed 	.word	0x005100ed
 8002380:	0047004c 	.word	0x0047004c
 8002384:	002c      	.short	0x002c
 8002386:	f04f 0c02 	mov.w	ip, #2
 800238a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800238e:	1c8d      	adds	r5, r1, #2
 8002390:	4283      	cmp	r3, r0
 8002392:	60e5      	str	r5, [r4, #12]
 8002394:	f280 80d0 	bge.w	8002538 <d_unqualified_name+0x30c>
 8002398:	6926      	ldr	r6, [r4, #16]
 800239a:	0118      	lsls	r0, r3, #4
 800239c:	1835      	adds	r5, r6, r0
 800239e:	3301      	adds	r3, #1
 80023a0:	2700      	movs	r7, #0
 80023a2:	606f      	str	r7, [r5, #4]
 80023a4:	6163      	str	r3, [r4, #20]
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	f000 80cf 	beq.w	800254a <d_unqualified_name+0x31e>
 80023ac:	2308      	movs	r3, #8
 80023ae:	606f      	str	r7, [r5, #4]
 80023b0:	5433      	strb	r3, [r6, r0]
 80023b2:	f885 c008 	strb.w	ip, [r5, #8]
 80023b6:	60ea      	str	r2, [r5, #12]
 80023b8:	788b      	ldrb	r3, [r1, #2]
 80023ba:	e778      	b.n	80022ae <d_unqualified_name+0x82>
 80023bc:	f04f 0c01 	mov.w	ip, #1
 80023c0:	e7e3      	b.n	800238a <d_unqualified_name+0x15e>
 80023c2:	f04f 0c05 	mov.w	ip, #5
 80023c6:	e7e0      	b.n	800238a <d_unqualified_name+0x15e>
 80023c8:	f04f 0c04 	mov.w	ip, #4
 80023cc:	e7dd      	b.n	800238a <d_unqualified_name+0x15e>
 80023ce:	f04f 0c03 	mov.w	ip, #3
 80023d2:	e7da      	b.n	800238a <d_unqualified_name+0x15e>
 80023d4:	3102      	adds	r1, #2
 80023d6:	60e1      	str	r1, [r4, #12]
 80023d8:	f04f 0805 	mov.w	r8, #5
 80023dc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023e0:	4283      	cmp	r3, r0
 80023e2:	f280 80ac 	bge.w	800253e <d_unqualified_name+0x312>
 80023e6:	6926      	ldr	r6, [r4, #16]
 80023e8:	0118      	lsls	r0, r3, #4
 80023ea:	1835      	adds	r5, r6, r0
 80023ec:	3301      	adds	r3, #1
 80023ee:	2700      	movs	r7, #0
 80023f0:	606f      	str	r7, [r5, #4]
 80023f2:	6163      	str	r3, [r4, #20]
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	f000 80ab 	beq.w	8002550 <d_unqualified_name+0x324>
 80023fa:	2307      	movs	r3, #7
 80023fc:	606f      	str	r7, [r5, #4]
 80023fe:	5433      	strb	r3, [r6, r0]
 8002400:	f885 8008 	strb.w	r8, [r5, #8]
 8002404:	60ea      	str	r2, [r5, #12]
 8002406:	780b      	ldrb	r3, [r1, #0]
 8002408:	e751      	b.n	80022ae <d_unqualified_name+0x82>
 800240a:	3102      	adds	r1, #2
 800240c:	60e1      	str	r1, [r4, #12]
 800240e:	f04f 0804 	mov.w	r8, #4
 8002412:	e7e3      	b.n	80023dc <d_unqualified_name+0x1b0>
 8002414:	3102      	adds	r1, #2
 8002416:	60e1      	str	r1, [r4, #12]
 8002418:	f04f 0803 	mov.w	r8, #3
 800241c:	e7de      	b.n	80023dc <d_unqualified_name+0x1b0>
 800241e:	3102      	adds	r1, #2
 8002420:	60e1      	str	r1, [r4, #12]
 8002422:	f04f 0802 	mov.w	r8, #2
 8002426:	e7d9      	b.n	80023dc <d_unqualified_name+0x1b0>
 8002428:	1c4b      	adds	r3, r1, #1
 800242a:	60c3      	str	r3, [r0, #12]
 800242c:	784b      	ldrb	r3, [r1, #1]
 800242e:	2b6c      	cmp	r3, #108	; 0x6c
 8002430:	f47f af75 	bne.w	800231e <d_unqualified_name+0xf2>
 8002434:	3102      	adds	r1, #2
 8002436:	60c1      	str	r1, [r0, #12]
 8002438:	f7ff fdc2 	bl	8001fc0 <d_parmlist>
 800243c:	4606      	mov	r6, r0
 800243e:	2800      	cmp	r0, #0
 8002440:	d070      	beq.n	8002524 <d_unqualified_name+0x2f8>
 8002442:	68e2      	ldr	r2, [r4, #12]
 8002444:	7813      	ldrb	r3, [r2, #0]
 8002446:	2b45      	cmp	r3, #69	; 0x45
 8002448:	f47f af69 	bne.w	800231e <d_unqualified_name+0xf2>
 800244c:	3201      	adds	r2, #1
 800244e:	60e2      	str	r2, [r4, #12]
 8002450:	4620      	mov	r0, r4
 8002452:	f7fe f803 	bl	800045c <d_compact_number>
 8002456:	f1b0 0e00 	subs.w	lr, r0, #0
 800245a:	db63      	blt.n	8002524 <d_unqualified_name+0x2f8>
 800245c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002460:	4293      	cmp	r3, r2
 8002462:	68e0      	ldr	r0, [r4, #12]
 8002464:	db1b      	blt.n	800249e <d_unqualified_name+0x272>
 8002466:	7803      	ldrb	r3, [r0, #0]
 8002468:	2500      	movs	r5, #0
 800246a:	e720      	b.n	80022ae <d_unqualified_name+0x82>
 800246c:	6926      	ldr	r6, [r4, #16]
 800246e:	6a22      	ldr	r2, [r4, #32]
 8002470:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8002474:	0119      	lsls	r1, r3, #4
 8002476:	1875      	adds	r5, r6, r1
 8002478:	3301      	adds	r3, #1
 800247a:	f04f 0c00 	mov.w	ip, #0
 800247e:	f8c5 c004 	str.w	ip, [r5, #4]
 8002482:	4572      	cmp	r2, lr
 8002484:	6163      	str	r3, [r4, #20]
 8002486:	f04f 0347 	mov.w	r3, #71	; 0x47
 800248a:	5473      	strb	r3, [r6, r1]
 800248c:	60a8      	str	r0, [r5, #8]
 800248e:	da4d      	bge.n	800252c <d_unqualified_name+0x300>
 8002490:	69e3      	ldr	r3, [r4, #28]
 8002492:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8002496:	3201      	adds	r2, #1
 8002498:	6222      	str	r2, [r4, #32]
 800249a:	783b      	ldrb	r3, [r7, #0]
 800249c:	e707      	b.n	80022ae <d_unqualified_name+0x82>
 800249e:	6927      	ldr	r7, [r4, #16]
 80024a0:	6a22      	ldr	r2, [r4, #32]
 80024a2:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80024a6:	0119      	lsls	r1, r3, #4
 80024a8:	187d      	adds	r5, r7, r1
 80024aa:	3301      	adds	r3, #1
 80024ac:	f04f 0c00 	mov.w	ip, #0
 80024b0:	f8c5 c004 	str.w	ip, [r5, #4]
 80024b4:	4542      	cmp	r2, r8
 80024b6:	6163      	str	r3, [r4, #20]
 80024b8:	f04f 0345 	mov.w	r3, #69	; 0x45
 80024bc:	547b      	strb	r3, [r7, r1]
 80024be:	e9c5 6e02 	strd	r6, lr, [r5, #8]
 80024c2:	da36      	bge.n	8002532 <d_unqualified_name+0x306>
 80024c4:	69e3      	ldr	r3, [r4, #28]
 80024c6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024ca:	3201      	adds	r2, #1
 80024cc:	6222      	str	r2, [r4, #32]
 80024ce:	7803      	ldrb	r3, [r0, #0]
 80024d0:	e6ed      	b.n	80022ae <d_unqualified_name+0x82>
 80024d2:	1c4b      	adds	r3, r1, #1
 80024d4:	60e3      	str	r3, [r4, #12]
 80024d6:	788b      	ldrb	r3, [r1, #2]
 80024d8:	3b31      	subs	r3, #49	; 0x31
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d832      	bhi.n	8002544 <d_unqualified_name+0x318>
 80024de:	e8df f003 	tbb	[pc, r3]
 80024e2:	1c03      	.short	0x1c03
 80024e4:	1217      	.short	0x1217
 80024e6:	0d          	.byte	0x0d
 80024e7:	00          	.byte	0x00
 80024e8:	3103      	adds	r1, #3
 80024ea:	60e1      	str	r1, [r4, #12]
 80024ec:	f04f 0801 	mov.w	r8, #1
 80024f0:	4620      	mov	r0, r4
 80024f2:	f7ff f8f5 	bl	80016e0 <d_type>
 80024f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024f8:	68e1      	ldr	r1, [r4, #12]
 80024fa:	e76f      	b.n	80023dc <d_unqualified_name+0x1b0>
 80024fc:	3103      	adds	r1, #3
 80024fe:	60e1      	str	r1, [r4, #12]
 8002500:	f04f 0805 	mov.w	r8, #5
 8002504:	e7f4      	b.n	80024f0 <d_unqualified_name+0x2c4>
 8002506:	3103      	adds	r1, #3
 8002508:	60e1      	str	r1, [r4, #12]
 800250a:	f04f 0804 	mov.w	r8, #4
 800250e:	e7ef      	b.n	80024f0 <d_unqualified_name+0x2c4>
 8002510:	3103      	adds	r1, #3
 8002512:	60e1      	str	r1, [r4, #12]
 8002514:	f04f 0803 	mov.w	r8, #3
 8002518:	e7ea      	b.n	80024f0 <d_unqualified_name+0x2c4>
 800251a:	3103      	adds	r1, #3
 800251c:	60e1      	str	r1, [r4, #12]
 800251e:	f04f 0802 	mov.w	r8, #2
 8002522:	e7e5      	b.n	80024f0 <d_unqualified_name+0x2c4>
 8002524:	68e3      	ldr	r3, [r4, #12]
 8002526:	2500      	movs	r5, #0
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	e6c0      	b.n	80022ae <d_unqualified_name+0x82>
 800252c:	783b      	ldrb	r3, [r7, #0]
 800252e:	4665      	mov	r5, ip
 8002530:	e6bd      	b.n	80022ae <d_unqualified_name+0x82>
 8002532:	7803      	ldrb	r3, [r0, #0]
 8002534:	4665      	mov	r5, ip
 8002536:	e6ba      	b.n	80022ae <d_unqualified_name+0x82>
 8002538:	788b      	ldrb	r3, [r1, #2]
 800253a:	2500      	movs	r5, #0
 800253c:	e6b7      	b.n	80022ae <d_unqualified_name+0x82>
 800253e:	780b      	ldrb	r3, [r1, #0]
 8002540:	2500      	movs	r5, #0
 8002542:	e6b4      	b.n	80022ae <d_unqualified_name+0x82>
 8002544:	784b      	ldrb	r3, [r1, #1]
 8002546:	2500      	movs	r5, #0
 8002548:	e6b1      	b.n	80022ae <d_unqualified_name+0x82>
 800254a:	788b      	ldrb	r3, [r1, #2]
 800254c:	4615      	mov	r5, r2
 800254e:	e6ae      	b.n	80022ae <d_unqualified_name+0x82>
 8002550:	780b      	ldrb	r3, [r1, #0]
 8002552:	4615      	mov	r5, r2
 8002554:	e6ab      	b.n	80022ae <d_unqualified_name+0x82>
 8002556:	3102      	adds	r1, #2
 8002558:	60e1      	str	r1, [r4, #12]
 800255a:	f04f 0801 	mov.w	r8, #1
 800255e:	e73d      	b.n	80023dc <d_unqualified_name+0x1b0>
 8002560:	0801c230 	.word	0x0801c230

08002564 <d_encoding>:
 8002564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002568:	68c3      	ldr	r3, [r0, #12]
 800256a:	781a      	ldrb	r2, [r3, #0]
 800256c:	2a47      	cmp	r2, #71	; 0x47
 800256e:	4604      	mov	r4, r0
 8002570:	d019      	beq.n	80025a6 <d_encoding+0x42>
 8002572:	2a54      	cmp	r2, #84	; 0x54
 8002574:	d017      	beq.n	80025a6 <d_encoding+0x42>
 8002576:	460e      	mov	r6, r1
 8002578:	f7fe ff06 	bl	8001388 <d_name>
 800257c:	4605      	mov	r5, r0
 800257e:	2800      	cmp	r0, #0
 8002580:	d07d      	beq.n	800267e <d_encoding+0x11a>
 8002582:	2e00      	cmp	r6, #0
 8002584:	d057      	beq.n	8002636 <d_encoding+0xd2>
 8002586:	68a3      	ldr	r3, [r4, #8]
 8002588:	07db      	lsls	r3, r3, #31
 800258a:	d454      	bmi.n	8002636 <d_encoding+0xd2>
 800258c:	e000      	b.n	8002590 <d_encoding+0x2c>
 800258e:	68ad      	ldr	r5, [r5, #8]
 8002590:	782b      	ldrb	r3, [r5, #0]
 8002592:	f1a3 021c 	sub.w	r2, r3, #28
 8002596:	2a04      	cmp	r2, #4
 8002598:	d9f9      	bls.n	800258e <d_encoding+0x2a>
 800259a:	2b02      	cmp	r3, #2
 800259c:	f000 8186 	beq.w	80028ac <d_encoding+0x348>
 80025a0:	4628      	mov	r0, r5
 80025a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80025a8:	f101 0214 	add.w	r2, r1, #20
 80025ac:	6322      	str	r2, [r4, #48]	; 0x30
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	2a54      	cmp	r2, #84	; 0x54
 80025b2:	d068      	beq.n	8002686 <d_encoding+0x122>
 80025b4:	2a47      	cmp	r2, #71	; 0x47
 80025b6:	d162      	bne.n	800267e <d_encoding+0x11a>
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	60e2      	str	r2, [r4, #12]
 80025bc:	785a      	ldrb	r2, [r3, #1]
 80025be:	2a00      	cmp	r2, #0
 80025c0:	d05d      	beq.n	800267e <d_encoding+0x11a>
 80025c2:	1c9a      	adds	r2, r3, #2
 80025c4:	60e2      	str	r2, [r4, #12]
 80025c6:	785a      	ldrb	r2, [r3, #1]
 80025c8:	3a41      	subs	r2, #65	; 0x41
 80025ca:	2a31      	cmp	r2, #49	; 0x31
 80025cc:	d857      	bhi.n	800267e <d_encoding+0x11a>
 80025ce:	e8df f012 	tbh	[pc, r2, lsl #1]
 80025d2:	013e      	.short	0x013e
 80025d4:	00560056 	.word	0x00560056
 80025d8:	00560056 	.word	0x00560056
 80025dc:	00560056 	.word	0x00560056
 80025e0:	00560056 	.word	0x00560056
 80025e4:	00560056 	.word	0x00560056
 80025e8:	00560056 	.word	0x00560056
 80025ec:	00560056 	.word	0x00560056
 80025f0:	00560056 	.word	0x00560056
 80025f4:	0056014a 	.word	0x0056014a
 80025f8:	00560159 	.word	0x00560159
 80025fc:	005600e0 	.word	0x005600e0
 8002600:	00560056 	.word	0x00560056
 8002604:	00560056 	.word	0x00560056
 8002608:	00560056 	.word	0x00560056
 800260c:	00560056 	.word	0x00560056
 8002610:	00560056 	.word	0x00560056
 8002614:	00560056 	.word	0x00560056
 8002618:	00560056 	.word	0x00560056
 800261c:	00560056 	.word	0x00560056
 8002620:	00560056 	.word	0x00560056
 8002624:	00560056 	.word	0x00560056
 8002628:	00560056 	.word	0x00560056
 800262c:	00560056 	.word	0x00560056
 8002630:	00560056 	.word	0x00560056
 8002634:	00eb      	.short	0x00eb
 8002636:	68e3      	ldr	r3, [r4, #12]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0b0      	beq.n	80025a0 <d_encoding+0x3c>
 800263e:	2b45      	cmp	r3, #69	; 0x45
 8002640:	d0ae      	beq.n	80025a0 <d_encoding+0x3c>
 8002642:	4629      	mov	r1, r5
 8002644:	780b      	ldrb	r3, [r1, #0]
 8002646:	2b20      	cmp	r3, #32
 8002648:	f200 8218 	bhi.w	8002a7c <d_encoding+0x518>
 800264c:	2b1c      	cmp	r3, #28
 800264e:	f080 821e 	bcs.w	8002a8e <d_encoding+0x52a>
 8002652:	2b04      	cmp	r3, #4
 8002654:	f040 8091 	bne.w	800277a <d_encoding+0x216>
 8002658:	688a      	ldr	r2, [r1, #8]
 800265a:	b16a      	cbz	r2, 8002678 <d_encoding+0x114>
 800265c:	7813      	ldrb	r3, [r2, #0]
 800265e:	2b08      	cmp	r3, #8
 8002660:	f103 31ff 	add.w	r1, r3, #4294967295
 8002664:	f200 8086 	bhi.w	8002774 <d_encoding+0x210>
 8002668:	2b07      	cmp	r3, #7
 800266a:	f080 8086 	bcs.w	800277a <d_encoding+0x216>
 800266e:	2901      	cmp	r1, #1
 8002670:	d802      	bhi.n	8002678 <d_encoding+0x114>
 8002672:	68d2      	ldr	r2, [r2, #12]
 8002674:	2a00      	cmp	r2, #0
 8002676:	d1f1      	bne.n	800265c <d_encoding+0xf8>
 8002678:	2101      	movs	r1, #1
 800267a:	e07f      	b.n	800277c <d_encoding+0x218>
 800267c:	60e7      	str	r7, [r4, #12]
 800267e:	2500      	movs	r5, #0
 8002680:	4628      	mov	r0, r5
 8002682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	60e2      	str	r2, [r4, #12]
 800268a:	785a      	ldrb	r2, [r3, #1]
 800268c:	2a00      	cmp	r2, #0
 800268e:	d0f6      	beq.n	800267e <d_encoding+0x11a>
 8002690:	1c9a      	adds	r2, r3, #2
 8002692:	60e2      	str	r2, [r4, #12]
 8002694:	785b      	ldrb	r3, [r3, #1]
 8002696:	3b43      	subs	r3, #67	; 0x43
 8002698:	2b33      	cmp	r3, #51	; 0x33
 800269a:	d8f0      	bhi.n	800267e <d_encoding+0x11a>
 800269c:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <d_encoding+0x140>)
 800269e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a2:	bf00      	nop
 80026a4:	080029f9 	.word	0x080029f9
 80026a8:	0800267f 	.word	0x0800267f
 80026ac:	0800267f 	.word	0x0800267f
 80026b0:	080029e3 	.word	0x080029e3
 80026b4:	0800267f 	.word	0x0800267f
 80026b8:	080029cd 	.word	0x080029cd
 80026bc:	080029b7 	.word	0x080029b7
 80026c0:	080029a1 	.word	0x080029a1
 80026c4:	0800267f 	.word	0x0800267f
 80026c8:	0800267f 	.word	0x0800267f
 80026cc:	0800267f 	.word	0x0800267f
 80026d0:	0800267f 	.word	0x0800267f
 80026d4:	0800267f 	.word	0x0800267f
 80026d8:	0800267f 	.word	0x0800267f
 80026dc:	0800267f 	.word	0x0800267f
 80026e0:	0800267f 	.word	0x0800267f
 80026e4:	0800298b 	.word	0x0800298b
 80026e8:	08002971 	.word	0x08002971
 80026ec:	0800267f 	.word	0x0800267f
 80026f0:	08002957 	.word	0x08002957
 80026f4:	08002941 	.word	0x08002941
 80026f8:	0800267f 	.word	0x0800267f
 80026fc:	0800267f 	.word	0x0800267f
 8002700:	0800267f 	.word	0x0800267f
 8002704:	0800267f 	.word	0x0800267f
 8002708:	0800267f 	.word	0x0800267f
 800270c:	0800267f 	.word	0x0800267f
 8002710:	0800267f 	.word	0x0800267f
 8002714:	0800267f 	.word	0x0800267f
 8002718:	0800267f 	.word	0x0800267f
 800271c:	0800267f 	.word	0x0800267f
 8002720:	0800267f 	.word	0x0800267f
 8002724:	0800290d 	.word	0x0800290d
 8002728:	0800267f 	.word	0x0800267f
 800272c:	0800267f 	.word	0x0800267f
 8002730:	0800267f 	.word	0x0800267f
 8002734:	0800267f 	.word	0x0800267f
 8002738:	080028e7 	.word	0x080028e7
 800273c:	0800267f 	.word	0x0800267f
 8002740:	0800267f 	.word	0x0800267f
 8002744:	0800267f 	.word	0x0800267f
 8002748:	0800267f 	.word	0x0800267f
 800274c:	0800267f 	.word	0x0800267f
 8002750:	0800267f 	.word	0x0800267f
 8002754:	0800267f 	.word	0x0800267f
 8002758:	0800267f 	.word	0x0800267f
 800275c:	0800267f 	.word	0x0800267f
 8002760:	0800267f 	.word	0x0800267f
 8002764:	0800267f 	.word	0x0800267f
 8002768:	0800267f 	.word	0x0800267f
 800276c:	0800267f 	.word	0x0800267f
 8002770:	080028c1 	.word	0x080028c1
 8002774:	2b34      	cmp	r3, #52	; 0x34
 8002776:	f47f af7f 	bne.w	8002678 <d_encoding+0x114>
 800277a:	2100      	movs	r1, #0
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff fd15 	bl	80021ac <d_bare_function_type>
 8002782:	462a      	mov	r2, r5
 8002784:	4603      	mov	r3, r0
 8002786:	2103      	movs	r1, #3
 8002788:	4620      	mov	r0, r4
 800278a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800278e:	f7fd bd27 	b.w	80001e0 <d_make_comp>
 8002792:	4620      	mov	r0, r4
 8002794:	f7fe fdf8 	bl	8001388 <d_name>
 8002798:	2300      	movs	r3, #0
 800279a:	4602      	mov	r2, r0
 800279c:	2113      	movs	r1, #19
 800279e:	4620      	mov	r0, r4
 80027a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a4:	f7fd bd1c 	b.w	80001e0 <d_make_comp>
 80027a8:	f104 000c 	add.w	r0, r4, #12
 80027ac:	f7fd fe12 	bl	80003d4 <d_number.isra.1>
 80027b0:	2801      	cmp	r0, #1
 80027b2:	f77f af64 	ble.w	800267e <d_encoding+0x11a>
 80027b6:	68e3      	ldr	r3, [r4, #12]
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	2a00      	cmp	r2, #0
 80027bc:	f43f af5f 	beq.w	800267e <d_encoding+0x11a>
 80027c0:	1c5f      	adds	r7, r3, #1
 80027c2:	60e7      	str	r7, [r4, #12]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b5f      	cmp	r3, #95	; 0x5f
 80027c8:	f47f af59 	bne.w	800267e <d_encoding+0x11a>
 80027cc:	2200      	movs	r2, #0
 80027ce:	1e45      	subs	r5, r0, #1
 80027d0:	4690      	mov	r8, r2
 80027d2:	f04f 0940 	mov.w	r9, #64	; 0x40
 80027d6:	783b      	ldrb	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f43f af50 	beq.w	800267e <d_encoding+0x11a>
 80027de:	2b24      	cmp	r3, #36	; 0x24
 80027e0:	f040 812a 	bne.w	8002a38 <d_encoding+0x4d4>
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b53      	cmp	r3, #83	; 0x53
 80027e8:	f000 8156 	beq.w	8002a98 <d_encoding+0x534>
 80027ec:	2b5f      	cmp	r3, #95	; 0x5f
 80027ee:	f000 8155 	beq.w	8002a9c <d_encoding+0x538>
 80027f2:	2b24      	cmp	r3, #36	; 0x24
 80027f4:	f47f af43 	bne.w	800267e <d_encoding+0x11a>
 80027f8:	4619      	mov	r1, r3
 80027fa:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 80027fe:	68e7      	ldr	r7, [r4, #12]
 8002800:	4298      	cmp	r0, r3
 8002802:	f107 0702 	add.w	r7, r7, #2
 8002806:	f6bf af39 	bge.w	800267c <d_encoding+0x118>
 800280a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800280e:	0106      	lsls	r6, r0, #4
 8002810:	eb0c 0306 	add.w	r3, ip, r6
 8002814:	3001      	adds	r0, #1
 8002816:	f8c3 8004 	str.w	r8, [r3, #4]
 800281a:	3d02      	subs	r5, #2
 800281c:	6160      	str	r0, [r4, #20]
 800281e:	f80c 9006 	strb.w	r9, [ip, r6]
 8002822:	6099      	str	r1, [r3, #8]
 8002824:	60e7      	str	r7, [r4, #12]
 8002826:	2a00      	cmp	r2, #0
 8002828:	f000 8126 	beq.w	8002a78 <d_encoding+0x514>
 800282c:	213f      	movs	r1, #63	; 0x3f
 800282e:	4620      	mov	r0, r4
 8002830:	f7fd fcd6 	bl	80001e0 <d_make_comp>
 8002834:	4602      	mov	r2, r0
 8002836:	2800      	cmp	r0, #0
 8002838:	f43f af21 	beq.w	800267e <d_encoding+0x11a>
 800283c:	2d00      	cmp	r5, #0
 800283e:	dcca      	bgt.n	80027d6 <d_encoding+0x272>
 8002840:	4620      	mov	r0, r4
 8002842:	2300      	movs	r3, #0
 8002844:	213e      	movs	r1, #62	; 0x3e
 8002846:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800284a:	f7fd bcc9 	b.w	80001e0 <d_make_comp>
 800284e:	2100      	movs	r1, #0
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff fe87 	bl	8002564 <d_encoding>
 8002856:	2300      	movs	r3, #0
 8002858:	4602      	mov	r2, r0
 800285a:	2117      	movs	r1, #23
 800285c:	4620      	mov	r0, r4
 800285e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002862:	f7fd bcbd 	b.w	80001e0 <d_make_comp>
 8002866:	4620      	mov	r0, r4
 8002868:	f7fe fd8e 	bl	8001388 <d_name>
 800286c:	4605      	mov	r5, r0
 800286e:	4620      	mov	r0, r4
 8002870:	f7fd fddc 	bl	800042c <d_number_component>
 8002874:	462a      	mov	r2, r5
 8002876:	4603      	mov	r3, r0
 8002878:	2116      	movs	r1, #22
 800287a:	4620      	mov	r0, r4
 800287c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002880:	f7fd bcae 	b.w	80001e0 <d_make_comp>
 8002884:	789a      	ldrb	r2, [r3, #2]
 8002886:	2100      	movs	r1, #0
 8002888:	4620      	mov	r0, r4
 800288a:	b12a      	cbz	r2, 8002898 <d_encoding+0x334>
 800288c:	1cda      	adds	r2, r3, #3
 800288e:	60e2      	str	r2, [r4, #12]
 8002890:	789b      	ldrb	r3, [r3, #2]
 8002892:	2b6e      	cmp	r3, #110	; 0x6e
 8002894:	f000 8109 	beq.w	8002aaa <d_encoding+0x546>
 8002898:	f7ff fe64 	bl	8002564 <d_encoding>
 800289c:	2300      	movs	r3, #0
 800289e:	4602      	mov	r2, r0
 80028a0:	2148      	movs	r1, #72	; 0x48
 80028a2:	4620      	mov	r0, r4
 80028a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028a8:	f7fd bc9a 	b.w	80001e0 <d_make_comp>
 80028ac:	68ea      	ldr	r2, [r5, #12]
 80028ae:	e000      	b.n	80028b2 <d_encoding+0x34e>
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	7810      	ldrb	r0, [r2, #0]
 80028b4:	f7fd fd80 	bl	80003b8 <is_fnqual_component_type>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d1f9      	bne.n	80028b0 <d_encoding+0x34c>
 80028bc:	60ea      	str	r2, [r5, #12]
 80028be:	e66f      	b.n	80025a0 <d_encoding+0x3c>
 80028c0:	2176      	movs	r1, #118	; 0x76
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7fe f80a 	bl	80008dc <d_call_offset>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	f43f aed8 	beq.w	800267e <d_encoding+0x11a>
 80028ce:	2100      	movs	r1, #0
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff fe47 	bl	8002564 <d_encoding>
 80028d6:	2300      	movs	r3, #0
 80028d8:	4602      	mov	r2, r0
 80028da:	2110      	movs	r1, #16
 80028dc:	4620      	mov	r0, r4
 80028de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e2:	f7fd bc7d 	b.w	80001e0 <d_make_comp>
 80028e6:	2168      	movs	r1, #104	; 0x68
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7fd fff7 	bl	80008dc <d_call_offset>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	f43f aec5 	beq.w	800267e <d_encoding+0x11a>
 80028f4:	2100      	movs	r1, #0
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff fe34 	bl	8002564 <d_encoding>
 80028fc:	2300      	movs	r3, #0
 80028fe:	4602      	mov	r2, r0
 8002900:	210f      	movs	r1, #15
 8002902:	4620      	mov	r0, r4
 8002904:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002908:	f7fd bc6a 	b.w	80001e0 <d_make_comp>
 800290c:	2100      	movs	r1, #0
 800290e:	4620      	mov	r0, r4
 8002910:	f7fd ffe4 	bl	80008dc <d_call_offset>
 8002914:	2800      	cmp	r0, #0
 8002916:	f43f aeb2 	beq.w	800267e <d_encoding+0x11a>
 800291a:	2100      	movs	r1, #0
 800291c:	4620      	mov	r0, r4
 800291e:	f7fd ffdd 	bl	80008dc <d_call_offset>
 8002922:	2800      	cmp	r0, #0
 8002924:	f43f aeab 	beq.w	800267e <d_encoding+0x11a>
 8002928:	2100      	movs	r1, #0
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff fe1a 	bl	8002564 <d_encoding>
 8002930:	2300      	movs	r3, #0
 8002932:	4602      	mov	r2, r0
 8002934:	2111      	movs	r1, #17
 8002936:	4620      	mov	r0, r4
 8002938:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800293c:	f7fd bc50 	b.w	80001e0 <d_make_comp>
 8002940:	4620      	mov	r0, r4
 8002942:	f7fe fd21 	bl	8001388 <d_name>
 8002946:	2300      	movs	r3, #0
 8002948:	4602      	mov	r2, r0
 800294a:	2115      	movs	r1, #21
 800294c:	4620      	mov	r0, r4
 800294e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002952:	f7fd bc45 	b.w	80001e0 <d_make_comp>
 8002956:	310f      	adds	r1, #15
 8002958:	6321      	str	r1, [r4, #48]	; 0x30
 800295a:	4620      	mov	r0, r4
 800295c:	f7fe fec0 	bl	80016e0 <d_type>
 8002960:	2300      	movs	r3, #0
 8002962:	4602      	mov	r2, r0
 8002964:	2109      	movs	r1, #9
 8002966:	4620      	mov	r0, r4
 8002968:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800296c:	f7fd bc38 	b.w	80001e0 <d_make_comp>
 8002970:	310a      	adds	r1, #10
 8002972:	6321      	str	r1, [r4, #48]	; 0x30
 8002974:	4620      	mov	r0, r4
 8002976:	f7fe feb3 	bl	80016e0 <d_type>
 800297a:	2300      	movs	r3, #0
 800297c:	4602      	mov	r2, r0
 800297e:	210a      	movs	r1, #10
 8002980:	4620      	mov	r0, r4
 8002982:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002986:	f7fd bc2b 	b.w	80001e0 <d_make_comp>
 800298a:	4620      	mov	r0, r4
 800298c:	f7fe fea8 	bl	80016e0 <d_type>
 8002990:	2300      	movs	r3, #0
 8002992:	4602      	mov	r2, r0
 8002994:	210d      	movs	r1, #13
 8002996:	4620      	mov	r0, r4
 8002998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	f7fd bc20 	b.w	80001e0 <d_make_comp>
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7fe fe9d 	bl	80016e0 <d_type>
 80029a6:	2300      	movs	r3, #0
 80029a8:	4602      	mov	r2, r0
 80029aa:	2112      	movs	r1, #18
 80029ac:	4620      	mov	r0, r4
 80029ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b2:	f7fd bc15 	b.w	80001e0 <d_make_comp>
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7fe fe92 	bl	80016e0 <d_type>
 80029bc:	2300      	movs	r3, #0
 80029be:	4602      	mov	r2, r0
 80029c0:	210c      	movs	r1, #12
 80029c2:	4620      	mov	r0, r4
 80029c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c8:	f7fd bc0a 	b.w	80001e0 <d_make_comp>
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7fe fcdb 	bl	8001388 <d_name>
 80029d2:	2300      	movs	r3, #0
 80029d4:	4602      	mov	r2, r0
 80029d6:	2114      	movs	r1, #20
 80029d8:	4620      	mov	r0, r4
 80029da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029de:	f7fd bbff 	b.w	80001e0 <d_make_comp>
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7fe fe7c 	bl	80016e0 <d_type>
 80029e8:	2300      	movs	r3, #0
 80029ea:	4602      	mov	r2, r0
 80029ec:	210e      	movs	r1, #14
 80029ee:	4620      	mov	r0, r4
 80029f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f4:	f7fd bbf4 	b.w	80001e0 <d_make_comp>
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7fe fe71 	bl	80016e0 <d_type>
 80029fe:	4605      	mov	r5, r0
 8002a00:	f104 000c 	add.w	r0, r4, #12
 8002a04:	f7fd fce6 	bl	80003d4 <d_number.isra.1>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	f6ff ae38 	blt.w	800267e <d_encoding+0x11a>
 8002a0e:	68e3      	ldr	r3, [r4, #12]
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	2a5f      	cmp	r2, #95	; 0x5f
 8002a14:	f47f ae33 	bne.w	800267e <d_encoding+0x11a>
 8002a18:	3301      	adds	r3, #1
 8002a1a:	60e3      	str	r3, [r4, #12]
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f7fe fe5f 	bl	80016e0 <d_type>
 8002a22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a24:	1d59      	adds	r1, r3, #5
 8002a26:	6321      	str	r1, [r4, #48]	; 0x30
 8002a28:	4602      	mov	r2, r0
 8002a2a:	462b      	mov	r3, r5
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	210b      	movs	r1, #11
 8002a30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a34:	f7fd bbd4 	b.w	80001e0 <d_make_comp>
 8002a38:	463e      	mov	r6, r7
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	e004      	b.n	8002a48 <d_encoding+0x4e4>
 8002a3e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002a42:	b123      	cbz	r3, 8002a4e <d_encoding+0x4ea>
 8002a44:	2b24      	cmp	r3, #36	; 0x24
 8002a46:	d002      	beq.n	8002a4e <d_encoding+0x4ea>
 8002a48:	3101      	adds	r1, #1
 8002a4a:	42a9      	cmp	r1, r5
 8002a4c:	dbf7      	blt.n	8002a3e <d_encoding+0x4da>
 8002a4e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002a52:	4283      	cmp	r3, r0
 8002a54:	da24      	bge.n	8002aa0 <d_encoding+0x53c>
 8002a56:	e9d4 c603 	ldrd	ip, r6, [r4, #12]
 8002a5a:	0118      	lsls	r0, r3, #4
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	6163      	str	r3, [r4, #20]
 8002a60:	1833      	adds	r3, r6, r0
 8002a62:	1a6d      	subs	r5, r5, r1
 8002a64:	f8c3 8004 	str.w	r8, [r3, #4]
 8002a68:	f806 8000 	strb.w	r8, [r6, r0]
 8002a6c:	609f      	str	r7, [r3, #8]
 8002a6e:	eb0c 0701 	add.w	r7, ip, r1
 8002a72:	60d9      	str	r1, [r3, #12]
 8002a74:	60e7      	str	r7, [r4, #12]
 8002a76:	e6d6      	b.n	8002826 <d_encoding+0x2c2>
 8002a78:	461a      	mov	r2, r3
 8002a7a:	e6df      	b.n	800283c <d_encoding+0x2d8>
 8002a7c:	2b4c      	cmp	r3, #76	; 0x4c
 8002a7e:	f1a3 024e 	sub.w	r2, r3, #78	; 0x4e
 8002a82:	d004      	beq.n	8002a8e <d_encoding+0x52a>
 8002a84:	f4ff ae79 	bcc.w	800277a <d_encoding+0x216>
 8002a88:	2a01      	cmp	r2, #1
 8002a8a:	f63f ae76 	bhi.w	800277a <d_encoding+0x216>
 8002a8e:	6889      	ldr	r1, [r1, #8]
 8002a90:	2900      	cmp	r1, #0
 8002a92:	f47f add7 	bne.w	8002644 <d_encoding+0xe0>
 8002a96:	e671      	b.n	800277c <d_encoding+0x218>
 8002a98:	212f      	movs	r1, #47	; 0x2f
 8002a9a:	e6ae      	b.n	80027fa <d_encoding+0x296>
 8002a9c:	212e      	movs	r1, #46	; 0x2e
 8002a9e:	e6ac      	b.n	80027fa <d_encoding+0x296>
 8002aa0:	68e3      	ldr	r3, [r4, #12]
 8002aa2:	440b      	add	r3, r1
 8002aa4:	60e3      	str	r3, [r4, #12]
 8002aa6:	2500      	movs	r5, #0
 8002aa8:	e57a      	b.n	80025a0 <d_encoding+0x3c>
 8002aaa:	f7ff fd5b 	bl	8002564 <d_encoding>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	2149      	movs	r1, #73	; 0x49
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aba:	f7fd bb91 	b.w	80001e0 <d_make_comp>
 8002abe:	bf00      	nop

08002ac0 <d_expr_primary>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	68c2      	ldr	r2, [r0, #12]
 8002ac4:	7813      	ldrb	r3, [r2, #0]
 8002ac6:	2b4c      	cmp	r3, #76	; 0x4c
 8002ac8:	d144      	bne.n	8002b54 <d_expr_primary+0x94>
 8002aca:	1c53      	adds	r3, r2, #1
 8002acc:	60c3      	str	r3, [r0, #12]
 8002ace:	7851      	ldrb	r1, [r2, #1]
 8002ad0:	295f      	cmp	r1, #95	; 0x5f
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	d040      	beq.n	8002b58 <d_expr_primary+0x98>
 8002ad6:	295a      	cmp	r1, #90	; 0x5a
 8002ad8:	d10c      	bne.n	8002af4 <d_expr_primary+0x34>
 8002ada:	3301      	adds	r3, #1
 8002adc:	60e3      	str	r3, [r4, #12]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f7ff fd3f 	bl	8002564 <d_encoding>
 8002ae6:	68e3      	ldr	r3, [r4, #12]
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	2a45      	cmp	r2, #69	; 0x45
 8002aec:	d132      	bne.n	8002b54 <d_expr_primary+0x94>
 8002aee:	3301      	adds	r3, #1
 8002af0:	60e3      	str	r3, [r4, #12]
 8002af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002af4:	f7fe fdf4 	bl	80016e0 <d_type>
 8002af8:	b360      	cbz	r0, 8002b54 <d_expr_primary+0x94>
 8002afa:	7803      	ldrb	r3, [r0, #0]
 8002afc:	2b27      	cmp	r3, #39	; 0x27
 8002afe:	d032      	beq.n	8002b66 <d_expr_primary+0xa6>
 8002b00:	68e6      	ldr	r6, [r4, #12]
 8002b02:	7833      	ldrb	r3, [r6, #0]
 8002b04:	2b6e      	cmp	r3, #110	; 0x6e
 8002b06:	d037      	beq.n	8002b78 <d_expr_primary+0xb8>
 8002b08:	213c      	movs	r1, #60	; 0x3c
 8002b0a:	2b45      	cmp	r3, #69	; 0x45
 8002b0c:	d040      	beq.n	8002b90 <d_expr_primary+0xd0>
 8002b0e:	b30b      	cbz	r3, 8002b54 <d_expr_primary+0x94>
 8002b10:	4633      	mov	r3, r6
 8002b12:	e000      	b.n	8002b16 <d_expr_primary+0x56>
 8002b14:	b1f5      	cbz	r5, 8002b54 <d_expr_primary+0x94>
 8002b16:	3301      	adds	r3, #1
 8002b18:	60e3      	str	r3, [r4, #12]
 8002b1a:	781d      	ldrb	r5, [r3, #0]
 8002b1c:	2d45      	cmp	r5, #69	; 0x45
 8002b1e:	d1f9      	bne.n	8002b14 <d_expr_primary+0x54>
 8002b20:	1b9d      	subs	r5, r3, r6
 8002b22:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	da0b      	bge.n	8002b42 <d_expr_primary+0x82>
 8002b2a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002b2e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8002b32:	eb0e 030c 	add.w	r3, lr, ip
 8002b36:	3201      	adds	r2, #1
 8002b38:	2700      	movs	r7, #0
 8002b3a:	605f      	str	r7, [r3, #4]
 8002b3c:	6162      	str	r2, [r4, #20]
 8002b3e:	b106      	cbz	r6, 8002b42 <d_expr_primary+0x82>
 8002b40:	bb05      	cbnz	r5, 8002b84 <d_expr_primary+0xc4>
 8002b42:	2300      	movs	r3, #0
 8002b44:	4602      	mov	r2, r0
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7fd fb4a 	bl	80001e0 <d_make_comp>
 8002b4c:	68e3      	ldr	r3, [r4, #12]
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	2a45      	cmp	r2, #69	; 0x45
 8002b52:	d0cc      	beq.n	8002aee <d_expr_primary+0x2e>
 8002b54:	2000      	movs	r0, #0
 8002b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b58:	1c93      	adds	r3, r2, #2
 8002b5a:	60c3      	str	r3, [r0, #12]
 8002b5c:	7892      	ldrb	r2, [r2, #2]
 8002b5e:	2a5a      	cmp	r2, #90	; 0x5a
 8002b60:	d0bb      	beq.n	8002ada <d_expr_primary+0x1a>
 8002b62:	2000      	movs	r0, #0
 8002b64:	e7c1      	b.n	8002aea <d_expr_primary+0x2a>
 8002b66:	6883      	ldr	r3, [r0, #8]
 8002b68:	7c1a      	ldrb	r2, [r3, #16]
 8002b6a:	2a00      	cmp	r2, #0
 8002b6c:	d0c8      	beq.n	8002b00 <d_expr_primary+0x40>
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	6323      	str	r3, [r4, #48]	; 0x30
 8002b76:	e7c3      	b.n	8002b00 <d_expr_primary+0x40>
 8002b78:	1c72      	adds	r2, r6, #1
 8002b7a:	60e2      	str	r2, [r4, #12]
 8002b7c:	7873      	ldrb	r3, [r6, #1]
 8002b7e:	213d      	movs	r1, #61	; 0x3d
 8002b80:	4616      	mov	r6, r2
 8002b82:	e7c2      	b.n	8002b0a <d_expr_primary+0x4a>
 8002b84:	605f      	str	r7, [r3, #4]
 8002b86:	f80e 700c 	strb.w	r7, [lr, ip]
 8002b8a:	e9c3 6502 	strd	r6, r5, [r3, #8]
 8002b8e:	e7d9      	b.n	8002b44 <d_expr_primary+0x84>
 8002b90:	2500      	movs	r5, #0
 8002b92:	e7c6      	b.n	8002b22 <d_expr_primary+0x62>

08002b94 <d_print_comp>:
 8002b94:	b112      	cbz	r2, 8002b9c <d_print_comp+0x8>
 8002b96:	6853      	ldr	r3, [r2, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	dd03      	ble.n	8002ba4 <d_print_comp+0x10>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8002ba2:	4770      	bx	lr
 8002ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba8:	4615      	mov	r5, r2
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	606a      	str	r2, [r5, #4]
 8002bae:	b099      	sub	sp, #100	; 0x64
 8002bb0:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 8002bb4:	9504      	str	r5, [sp, #16]
 8002bb6:	460e      	mov	r6, r1
 8002bb8:	ab04      	add	r3, sp, #16
 8002bba:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
 8002bbe:	9105      	str	r1, [sp, #20]
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8002bc6:	2f00      	cmp	r7, #0
 8002bc8:	f040 80d7 	bne.w	8002d7a <d_print_comp+0x1e6>
 8002bcc:	7828      	ldrb	r0, [r5, #0]
 8002bce:	284f      	cmp	r0, #79	; 0x4f
 8002bd0:	f201 82ef 	bhi.w	80041b2 <d_print_comp+0x161e>
 8002bd4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002bd8:	0ab80a87 	.word	0x0ab80a87
 8002bdc:	0a4f0ab8 	.word	0x0a4f0ab8
 8002be0:	079407c6 	.word	0x079407c6
 8002be4:	075e0767 	.word	0x075e0767
 8002be8:	070f0737 	.word	0x070f0737
 8002bec:	06bf06e7 	.word	0x06bf06e7
 8002bf0:	066f0697 	.word	0x066f0697
 8002bf4:	061f0647 	.word	0x061f0647
 8002bf8:	091f0947 	.word	0x091f0947
 8002bfc:	08cf08f7 	.word	0x08cf08f7
 8002c00:	087f08a7 	.word	0x087f08a7
 8002c04:	082f0857 	.word	0x082f0857
 8002c08:	09bf09d6 	.word	0x09bf09d6
 8002c0c:	09bf09bf 	.word	0x09bf09bf
 8002c10:	09990999 	.word	0x09990999
 8002c14:	09990999 	.word	0x09990999
 8002c18:	09990999 	.word	0x09990999
 8002c1c:	096f0999 	.word	0x096f0999
 8002c20:	0999096f 	.word	0x0999096f
 8002c24:	0a1d0999 	.word	0x0a1d0999
 8002c28:	06060a14 	.word	0x06060a14
 8002c2c:	05720592 	.word	0x05720592
 8002c30:	0572051b 	.word	0x0572051b
 8002c34:	04d304d3 	.word	0x04d304d3
 8002c38:	045c0488 	.word	0x045c0488
 8002c3c:	0aed0434 	.word	0x0aed0434
 8002c40:	0404040c 	.word	0x0404040c
 8002c44:	039c03b0 	.word	0x039c03b0
 8002c48:	038d0397 	.word	0x038d0397
 8002c4c:	03880388 	.word	0x03880388
 8002c50:	03330333 	.word	0x03330333
 8002c54:	02fe030b 	.word	0x02fe030b
 8002c58:	02aa02dc 	.word	0x02aa02dc
 8002c5c:	025a0282 	.word	0x025a0282
 8002c60:	01f80232 	.word	0x01f80232
 8002c64:	01d00aed 	.word	0x01d00aed
 8002c68:	015301a8 	.word	0x015301a8
 8002c6c:	017b0105 	.word	0x017b0105
 8002c70:	00d80999 	.word	0x00d80999
 8002c74:	09990999 	.word	0x09990999
 8002c78:	68aa      	ldr	r2, [r5, #8]
 8002c7a:	6893      	ldr	r3, [r2, #8]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	7859      	ldrb	r1, [r3, #1]
 8002c80:	2963      	cmp	r1, #99	; 0x63
 8002c82:	d109      	bne.n	8002c98 <d_print_comp+0x104>
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8002c8a:	2901      	cmp	r1, #1
 8002c8c:	f242 8319 	bls.w	80052c2 <d_print_comp+0x272e>
 8002c90:	3b72      	subs	r3, #114	; 0x72
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f242 8315 	bls.w	80052c2 <d_print_comp+0x272e>
 8002c98:	f105 030c 	add.w	r3, r5, #12
 8002c9c:	4631      	mov	r1, r6
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f003 fcd2 	bl	8006648 <d_maybe_print_fold_expression.isra.20>
 8002ca4:	4680      	mov	r8, r0
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	f042 8400 	bne.w	80054ac <d_print_comp+0x2918>
 8002cac:	68ab      	ldr	r3, [r5, #8]
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	2a31      	cmp	r2, #49	; 0x31
 8002cb2:	f002 8592 	beq.w	80057da <d_print_comp+0x2c46>
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	49d7      	ldr	r1, [pc, #860]	; (8003018 <d_print_comp+0x484>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	f004 f850 	bl	8006d60 <strcmp>
 8002cc0:	68eb      	ldr	r3, [r5, #12]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	b918      	cbnz	r0, 8002cce <d_print_comp+0x13a>
 8002cc6:	7813      	ldrb	r3, [r2, #0]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	f002 85d4 	beq.w	8005876 <d_print_comp+0x2ce2>
 8002cce:	4631      	mov	r1, r6
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f003 fc67 	bl	80065a4 <d_print_subexpr>
 8002cd6:	68af      	ldr	r7, [r5, #8]
 8002cd8:	49d0      	ldr	r1, [pc, #832]	; (800301c <d_print_comp+0x488>)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f8d3 8000 	ldr.w	r8, [r3]
 8002ce0:	4640      	mov	r0, r8
 8002ce2:	f004 f83d 	bl	8006d60 <strcmp>
 8002ce6:	4681      	mov	r9, r0
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	f042 83d0 	bne.w	800548e <d_print_comp+0x28fa>
 8002cee:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002cf2:	2fff      	cmp	r7, #255	; 0xff
 8002cf4:	d110      	bne.n	8002d18 <d_print_comp+0x184>
 8002cf6:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002cfa:	4639      	mov	r1, r7
 8002cfc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d04:	4620      	mov	r0, r4
 8002d06:	4798      	blx	r3
 8002d08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d0c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8002d10:	3301      	adds	r3, #1
 8002d12:	464f      	mov	r7, r9
 8002d14:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d18:	1c7a      	adds	r2, r7, #1
 8002d1a:	235b      	movs	r3, #91	; 0x5b
 8002d1c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d20:	55e3      	strb	r3, [r4, r7]
 8002d22:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d26:	68eb      	ldr	r3, [r5, #12]
 8002d28:	4631      	mov	r1, r6
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff ff31 	bl	8002b94 <d_print_comp>
 8002d32:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d36:	2fff      	cmp	r7, #255	; 0xff
 8002d38:	d111      	bne.n	8002d5e <d_print_comp+0x1ca>
 8002d3a:	2600      	movs	r6, #0
 8002d3c:	4639      	mov	r1, r7
 8002d3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d42:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002d46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	4798      	blx	r3
 8002d4e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d52:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8002d56:	3301      	adds	r3, #1
 8002d58:	4637      	mov	r7, r6
 8002d5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d5e:	235d      	movs	r3, #93	; 0x5d
 8002d60:	1c7a      	adds	r2, r7, #1
 8002d62:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d66:	55e3      	strb	r3, [r4, r7]
 8002d68:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d6c:	68ab      	ldr	r3, [r5, #8]
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	2a31      	cmp	r2, #49	; 0x31
 8002d72:	f002 83ad 	beq.w	80054d0 <d_print_comp+0x293c>
 8002d76:	9905      	ldr	r1, [sp, #20]
 8002d78:	686a      	ldr	r2, [r5, #4]
 8002d7a:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	606a      	str	r2, [r5, #4]
 8002d82:	b019      	add	sp, #100	; 0x64
 8002d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d88:	4fa5      	ldr	r7, [pc, #660]	; (8003020 <d_print_comp+0x48c>)
 8002d8a:	68aa      	ldr	r2, [r5, #8]
 8002d8c:	4631      	mov	r1, r6
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f7ff ff00 	bl	8002b94 <d_print_comp>
 8002d94:	f107 0808 	add.w	r8, r7, #8
 8002d98:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002d9c:	f04f 0900 	mov.w	r9, #0
 8002da0:	e016      	b.n	8002dd0 <d_print_comp+0x23c>
 8002da2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002da6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002daa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002dae:	4798      	blx	r3
 8002db0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002db4:	3301      	adds	r3, #1
 8002db6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	45b8      	cmp	r8, r7
 8002dc0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002dc4:	f804 a002 	strb.w	sl, [r4, r2]
 8002dc8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002dcc:	f001 82f9 	beq.w	80043c2 <d_print_comp+0x182e>
 8002dd0:	2bff      	cmp	r3, #255	; 0xff
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002dda:	d0e2      	beq.n	8002da2 <d_print_comp+0x20e>
 8002ddc:	461a      	mov	r2, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	e7ed      	b.n	8002dbe <d_print_comp+0x22a>
 8002de2:	68a9      	ldr	r1, [r5, #8]
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7fd fcef 	bl	80007c8 <d_find_pack>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	f002 81e1 	beq.w	80051b2 <d_print_comp+0x261e>
 8002df0:	2300      	movs	r3, #0
 8002df2:	7802      	ldrb	r2, [r0, #0]
 8002df4:	2a2f      	cmp	r2, #47	; 0x2f
 8002df6:	f041 85df 	bne.w	80049b8 <d_print_comp+0x1e24>
 8002dfa:	6882      	ldr	r2, [r0, #8]
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	f001 85db 	beq.w	80049b8 <d_print_comp+0x1e24>
 8002e02:	68c0      	ldr	r0, [r0, #12]
 8002e04:	3301      	adds	r3, #1
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d1f3      	bne.n	8002df2 <d_print_comp+0x25e>
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	68ab      	ldr	r3, [r5, #8]
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	1e4a      	subs	r2, r1, #1
 8002e12:	9202      	str	r2, [sp, #8]
 8002e14:	f04f 0a00 	mov.w	sl, #0
 8002e18:	4689      	mov	r9, r1
 8002e1a:	9503      	str	r5, [sp, #12]
 8002e1c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8002e20:	9a01      	ldr	r2, [sp, #4]
 8002e22:	4631      	mov	r1, r6
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7ff feb5 	bl	8002b94 <d_print_comp>
 8002e2a:	9b02      	ldr	r3, [sp, #8]
 8002e2c:	429f      	cmp	r7, r3
 8002e2e:	f281 81c6 	bge.w	80041be <d_print_comp+0x162a>
 8002e32:	4d7c      	ldr	r5, [pc, #496]	; (8003024 <d_print_comp+0x490>)
 8002e34:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e38:	f105 0802 	add.w	r8, r5, #2
 8002e3c:	e016      	b.n	8002e6c <d_print_comp+0x2d8>
 8002e3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e46:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8002e4a:	4798      	blx	r3
 8002e4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e50:	3301      	adds	r3, #1
 8002e52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e56:	2200      	movs	r2, #0
 8002e58:	2301      	movs	r3, #1
 8002e5a:	45a8      	cmp	r8, r5
 8002e5c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002e60:	f804 b002 	strb.w	fp, [r4, r2]
 8002e64:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8002e68:	f001 81a9 	beq.w	80041be <d_print_comp+0x162a>
 8002e6c:	2bff      	cmp	r3, #255	; 0xff
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4620      	mov	r0, r4
 8002e72:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002e76:	d0e2      	beq.n	8002e3e <d_print_comp+0x2aa>
 8002e78:	461a      	mov	r2, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	e7ed      	b.n	8002e5a <d_print_comp+0x2c6>
 8002e7e:	4f6a      	ldr	r7, [pc, #424]	; (8003028 <d_print_comp+0x494>)
 8002e80:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e84:	f107 081a 	add.w	r8, r7, #26
 8002e88:	f04f 0900 	mov.w	r9, #0
 8002e8c:	e016      	b.n	8002ebc <d_print_comp+0x328>
 8002e8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e92:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e96:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e9a:	4798      	blx	r3
 8002e9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	45b8      	cmp	r8, r7
 8002eac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002eb0:	f804 a002 	strb.w	sl, [r4, r2]
 8002eb4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002eb8:	f001 82f1 	beq.w	800449e <d_print_comp+0x190a>
 8002ebc:	2bff      	cmp	r3, #255	; 0xff
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002ec6:	d0e2      	beq.n	8002e8e <d_print_comp+0x2fa>
 8002ec8:	461a      	mov	r2, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	e7ed      	b.n	8002eaa <d_print_comp+0x316>
 8002ece:	4f57      	ldr	r7, [pc, #348]	; (800302c <d_print_comp+0x498>)
 8002ed0:	68aa      	ldr	r2, [r5, #8]
 8002ed2:	4631      	mov	r1, r6
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f7ff fe5d 	bl	8002b94 <d_print_comp>
 8002eda:	f107 0805 	add.w	r8, r7, #5
 8002ede:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002ee2:	f04f 0900 	mov.w	r9, #0
 8002ee6:	e016      	b.n	8002f16 <d_print_comp+0x382>
 8002ee8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002eec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ef0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ef4:	4798      	blx	r3
 8002ef6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002efa:	3301      	adds	r3, #1
 8002efc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f00:	2200      	movs	r2, #0
 8002f02:	2301      	movs	r3, #1
 8002f04:	45b8      	cmp	r8, r7
 8002f06:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f0a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f0e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f12:	f001 827c 	beq.w	800440e <d_print_comp+0x187a>
 8002f16:	2bff      	cmp	r3, #255	; 0xff
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002f20:	d0e2      	beq.n	8002ee8 <d_print_comp+0x354>
 8002f22:	461a      	mov	r2, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	e7ed      	b.n	8002f04 <d_print_comp+0x370>
 8002f28:	4f41      	ldr	r7, [pc, #260]	; (8003030 <d_print_comp+0x49c>)
 8002f2a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f2e:	f107 0816 	add.w	r8, r7, #22
 8002f32:	f04f 0900 	mov.w	r9, #0
 8002f36:	e016      	b.n	8002f66 <d_print_comp+0x3d2>
 8002f38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f44:	4798      	blx	r3
 8002f46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f50:	2200      	movs	r2, #0
 8002f52:	2301      	movs	r3, #1
 8002f54:	45b8      	cmp	r8, r7
 8002f56:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f5a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f5e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f62:	f001 81f4 	beq.w	800434e <d_print_comp+0x17ba>
 8002f66:	2bff      	cmp	r3, #255	; 0xff
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002f70:	d0e2      	beq.n	8002f38 <d_print_comp+0x3a4>
 8002f72:	461a      	mov	r2, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	e7ed      	b.n	8002f54 <d_print_comp+0x3c0>
 8002f78:	4e2e      	ldr	r6, [pc, #184]	; (8003034 <d_print_comp+0x4a0>)
 8002f7a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f7e:	f106 070e 	add.w	r7, r6, #14
 8002f82:	f04f 0800 	mov.w	r8, #0
 8002f86:	e016      	b.n	8002fb6 <d_print_comp+0x422>
 8002f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f90:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002f94:	4798      	blx	r3
 8002f96:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	42b7      	cmp	r7, r6
 8002fa6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002faa:	f804 9002 	strb.w	r9, [r4, r2]
 8002fae:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8002fb2:	f001 81d5 	beq.w	8004360 <d_print_comp+0x17cc>
 8002fb6:	2bff      	cmp	r3, #255	; 0xff
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8002fc0:	d0e2      	beq.n	8002f88 <d_print_comp+0x3f4>
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	e7ed      	b.n	8002fa4 <d_print_comp+0x410>
 8002fc8:	4f1b      	ldr	r7, [pc, #108]	; (8003038 <d_print_comp+0x4a4>)
 8002fca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002fce:	f107 0808 	add.w	r8, r7, #8
 8002fd2:	f04f 0900 	mov.w	r9, #0
 8002fd6:	e016      	b.n	8003006 <d_print_comp+0x472>
 8002fd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fe0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fe4:	4798      	blx	r3
 8002fe6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002fea:	3301      	adds	r3, #1
 8002fec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	45b8      	cmp	r8, r7
 8002ff6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002ffa:	f804 a002 	strb.w	sl, [r4, r2]
 8002ffe:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003002:	f001 8114 	beq.w	800422e <d_print_comp+0x169a>
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	4619      	mov	r1, r3
 800300a:	4620      	mov	r0, r4
 800300c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003010:	d0e2      	beq.n	8002fd8 <d_print_comp+0x444>
 8003012:	461a      	mov	r2, r3
 8003014:	3301      	adds	r3, #1
 8003016:	e7ed      	b.n	8002ff4 <d_print_comp+0x460>
 8003018:	0801c1f4 	.word	0x0801c1f4
 800301c:	0801c3f4 	.word	0x0801c3f4
 8003020:	0801c4af 	.word	0x0801c4af
 8003024:	0801c3c8 	.word	0x0801c3c8
 8003028:	0801c393 	.word	0x0801c393
 800302c:	0801c234 	.word	0x0801c234
 8003030:	0801c397 	.word	0x0801c397
 8003034:	0801c49f 	.word	0x0801c49f
 8003038:	0801c48f 	.word	0x0801c48f
 800303c:	4fb9      	ldr	r7, [pc, #740]	; (8003324 <d_print_comp+0x790>)
 800303e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003042:	f107 081c 	add.w	r8, r7, #28
 8003046:	f04f 0900 	mov.w	r9, #0
 800304a:	e016      	b.n	800307a <d_print_comp+0x4e6>
 800304c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003050:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003054:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003058:	4798      	blx	r3
 800305a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800305e:	3301      	adds	r3, #1
 8003060:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003064:	2200      	movs	r2, #0
 8003066:	2301      	movs	r3, #1
 8003068:	45b8      	cmp	r8, r7
 800306a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800306e:	f804 a002 	strb.w	sl, [r4, r2]
 8003072:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003076:	f001 810f 	beq.w	8004298 <d_print_comp+0x1704>
 800307a:	2bff      	cmp	r3, #255	; 0xff
 800307c:	4619      	mov	r1, r3
 800307e:	4620      	mov	r0, r4
 8003080:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003084:	d0e2      	beq.n	800304c <d_print_comp+0x4b8>
 8003086:	461a      	mov	r2, r3
 8003088:	3301      	adds	r3, #1
 800308a:	e7ed      	b.n	8003068 <d_print_comp+0x4d4>
 800308c:	4fa6      	ldr	r7, [pc, #664]	; (8003328 <d_print_comp+0x794>)
 800308e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003092:	f107 081d 	add.w	r8, r7, #29
 8003096:	f04f 0900 	mov.w	r9, #0
 800309a:	e016      	b.n	80030ca <d_print_comp+0x536>
 800309c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030a4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030a8:	4798      	blx	r3
 80030aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030ae:	3301      	adds	r3, #1
 80030b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030b4:	2200      	movs	r2, #0
 80030b6:	2301      	movs	r3, #1
 80030b8:	4547      	cmp	r7, r8
 80030ba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030be:	f804 a002 	strb.w	sl, [r4, r2]
 80030c2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030c6:	f001 8083 	beq.w	80041d0 <d_print_comp+0x163c>
 80030ca:	2bff      	cmp	r3, #255	; 0xff
 80030cc:	4619      	mov	r1, r3
 80030ce:	4620      	mov	r0, r4
 80030d0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80030d4:	d0e2      	beq.n	800309c <d_print_comp+0x508>
 80030d6:	461a      	mov	r2, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	e7ed      	b.n	80030b8 <d_print_comp+0x524>
 80030dc:	4f93      	ldr	r7, [pc, #588]	; (800332c <d_print_comp+0x798>)
 80030de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030e2:	f107 080a 	add.w	r8, r7, #10
 80030e6:	f04f 0900 	mov.w	r9, #0
 80030ea:	e016      	b.n	800311a <d_print_comp+0x586>
 80030ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030f4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030f8:	4798      	blx	r3
 80030fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030fe:	3301      	adds	r3, #1
 8003100:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003104:	2200      	movs	r2, #0
 8003106:	2301      	movs	r3, #1
 8003108:	45b8      	cmp	r8, r7
 800310a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800310e:	f804 a002 	strb.w	sl, [r4, r2]
 8003112:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003116:	f001 8064 	beq.w	80041e2 <d_print_comp+0x164e>
 800311a:	2bff      	cmp	r3, #255	; 0xff
 800311c:	4619      	mov	r1, r3
 800311e:	4620      	mov	r0, r4
 8003120:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003124:	d0e2      	beq.n	80030ec <d_print_comp+0x558>
 8003126:	461a      	mov	r2, r3
 8003128:	3301      	adds	r3, #1
 800312a:	e7ed      	b.n	8003108 <d_print_comp+0x574>
 800312c:	a808      	add	r0, sp, #32
 800312e:	68aa      	ldr	r2, [r5, #8]
 8003130:	497f      	ldr	r1, [pc, #508]	; (8003330 <d_print_comp+0x79c>)
 8003132:	f010 fae7 	bl	8013704 <sprintf>
 8003136:	a808      	add	r0, sp, #32
 8003138:	f003 fe1c 	bl	8006d74 <strlen>
 800313c:	2800      	cmp	r0, #0
 800313e:	f001 81b7 	beq.w	80044b0 <d_print_comp+0x191c>
 8003142:	ae08      	add	r6, sp, #32
 8003144:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003148:	1837      	adds	r7, r6, r0
 800314a:	f04f 0800 	mov.w	r8, #0
 800314e:	e016      	b.n	800317e <d_print_comp+0x5ea>
 8003150:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003154:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003158:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800315c:	4798      	blx	r3
 800315e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003162:	3301      	adds	r3, #1
 8003164:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003168:	2200      	movs	r2, #0
 800316a:	2301      	movs	r3, #1
 800316c:	42be      	cmp	r6, r7
 800316e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003172:	f804 9002 	strb.w	r9, [r4, r2]
 8003176:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800317a:	f001 8199 	beq.w	80044b0 <d_print_comp+0x191c>
 800317e:	2bff      	cmp	r3, #255	; 0xff
 8003180:	4619      	mov	r1, r3
 8003182:	4620      	mov	r0, r4
 8003184:	f816 9b01 	ldrb.w	r9, [r6], #1
 8003188:	d0e2      	beq.n	8003150 <d_print_comp+0x5bc>
 800318a:	461a      	mov	r2, r3
 800318c:	3301      	adds	r3, #1
 800318e:	e7ed      	b.n	800316c <d_print_comp+0x5d8>
 8003190:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003194:	f895 8008 	ldrb.w	r8, [r5, #8]
 8003198:	2fff      	cmp	r7, #255	; 0xff
 800319a:	d111      	bne.n	80031c0 <d_print_comp+0x62c>
 800319c:	2600      	movs	r6, #0
 800319e:	4639      	mov	r1, r7
 80031a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031a4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80031a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031ac:	4620      	mov	r0, r4
 80031ae:	4798      	blx	r3
 80031b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80031b4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80031b8:	3301      	adds	r3, #1
 80031ba:	4637      	mov	r7, r6
 80031bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80031c0:	1c7b      	adds	r3, r7, #1
 80031c2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031c6:	f804 8007 	strb.w	r8, [r4, r7]
 80031ca:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80031ce:	686a      	ldr	r2, [r5, #4]
 80031d0:	9905      	ldr	r1, [sp, #20]
 80031d2:	e5d2      	b.n	8002d7a <d_print_comp+0x1e6>
 80031d4:	68aa      	ldr	r2, [r5, #8]
 80031d6:	4631      	mov	r1, r6
 80031d8:	4620      	mov	r0, r4
 80031da:	f7ff fcdb 	bl	8002b94 <d_print_comp>
 80031de:	4631      	mov	r1, r6
 80031e0:	68ea      	ldr	r2, [r5, #12]
 80031e2:	4620      	mov	r0, r4
 80031e4:	f7ff fcd6 	bl	8002b94 <d_print_comp>
 80031e8:	9905      	ldr	r1, [sp, #20]
 80031ea:	686a      	ldr	r2, [r5, #4]
 80031ec:	e5c5      	b.n	8002d7a <d_print_comp+0x1e6>
 80031ee:	4f51      	ldr	r7, [pc, #324]	; (8003334 <d_print_comp+0x7a0>)
 80031f0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80031f4:	f107 080e 	add.w	r8, r7, #14
 80031f8:	f04f 0900 	mov.w	r9, #0
 80031fc:	e016      	b.n	800322c <d_print_comp+0x698>
 80031fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003202:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003206:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800320a:	4798      	blx	r3
 800320c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003210:	3301      	adds	r3, #1
 8003212:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003216:	2200      	movs	r2, #0
 8003218:	2301      	movs	r3, #1
 800321a:	45b8      	cmp	r8, r7
 800321c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003220:	f804 a002 	strb.w	sl, [r4, r2]
 8003224:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003228:	f001 8146 	beq.w	80044b8 <d_print_comp+0x1924>
 800322c:	2bff      	cmp	r3, #255	; 0xff
 800322e:	4619      	mov	r1, r3
 8003230:	4620      	mov	r0, r4
 8003232:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003236:	d0e2      	beq.n	80031fe <d_print_comp+0x66a>
 8003238:	461a      	mov	r2, r3
 800323a:	3301      	adds	r3, #1
 800323c:	e7ed      	b.n	800321a <d_print_comp+0x686>
 800323e:	68ab      	ldr	r3, [r5, #8]
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	2a27      	cmp	r2, #39	; 0x27
 8003244:	f001 8572 	beq.w	8004d2c <d_print_comp+0x2198>
 8003248:	f04f 0800 	mov.w	r8, #0
 800324c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003250:	2fff      	cmp	r7, #255	; 0xff
 8003252:	d112      	bne.n	800327a <d_print_comp+0x6e6>
 8003254:	f04f 0900 	mov.w	r9, #0
 8003258:	4639      	mov	r1, r7
 800325a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800325e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003262:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003266:	4620      	mov	r0, r4
 8003268:	4798      	blx	r3
 800326a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800326e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8003272:	3301      	adds	r3, #1
 8003274:	464f      	mov	r7, r9
 8003276:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800327a:	2328      	movs	r3, #40	; 0x28
 800327c:	1c7a      	adds	r2, r7, #1
 800327e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003282:	55e3      	strb	r3, [r4, r7]
 8003284:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003288:	68aa      	ldr	r2, [r5, #8]
 800328a:	4631      	mov	r1, r6
 800328c:	4620      	mov	r0, r4
 800328e:	f7ff fc81 	bl	8002b94 <d_print_comp>
 8003292:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003296:	2bff      	cmp	r3, #255	; 0xff
 8003298:	f041 85b8 	bne.w	8004e0c <d_print_comp+0x2278>
 800329c:	2200      	movs	r2, #0
 800329e:	4619      	mov	r1, r3
 80032a0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80032a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032ac:	4620      	mov	r0, r4
 80032ae:	4798      	blx	r3
 80032b0:	2329      	movs	r3, #41	; 0x29
 80032b2:	7023      	strb	r3, [r4, #0]
 80032b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032b8:	782a      	ldrb	r2, [r5, #0]
 80032ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032be:	2101      	movs	r1, #1
 80032c0:	3301      	adds	r3, #1
 80032c2:	2a3d      	cmp	r2, #61	; 0x3d
 80032c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032cc:	f001 85bb 	beq.w	8004e46 <d_print_comp+0x22b2>
 80032d0:	f1b8 0f08 	cmp.w	r8, #8
 80032d4:	f001 8556 	beq.w	8004d84 <d_print_comp+0x21f0>
 80032d8:	4631      	mov	r1, r6
 80032da:	68ea      	ldr	r2, [r5, #12]
 80032dc:	4620      	mov	r0, r4
 80032de:	f7ff fc59 	bl	8002b94 <d_print_comp>
 80032e2:	9905      	ldr	r1, [sp, #20]
 80032e4:	686a      	ldr	r2, [r5, #4]
 80032e6:	e548      	b.n	8002d7a <d_print_comp+0x1e6>
 80032e8:	2301      	movs	r3, #1
 80032ea:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80032ee:	686a      	ldr	r2, [r5, #4]
 80032f0:	e543      	b.n	8002d7a <d_print_comp+0x1e6>
 80032f2:	68eb      	ldr	r3, [r5, #12]
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	2a3a      	cmp	r2, #58	; 0x3a
 80032f8:	f001 8405 	beq.w	8004b06 <d_print_comp+0x1f72>
 80032fc:	2301      	movs	r3, #1
 80032fe:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003302:	686a      	ldr	r2, [r5, #4]
 8003304:	e539      	b.n	8002d7a <d_print_comp+0x1e6>
 8003306:	2301      	movs	r3, #1
 8003308:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800330c:	686a      	ldr	r2, [r5, #4]
 800330e:	e534      	b.n	8002d7a <d_print_comp+0x1e6>
 8003310:	68eb      	ldr	r3, [r5, #12]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b38      	cmp	r3, #56	; 0x38
 8003316:	f43f acaf 	beq.w	8002c78 <d_print_comp+0xe4>
 800331a:	2301      	movs	r3, #1
 800331c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003320:	686a      	ldr	r2, [r5, #4]
 8003322:	e52a      	b.n	8002d7a <d_print_comp+0x1e6>
 8003324:	0801c46f 	.word	0x0801c46f
 8003328:	0801c44f 	.word	0x0801c44f
 800332c:	0801c430 	.word	0x0801c430
 8003330:	0801c1ec 	.word	0x0801c1ec
 8003334:	0801c41f 	.word	0x0801c41f
 8003338:	e9d5 9802 	ldrd	r9, r8, [r5, #8]
 800333c:	f899 3000 	ldrb.w	r3, [r9]
 8003340:	2b31      	cmp	r3, #49	; 0x31
 8003342:	f001 843a 	beq.w	8004bba <d_print_comp+0x2026>
 8003346:	2b33      	cmp	r3, #51	; 0x33
 8003348:	f042 8192 	bne.w	8005670 <d_print_comp+0x2adc>
 800334c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003350:	2fff      	cmp	r7, #255	; 0xff
 8003352:	d112      	bne.n	800337a <d_print_comp+0x7e6>
 8003354:	f04f 0a00 	mov.w	sl, #0
 8003358:	4639      	mov	r1, r7
 800335a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800335e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003362:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003366:	4620      	mov	r0, r4
 8003368:	4798      	blx	r3
 800336a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800336e:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003372:	3301      	adds	r3, #1
 8003374:	4657      	mov	r7, sl
 8003376:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800337a:	1c7a      	adds	r2, r7, #1
 800337c:	2328      	movs	r3, #40	; 0x28
 800337e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003382:	55e3      	strb	r3, [r4, r7]
 8003384:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003388:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800338c:	4631      	mov	r1, r6
 800338e:	4620      	mov	r0, r4
 8003390:	f7ff fc00 	bl	8002b94 <d_print_comp>
 8003394:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003398:	2fff      	cmp	r7, #255	; 0xff
 800339a:	d112      	bne.n	80033c2 <d_print_comp+0x82e>
 800339c:	f04f 0900 	mov.w	r9, #0
 80033a0:	4639      	mov	r1, r7
 80033a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033a6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80033aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033ae:	4620      	mov	r0, r4
 80033b0:	4798      	blx	r3
 80033b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033b6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80033ba:	3301      	adds	r3, #1
 80033bc:	464f      	mov	r7, r9
 80033be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033c2:	2329      	movs	r3, #41	; 0x29
 80033c4:	1c7a      	adds	r2, r7, #1
 80033c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033ca:	55e3      	strb	r3, [r4, r7]
 80033cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80033d0:	4642      	mov	r2, r8
 80033d2:	4631      	mov	r1, r6
 80033d4:	4620      	mov	r0, r4
 80033d6:	f003 f8e5 	bl	80065a4 <d_print_subexpr>
 80033da:	9905      	ldr	r1, [sp, #20]
 80033dc:	686a      	ldr	r2, [r5, #4]
 80033de:	e4cc      	b.n	8002d7a <d_print_comp+0x1e6>
 80033e0:	4631      	mov	r1, r6
 80033e2:	68aa      	ldr	r2, [r5, #8]
 80033e4:	4620      	mov	r0, r4
 80033e6:	f003 f89d 	bl	8006524 <d_print_expr_op>
 80033ea:	9905      	ldr	r1, [sp, #20]
 80033ec:	686a      	ldr	r2, [r5, #4]
 80033ee:	e4c4      	b.n	8002d7a <d_print_comp+0x1e6>
 80033f0:	4fd2      	ldr	r7, [pc, #840]	; (800373c <d_print_comp+0xba8>)
 80033f2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80033f6:	f107 0809 	add.w	r8, r7, #9
 80033fa:	f04f 0900 	mov.w	r9, #0
 80033fe:	e016      	b.n	800342e <d_print_comp+0x89a>
 8003400:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003404:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003408:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800340c:	4798      	blx	r3
 800340e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003412:	3301      	adds	r3, #1
 8003414:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003418:	2200      	movs	r2, #0
 800341a:	2301      	movs	r3, #1
 800341c:	45b8      	cmp	r8, r7
 800341e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003422:	f804 a002 	strb.w	sl, [r4, r2]
 8003426:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800342a:	f001 8057 	beq.w	80044dc <d_print_comp+0x1948>
 800342e:	2bff      	cmp	r3, #255	; 0xff
 8003430:	4619      	mov	r1, r3
 8003432:	4620      	mov	r0, r4
 8003434:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003438:	d0e2      	beq.n	8003400 <d_print_comp+0x86c>
 800343a:	461a      	mov	r2, r3
 800343c:	3301      	adds	r3, #1
 800343e:	e7ed      	b.n	800341c <d_print_comp+0x888>
 8003440:	4fbe      	ldr	r7, [pc, #760]	; (800373c <d_print_comp+0xba8>)
 8003442:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003446:	f107 0809 	add.w	r8, r7, #9
 800344a:	f04f 0900 	mov.w	r9, #0
 800344e:	e016      	b.n	800347e <d_print_comp+0x8ea>
 8003450:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003454:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003458:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800345c:	4798      	blx	r3
 800345e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003462:	3301      	adds	r3, #1
 8003464:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003468:	2200      	movs	r2, #0
 800346a:	2301      	movs	r3, #1
 800346c:	45b8      	cmp	r8, r7
 800346e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003472:	f804 a002 	strb.w	sl, [r4, r2]
 8003476:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800347a:	f001 8026 	beq.w	80044ca <d_print_comp+0x1936>
 800347e:	2bff      	cmp	r3, #255	; 0xff
 8003480:	4619      	mov	r1, r3
 8003482:	4620      	mov	r0, r4
 8003484:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003488:	d0e2      	beq.n	8003450 <d_print_comp+0x8bc>
 800348a:	461a      	mov	r2, r3
 800348c:	3301      	adds	r3, #1
 800348e:	e7ed      	b.n	800346c <d_print_comp+0x8d8>
 8003490:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8003494:	4eaa      	ldr	r6, [pc, #680]	; (8003740 <d_print_comp+0xbac>)
 8003496:	f8da 7008 	ldr.w	r7, [sl, #8]
 800349a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800349e:	f106 0808 	add.w	r8, r6, #8
 80034a2:	f04f 0900 	mov.w	r9, #0
 80034a6:	e016      	b.n	80034d6 <d_print_comp+0x942>
 80034a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034b0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034b4:	4798      	blx	r3
 80034b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034ba:	3301      	adds	r3, #1
 80034bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034c0:	2200      	movs	r2, #0
 80034c2:	2301      	movs	r3, #1
 80034c4:	4546      	cmp	r6, r8
 80034c6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034ca:	f804 b002 	strb.w	fp, [r4, r2]
 80034ce:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80034d2:	f001 8021 	beq.w	8004518 <d_print_comp+0x1984>
 80034d6:	2bff      	cmp	r3, #255	; 0xff
 80034d8:	4619      	mov	r1, r3
 80034da:	4620      	mov	r0, r4
 80034dc:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 80034e0:	d0e2      	beq.n	80034a8 <d_print_comp+0x914>
 80034e2:	461a      	mov	r2, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	e7ed      	b.n	80034c4 <d_print_comp+0x930>
 80034e8:	e9d5 2802 	ldrd	r2, r8, [r5, #8]
 80034ec:	b11a      	cbz	r2, 80034f6 <d_print_comp+0x962>
 80034ee:	4631      	mov	r1, r6
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff fb4f 	bl	8002b94 <d_print_comp>
 80034f6:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80034fa:	2fff      	cmp	r7, #255	; 0xff
 80034fc:	d112      	bne.n	8003524 <d_print_comp+0x990>
 80034fe:	f04f 0900 	mov.w	r9, #0
 8003502:	4639      	mov	r1, r7
 8003504:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003508:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800350c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003510:	4620      	mov	r0, r4
 8003512:	4798      	blx	r3
 8003514:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003518:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800351c:	3301      	adds	r3, #1
 800351e:	464f      	mov	r7, r9
 8003520:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003524:	1c78      	adds	r0, r7, #1
 8003526:	237b      	movs	r3, #123	; 0x7b
 8003528:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800352c:	4642      	mov	r2, r8
 800352e:	55e3      	strb	r3, [r4, r7]
 8003530:	4631      	mov	r1, r6
 8003532:	4620      	mov	r0, r4
 8003534:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003538:	f7ff fb2c 	bl	8002b94 <d_print_comp>
 800353c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003540:	2fff      	cmp	r7, #255	; 0xff
 8003542:	d111      	bne.n	8003568 <d_print_comp+0x9d4>
 8003544:	2600      	movs	r6, #0
 8003546:	4639      	mov	r1, r7
 8003548:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800354c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003550:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003554:	4620      	mov	r0, r4
 8003556:	4798      	blx	r3
 8003558:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800355c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003560:	3301      	adds	r3, #1
 8003562:	4637      	mov	r7, r6
 8003564:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003568:	1c7a      	adds	r2, r7, #1
 800356a:	237d      	movs	r3, #125	; 0x7d
 800356c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003570:	55e3      	strb	r3, [r4, r7]
 8003572:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003576:	686a      	ldr	r2, [r5, #4]
 8003578:	9905      	ldr	r1, [sp, #20]
 800357a:	f7ff bbfe 	b.w	8002d7a <d_print_comp+0x1e6>
 800357e:	68aa      	ldr	r2, [r5, #8]
 8003580:	b11a      	cbz	r2, 800358a <d_print_comp+0x9f6>
 8003582:	4631      	mov	r1, r6
 8003584:	4620      	mov	r0, r4
 8003586:	f7ff fb05 	bl	8002b94 <d_print_comp>
 800358a:	68eb      	ldr	r3, [r5, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f001 853d 	beq.w	800500c <d_print_comp+0x2478>
 8003592:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003596:	2ffd      	cmp	r7, #253	; 0xfd
 8003598:	d912      	bls.n	80035c0 <d_print_comp+0xa2c>
 800359a:	f04f 0800 	mov.w	r8, #0
 800359e:	f804 8007 	strb.w	r8, [r4, r7]
 80035a2:	4639      	mov	r1, r7
 80035a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035ac:	4620      	mov	r0, r4
 80035ae:	4798      	blx	r3
 80035b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035b4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80035b8:	3301      	adds	r3, #1
 80035ba:	4647      	mov	r7, r8
 80035bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035c0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800374c <d_print_comp+0xbb8>
 80035c4:	f04f 0a00 	mov.w	sl, #0
 80035c8:	f108 0b02 	add.w	fp, r8, #2
 80035cc:	e016      	b.n	80035fc <d_print_comp+0xa68>
 80035ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035d2:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 80035d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035da:	4798      	blx	r3
 80035dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035e0:	3301      	adds	r3, #1
 80035e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035e6:	2701      	movs	r7, #1
 80035e8:	2300      	movs	r3, #0
 80035ea:	45c3      	cmp	fp, r8
 80035ec:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 80035f0:	f804 9003 	strb.w	r9, [r4, r3]
 80035f4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80035f8:	f001 80cf 	beq.w	800479a <d_print_comp+0x1c06>
 80035fc:	2fff      	cmp	r7, #255	; 0xff
 80035fe:	4639      	mov	r1, r7
 8003600:	4620      	mov	r0, r4
 8003602:	f818 9b01 	ldrb.w	r9, [r8], #1
 8003606:	d0e2      	beq.n	80035ce <d_print_comp+0xa3a>
 8003608:	463b      	mov	r3, r7
 800360a:	3701      	adds	r7, #1
 800360c:	e7ed      	b.n	80035ea <d_print_comp+0xa56>
 800360e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f041 84a0 	bne.w	8004f58 <d_print_comp+0x23c4>
 8003618:	68aa      	ldr	r2, [r5, #8]
 800361a:	4b4a      	ldr	r3, [pc, #296]	; (8003744 <d_print_comp+0xbb0>)
 800361c:	6891      	ldr	r1, [r2, #8]
 800361e:	4299      	cmp	r1, r3
 8003620:	d020      	beq.n	8003664 <d_print_comp+0xad0>
 8003622:	4631      	mov	r1, r6
 8003624:	4620      	mov	r0, r4
 8003626:	f7ff fab5 	bl	8002b94 <d_print_comp>
 800362a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800362e:	2fff      	cmp	r7, #255	; 0xff
 8003630:	d111      	bne.n	8003656 <d_print_comp+0xac2>
 8003632:	2600      	movs	r6, #0
 8003634:	4639      	mov	r1, r7
 8003636:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800363a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800363e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003642:	4620      	mov	r0, r4
 8003644:	4798      	blx	r3
 8003646:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800364a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800364e:	3301      	adds	r3, #1
 8003650:	4637      	mov	r7, r6
 8003652:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003656:	2320      	movs	r3, #32
 8003658:	1c7a      	adds	r2, r7, #1
 800365a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800365e:	55e3      	strb	r3, [r4, r7]
 8003660:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003664:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8003668:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800366c:	2a00      	cmp	r2, #0
 800366e:	f001 80a6 	beq.w	80047be <d_print_comp+0x1c2a>
 8003672:	4e35      	ldr	r6, [pc, #212]	; (8003748 <d_print_comp+0xbb4>)
 8003674:	f04f 0800 	mov.w	r8, #0
 8003678:	f106 0906 	add.w	r9, r6, #6
 800367c:	e015      	b.n	80036aa <d_print_comp+0xb16>
 800367e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003682:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003686:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800368a:	4798      	blx	r3
 800368c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003690:	3301      	adds	r3, #1
 8003692:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003696:	2200      	movs	r2, #0
 8003698:	2301      	movs	r3, #1
 800369a:	45b1      	cmp	r9, r6
 800369c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80036a0:	54a7      	strb	r7, [r4, r2]
 80036a2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80036a6:	f001 8183 	beq.w	80049b0 <d_print_comp+0x1e1c>
 80036aa:	2bff      	cmp	r3, #255	; 0xff
 80036ac:	4619      	mov	r1, r3
 80036ae:	4620      	mov	r0, r4
 80036b0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80036b4:	d0e3      	beq.n	800367e <d_print_comp+0xaea>
 80036b6:	461a      	mov	r2, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	e7ee      	b.n	800369a <d_print_comp+0xb06>
 80036bc:	ab18      	add	r3, sp, #96	; 0x60
 80036be:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80036c2:	f843 2d40 	str.w	r2, [r3, #-64]!
 80036c6:	2000      	movs	r0, #0
 80036c8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80036cc:	900a      	str	r0, [sp, #40]	; 0x28
 80036ce:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80036d2:	68ea      	ldr	r2, [r5, #12]
 80036d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80036d6:	4631      	mov	r1, r6
 80036d8:	4620      	mov	r0, r4
 80036da:	9509      	str	r5, [sp, #36]	; 0x24
 80036dc:	f7ff fa5a 	bl	8002b94 <d_print_comp>
 80036e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036e2:	b923      	cbnz	r3, 80036ee <d_print_comp+0xb5a>
 80036e4:	4631      	mov	r1, r6
 80036e6:	462a      	mov	r2, r5
 80036e8:	4620      	mov	r0, r4
 80036ea:	f002 f8e9 	bl	80058c0 <d_print_mod>
 80036ee:	9b08      	ldr	r3, [sp, #32]
 80036f0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80036f4:	9905      	ldr	r1, [sp, #20]
 80036f6:	686a      	ldr	r2, [r5, #4]
 80036f8:	f7ff bb3f 	b.w	8002d7a <d_print_comp+0x1e6>
 80036fc:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8003700:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003704:	f849 cd40 	str.w	ip, [r9, #-64]!
 8003708:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800370c:	f8cd c004 	str.w	ip, [sp, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	4667      	mov	r7, ip
 8003714:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003718:	9509      	str	r5, [sp, #36]	; 0x24
 800371a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800371e:	2f00      	cmp	r7, #0
 8003720:	f001 852f 	beq.w	8005182 <d_print_comp+0x25ee>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	3b19      	subs	r3, #25
 800372a:	2b02      	cmp	r3, #2
 800372c:	f201 8529 	bhi.w	8005182 <d_print_comp+0x25ee>
 8003730:	4623      	mov	r3, r4
 8003732:	f04f 0801 	mov.w	r8, #1
 8003736:	464c      	mov	r4, r9
 8003738:	469c      	mov	ip, r3
 800373a:	e00e      	b.n	800375a <d_print_comp+0xbc6>
 800373c:	0801c3d7 	.word	0x0801c3d7
 8003740:	0801c3cb 	.word	0x0801c3cb
 8003744:	0801a414 	.word	0x0801a414
 8003748:	0801c3b8 	.word	0x0801c3b8
 800374c:	0801c3c8 	.word	0x0801c3c8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	3b19      	subs	r3, #25
 8003756:	2b02      	cmp	r3, #2
 8003758:	d81d      	bhi.n	8003796 <d_print_comp+0xc02>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 8003760:	aa18      	add	r2, sp, #96	; 0x60
 8003762:	eb02 0b0e 	add.w	fp, r2, lr
 8003766:	b99b      	cbnz	r3, 8003790 <d_print_comp+0xbfc>
 8003768:	f1b8 0f03 	cmp.w	r8, #3
 800376c:	f201 8517 	bhi.w	800519e <d_print_comp+0x260a>
 8003770:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003774:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 8003778:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 800377c:	f84b 4c40 	str.w	r4, [fp, #-64]
 8003780:	2301      	movs	r3, #1
 8003782:	eb09 040e 	add.w	r4, r9, lr
 8003786:	f8cc 4114 	str.w	r4, [ip, #276]	; 0x114
 800378a:	f108 0801 	add.w	r8, r8, #1
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	683f      	ldr	r7, [r7, #0]
 8003792:	2f00      	cmp	r7, #0
 8003794:	d1dc      	bne.n	8003750 <d_print_comp+0xbbc>
 8003796:	68ea      	ldr	r2, [r5, #12]
 8003798:	4631      	mov	r1, r6
 800379a:	4660      	mov	r0, ip
 800379c:	4664      	mov	r4, ip
 800379e:	f7ff f9f9 	bl	8002b94 <d_print_comp>
 80037a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037a4:	9a01      	ldr	r2, [sp, #4]
 80037a6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80037aa:	b9bb      	cbnz	r3, 80037dc <d_print_comp+0xc48>
 80037ac:	f1b8 0f01 	cmp.w	r8, #1
 80037b0:	d00c      	beq.n	80037cc <d_print_comp+0xc38>
 80037b2:	eb09 1808 	add.w	r8, r9, r8, lsl #4
 80037b6:	af0c      	add	r7, sp, #48	; 0x30
 80037b8:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80037bc:	4631      	mov	r1, r6
 80037be:	f1a8 0810 	sub.w	r8, r8, #16
 80037c2:	4620      	mov	r0, r4
 80037c4:	f002 f87c 	bl	80058c0 <d_print_mod>
 80037c8:	4547      	cmp	r7, r8
 80037ca:	d1f5      	bne.n	80037b8 <d_print_comp+0xc24>
 80037cc:	4631      	mov	r1, r6
 80037ce:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037d2:	f105 0208 	add.w	r2, r5, #8
 80037d6:	4620      	mov	r0, r4
 80037d8:	f002 fdca 	bl	8006370 <d_print_array_type.isra.14>
 80037dc:	9905      	ldr	r1, [sp, #20]
 80037de:	686a      	ldr	r2, [r5, #4]
 80037e0:	f7ff bacb 	b.w	8002d7a <d_print_comp+0x1e6>
 80037e4:	06b2      	lsls	r2, r6, #26
 80037e6:	f026 0860 	bic.w	r8, r6, #96	; 0x60
 80037ea:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037ee:	f101 825a 	bmi.w	8004ca6 <d_print_comp+0x2112>
 80037f2:	68aa      	ldr	r2, [r5, #8]
 80037f4:	b11a      	cbz	r2, 80037fe <d_print_comp+0xc6a>
 80037f6:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80037fa:	f001 85c3 	beq.w	8005384 <d_print_comp+0x27f0>
 80037fe:	4641      	mov	r1, r8
 8003800:	f105 020c 	add.w	r2, r5, #12
 8003804:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003808:	4620      	mov	r0, r4
 800380a:	f002 fb87 	bl	8005f1c <d_print_function_type.isra.15>
 800380e:	9905      	ldr	r1, [sp, #20]
 8003810:	686a      	ldr	r2, [r5, #4]
 8003812:	f7ff bab2 	b.w	8002d7a <d_print_comp+0x1e6>
 8003816:	4fcb      	ldr	r7, [pc, #812]	; (8003b44 <d_print_comp+0xfb0>)
 8003818:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800381c:	f107 0815 	add.w	r8, r7, #21
 8003820:	f04f 0900 	mov.w	r9, #0
 8003824:	e016      	b.n	8003854 <d_print_comp+0xcc0>
 8003826:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800382a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800382e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003832:	4798      	blx	r3
 8003834:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003838:	3301      	adds	r3, #1
 800383a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800383e:	2200      	movs	r2, #0
 8003840:	2301      	movs	r3, #1
 8003842:	45b8      	cmp	r8, r7
 8003844:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003848:	f804 a002 	strb.w	sl, [r4, r2]
 800384c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003850:	f000 8789 	beq.w	8004766 <d_print_comp+0x1bd2>
 8003854:	2bff      	cmp	r3, #255	; 0xff
 8003856:	4619      	mov	r1, r3
 8003858:	4620      	mov	r0, r4
 800385a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800385e:	d0e2      	beq.n	8003826 <d_print_comp+0xc92>
 8003860:	461a      	mov	r2, r3
 8003862:	3301      	adds	r3, #1
 8003864:	e7ed      	b.n	8003842 <d_print_comp+0xcae>
 8003866:	4fb8      	ldr	r7, [pc, #736]	; (8003b48 <d_print_comp+0xfb4>)
 8003868:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800386c:	f107 0810 	add.w	r8, r7, #16
 8003870:	f04f 0900 	mov.w	r9, #0
 8003874:	e016      	b.n	80038a4 <d_print_comp+0xd10>
 8003876:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800387a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800387e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003882:	4798      	blx	r3
 8003884:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003888:	3301      	adds	r3, #1
 800388a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800388e:	2200      	movs	r2, #0
 8003890:	2301      	movs	r3, #1
 8003892:	45b8      	cmp	r8, r7
 8003894:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003898:	f804 a002 	strb.w	sl, [r4, r2]
 800389c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80038a0:	f000 876a 	beq.w	8004778 <d_print_comp+0x1be4>
 80038a4:	2bff      	cmp	r3, #255	; 0xff
 80038a6:	4619      	mov	r1, r3
 80038a8:	4620      	mov	r0, r4
 80038aa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80038ae:	d0e2      	beq.n	8003876 <d_print_comp+0xce2>
 80038b0:	461a      	mov	r2, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	e7ed      	b.n	8003892 <d_print_comp+0xcfe>
 80038b6:	4fa5      	ldr	r7, [pc, #660]	; (8003b4c <d_print_comp+0xfb8>)
 80038b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038bc:	f107 0812 	add.w	r8, r7, #18
 80038c0:	f04f 0900 	mov.w	r9, #0
 80038c4:	e016      	b.n	80038f4 <d_print_comp+0xd60>
 80038c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038ce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80038d2:	4798      	blx	r3
 80038d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80038d8:	3301      	adds	r3, #1
 80038da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80038de:	2200      	movs	r2, #0
 80038e0:	2301      	movs	r3, #1
 80038e2:	45b8      	cmp	r8, r7
 80038e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038e8:	f804 a002 	strb.w	sl, [r4, r2]
 80038ec:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80038f0:	f000 8727 	beq.w	8004742 <d_print_comp+0x1bae>
 80038f4:	2bff      	cmp	r3, #255	; 0xff
 80038f6:	4619      	mov	r1, r3
 80038f8:	4620      	mov	r0, r4
 80038fa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80038fe:	d0e2      	beq.n	80038c6 <d_print_comp+0xd32>
 8003900:	461a      	mov	r2, r3
 8003902:	3301      	adds	r3, #1
 8003904:	e7ed      	b.n	80038e2 <d_print_comp+0xd4e>
 8003906:	4f92      	ldr	r7, [pc, #584]	; (8003b50 <d_print_comp+0xfbc>)
 8003908:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800390c:	f107 080d 	add.w	r8, r7, #13
 8003910:	f04f 0900 	mov.w	r9, #0
 8003914:	e016      	b.n	8003944 <d_print_comp+0xdb0>
 8003916:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800391a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800391e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003922:	4798      	blx	r3
 8003924:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003928:	3301      	adds	r3, #1
 800392a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800392e:	2200      	movs	r2, #0
 8003930:	2301      	movs	r3, #1
 8003932:	45b8      	cmp	r8, r7
 8003934:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003938:	f804 a002 	strb.w	sl, [r4, r2]
 800393c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003940:	f000 8708 	beq.w	8004754 <d_print_comp+0x1bc0>
 8003944:	2bff      	cmp	r3, #255	; 0xff
 8003946:	4619      	mov	r1, r3
 8003948:	4620      	mov	r0, r4
 800394a:	f817 ab01 	ldrb.w	sl, [r7], #1
 800394e:	d0e2      	beq.n	8003916 <d_print_comp+0xd82>
 8003950:	461a      	mov	r2, r3
 8003952:	3301      	adds	r3, #1
 8003954:	e7ed      	b.n	8003932 <d_print_comp+0xd9e>
 8003956:	4f7f      	ldr	r7, [pc, #508]	; (8003b54 <d_print_comp+0xfc0>)
 8003958:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800395c:	f107 0818 	add.w	r8, r7, #24
 8003960:	f04f 0900 	mov.w	r9, #0
 8003964:	e016      	b.n	8003994 <d_print_comp+0xe00>
 8003966:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800396a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800396e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003972:	4798      	blx	r3
 8003974:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003978:	3301      	adds	r3, #1
 800397a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800397e:	2200      	movs	r2, #0
 8003980:	2301      	movs	r3, #1
 8003982:	45b8      	cmp	r8, r7
 8003984:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003988:	f804 a002 	strb.w	sl, [r4, r2]
 800398c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003990:	f000 8699 	beq.w	80046c6 <d_print_comp+0x1b32>
 8003994:	2bff      	cmp	r3, #255	; 0xff
 8003996:	4619      	mov	r1, r3
 8003998:	4620      	mov	r0, r4
 800399a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800399e:	d0e2      	beq.n	8003966 <d_print_comp+0xdd2>
 80039a0:	461a      	mov	r2, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	e7ed      	b.n	8003982 <d_print_comp+0xdee>
 80039a6:	4f6c      	ldr	r7, [pc, #432]	; (8003b58 <d_print_comp+0xfc4>)
 80039a8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80039ac:	f107 0808 	add.w	r8, r7, #8
 80039b0:	f04f 0900 	mov.w	r9, #0
 80039b4:	e016      	b.n	80039e4 <d_print_comp+0xe50>
 80039b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039c2:	4798      	blx	r3
 80039c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039c8:	3301      	adds	r3, #1
 80039ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039ce:	2200      	movs	r2, #0
 80039d0:	2301      	movs	r3, #1
 80039d2:	45b8      	cmp	r8, r7
 80039d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80039d8:	f804 a002 	strb.w	sl, [r4, r2]
 80039dc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039e0:	f000 86a6 	beq.w	8004730 <d_print_comp+0x1b9c>
 80039e4:	2bff      	cmp	r3, #255	; 0xff
 80039e6:	4619      	mov	r1, r3
 80039e8:	4620      	mov	r0, r4
 80039ea:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039ee:	d0e2      	beq.n	80039b6 <d_print_comp+0xe22>
 80039f0:	461a      	mov	r2, r3
 80039f2:	3301      	adds	r3, #1
 80039f4:	e7ed      	b.n	80039d2 <d_print_comp+0xe3e>
 80039f6:	4f59      	ldr	r7, [pc, #356]	; (8003b5c <d_print_comp+0xfc8>)
 80039f8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80039fc:	f107 080b 	add.w	r8, r7, #11
 8003a00:	f04f 0900 	mov.w	r9, #0
 8003a04:	e016      	b.n	8003a34 <d_print_comp+0xea0>
 8003a06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a0e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a12:	4798      	blx	r3
 8003a14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2301      	movs	r3, #1
 8003a22:	45b8      	cmp	r8, r7
 8003a24:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a28:	f804 a002 	strb.w	sl, [r4, r2]
 8003a2c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a30:	f000 85cc 	beq.w	80045cc <d_print_comp+0x1a38>
 8003a34:	2bff      	cmp	r3, #255	; 0xff
 8003a36:	4619      	mov	r1, r3
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003a3e:	d0e2      	beq.n	8003a06 <d_print_comp+0xe72>
 8003a40:	461a      	mov	r2, r3
 8003a42:	3301      	adds	r3, #1
 8003a44:	e7ed      	b.n	8003a22 <d_print_comp+0xe8e>
 8003a46:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003a4a:	2fff      	cmp	r7, #255	; 0xff
 8003a4c:	d112      	bne.n	8003a74 <d_print_comp+0xee0>
 8003a4e:	f04f 0800 	mov.w	r8, #0
 8003a52:	4639      	mov	r1, r7
 8003a54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a58:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a60:	4620      	mov	r0, r4
 8003a62:	4798      	blx	r3
 8003a64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a68:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4647      	mov	r7, r8
 8003a70:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a74:	237e      	movs	r3, #126	; 0x7e
 8003a76:	1c7a      	adds	r2, r7, #1
 8003a78:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003a7c:	55e3      	strb	r3, [r4, r7]
 8003a7e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003a82:	4631      	mov	r1, r6
 8003a84:	68ea      	ldr	r2, [r5, #12]
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff f884 	bl	8002b94 <d_print_comp>
 8003a8c:	9905      	ldr	r1, [sp, #20]
 8003a8e:	686a      	ldr	r2, [r5, #4]
 8003a90:	f7ff b973 	b.w	8002d7a <d_print_comp+0x1e6>
 8003a94:	4631      	mov	r1, r6
 8003a96:	68ea      	ldr	r2, [r5, #12]
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f7ff f87b 	bl	8002b94 <d_print_comp>
 8003a9e:	9905      	ldr	r1, [sp, #20]
 8003aa0:	686a      	ldr	r2, [r5, #4]
 8003aa2:	f7ff b96a 	b.w	8002d7a <d_print_comp+0x1e6>
 8003aa6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003aaa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003aae:	f1b8 0f00 	cmp.w	r8, #0
 8003ab2:	f000 878b 	beq.w	80049cc <d_print_comp+0x1e38>
 8003ab6:	4e2a      	ldr	r6, [pc, #168]	; (8003b60 <d_print_comp+0xfcc>)
 8003ab8:	f04f 0900 	mov.w	r9, #0
 8003abc:	f106 0a06 	add.w	sl, r6, #6
 8003ac0:	e015      	b.n	8003aee <d_print_comp+0xf5a>
 8003ac2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ac6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003aca:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ace:	4798      	blx	r3
 8003ad0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003ada:	2200      	movs	r2, #0
 8003adc:	2301      	movs	r3, #1
 8003ade:	45b2      	cmp	sl, r6
 8003ae0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ae4:	54a7      	strb	r7, [r4, r2]
 8003ae6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003aea:	f000 868f 	beq.w	800480c <d_print_comp+0x1c78>
 8003aee:	2bff      	cmp	r3, #255	; 0xff
 8003af0:	4619      	mov	r1, r3
 8003af2:	4620      	mov	r0, r4
 8003af4:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003af8:	d0e3      	beq.n	8003ac2 <d_print_comp+0xf2e>
 8003afa:	461a      	mov	r2, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	e7ee      	b.n	8003ade <d_print_comp+0xf4a>
 8003b00:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 86d1 	bne.w	80048ac <d_print_comp+0x1d18>
 8003b0a:	f105 0108 	add.w	r1, r5, #8
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f7fc fe4a 	bl	80007a8 <d_lookup_template_argument.isra.10>
 8003b14:	4602      	mov	r2, r0
 8003b16:	2800      	cmp	r0, #0
 8003b18:	f001 8271 	beq.w	8004ffe <d_print_comp+0x246a>
 8003b1c:	7803      	ldrb	r3, [r0, #0]
 8003b1e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b20:	f001 8262 	beq.w	8004fe8 <d_print_comp+0x2454>
 8003b24:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003b2e:	4631      	mov	r1, r6
 8003b30:	4620      	mov	r0, r4
 8003b32:	f7ff f82f 	bl	8002b94 <d_print_comp>
 8003b36:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8003b3a:	9905      	ldr	r1, [sp, #20]
 8003b3c:	686a      	ldr	r2, [r5, #4]
 8003b3e:	f7ff b91c 	b.w	8002d7a <d_print_comp+0x1e6>
 8003b42:	bf00      	nop
 8003b44:	0801c2db 	.word	0x0801c2db
 8003b48:	0801c2c7 	.word	0x0801c2c7
 8003b4c:	0801c2b3 	.word	0x0801c2b3
 8003b50:	0801c2a4 	.word	0x0801c2a4
 8003b54:	0801c27f 	.word	0x0801c27f
 8003b58:	0801c273 	.word	0x0801c273
 8003b5c:	0801c268 	.word	0x0801c268
 8003b60:	0801c448 	.word	0x0801c448
 8003b64:	2300      	movs	r3, #0
 8003b66:	0771      	lsls	r1, r6, #29
 8003b68:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
 8003b6c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8003b70:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003b74:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003b78:	68af      	ldr	r7, [r5, #8]
 8003b7a:	d505      	bpl.n	8003b88 <d_print_comp+0xff4>
 8003b7c:	783b      	ldrb	r3, [r7, #0]
 8003b7e:	b91b      	cbnz	r3, 8003b88 <d_print_comp+0xff4>
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	2a06      	cmp	r2, #6
 8003b84:	f001 8433 	beq.w	80053ee <d_print_comp+0x285a>
 8003b88:	463a      	mov	r2, r7
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7ff f801 	bl	8002b94 <d_print_comp>
 8003b92:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003b96:	2b3c      	cmp	r3, #60	; 0x3c
 8003b98:	f001 8206 	beq.w	8004fa8 <d_print_comp+0x2414>
 8003b9c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003ba0:	2fff      	cmp	r7, #255	; 0xff
 8003ba2:	d112      	bne.n	8003bca <d_print_comp+0x1036>
 8003ba4:	f04f 0a00 	mov.w	sl, #0
 8003ba8:	4639      	mov	r1, r7
 8003baa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bae:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003bb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	4798      	blx	r3
 8003bba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bbe:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	4657      	mov	r7, sl
 8003bc6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003bca:	233c      	movs	r3, #60	; 0x3c
 8003bcc:	1c7a      	adds	r2, r7, #1
 8003bce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003bd2:	55e3      	strb	r3, [r4, r7]
 8003bd4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003bd8:	4631      	mov	r1, r6
 8003bda:	68ea      	ldr	r2, [r5, #12]
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7fe ffd9 	bl	8002b94 <d_print_comp>
 8003be2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003be6:	2b3e      	cmp	r3, #62	; 0x3e
 8003be8:	f001 806f 	beq.w	8004cca <d_print_comp+0x2136>
 8003bec:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003bf0:	2fff      	cmp	r7, #255	; 0xff
 8003bf2:	d111      	bne.n	8003c18 <d_print_comp+0x1084>
 8003bf4:	2600      	movs	r6, #0
 8003bf6:	4639      	mov	r1, r7
 8003bf8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bfc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003c00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c04:	4620      	mov	r0, r4
 8003c06:	4798      	blx	r3
 8003c08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c0c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003c10:	3301      	adds	r3, #1
 8003c12:	4637      	mov	r7, r6
 8003c14:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c18:	233e      	movs	r3, #62	; 0x3e
 8003c1a:	1c7a      	adds	r2, r7, #1
 8003c1c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c20:	55e3      	strb	r3, [r4, r7]
 8003c22:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c26:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003c2a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
 8003c2e:	9905      	ldr	r1, [sp, #20]
 8003c30:	686a      	ldr	r2, [r5, #4]
 8003c32:	f7ff b8a2 	b.w	8002d7a <d_print_comp+0x1e6>
 8003c36:	4fda      	ldr	r7, [pc, #872]	; (8003fa0 <d_print_comp+0x140c>)
 8003c38:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c3c:	f107 0811 	add.w	r8, r7, #17
 8003c40:	f04f 0900 	mov.w	r9, #0
 8003c44:	e016      	b.n	8003c74 <d_print_comp+0x10e0>
 8003c46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c4e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c52:	4798      	blx	r3
 8003c54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2301      	movs	r3, #1
 8003c62:	45b8      	cmp	r8, r7
 8003c64:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003c68:	f804 a002 	strb.w	sl, [r4, r2]
 8003c6c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003c70:	f000 84eb 	beq.w	800464a <d_print_comp+0x1ab6>
 8003c74:	2bff      	cmp	r3, #255	; 0xff
 8003c76:	4619      	mov	r1, r3
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003c7e:	d0e2      	beq.n	8003c46 <d_print_comp+0x10b2>
 8003c80:	461a      	mov	r2, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	e7ed      	b.n	8003c62 <d_print_comp+0x10ce>
 8003c86:	4fc7      	ldr	r7, [pc, #796]	; (8003fa4 <d_print_comp+0x1410>)
 8003c88:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c8c:	f107 0815 	add.w	r8, r7, #21
 8003c90:	f04f 0900 	mov.w	r9, #0
 8003c94:	e016      	b.n	8003cc4 <d_print_comp+0x1130>
 8003c96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c9e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ca2:	4798      	blx	r3
 8003ca4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	45b8      	cmp	r8, r7
 8003cb4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003cb8:	f804 a002 	strb.w	sl, [r4, r2]
 8003cbc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003cc0:	f000 84cc 	beq.w	800465c <d_print_comp+0x1ac8>
 8003cc4:	2bff      	cmp	r3, #255	; 0xff
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cce:	d0e2      	beq.n	8003c96 <d_print_comp+0x1102>
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	e7ed      	b.n	8003cb2 <d_print_comp+0x111e>
 8003cd6:	4fb4      	ldr	r7, [pc, #720]	; (8003fa8 <d_print_comp+0x1414>)
 8003cd8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003cdc:	f107 0819 	add.w	r8, r7, #25
 8003ce0:	f04f 0900 	mov.w	r9, #0
 8003ce4:	e016      	b.n	8003d14 <d_print_comp+0x1180>
 8003ce6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cf2:	4798      	blx	r3
 8003cf4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2301      	movs	r3, #1
 8003d02:	45b8      	cmp	r8, r7
 8003d04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d08:	f804 a002 	strb.w	sl, [r4, r2]
 8003d0c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d10:	f000 8489 	beq.w	8004626 <d_print_comp+0x1a92>
 8003d14:	2bff      	cmp	r3, #255	; 0xff
 8003d16:	4619      	mov	r1, r3
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d1e:	d0e2      	beq.n	8003ce6 <d_print_comp+0x1152>
 8003d20:	461a      	mov	r2, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	e7ed      	b.n	8003d02 <d_print_comp+0x116e>
 8003d26:	4fa1      	ldr	r7, [pc, #644]	; (8003fac <d_print_comp+0x1418>)
 8003d28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d2c:	f107 0816 	add.w	r8, r7, #22
 8003d30:	f04f 0900 	mov.w	r9, #0
 8003d34:	e016      	b.n	8003d64 <d_print_comp+0x11d0>
 8003d36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d42:	4798      	blx	r3
 8003d44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2301      	movs	r3, #1
 8003d52:	45b8      	cmp	r8, r7
 8003d54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d58:	f804 a002 	strb.w	sl, [r4, r2]
 8003d5c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d60:	f000 846a 	beq.w	8004638 <d_print_comp+0x1aa4>
 8003d64:	2bff      	cmp	r3, #255	; 0xff
 8003d66:	4619      	mov	r1, r3
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d6e:	d0e2      	beq.n	8003d36 <d_print_comp+0x11a2>
 8003d70:	461a      	mov	r2, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	e7ed      	b.n	8003d52 <d_print_comp+0x11be>
 8003d76:	4f8e      	ldr	r7, [pc, #568]	; (8003fb0 <d_print_comp+0x141c>)
 8003d78:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d7c:	f107 0813 	add.w	r8, r7, #19
 8003d80:	f04f 0900 	mov.w	r9, #0
 8003d84:	e016      	b.n	8003db4 <d_print_comp+0x1220>
 8003d86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d8e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d92:	4798      	blx	r3
 8003d94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2301      	movs	r3, #1
 8003da2:	45b8      	cmp	r8, r7
 8003da4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003da8:	f804 a002 	strb.w	sl, [r4, r2]
 8003dac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003db0:	f000 8427 	beq.w	8004602 <d_print_comp+0x1a6e>
 8003db4:	2bff      	cmp	r3, #255	; 0xff
 8003db6:	4619      	mov	r1, r3
 8003db8:	4620      	mov	r0, r4
 8003dba:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003dbe:	d0e2      	beq.n	8003d86 <d_print_comp+0x11f2>
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	e7ed      	b.n	8003da2 <d_print_comp+0x120e>
 8003dc6:	4f7b      	ldr	r7, [pc, #492]	; (8003fb4 <d_print_comp+0x1420>)
 8003dc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003dcc:	f107 080f 	add.w	r8, r7, #15
 8003dd0:	f04f 0900 	mov.w	r9, #0
 8003dd4:	e016      	b.n	8003e04 <d_print_comp+0x1270>
 8003dd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dde:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003de2:	4798      	blx	r3
 8003de4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003de8:	3301      	adds	r3, #1
 8003dea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dee:	2200      	movs	r2, #0
 8003df0:	2301      	movs	r3, #1
 8003df2:	45b8      	cmp	r8, r7
 8003df4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003df8:	f804 a002 	strb.w	sl, [r4, r2]
 8003dfc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e00:	f000 8408 	beq.w	8004614 <d_print_comp+0x1a80>
 8003e04:	2bff      	cmp	r3, #255	; 0xff
 8003e06:	4619      	mov	r1, r3
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e0e:	d0e2      	beq.n	8003dd6 <d_print_comp+0x1242>
 8003e10:	461a      	mov	r2, r3
 8003e12:	3301      	adds	r3, #1
 8003e14:	e7ed      	b.n	8003df2 <d_print_comp+0x125e>
 8003e16:	4f68      	ldr	r7, [pc, #416]	; (8003fb8 <d_print_comp+0x1424>)
 8003e18:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e1c:	f107 081a 	add.w	r8, r7, #26
 8003e20:	f04f 0900 	mov.w	r9, #0
 8003e24:	e016      	b.n	8003e54 <d_print_comp+0x12c0>
 8003e26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e2e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e32:	4798      	blx	r3
 8003e34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2301      	movs	r3, #1
 8003e42:	45b8      	cmp	r8, r7
 8003e44:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e48:	f804 a002 	strb.w	sl, [r4, r2]
 8003e4c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e50:	f000 83c5 	beq.w	80045de <d_print_comp+0x1a4a>
 8003e54:	2bff      	cmp	r3, #255	; 0xff
 8003e56:	4619      	mov	r1, r3
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e5e:	d0e2      	beq.n	8003e26 <d_print_comp+0x1292>
 8003e60:	461a      	mov	r2, r3
 8003e62:	3301      	adds	r3, #1
 8003e64:	e7ed      	b.n	8003e42 <d_print_comp+0x12ae>
 8003e66:	4f55      	ldr	r7, [pc, #340]	; (8003fbc <d_print_comp+0x1428>)
 8003e68:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e6c:	f107 0811 	add.w	r8, r7, #17
 8003e70:	f04f 0900 	mov.w	r9, #0
 8003e74:	e016      	b.n	8003ea4 <d_print_comp+0x1310>
 8003e76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e7e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e82:	4798      	blx	r3
 8003e84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e88:	3301      	adds	r3, #1
 8003e8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2301      	movs	r3, #1
 8003e92:	45b8      	cmp	r8, r7
 8003e94:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e98:	f804 a002 	strb.w	sl, [r4, r2]
 8003e9c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003ea0:	f000 83a6 	beq.w	80045f0 <d_print_comp+0x1a5c>
 8003ea4:	2bff      	cmp	r3, #255	; 0xff
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003eae:	d0e2      	beq.n	8003e76 <d_print_comp+0x12e2>
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	e7ed      	b.n	8003e92 <d_print_comp+0x12fe>
 8003eb6:	f8d4 711c 	ldr.w	r7, [r4, #284]	; 0x11c
 8003eba:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8003ebe:	2f00      	cmp	r7, #0
 8003ec0:	f040 85ae 	bne.w	8004a20 <d_print_comp+0x1e8c>
 8003ec4:	f899 2000 	ldrb.w	r2, [r9]
 8003ec8:	2a05      	cmp	r2, #5
 8003eca:	f001 8180 	beq.w	80051ce <d_print_comp+0x263a>
 8003ece:	f899 3000 	ldrb.w	r3, [r9]
 8003ed2:	2b23      	cmp	r3, #35	; 0x23
 8003ed4:	f000 85a0 	beq.w	8004a18 <d_print_comp+0x1e84>
 8003ed8:	782a      	ldrb	r2, [r5, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	f000 859c 	beq.w	8004a18 <d_print_comp+0x1e84>
 8003ee0:	2b24      	cmp	r3, #36	; 0x24
 8003ee2:	f001 8162 	beq.w	80051aa <d_print_comp+0x2616>
 8003ee6:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003eea:	46a9      	mov	r9, r5
 8003eec:	ab18      	add	r3, sp, #96	; 0x60
 8003eee:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8003ef2:	f843 cd40 	str.w	ip, [r3, #-64]!
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8003efc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f00:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f04:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003f08:	e010      	b.n	8003f2c <d_print_comp+0x1398>
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	ab18      	add	r3, sp, #96	; 0x60
 8003f0e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003f12:	f843 1d40 	str.w	r1, [r3, #-64]!
 8003f16:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003f1a:	9509      	str	r5, [sp, #36]	; 0x24
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f26:	46a9      	mov	r9, r5
 8003f28:	2a00      	cmp	r2, #0
 8003f2a:	d0eb      	beq.n	8003f04 <d_print_comp+0x1370>
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f7fe fe30 	bl	8002b94 <d_print_comp>
 8003f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f36:	b923      	cbnz	r3, 8003f42 <d_print_comp+0x13ae>
 8003f38:	464a      	mov	r2, r9
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f001 fcbf 	bl	80058c0 <d_print_mod>
 8003f42:	9b08      	ldr	r3, [sp, #32]
 8003f44:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f48:	b10f      	cbz	r7, 8003f4e <d_print_comp+0x13ba>
 8003f4a:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8003f4e:	9905      	ldr	r1, [sp, #20]
 8003f50:	686a      	ldr	r2, [r5, #4]
 8003f52:	f7fe bf12 	b.w	8002d7a <d_print_comp+0x1e6>
 8003f56:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f5a:	4663      	mov	r3, ip
 8003f5c:	f1bc 0f00 	cmp.w	ip, #0
 8003f60:	d0c3      	beq.n	8003eea <d_print_comp+0x1356>
 8003f62:	6899      	ldr	r1, [r3, #8]
 8003f64:	b951      	cbnz	r1, 8003f7c <d_print_comp+0x13e8>
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	f1a2 0e19 	sub.w	lr, r2, #25
 8003f6e:	f1be 0f02 	cmp.w	lr, #2
 8003f72:	f201 80fc 	bhi.w	800516e <d_print_comp+0x25da>
 8003f76:	4290      	cmp	r0, r2
 8003f78:	f001 80f0 	beq.w	800515c <d_print_comp+0x25c8>
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ef      	bne.n	8003f62 <d_print_comp+0x13ce>
 8003f82:	e7b2      	b.n	8003eea <d_print_comp+0x1356>
 8003f84:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 8003f88:	2f00      	cmp	r7, #0
 8003f8a:	f43e aef6 	beq.w	8002d7a <d_print_comp+0x1e6>
 8003f8e:	4437      	add	r7, r6
 8003f90:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003f94:	3f01      	subs	r7, #1
 8003f96:	3e01      	subs	r6, #1
 8003f98:	f04f 0800 	mov.w	r8, #0
 8003f9c:	e027      	b.n	8003fee <d_print_comp+0x145a>
 8003f9e:	bf00      	nop
 8003fa0:	0801c37f 	.word	0x0801c37f
 8003fa4:	0801c367 	.word	0x0801c367
 8003fa8:	0801c34b 	.word	0x0801c34b
 8003fac:	0801c333 	.word	0x0801c333
 8003fb0:	0801c31f 	.word	0x0801c31f
 8003fb4:	0801c30f 	.word	0x0801c30f
 8003fb8:	0801c2f3 	.word	0x0801c2f3
 8003fbc:	0801c2df 	.word	0x0801c2df
 8003fc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fc8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003fcc:	4798      	blx	r3
 8003fce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2301      	movs	r3, #1
 8003fdc:	42b7      	cmp	r7, r6
 8003fde:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003fe2:	f804 9002 	strb.w	r9, [r4, r2]
 8003fe6:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003fea:	f000 83ce 	beq.w	800478a <d_print_comp+0x1bf6>
 8003fee:	2bff      	cmp	r3, #255	; 0xff
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8003ff8:	d0e2      	beq.n	8003fc0 <d_print_comp+0x142c>
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	e7ed      	b.n	8003fdc <d_print_comp+0x1448>
 8004000:	4631      	mov	r1, r6
 8004002:	68aa      	ldr	r2, [r5, #8]
 8004004:	4620      	mov	r0, r4
 8004006:	f7fe fdc5 	bl	8002b94 <d_print_comp>
 800400a:	9905      	ldr	r1, [sp, #20]
 800400c:	686a      	ldr	r2, [r5, #4]
 800400e:	f7fe beb4 	b.w	8002d7a <d_print_comp+0x1e6>
 8004012:	f016 0604 	ands.w	r6, r6, #4
 8004016:	68a8      	ldr	r0, [r5, #8]
 8004018:	f040 8505 	bne.w	8004a26 <d_print_comp+0x1e92>
 800401c:	e9d0 7300 	ldrd	r7, r3, [r0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f43e aeaa 	beq.w	8002d7a <d_print_comp+0x1e6>
 8004026:	eb07 0803 	add.w	r8, r7, r3
 800402a:	f108 38ff 	add.w	r8, r8, #4294967295
 800402e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004032:	3f01      	subs	r7, #1
 8004034:	46b1      	mov	r9, r6
 8004036:	e015      	b.n	8004064 <d_print_comp+0x14d0>
 8004038:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800403c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004040:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004044:	4798      	blx	r3
 8004046:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800404a:	3301      	adds	r3, #1
 800404c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004050:	2200      	movs	r2, #0
 8004052:	2301      	movs	r3, #1
 8004054:	45b8      	cmp	r8, r7
 8004056:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800405a:	54a6      	strb	r6, [r4, r2]
 800405c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004060:	f000 8545 	beq.w	8004aee <d_print_comp+0x1f5a>
 8004064:	2bff      	cmp	r3, #255	; 0xff
 8004066:	4619      	mov	r1, r3
 8004068:	4620      	mov	r0, r4
 800406a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800406e:	d0e3      	beq.n	8004038 <d_print_comp+0x14a4>
 8004070:	461a      	mov	r2, r3
 8004072:	3301      	adds	r3, #1
 8004074:	e7ee      	b.n	8004054 <d_print_comp+0x14c0>
 8004076:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800407a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800407e:	9302      	str	r3, [sp, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004086:	f1b8 0f00 	cmp.w	r8, #0
 800408a:	d025      	beq.n	80040d8 <d_print_comp+0x1544>
 800408c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	f10d 0920 	add.w	r9, sp, #32
 8004096:	4623      	mov	r3, r4
 8004098:	4617      	mov	r7, r2
 800409a:	4644      	mov	r4, r8
 800409c:	4692      	mov	sl, r2
 800409e:	4649      	mov	r1, r9
 80040a0:	46ab      	mov	fp, r5
 80040a2:	4698      	mov	r8, r3
 80040a4:	7825      	ldrb	r5, [r4, #0]
 80040a6:	9b01      	ldr	r3, [sp, #4]
 80040a8:	600a      	str	r2, [r1, #0]
 80040aa:	4628      	mov	r0, r5
 80040ac:	e9c1 4a01 	strd	r4, sl, [r1, #4]
 80040b0:	60cb      	str	r3, [r1, #12]
 80040b2:	3701      	adds	r7, #1
 80040b4:	460a      	mov	r2, r1
 80040b6:	f7fc f97f 	bl	80003b8 <is_fnqual_component_type>
 80040ba:	2800      	cmp	r0, #0
 80040bc:	f000 87c8 	beq.w	8005050 <d_print_comp+0x24bc>
 80040c0:	68a4      	ldr	r4, [r4, #8]
 80040c2:	2c00      	cmp	r4, #0
 80040c4:	f001 8057 	beq.w	8005176 <d_print_comp+0x25e2>
 80040c8:	2f04      	cmp	r7, #4
 80040ca:	f101 0110 	add.w	r1, r1, #16
 80040ce:	d1e9      	bne.n	80040a4 <d_print_comp+0x1510>
 80040d0:	4644      	mov	r4, r8
 80040d2:	465d      	mov	r5, fp
 80040d4:	f8c8 2114 	str.w	r2, [r8, #276]	; 0x114
 80040d8:	2301      	movs	r3, #1
 80040da:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80040de:	9905      	ldr	r1, [sp, #20]
 80040e0:	686a      	ldr	r2, [r5, #4]
 80040e2:	f7fe be4a 	b.w	8002d7a <d_print_comp+0x1e6>
 80040e6:	f016 0604 	ands.w	r6, r6, #4
 80040ea:	68af      	ldr	r7, [r5, #8]
 80040ec:	f040 8405 	bne.w	80048fa <d_print_comp+0x1d66>
 80040f0:	68eb      	ldr	r3, [r5, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f43e ae41 	beq.w	8002d7a <d_print_comp+0x1e6>
 80040f8:	eb07 0803 	add.w	r8, r7, r3
 80040fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004100:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004104:	3f01      	subs	r7, #1
 8004106:	46b1      	mov	r9, r6
 8004108:	e015      	b.n	8004136 <d_print_comp+0x15a2>
 800410a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800410e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004112:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004116:	4798      	blx	r3
 8004118:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800411c:	3301      	adds	r3, #1
 800411e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004122:	2200      	movs	r2, #0
 8004124:	2301      	movs	r3, #1
 8004126:	45b8      	cmp	r8, r7
 8004128:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800412c:	54a6      	strb	r6, [r4, r2]
 800412e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004132:	f000 84e0 	beq.w	8004af6 <d_print_comp+0x1f62>
 8004136:	2bff      	cmp	r3, #255	; 0xff
 8004138:	4619      	mov	r1, r3
 800413a:	4620      	mov	r0, r4
 800413c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004140:	d0e3      	beq.n	800410a <d_print_comp+0x1576>
 8004142:	461a      	mov	r2, r3
 8004144:	3301      	adds	r3, #1
 8004146:	e7ee      	b.n	8004126 <d_print_comp+0x1592>
 8004148:	68aa      	ldr	r2, [r5, #8]
 800414a:	4631      	mov	r1, r6
 800414c:	4620      	mov	r0, r4
 800414e:	f7fe fd21 	bl	8002b94 <d_print_comp>
 8004152:	f016 0904 	ands.w	r9, r6, #4
 8004156:	f000 8681 	beq.w	8004e5c <d_print_comp+0x22c8>
 800415a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800415e:	2fff      	cmp	r7, #255	; 0xff
 8004160:	d112      	bne.n	8004188 <d_print_comp+0x15f4>
 8004162:	f04f 0800 	mov.w	r8, #0
 8004166:	4639      	mov	r1, r7
 8004168:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800416c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004170:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004174:	4620      	mov	r0, r4
 8004176:	4798      	blx	r3
 8004178:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800417c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004180:	3301      	adds	r3, #1
 8004182:	4647      	mov	r7, r8
 8004184:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004188:	232e      	movs	r3, #46	; 0x2e
 800418a:	1c7a      	adds	r2, r7, #1
 800418c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004190:	55e3      	strb	r3, [r4, r7]
 8004192:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004196:	68ef      	ldr	r7, [r5, #12]
 8004198:	783b      	ldrb	r3, [r7, #0]
 800419a:	2b46      	cmp	r3, #70	; 0x46
 800419c:	f000 873a 	beq.w	8005014 <d_print_comp+0x2480>
 80041a0:	463a      	mov	r2, r7
 80041a2:	4631      	mov	r1, r6
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7fe fcf5 	bl	8002b94 <d_print_comp>
 80041aa:	9905      	ldr	r1, [sp, #20]
 80041ac:	686a      	ldr	r2, [r5, #4]
 80041ae:	f7fe bde4 	b.w	8002d7a <d_print_comp+0x1e6>
 80041b2:	2301      	movs	r3, #1
 80041b4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80041b8:	686a      	ldr	r2, [r5, #4]
 80041ba:	f7fe bdde 	b.w	8002d7a <d_print_comp+0x1e6>
 80041be:	3701      	adds	r7, #1
 80041c0:	454f      	cmp	r7, r9
 80041c2:	f47e ae2b 	bne.w	8002e1c <d_print_comp+0x288>
 80041c6:	9d03      	ldr	r5, [sp, #12]
 80041c8:	9905      	ldr	r1, [sp, #20]
 80041ca:	686a      	ldr	r2, [r5, #4]
 80041cc:	f7fe bdd5 	b.w	8002d7a <d_print_comp+0x1e6>
 80041d0:	4631      	mov	r1, r6
 80041d2:	68aa      	ldr	r2, [r5, #8]
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7fe fcdd 	bl	8002b94 <d_print_comp>
 80041da:	9905      	ldr	r1, [sp, #20]
 80041dc:	686a      	ldr	r2, [r5, #4]
 80041de:	f7fe bdcc 	b.w	8002d7a <d_print_comp+0x1e6>
 80041e2:	4631      	mov	r1, r6
 80041e4:	68aa      	ldr	r2, [r5, #8]
 80041e6:	4620      	mov	r0, r4
 80041e8:	f7fe fcd4 	bl	8002b94 <d_print_comp>
 80041ec:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80041f0:	2fff      	cmp	r7, #255	; 0xff
 80041f2:	d111      	bne.n	8004218 <d_print_comp+0x1684>
 80041f4:	2600      	movs	r6, #0
 80041f6:	4639      	mov	r1, r7
 80041f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80041fc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004200:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004204:	4620      	mov	r0, r4
 8004206:	4798      	blx	r3
 8004208:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800420c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004210:	3301      	adds	r3, #1
 8004212:	4637      	mov	r7, r6
 8004214:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004218:	1c7a      	adds	r2, r7, #1
 800421a:	2329      	movs	r3, #41	; 0x29
 800421c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004220:	55e3      	strb	r3, [r4, r7]
 8004222:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004226:	686a      	ldr	r2, [r5, #4]
 8004228:	9905      	ldr	r1, [sp, #20]
 800422a:	f7fe bda6 	b.w	8002d7a <d_print_comp+0x1e6>
 800422e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004232:	68aa      	ldr	r2, [r5, #8]
 8004234:	4fd3      	ldr	r7, [pc, #844]	; (8004584 <d_print_comp+0x19f0>)
 8004236:	3301      	adds	r3, #1
 8004238:	4631      	mov	r1, r6
 800423a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800423e:	4620      	mov	r0, r4
 8004240:	f7fe fca8 	bl	8002b94 <d_print_comp>
 8004244:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8004248:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800424c:	3a01      	subs	r2, #1
 800424e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8004252:	1cbe      	adds	r6, r7, #2
 8004254:	f04f 0800 	mov.w	r8, #0
 8004258:	e015      	b.n	8004286 <d_print_comp+0x16f2>
 800425a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800425e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004262:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004266:	4798      	blx	r3
 8004268:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800426c:	3301      	adds	r3, #1
 800426e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004272:	2200      	movs	r2, #0
 8004274:	2301      	movs	r3, #1
 8004276:	42b7      	cmp	r7, r6
 8004278:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800427c:	f804 9002 	strb.w	r9, [r4, r2]
 8004280:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004284:	d011      	beq.n	80042aa <d_print_comp+0x1716>
 8004286:	2bff      	cmp	r3, #255	; 0xff
 8004288:	4619      	mov	r1, r3
 800428a:	4620      	mov	r0, r4
 800428c:	f817 9b01 	ldrb.w	r9, [r7], #1
 8004290:	d0e3      	beq.n	800425a <d_print_comp+0x16c6>
 8004292:	461a      	mov	r2, r3
 8004294:	3301      	adds	r3, #1
 8004296:	e7ee      	b.n	8004276 <d_print_comp+0x16e2>
 8004298:	4631      	mov	r1, r6
 800429a:	68aa      	ldr	r2, [r5, #8]
 800429c:	4620      	mov	r0, r4
 800429e:	f7fe fc79 	bl	8002b94 <d_print_comp>
 80042a2:	9905      	ldr	r1, [sp, #20]
 80042a4:	686a      	ldr	r2, [r5, #4]
 80042a6:	f7fe bd68 	b.w	8002d7a <d_print_comp+0x1e6>
 80042aa:	68ea      	ldr	r2, [r5, #12]
 80042ac:	49b6      	ldr	r1, [pc, #728]	; (8004588 <d_print_comp+0x19f4>)
 80042ae:	3201      	adds	r2, #1
 80042b0:	a808      	add	r0, sp, #32
 80042b2:	f00f fa27 	bl	8013704 <sprintf>
 80042b6:	a808      	add	r0, sp, #32
 80042b8:	f002 fd5c 	bl	8006d74 <strlen>
 80042bc:	b328      	cbz	r0, 800430a <d_print_comp+0x1776>
 80042be:	ae08      	add	r6, sp, #32
 80042c0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042c4:	1837      	adds	r7, r6, r0
 80042c6:	f04f 0800 	mov.w	r8, #0
 80042ca:	e015      	b.n	80042f8 <d_print_comp+0x1764>
 80042cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80042d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80042d4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80042d8:	4798      	blx	r3
 80042da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80042de:	3301      	adds	r3, #1
 80042e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80042e4:	2200      	movs	r2, #0
 80042e6:	2301      	movs	r3, #1
 80042e8:	42be      	cmp	r6, r7
 80042ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042ee:	f804 9002 	strb.w	r9, [r4, r2]
 80042f2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80042f6:	d00a      	beq.n	800430e <d_print_comp+0x177a>
 80042f8:	2bff      	cmp	r3, #255	; 0xff
 80042fa:	4619      	mov	r1, r3
 80042fc:	4620      	mov	r0, r4
 80042fe:	f816 9b01 	ldrb.w	r9, [r6], #1
 8004302:	d0e3      	beq.n	80042cc <d_print_comp+0x1738>
 8004304:	461a      	mov	r2, r3
 8004306:	3301      	adds	r3, #1
 8004308:	e7ee      	b.n	80042e8 <d_print_comp+0x1754>
 800430a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800430e:	2bff      	cmp	r3, #255	; 0xff
 8004310:	d110      	bne.n	8004334 <d_print_comp+0x17a0>
 8004312:	2600      	movs	r6, #0
 8004314:	4619      	mov	r1, r3
 8004316:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800431a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800431e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004322:	4620      	mov	r0, r4
 8004324:	4798      	blx	r3
 8004326:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800432a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800432e:	3301      	adds	r3, #1
 8004330:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004334:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004338:	9905      	ldr	r1, [sp, #20]
 800433a:	1c50      	adds	r0, r2, #1
 800433c:	237d      	movs	r3, #125	; 0x7d
 800433e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004342:	54a3      	strb	r3, [r4, r2]
 8004344:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004348:	686a      	ldr	r2, [r5, #4]
 800434a:	f7fe bd16 	b.w	8002d7a <d_print_comp+0x1e6>
 800434e:	4631      	mov	r1, r6
 8004350:	68aa      	ldr	r2, [r5, #8]
 8004352:	4620      	mov	r0, r4
 8004354:	f7fe fc1e 	bl	8002b94 <d_print_comp>
 8004358:	9905      	ldr	r1, [sp, #20]
 800435a:	686a      	ldr	r2, [r5, #4]
 800435c:	f7fe bd0d 	b.w	8002d7a <d_print_comp+0x1e6>
 8004360:	68aa      	ldr	r2, [r5, #8]
 8004362:	4989      	ldr	r1, [pc, #548]	; (8004588 <d_print_comp+0x19f4>)
 8004364:	3201      	adds	r2, #1
 8004366:	a808      	add	r0, sp, #32
 8004368:	f00f f9cc 	bl	8013704 <sprintf>
 800436c:	a808      	add	r0, sp, #32
 800436e:	f002 fd01 	bl	8006d74 <strlen>
 8004372:	2800      	cmp	r0, #0
 8004374:	d071      	beq.n	800445a <d_print_comp+0x18c6>
 8004376:	ae08      	add	r6, sp, #32
 8004378:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800437c:	1837      	adds	r7, r6, r0
 800437e:	f04f 0800 	mov.w	r8, #0
 8004382:	e015      	b.n	80043b0 <d_print_comp+0x181c>
 8004384:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004388:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800438c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004390:	4798      	blx	r3
 8004392:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004396:	3301      	adds	r3, #1
 8004398:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800439c:	2200      	movs	r2, #0
 800439e:	2301      	movs	r3, #1
 80043a0:	42b7      	cmp	r7, r6
 80043a2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043a6:	f804 9002 	strb.w	r9, [r4, r2]
 80043aa:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80043ae:	d056      	beq.n	800445e <d_print_comp+0x18ca>
 80043b0:	2bff      	cmp	r3, #255	; 0xff
 80043b2:	4619      	mov	r1, r3
 80043b4:	4620      	mov	r0, r4
 80043b6:	f816 9b01 	ldrb.w	r9, [r6], #1
 80043ba:	d0e3      	beq.n	8004384 <d_print_comp+0x17f0>
 80043bc:	461a      	mov	r2, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	e7ee      	b.n	80043a0 <d_print_comp+0x180c>
 80043c2:	4631      	mov	r1, r6
 80043c4:	68ea      	ldr	r2, [r5, #12]
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7fe fbe4 	bl	8002b94 <d_print_comp>
 80043cc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80043d0:	2fff      	cmp	r7, #255	; 0xff
 80043d2:	d111      	bne.n	80043f8 <d_print_comp+0x1864>
 80043d4:	2600      	movs	r6, #0
 80043d6:	4639      	mov	r1, r7
 80043d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043dc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80043e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043e4:	4620      	mov	r0, r4
 80043e6:	4798      	blx	r3
 80043e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043ec:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80043f0:	3301      	adds	r3, #1
 80043f2:	4637      	mov	r7, r6
 80043f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043f8:	1c7a      	adds	r2, r7, #1
 80043fa:	235d      	movs	r3, #93	; 0x5d
 80043fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004400:	55e3      	strb	r3, [r4, r7]
 8004402:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004406:	686a      	ldr	r2, [r5, #4]
 8004408:	9905      	ldr	r1, [sp, #20]
 800440a:	f7fe bcb6 	b.w	8002d7a <d_print_comp+0x1e6>
 800440e:	4631      	mov	r1, r6
 8004410:	68ea      	ldr	r2, [r5, #12]
 8004412:	4620      	mov	r0, r4
 8004414:	f7fe fbbe 	bl	8002b94 <d_print_comp>
 8004418:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800441c:	2fff      	cmp	r7, #255	; 0xff
 800441e:	d111      	bne.n	8004444 <d_print_comp+0x18b0>
 8004420:	2600      	movs	r6, #0
 8004422:	4639      	mov	r1, r7
 8004424:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004428:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800442c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004430:	4620      	mov	r0, r4
 8004432:	4798      	blx	r3
 8004434:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004438:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800443c:	3301      	adds	r3, #1
 800443e:	4637      	mov	r7, r6
 8004440:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004444:	1c7a      	adds	r2, r7, #1
 8004446:	235d      	movs	r3, #93	; 0x5d
 8004448:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800444c:	55e3      	strb	r3, [r4, r7]
 800444e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004452:	686a      	ldr	r2, [r5, #4]
 8004454:	9905      	ldr	r1, [sp, #20]
 8004456:	f7fe bc90 	b.w	8002d7a <d_print_comp+0x1e6>
 800445a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800445e:	2bff      	cmp	r3, #255	; 0xff
 8004460:	d110      	bne.n	8004484 <d_print_comp+0x18f0>
 8004462:	2600      	movs	r6, #0
 8004464:	4619      	mov	r1, r3
 8004466:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800446a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800446e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004472:	4620      	mov	r0, r4
 8004474:	4798      	blx	r3
 8004476:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800447a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800447e:	3301      	adds	r3, #1
 8004480:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004484:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004488:	9905      	ldr	r1, [sp, #20]
 800448a:	1c50      	adds	r0, r2, #1
 800448c:	237d      	movs	r3, #125	; 0x7d
 800448e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004492:	54a3      	strb	r3, [r4, r2]
 8004494:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004498:	686a      	ldr	r2, [r5, #4]
 800449a:	f7fe bc6e 	b.w	8002d7a <d_print_comp+0x1e6>
 800449e:	4631      	mov	r1, r6
 80044a0:	68aa      	ldr	r2, [r5, #8]
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7fe fb76 	bl	8002b94 <d_print_comp>
 80044a8:	9905      	ldr	r1, [sp, #20]
 80044aa:	686a      	ldr	r2, [r5, #4]
 80044ac:	f7fe bc65 	b.w	8002d7a <d_print_comp+0x1e6>
 80044b0:	9905      	ldr	r1, [sp, #20]
 80044b2:	686a      	ldr	r2, [r5, #4]
 80044b4:	f7fe bc61 	b.w	8002d7a <d_print_comp+0x1e6>
 80044b8:	4631      	mov	r1, r6
 80044ba:	68aa      	ldr	r2, [r5, #8]
 80044bc:	4620      	mov	r0, r4
 80044be:	f7fe fb69 	bl	8002b94 <d_print_comp>
 80044c2:	9905      	ldr	r1, [sp, #20]
 80044c4:	686a      	ldr	r2, [r5, #4]
 80044c6:	f7fe bc58 	b.w	8002d7a <d_print_comp+0x1e6>
 80044ca:	4631      	mov	r1, r6
 80044cc:	68ea      	ldr	r2, [r5, #12]
 80044ce:	4620      	mov	r0, r4
 80044d0:	f7fe fb60 	bl	8002b94 <d_print_comp>
 80044d4:	9905      	ldr	r1, [sp, #20]
 80044d6:	686a      	ldr	r2, [r5, #4]
 80044d8:	f7fe bc4f 	b.w	8002d7a <d_print_comp+0x1e6>
 80044dc:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80044e0:	b13a      	cbz	r2, 80044f2 <d_print_comp+0x195e>
 80044e2:	ab18      	add	r3, sp, #96	; 0x60
 80044e4:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80044e8:	f843 1d40 	str.w	r1, [r3, #-64]!
 80044ec:	9209      	str	r2, [sp, #36]	; 0x24
 80044ee:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80044f2:	68aa      	ldr	r2, [r5, #8]
 80044f4:	7813      	ldrb	r3, [r2, #0]
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	f000 84d6 	beq.w	8004ea8 <d_print_comp+0x2314>
 80044fc:	4631      	mov	r1, r6
 80044fe:	4620      	mov	r0, r4
 8004500:	f7fe fb48 	bl	8002b94 <d_print_comp>
 8004504:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004508:	b113      	cbz	r3, 8004510 <d_print_comp+0x197c>
 800450a:	9b08      	ldr	r3, [sp, #32]
 800450c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004510:	9905      	ldr	r1, [sp, #20]
 8004512:	686a      	ldr	r2, [r5, #4]
 8004514:	f7fe bc31 	b.w	8002d7a <d_print_comp+0x1e6>
 8004518:	f8da 6004 	ldr.w	r6, [sl, #4]
 800451c:	7832      	ldrb	r2, [r6, #0]
 800451e:	3a61      	subs	r2, #97	; 0x61
 8004520:	2a19      	cmp	r2, #25
 8004522:	d81d      	bhi.n	8004560 <d_print_comp+0x19cc>
 8004524:	2bff      	cmp	r3, #255	; 0xff
 8004526:	d110      	bne.n	800454a <d_print_comp+0x19b6>
 8004528:	2600      	movs	r6, #0
 800452a:	4619      	mov	r1, r3
 800452c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004530:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004534:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004538:	4620      	mov	r0, r4
 800453a:	4798      	blx	r3
 800453c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004540:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004544:	3301      	adds	r3, #1
 8004546:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800454a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800454e:	2320      	movs	r3, #32
 8004550:	1c51      	adds	r1, r2, #1
 8004552:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004556:	54a3      	strb	r3, [r4, r2]
 8004558:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800455c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004560:	19f3      	adds	r3, r6, r7
 8004562:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004566:	2b20      	cmp	r3, #32
 8004568:	bf08      	it	eq
 800456a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800456e:	2f00      	cmp	r7, #0
 8004570:	f000 86fb 	beq.w	800536a <d_print_comp+0x27d6>
 8004574:	3e01      	subs	r6, #1
 8004576:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800457a:	4437      	add	r7, r6
 800457c:	f04f 0800 	mov.w	r8, #0
 8004580:	e01b      	b.n	80045ba <d_print_comp+0x1a26>
 8004582:	bf00      	nop
 8004584:	0801c49c 	.word	0x0801c49c
 8004588:	0801c1ec 	.word	0x0801c1ec
 800458c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004590:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004594:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004598:	4798      	blx	r3
 800459a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800459e:	3301      	adds	r3, #1
 80045a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045a4:	2200      	movs	r2, #0
 80045a6:	2301      	movs	r3, #1
 80045a8:	42be      	cmp	r6, r7
 80045aa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80045ae:	f804 9002 	strb.w	r9, [r4, r2]
 80045b2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80045b6:	f000 80ec 	beq.w	8004792 <d_print_comp+0x1bfe>
 80045ba:	2bff      	cmp	r3, #255	; 0xff
 80045bc:	4619      	mov	r1, r3
 80045be:	4620      	mov	r0, r4
 80045c0:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 80045c4:	d0e2      	beq.n	800458c <d_print_comp+0x19f8>
 80045c6:	461a      	mov	r2, r3
 80045c8:	3301      	adds	r3, #1
 80045ca:	e7ed      	b.n	80045a8 <d_print_comp+0x1a14>
 80045cc:	4631      	mov	r1, r6
 80045ce:	68aa      	ldr	r2, [r5, #8]
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7fe fadf 	bl	8002b94 <d_print_comp>
 80045d6:	9905      	ldr	r1, [sp, #20]
 80045d8:	686a      	ldr	r2, [r5, #4]
 80045da:	f7fe bbce 	b.w	8002d7a <d_print_comp+0x1e6>
 80045de:	4631      	mov	r1, r6
 80045e0:	68aa      	ldr	r2, [r5, #8]
 80045e2:	4620      	mov	r0, r4
 80045e4:	f7fe fad6 	bl	8002b94 <d_print_comp>
 80045e8:	9905      	ldr	r1, [sp, #20]
 80045ea:	686a      	ldr	r2, [r5, #4]
 80045ec:	f7fe bbc5 	b.w	8002d7a <d_print_comp+0x1e6>
 80045f0:	4631      	mov	r1, r6
 80045f2:	68aa      	ldr	r2, [r5, #8]
 80045f4:	4620      	mov	r0, r4
 80045f6:	f7fe facd 	bl	8002b94 <d_print_comp>
 80045fa:	9905      	ldr	r1, [sp, #20]
 80045fc:	686a      	ldr	r2, [r5, #4]
 80045fe:	f7fe bbbc 	b.w	8002d7a <d_print_comp+0x1e6>
 8004602:	4631      	mov	r1, r6
 8004604:	68aa      	ldr	r2, [r5, #8]
 8004606:	4620      	mov	r0, r4
 8004608:	f7fe fac4 	bl	8002b94 <d_print_comp>
 800460c:	9905      	ldr	r1, [sp, #20]
 800460e:	686a      	ldr	r2, [r5, #4]
 8004610:	f7fe bbb3 	b.w	8002d7a <d_print_comp+0x1e6>
 8004614:	4631      	mov	r1, r6
 8004616:	68aa      	ldr	r2, [r5, #8]
 8004618:	4620      	mov	r0, r4
 800461a:	f7fe fabb 	bl	8002b94 <d_print_comp>
 800461e:	9905      	ldr	r1, [sp, #20]
 8004620:	686a      	ldr	r2, [r5, #4]
 8004622:	f7fe bbaa 	b.w	8002d7a <d_print_comp+0x1e6>
 8004626:	4631      	mov	r1, r6
 8004628:	68aa      	ldr	r2, [r5, #8]
 800462a:	4620      	mov	r0, r4
 800462c:	f7fe fab2 	bl	8002b94 <d_print_comp>
 8004630:	9905      	ldr	r1, [sp, #20]
 8004632:	686a      	ldr	r2, [r5, #4]
 8004634:	f7fe bba1 	b.w	8002d7a <d_print_comp+0x1e6>
 8004638:	4631      	mov	r1, r6
 800463a:	68aa      	ldr	r2, [r5, #8]
 800463c:	4620      	mov	r0, r4
 800463e:	f7fe faa9 	bl	8002b94 <d_print_comp>
 8004642:	9905      	ldr	r1, [sp, #20]
 8004644:	686a      	ldr	r2, [r5, #4]
 8004646:	f7fe bb98 	b.w	8002d7a <d_print_comp+0x1e6>
 800464a:	4631      	mov	r1, r6
 800464c:	68aa      	ldr	r2, [r5, #8]
 800464e:	4620      	mov	r0, r4
 8004650:	f7fe faa0 	bl	8002b94 <d_print_comp>
 8004654:	9905      	ldr	r1, [sp, #20]
 8004656:	686a      	ldr	r2, [r5, #4]
 8004658:	f7fe bb8f 	b.w	8002d7a <d_print_comp+0x1e6>
 800465c:	4fcf      	ldr	r7, [pc, #828]	; (800499c <d_print_comp+0x1e08>)
 800465e:	68ea      	ldr	r2, [r5, #12]
 8004660:	4631      	mov	r1, r6
 8004662:	4620      	mov	r0, r4
 8004664:	f7fe fa96 	bl	8002b94 <d_print_comp>
 8004668:	f107 0805 	add.w	r8, r7, #5
 800466c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004670:	f04f 0900 	mov.w	r9, #0
 8004674:	e015      	b.n	80046a2 <d_print_comp+0x1b0e>
 8004676:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800467a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800467e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004682:	4798      	blx	r3
 8004684:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004688:	3301      	adds	r3, #1
 800468a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800468e:	2200      	movs	r2, #0
 8004690:	2301      	movs	r3, #1
 8004692:	4547      	cmp	r7, r8
 8004694:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004698:	f804 a002 	strb.w	sl, [r4, r2]
 800469c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80046a0:	d008      	beq.n	80046b4 <d_print_comp+0x1b20>
 80046a2:	2bff      	cmp	r3, #255	; 0xff
 80046a4:	4619      	mov	r1, r3
 80046a6:	4620      	mov	r0, r4
 80046a8:	f817 ab01 	ldrb.w	sl, [r7], #1
 80046ac:	d0e3      	beq.n	8004676 <d_print_comp+0x1ae2>
 80046ae:	461a      	mov	r2, r3
 80046b0:	3301      	adds	r3, #1
 80046b2:	e7ee      	b.n	8004692 <d_print_comp+0x1afe>
 80046b4:	4631      	mov	r1, r6
 80046b6:	68aa      	ldr	r2, [r5, #8]
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7fe fa6b 	bl	8002b94 <d_print_comp>
 80046be:	9905      	ldr	r1, [sp, #20]
 80046c0:	686a      	ldr	r2, [r5, #4]
 80046c2:	f7fe bb5a 	b.w	8002d7a <d_print_comp+0x1e6>
 80046c6:	4fb6      	ldr	r7, [pc, #728]	; (80049a0 <d_print_comp+0x1e0c>)
 80046c8:	68aa      	ldr	r2, [r5, #8]
 80046ca:	4631      	mov	r1, r6
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7fe fa61 	bl	8002b94 <d_print_comp>
 80046d2:	f107 0804 	add.w	r8, r7, #4
 80046d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046da:	f04f 0900 	mov.w	r9, #0
 80046de:	e015      	b.n	800470c <d_print_comp+0x1b78>
 80046e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80046e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80046e8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80046ec:	4798      	blx	r3
 80046ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80046f2:	3301      	adds	r3, #1
 80046f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80046f8:	2200      	movs	r2, #0
 80046fa:	2301      	movs	r3, #1
 80046fc:	45b8      	cmp	r8, r7
 80046fe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004702:	f804 a002 	strb.w	sl, [r4, r2]
 8004706:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800470a:	d008      	beq.n	800471e <d_print_comp+0x1b8a>
 800470c:	2bff      	cmp	r3, #255	; 0xff
 800470e:	4619      	mov	r1, r3
 8004710:	4620      	mov	r0, r4
 8004712:	f817 ab01 	ldrb.w	sl, [r7], #1
 8004716:	d0e3      	beq.n	80046e0 <d_print_comp+0x1b4c>
 8004718:	461a      	mov	r2, r3
 800471a:	3301      	adds	r3, #1
 800471c:	e7ee      	b.n	80046fc <d_print_comp+0x1b68>
 800471e:	4631      	mov	r1, r6
 8004720:	68ea      	ldr	r2, [r5, #12]
 8004722:	4620      	mov	r0, r4
 8004724:	f7fe fa36 	bl	8002b94 <d_print_comp>
 8004728:	9905      	ldr	r1, [sp, #20]
 800472a:	686a      	ldr	r2, [r5, #4]
 800472c:	f7fe bb25 	b.w	8002d7a <d_print_comp+0x1e6>
 8004730:	4631      	mov	r1, r6
 8004732:	68aa      	ldr	r2, [r5, #8]
 8004734:	4620      	mov	r0, r4
 8004736:	f7fe fa2d 	bl	8002b94 <d_print_comp>
 800473a:	9905      	ldr	r1, [sp, #20]
 800473c:	686a      	ldr	r2, [r5, #4]
 800473e:	f7fe bb1c 	b.w	8002d7a <d_print_comp+0x1e6>
 8004742:	4631      	mov	r1, r6
 8004744:	68aa      	ldr	r2, [r5, #8]
 8004746:	4620      	mov	r0, r4
 8004748:	f7fe fa24 	bl	8002b94 <d_print_comp>
 800474c:	9905      	ldr	r1, [sp, #20]
 800474e:	686a      	ldr	r2, [r5, #4]
 8004750:	f7fe bb13 	b.w	8002d7a <d_print_comp+0x1e6>
 8004754:	4631      	mov	r1, r6
 8004756:	68aa      	ldr	r2, [r5, #8]
 8004758:	4620      	mov	r0, r4
 800475a:	f7fe fa1b 	bl	8002b94 <d_print_comp>
 800475e:	9905      	ldr	r1, [sp, #20]
 8004760:	686a      	ldr	r2, [r5, #4]
 8004762:	f7fe bb0a 	b.w	8002d7a <d_print_comp+0x1e6>
 8004766:	4631      	mov	r1, r6
 8004768:	68aa      	ldr	r2, [r5, #8]
 800476a:	4620      	mov	r0, r4
 800476c:	f7fe fa12 	bl	8002b94 <d_print_comp>
 8004770:	9905      	ldr	r1, [sp, #20]
 8004772:	686a      	ldr	r2, [r5, #4]
 8004774:	f7fe bb01 	b.w	8002d7a <d_print_comp+0x1e6>
 8004778:	4631      	mov	r1, r6
 800477a:	68aa      	ldr	r2, [r5, #8]
 800477c:	4620      	mov	r0, r4
 800477e:	f7fe fa09 	bl	8002b94 <d_print_comp>
 8004782:	9905      	ldr	r1, [sp, #20]
 8004784:	686a      	ldr	r2, [r5, #4]
 8004786:	f7fe baf8 	b.w	8002d7a <d_print_comp+0x1e6>
 800478a:	9905      	ldr	r1, [sp, #20]
 800478c:	686a      	ldr	r2, [r5, #4]
 800478e:	f7fe baf4 	b.w	8002d7a <d_print_comp+0x1e6>
 8004792:	9905      	ldr	r1, [sp, #20]
 8004794:	686a      	ldr	r2, [r5, #4]
 8004796:	f7fe baf0 	b.w	8002d7a <d_print_comp+0x1e6>
 800479a:	4631      	mov	r1, r6
 800479c:	68ea      	ldr	r2, [r5, #12]
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	4620      	mov	r0, r4
 80047a2:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
 80047a6:	f7fe f9f5 	bl	8002b94 <d_print_comp>
 80047aa:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	4296      	cmp	r6, r2
 80047b2:	f000 8441 	beq.w	8005038 <d_print_comp+0x24a4>
 80047b6:	9905      	ldr	r1, [sp, #20]
 80047b8:	686a      	ldr	r2, [r5, #4]
 80047ba:	f7fe bade 	b.w	8002d7a <d_print_comp+0x1e6>
 80047be:	4e79      	ldr	r6, [pc, #484]	; (80049a4 <d_print_comp+0x1e10>)
 80047c0:	4690      	mov	r8, r2
 80047c2:	f106 0906 	add.w	r9, r6, #6
 80047c6:	e014      	b.n	80047f2 <d_print_comp+0x1c5e>
 80047c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047d0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80047d4:	4798      	blx	r3
 80047d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80047da:	3301      	adds	r3, #1
 80047dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80047e0:	2200      	movs	r2, #0
 80047e2:	2301      	movs	r3, #1
 80047e4:	45b1      	cmp	r9, r6
 80047e6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80047ea:	54a7      	strb	r7, [r4, r2]
 80047ec:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80047f0:	d008      	beq.n	8004804 <d_print_comp+0x1c70>
 80047f2:	2bff      	cmp	r3, #255	; 0xff
 80047f4:	4619      	mov	r1, r3
 80047f6:	4620      	mov	r0, r4
 80047f8:	f816 7b01 	ldrb.w	r7, [r6], #1
 80047fc:	d0e4      	beq.n	80047c8 <d_print_comp+0x1c34>
 80047fe:	461a      	mov	r2, r3
 8004800:	3301      	adds	r3, #1
 8004802:	e7ef      	b.n	80047e4 <d_print_comp+0x1c50>
 8004804:	9905      	ldr	r1, [sp, #20]
 8004806:	686a      	ldr	r2, [r5, #4]
 8004808:	f7fe bab7 	b.w	8002d7a <d_print_comp+0x1e6>
 800480c:	4642      	mov	r2, r8
 800480e:	a808      	add	r0, sp, #32
 8004810:	4965      	ldr	r1, [pc, #404]	; (80049a8 <d_print_comp+0x1e14>)
 8004812:	f00e ff77 	bl	8013704 <sprintf>
 8004816:	a808      	add	r0, sp, #32
 8004818:	f002 faac 	bl	8006d74 <strlen>
 800481c:	b328      	cbz	r0, 800486a <d_print_comp+0x1cd6>
 800481e:	ae08      	add	r6, sp, #32
 8004820:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004824:	eb06 0900 	add.w	r9, r6, r0
 8004828:	f04f 0800 	mov.w	r8, #0
 800482c:	e014      	b.n	8004858 <d_print_comp+0x1cc4>
 800482e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004832:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004836:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800483a:	4798      	blx	r3
 800483c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004840:	3301      	adds	r3, #1
 8004842:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004846:	2200      	movs	r2, #0
 8004848:	2301      	movs	r3, #1
 800484a:	45b1      	cmp	r9, r6
 800484c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004850:	54a7      	strb	r7, [r4, r2]
 8004852:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004856:	d008      	beq.n	800486a <d_print_comp+0x1cd6>
 8004858:	2bff      	cmp	r3, #255	; 0xff
 800485a:	4619      	mov	r1, r3
 800485c:	4620      	mov	r0, r4
 800485e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004862:	d0e4      	beq.n	800482e <d_print_comp+0x1c9a>
 8004864:	461a      	mov	r2, r3
 8004866:	3301      	adds	r3, #1
 8004868:	e7ef      	b.n	800484a <d_print_comp+0x1cb6>
 800486a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800486e:	2fff      	cmp	r7, #255	; 0xff
 8004870:	d111      	bne.n	8004896 <d_print_comp+0x1d02>
 8004872:	2600      	movs	r6, #0
 8004874:	4639      	mov	r1, r7
 8004876:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800487a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800487e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004882:	4620      	mov	r0, r4
 8004884:	4798      	blx	r3
 8004886:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800488a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800488e:	3301      	adds	r3, #1
 8004890:	4637      	mov	r7, r6
 8004892:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004896:	1c7a      	adds	r2, r7, #1
 8004898:	237d      	movs	r3, #125	; 0x7d
 800489a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800489e:	55e3      	strb	r3, [r4, r7]
 80048a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048a4:	686a      	ldr	r2, [r5, #4]
 80048a6:	9905      	ldr	r1, [sp, #20]
 80048a8:	f7fe ba67 	b.w	8002d7a <d_print_comp+0x1e6>
 80048ac:	4e3f      	ldr	r6, [pc, #252]	; (80049ac <d_print_comp+0x1e18>)
 80048ae:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80048b2:	f106 0905 	add.w	r9, r6, #5
 80048b6:	f04f 0800 	mov.w	r8, #0
 80048ba:	e015      	b.n	80048e8 <d_print_comp+0x1d54>
 80048bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80048c8:	4798      	blx	r3
 80048ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048ce:	3301      	adds	r3, #1
 80048d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048d4:	2200      	movs	r2, #0
 80048d6:	2301      	movs	r3, #1
 80048d8:	45b1      	cmp	r9, r6
 80048da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80048de:	54a7      	strb	r7, [r4, r2]
 80048e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80048e4:	f000 80cf 	beq.w	8004a86 <d_print_comp+0x1ef2>
 80048e8:	2bff      	cmp	r3, #255	; 0xff
 80048ea:	4619      	mov	r1, r3
 80048ec:	4620      	mov	r0, r4
 80048ee:	f816 7b01 	ldrb.w	r7, [r6], #1
 80048f2:	d0e3      	beq.n	80048bc <d_print_comp+0x1d28>
 80048f4:	461a      	mov	r2, r3
 80048f6:	3301      	adds	r3, #1
 80048f8:	e7ee      	b.n	80048d8 <d_print_comp+0x1d44>
 80048fa:	68ee      	ldr	r6, [r5, #12]
 80048fc:	443e      	add	r6, r7
 80048fe:	42be      	cmp	r6, r7
 8004900:	f67e aa3b 	bls.w	8002d7a <d_print_comp+0x1e6>
 8004904:	f04f 0800 	mov.w	r8, #0
 8004908:	e018      	b.n	800493c <d_print_comp+0x1da8>
 800490a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800490e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004912:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004916:	4620      	mov	r0, r4
 8004918:	4798      	blx	r3
 800491a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800491e:	3301      	adds	r3, #1
 8004920:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004924:	2100      	movs	r1, #0
 8004926:	2301      	movs	r3, #1
 8004928:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800492c:	f804 9001 	strb.w	r9, [r4, r1]
 8004930:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004934:	3701      	adds	r7, #1
 8004936:	42be      	cmp	r6, r7
 8004938:	f240 80e1 	bls.w	8004afe <d_print_comp+0x1f6a>
 800493c:	1bf3      	subs	r3, r6, r7
 800493e:	2b03      	cmp	r3, #3
 8004940:	f897 9000 	ldrb.w	r9, [r7]
 8004944:	dd02      	ble.n	800494c <d_print_comp+0x1db8>
 8004946:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800494a:	d005      	beq.n	8004958 <d_print_comp+0x1dc4>
 800494c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004950:	29ff      	cmp	r1, #255	; 0xff
 8004952:	d0da      	beq.n	800490a <d_print_comp+0x1d76>
 8004954:	1c4b      	adds	r3, r1, #1
 8004956:	e7e7      	b.n	8004928 <d_print_comp+0x1d94>
 8004958:	787b      	ldrb	r3, [r7, #1]
 800495a:	2b5f      	cmp	r3, #95	; 0x5f
 800495c:	d1f6      	bne.n	800494c <d_print_comp+0x1db8>
 800495e:	78bb      	ldrb	r3, [r7, #2]
 8004960:	2b55      	cmp	r3, #85	; 0x55
 8004962:	d1f3      	bne.n	800494c <d_print_comp+0x1db8>
 8004964:	1cf9      	adds	r1, r7, #3
 8004966:	2000      	movs	r0, #0
 8004968:	e002      	b.n	8004970 <d_print_comp+0x1ddc>
 800496a:	4613      	mov	r3, r2
 800496c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8004970:	428e      	cmp	r6, r1
 8004972:	468a      	mov	sl, r1
 8004974:	d9ea      	bls.n	800494c <d_print_comp+0x1db8>
 8004976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800497a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800497e:	fa5f fe82 	uxtb.w	lr, r2
 8004982:	f1be 0f09 	cmp.w	lr, #9
 8004986:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800498a:	d9ee      	bls.n	800496a <d_print_comp+0x1dd6>
 800498c:	f1bc 0f05 	cmp.w	ip, #5
 8004990:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004994:	f200 85c7 	bhi.w	8005526 <d_print_comp+0x2992>
 8004998:	3b37      	subs	r3, #55	; 0x37
 800499a:	e7e7      	b.n	800496c <d_print_comp+0x1dd8>
 800499c:	0801c360 	.word	0x0801c360
 80049a0:	0801c29c 	.word	0x0801c29c
 80049a4:	0801c3c0 	.word	0x0801c3c0
 80049a8:	0801c1ec 	.word	0x0801c1ec
 80049ac:	0801c260 	.word	0x0801c260
 80049b0:	9905      	ldr	r1, [sp, #20]
 80049b2:	686a      	ldr	r2, [r5, #4]
 80049b4:	f7fe b9e1 	b.w	8002d7a <d_print_comp+0x1e6>
 80049b8:	68aa      	ldr	r2, [r5, #8]
 80049ba:	9201      	str	r2, [sp, #4]
 80049bc:	4619      	mov	r1, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f47e aa26 	bne.w	8002e10 <d_print_comp+0x27c>
 80049c4:	9905      	ldr	r1, [sp, #20]
 80049c6:	686a      	ldr	r2, [r5, #4]
 80049c8:	f7fe b9d7 	b.w	8002d7a <d_print_comp+0x1e6>
 80049cc:	4ece      	ldr	r6, [pc, #824]	; (8004d08 <d_print_comp+0x2174>)
 80049ce:	f106 0904 	add.w	r9, r6, #4
 80049d2:	e014      	b.n	80049fe <d_print_comp+0x1e6a>
 80049d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049dc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80049e0:	4798      	blx	r3
 80049e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049e6:	3301      	adds	r3, #1
 80049e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049ec:	2200      	movs	r2, #0
 80049ee:	2301      	movs	r3, #1
 80049f0:	45b1      	cmp	r9, r6
 80049f2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80049f6:	54a7      	strb	r7, [r4, r2]
 80049f8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80049fc:	d008      	beq.n	8004a10 <d_print_comp+0x1e7c>
 80049fe:	2bff      	cmp	r3, #255	; 0xff
 8004a00:	4619      	mov	r1, r3
 8004a02:	4620      	mov	r0, r4
 8004a04:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004a08:	d0e4      	beq.n	80049d4 <d_print_comp+0x1e40>
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	e7ef      	b.n	80049f0 <d_print_comp+0x1e5c>
 8004a10:	9905      	ldr	r1, [sp, #20]
 8004a12:	686a      	ldr	r2, [r5, #4]
 8004a14:	f7fe b9b1 	b.w	8002d7a <d_print_comp+0x1e6>
 8004a18:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8004a1c:	f7ff ba66 	b.w	8003eec <d_print_comp+0x1358>
 8004a20:	2700      	movs	r7, #0
 8004a22:	f7ff ba54 	b.w	8003ece <d_print_comp+0x133a>
 8004a26:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8004a2a:	2f00      	cmp	r7, #0
 8004a2c:	f43e a9a5 	beq.w	8002d7a <d_print_comp+0x1e6>
 8004a30:	4437      	add	r7, r6
 8004a32:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004a36:	3f01      	subs	r7, #1
 8004a38:	3e01      	subs	r6, #1
 8004a3a:	f04f 0900 	mov.w	r9, #0
 8004a3e:	e015      	b.n	8004a6c <d_print_comp+0x1ed8>
 8004a40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a48:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004a4c:	4798      	blx	r3
 8004a4e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a52:	3301      	adds	r3, #1
 8004a54:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	42b7      	cmp	r7, r6
 8004a5e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a62:	f804 8002 	strb.w	r8, [r4, r2]
 8004a66:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004a6a:	d008      	beq.n	8004a7e <d_print_comp+0x1eea>
 8004a6c:	2bff      	cmp	r3, #255	; 0xff
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4620      	mov	r0, r4
 8004a72:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004a76:	d0e3      	beq.n	8004a40 <d_print_comp+0x1eac>
 8004a78:	461a      	mov	r2, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	e7ee      	b.n	8004a5c <d_print_comp+0x1ec8>
 8004a7e:	9905      	ldr	r1, [sp, #20]
 8004a80:	686a      	ldr	r2, [r5, #4]
 8004a82:	f7fe b97a 	b.w	8002d7a <d_print_comp+0x1e6>
 8004a86:	68aa      	ldr	r2, [r5, #8]
 8004a88:	49a0      	ldr	r1, [pc, #640]	; (8004d0c <d_print_comp+0x2178>)
 8004a8a:	3201      	adds	r2, #1
 8004a8c:	a808      	add	r0, sp, #32
 8004a8e:	f00e fe39 	bl	8013704 <sprintf>
 8004a92:	a808      	add	r0, sp, #32
 8004a94:	f002 f96e 	bl	8006d74 <strlen>
 8004a98:	b328      	cbz	r0, 8004ae6 <d_print_comp+0x1f52>
 8004a9a:	ae08      	add	r6, sp, #32
 8004a9c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004aa0:	eb06 0900 	add.w	r9, r6, r0
 8004aa4:	f04f 0800 	mov.w	r8, #0
 8004aa8:	e014      	b.n	8004ad4 <d_print_comp+0x1f40>
 8004aaa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004aae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ab2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ab6:	4798      	blx	r3
 8004ab8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004abc:	3301      	adds	r3, #1
 8004abe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	45b1      	cmp	r9, r6
 8004ac8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004acc:	54a7      	strb	r7, [r4, r2]
 8004ace:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004ad2:	d008      	beq.n	8004ae6 <d_print_comp+0x1f52>
 8004ad4:	2bff      	cmp	r3, #255	; 0xff
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004ade:	d0e4      	beq.n	8004aaa <d_print_comp+0x1f16>
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	e7ef      	b.n	8004ac6 <d_print_comp+0x1f32>
 8004ae6:	9905      	ldr	r1, [sp, #20]
 8004ae8:	686a      	ldr	r2, [r5, #4]
 8004aea:	f7fe b946 	b.w	8002d7a <d_print_comp+0x1e6>
 8004aee:	9905      	ldr	r1, [sp, #20]
 8004af0:	686a      	ldr	r2, [r5, #4]
 8004af2:	f7fe b942 	b.w	8002d7a <d_print_comp+0x1e6>
 8004af6:	9905      	ldr	r1, [sp, #20]
 8004af8:	686a      	ldr	r2, [r5, #4]
 8004afa:	f7fe b93e 	b.w	8002d7a <d_print_comp+0x1e6>
 8004afe:	9905      	ldr	r1, [sp, #20]
 8004b00:	686a      	ldr	r2, [r5, #4]
 8004b02:	f7fe b93a 	b.w	8002d7a <d_print_comp+0x1e6>
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b0c:	f47e abf6 	bne.w	80032fc <d_print_comp+0x768>
 8004b10:	f105 030c 	add.w	r3, r5, #12
 8004b14:	68aa      	ldr	r2, [r5, #8]
 8004b16:	4631      	mov	r1, r6
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f001 fd95 	bl	8006648 <d_maybe_print_fold_expression.isra.20>
 8004b1e:	4680      	mov	r8, r0
 8004b20:	2800      	cmp	r0, #0
 8004b22:	f040 86a0 	bne.w	8005866 <d_print_comp+0x2cd2>
 8004b26:	e9d5 7202 	ldrd	r7, r2, [r5, #8]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	68d3      	ldr	r3, [r2, #12]
 8004b2e:	6808      	ldr	r0, [r1, #0]
 8004b30:	4977      	ldr	r1, [pc, #476]	; (8004d10 <d_print_comp+0x217c>)
 8004b32:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004b36:	e9d3 a902 	ldrd	sl, r9, [r3, #8]
 8004b3a:	f002 f911 	bl	8006d60 <strcmp>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	f000 8674 	beq.w	800582c <d_print_comp+0x2c98>
 8004b44:	2204      	movs	r2, #4
 8004b46:	4973      	ldr	r1, [pc, #460]	; (8004d14 <d_print_comp+0x2180>)
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7fb fbff 	bl	800034c <d_append_buffer>
 8004b4e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004b52:	b303      	cbz	r3, 8004b96 <d_print_comp+0x2002>
 8004b54:	465a      	mov	r2, fp
 8004b56:	4631      	mov	r1, r6
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f001 fd23 	bl	80065a4 <d_print_subexpr>
 8004b5e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004b62:	2fff      	cmp	r7, #255	; 0xff
 8004b64:	d110      	bne.n	8004b88 <d_print_comp+0x1ff4>
 8004b66:	4639      	mov	r1, r7
 8004b68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b6c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004b70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b74:	4620      	mov	r0, r4
 8004b76:	4798      	blx	r3
 8004b78:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004b7c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004b80:	3301      	adds	r3, #1
 8004b82:	4647      	mov	r7, r8
 8004b84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004b88:	2320      	movs	r3, #32
 8004b8a:	1c7a      	adds	r2, r7, #1
 8004b8c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004b90:	55e3      	strb	r3, [r4, r7]
 8004b92:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004b96:	4652      	mov	r2, sl
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7fd fffa 	bl	8002b94 <d_print_comp>
 8004ba0:	f1b9 0f00 	cmp.w	r9, #0
 8004ba4:	f000 8663 	beq.w	800586e <d_print_comp+0x2cda>
 8004ba8:	464a      	mov	r2, r9
 8004baa:	4631      	mov	r1, r6
 8004bac:	4620      	mov	r0, r4
 8004bae:	f001 fcf9 	bl	80065a4 <d_print_subexpr>
 8004bb2:	9905      	ldr	r1, [sp, #20]
 8004bb4:	686a      	ldr	r2, [r5, #4]
 8004bb6:	f7fe b8e0 	b.w	8002d7a <d_print_comp+0x1e6>
 8004bba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bbe:	4956      	ldr	r1, [pc, #344]	; (8004d18 <d_print_comp+0x2184>)
 8004bc0:	f8d3 a000 	ldr.w	sl, [r3]
 8004bc4:	4650      	mov	r0, sl
 8004bc6:	f002 f8cb 	bl	8006d60 <strcmp>
 8004bca:	f898 3000 	ldrb.w	r3, [r8]
 8004bce:	b910      	cbnz	r0, 8004bd6 <d_print_comp+0x2042>
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	f000 852b 	beq.w	800562c <d_print_comp+0x2a98>
 8004bd6:	2b38      	cmp	r3, #56	; 0x38
 8004bd8:	f000 850c 	beq.w	80055f4 <d_print_comp+0x2a60>
 8004bdc:	494f      	ldr	r1, [pc, #316]	; (8004d1c <d_print_comp+0x2188>)
 8004bde:	4650      	mov	r0, sl
 8004be0:	f002 f8be 	bl	8006d60 <strcmp>
 8004be4:	4607      	mov	r7, r0
 8004be6:	2800      	cmp	r0, #0
 8004be8:	f000 8513 	beq.w	8005612 <d_print_comp+0x2a7e>
 8004bec:	494c      	ldr	r1, [pc, #304]	; (8004d20 <d_print_comp+0x218c>)
 8004bee:	4650      	mov	r0, sl
 8004bf0:	f002 f8b6 	bl	8006d60 <strcmp>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	f000 8333 	beq.w	8005260 <d_print_comp+0x26cc>
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	464a      	mov	r2, r9
 8004c00:	f001 fc90 	bl	8006524 <d_print_expr_op>
 8004c04:	4947      	ldr	r1, [pc, #284]	; (8004d24 <d_print_comp+0x2190>)
 8004c06:	4650      	mov	r0, sl
 8004c08:	f002 f8aa 	bl	8006d60 <strcmp>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	f000 83b0 	beq.w	8005372 <d_print_comp+0x27de>
 8004c12:	4650      	mov	r0, sl
 8004c14:	4944      	ldr	r1, [pc, #272]	; (8004d28 <d_print_comp+0x2194>)
 8004c16:	f002 f8a3 	bl	8006d60 <strcmp>
 8004c1a:	4681      	mov	r9, r0
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f47e abd7 	bne.w	80033d0 <d_print_comp+0x83c>
 8004c22:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c26:	2fff      	cmp	r7, #255	; 0xff
 8004c28:	d110      	bne.n	8004c4c <d_print_comp+0x20b8>
 8004c2a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8004c2e:	4639      	mov	r1, r7
 8004c30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c38:	4620      	mov	r0, r4
 8004c3a:	4798      	blx	r3
 8004c3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c40:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8004c44:	3301      	adds	r3, #1
 8004c46:	464f      	mov	r7, r9
 8004c48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c4c:	1c78      	adds	r0, r7, #1
 8004c4e:	2328      	movs	r3, #40	; 0x28
 8004c50:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004c54:	4642      	mov	r2, r8
 8004c56:	55e3      	strb	r3, [r4, r7]
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c60:	f7fd ff98 	bl	8002b94 <d_print_comp>
 8004c64:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c68:	2fff      	cmp	r7, #255	; 0xff
 8004c6a:	d111      	bne.n	8004c90 <d_print_comp+0x20fc>
 8004c6c:	2600      	movs	r6, #0
 8004c6e:	4639      	mov	r1, r7
 8004c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c74:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004c78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4798      	blx	r3
 8004c80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c84:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004c88:	3301      	adds	r3, #1
 8004c8a:	4637      	mov	r7, r6
 8004c8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c90:	1c7a      	adds	r2, r7, #1
 8004c92:	2329      	movs	r3, #41	; 0x29
 8004c94:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004c98:	55e3      	strb	r3, [r4, r7]
 8004c9a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c9e:	686a      	ldr	r2, [r5, #4]
 8004ca0:	9905      	ldr	r1, [sp, #20]
 8004ca2:	f7fe b86a 	b.w	8002d7a <d_print_comp+0x1e6>
 8004ca6:	f105 020c 	add.w	r2, r5, #12
 8004caa:	4641      	mov	r1, r8
 8004cac:	4620      	mov	r0, r4
 8004cae:	f001 f935 	bl	8005f1c <d_print_function_type.isra.15>
 8004cb2:	68aa      	ldr	r2, [r5, #8]
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	f000 83fd 	beq.w	80054b4 <d_print_comp+0x2920>
 8004cba:	4641      	mov	r1, r8
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7fd ff69 	bl	8002b94 <d_print_comp>
 8004cc2:	9905      	ldr	r1, [sp, #20]
 8004cc4:	686a      	ldr	r2, [r5, #4]
 8004cc6:	f7fe b858 	b.w	8002d7a <d_print_comp+0x1e6>
 8004cca:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004cce:	2fff      	cmp	r7, #255	; 0xff
 8004cd0:	d111      	bne.n	8004cf6 <d_print_comp+0x2162>
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cda:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004cde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4798      	blx	r3
 8004ce6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cea:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004cee:	3301      	adds	r3, #1
 8004cf0:	4637      	mov	r7, r6
 8004cf2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	1c7a      	adds	r2, r7, #1
 8004cfa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004cfe:	55e3      	strb	r3, [r4, r7]
 8004d00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d04:	f7fe bf72 	b.w	8003bec <d_print_comp+0x1058>
 8004d08:	0801c440 	.word	0x0801c440
 8004d0c:	0801c1ec 	.word	0x0801c1ec
 8004d10:	0801c200 	.word	0x0801c200
 8004d14:	0801c3fc 	.word	0x0801c3fc
 8004d18:	0801c3e4 	.word	0x0801c3e4
 8004d1c:	0801c3e8 	.word	0x0801c3e8
 8004d20:	0801c1f0 	.word	0x0801c1f0
 8004d24:	0801c3ec 	.word	0x0801c3ec
 8004d28:	0801c70c 	.word	0x0801c70c
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f893 8010 	ldrb.w	r8, [r3, #16]
 8004d32:	f1b8 0f00 	cmp.w	r8, #0
 8004d36:	f43e aa89 	beq.w	800324c <d_print_comp+0x6b8>
 8004d3a:	f1b8 0f06 	cmp.w	r8, #6
 8004d3e:	f240 843f 	bls.w	80055c0 <d_print_comp+0x2a2c>
 8004d42:	f1b8 0f07 	cmp.w	r8, #7
 8004d46:	f47e aa81 	bne.w	800324c <d_print_comp+0x6b8>
 8004d4a:	68eb      	ldr	r3, [r5, #12]
 8004d4c:	781a      	ldrb	r2, [r3, #0]
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	f47e aa7c 	bne.w	800324c <d_print_comp+0x6b8>
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	2a01      	cmp	r2, #1
 8004d58:	f47e aa78 	bne.w	800324c <d_print_comp+0x6b8>
 8004d5c:	283c      	cmp	r0, #60	; 0x3c
 8004d5e:	f47e aa75 	bne.w	800324c <d_print_comp+0x6b8>
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b30      	cmp	r3, #48	; 0x30
 8004d68:	f000 84b6 	beq.w	80056d8 <d_print_comp+0x2b44>
 8004d6c:	2b31      	cmp	r3, #49	; 0x31
 8004d6e:	f47e aa6d 	bne.w	800324c <d_print_comp+0x6b8>
 8004d72:	2204      	movs	r2, #4
 8004d74:	49c3      	ldr	r1, [pc, #780]	; (8005084 <d_print_comp+0x24f0>)
 8004d76:	4620      	mov	r0, r4
 8004d78:	f7fb fae8 	bl	800034c <d_append_buffer>
 8004d7c:	9905      	ldr	r1, [sp, #20]
 8004d7e:	686a      	ldr	r2, [r5, #4]
 8004d80:	f7fd bffb 	b.w	8002d7a <d_print_comp+0x1e6>
 8004d84:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004d88:	2fff      	cmp	r7, #255	; 0xff
 8004d8a:	d112      	bne.n	8004db2 <d_print_comp+0x221e>
 8004d8c:	f04f 0800 	mov.w	r8, #0
 8004d90:	4639      	mov	r1, r7
 8004d92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d96:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d9e:	4620      	mov	r0, r4
 8004da0:	4798      	blx	r3
 8004da2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004da6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004daa:	3301      	adds	r3, #1
 8004dac:	4647      	mov	r7, r8
 8004dae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004db2:	1c7a      	adds	r2, r7, #1
 8004db4:	235b      	movs	r3, #91	; 0x5b
 8004db6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dba:	55e3      	strb	r3, [r4, r7]
 8004dbc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	68ea      	ldr	r2, [r5, #12]
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f7fd fee5 	bl	8002b94 <d_print_comp>
 8004dca:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004dce:	2fff      	cmp	r7, #255	; 0xff
 8004dd0:	d111      	bne.n	8004df6 <d_print_comp+0x2262>
 8004dd2:	2600      	movs	r6, #0
 8004dd4:	4639      	mov	r1, r7
 8004dd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004dda:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004dde:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004de2:	4620      	mov	r0, r4
 8004de4:	4798      	blx	r3
 8004de6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dea:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004dee:	3301      	adds	r3, #1
 8004df0:	4637      	mov	r7, r6
 8004df2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004df6:	1c7a      	adds	r2, r7, #1
 8004df8:	235d      	movs	r3, #93	; 0x5d
 8004dfa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dfe:	55e3      	strb	r3, [r4, r7]
 8004e00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e04:	686a      	ldr	r2, [r5, #4]
 8004e06:	9905      	ldr	r1, [sp, #20]
 8004e08:	f7fd bfb7 	b.w	8002d7a <d_print_comp+0x1e6>
 8004e0c:	1c59      	adds	r1, r3, #1
 8004e0e:	2229      	movs	r2, #41	; 0x29
 8004e10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e14:	54e2      	strb	r2, [r4, r3]
 8004e16:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004e1a:	782b      	ldrb	r3, [r5, #0]
 8004e1c:	2b3d      	cmp	r3, #61	; 0x3d
 8004e1e:	f47e aa57 	bne.w	80032d0 <d_print_comp+0x73c>
 8004e22:	29ff      	cmp	r1, #255	; 0xff
 8004e24:	d10f      	bne.n	8004e46 <d_print_comp+0x22b2>
 8004e26:	2700      	movs	r7, #0
 8004e28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e2c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004e30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e34:	4620      	mov	r0, r4
 8004e36:	4798      	blx	r3
 8004e38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e3c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004e40:	3301      	adds	r3, #1
 8004e42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e46:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004e4a:	232d      	movs	r3, #45	; 0x2d
 8004e4c:	1c51      	adds	r1, r2, #1
 8004e4e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e52:	54a3      	strb	r3, [r4, r2]
 8004e54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e58:	f7fe ba3a 	b.w	80032d0 <d_print_comp+0x73c>
 8004e5c:	4f8a      	ldr	r7, [pc, #552]	; (8005088 <d_print_comp+0x24f4>)
 8004e5e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004e62:	f107 0a02 	add.w	sl, r7, #2
 8004e66:	e016      	b.n	8004e96 <d_print_comp+0x2302>
 8004e68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e70:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004e74:	4798      	blx	r3
 8004e76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e80:	2200      	movs	r2, #0
 8004e82:	2301      	movs	r3, #1
 8004e84:	45ba      	cmp	sl, r7
 8004e86:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004e8a:	f804 8002 	strb.w	r8, [r4, r2]
 8004e8e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004e92:	f43f a980 	beq.w	8004196 <d_print_comp+0x1602>
 8004e96:	2bff      	cmp	r3, #255	; 0xff
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004ea0:	d0e2      	beq.n	8004e68 <d_print_comp+0x22d4>
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	e7ed      	b.n	8004e84 <d_print_comp+0x22f0>
 8004ea8:	6892      	ldr	r2, [r2, #8]
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7fd fe71 	bl	8002b94 <d_print_comp>
 8004eb2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004eb6:	b113      	cbz	r3, 8004ebe <d_print_comp+0x232a>
 8004eb8:	9b08      	ldr	r3, [sp, #32]
 8004eba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004ebe:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004ec2:	2b3c      	cmp	r3, #60	; 0x3c
 8004ec4:	f000 82c4 	beq.w	8005450 <d_print_comp+0x28bc>
 8004ec8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004ecc:	2fff      	cmp	r7, #255	; 0xff
 8004ece:	d112      	bne.n	8004ef6 <d_print_comp+0x2362>
 8004ed0:	f04f 0800 	mov.w	r8, #0
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004eda:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ede:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	4798      	blx	r3
 8004ee6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004eea:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004eee:	3301      	adds	r3, #1
 8004ef0:	4647      	mov	r7, r8
 8004ef2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ef6:	233c      	movs	r3, #60	; 0x3c
 8004ef8:	1c7a      	adds	r2, r7, #1
 8004efa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004efe:	55e3      	strb	r3, [r4, r7]
 8004f00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f04:	68ab      	ldr	r3, [r5, #8]
 8004f06:	4631      	mov	r1, r6
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f7fd fe42 	bl	8002b94 <d_print_comp>
 8004f10:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004f14:	2b3e      	cmp	r3, #62	; 0x3e
 8004f16:	f000 827d 	beq.w	8005414 <d_print_comp+0x2880>
 8004f1a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f1e:	2fff      	cmp	r7, #255	; 0xff
 8004f20:	d111      	bne.n	8004f46 <d_print_comp+0x23b2>
 8004f22:	2600      	movs	r6, #0
 8004f24:	4639      	mov	r1, r7
 8004f26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f2a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f32:	4620      	mov	r0, r4
 8004f34:	4798      	blx	r3
 8004f36:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f3a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004f3e:	3301      	adds	r3, #1
 8004f40:	4637      	mov	r7, r6
 8004f42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f46:	233e      	movs	r3, #62	; 0x3e
 8004f48:	1c7a      	adds	r2, r7, #1
 8004f4a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f4e:	55e3      	strb	r3, [r4, r7]
 8004f50:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f54:	f7ff badc 	b.w	8004510 <d_print_comp+0x197c>
 8004f58:	4f4c      	ldr	r7, [pc, #304]	; (800508c <d_print_comp+0x24f8>)
 8004f5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004f5e:	f107 0905 	add.w	r9, r7, #5
 8004f62:	f04f 0a00 	mov.w	sl, #0
 8004f66:	e016      	b.n	8004f96 <d_print_comp+0x2402>
 8004f68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f70:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004f74:	4798      	blx	r3
 8004f76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f80:	2200      	movs	r2, #0
 8004f82:	2301      	movs	r3, #1
 8004f84:	45b9      	cmp	r9, r7
 8004f86:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004f8a:	f804 8002 	strb.w	r8, [r4, r2]
 8004f8e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004f92:	f43e ab41 	beq.w	8003618 <d_print_comp+0xa84>
 8004f96:	2bff      	cmp	r3, #255	; 0xff
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004fa0:	d0e2      	beq.n	8004f68 <d_print_comp+0x23d4>
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	e7ed      	b.n	8004f84 <d_print_comp+0x23f0>
 8004fa8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004fac:	2fff      	cmp	r7, #255	; 0xff
 8004fae:	d112      	bne.n	8004fd6 <d_print_comp+0x2442>
 8004fb0:	f04f 0a00 	mov.w	sl, #0
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fba:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	4798      	blx	r3
 8004fc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fca:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8004fce:	3301      	adds	r3, #1
 8004fd0:	4657      	mov	r7, sl
 8004fd2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	1c7a      	adds	r2, r7, #1
 8004fda:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004fde:	55e3      	strb	r3, [r4, r7]
 8004fe0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004fe4:	f7fe bdda 	b.w	8003b9c <d_print_comp+0x1008>
 8004fe8:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8004fec:	2900      	cmp	r1, #0
 8004fee:	f6fe ad99 	blt.w	8003b24 <d_print_comp+0xf90>
 8004ff2:	f7fb fbc3 	bl	800077c <d_index_template_argument.part.9>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	f47e ad93 	bne.w	8003b24 <d_print_comp+0xf90>
 8004ffe:	2301      	movs	r3, #1
 8005000:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005004:	686a      	ldr	r2, [r5, #4]
 8005006:	9905      	ldr	r1, [sp, #20]
 8005008:	f7fd beb7 	b.w	8002d7a <d_print_comp+0x1e6>
 800500c:	9905      	ldr	r1, [sp, #20]
 800500e:	686a      	ldr	r2, [r5, #4]
 8005010:	f7fd beb3 	b.w	8002d7a <d_print_comp+0x1e6>
 8005014:	220d      	movs	r2, #13
 8005016:	491e      	ldr	r1, [pc, #120]	; (8005090 <d_print_comp+0x24fc>)
 8005018:	4620      	mov	r0, r4
 800501a:	f7fb f997 	bl	800034c <d_append_buffer>
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	4620      	mov	r0, r4
 8005022:	3101      	adds	r1, #1
 8005024:	f7fb fc84 	bl	8000930 <d_append_num>
 8005028:	2203      	movs	r2, #3
 800502a:	491a      	ldr	r1, [pc, #104]	; (8005094 <d_print_comp+0x2500>)
 800502c:	4620      	mov	r0, r4
 800502e:	f7fb f98d 	bl	800034c <d_append_buffer>
 8005032:	68bf      	ldr	r7, [r7, #8]
 8005034:	f7ff b8b4 	b.w	80041a0 <d_print_comp+0x160c>
 8005038:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800503c:	9905      	ldr	r1, [sp, #20]
 800503e:	686a      	ldr	r2, [r5, #4]
 8005040:	42b8      	cmp	r0, r7
 8005042:	f47d ae9a 	bne.w	8002d7a <d_print_comp+0x1e6>
 8005046:	3b01      	subs	r3, #1
 8005048:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800504c:	f7fd be95 	b.w	8002d7a <d_print_comp+0x1e6>
 8005050:	4642      	mov	r2, r8
 8005052:	465b      	mov	r3, fp
 8005054:	46ab      	mov	fp, r5
 8005056:	f1bb 0f04 	cmp.w	fp, #4
 800505a:	46a0      	mov	r8, r4
 800505c:	461d      	mov	r5, r3
 800505e:	4614      	mov	r4, r2
 8005060:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
 8005064:	f000 82a3 	beq.w	80055ae <d_print_comp+0x2a1a>
 8005068:	f1bb 0f02 	cmp.w	fp, #2
 800506c:	d137      	bne.n	80050de <d_print_comp+0x254a>
 800506e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8005072:	f89a 3000 	ldrb.w	r3, [sl]
 8005076:	2b46      	cmp	r3, #70	; 0x46
 8005078:	f000 8327 	beq.w	80056ca <d_print_comp+0x2b36>
 800507c:	eb09 1207 	add.w	r2, r9, r7, lsl #4
 8005080:	3a0c      	subs	r2, #12
 8005082:	e020      	b.n	80050c6 <d_print_comp+0x2532>
 8005084:	0801c418 	.word	0x0801c418
 8005088:	0801c23c 	.word	0x0801c23c
 800508c:	0801c3b0 	.word	0x0801c3b0
 8005090:	0801c240 	.word	0x0801c240
 8005094:	0801c250 	.word	0x0801c250
 8005098:	2f04      	cmp	r7, #4
 800509a:	f43f a81d 	beq.w	80040d8 <d_print_comp+0x1544>
 800509e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80050a2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80050a6:	2300      	movs	r3, #0
 80050a8:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80050ac:	f84e ac10 	str.w	sl, [lr, #-16]
 80050b0:	9b01      	ldr	r3, [sp, #4]
 80050b2:	f8da a008 	ldr.w	sl, [sl, #8]
 80050b6:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
 80050ba:	3701      	adds	r7, #1
 80050bc:	f84e bc04 	str.w	fp, [lr, #-4]
 80050c0:	f84e 3c08 	str.w	r3, [lr, #-8]
 80050c4:	4672      	mov	r2, lr
 80050c6:	f89a 0000 	ldrb.w	r0, [sl]
 80050ca:	f7fb f975 	bl	80003b8 <is_fnqual_component_type>
 80050ce:	f1a2 0b04 	sub.w	fp, r2, #4
 80050d2:	f102 0e10 	add.w	lr, r2, #16
 80050d6:	f102 0c0c 	add.w	ip, r2, #12
 80050da:	2800      	cmp	r0, #0
 80050dc:	d1dc      	bne.n	8005098 <d_print_comp+0x2504>
 80050de:	68ea      	ldr	r2, [r5, #12]
 80050e0:	4631      	mov	r1, r6
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7fd fd56 	bl	8002b94 <d_print_comp>
 80050e8:	f898 3000 	ldrb.w	r3, [r8]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	bf04      	itt	eq
 80050f0:	9b06      	ldreq	r3, [sp, #24]
 80050f2:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 80050f6:	013f      	lsls	r7, r7, #4
 80050f8:	f04f 0a20 	mov.w	sl, #32
 80050fc:	46a8      	mov	r8, r5
 80050fe:	eb09 0b07 	add.w	fp, r9, r7
 8005102:	f85b 5c08 	ldr.w	r5, [fp, #-8]
 8005106:	bb0d      	cbnz	r5, 800514c <d_print_comp+0x25b8>
 8005108:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800510c:	2bff      	cmp	r3, #255	; 0xff
 800510e:	4620      	mov	r0, r4
 8005110:	4619      	mov	r1, r3
 8005112:	d10e      	bne.n	8005132 <d_print_comp+0x259e>
 8005114:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005118:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800511c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005120:	4798      	blx	r3
 8005122:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005126:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005130:	462b      	mov	r3, r5
 8005132:	1c59      	adds	r1, r3, #1
 8005134:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005138:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800513c:	f804 a003 	strb.w	sl, [r4, r3]
 8005140:	4631      	mov	r1, r6
 8005142:	4620      	mov	r0, r4
 8005144:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005148:	f000 fbba 	bl	80058c0 <d_print_mod>
 800514c:	3f10      	subs	r7, #16
 800514e:	d1d6      	bne.n	80050fe <d_print_comp+0x256a>
 8005150:	9b02      	ldr	r3, [sp, #8]
 8005152:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005156:	4645      	mov	r5, r8
 8005158:	f7fe bfc1 	b.w	80040de <d_print_comp+0x154a>
 800515c:	4631      	mov	r1, r6
 800515e:	68aa      	ldr	r2, [r5, #8]
 8005160:	4620      	mov	r0, r4
 8005162:	f7fd fd17 	bl	8002b94 <d_print_comp>
 8005166:	9905      	ldr	r1, [sp, #20]
 8005168:	686a      	ldr	r2, [r5, #4]
 800516a:	f7fd be06 	b.w	8002d7a <d_print_comp+0x1e6>
 800516e:	460f      	mov	r7, r1
 8005170:	46a9      	mov	r9, r5
 8005172:	f7fe bebb 	b.w	8003eec <d_print_comp+0x1358>
 8005176:	4644      	mov	r4, r8
 8005178:	465d      	mov	r5, fp
 800517a:	f8c8 1114 	str.w	r1, [r8, #276]	; 0x114
 800517e:	f7fe bfab 	b.w	80040d8 <d_print_comp+0x1544>
 8005182:	68ea      	ldr	r2, [r5, #12]
 8005184:	4631      	mov	r1, r6
 8005186:	4620      	mov	r0, r4
 8005188:	f7fd fd04 	bl	8002b94 <d_print_comp>
 800518c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518e:	9a01      	ldr	r2, [sp, #4]
 8005190:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8005194:	2b00      	cmp	r3, #0
 8005196:	f43e ab19 	beq.w	80037cc <d_print_comp+0xc38>
 800519a:	f7fe bb1f 	b.w	80037dc <d_print_comp+0xc48>
 800519e:	2301      	movs	r3, #1
 80051a0:	4664      	mov	r4, ip
 80051a2:	f8cc 3118 	str.w	r3, [ip, #280]	; 0x118
 80051a6:	f7fe bb19 	b.w	80037dc <d_print_comp+0xc48>
 80051aa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80051ae:	f7fe bead 	b.w	8003f0c <d_print_comp+0x1378>
 80051b2:	4631      	mov	r1, r6
 80051b4:	68aa      	ldr	r2, [r5, #8]
 80051b6:	4620      	mov	r0, r4
 80051b8:	f001 f9f4 	bl	80065a4 <d_print_subexpr>
 80051bc:	2203      	movs	r2, #3
 80051be:	49bf      	ldr	r1, [pc, #764]	; (80054bc <d_print_comp+0x2928>)
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7fb f8c3 	bl	800034c <d_append_buffer>
 80051c6:	9905      	ldr	r1, [sp, #20]
 80051c8:	686a      	ldr	r2, [r5, #4]
 80051ca:	f7fd bdd6 	b.w	8002d7a <d_print_comp+0x1e6>
 80051ce:	f8d4 e130 	ldr.w	lr, [r4, #304]	; 0x130
 80051d2:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 80051d6:	f1be 0f00 	cmp.w	lr, #0
 80051da:	dd17      	ble.n	800520c <d_print_comp+0x2678>
 80051dc:	6810      	ldr	r0, [r2, #0]
 80051de:	4581      	cmp	r9, r0
 80051e0:	f000 81a7 	beq.w	8005532 <d_print_comp+0x299e>
 80051e4:	f102 0b08 	add.w	fp, r2, #8
 80051e8:	46bc      	mov	ip, r7
 80051ea:	9101      	str	r1, [sp, #4]
 80051ec:	4670      	mov	r0, lr
 80051ee:	e004      	b.n	80051fa <d_print_comp+0x2666>
 80051f0:	f852 103c 	ldr.w	r1, [r2, ip, lsl #3]
 80051f4:	4589      	cmp	r9, r1
 80051f6:	f000 819d 	beq.w	8005534 <d_print_comp+0x29a0>
 80051fa:	f10c 0c01 	add.w	ip, ip, #1
 80051fe:	4560      	cmp	r0, ip
 8005200:	46da      	mov	sl, fp
 8005202:	f10b 0b08 	add.w	fp, fp, #8
 8005206:	d1f3      	bne.n	80051f0 <d_print_comp+0x265c>
 8005208:	9901      	ldr	r1, [sp, #4]
 800520a:	4686      	mov	lr, r0
 800520c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8005210:	459e      	cmp	lr, r3
 8005212:	f280 8344 	bge.w	800589e <d_print_comp+0x2d0a>
 8005216:	f10e 0301 	add.w	r3, lr, #1
 800521a:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 800521e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8005222:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8005226:	f842 903e 	str.w	r9, [r2, lr, lsl #3]
 800522a:	f10c 0c04 	add.w	ip, ip, #4
 800522e:	2800      	cmp	r0, #0
 8005230:	f000 825b 	beq.w	80056ea <d_print_comp+0x2b56>
 8005234:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8005238:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800523c:	429a      	cmp	r2, r3
 800523e:	f102 0e01 	add.w	lr, r2, #1
 8005242:	f280 832c 	bge.w	800589e <d_print_comp+0x2d0a>
 8005246:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800524a:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 800524e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005252:	6842      	ldr	r2, [r0, #4]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	f8cc 3000 	str.w	r3, [ip]
 800525a:	6800      	ldr	r0, [r0, #0]
 800525c:	469c      	mov	ip, r3
 800525e:	e7e6      	b.n	800522e <d_print_comp+0x269a>
 8005260:	4606      	mov	r6, r0
 8005262:	4647      	mov	r7, r8
 8005264:	e001      	b.n	800526a <d_print_comp+0x26d6>
 8005266:	68ff      	ldr	r7, [r7, #12]
 8005268:	b31f      	cbz	r7, 80052b2 <d_print_comp+0x271e>
 800526a:	783b      	ldrb	r3, [r7, #0]
 800526c:	2b2f      	cmp	r3, #47	; 0x2f
 800526e:	d120      	bne.n	80052b2 <d_print_comp+0x271e>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	b1f3      	cbz	r3, 80052b2 <d_print_comp+0x271e>
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	2a4a      	cmp	r2, #74	; 0x4a
 8005278:	bf18      	it	ne
 800527a:	3601      	addne	r6, #1
 800527c:	d1f3      	bne.n	8005266 <d_print_comp+0x26d2>
 800527e:	6899      	ldr	r1, [r3, #8]
 8005280:	4620      	mov	r0, r4
 8005282:	f7fb faa1 	bl	80007c8 <d_find_pack>
 8005286:	2800      	cmp	r0, #0
 8005288:	f000 81ef 	beq.w	800566a <d_print_comp+0x2ad6>
 800528c:	7803      	ldrb	r3, [r0, #0]
 800528e:	2b2f      	cmp	r3, #47	; 0x2f
 8005290:	f040 81eb 	bne.w	800566a <d_print_comp+0x2ad6>
 8005294:	6883      	ldr	r3, [r0, #8]
 8005296:	b153      	cbz	r3, 80052ae <d_print_comp+0x271a>
 8005298:	2300      	movs	r3, #0
 800529a:	e004      	b.n	80052a6 <d_print_comp+0x2712>
 800529c:	7802      	ldrb	r2, [r0, #0]
 800529e:	2a2f      	cmp	r2, #47	; 0x2f
 80052a0:	d105      	bne.n	80052ae <d_print_comp+0x271a>
 80052a2:	6882      	ldr	r2, [r0, #8]
 80052a4:	b11a      	cbz	r2, 80052ae <d_print_comp+0x271a>
 80052a6:	68c0      	ldr	r0, [r0, #12]
 80052a8:	3301      	adds	r3, #1
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d1f6      	bne.n	800529c <d_print_comp+0x2708>
 80052ae:	441e      	add	r6, r3
 80052b0:	e7d9      	b.n	8005266 <d_print_comp+0x26d2>
 80052b2:	4631      	mov	r1, r6
 80052b4:	4620      	mov	r0, r4
 80052b6:	f7fb fb3b 	bl	8000930 <d_append_num>
 80052ba:	9905      	ldr	r1, [sp, #20]
 80052bc:	686a      	ldr	r2, [r5, #4]
 80052be:	f7fd bd5c 	b.w	8002d7a <d_print_comp+0x1e6>
 80052c2:	4631      	mov	r1, r6
 80052c4:	4620      	mov	r0, r4
 80052c6:	f001 f92d 	bl	8006524 <d_print_expr_op>
 80052ca:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80052ce:	2fff      	cmp	r7, #255	; 0xff
 80052d0:	d112      	bne.n	80052f8 <d_print_comp+0x2764>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	4639      	mov	r1, r7
 80052d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052dc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80052e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052e4:	4620      	mov	r0, r4
 80052e6:	4798      	blx	r3
 80052e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052ec:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80052f0:	3301      	adds	r3, #1
 80052f2:	4647      	mov	r7, r8
 80052f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052f8:	1c7a      	adds	r2, r7, #1
 80052fa:	233c      	movs	r3, #60	; 0x3c
 80052fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005300:	55e3      	strb	r3, [r4, r7]
 8005302:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005306:	68eb      	ldr	r3, [r5, #12]
 8005308:	4631      	mov	r1, r6
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	4620      	mov	r0, r4
 800530e:	f7fd fc41 	bl	8002b94 <d_print_comp>
 8005312:	2202      	movs	r2, #2
 8005314:	496a      	ldr	r1, [pc, #424]	; (80054c0 <d_print_comp+0x292c>)
 8005316:	4620      	mov	r0, r4
 8005318:	f7fb f818 	bl	800034c <d_append_buffer>
 800531c:	68eb      	ldr	r3, [r5, #12]
 800531e:	4631      	mov	r1, r6
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	4620      	mov	r0, r4
 8005324:	f7fd fc36 	bl	8002b94 <d_print_comp>
 8005328:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800532c:	2fff      	cmp	r7, #255	; 0xff
 800532e:	d111      	bne.n	8005354 <d_print_comp+0x27c0>
 8005330:	2600      	movs	r6, #0
 8005332:	4639      	mov	r1, r7
 8005334:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005338:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800533c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005340:	4620      	mov	r0, r4
 8005342:	4798      	blx	r3
 8005344:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005348:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800534c:	3301      	adds	r3, #1
 800534e:	4637      	mov	r7, r6
 8005350:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005354:	1c7a      	adds	r2, r7, #1
 8005356:	2329      	movs	r3, #41	; 0x29
 8005358:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800535c:	55e3      	strb	r3, [r4, r7]
 800535e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005362:	686a      	ldr	r2, [r5, #4]
 8005364:	9905      	ldr	r1, [sp, #20]
 8005366:	f7fd bd08 	b.w	8002d7a <d_print_comp+0x1e6>
 800536a:	9905      	ldr	r1, [sp, #20]
 800536c:	686a      	ldr	r2, [r5, #4]
 800536e:	f7fd bd04 	b.w	8002d7a <d_print_comp+0x1e6>
 8005372:	4642      	mov	r2, r8
 8005374:	4631      	mov	r1, r6
 8005376:	4620      	mov	r0, r4
 8005378:	f7fd fc0c 	bl	8002b94 <d_print_comp>
 800537c:	9905      	ldr	r1, [sp, #20]
 800537e:	686a      	ldr	r2, [r5, #4]
 8005380:	f7fd bcfb 	b.w	8002d7a <d_print_comp+0x1e6>
 8005384:	a918      	add	r1, sp, #96	; 0x60
 8005386:	4620      	mov	r0, r4
 8005388:	f841 3d40 	str.w	r3, [r1, #-64]!
 800538c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8005390:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8005394:	4641      	mov	r1, r8
 8005396:	960a      	str	r6, [sp, #40]	; 0x28
 8005398:	930b      	str	r3, [sp, #44]	; 0x2c
 800539a:	9509      	str	r5, [sp, #36]	; 0x24
 800539c:	f7fd fbfa 	bl	8002b94 <d_print_comp>
 80053a0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80053a2:	9b08      	ldr	r3, [sp, #32]
 80053a4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80053a8:	b9ee      	cbnz	r6, 80053e6 <d_print_comp+0x2852>
 80053aa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80053ae:	2fff      	cmp	r7, #255	; 0xff
 80053b0:	d110      	bne.n	80053d4 <d_print_comp+0x2840>
 80053b2:	4639      	mov	r1, r7
 80053b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053b8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053c0:	4620      	mov	r0, r4
 80053c2:	4798      	blx	r3
 80053c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053c8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053cc:	3301      	adds	r3, #1
 80053ce:	4637      	mov	r7, r6
 80053d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053d4:	2320      	movs	r3, #32
 80053d6:	1c7a      	adds	r2, r7, #1
 80053d8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80053dc:	55e3      	strb	r3, [r4, r7]
 80053de:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80053e2:	f7fe ba0c 	b.w	80037fe <d_print_comp+0xc6a>
 80053e6:	9905      	ldr	r1, [sp, #20]
 80053e8:	686a      	ldr	r2, [r5, #4]
 80053ea:	f7fd bcc6 	b.w	8002d7a <d_print_comp+0x1e6>
 80053ee:	4935      	ldr	r1, [pc, #212]	; (80054c4 <d_print_comp+0x2930>)
 80053f0:	68b8      	ldr	r0, [r7, #8]
 80053f2:	f00e f9ea 	bl	80137ca <strncmp>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f47e abc6 	bne.w	8003b88 <d_print_comp+0xff4>
 80053fc:	4631      	mov	r1, r6
 80053fe:	68ea      	ldr	r2, [r5, #12]
 8005400:	4620      	mov	r0, r4
 8005402:	f7fd fbc7 	bl	8002b94 <d_print_comp>
 8005406:	2202      	movs	r2, #2
 8005408:	492f      	ldr	r1, [pc, #188]	; (80054c8 <d_print_comp+0x2934>)
 800540a:	4620      	mov	r0, r4
 800540c:	f7fa ff9e 	bl	800034c <d_append_buffer>
 8005410:	f7fe bc09 	b.w	8003c26 <d_print_comp+0x1092>
 8005414:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005418:	2fff      	cmp	r7, #255	; 0xff
 800541a:	d111      	bne.n	8005440 <d_print_comp+0x28ac>
 800541c:	2600      	movs	r6, #0
 800541e:	4639      	mov	r1, r7
 8005420:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005424:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005428:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800542c:	4620      	mov	r0, r4
 800542e:	4798      	blx	r3
 8005430:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005434:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005438:	3301      	adds	r3, #1
 800543a:	4637      	mov	r7, r6
 800543c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005440:	2320      	movs	r3, #32
 8005442:	1c7a      	adds	r2, r7, #1
 8005444:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005448:	55e3      	strb	r3, [r4, r7]
 800544a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800544e:	e564      	b.n	8004f1a <d_print_comp+0x2386>
 8005450:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005454:	2fff      	cmp	r7, #255	; 0xff
 8005456:	d112      	bne.n	800547e <d_print_comp+0x28ea>
 8005458:	f04f 0800 	mov.w	r8, #0
 800545c:	4639      	mov	r1, r7
 800545e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005462:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005466:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800546a:	4620      	mov	r0, r4
 800546c:	4798      	blx	r3
 800546e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005472:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005476:	3301      	adds	r3, #1
 8005478:	4647      	mov	r7, r8
 800547a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800547e:	2320      	movs	r3, #32
 8005480:	1c7a      	adds	r2, r7, #1
 8005482:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005486:	55e3      	strb	r3, [r4, r7]
 8005488:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800548c:	e51c      	b.n	8004ec8 <d_print_comp+0x2334>
 800548e:	4640      	mov	r0, r8
 8005490:	490e      	ldr	r1, [pc, #56]	; (80054cc <d_print_comp+0x2938>)
 8005492:	f001 fc65 	bl	8006d60 <strcmp>
 8005496:	2800      	cmp	r0, #0
 8005498:	f040 81fb 	bne.w	8005892 <d_print_comp+0x2cfe>
 800549c:	68eb      	ldr	r3, [r5, #12]
 800549e:	4631      	mov	r1, r6
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	4620      	mov	r0, r4
 80054a4:	f001 f87e 	bl	80065a4 <d_print_subexpr>
 80054a8:	f7fd bc60 	b.w	8002d6c <d_print_comp+0x1d8>
 80054ac:	9905      	ldr	r1, [sp, #20]
 80054ae:	686a      	ldr	r2, [r5, #4]
 80054b0:	f7fd bc63 	b.w	8002d7a <d_print_comp+0x1e6>
 80054b4:	9905      	ldr	r1, [sp, #20]
 80054b6:	686a      	ldr	r2, [r5, #4]
 80054b8:	f7fd bc5f 	b.w	8002d7a <d_print_comp+0x1e6>
 80054bc:	0801c43c 	.word	0x0801c43c
 80054c0:	0801c3f0 	.word	0x0801c3f0
 80054c4:	0801c254 	.word	0x0801c254
 80054c8:	0801c25c 	.word	0x0801c25c
 80054cc:	0801c1f4 	.word	0x0801c1f4
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	2a01      	cmp	r2, #1
 80054d6:	f47d ac4e 	bne.w	8002d76 <d_print_comp+0x1e2>
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b3e      	cmp	r3, #62	; 0x3e
 80054e0:	f47d ac49 	bne.w	8002d76 <d_print_comp+0x1e2>
 80054e4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80054e8:	2fff      	cmp	r7, #255	; 0xff
 80054ea:	d111      	bne.n	8005510 <d_print_comp+0x297c>
 80054ec:	2600      	movs	r6, #0
 80054ee:	4639      	mov	r1, r7
 80054f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054f4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80054f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054fc:	4620      	mov	r0, r4
 80054fe:	4798      	blx	r3
 8005500:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005504:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005508:	3301      	adds	r3, #1
 800550a:	4637      	mov	r7, r6
 800550c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005510:	1c7a      	adds	r2, r7, #1
 8005512:	2329      	movs	r3, #41	; 0x29
 8005514:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005518:	55e3      	strb	r3, [r4, r7]
 800551a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800551e:	686a      	ldr	r2, [r5, #4]
 8005520:	9905      	ldr	r1, [sp, #20]
 8005522:	f7fd bc2a 	b.w	8002d7a <d_print_comp+0x1e6>
 8005526:	2a05      	cmp	r2, #5
 8005528:	f200 80a9 	bhi.w	800567e <d_print_comp+0x2aea>
 800552c:	3b57      	subs	r3, #87	; 0x57
 800552e:	f7ff ba1d 	b.w	800496c <d_print_comp+0x1dd8>
 8005532:	4692      	mov	sl, r2
 8005534:	461a      	mov	r2, r3
 8005536:	e001      	b.n	800553c <d_print_comp+0x29a8>
 8005538:	6852      	ldr	r2, [r2, #4]
 800553a:	b342      	cbz	r2, 800558e <d_print_comp+0x29fa>
 800553c:	6811      	ldr	r1, [r2, #0]
 800553e:	4589      	cmp	r9, r1
 8005540:	d003      	beq.n	800554a <d_print_comp+0x29b6>
 8005542:	428d      	cmp	r5, r1
 8005544:	d1f8      	bne.n	8005538 <d_print_comp+0x29a4>
 8005546:	429a      	cmp	r2, r3
 8005548:	d0f6      	beq.n	8005538 <d_print_comp+0x29a4>
 800554a:	f109 0108 	add.w	r1, r9, #8
 800554e:	4620      	mov	r0, r4
 8005550:	f7fb f92a 	bl	80007a8 <d_lookup_template_argument.isra.10>
 8005554:	4681      	mov	r9, r0
 8005556:	b198      	cbz	r0, 8005580 <d_print_comp+0x29ec>
 8005558:	f899 3000 	ldrb.w	r3, [r9]
 800555c:	2b2f      	cmp	r3, #47	; 0x2f
 800555e:	f47e acb6 	bne.w	8003ece <d_print_comp+0x133a>
 8005562:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8005566:	2900      	cmp	r1, #0
 8005568:	f6fe acb6 	blt.w	8003ed8 <d_print_comp+0x1344>
 800556c:	4648      	mov	r0, r9
 800556e:	f7fb f905 	bl	800077c <d_index_template_argument.part.9>
 8005572:	4681      	mov	r9, r0
 8005574:	2800      	cmp	r0, #0
 8005576:	f47e acaa 	bne.w	8003ece <d_print_comp+0x133a>
 800557a:	b10f      	cbz	r7, 8005580 <d_print_comp+0x29ec>
 800557c:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8005580:	2301      	movs	r3, #1
 8005582:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005586:	686a      	ldr	r2, [r5, #4]
 8005588:	9905      	ldr	r1, [sp, #20]
 800558a:	f7fd bbf6 	b.w	8002d7a <d_print_comp+0x1e6>
 800558e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005592:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8005596:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800559a:	f109 0108 	add.w	r1, r9, #8
 800559e:	4620      	mov	r0, r4
 80055a0:	f7fb f902 	bl	80007a8 <d_lookup_template_argument.isra.10>
 80055a4:	2701      	movs	r7, #1
 80055a6:	4681      	mov	r9, r0
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d1d5      	bne.n	8005558 <d_print_comp+0x29c4>
 80055ac:	e7e6      	b.n	800557c <d_print_comp+0x29e8>
 80055ae:	ab18      	add	r3, sp, #96	; 0x60
 80055b0:	9a01      	ldr	r2, [sp, #4]
 80055b2:	f843 2d48 	str.w	r2, [r3, #-72]!
 80055b6:	f8cd 801c 	str.w	r8, [sp, #28]
 80055ba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055be:	e58e      	b.n	80050de <d_print_comp+0x254a>
 80055c0:	68eb      	ldr	r3, [r5, #12]
 80055c2:	f893 9000 	ldrb.w	r9, [r3]
 80055c6:	f1b9 0f00 	cmp.w	r9, #0
 80055ca:	f47d ae3f 	bne.w	800324c <d_print_comp+0x6b8>
 80055ce:	283d      	cmp	r0, #61	; 0x3d
 80055d0:	f000 80e6 	beq.w	80057a0 <d_print_comp+0x2c0c>
 80055d4:	4631      	mov	r1, r6
 80055d6:	68ea      	ldr	r2, [r5, #12]
 80055d8:	4620      	mov	r0, r4
 80055da:	f1a8 0802 	sub.w	r8, r8, #2
 80055de:	f7fd fad9 	bl	8002b94 <d_print_comp>
 80055e2:	f1b8 0f04 	cmp.w	r8, #4
 80055e6:	f200 80d7 	bhi.w	8005798 <d_print_comp+0x2c04>
 80055ea:	e8df f008 	tbb	[pc, r8]
 80055ee:	93b4      	.short	0x93b4
 80055f0:	818a      	.short	0x818a
 80055f2:	35          	.byte	0x35
 80055f3:	00          	.byte	0x00
 80055f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80055f8:	4631      	mov	r1, r6
 80055fa:	4620      	mov	r0, r4
 80055fc:	f000 ffd2 	bl	80065a4 <d_print_subexpr>
 8005600:	464a      	mov	r2, r9
 8005602:	4631      	mov	r1, r6
 8005604:	4620      	mov	r0, r4
 8005606:	f000 ff8d 	bl	8006524 <d_print_expr_op>
 800560a:	9905      	ldr	r1, [sp, #20]
 800560c:	686a      	ldr	r2, [r5, #4]
 800560e:	f7fd bbb4 	b.w	8002d7a <d_print_comp+0x1e6>
 8005612:	4641      	mov	r1, r8
 8005614:	4620      	mov	r0, r4
 8005616:	f7fb f8d7 	bl	80007c8 <d_find_pack>
 800561a:	b1a8      	cbz	r0, 8005648 <d_print_comp+0x2ab4>
 800561c:	7803      	ldrb	r3, [r0, #0]
 800561e:	2b2f      	cmp	r3, #47	; 0x2f
 8005620:	d112      	bne.n	8005648 <d_print_comp+0x2ab4>
 8005622:	6883      	ldr	r3, [r0, #8]
 8005624:	b183      	cbz	r3, 8005648 <d_print_comp+0x2ab4>
 8005626:	68c0      	ldr	r0, [r0, #12]
 8005628:	3701      	adds	r7, #1
 800562a:	e7f6      	b.n	800561a <d_print_comp+0x2a86>
 800562c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005630:	781a      	ldrb	r2, [r3, #0]
 8005632:	2a01      	cmp	r2, #1
 8005634:	f47f aad2 	bne.w	8004bdc <d_print_comp+0x2048>
 8005638:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800563c:	7812      	ldrb	r2, [r2, #0]
 800563e:	2a29      	cmp	r2, #41	; 0x29
 8005640:	bf08      	it	eq
 8005642:	4698      	moveq	r8, r3
 8005644:	f7ff baca 	b.w	8004bdc <d_print_comp+0x2048>
 8005648:	4639      	mov	r1, r7
 800564a:	4620      	mov	r0, r4
 800564c:	f7fb f970 	bl	8000930 <d_append_num>
 8005650:	9905      	ldr	r1, [sp, #20]
 8005652:	686a      	ldr	r2, [r5, #4]
 8005654:	f7fd bb91 	b.w	8002d7a <d_print_comp+0x1e6>
 8005658:	2203      	movs	r2, #3
 800565a:	4994      	ldr	r1, [pc, #592]	; (80058ac <d_print_comp+0x2d18>)
 800565c:	4620      	mov	r0, r4
 800565e:	f7fa fe75 	bl	800034c <d_append_buffer>
 8005662:	9905      	ldr	r1, [sp, #20]
 8005664:	686a      	ldr	r2, [r5, #4]
 8005666:	f7fd bb88 	b.w	8002d7a <d_print_comp+0x1e6>
 800566a:	2300      	movs	r3, #0
 800566c:	441e      	add	r6, r3
 800566e:	e5fa      	b.n	8005266 <d_print_comp+0x26d2>
 8005670:	464a      	mov	r2, r9
 8005672:	4631      	mov	r1, r6
 8005674:	4620      	mov	r0, r4
 8005676:	f000 ff55 	bl	8006524 <d_print_expr_op>
 800567a:	f7fd bea9 	b.w	80033d0 <d_print_comp+0x83c>
 800567e:	2b5f      	cmp	r3, #95	; 0x5f
 8005680:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005684:	f47f a964 	bne.w	8004950 <d_print_comp+0x1dbc>
 8005688:	28ff      	cmp	r0, #255	; 0xff
 800568a:	f63f a961 	bhi.w	8004950 <d_print_comp+0x1dbc>
 800568e:	29ff      	cmp	r1, #255	; 0xff
 8005690:	fa5f f980 	uxtb.w	r9, r0
 8005694:	d10f      	bne.n	80056b6 <d_print_comp+0x2b22>
 8005696:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800569a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800569e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056a2:	4620      	mov	r0, r4
 80056a4:	4798      	blx	r3
 80056a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80056aa:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80056ae:	3301      	adds	r3, #1
 80056b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056b4:	2100      	movs	r1, #0
 80056b6:	1c4b      	adds	r3, r1, #1
 80056b8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80056bc:	4657      	mov	r7, sl
 80056be:	f804 9001 	strb.w	r9, [r4, r1]
 80056c2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056c6:	f7ff b935 	b.w	8004934 <d_print_comp+0x1da0>
 80056ca:	f8da a008 	ldr.w	sl, [sl, #8]
 80056ce:	f1ba 0f00 	cmp.w	sl, #0
 80056d2:	f43e ad01 	beq.w	80040d8 <d_print_comp+0x1544>
 80056d6:	e4d1      	b.n	800507c <d_print_comp+0x24e8>
 80056d8:	2205      	movs	r2, #5
 80056da:	4975      	ldr	r1, [pc, #468]	; (80058b0 <d_print_comp+0x2d1c>)
 80056dc:	4620      	mov	r0, r4
 80056de:	f7fa fe35 	bl	800034c <d_append_buffer>
 80056e2:	9905      	ldr	r1, [sp, #20]
 80056e4:	686a      	ldr	r2, [r5, #4]
 80056e6:	f7fd bb48 	b.w	8002d7a <d_print_comp+0x1e6>
 80056ea:	f8cc 0000 	str.w	r0, [ip]
 80056ee:	e72c      	b.n	800554a <d_print_comp+0x29b6>
 80056f0:	2202      	movs	r2, #2
 80056f2:	4970      	ldr	r1, [pc, #448]	; (80058b4 <d_print_comp+0x2d20>)
 80056f4:	4620      	mov	r0, r4
 80056f6:	f7fa fe29 	bl	800034c <d_append_buffer>
 80056fa:	9905      	ldr	r1, [sp, #20]
 80056fc:	686a      	ldr	r2, [r5, #4]
 80056fe:	f7fd bb3c 	b.w	8002d7a <d_print_comp+0x1e6>
 8005702:	2202      	movs	r2, #2
 8005704:	496c      	ldr	r1, [pc, #432]	; (80058b8 <d_print_comp+0x2d24>)
 8005706:	4620      	mov	r0, r4
 8005708:	f7fa fe20 	bl	800034c <d_append_buffer>
 800570c:	9905      	ldr	r1, [sp, #20]
 800570e:	686a      	ldr	r2, [r5, #4]
 8005710:	f7fd bb33 	b.w	8002d7a <d_print_comp+0x1e6>
 8005714:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005718:	2fff      	cmp	r7, #255	; 0xff
 800571a:	d111      	bne.n	8005740 <d_print_comp+0x2bac>
 800571c:	2600      	movs	r6, #0
 800571e:	4639      	mov	r1, r7
 8005720:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005724:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005728:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800572c:	4620      	mov	r0, r4
 800572e:	4798      	blx	r3
 8005730:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005734:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005738:	3301      	adds	r3, #1
 800573a:	4637      	mov	r7, r6
 800573c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005740:	1c7a      	adds	r2, r7, #1
 8005742:	236c      	movs	r3, #108	; 0x6c
 8005744:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005748:	55e3      	strb	r3, [r4, r7]
 800574a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800574e:	686a      	ldr	r2, [r5, #4]
 8005750:	9905      	ldr	r1, [sp, #20]
 8005752:	f7fd bb12 	b.w	8002d7a <d_print_comp+0x1e6>
 8005756:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800575a:	2fff      	cmp	r7, #255	; 0xff
 800575c:	d111      	bne.n	8005782 <d_print_comp+0x2bee>
 800575e:	2600      	movs	r6, #0
 8005760:	4639      	mov	r1, r7
 8005762:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005766:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800576a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800576e:	4620      	mov	r0, r4
 8005770:	4798      	blx	r3
 8005772:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005776:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800577a:	3301      	adds	r3, #1
 800577c:	4637      	mov	r7, r6
 800577e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005782:	1c7a      	adds	r2, r7, #1
 8005784:	2375      	movs	r3, #117	; 0x75
 8005786:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800578a:	55e3      	strb	r3, [r4, r7]
 800578c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005790:	686a      	ldr	r2, [r5, #4]
 8005792:	9905      	ldr	r1, [sp, #20]
 8005794:	f7fd baf1 	b.w	8002d7a <d_print_comp+0x1e6>
 8005798:	9905      	ldr	r1, [sp, #20]
 800579a:	686a      	ldr	r2, [r5, #4]
 800579c:	f7fd baed 	b.w	8002d7a <d_print_comp+0x1e6>
 80057a0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80057a4:	2fff      	cmp	r7, #255	; 0xff
 80057a6:	d110      	bne.n	80057ca <d_print_comp+0x2c36>
 80057a8:	4639      	mov	r1, r7
 80057aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80057b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057b6:	4620      	mov	r0, r4
 80057b8:	4798      	blx	r3
 80057ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057be:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80057c2:	3301      	adds	r3, #1
 80057c4:	464f      	mov	r7, r9
 80057c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057ca:	232d      	movs	r3, #45	; 0x2d
 80057cc:	1c7a      	adds	r2, r7, #1
 80057ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80057d2:	55e3      	strb	r3, [r4, r7]
 80057d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057d8:	e6fc      	b.n	80055d4 <d_print_comp+0x2a40>
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	6891      	ldr	r1, [r2, #8]
 80057de:	2901      	cmp	r1, #1
 80057e0:	f47d aa69 	bne.w	8002cb6 <d_print_comp+0x122>
 80057e4:	6852      	ldr	r2, [r2, #4]
 80057e6:	7812      	ldrb	r2, [r2, #0]
 80057e8:	2a3e      	cmp	r2, #62	; 0x3e
 80057ea:	f47d aa64 	bne.w	8002cb6 <d_print_comp+0x122>
 80057ee:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80057f2:	2fff      	cmp	r7, #255	; 0xff
 80057f4:	d110      	bne.n	8005818 <d_print_comp+0x2c84>
 80057f6:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80057fa:	4639      	mov	r1, r7
 80057fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005800:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005804:	4620      	mov	r0, r4
 8005806:	4798      	blx	r3
 8005808:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800580c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005810:	3301      	adds	r3, #1
 8005812:	4647      	mov	r7, r8
 8005814:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005818:	2328      	movs	r3, #40	; 0x28
 800581a:	1c7a      	adds	r2, r7, #1
 800581c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005820:	55e3      	strb	r3, [r4, r7]
 8005822:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005826:	68ab      	ldr	r3, [r5, #8]
 8005828:	f7fd ba45 	b.w	8002cb6 <d_print_comp+0x122>
 800582c:	465a      	mov	r2, fp
 800582e:	4631      	mov	r1, r6
 8005830:	4620      	mov	r0, r4
 8005832:	f000 feb7 	bl	80065a4 <d_print_subexpr>
 8005836:	463a      	mov	r2, r7
 8005838:	4631      	mov	r1, r6
 800583a:	4620      	mov	r0, r4
 800583c:	f000 fe72 	bl	8006524 <d_print_expr_op>
 8005840:	4652      	mov	r2, sl
 8005842:	4631      	mov	r1, r6
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fead 	bl	80065a4 <d_print_subexpr>
 800584a:	2203      	movs	r2, #3
 800584c:	491b      	ldr	r1, [pc, #108]	; (80058bc <d_print_comp+0x2d28>)
 800584e:	4620      	mov	r0, r4
 8005850:	f7fa fd7c 	bl	800034c <d_append_buffer>
 8005854:	464a      	mov	r2, r9
 8005856:	4631      	mov	r1, r6
 8005858:	4620      	mov	r0, r4
 800585a:	f000 fea3 	bl	80065a4 <d_print_subexpr>
 800585e:	9905      	ldr	r1, [sp, #20]
 8005860:	686a      	ldr	r2, [r5, #4]
 8005862:	f7fd ba8a 	b.w	8002d7a <d_print_comp+0x1e6>
 8005866:	9905      	ldr	r1, [sp, #20]
 8005868:	686a      	ldr	r2, [r5, #4]
 800586a:	f7fd ba86 	b.w	8002d7a <d_print_comp+0x1e6>
 800586e:	9905      	ldr	r1, [sp, #20]
 8005870:	686a      	ldr	r2, [r5, #4]
 8005872:	f7fd ba82 	b.w	8002d7a <d_print_comp+0x1e6>
 8005876:	68d3      	ldr	r3, [r2, #12]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b29      	cmp	r3, #41	; 0x29
 800587c:	bf1c      	itt	ne
 800587e:	2301      	movne	r3, #1
 8005880:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8005884:	6892      	ldr	r2, [r2, #8]
 8005886:	4631      	mov	r1, r6
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fe8b 	bl	80065a4 <d_print_subexpr>
 800588e:	f7fd ba22 	b.w	8002cd6 <d_print_comp+0x142>
 8005892:	463a      	mov	r2, r7
 8005894:	4631      	mov	r1, r6
 8005896:	4620      	mov	r0, r4
 8005898:	f000 fe44 	bl	8006524 <d_print_expr_op>
 800589c:	e5fe      	b.n	800549c <d_print_comp+0x2908>
 800589e:	2301      	movs	r3, #1
 80058a0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80058a4:	686a      	ldr	r2, [r5, #4]
 80058a6:	f7fd ba68 	b.w	8002d7a <d_print_comp+0x1e6>
 80058aa:	bf00      	nop
 80058ac:	0801c40c 	.word	0x0801c40c
 80058b0:	0801c410 	.word	0x0801c410
 80058b4:	0801c408 	.word	0x0801c408
 80058b8:	0801c404 	.word	0x0801c404
 80058bc:	0801c3f8 	.word	0x0801c3f8

080058c0 <d_print_mod>:
 80058c0:	7813      	ldrb	r3, [r2, #0]
 80058c2:	3b03      	subs	r3, #3
 80058c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	4615      	mov	r5, r2
 80058ca:	4604      	mov	r4, r0
 80058cc:	460e      	mov	r6, r1
 80058ce:	2b4c      	cmp	r3, #76	; 0x4c
 80058d0:	f200 82c8 	bhi.w	8005e64 <d_print_mod+0x5a4>
 80058d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80058d8:	02c60075 	.word	0x02c60075
 80058dc:	02c602c6 	.word	0x02c602c6
 80058e0:	02c602c6 	.word	0x02c602c6
 80058e4:	02c602c6 	.word	0x02c602c6
 80058e8:	02c602c6 	.word	0x02c602c6
 80058ec:	02c602c6 	.word	0x02c602c6
 80058f0:	02c602c6 	.word	0x02c602c6
 80058f4:	02c602c6 	.word	0x02c602c6
 80058f8:	02c602c6 	.word	0x02c602c6
 80058fc:	02c602c6 	.word	0x02c602c6
 8005900:	02c602c6 	.word	0x02c602c6
 8005904:	00a1007a 	.word	0x00a1007a
 8005908:	007a00c8 	.word	0x007a00c8
 800590c:	00c800a1 	.word	0x00c800a1
 8005910:	010a00ee 	.word	0x010a00ee
 8005914:	01480126 	.word	0x01480126
 8005918:	02790166 	.word	0x02790166
 800591c:	029f0252 	.word	0x029f0252
 8005920:	02c602c6 	.word	0x02c602c6
 8005924:	02c602c6 	.word	0x02c602c6
 8005928:	02c60184 	.word	0x02c60184
 800592c:	02c601cc 	.word	0x02c601cc
 8005930:	02c602c6 	.word	0x02c602c6
 8005934:	02c602c6 	.word	0x02c602c6
 8005938:	02c602c6 	.word	0x02c602c6
 800593c:	02c602c6 	.word	0x02c602c6
 8005940:	02c602c6 	.word	0x02c602c6
 8005944:	02c602c6 	.word	0x02c602c6
 8005948:	02c602c6 	.word	0x02c602c6
 800594c:	02c602c6 	.word	0x02c602c6
 8005950:	02c602c6 	.word	0x02c602c6
 8005954:	02c602c6 	.word	0x02c602c6
 8005958:	02c602c6 	.word	0x02c602c6
 800595c:	02c602c6 	.word	0x02c602c6
 8005960:	02c602c6 	.word	0x02c602c6
 8005964:	02c602c6 	.word	0x02c602c6
 8005968:	01f402c6 	.word	0x01f402c6
 800596c:	022a02c6 	.word	0x022a02c6
 8005970:	004d      	.short	0x004d
 8005972:	4fd7      	ldr	r7, [pc, #860]	; (8005cd0 <d_print_mod+0x410>)
 8005974:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005978:	f107 0806 	add.w	r8, r7, #6
 800597c:	f04f 0900 	mov.w	r9, #0
 8005980:	e016      	b.n	80059b0 <d_print_mod+0xf0>
 8005982:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005986:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800598a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800598e:	4798      	blx	r3
 8005990:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005994:	3301      	adds	r3, #1
 8005996:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800599a:	2200      	movs	r2, #0
 800599c:	2301      	movs	r3, #1
 800599e:	4547      	cmp	r7, r8
 80059a0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80059a4:	f804 a002 	strb.w	sl, [r4, r2]
 80059a8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80059ac:	f000 825f 	beq.w	8005e6e <d_print_mod+0x5ae>
 80059b0:	2bff      	cmp	r3, #255	; 0xff
 80059b2:	4619      	mov	r1, r3
 80059b4:	4620      	mov	r0, r4
 80059b6:	f817 ab01 	ldrb.w	sl, [r7], #1
 80059ba:	d0e2      	beq.n	8005982 <d_print_mod+0xc2>
 80059bc:	461a      	mov	r2, r3
 80059be:	3301      	adds	r3, #1
 80059c0:	e7ed      	b.n	800599e <d_print_mod+0xde>
 80059c2:	68aa      	ldr	r2, [r5, #8]
 80059c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	f7fd b8e4 	b.w	8002b94 <d_print_comp>
 80059cc:	4dc1      	ldr	r5, [pc, #772]	; (8005cd4 <d_print_mod+0x414>)
 80059ce:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80059d2:	f105 0609 	add.w	r6, r5, #9
 80059d6:	2700      	movs	r7, #0
 80059d8:	e016      	b.n	8005a08 <d_print_mod+0x148>
 80059da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059e2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80059e6:	4798      	blx	r3
 80059e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059ec:	3301      	adds	r3, #1
 80059ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059f2:	2200      	movs	r2, #0
 80059f4:	2301      	movs	r3, #1
 80059f6:	42ae      	cmp	r6, r5
 80059f8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80059fc:	f804 8002 	strb.w	r8, [r4, r2]
 8005a00:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a04:	f000 80ea 	beq.w	8005bdc <d_print_mod+0x31c>
 8005a08:	2bff      	cmp	r3, #255	; 0xff
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a12:	d0e2      	beq.n	80059da <d_print_mod+0x11a>
 8005a14:	461a      	mov	r2, r3
 8005a16:	3301      	adds	r3, #1
 8005a18:	e7ed      	b.n	80059f6 <d_print_mod+0x136>
 8005a1a:	4daf      	ldr	r5, [pc, #700]	; (8005cd8 <d_print_mod+0x418>)
 8005a1c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a20:	f105 0609 	add.w	r6, r5, #9
 8005a24:	2700      	movs	r7, #0
 8005a26:	e016      	b.n	8005a56 <d_print_mod+0x196>
 8005a28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a30:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a34:	4798      	blx	r3
 8005a36:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a40:	2200      	movs	r2, #0
 8005a42:	2301      	movs	r3, #1
 8005a44:	42ae      	cmp	r6, r5
 8005a46:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a4a:	f804 8002 	strb.w	r8, [r4, r2]
 8005a4e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a52:	f000 80c3 	beq.w	8005bdc <d_print_mod+0x31c>
 8005a56:	2bff      	cmp	r3, #255	; 0xff
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a60:	d0e2      	beq.n	8005a28 <d_print_mod+0x168>
 8005a62:	461a      	mov	r2, r3
 8005a64:	3301      	adds	r3, #1
 8005a66:	e7ed      	b.n	8005a44 <d_print_mod+0x184>
 8005a68:	4d9c      	ldr	r5, [pc, #624]	; (8005cdc <d_print_mod+0x41c>)
 8005a6a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a6e:	1dae      	adds	r6, r5, #6
 8005a70:	2700      	movs	r7, #0
 8005a72:	e016      	b.n	8005aa2 <d_print_mod+0x1e2>
 8005a74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a7c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a80:	4798      	blx	r3
 8005a82:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a86:	3301      	adds	r3, #1
 8005a88:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2301      	movs	r3, #1
 8005a90:	42b5      	cmp	r5, r6
 8005a92:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a96:	f804 8002 	strb.w	r8, [r4, r2]
 8005a9a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a9e:	f000 809d 	beq.w	8005bdc <d_print_mod+0x31c>
 8005aa2:	2bff      	cmp	r3, #255	; 0xff
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005aac:	d0e2      	beq.n	8005a74 <d_print_mod+0x1b4>
 8005aae:	461a      	mov	r2, r3
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	e7ed      	b.n	8005a90 <d_print_mod+0x1d0>
 8005ab4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ab8:	29ff      	cmp	r1, #255	; 0xff
 8005aba:	d10f      	bne.n	8005adc <d_print_mod+0x21c>
 8005abc:	2500      	movs	r5, #0
 8005abe:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005ac2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005ac6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005aca:	4798      	blx	r3
 8005acc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ad0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005adc:	2220      	movs	r2, #32
 8005ade:	1c4b      	adds	r3, r1, #1
 8005ae0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ae4:	5462      	strb	r2, [r4, r1]
 8005ae6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005aea:	e05d      	b.n	8005ba8 <d_print_mod+0x2e8>
 8005aec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005af0:	29ff      	cmp	r1, #255	; 0xff
 8005af2:	d10f      	bne.n	8005b14 <d_print_mod+0x254>
 8005af4:	2500      	movs	r5, #0
 8005af6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005afa:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005afe:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b02:	4798      	blx	r3
 8005b04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b08:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	4629      	mov	r1, r5
 8005b10:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b14:	2220      	movs	r2, #32
 8005b16:	1c4b      	adds	r3, r1, #1
 8005b18:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b1c:	5462      	strb	r2, [r4, r1]
 8005b1e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b22:	e154      	b.n	8005dce <d_print_mod+0x50e>
 8005b24:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b28:	29ff      	cmp	r1, #255	; 0xff
 8005b2a:	d10f      	bne.n	8005b4c <d_print_mod+0x28c>
 8005b2c:	2700      	movs	r7, #0
 8005b2e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b32:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005b36:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b3a:	4798      	blx	r3
 8005b3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b40:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005b44:	3301      	adds	r3, #1
 8005b46:	4639      	mov	r1, r7
 8005b48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b4c:	1c4a      	adds	r2, r1, #1
 8005b4e:	2320      	movs	r3, #32
 8005b50:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005b54:	5463      	strb	r3, [r4, r1]
 8005b56:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	68ea      	ldr	r2, [r5, #12]
 8005b5e:	4620      	mov	r0, r4
 8005b60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	f7fd b816 	b.w	8002b94 <d_print_comp>
 8005b68:	f011 0604 	ands.w	r6, r1, #4
 8005b6c:	d136      	bne.n	8005bdc <d_print_mod+0x31c>
 8005b6e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b72:	29ff      	cmp	r1, #255	; 0xff
 8005b74:	d10e      	bne.n	8005b94 <d_print_mod+0x2d4>
 8005b76:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b7a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005b7e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b82:	4798      	blx	r3
 8005b84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b88:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	4631      	mov	r1, r6
 8005b90:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b94:	232a      	movs	r3, #42	; 0x2a
 8005b96:	1c4a      	adds	r2, r1, #1
 8005b98:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005b9c:	5463      	strb	r3, [r4, r1]
 8005b9e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005ba2:	e01b      	b.n	8005bdc <d_print_mod+0x31c>
 8005ba4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005ba8:	2bff      	cmp	r3, #255	; 0xff
 8005baa:	f040 81a9 	bne.w	8005f00 <d_print_mod+0x640>
 8005bae:	2500      	movs	r5, #0
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005bb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005bba:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4798      	blx	r3
 8005bc2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005bcc:	462b      	mov	r3, r5
 8005bce:	2101      	movs	r1, #1
 8005bd0:	2226      	movs	r2, #38	; 0x26
 8005bd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005bd6:	54e2      	strb	r2, [r4, r3]
 8005bd8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be0:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005be4:	2b28      	cmp	r3, #40	; 0x28
 8005be6:	d019      	beq.n	8005c1c <d_print_mod+0x35c>
 8005be8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005bec:	29ff      	cmp	r1, #255	; 0xff
 8005bee:	f040 818b 	bne.w	8005f08 <d_print_mod+0x648>
 8005bf2:	2700      	movs	r7, #0
 8005bf4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005bf8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005bfc:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005c00:	4798      	blx	r3
 8005c02:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c06:	3301      	adds	r3, #1
 8005c08:	4639      	mov	r1, r7
 8005c0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c0e:	2201      	movs	r2, #1
 8005c10:	2320      	movs	r3, #32
 8005c12:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c16:	5463      	strb	r3, [r4, r1]
 8005c18:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c1c:	68aa      	ldr	r2, [r5, #8]
 8005c1e:	4d30      	ldr	r5, [pc, #192]	; (8005ce0 <d_print_mod+0x420>)
 8005c20:	4631      	mov	r1, r6
 8005c22:	4620      	mov	r0, r4
 8005c24:	f7fc ffb6 	bl	8002b94 <d_print_comp>
 8005c28:	1cee      	adds	r6, r5, #3
 8005c2a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005c2e:	2700      	movs	r7, #0
 8005c30:	e015      	b.n	8005c5e <d_print_mod+0x39e>
 8005c32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c3a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005c3e:	4798      	blx	r3
 8005c40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c44:	3301      	adds	r3, #1
 8005c46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	42ae      	cmp	r6, r5
 8005c50:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005c54:	f804 8002 	strb.w	r8, [r4, r2]
 8005c58:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005c5c:	d0be      	beq.n	8005bdc <d_print_mod+0x31c>
 8005c5e:	2bff      	cmp	r3, #255	; 0xff
 8005c60:	4619      	mov	r1, r3
 8005c62:	4620      	mov	r0, r4
 8005c64:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005c68:	d0e3      	beq.n	8005c32 <d_print_mod+0x372>
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	e7ee      	b.n	8005c4e <d_print_mod+0x38e>
 8005c70:	4f1c      	ldr	r7, [pc, #112]	; (8005ce4 <d_print_mod+0x424>)
 8005c72:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005c76:	f107 080a 	add.w	r8, r7, #10
 8005c7a:	f04f 0900 	mov.w	r9, #0
 8005c7e:	e016      	b.n	8005cae <d_print_mod+0x3ee>
 8005c80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c88:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005c8c:	4798      	blx	r3
 8005c8e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c92:	3301      	adds	r3, #1
 8005c94:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	45b8      	cmp	r8, r7
 8005c9e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ca2:	f804 a002 	strb.w	sl, [r4, r2]
 8005ca6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005caa:	f000 811e 	beq.w	8005eea <d_print_mod+0x62a>
 8005cae:	2bff      	cmp	r3, #255	; 0xff
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f817 ab01 	ldrb.w	sl, [r7], #1
 8005cb8:	d0e2      	beq.n	8005c80 <d_print_mod+0x3c0>
 8005cba:	461a      	mov	r2, r3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	e7ed      	b.n	8005c9c <d_print_mod+0x3dc>
 8005cc0:	4d09      	ldr	r5, [pc, #36]	; (8005ce8 <d_print_mod+0x428>)
 8005cc2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005cc6:	f105 0611 	add.w	r6, r5, #17
 8005cca:	2700      	movs	r7, #0
 8005ccc:	e025      	b.n	8005d1a <d_print_mod+0x45a>
 8005cce:	bf00      	nop
 8005cd0:	0801c4fc 	.word	0x0801c4fc
 8005cd4:	0801c4bb 	.word	0x0801c4bb
 8005cd8:	0801c4c7 	.word	0x0801c4c7
 8005cdc:	0801c4d4 	.word	0x0801c4d4
 8005ce0:	0801c520 	.word	0x0801c520
 8005ce4:	0801c524 	.word	0x0801c524
 8005ce8:	0801c4db 	.word	0x0801c4db
 8005cec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005cf0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005cf4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005cf8:	4798      	blx	r3
 8005cfa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005cfe:	3301      	adds	r3, #1
 8005d00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d04:	2200      	movs	r2, #0
 8005d06:	2301      	movs	r3, #1
 8005d08:	42ae      	cmp	r6, r5
 8005d0a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d0e:	f804 8002 	strb.w	r8, [r4, r2]
 8005d12:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d16:	f43f af61 	beq.w	8005bdc <d_print_mod+0x31c>
 8005d1a:	2bff      	cmp	r3, #255	; 0xff
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005d24:	d0e2      	beq.n	8005cec <d_print_mod+0x42c>
 8005d26:	461a      	mov	r2, r3
 8005d28:	3301      	adds	r3, #1
 8005d2a:	e7ed      	b.n	8005d08 <d_print_mod+0x448>
 8005d2c:	4f77      	ldr	r7, [pc, #476]	; (8005f0c <d_print_mod+0x64c>)
 8005d2e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d32:	f107 0809 	add.w	r8, r7, #9
 8005d36:	f04f 0900 	mov.w	r9, #0
 8005d3a:	e016      	b.n	8005d6a <d_print_mod+0x4aa>
 8005d3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d44:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005d48:	4798      	blx	r3
 8005d4a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d4e:	3301      	adds	r3, #1
 8005d50:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d54:	2200      	movs	r2, #0
 8005d56:	2301      	movs	r3, #1
 8005d58:	4547      	cmp	r7, r8
 8005d5a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d5e:	f804 a002 	strb.w	sl, [r4, r2]
 8005d62:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d66:	f000 8082 	beq.w	8005e6e <d_print_mod+0x5ae>
 8005d6a:	2bff      	cmp	r3, #255	; 0xff
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8005d74:	d0e2      	beq.n	8005d3c <d_print_mod+0x47c>
 8005d76:	461a      	mov	r2, r3
 8005d78:	3301      	adds	r3, #1
 8005d7a:	e7ed      	b.n	8005d58 <d_print_mod+0x498>
 8005d7c:	4d64      	ldr	r5, [pc, #400]	; (8005f10 <d_print_mod+0x650>)
 8005d7e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d82:	f105 0608 	add.w	r6, r5, #8
 8005d86:	2700      	movs	r7, #0
 8005d88:	e016      	b.n	8005db8 <d_print_mod+0x4f8>
 8005d8a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d92:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005d96:	4798      	blx	r3
 8005d98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005da2:	2200      	movs	r2, #0
 8005da4:	2301      	movs	r3, #1
 8005da6:	42ae      	cmp	r6, r5
 8005da8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005dac:	f804 8002 	strb.w	r8, [r4, r2]
 8005db0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005db4:	f43f af12 	beq.w	8005bdc <d_print_mod+0x31c>
 8005db8:	2bff      	cmp	r3, #255	; 0xff
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005dc2:	d0e2      	beq.n	8005d8a <d_print_mod+0x4ca>
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	e7ed      	b.n	8005da6 <d_print_mod+0x4e6>
 8005dca:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005dce:	4d51      	ldr	r5, [pc, #324]	; (8005f14 <d_print_mod+0x654>)
 8005dd0:	2700      	movs	r7, #0
 8005dd2:	1cae      	adds	r6, r5, #2
 8005dd4:	e016      	b.n	8005e04 <d_print_mod+0x544>
 8005dd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dde:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005de2:	4798      	blx	r3
 8005de4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005de8:	3301      	adds	r3, #1
 8005dea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dee:	2200      	movs	r2, #0
 8005df0:	2301      	movs	r3, #1
 8005df2:	42b5      	cmp	r5, r6
 8005df4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005df8:	f804 8002 	strb.w	r8, [r4, r2]
 8005dfc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e00:	f43f aeec 	beq.w	8005bdc <d_print_mod+0x31c>
 8005e04:	2bff      	cmp	r3, #255	; 0xff
 8005e06:	4619      	mov	r1, r3
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e0e:	d0e2      	beq.n	8005dd6 <d_print_mod+0x516>
 8005e10:	461a      	mov	r2, r3
 8005e12:	3301      	adds	r3, #1
 8005e14:	e7ed      	b.n	8005df2 <d_print_mod+0x532>
 8005e16:	4d40      	ldr	r5, [pc, #256]	; (8005f18 <d_print_mod+0x658>)
 8005e18:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005e1c:	f105 060a 	add.w	r6, r5, #10
 8005e20:	2700      	movs	r7, #0
 8005e22:	e016      	b.n	8005e52 <d_print_mod+0x592>
 8005e24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e2c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e30:	4798      	blx	r3
 8005e32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e36:	3301      	adds	r3, #1
 8005e38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2301      	movs	r3, #1
 8005e40:	42b5      	cmp	r5, r6
 8005e42:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e46:	f804 8002 	strb.w	r8, [r4, r2]
 8005e4a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e4e:	f43f aec5 	beq.w	8005bdc <d_print_mod+0x31c>
 8005e52:	2bff      	cmp	r3, #255	; 0xff
 8005e54:	4619      	mov	r1, r3
 8005e56:	4620      	mov	r0, r4
 8005e58:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e5c:	d0e2      	beq.n	8005e24 <d_print_mod+0x564>
 8005e5e:	461a      	mov	r2, r3
 8005e60:	3301      	adds	r3, #1
 8005e62:	e7ed      	b.n	8005e40 <d_print_mod+0x580>
 8005e64:	462a      	mov	r2, r5
 8005e66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6a:	f7fc be93 	b.w	8002b94 <d_print_comp>
 8005e6e:	68ea      	ldr	r2, [r5, #12]
 8005e70:	2a00      	cmp	r2, #0
 8005e72:	f43f aeb3 	beq.w	8005bdc <d_print_mod+0x31c>
 8005e76:	2bff      	cmp	r3, #255	; 0xff
 8005e78:	d144      	bne.n	8005f04 <d_print_mod+0x644>
 8005e7a:	2700      	movs	r7, #0
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e86:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4798      	blx	r3
 8005e8e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e92:	68ea      	ldr	r2, [r5, #12]
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	2528      	movs	r5, #40	; 0x28
 8005ea0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	54e5      	strb	r5, [r4, r3]
 8005eaa:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005eae:	f7fc fe71 	bl	8002b94 <d_print_comp>
 8005eb2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005eb6:	29ff      	cmp	r1, #255	; 0xff
 8005eb8:	d120      	bne.n	8005efc <d_print_mod+0x63c>
 8005eba:	2500      	movs	r5, #0
 8005ebc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ec0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ec4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ec8:	4620      	mov	r0, r4
 8005eca:	4798      	blx	r3
 8005ecc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005ed8:	2201      	movs	r2, #1
 8005eda:	2329      	movs	r3, #41	; 0x29
 8005edc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005ee0:	5463      	strb	r3, [r4, r1]
 8005ee2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eea:	4631      	mov	r1, r6
 8005eec:	68aa      	ldr	r2, [r5, #8]
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f7fc fe50 	bl	8002b94 <d_print_comp>
 8005ef4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ef8:	29ff      	cmp	r1, #255	; 0xff
 8005efa:	d0de      	beq.n	8005eba <d_print_mod+0x5fa>
 8005efc:	1c4a      	adds	r2, r1, #1
 8005efe:	e7ec      	b.n	8005eda <d_print_mod+0x61a>
 8005f00:	1c59      	adds	r1, r3, #1
 8005f02:	e665      	b.n	8005bd0 <d_print_mod+0x310>
 8005f04:	1c59      	adds	r1, r3, #1
 8005f06:	e7ca      	b.n	8005e9e <d_print_mod+0x5de>
 8005f08:	1c4a      	adds	r2, r1, #1
 8005f0a:	e681      	b.n	8005c10 <d_print_mod+0x350>
 8005f0c:	0801c4ef 	.word	0x0801c4ef
 8005f10:	0801c507 	.word	0x0801c507
 8005f14:	0801c504 	.word	0x0801c504
 8005f18:	0801c514 	.word	0x0801c514

08005f1c <d_print_function_type.isra.15>:
 8005f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f20:	4604      	mov	r4, r0
 8005f22:	460e      	mov	r6, r1
 8005f24:	4617      	mov	r7, r2
 8005f26:	461d      	mov	r5, r3
 8005f28:	b1d3      	cbz	r3, 8005f60 <d_print_function_type.isra.15+0x44>
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	b9c3      	cbnz	r3, 8005f60 <d_print_function_type.isra.15+0x44>
 8005f2e:	462a      	mov	r2, r5
 8005f30:	2001      	movs	r0, #1
 8005f32:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 80060fc <d_print_function_type.isra.15+0x1e0>
 8005f36:	e001      	b.n	8005f3c <d_print_function_type.isra.15+0x20>
 8005f38:	6893      	ldr	r3, [r2, #8]
 8005f3a:	b98b      	cbnz	r3, 8005f60 <d_print_function_type.isra.15+0x44>
 8005f3c:	6853      	ldr	r3, [r2, #4]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	3b19      	subs	r3, #25
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b12      	cmp	r3, #18
 8005f46:	fa00 f103 	lsl.w	r1, r0, r3
 8005f4a:	d806      	bhi.n	8005f5a <d_print_function_type.isra.15+0x3e>
 8005f4c:	ea11 0f0c 	tst.w	r1, ip
 8005f50:	f040 80c7 	bne.w	80060e2 <d_print_function_type.isra.15+0x1c6>
 8005f54:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f58:	d154      	bne.n	8006004 <d_print_function_type.isra.15+0xe8>
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	d1eb      	bne.n	8005f38 <d_print_function_type.isra.15+0x1c>
 8005f60:	2300      	movs	r3, #0
 8005f62:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f66:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 f8c6 	bl	8006100 <d_print_mod_list>
 8005f74:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f78:	29ff      	cmp	r1, #255	; 0xff
 8005f7a:	f040 80a4 	bne.w	80060c6 <d_print_function_type.isra.15+0x1aa>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005f84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4798      	blx	r3
 8005f90:	2328      	movs	r3, #40	; 0x28
 8005f92:	7023      	strb	r3, [r4, #0]
 8005f94:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	1c59      	adds	r1, r3, #1
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005fa6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	f000 8097 	beq.w	80060de <d_print_function_type.isra.15+0x1c2>
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7fc fdee 	bl	8002b94 <d_print_comp>
 8005fb8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005fbc:	2bff      	cmp	r3, #255	; 0xff
 8005fbe:	f040 808e 	bne.w	80060de <d_print_function_type.isra.15+0x1c2>
 8005fc2:	2700      	movs	r7, #0
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fce:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	4798      	blx	r3
 8005fd6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	2029      	movs	r0, #41	; 0x29
 8005fe6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005fea:	4631      	mov	r1, r6
 8005fec:	54e0      	strb	r0, [r4, r3]
 8005fee:	462a      	mov	r2, r5
 8005ff0:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 f882 	bl	8006100 <d_print_mod_list>
 8005ffc:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8006000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006004:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006008:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800600c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006010:	2a28      	cmp	r2, #40	; 0x28
 8006012:	d01e      	beq.n	8006052 <d_print_function_type.isra.15+0x136>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d01c      	beq.n	8006052 <d_print_function_type.isra.15+0x136>
 8006018:	29ff      	cmp	r1, #255	; 0xff
 800601a:	d112      	bne.n	8006042 <d_print_function_type.isra.15+0x126>
 800601c:	2300      	movs	r3, #0
 800601e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006022:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006026:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800602a:	4620      	mov	r0, r4
 800602c:	4798      	blx	r3
 800602e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006032:	2220      	movs	r2, #32
 8006034:	3301      	adds	r3, #1
 8006036:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800603a:	7022      	strb	r2, [r4, #0]
 800603c:	2101      	movs	r1, #1
 800603e:	1c4a      	adds	r2, r1, #1
 8006040:	e01a      	b.n	8006078 <d_print_function_type.isra.15+0x15c>
 8006042:	1c4b      	adds	r3, r1, #1
 8006044:	2220      	movs	r2, #32
 8006046:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800604a:	5462      	strb	r2, [r4, r1]
 800604c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006050:	4619      	mov	r1, r3
 8006052:	29ff      	cmp	r1, #255	; 0xff
 8006054:	d1f3      	bne.n	800603e <d_print_function_type.isra.15+0x122>
 8006056:	f04f 0800 	mov.w	r8, #0
 800605a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800605e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006062:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006066:	4620      	mov	r0, r4
 8006068:	4798      	blx	r3
 800606a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800606e:	3301      	adds	r3, #1
 8006070:	4641      	mov	r1, r8
 8006072:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006076:	2201      	movs	r2, #1
 8006078:	2328      	movs	r3, #40	; 0x28
 800607a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800607e:	5463      	strb	r3, [r4, r1]
 8006080:	f04f 0900 	mov.w	r9, #0
 8006084:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006088:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800608c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006090:	464b      	mov	r3, r9
 8006092:	462a      	mov	r2, r5
 8006094:	4631      	mov	r1, r6
 8006096:	4620      	mov	r0, r4
 8006098:	f000 f832 	bl	8006100 <d_print_mod_list>
 800609c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80060a0:	2bff      	cmp	r3, #255	; 0xff
 80060a2:	d123      	bne.n	80060ec <d_print_function_type.isra.15+0x1d0>
 80060a4:	4619      	mov	r1, r3
 80060a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80060b2:	4620      	mov	r0, r4
 80060b4:	4798      	blx	r3
 80060b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060ba:	2229      	movs	r2, #41	; 0x29
 80060bc:	3301      	adds	r3, #1
 80060be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060c2:	7022      	strb	r2, [r4, #0]
 80060c4:	2101      	movs	r1, #1
 80060c6:	2228      	movs	r2, #40	; 0x28
 80060c8:	1c4b      	adds	r3, r1, #1
 80060ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80060ce:	5462      	strb	r2, [r4, r1]
 80060d0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	f43f af70 	beq.w	8005fbc <d_print_function_type.isra.15+0xa0>
 80060dc:	e768      	b.n	8005fb0 <d_print_function_type.isra.15+0x94>
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	e780      	b.n	8005fe4 <d_print_function_type.isra.15+0xc8>
 80060e2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80060e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80060ea:	e793      	b.n	8006014 <d_print_function_type.isra.15+0xf8>
 80060ec:	2229      	movs	r2, #41	; 0x29
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80060f4:	54e2      	strb	r2, [r4, r3]
 80060f6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80060fa:	e73d      	b.n	8005f78 <d_print_function_type.isra.15+0x5c>
 80060fc:	00043107 	.word	0x00043107

08006100 <d_print_mod_list>:
 8006100:	2a00      	cmp	r2, #0
 8006102:	f000 80ac 	beq.w	800625e <d_print_mod_list+0x15e>
 8006106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610a:	461f      	mov	r7, r3
 800610c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006110:	b089      	sub	sp, #36	; 0x24
 8006112:	4605      	mov	r5, r0
 8006114:	bb4b      	cbnz	r3, 800616a <d_print_mod_list+0x6a>
 8006116:	4688      	mov	r8, r1
 8006118:	4614      	mov	r4, r2
 800611a:	f04f 0901 	mov.w	r9, #1
 800611e:	e002      	b.n	8006126 <d_print_mod_list+0x26>
 8006120:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006124:	bb0b      	cbnz	r3, 800616a <d_print_mod_list+0x6a>
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	b9e3      	cbnz	r3, 8006164 <d_print_mod_list+0x64>
 800612a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800612e:	f89a 6000 	ldrb.w	r6, [sl]
 8006132:	4630      	mov	r0, r6
 8006134:	b917      	cbnz	r7, 800613c <d_print_mod_list+0x3c>
 8006136:	f7fa f93f 	bl	80003b8 <is_fnqual_component_type>
 800613a:	b998      	cbnz	r0, 8006164 <d_print_mod_list+0x64>
 800613c:	68e3      	ldr	r3, [r4, #12]
 800613e:	f8c4 9008 	str.w	r9, [r4, #8]
 8006142:	2e29      	cmp	r6, #41	; 0x29
 8006144:	f8d5 b110 	ldr.w	fp, [r5, #272]	; 0x110
 8006148:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800614c:	4652      	mov	r2, sl
 800614e:	4641      	mov	r1, r8
 8006150:	4628      	mov	r0, r5
 8006152:	d00d      	beq.n	8006170 <d_print_mod_list+0x70>
 8006154:	2e2a      	cmp	r6, #42	; 0x2a
 8006156:	d015      	beq.n	8006184 <d_print_mod_list+0x84>
 8006158:	2e02      	cmp	r6, #2
 800615a:	d01d      	beq.n	8006198 <d_print_mod_list+0x98>
 800615c:	f7ff fbb0 	bl	80058c0 <d_print_mod>
 8006160:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 8006164:	6824      	ldr	r4, [r4, #0]
 8006166:	2c00      	cmp	r4, #0
 8006168:	d1da      	bne.n	8006120 <d_print_mod_list+0x20>
 800616a:	b009      	add	sp, #36	; 0x24
 800616c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	f10a 020c 	add.w	r2, sl, #12
 8006176:	f7ff fed1 	bl	8005f1c <d_print_function_type.isra.15>
 800617a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800617e:	b009      	add	sp, #36	; 0x24
 8006180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	f10a 0208 	add.w	r2, sl, #8
 800618a:	f000 f8f1 	bl	8006370 <d_print_array_type.isra.14>
 800618e:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 8006192:	b009      	add	sp, #36	; 0x24
 8006194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006198:	2600      	movs	r6, #0
 800619a:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 800619e:	f8da 2008 	ldr.w	r2, [sl, #8]
 80061a2:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 80061a6:	f7fc fcf5 	bl	8002b94 <d_print_comp>
 80061aa:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 80061ae:	f018 0704 	ands.w	r7, r8, #4
 80061b2:	d02f      	beq.n	8006214 <d_print_mod_list+0x114>
 80061b4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80061b8:	29ff      	cmp	r1, #255	; 0xff
 80061ba:	f040 80cf 	bne.w	800635c <d_print_mod_list+0x25c>
 80061be:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80061c2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80061c6:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 80061ca:	4628      	mov	r0, r5
 80061cc:	4798      	blx	r3
 80061ce:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80061d2:	3301      	adds	r3, #1
 80061d4:	4631      	mov	r1, r6
 80061d6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80061da:	2201      	movs	r2, #1
 80061dc:	232e      	movs	r3, #46	; 0x2e
 80061de:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 80061e2:	546b      	strb	r3, [r5, r1]
 80061e4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	68dc      	ldr	r4, [r3, #12]
 80061ec:	7820      	ldrb	r0, [r4, #0]
 80061ee:	2846      	cmp	r0, #70	; 0x46
 80061f0:	d102      	bne.n	80061f8 <d_print_mod_list+0xf8>
 80061f2:	e035      	b.n	8006260 <d_print_mod_list+0x160>
 80061f4:	68a4      	ldr	r4, [r4, #8]
 80061f6:	7820      	ldrb	r0, [r4, #0]
 80061f8:	f7fa f8de 	bl	80003b8 <is_fnqual_component_type>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d1f9      	bne.n	80061f4 <d_print_mod_list+0xf4>
 8006200:	4622      	mov	r2, r4
 8006202:	4641      	mov	r1, r8
 8006204:	4628      	mov	r0, r5
 8006206:	f7fc fcc5 	bl	8002b94 <d_print_comp>
 800620a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800620e:	b009      	add	sp, #36	; 0x24
 8006210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006214:	4e52      	ldr	r6, [pc, #328]	; (8006360 <d_print_mod_list+0x260>)
 8006216:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800621a:	f106 0902 	add.w	r9, r6, #2
 800621e:	e015      	b.n	800624c <d_print_mod_list+0x14c>
 8006220:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006224:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006228:	f885 70ff 	strb.w	r7, [r5, #255]	; 0xff
 800622c:	4798      	blx	r3
 800622e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006232:	3301      	adds	r3, #1
 8006234:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006238:	2200      	movs	r2, #0
 800623a:	2301      	movs	r3, #1
 800623c:	45b1      	cmp	r9, r6
 800623e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006242:	f805 a002 	strb.w	sl, [r5, r2]
 8006246:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800624a:	d0cd      	beq.n	80061e8 <d_print_mod_list+0xe8>
 800624c:	2bff      	cmp	r3, #255	; 0xff
 800624e:	4619      	mov	r1, r3
 8006250:	4628      	mov	r0, r5
 8006252:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006256:	d0e3      	beq.n	8006220 <d_print_mod_list+0x120>
 8006258:	461a      	mov	r2, r3
 800625a:	3301      	adds	r3, #1
 800625c:	e7ee      	b.n	800623c <d_print_mod_list+0x13c>
 800625e:	4770      	bx	lr
 8006260:	4e40      	ldr	r6, [pc, #256]	; (8006364 <d_print_mod_list+0x264>)
 8006262:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006266:	f106 070d 	add.w	r7, r6, #13
 800626a:	f04f 0900 	mov.w	r9, #0
 800626e:	e015      	b.n	800629c <d_print_mod_list+0x19c>
 8006270:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006274:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006278:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800627c:	4798      	blx	r3
 800627e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006282:	3301      	adds	r3, #1
 8006284:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006288:	2200      	movs	r2, #0
 800628a:	2301      	movs	r3, #1
 800628c:	42b7      	cmp	r7, r6
 800628e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006292:	f805 a002 	strb.w	sl, [r5, r2]
 8006296:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800629a:	d008      	beq.n	80062ae <d_print_mod_list+0x1ae>
 800629c:	2bff      	cmp	r3, #255	; 0xff
 800629e:	4619      	mov	r1, r3
 80062a0:	4628      	mov	r0, r5
 80062a2:	f816 ab01 	ldrb.w	sl, [r6], #1
 80062a6:	d0e3      	beq.n	8006270 <d_print_mod_list+0x170>
 80062a8:	461a      	mov	r2, r3
 80062aa:	3301      	adds	r3, #1
 80062ac:	e7ee      	b.n	800628c <d_print_mod_list+0x18c>
 80062ae:	68e2      	ldr	r2, [r4, #12]
 80062b0:	492d      	ldr	r1, [pc, #180]	; (8006368 <d_print_mod_list+0x268>)
 80062b2:	3201      	adds	r2, #1
 80062b4:	a801      	add	r0, sp, #4
 80062b6:	f00d fa25 	bl	8013704 <sprintf>
 80062ba:	a801      	add	r0, sp, #4
 80062bc:	f000 fd5a 	bl	8006d74 <strlen>
 80062c0:	b328      	cbz	r0, 800630e <d_print_mod_list+0x20e>
 80062c2:	ae01      	add	r6, sp, #4
 80062c4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80062c8:	1837      	adds	r7, r6, r0
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	e015      	b.n	80062fc <d_print_mod_list+0x1fc>
 80062d0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80062d4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80062d8:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80062dc:	4798      	blx	r3
 80062de:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80062e2:	3301      	adds	r3, #1
 80062e4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80062e8:	2200      	movs	r2, #0
 80062ea:	2301      	movs	r3, #1
 80062ec:	42be      	cmp	r6, r7
 80062ee:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80062f2:	f805 a002 	strb.w	sl, [r5, r2]
 80062f6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80062fa:	d00a      	beq.n	8006312 <d_print_mod_list+0x212>
 80062fc:	2bff      	cmp	r3, #255	; 0xff
 80062fe:	4619      	mov	r1, r3
 8006300:	4628      	mov	r0, r5
 8006302:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006306:	d0e3      	beq.n	80062d0 <d_print_mod_list+0x1d0>
 8006308:	461a      	mov	r2, r3
 800630a:	3301      	adds	r3, #1
 800630c:	e7ee      	b.n	80062ec <d_print_mod_list+0x1ec>
 800630e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006312:	4e16      	ldr	r6, [pc, #88]	; (800636c <d_print_mod_list+0x26c>)
 8006314:	f04f 0900 	mov.w	r9, #0
 8006318:	1cf7      	adds	r7, r6, #3
 800631a:	e016      	b.n	800634a <d_print_mod_list+0x24a>
 800631c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006320:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006324:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8006328:	4798      	blx	r3
 800632a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800632e:	3301      	adds	r3, #1
 8006330:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006334:	2200      	movs	r2, #0
 8006336:	2301      	movs	r3, #1
 8006338:	42b7      	cmp	r7, r6
 800633a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 800633e:	f805 a002 	strb.w	sl, [r5, r2]
 8006342:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 8006346:	f43f af55 	beq.w	80061f4 <d_print_mod_list+0xf4>
 800634a:	2bff      	cmp	r3, #255	; 0xff
 800634c:	4619      	mov	r1, r3
 800634e:	4628      	mov	r0, r5
 8006350:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006354:	d0e2      	beq.n	800631c <d_print_mod_list+0x21c>
 8006356:	461a      	mov	r2, r3
 8006358:	3301      	adds	r3, #1
 800635a:	e7ed      	b.n	8006338 <d_print_mod_list+0x238>
 800635c:	1c4a      	adds	r2, r1, #1
 800635e:	e73d      	b.n	80061dc <d_print_mod_list+0xdc>
 8006360:	0801c23c 	.word	0x0801c23c
 8006364:	0801c240 	.word	0x0801c240
 8006368:	0801c1ec 	.word	0x0801c1ec
 800636c:	0801c250 	.word	0x0801c250

08006370 <d_print_array_type.isra.14>:
 8006370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	4604      	mov	r4, r0
 8006376:	460f      	mov	r7, r1
 8006378:	4690      	mov	r8, r2
 800637a:	b15b      	cbz	r3, 8006394 <d_print_array_type.isra.14+0x24>
 800637c:	461e      	mov	r6, r3
 800637e:	689d      	ldr	r5, [r3, #8]
 8006380:	2d00      	cmp	r5, #0
 8006382:	d042      	beq.n	800640a <d_print_array_type.isra.14+0x9a>
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f9      	bne.n	800637e <d_print_array_type.isra.14+0xe>
 800638a:	4632      	mov	r2, r6
 800638c:	4639      	mov	r1, r7
 800638e:	4620      	mov	r0, r4
 8006390:	f7ff feb6 	bl	8006100 <d_print_mod_list>
 8006394:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006398:	29ff      	cmp	r1, #255	; 0xff
 800639a:	f040 80b1 	bne.w	8006500 <d_print_array_type.isra.14+0x190>
 800639e:	2300      	movs	r3, #0
 80063a0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063ac:	4620      	mov	r0, r4
 80063ae:	4798      	blx	r3
 80063b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063b4:	2220      	movs	r2, #32
 80063b6:	3301      	adds	r3, #1
 80063b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063bc:	7022      	strb	r2, [r4, #0]
 80063be:	2301      	movs	r3, #1
 80063c0:	225b      	movs	r2, #91	; 0x5b
 80063c2:	1c59      	adds	r1, r3, #1
 80063c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063c8:	54e2      	strb	r2, [r4, r3]
 80063ca:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80063ce:	f8d8 2000 	ldr.w	r2, [r8]
 80063d2:	2a00      	cmp	r2, #0
 80063d4:	d140      	bne.n	8006458 <d_print_array_type.isra.14+0xe8>
 80063d6:	29ff      	cmp	r1, #255	; 0xff
 80063d8:	d145      	bne.n	8006466 <d_print_array_type.isra.14+0xf6>
 80063da:	2500      	movs	r5, #0
 80063dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063e4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80063e8:	4620      	mov	r0, r4
 80063ea:	4798      	blx	r3
 80063ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063f0:	3301      	adds	r3, #1
 80063f2:	4629      	mov	r1, r5
 80063f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063f8:	2201      	movs	r2, #1
 80063fa:	235d      	movs	r3, #93	; 0x5d
 80063fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006400:	5463      	strb	r3, [r4, r1]
 8006402:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b2a      	cmp	r3, #42	; 0x2a
 8006410:	d12b      	bne.n	800646a <d_print_array_type.isra.14+0xfa>
 8006412:	462b      	mov	r3, r5
 8006414:	4632      	mov	r2, r6
 8006416:	4639      	mov	r1, r7
 8006418:	4620      	mov	r0, r4
 800641a:	f7ff fe71 	bl	8006100 <d_print_mod_list>
 800641e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006422:	2bff      	cmp	r3, #255	; 0xff
 8006424:	d1cc      	bne.n	80063c0 <d_print_array_type.isra.14+0x50>
 8006426:	2200      	movs	r2, #0
 8006428:	4619      	mov	r1, r3
 800642a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800642e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006432:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006436:	4620      	mov	r0, r4
 8006438:	4798      	blx	r3
 800643a:	235b      	movs	r3, #91	; 0x5b
 800643c:	7023      	strb	r3, [r4, #0]
 800643e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006442:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006446:	f8d8 2000 	ldr.w	r2, [r8]
 800644a:	3301      	adds	r3, #1
 800644c:	2101      	movs	r1, #1
 800644e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006452:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006456:	b132      	cbz	r2, 8006466 <d_print_array_type.isra.14+0xf6>
 8006458:	4639      	mov	r1, r7
 800645a:	4620      	mov	r0, r4
 800645c:	f7fc fb9a 	bl	8002b94 <d_print_comp>
 8006460:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006464:	e7b7      	b.n	80063d6 <d_print_array_type.isra.14+0x66>
 8006466:	1c4a      	adds	r2, r1, #1
 8006468:	e7c7      	b.n	80063fa <d_print_array_type.isra.14+0x8a>
 800646a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006520 <d_print_array_type.isra.14+0x1b0>
 800646e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006472:	f109 0a02 	add.w	sl, r9, #2
 8006476:	e016      	b.n	80064a6 <d_print_array_type.isra.14+0x136>
 8006478:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800647c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006480:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006484:	4798      	blx	r3
 8006486:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800648a:	2200      	movs	r2, #0
 800648c:	3301      	adds	r3, #1
 800648e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006492:	45ca      	cmp	sl, r9
 8006494:	f04f 0301 	mov.w	r3, #1
 8006498:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800649c:	f804 b002 	strb.w	fp, [r4, r2]
 80064a0:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064a4:	d010      	beq.n	80064c8 <d_print_array_type.isra.14+0x158>
 80064a6:	2bff      	cmp	r3, #255	; 0xff
 80064a8:	4619      	mov	r1, r3
 80064aa:	4620      	mov	r0, r4
 80064ac:	f819 bb01 	ldrb.w	fp, [r9], #1
 80064b0:	d0e2      	beq.n	8006478 <d_print_array_type.isra.14+0x108>
 80064b2:	461a      	mov	r2, r3
 80064b4:	45ca      	cmp	sl, r9
 80064b6:	f103 0301 	add.w	r3, r3, #1
 80064ba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064be:	f804 b002 	strb.w	fp, [r4, r2]
 80064c2:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064c6:	d1ee      	bne.n	80064a6 <d_print_array_type.isra.14+0x136>
 80064c8:	2300      	movs	r3, #0
 80064ca:	4632      	mov	r2, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff fe16 	bl	8006100 <d_print_mod_list>
 80064d4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064d8:	2bff      	cmp	r3, #255	; 0xff
 80064da:	d119      	bne.n	8006510 <d_print_array_type.isra.14+0x1a0>
 80064dc:	2200      	movs	r2, #0
 80064de:	4619      	mov	r1, r3
 80064e0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80064e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064ec:	4620      	mov	r0, r4
 80064ee:	4798      	blx	r3
 80064f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064f4:	2229      	movs	r2, #41	; 0x29
 80064f6:	3301      	adds	r3, #1
 80064f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064fc:	7022      	strb	r2, [r4, #0]
 80064fe:	2101      	movs	r1, #1
 8006500:	2220      	movs	r2, #32
 8006502:	1c4b      	adds	r3, r1, #1
 8006504:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006508:	5462      	strb	r2, [r4, r1]
 800650a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800650e:	e788      	b.n	8006422 <d_print_array_type.isra.14+0xb2>
 8006510:	2229      	movs	r2, #41	; 0x29
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006518:	54e2      	strb	r2, [r4, r3]
 800651a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800651e:	e73b      	b.n	8006398 <d_print_array_type.isra.14+0x28>
 8006520:	0801c438 	.word	0x0801c438

08006524 <d_print_expr_op>:
 8006524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006528:	7815      	ldrb	r5, [r2, #0]
 800652a:	2d31      	cmp	r5, #49	; 0x31
 800652c:	d003      	beq.n	8006536 <d_print_expr_op+0x12>
 800652e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006532:	f7fc bb2f 	b.w	8002b94 <d_print_comp>
 8006536:	6893      	ldr	r3, [r2, #8]
 8006538:	e9d3 5601 	ldrd	r5, r6, [r3, #4]
 800653c:	b37e      	cbz	r6, 800659e <d_print_expr_op+0x7a>
 800653e:	442e      	add	r6, r5
 8006540:	4604      	mov	r4, r0
 8006542:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006546:	3e01      	subs	r6, #1
 8006548:	3d01      	subs	r5, #1
 800654a:	2700      	movs	r7, #0
 800654c:	e016      	b.n	800657c <d_print_expr_op+0x58>
 800654e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006552:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006556:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800655a:	4798      	blx	r3
 800655c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006560:	2200      	movs	r2, #0
 8006562:	3301      	adds	r3, #1
 8006564:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006568:	42b5      	cmp	r5, r6
 800656a:	f04f 0301 	mov.w	r3, #1
 800656e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006572:	f804 8002 	strb.w	r8, [r4, r2]
 8006576:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800657a:	d010      	beq.n	800659e <d_print_expr_op+0x7a>
 800657c:	2bff      	cmp	r3, #255	; 0xff
 800657e:	4619      	mov	r1, r3
 8006580:	4620      	mov	r0, r4
 8006582:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8006586:	d0e2      	beq.n	800654e <d_print_expr_op+0x2a>
 8006588:	461a      	mov	r2, r3
 800658a:	42b5      	cmp	r5, r6
 800658c:	f103 0301 	add.w	r3, r3, #1
 8006590:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006594:	f804 8002 	strb.w	r8, [r4, r2]
 8006598:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800659c:	d1ee      	bne.n	800657c <d_print_expr_op+0x58>
 800659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a2:	bf00      	nop

080065a4 <d_print_subexpr>:
 80065a4:	7813      	ldrb	r3, [r2, #0]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ac:	4604      	mov	r4, r0
 80065ae:	d941      	bls.n	8006634 <d_print_subexpr+0x90>
 80065b0:	2b30      	cmp	r3, #48	; 0x30
 80065b2:	d03f      	beq.n	8006634 <d_print_subexpr+0x90>
 80065b4:	2b06      	cmp	r3, #6
 80065b6:	d03d      	beq.n	8006634 <d_print_subexpr+0x90>
 80065b8:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80065bc:	2fff      	cmp	r7, #255	; 0xff
 80065be:	460e      	mov	r6, r1
 80065c0:	4615      	mov	r5, r2
 80065c2:	d13e      	bne.n	8006642 <d_print_subexpr+0x9e>
 80065c4:	f04f 0800 	mov.w	r8, #0
 80065c8:	4639      	mov	r1, r7
 80065ca:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80065ce:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80065d2:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 80065d6:	4798      	blx	r3
 80065d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80065dc:	3301      	adds	r3, #1
 80065de:	4647      	mov	r7, r8
 80065e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80065e4:	2201      	movs	r2, #1
 80065e6:	2328      	movs	r3, #40	; 0x28
 80065e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80065ec:	4631      	mov	r1, r6
 80065ee:	55e3      	strb	r3, [r4, r7]
 80065f0:	462a      	mov	r2, r5
 80065f2:	4620      	mov	r0, r4
 80065f4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80065f8:	f7fc facc 	bl	8002b94 <d_print_comp>
 80065fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006600:	29ff      	cmp	r1, #255	; 0xff
 8006602:	d11c      	bne.n	800663e <d_print_subexpr+0x9a>
 8006604:	2500      	movs	r5, #0
 8006606:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800660a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800660e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006612:	4620      	mov	r0, r4
 8006614:	4798      	blx	r3
 8006616:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800661a:	3301      	adds	r3, #1
 800661c:	4629      	mov	r1, r5
 800661e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006622:	2201      	movs	r2, #1
 8006624:	2329      	movs	r3, #41	; 0x29
 8006626:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800662a:	5463      	strb	r3, [r4, r1]
 800662c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006634:	4620      	mov	r0, r4
 8006636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800663a:	f7fc baab 	b.w	8002b94 <d_print_comp>
 800663e:	1c4a      	adds	r2, r1, #1
 8006640:	e7f0      	b.n	8006624 <d_print_subexpr+0x80>
 8006642:	1c7a      	adds	r2, r7, #1
 8006644:	e7cf      	b.n	80065e6 <d_print_subexpr+0x42>
 8006646:	bf00      	nop

08006648 <d_maybe_print_fold_expression.isra.20>:
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	6892      	ldr	r2, [r2, #8]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	7816      	ldrb	r6, [r2, #0]
 8006652:	2e66      	cmp	r6, #102	; 0x66
 8006654:	b083      	sub	sp, #12
 8006656:	d003      	beq.n	8006660 <d_maybe_print_fold_expression.isra.20+0x18>
 8006658:	2000      	movs	r0, #0
 800665a:	b003      	add	sp, #12
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006666:	f899 3000 	ldrb.w	r3, [r9]
 800666a:	2b3b      	cmp	r3, #59	; 0x3b
 800666c:	f000 8110 	beq.w	8006890 <d_maybe_print_fold_expression.isra.20+0x248>
 8006670:	2300      	movs	r3, #0
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	f04f 33ff 	mov.w	r3, #4294967295
 8006678:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800667c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8006680:	7853      	ldrb	r3, [r2, #1]
 8006682:	3b4c      	subs	r3, #76	; 0x4c
 8006684:	460d      	mov	r5, r1
 8006686:	4604      	mov	r4, r0
 8006688:	2b26      	cmp	r3, #38	; 0x26
 800668a:	d83a      	bhi.n	8006702 <d_maybe_print_fold_expression.isra.20+0xba>
 800668c:	e8df f003 	tbb	[pc, r3]
 8006690:	393939b0 	.word	0x393939b0
 8006694:	39b03939 	.word	0x39b03939
 8006698:	39393939 	.word	0x39393939
 800669c:	39393939 	.word	0x39393939
 80066a0:	39393939 	.word	0x39393939
 80066a4:	39393939 	.word	0x39393939
 80066a8:	39393939 	.word	0x39393939
 80066ac:	39393939 	.word	0x39393939
 80066b0:	39393989 	.word	0x39393989
 80066b4:	3939      	.short	0x3939
 80066b6:	3f          	.byte	0x3f
 80066b7:	00          	.byte	0x00
 80066b8:	4642      	mov	r2, r8
 80066ba:	4629      	mov	r1, r5
 80066bc:	4620      	mov	r0, r4
 80066be:	f7ff ff31 	bl	8006524 <d_print_expr_op>
 80066c2:	9a01      	ldr	r2, [sp, #4]
 80066c4:	4629      	mov	r1, r5
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7ff ff6c 	bl	80065a4 <d_print_subexpr>
 80066cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80066d0:	29ff      	cmp	r1, #255	; 0xff
 80066d2:	f040 80ea 	bne.w	80068aa <d_maybe_print_fold_expression.isra.20+0x262>
 80066d6:	2500      	movs	r5, #0
 80066d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80066dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80066e0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80066e4:	4620      	mov	r0, r4
 80066e6:	4798      	blx	r3
 80066e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80066ec:	3301      	adds	r3, #1
 80066ee:	4629      	mov	r1, r5
 80066f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80066f4:	2201      	movs	r2, #1
 80066f6:	2329      	movs	r3, #41	; 0x29
 80066f8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80066fc:	5463      	strb	r3, [r4, r1]
 80066fe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006702:	2001      	movs	r0, #1
 8006704:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8006708:	b003      	add	sp, #12
 800670a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006712:	29ff      	cmp	r1, #255	; 0xff
 8006714:	f040 80cb 	bne.w	80068ae <d_maybe_print_fold_expression.isra.20+0x266>
 8006718:	2600      	movs	r6, #0
 800671a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800671e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006722:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006726:	4798      	blx	r3
 8006728:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800672c:	3301      	adds	r3, #1
 800672e:	4631      	mov	r1, r6
 8006730:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006734:	2201      	movs	r2, #1
 8006736:	2328      	movs	r3, #40	; 0x28
 8006738:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800673c:	4620      	mov	r0, r4
 800673e:	5463      	strb	r3, [r4, r1]
 8006740:	464a      	mov	r2, r9
 8006742:	4629      	mov	r1, r5
 8006744:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006748:	f7ff ff2c 	bl	80065a4 <d_print_subexpr>
 800674c:	4629      	mov	r1, r5
 800674e:	4d59      	ldr	r5, [pc, #356]	; (80068b4 <d_maybe_print_fold_expression.isra.20+0x26c>)
 8006750:	4642      	mov	r2, r8
 8006752:	4620      	mov	r0, r4
 8006754:	f7ff fee6 	bl	8006524 <d_print_expr_op>
 8006758:	1d2e      	adds	r6, r5, #4
 800675a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800675e:	f04f 0800 	mov.w	r8, #0
 8006762:	e015      	b.n	8006790 <d_maybe_print_fold_expression.isra.20+0x148>
 8006764:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006768:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800676c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006770:	4798      	blx	r3
 8006772:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006776:	3301      	adds	r3, #1
 8006778:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800677c:	2200      	movs	r2, #0
 800677e:	2301      	movs	r3, #1
 8006780:	42ae      	cmp	r6, r5
 8006782:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006786:	f804 9002 	strb.w	r9, [r4, r2]
 800678a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800678e:	d0b8      	beq.n	8006702 <d_maybe_print_fold_expression.isra.20+0xba>
 8006790:	2bff      	cmp	r3, #255	; 0xff
 8006792:	4619      	mov	r1, r3
 8006794:	4620      	mov	r0, r4
 8006796:	f815 9b01 	ldrb.w	r9, [r5], #1
 800679a:	d0e3      	beq.n	8006764 <d_maybe_print_fold_expression.isra.20+0x11c>
 800679c:	461a      	mov	r2, r3
 800679e:	3301      	adds	r3, #1
 80067a0:	e7ee      	b.n	8006780 <d_maybe_print_fold_expression.isra.20+0x138>
 80067a2:	4e45      	ldr	r6, [pc, #276]	; (80068b8 <d_maybe_print_fold_expression.isra.20+0x270>)
 80067a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80067a8:	f106 0a04 	add.w	sl, r6, #4
 80067ac:	e017      	b.n	80067de <d_maybe_print_fold_expression.isra.20+0x196>
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80067b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80067ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80067be:	4798      	blx	r3
 80067c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067c4:	3301      	adds	r3, #1
 80067c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067ca:	2200      	movs	r2, #0
 80067cc:	2301      	movs	r3, #1
 80067ce:	45b2      	cmp	sl, r6
 80067d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80067d4:	f804 b002 	strb.w	fp, [r4, r2]
 80067d8:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80067dc:	d05e      	beq.n	800689c <d_maybe_print_fold_expression.isra.20+0x254>
 80067de:	2bff      	cmp	r3, #255	; 0xff
 80067e0:	4619      	mov	r1, r3
 80067e2:	4620      	mov	r0, r4
 80067e4:	f816 bb01 	ldrb.w	fp, [r6], #1
 80067e8:	d0e1      	beq.n	80067ae <d_maybe_print_fold_expression.isra.20+0x166>
 80067ea:	461a      	mov	r2, r3
 80067ec:	3301      	adds	r3, #1
 80067ee:	e7ee      	b.n	80067ce <d_maybe_print_fold_expression.isra.20+0x186>
 80067f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80067f4:	2bff      	cmp	r3, #255	; 0xff
 80067f6:	d110      	bne.n	800681a <d_maybe_print_fold_expression.isra.20+0x1d2>
 80067f8:	2600      	movs	r6, #0
 80067fa:	4619      	mov	r1, r3
 80067fc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006800:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006804:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006808:	4798      	blx	r3
 800680a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800680e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006818:	4633      	mov	r3, r6
 800681a:	1c59      	adds	r1, r3, #1
 800681c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8006820:	464a      	mov	r2, r9
 8006822:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006826:	4620      	mov	r0, r4
 8006828:	f804 c003 	strb.w	ip, [r4, r3]
 800682c:	4629      	mov	r1, r5
 800682e:	f884 c104 	strb.w	ip, [r4, #260]	; 0x104
 8006832:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80068bc <d_maybe_print_fold_expression.isra.20+0x274>
 8006836:	f7ff feb5 	bl	80065a4 <d_print_subexpr>
 800683a:	4642      	mov	r2, r8
 800683c:	4629      	mov	r1, r5
 800683e:	4620      	mov	r0, r4
 8006840:	f7ff fe70 	bl	8006524 <d_print_expr_op>
 8006844:	f109 0a03 	add.w	sl, r9, #3
 8006848:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800684c:	2600      	movs	r6, #0
 800684e:	e016      	b.n	800687e <d_maybe_print_fold_expression.isra.20+0x236>
 8006850:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006854:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006858:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800685c:	4798      	blx	r3
 800685e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006862:	3301      	adds	r3, #1
 8006864:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006868:	2200      	movs	r2, #0
 800686a:	2301      	movs	r3, #1
 800686c:	45d1      	cmp	r9, sl
 800686e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006872:	f804 b002 	strb.w	fp, [r4, r2]
 8006876:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 800687a:	f43f af1d 	beq.w	80066b8 <d_maybe_print_fold_expression.isra.20+0x70>
 800687e:	2bff      	cmp	r3, #255	; 0xff
 8006880:	4619      	mov	r1, r3
 8006882:	4620      	mov	r0, r4
 8006884:	f819 bb01 	ldrb.w	fp, [r9], #1
 8006888:	d0e2      	beq.n	8006850 <d_maybe_print_fold_expression.isra.20+0x208>
 800688a:	461a      	mov	r2, r3
 800688c:	3301      	adds	r3, #1
 800688e:	e7ed      	b.n	800686c <d_maybe_print_fold_expression.isra.20+0x224>
 8006890:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800689a:	e6eb      	b.n	8006674 <d_maybe_print_fold_expression.isra.20+0x2c>
 800689c:	4642      	mov	r2, r8
 800689e:	4629      	mov	r1, r5
 80068a0:	4620      	mov	r0, r4
 80068a2:	f7ff fe3f 	bl	8006524 <d_print_expr_op>
 80068a6:	464a      	mov	r2, r9
 80068a8:	e70c      	b.n	80066c4 <d_maybe_print_fold_expression.isra.20+0x7c>
 80068aa:	1c4a      	adds	r2, r1, #1
 80068ac:	e723      	b.n	80066f6 <d_maybe_print_fold_expression.isra.20+0xae>
 80068ae:	1c4a      	adds	r2, r1, #1
 80068b0:	e741      	b.n	8006736 <d_maybe_print_fold_expression.isra.20+0xee>
 80068b2:	bf00      	nop
 80068b4:	0801c538 	.word	0x0801c538
 80068b8:	0801c530 	.word	0x0801c530
 80068bc:	0801c43c 	.word	0x0801c43c

080068c0 <d_demangle_callback.constprop.22>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	b0e5      	sub	sp, #404	; 0x194
 80068c6:	f890 a000 	ldrb.w	sl, [r0]
 80068ca:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	4605      	mov	r5, r0
 80068d2:	4688      	mov	r8, r1
 80068d4:	4616      	mov	r6, r2
 80068d6:	f000 80f3 	beq.w	8006ac0 <d_demangle_callback.constprop.22+0x200>
 80068da:	2208      	movs	r2, #8
 80068dc:	49bb      	ldr	r1, [pc, #748]	; (8006bcc <d_demangle_callback.constprop.22+0x30c>)
 80068de:	4628      	mov	r0, r5
 80068e0:	f00c ff73 	bl	80137ca <strncmp>
 80068e4:	b948      	cbnz	r0, 80068fa <d_demangle_callback.constprop.22+0x3a>
 80068e6:	7a2b      	ldrb	r3, [r5, #8]
 80068e8:	2b2e      	cmp	r3, #46	; 0x2e
 80068ea:	f000 80d8 	beq.w	8006a9e <d_demangle_callback.constprop.22+0x1de>
 80068ee:	2b5f      	cmp	r3, #95	; 0x5f
 80068f0:	f000 80d5 	beq.w	8006a9e <d_demangle_callback.constprop.22+0x1de>
 80068f4:	2b24      	cmp	r3, #36	; 0x24
 80068f6:	f000 80d2 	beq.w	8006a9e <d_demangle_callback.constprop.22+0x1de>
 80068fa:	f04f 0900 	mov.w	r9, #0
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 fa38 	bl	8006d74 <strlen>
 8006904:	0142      	lsls	r2, r0, #5
 8006906:	0083      	lsls	r3, r0, #2
 8006908:	3208      	adds	r2, #8
 800690a:	330a      	adds	r3, #10
 800690c:	ebad 0d02 	sub.w	sp, sp, r2
 8006910:	f023 0307 	bic.w	r3, r3, #7
 8006914:	2400      	movs	r4, #0
 8006916:	46eb      	mov	fp, sp
 8006918:	1829      	adds	r1, r5, r0
 800691a:	ebad 0d03 	sub.w	sp, sp, r3
 800691e:	2211      	movs	r2, #17
 8006920:	0043      	lsls	r3, r0, #1
 8006922:	f1b9 0f01 	cmp.w	r9, #1
 8006926:	f8c7 b01c 	str.w	fp, [r7, #28]
 800692a:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 800692e:	60fd      	str	r5, [r7, #12]
 8006930:	61bd      	str	r5, [r7, #24]
 8006932:	6338      	str	r0, [r7, #48]	; 0x30
 8006934:	6139      	str	r1, [r7, #16]
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
 8006938:	617a      	str	r2, [r7, #20]
 800693a:	623c      	str	r4, [r7, #32]
 800693c:	62fc      	str	r4, [r7, #44]	; 0x2c
 800693e:	e9c7 440d 	strd	r4, r4, [r7, #52]	; 0x34
 8006942:	e9c7 440f 	strd	r4, r4, [r7, #60]	; 0x3c
 8006946:	647c      	str	r4, [r7, #68]	; 0x44
 8006948:	f000 80a0 	beq.w	8006a8c <d_demangle_callback.constprop.22+0x1cc>
 800694c:	f0c0 80bf 	bcc.w	8006ace <d_demangle_callback.constprop.22+0x20e>
 8006950:	7aea      	ldrb	r2, [r5, #11]
 8006952:	f1b9 0f02 	cmp.w	r9, #2
 8006956:	f105 0a0b 	add.w	sl, r5, #11
 800695a:	bf14      	ite	ne
 800695c:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006960:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006964:	2a5f      	cmp	r2, #95	; 0x5f
 8006966:	f8c7 a018 	str.w	sl, [r7, #24]
 800696a:	f000 80b9 	beq.w	8006ae0 <d_demangle_callback.constprop.22+0x220>
 800696e:	4650      	mov	r0, sl
 8006970:	607b      	str	r3, [r7, #4]
 8006972:	f000 f9ff 	bl	8006d74 <strlen>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f340 8123 	ble.w	8006bc4 <d_demangle_callback.constprop.22+0x304>
 800697e:	2300      	movs	r3, #0
 8006980:	2201      	movs	r2, #1
 8006982:	f8cb 3004 	str.w	r3, [fp, #4]
 8006986:	623a      	str	r2, [r7, #32]
 8006988:	2800      	cmp	r0, #0
 800698a:	f000 811b 	beq.w	8006bc4 <d_demangle_callback.constprop.22+0x304>
 800698e:	e9cb a002 	strd	sl, r0, [fp, #8]
 8006992:	f88b 3000 	strb.w	r3, [fp]
 8006996:	4649      	mov	r1, r9
 8006998:	2300      	movs	r3, #0
 800699a:	465a      	mov	r2, fp
 800699c:	f107 000c 	add.w	r0, r7, #12
 80069a0:	f7f9 fc1e 	bl	80001e0 <d_make_comp>
 80069a4:	69bc      	ldr	r4, [r7, #24]
 80069a6:	4605      	mov	r5, r0
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 f9e3 	bl	8006d74 <strlen>
 80069ae:	1823      	adds	r3, r4, r0
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	f814 9000 	ldrb.w	r9, [r4, r0]
 80069b6:	f1b9 0f00 	cmp.w	r9, #0
 80069ba:	d16a      	bne.n	8006a92 <d_demangle_callback.constprop.22+0x1d2>
 80069bc:	2d00      	cmp	r5, #0
 80069be:	d068      	beq.n	8006a92 <d_demangle_callback.constprop.22+0x1d2>
 80069c0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80069c4:	462a      	mov	r2, r5
 80069c6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80069ca:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 80069ce:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 80069d2:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80069d6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80069da:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80069de:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80069e2:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80069e6:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 80069ea:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 80069ee:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 80069f2:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 80069f6:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80069fa:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 80069fe:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 8006a02:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006a06:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006a0a:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8006a0e:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8006a12:	f7f9 fc49 	bl	80002a8 <d_count_templates_scopes>
 8006a16:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8006a1a:	f8d4 6140 	ldr.w	r6, [r4, #320]	; 0x140
 8006a1e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	fb06 f603 	mul.w	r6, r6, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	bfb8      	it	lt
 8006a2c:	2201      	movlt	r2, #1
 8006a2e:	00d2      	lsls	r2, r2, #3
 8006a30:	2e01      	cmp	r6, #1
 8006a32:	4633      	mov	r3, r6
 8006a34:	f102 0208 	add.w	r2, r2, #8
 8006a38:	bfb8      	it	lt
 8006a3a:	2301      	movlt	r3, #1
 8006a3c:	46e8      	mov	r8, sp
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	ebad 0d02 	sub.w	sp, sp, r2
 8006a44:	3308      	adds	r3, #8
 8006a46:	4669      	mov	r1, sp
 8006a48:	462a      	mov	r2, r5
 8006a4a:	ebad 0d03 	sub.w	sp, sp, r3
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8006a54:	2111      	movs	r1, #17
 8006a56:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006a5a:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8006a5e:	f7fc f899 	bl	8002b94 <d_print_comp>
 8006a62:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006a66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006a6a:	f804 9001 	strb.w	r9, [r4, r1]
 8006a6e:	4620      	mov	r0, r4
 8006a70:	46c5      	mov	sp, r8
 8006a72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006a76:	4798      	blx	r3
 8006a78:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8006a7c:	fab0 f080 	clz	r0, r0
 8006a80:	0940      	lsrs	r0, r0, #5
 8006a82:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006a86:	46bd      	mov	sp, r7
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 8006a90:	d033      	beq.n	8006afa <d_demangle_callback.constprop.22+0x23a>
 8006a92:	2000      	movs	r0, #0
 8006a94:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9e:	7a6b      	ldrb	r3, [r5, #9]
 8006aa0:	2b44      	cmp	r3, #68	; 0x44
 8006aa2:	d002      	beq.n	8006aaa <d_demangle_callback.constprop.22+0x1ea>
 8006aa4:	2b49      	cmp	r3, #73	; 0x49
 8006aa6:	f47f af28 	bne.w	80068fa <d_demangle_callback.constprop.22+0x3a>
 8006aaa:	7aaa      	ldrb	r2, [r5, #10]
 8006aac:	2a5f      	cmp	r2, #95	; 0x5f
 8006aae:	f47f af24 	bne.w	80068fa <d_demangle_callback.constprop.22+0x3a>
 8006ab2:	2b49      	cmp	r3, #73	; 0x49
 8006ab4:	bf14      	ite	ne
 8006ab6:	f04f 0903 	movne.w	r9, #3
 8006aba:	f04f 0902 	moveq.w	r9, #2
 8006abe:	e71e      	b.n	80068fe <d_demangle_callback.constprop.22+0x3e>
 8006ac0:	7843      	ldrb	r3, [r0, #1]
 8006ac2:	2b5a      	cmp	r3, #90	; 0x5a
 8006ac4:	f47f af09 	bne.w	80068da <d_demangle_callback.constprop.22+0x1a>
 8006ac8:	f04f 0901 	mov.w	r9, #1
 8006acc:	e717      	b.n	80068fe <d_demangle_callback.constprop.22+0x3e>
 8006ace:	f107 000c 	add.w	r0, r7, #12
 8006ad2:	f7fa fe05 	bl	80016e0 <d_type>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	4605      	mov	r5, r0
 8006ada:	f893 9000 	ldrb.w	r9, [r3]
 8006ade:	e76a      	b.n	80069b6 <d_demangle_callback.constprop.22+0xf6>
 8006ae0:	7b2a      	ldrb	r2, [r5, #12]
 8006ae2:	2a5a      	cmp	r2, #90	; 0x5a
 8006ae4:	f47f af43 	bne.w	800696e <d_demangle_callback.constprop.22+0xae>
 8006ae8:	350d      	adds	r5, #13
 8006aea:	4621      	mov	r1, r4
 8006aec:	f107 000c 	add.w	r0, r7, #12
 8006af0:	61bd      	str	r5, [r7, #24]
 8006af2:	f7fb fd37 	bl	8002564 <d_encoding>
 8006af6:	4683      	mov	fp, r0
 8006af8:	e74d      	b.n	8006996 <d_demangle_callback.constprop.22+0xd6>
 8006afa:	786b      	ldrb	r3, [r5, #1]
 8006afc:	2b5a      	cmp	r3, #90	; 0x5a
 8006afe:	d1c8      	bne.n	8006a92 <d_demangle_callback.constprop.22+0x1d2>
 8006b00:	3502      	adds	r5, #2
 8006b02:	4649      	mov	r1, r9
 8006b04:	f107 000c 	add.w	r0, r7, #12
 8006b08:	61bd      	str	r5, [r7, #24]
 8006b0a:	f7fb fd2b 	bl	8002564 <d_encoding>
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	07db      	lsls	r3, r3, #31
 8006b12:	4605      	mov	r5, r0
 8006b14:	d552      	bpl.n	8006bbc <d_demangle_callback.constprop.22+0x2fc>
 8006b16:	69b8      	ldr	r0, [r7, #24]
 8006b18:	f890 9000 	ldrb.w	r9, [r0]
 8006b1c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006b20:	f47f af49 	bne.w	80069b6 <d_demangle_callback.constprop.22+0xf6>
 8006b24:	7843      	ldrb	r3, [r0, #1]
 8006b26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b2a:	2a19      	cmp	r2, #25
 8006b2c:	d93a      	bls.n	8006ba4 <d_demangle_callback.constprop.22+0x2e4>
 8006b2e:	2b5f      	cmp	r3, #95	; 0x5f
 8006b30:	d038      	beq.n	8006ba4 <d_demangle_callback.constprop.22+0x2e4>
 8006b32:	3b30      	subs	r3, #48	; 0x30
 8006b34:	2b09      	cmp	r3, #9
 8006b36:	d841      	bhi.n	8006bbc <d_demangle_callback.constprop.22+0x2fc>
 8006b38:	7803      	ldrb	r3, [r0, #0]
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b3e:	d112      	bne.n	8006b66 <d_demangle_callback.constprop.22+0x2a6>
 8006b40:	7853      	ldrb	r3, [r2, #1]
 8006b42:	3b30      	subs	r3, #48	; 0x30
 8006b44:	2b09      	cmp	r3, #9
 8006b46:	d80e      	bhi.n	8006b66 <d_demangle_callback.constprop.22+0x2a6>
 8006b48:	7893      	ldrb	r3, [r2, #2]
 8006b4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b4e:	2909      	cmp	r1, #9
 8006b50:	f102 0202 	add.w	r2, r2, #2
 8006b54:	d8f2      	bhi.n	8006b3c <d_demangle_callback.constprop.22+0x27c>
 8006b56:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006b5a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b5e:	2909      	cmp	r1, #9
 8006b60:	d9f9      	bls.n	8006b56 <d_demangle_callback.constprop.22+0x296>
 8006b62:	2b2e      	cmp	r3, #46	; 0x2e
 8006b64:	d0ec      	beq.n	8006b40 <d_demangle_callback.constprop.22+0x280>
 8006b66:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 8006b6a:	4299      	cmp	r1, r3
 8006b6c:	61ba      	str	r2, [r7, #24]
 8006b6e:	da17      	bge.n	8006ba0 <d_demangle_callback.constprop.22+0x2e0>
 8006b70:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8006b74:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006b78:	eb0e 030c 	add.w	r3, lr, ip
 8006b7c:	3101      	adds	r1, #1
 8006b7e:	1a12      	subs	r2, r2, r0
 8006b80:	605c      	str	r4, [r3, #4]
 8006b82:	6239      	str	r1, [r7, #32]
 8006b84:	d00c      	beq.n	8006ba0 <d_demangle_callback.constprop.22+0x2e0>
 8006b86:	605c      	str	r4, [r3, #4]
 8006b88:	f80e 400c 	strb.w	r4, [lr, ip]
 8006b8c:	e9c3 0202 	strd	r0, r2, [r3, #8]
 8006b90:	462a      	mov	r2, r5
 8006b92:	214d      	movs	r1, #77	; 0x4d
 8006b94:	f107 000c 	add.w	r0, r7, #12
 8006b98:	f7f9 fb22 	bl	80001e0 <d_make_comp>
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	e7ba      	b.n	8006b16 <d_demangle_callback.constprop.22+0x256>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e7f5      	b.n	8006b90 <d_demangle_callback.constprop.22+0x2d0>
 8006ba4:	1c81      	adds	r1, r0, #2
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bac:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8006bb0:	f1bc 0f19 	cmp.w	ip, #25
 8006bb4:	d9f7      	bls.n	8006ba6 <d_demangle_callback.constprop.22+0x2e6>
 8006bb6:	2b5f      	cmp	r3, #95	; 0x5f
 8006bb8:	d0f5      	beq.n	8006ba6 <d_demangle_callback.constprop.22+0x2e6>
 8006bba:	e7bf      	b.n	8006b3c <d_demangle_callback.constprop.22+0x27c>
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f893 9000 	ldrb.w	r9, [r3]
 8006bc2:	e6f8      	b.n	80069b6 <d_demangle_callback.constprop.22+0xf6>
 8006bc4:	f04f 0b00 	mov.w	fp, #0
 8006bc8:	e6e5      	b.n	8006996 <d_demangle_callback.constprop.22+0xd6>
 8006bca:	bf00      	nop
 8006bcc:	0801c1c8 	.word	0x0801c1c8

08006bd0 <__cxa_demangle>:
 8006bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	b380      	cbz	r0, 8006c3a <__cxa_demangle+0x6a>
 8006bd8:	b101      	cbz	r1, 8006bdc <__cxa_demangle+0xc>
 8006bda:	b372      	cbz	r2, 8006c3a <__cxa_demangle+0x6a>
 8006bdc:	2400      	movs	r4, #0
 8006bde:	4617      	mov	r7, r2
 8006be0:	460e      	mov	r6, r1
 8006be2:	466a      	mov	r2, sp
 8006be4:	492b      	ldr	r1, [pc, #172]	; (8006c94 <__cxa_demangle+0xc4>)
 8006be6:	461d      	mov	r5, r3
 8006be8:	e9cd 4400 	strd	r4, r4, [sp]
 8006bec:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006bf0:	f7ff fe66 	bl	80068c0 <d_demangle_callback.constprop.22>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d047      	beq.n	8006c88 <__cxa_demangle+0xb8>
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	9c00      	ldr	r4, [sp, #0]
 8006bfc:	b9ab      	cbnz	r3, 8006c2a <__cxa_demangle+0x5a>
 8006bfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c02:	b36c      	cbz	r4, 8006c60 <__cxa_demangle+0x90>
 8006c04:	b1b6      	cbz	r6, 8006c34 <__cxa_demangle+0x64>
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f8b4 	bl	8006d74 <strlen>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	4298      	cmp	r0, r3
 8006c10:	d31c      	bcc.n	8006c4c <__cxa_demangle+0x7c>
 8006c12:	4630      	mov	r0, r6
 8006c14:	f00c f84c 	bl	8012cb0 <free>
 8006c18:	f8c7 8000 	str.w	r8, [r7]
 8006c1c:	b195      	cbz	r5, 8006c44 <__cxa_demangle+0x74>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4620      	mov	r0, r4
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	b004      	add	sp, #16
 8006c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c2a:	b334      	cbz	r4, 8006c7a <__cxa_demangle+0xaa>
 8006c2c:	f04f 0801 	mov.w	r8, #1
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	d1e8      	bne.n	8006c06 <__cxa_demangle+0x36>
 8006c34:	2f00      	cmp	r7, #0
 8006c36:	d1ef      	bne.n	8006c18 <__cxa_demangle+0x48>
 8006c38:	e7f0      	b.n	8006c1c <__cxa_demangle+0x4c>
 8006c3a:	b113      	cbz	r3, 8006c42 <__cxa_demangle+0x72>
 8006c3c:	f06f 0202 	mvn.w	r2, #2
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	2400      	movs	r4, #0
 8006c44:	4620      	mov	r0, r4
 8006c46:	b004      	add	sp, #16
 8006c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c4c:	1c42      	adds	r2, r0, #1
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4630      	mov	r0, r6
 8006c52:	f00c fa7a 	bl	801314a <memcpy>
 8006c56:	4620      	mov	r0, r4
 8006c58:	f00c f82a 	bl	8012cb0 <free>
 8006c5c:	4634      	mov	r4, r6
 8006c5e:	e7dd      	b.n	8006c1c <__cxa_demangle+0x4c>
 8006c60:	2d00      	cmp	r5, #0
 8006c62:	d0ee      	beq.n	8006c42 <__cxa_demangle+0x72>
 8006c64:	f1b8 0f01 	cmp.w	r8, #1
 8006c68:	d009      	beq.n	8006c7e <__cxa_demangle+0xae>
 8006c6a:	2400      	movs	r4, #0
 8006c6c:	f06f 0301 	mvn.w	r3, #1
 8006c70:	4620      	mov	r0, r4
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	b004      	add	sp, #16
 8006c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7a:	2d00      	cmp	r5, #0
 8006c7c:	d0e1      	beq.n	8006c42 <__cxa_demangle+0x72>
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c82:	602b      	str	r3, [r5, #0]
 8006c84:	2400      	movs	r4, #0
 8006c86:	e7dd      	b.n	8006c44 <__cxa_demangle+0x74>
 8006c88:	9800      	ldr	r0, [sp, #0]
 8006c8a:	f00c f811 	bl	8012cb0 <free>
 8006c8e:	2d00      	cmp	r5, #0
 8006c90:	d1eb      	bne.n	8006c6a <__cxa_demangle+0x9a>
 8006c92:	e7d6      	b.n	8006c42 <__cxa_demangle+0x72>
 8006c94:	08000859 	.word	0x08000859

08006c98 <__gcclibcxx_demangle_callback>:
 8006c98:	b160      	cbz	r0, 8006cb4 <__gcclibcxx_demangle_callback+0x1c>
 8006c9a:	b508      	push	{r3, lr}
 8006c9c:	b139      	cbz	r1, 8006cae <__gcclibcxx_demangle_callback+0x16>
 8006c9e:	f7ff fe0f 	bl	80068c0 <d_demangle_callback.constprop.22>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	bf0c      	ite	eq
 8006ca6:	f06f 0001 	mvneq.w	r0, #1
 8006caa:	2000      	movne	r0, #0
 8006cac:	bd08      	pop	{r3, pc}
 8006cae:	f06f 0002 	mvn.w	r0, #2
 8006cb2:	bd08      	pop	{r3, pc}
 8006cb4:	f06f 0002 	mvn.w	r0, #2
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	0000      	movs	r0, r0
	...

08006cc0 <memchr>:
 8006cc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006cc4:	2a10      	cmp	r2, #16
 8006cc6:	db2b      	blt.n	8006d20 <memchr+0x60>
 8006cc8:	f010 0f07 	tst.w	r0, #7
 8006ccc:	d008      	beq.n	8006ce0 <memchr+0x20>
 8006cce:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006cd2:	3a01      	subs	r2, #1
 8006cd4:	428b      	cmp	r3, r1
 8006cd6:	d02d      	beq.n	8006d34 <memchr+0x74>
 8006cd8:	f010 0f07 	tst.w	r0, #7
 8006cdc:	b342      	cbz	r2, 8006d30 <memchr+0x70>
 8006cde:	d1f6      	bne.n	8006cce <memchr+0xe>
 8006ce0:	b4f0      	push	{r4, r5, r6, r7}
 8006ce2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006ce6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006cea:	f022 0407 	bic.w	r4, r2, #7
 8006cee:	f07f 0700 	mvns.w	r7, #0
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006cf8:	3c08      	subs	r4, #8
 8006cfa:	ea85 0501 	eor.w	r5, r5, r1
 8006cfe:	ea86 0601 	eor.w	r6, r6, r1
 8006d02:	fa85 f547 	uadd8	r5, r5, r7
 8006d06:	faa3 f587 	sel	r5, r3, r7
 8006d0a:	fa86 f647 	uadd8	r6, r6, r7
 8006d0e:	faa5 f687 	sel	r6, r5, r7
 8006d12:	b98e      	cbnz	r6, 8006d38 <memchr+0x78>
 8006d14:	d1ee      	bne.n	8006cf4 <memchr+0x34>
 8006d16:	bcf0      	pop	{r4, r5, r6, r7}
 8006d18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006d1c:	f002 0207 	and.w	r2, r2, #7
 8006d20:	b132      	cbz	r2, 8006d30 <memchr+0x70>
 8006d22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d26:	3a01      	subs	r2, #1
 8006d28:	ea83 0301 	eor.w	r3, r3, r1
 8006d2c:	b113      	cbz	r3, 8006d34 <memchr+0x74>
 8006d2e:	d1f8      	bne.n	8006d22 <memchr+0x62>
 8006d30:	2000      	movs	r0, #0
 8006d32:	4770      	bx	lr
 8006d34:	3801      	subs	r0, #1
 8006d36:	4770      	bx	lr
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	bf06      	itte	eq
 8006d3c:	4635      	moveq	r5, r6
 8006d3e:	3803      	subeq	r0, #3
 8006d40:	3807      	subne	r0, #7
 8006d42:	f015 0f01 	tst.w	r5, #1
 8006d46:	d107      	bne.n	8006d58 <memchr+0x98>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006d4e:	bf02      	ittt	eq
 8006d50:	3001      	addeq	r0, #1
 8006d52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006d56:	3001      	addeq	r0, #1
 8006d58:	bcf0      	pop	{r4, r5, r6, r7}
 8006d5a:	3801      	subs	r0, #1
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop

08006d60 <strcmp>:
 8006d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d68:	2a01      	cmp	r2, #1
 8006d6a:	bf28      	it	cs
 8006d6c:	429a      	cmpcs	r2, r3
 8006d6e:	d0f7      	beq.n	8006d60 <strcmp>
 8006d70:	1ad0      	subs	r0, r2, r3
 8006d72:	4770      	bx	lr

08006d74 <strlen>:
 8006d74:	4603      	mov	r3, r0
 8006d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d7a:	2a00      	cmp	r2, #0
 8006d7c:	d1fb      	bne.n	8006d76 <strlen+0x2>
 8006d7e:	1a18      	subs	r0, r3, r0
 8006d80:	3801      	subs	r0, #1
 8006d82:	4770      	bx	lr

08006d84 <__aeabi_drsub>:
 8006d84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006d88:	e002      	b.n	8006d90 <__adddf3>
 8006d8a:	bf00      	nop

08006d8c <__aeabi_dsub>:
 8006d8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006d90 <__adddf3>:
 8006d90:	b530      	push	{r4, r5, lr}
 8006d92:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006d96:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006d9a:	ea94 0f05 	teq	r4, r5
 8006d9e:	bf08      	it	eq
 8006da0:	ea90 0f02 	teqeq	r0, r2
 8006da4:	bf1f      	itttt	ne
 8006da6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006daa:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006dae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006db2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006db6:	f000 80e2 	beq.w	8006f7e <__adddf3+0x1ee>
 8006dba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006dbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006dc2:	bfb8      	it	lt
 8006dc4:	426d      	neglt	r5, r5
 8006dc6:	dd0c      	ble.n	8006de2 <__adddf3+0x52>
 8006dc8:	442c      	add	r4, r5
 8006dca:	ea80 0202 	eor.w	r2, r0, r2
 8006dce:	ea81 0303 	eor.w	r3, r1, r3
 8006dd2:	ea82 0000 	eor.w	r0, r2, r0
 8006dd6:	ea83 0101 	eor.w	r1, r3, r1
 8006dda:	ea80 0202 	eor.w	r2, r0, r2
 8006dde:	ea81 0303 	eor.w	r3, r1, r3
 8006de2:	2d36      	cmp	r5, #54	; 0x36
 8006de4:	bf88      	it	hi
 8006de6:	bd30      	pophi	{r4, r5, pc}
 8006de8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006dec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006df0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006df4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006df8:	d002      	beq.n	8006e00 <__adddf3+0x70>
 8006dfa:	4240      	negs	r0, r0
 8006dfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006e00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006e04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006e08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006e0c:	d002      	beq.n	8006e14 <__adddf3+0x84>
 8006e0e:	4252      	negs	r2, r2
 8006e10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006e14:	ea94 0f05 	teq	r4, r5
 8006e18:	f000 80a7 	beq.w	8006f6a <__adddf3+0x1da>
 8006e1c:	f1a4 0401 	sub.w	r4, r4, #1
 8006e20:	f1d5 0e20 	rsbs	lr, r5, #32
 8006e24:	db0d      	blt.n	8006e42 <__adddf3+0xb2>
 8006e26:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006e2a:	fa22 f205 	lsr.w	r2, r2, r5
 8006e2e:	1880      	adds	r0, r0, r2
 8006e30:	f141 0100 	adc.w	r1, r1, #0
 8006e34:	fa03 f20e 	lsl.w	r2, r3, lr
 8006e38:	1880      	adds	r0, r0, r2
 8006e3a:	fa43 f305 	asr.w	r3, r3, r5
 8006e3e:	4159      	adcs	r1, r3
 8006e40:	e00e      	b.n	8006e60 <__adddf3+0xd0>
 8006e42:	f1a5 0520 	sub.w	r5, r5, #32
 8006e46:	f10e 0e20 	add.w	lr, lr, #32
 8006e4a:	2a01      	cmp	r2, #1
 8006e4c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006e50:	bf28      	it	cs
 8006e52:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006e56:	fa43 f305 	asr.w	r3, r3, r5
 8006e5a:	18c0      	adds	r0, r0, r3
 8006e5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006e60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006e64:	d507      	bpl.n	8006e76 <__adddf3+0xe6>
 8006e66:	f04f 0e00 	mov.w	lr, #0
 8006e6a:	f1dc 0c00 	rsbs	ip, ip, #0
 8006e6e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006e72:	eb6e 0101 	sbc.w	r1, lr, r1
 8006e76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006e7a:	d31b      	bcc.n	8006eb4 <__adddf3+0x124>
 8006e7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006e80:	d30c      	bcc.n	8006e9c <__adddf3+0x10c>
 8006e82:	0849      	lsrs	r1, r1, #1
 8006e84:	ea5f 0030 	movs.w	r0, r0, rrx
 8006e88:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006e8c:	f104 0401 	add.w	r4, r4, #1
 8006e90:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006e94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006e98:	f080 809a 	bcs.w	8006fd0 <__adddf3+0x240>
 8006e9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006ea0:	bf08      	it	eq
 8006ea2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006ea6:	f150 0000 	adcs.w	r0, r0, #0
 8006eaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006eae:	ea41 0105 	orr.w	r1, r1, r5
 8006eb2:	bd30      	pop	{r4, r5, pc}
 8006eb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006eb8:	4140      	adcs	r0, r0
 8006eba:	eb41 0101 	adc.w	r1, r1, r1
 8006ebe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ec2:	f1a4 0401 	sub.w	r4, r4, #1
 8006ec6:	d1e9      	bne.n	8006e9c <__adddf3+0x10c>
 8006ec8:	f091 0f00 	teq	r1, #0
 8006ecc:	bf04      	itt	eq
 8006ece:	4601      	moveq	r1, r0
 8006ed0:	2000      	moveq	r0, #0
 8006ed2:	fab1 f381 	clz	r3, r1
 8006ed6:	bf08      	it	eq
 8006ed8:	3320      	addeq	r3, #32
 8006eda:	f1a3 030b 	sub.w	r3, r3, #11
 8006ede:	f1b3 0220 	subs.w	r2, r3, #32
 8006ee2:	da0c      	bge.n	8006efe <__adddf3+0x16e>
 8006ee4:	320c      	adds	r2, #12
 8006ee6:	dd08      	ble.n	8006efa <__adddf3+0x16a>
 8006ee8:	f102 0c14 	add.w	ip, r2, #20
 8006eec:	f1c2 020c 	rsb	r2, r2, #12
 8006ef0:	fa01 f00c 	lsl.w	r0, r1, ip
 8006ef4:	fa21 f102 	lsr.w	r1, r1, r2
 8006ef8:	e00c      	b.n	8006f14 <__adddf3+0x184>
 8006efa:	f102 0214 	add.w	r2, r2, #20
 8006efe:	bfd8      	it	le
 8006f00:	f1c2 0c20 	rsble	ip, r2, #32
 8006f04:	fa01 f102 	lsl.w	r1, r1, r2
 8006f08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006f0c:	bfdc      	itt	le
 8006f0e:	ea41 010c 	orrle.w	r1, r1, ip
 8006f12:	4090      	lslle	r0, r2
 8006f14:	1ae4      	subs	r4, r4, r3
 8006f16:	bfa2      	ittt	ge
 8006f18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006f1c:	4329      	orrge	r1, r5
 8006f1e:	bd30      	popge	{r4, r5, pc}
 8006f20:	ea6f 0404 	mvn.w	r4, r4
 8006f24:	3c1f      	subs	r4, #31
 8006f26:	da1c      	bge.n	8006f62 <__adddf3+0x1d2>
 8006f28:	340c      	adds	r4, #12
 8006f2a:	dc0e      	bgt.n	8006f4a <__adddf3+0x1ba>
 8006f2c:	f104 0414 	add.w	r4, r4, #20
 8006f30:	f1c4 0220 	rsb	r2, r4, #32
 8006f34:	fa20 f004 	lsr.w	r0, r0, r4
 8006f38:	fa01 f302 	lsl.w	r3, r1, r2
 8006f3c:	ea40 0003 	orr.w	r0, r0, r3
 8006f40:	fa21 f304 	lsr.w	r3, r1, r4
 8006f44:	ea45 0103 	orr.w	r1, r5, r3
 8006f48:	bd30      	pop	{r4, r5, pc}
 8006f4a:	f1c4 040c 	rsb	r4, r4, #12
 8006f4e:	f1c4 0220 	rsb	r2, r4, #32
 8006f52:	fa20 f002 	lsr.w	r0, r0, r2
 8006f56:	fa01 f304 	lsl.w	r3, r1, r4
 8006f5a:	ea40 0003 	orr.w	r0, r0, r3
 8006f5e:	4629      	mov	r1, r5
 8006f60:	bd30      	pop	{r4, r5, pc}
 8006f62:	fa21 f004 	lsr.w	r0, r1, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	bd30      	pop	{r4, r5, pc}
 8006f6a:	f094 0f00 	teq	r4, #0
 8006f6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006f72:	bf06      	itte	eq
 8006f74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006f78:	3401      	addeq	r4, #1
 8006f7a:	3d01      	subne	r5, #1
 8006f7c:	e74e      	b.n	8006e1c <__adddf3+0x8c>
 8006f7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006f82:	bf18      	it	ne
 8006f84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f88:	d029      	beq.n	8006fde <__adddf3+0x24e>
 8006f8a:	ea94 0f05 	teq	r4, r5
 8006f8e:	bf08      	it	eq
 8006f90:	ea90 0f02 	teqeq	r0, r2
 8006f94:	d005      	beq.n	8006fa2 <__adddf3+0x212>
 8006f96:	ea54 0c00 	orrs.w	ip, r4, r0
 8006f9a:	bf04      	itt	eq
 8006f9c:	4619      	moveq	r1, r3
 8006f9e:	4610      	moveq	r0, r2
 8006fa0:	bd30      	pop	{r4, r5, pc}
 8006fa2:	ea91 0f03 	teq	r1, r3
 8006fa6:	bf1e      	ittt	ne
 8006fa8:	2100      	movne	r1, #0
 8006faa:	2000      	movne	r0, #0
 8006fac:	bd30      	popne	{r4, r5, pc}
 8006fae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006fb2:	d105      	bne.n	8006fc0 <__adddf3+0x230>
 8006fb4:	0040      	lsls	r0, r0, #1
 8006fb6:	4149      	adcs	r1, r1
 8006fb8:	bf28      	it	cs
 8006fba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006fbe:	bd30      	pop	{r4, r5, pc}
 8006fc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006fc4:	bf3c      	itt	cc
 8006fc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006fca:	bd30      	popcc	{r4, r5, pc}
 8006fcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006fd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006fd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fd8:	f04f 0000 	mov.w	r0, #0
 8006fdc:	bd30      	pop	{r4, r5, pc}
 8006fde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006fe2:	bf1a      	itte	ne
 8006fe4:	4619      	movne	r1, r3
 8006fe6:	4610      	movne	r0, r2
 8006fe8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006fec:	bf1c      	itt	ne
 8006fee:	460b      	movne	r3, r1
 8006ff0:	4602      	movne	r2, r0
 8006ff2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006ff6:	bf06      	itte	eq
 8006ff8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006ffc:	ea91 0f03 	teqeq	r1, r3
 8007000:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007004:	bd30      	pop	{r4, r5, pc}
 8007006:	bf00      	nop

08007008 <__aeabi_ui2d>:
 8007008:	f090 0f00 	teq	r0, #0
 800700c:	bf04      	itt	eq
 800700e:	2100      	moveq	r1, #0
 8007010:	4770      	bxeq	lr
 8007012:	b530      	push	{r4, r5, lr}
 8007014:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007018:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800701c:	f04f 0500 	mov.w	r5, #0
 8007020:	f04f 0100 	mov.w	r1, #0
 8007024:	e750      	b.n	8006ec8 <__adddf3+0x138>
 8007026:	bf00      	nop

08007028 <__aeabi_i2d>:
 8007028:	f090 0f00 	teq	r0, #0
 800702c:	bf04      	itt	eq
 800702e:	2100      	moveq	r1, #0
 8007030:	4770      	bxeq	lr
 8007032:	b530      	push	{r4, r5, lr}
 8007034:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007038:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800703c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007040:	bf48      	it	mi
 8007042:	4240      	negmi	r0, r0
 8007044:	f04f 0100 	mov.w	r1, #0
 8007048:	e73e      	b.n	8006ec8 <__adddf3+0x138>
 800704a:	bf00      	nop

0800704c <__aeabi_f2d>:
 800704c:	0042      	lsls	r2, r0, #1
 800704e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007052:	ea4f 0131 	mov.w	r1, r1, rrx
 8007056:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800705a:	bf1f      	itttt	ne
 800705c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007060:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007064:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007068:	4770      	bxne	lr
 800706a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800706e:	bf08      	it	eq
 8007070:	4770      	bxeq	lr
 8007072:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007076:	bf04      	itt	eq
 8007078:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800707c:	4770      	bxeq	lr
 800707e:	b530      	push	{r4, r5, lr}
 8007080:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007084:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007088:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800708c:	e71c      	b.n	8006ec8 <__adddf3+0x138>
 800708e:	bf00      	nop

08007090 <__aeabi_ul2d>:
 8007090:	ea50 0201 	orrs.w	r2, r0, r1
 8007094:	bf08      	it	eq
 8007096:	4770      	bxeq	lr
 8007098:	b530      	push	{r4, r5, lr}
 800709a:	f04f 0500 	mov.w	r5, #0
 800709e:	e00a      	b.n	80070b6 <__aeabi_l2d+0x16>

080070a0 <__aeabi_l2d>:
 80070a0:	ea50 0201 	orrs.w	r2, r0, r1
 80070a4:	bf08      	it	eq
 80070a6:	4770      	bxeq	lr
 80070a8:	b530      	push	{r4, r5, lr}
 80070aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80070ae:	d502      	bpl.n	80070b6 <__aeabi_l2d+0x16>
 80070b0:	4240      	negs	r0, r0
 80070b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80070b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80070ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80070be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80070c2:	f43f aed8 	beq.w	8006e76 <__adddf3+0xe6>
 80070c6:	f04f 0203 	mov.w	r2, #3
 80070ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070ce:	bf18      	it	ne
 80070d0:	3203      	addne	r2, #3
 80070d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070d6:	bf18      	it	ne
 80070d8:	3203      	addne	r2, #3
 80070da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80070de:	f1c2 0320 	rsb	r3, r2, #32
 80070e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80070e6:	fa20 f002 	lsr.w	r0, r0, r2
 80070ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80070ee:	ea40 000e 	orr.w	r0, r0, lr
 80070f2:	fa21 f102 	lsr.w	r1, r1, r2
 80070f6:	4414      	add	r4, r2
 80070f8:	e6bd      	b.n	8006e76 <__adddf3+0xe6>
 80070fa:	bf00      	nop

080070fc <__aeabi_dmul>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007102:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007106:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800710a:	bf1d      	ittte	ne
 800710c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007110:	ea94 0f0c 	teqne	r4, ip
 8007114:	ea95 0f0c 	teqne	r5, ip
 8007118:	f000 f8de 	bleq	80072d8 <__aeabi_dmul+0x1dc>
 800711c:	442c      	add	r4, r5
 800711e:	ea81 0603 	eor.w	r6, r1, r3
 8007122:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007126:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800712a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800712e:	bf18      	it	ne
 8007130:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800713c:	d038      	beq.n	80071b0 <__aeabi_dmul+0xb4>
 800713e:	fba0 ce02 	umull	ip, lr, r0, r2
 8007142:	f04f 0500 	mov.w	r5, #0
 8007146:	fbe1 e502 	umlal	lr, r5, r1, r2
 800714a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800714e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007152:	f04f 0600 	mov.w	r6, #0
 8007156:	fbe1 5603 	umlal	r5, r6, r1, r3
 800715a:	f09c 0f00 	teq	ip, #0
 800715e:	bf18      	it	ne
 8007160:	f04e 0e01 	orrne.w	lr, lr, #1
 8007164:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007168:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800716c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007170:	d204      	bcs.n	800717c <__aeabi_dmul+0x80>
 8007172:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007176:	416d      	adcs	r5, r5
 8007178:	eb46 0606 	adc.w	r6, r6, r6
 800717c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007180:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007184:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007188:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800718c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007190:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007194:	bf88      	it	hi
 8007196:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800719a:	d81e      	bhi.n	80071da <__aeabi_dmul+0xde>
 800719c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80071a0:	bf08      	it	eq
 80071a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80071a6:	f150 0000 	adcs.w	r0, r0, #0
 80071aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80071b4:	ea46 0101 	orr.w	r1, r6, r1
 80071b8:	ea40 0002 	orr.w	r0, r0, r2
 80071bc:	ea81 0103 	eor.w	r1, r1, r3
 80071c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80071c4:	bfc2      	ittt	gt
 80071c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80071ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80071ce:	bd70      	popgt	{r4, r5, r6, pc}
 80071d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80071d4:	f04f 0e00 	mov.w	lr, #0
 80071d8:	3c01      	subs	r4, #1
 80071da:	f300 80ab 	bgt.w	8007334 <__aeabi_dmul+0x238>
 80071de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80071e2:	bfde      	ittt	le
 80071e4:	2000      	movle	r0, #0
 80071e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80071ea:	bd70      	pople	{r4, r5, r6, pc}
 80071ec:	f1c4 0400 	rsb	r4, r4, #0
 80071f0:	3c20      	subs	r4, #32
 80071f2:	da35      	bge.n	8007260 <__aeabi_dmul+0x164>
 80071f4:	340c      	adds	r4, #12
 80071f6:	dc1b      	bgt.n	8007230 <__aeabi_dmul+0x134>
 80071f8:	f104 0414 	add.w	r4, r4, #20
 80071fc:	f1c4 0520 	rsb	r5, r4, #32
 8007200:	fa00 f305 	lsl.w	r3, r0, r5
 8007204:	fa20 f004 	lsr.w	r0, r0, r4
 8007208:	fa01 f205 	lsl.w	r2, r1, r5
 800720c:	ea40 0002 	orr.w	r0, r0, r2
 8007210:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007214:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007218:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800721c:	fa21 f604 	lsr.w	r6, r1, r4
 8007220:	eb42 0106 	adc.w	r1, r2, r6
 8007224:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007228:	bf08      	it	eq
 800722a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800722e:	bd70      	pop	{r4, r5, r6, pc}
 8007230:	f1c4 040c 	rsb	r4, r4, #12
 8007234:	f1c4 0520 	rsb	r5, r4, #32
 8007238:	fa00 f304 	lsl.w	r3, r0, r4
 800723c:	fa20 f005 	lsr.w	r0, r0, r5
 8007240:	fa01 f204 	lsl.w	r2, r1, r4
 8007244:	ea40 0002 	orr.w	r0, r0, r2
 8007248:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800724c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007250:	f141 0100 	adc.w	r1, r1, #0
 8007254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007258:	bf08      	it	eq
 800725a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f1c4 0520 	rsb	r5, r4, #32
 8007264:	fa00 f205 	lsl.w	r2, r0, r5
 8007268:	ea4e 0e02 	orr.w	lr, lr, r2
 800726c:	fa20 f304 	lsr.w	r3, r0, r4
 8007270:	fa01 f205 	lsl.w	r2, r1, r5
 8007274:	ea43 0302 	orr.w	r3, r3, r2
 8007278:	fa21 f004 	lsr.w	r0, r1, r4
 800727c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007280:	fa21 f204 	lsr.w	r2, r1, r4
 8007284:	ea20 0002 	bic.w	r0, r0, r2
 8007288:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800728c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007290:	bf08      	it	eq
 8007292:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	f094 0f00 	teq	r4, #0
 800729c:	d10f      	bne.n	80072be <__aeabi_dmul+0x1c2>
 800729e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80072a2:	0040      	lsls	r0, r0, #1
 80072a4:	eb41 0101 	adc.w	r1, r1, r1
 80072a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80072ac:	bf08      	it	eq
 80072ae:	3c01      	subeq	r4, #1
 80072b0:	d0f7      	beq.n	80072a2 <__aeabi_dmul+0x1a6>
 80072b2:	ea41 0106 	orr.w	r1, r1, r6
 80072b6:	f095 0f00 	teq	r5, #0
 80072ba:	bf18      	it	ne
 80072bc:	4770      	bxne	lr
 80072be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80072c2:	0052      	lsls	r2, r2, #1
 80072c4:	eb43 0303 	adc.w	r3, r3, r3
 80072c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80072cc:	bf08      	it	eq
 80072ce:	3d01      	subeq	r5, #1
 80072d0:	d0f7      	beq.n	80072c2 <__aeabi_dmul+0x1c6>
 80072d2:	ea43 0306 	orr.w	r3, r3, r6
 80072d6:	4770      	bx	lr
 80072d8:	ea94 0f0c 	teq	r4, ip
 80072dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80072e0:	bf18      	it	ne
 80072e2:	ea95 0f0c 	teqne	r5, ip
 80072e6:	d00c      	beq.n	8007302 <__aeabi_dmul+0x206>
 80072e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80072ec:	bf18      	it	ne
 80072ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80072f2:	d1d1      	bne.n	8007298 <__aeabi_dmul+0x19c>
 80072f4:	ea81 0103 	eor.w	r1, r1, r3
 80072f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80072fc:	f04f 0000 	mov.w	r0, #0
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007306:	bf06      	itte	eq
 8007308:	4610      	moveq	r0, r2
 800730a:	4619      	moveq	r1, r3
 800730c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007310:	d019      	beq.n	8007346 <__aeabi_dmul+0x24a>
 8007312:	ea94 0f0c 	teq	r4, ip
 8007316:	d102      	bne.n	800731e <__aeabi_dmul+0x222>
 8007318:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800731c:	d113      	bne.n	8007346 <__aeabi_dmul+0x24a>
 800731e:	ea95 0f0c 	teq	r5, ip
 8007322:	d105      	bne.n	8007330 <__aeabi_dmul+0x234>
 8007324:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007328:	bf1c      	itt	ne
 800732a:	4610      	movne	r0, r2
 800732c:	4619      	movne	r1, r3
 800732e:	d10a      	bne.n	8007346 <__aeabi_dmul+0x24a>
 8007330:	ea81 0103 	eor.w	r1, r1, r3
 8007334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007338:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800733c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007340:	f04f 0000 	mov.w	r0, #0
 8007344:	bd70      	pop	{r4, r5, r6, pc}
 8007346:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800734a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800734e:	bd70      	pop	{r4, r5, r6, pc}

08007350 <__aeabi_ddiv>:
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007356:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800735a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800735e:	bf1d      	ittte	ne
 8007360:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007364:	ea94 0f0c 	teqne	r4, ip
 8007368:	ea95 0f0c 	teqne	r5, ip
 800736c:	f000 f8a7 	bleq	80074be <__aeabi_ddiv+0x16e>
 8007370:	eba4 0405 	sub.w	r4, r4, r5
 8007374:	ea81 0e03 	eor.w	lr, r1, r3
 8007378:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800737c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007380:	f000 8088 	beq.w	8007494 <__aeabi_ddiv+0x144>
 8007384:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007388:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800738c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007390:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007394:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007398:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800739c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80073a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80073a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80073a8:	429d      	cmp	r5, r3
 80073aa:	bf08      	it	eq
 80073ac:	4296      	cmpeq	r6, r2
 80073ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80073b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80073b6:	d202      	bcs.n	80073be <__aeabi_ddiv+0x6e>
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80073be:	1ab6      	subs	r6, r6, r2
 80073c0:	eb65 0503 	sbc.w	r5, r5, r3
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80073ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80073d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80073d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073da:	bf22      	ittt	cs
 80073dc:	1ab6      	subcs	r6, r6, r2
 80073de:	4675      	movcs	r5, lr
 80073e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80073ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80073ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073f2:	bf22      	ittt	cs
 80073f4:	1ab6      	subcs	r6, r6, r2
 80073f6:	4675      	movcs	r5, lr
 80073f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80073fc:	085b      	lsrs	r3, r3, #1
 80073fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8007402:	ebb6 0e02 	subs.w	lr, r6, r2
 8007406:	eb75 0e03 	sbcs.w	lr, r5, r3
 800740a:	bf22      	ittt	cs
 800740c:	1ab6      	subcs	r6, r6, r2
 800740e:	4675      	movcs	r5, lr
 8007410:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	ea4f 0232 	mov.w	r2, r2, rrx
 800741a:	ebb6 0e02 	subs.w	lr, r6, r2
 800741e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007422:	bf22      	ittt	cs
 8007424:	1ab6      	subcs	r6, r6, r2
 8007426:	4675      	movcs	r5, lr
 8007428:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800742c:	ea55 0e06 	orrs.w	lr, r5, r6
 8007430:	d018      	beq.n	8007464 <__aeabi_ddiv+0x114>
 8007432:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007436:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800743a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800743e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007442:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007446:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800744a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800744e:	d1c0      	bne.n	80073d2 <__aeabi_ddiv+0x82>
 8007450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007454:	d10b      	bne.n	800746e <__aeabi_ddiv+0x11e>
 8007456:	ea41 0100 	orr.w	r1, r1, r0
 800745a:	f04f 0000 	mov.w	r0, #0
 800745e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007462:	e7b6      	b.n	80073d2 <__aeabi_ddiv+0x82>
 8007464:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007468:	bf04      	itt	eq
 800746a:	4301      	orreq	r1, r0
 800746c:	2000      	moveq	r0, #0
 800746e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007472:	bf88      	it	hi
 8007474:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007478:	f63f aeaf 	bhi.w	80071da <__aeabi_dmul+0xde>
 800747c:	ebb5 0c03 	subs.w	ip, r5, r3
 8007480:	bf04      	itt	eq
 8007482:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007486:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800748a:	f150 0000 	adcs.w	r0, r0, #0
 800748e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007492:	bd70      	pop	{r4, r5, r6, pc}
 8007494:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007498:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800749c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80074a0:	bfc2      	ittt	gt
 80074a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80074a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80074aa:	bd70      	popgt	{r4, r5, r6, pc}
 80074ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80074b0:	f04f 0e00 	mov.w	lr, #0
 80074b4:	3c01      	subs	r4, #1
 80074b6:	e690      	b.n	80071da <__aeabi_dmul+0xde>
 80074b8:	ea45 0e06 	orr.w	lr, r5, r6
 80074bc:	e68d      	b.n	80071da <__aeabi_dmul+0xde>
 80074be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80074c2:	ea94 0f0c 	teq	r4, ip
 80074c6:	bf08      	it	eq
 80074c8:	ea95 0f0c 	teqeq	r5, ip
 80074cc:	f43f af3b 	beq.w	8007346 <__aeabi_dmul+0x24a>
 80074d0:	ea94 0f0c 	teq	r4, ip
 80074d4:	d10a      	bne.n	80074ec <__aeabi_ddiv+0x19c>
 80074d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80074da:	f47f af34 	bne.w	8007346 <__aeabi_dmul+0x24a>
 80074de:	ea95 0f0c 	teq	r5, ip
 80074e2:	f47f af25 	bne.w	8007330 <__aeabi_dmul+0x234>
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	e72c      	b.n	8007346 <__aeabi_dmul+0x24a>
 80074ec:	ea95 0f0c 	teq	r5, ip
 80074f0:	d106      	bne.n	8007500 <__aeabi_ddiv+0x1b0>
 80074f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80074f6:	f43f aefd 	beq.w	80072f4 <__aeabi_dmul+0x1f8>
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	e722      	b.n	8007346 <__aeabi_dmul+0x24a>
 8007500:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007504:	bf18      	it	ne
 8007506:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800750a:	f47f aec5 	bne.w	8007298 <__aeabi_dmul+0x19c>
 800750e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007512:	f47f af0d 	bne.w	8007330 <__aeabi_dmul+0x234>
 8007516:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800751a:	f47f aeeb 	bne.w	80072f4 <__aeabi_dmul+0x1f8>
 800751e:	e712      	b.n	8007346 <__aeabi_dmul+0x24a>

08007520 <__gedf2>:
 8007520:	f04f 3cff 	mov.w	ip, #4294967295
 8007524:	e006      	b.n	8007534 <__cmpdf2+0x4>
 8007526:	bf00      	nop

08007528 <__ledf2>:
 8007528:	f04f 0c01 	mov.w	ip, #1
 800752c:	e002      	b.n	8007534 <__cmpdf2+0x4>
 800752e:	bf00      	nop

08007530 <__cmpdf2>:
 8007530:	f04f 0c01 	mov.w	ip, #1
 8007534:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800753c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007540:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007544:	bf18      	it	ne
 8007546:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800754a:	d01b      	beq.n	8007584 <__cmpdf2+0x54>
 800754c:	b001      	add	sp, #4
 800754e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007552:	bf0c      	ite	eq
 8007554:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007558:	ea91 0f03 	teqne	r1, r3
 800755c:	bf02      	ittt	eq
 800755e:	ea90 0f02 	teqeq	r0, r2
 8007562:	2000      	moveq	r0, #0
 8007564:	4770      	bxeq	lr
 8007566:	f110 0f00 	cmn.w	r0, #0
 800756a:	ea91 0f03 	teq	r1, r3
 800756e:	bf58      	it	pl
 8007570:	4299      	cmppl	r1, r3
 8007572:	bf08      	it	eq
 8007574:	4290      	cmpeq	r0, r2
 8007576:	bf2c      	ite	cs
 8007578:	17d8      	asrcs	r0, r3, #31
 800757a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800757e:	f040 0001 	orr.w	r0, r0, #1
 8007582:	4770      	bx	lr
 8007584:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007588:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800758c:	d102      	bne.n	8007594 <__cmpdf2+0x64>
 800758e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007592:	d107      	bne.n	80075a4 <__cmpdf2+0x74>
 8007594:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800759c:	d1d6      	bne.n	800754c <__cmpdf2+0x1c>
 800759e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80075a2:	d0d3      	beq.n	800754c <__cmpdf2+0x1c>
 80075a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop

080075ac <__aeabi_cdrcmple>:
 80075ac:	4684      	mov	ip, r0
 80075ae:	4610      	mov	r0, r2
 80075b0:	4662      	mov	r2, ip
 80075b2:	468c      	mov	ip, r1
 80075b4:	4619      	mov	r1, r3
 80075b6:	4663      	mov	r3, ip
 80075b8:	e000      	b.n	80075bc <__aeabi_cdcmpeq>
 80075ba:	bf00      	nop

080075bc <__aeabi_cdcmpeq>:
 80075bc:	b501      	push	{r0, lr}
 80075be:	f7ff ffb7 	bl	8007530 <__cmpdf2>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	bf48      	it	mi
 80075c6:	f110 0f00 	cmnmi.w	r0, #0
 80075ca:	bd01      	pop	{r0, pc}

080075cc <__aeabi_dcmpeq>:
 80075cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80075d0:	f7ff fff4 	bl	80075bc <__aeabi_cdcmpeq>
 80075d4:	bf0c      	ite	eq
 80075d6:	2001      	moveq	r0, #1
 80075d8:	2000      	movne	r0, #0
 80075da:	f85d fb08 	ldr.w	pc, [sp], #8
 80075de:	bf00      	nop

080075e0 <__aeabi_dcmplt>:
 80075e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80075e4:	f7ff ffea 	bl	80075bc <__aeabi_cdcmpeq>
 80075e8:	bf34      	ite	cc
 80075ea:	2001      	movcc	r0, #1
 80075ec:	2000      	movcs	r0, #0
 80075ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80075f2:	bf00      	nop

080075f4 <__aeabi_dcmple>:
 80075f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80075f8:	f7ff ffe0 	bl	80075bc <__aeabi_cdcmpeq>
 80075fc:	bf94      	ite	ls
 80075fe:	2001      	movls	r0, #1
 8007600:	2000      	movhi	r0, #0
 8007602:	f85d fb08 	ldr.w	pc, [sp], #8
 8007606:	bf00      	nop

08007608 <__aeabi_dcmpge>:
 8007608:	f84d ed08 	str.w	lr, [sp, #-8]!
 800760c:	f7ff ffce 	bl	80075ac <__aeabi_cdrcmple>
 8007610:	bf94      	ite	ls
 8007612:	2001      	movls	r0, #1
 8007614:	2000      	movhi	r0, #0
 8007616:	f85d fb08 	ldr.w	pc, [sp], #8
 800761a:	bf00      	nop

0800761c <__aeabi_dcmpgt>:
 800761c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007620:	f7ff ffc4 	bl	80075ac <__aeabi_cdrcmple>
 8007624:	bf34      	ite	cc
 8007626:	2001      	movcc	r0, #1
 8007628:	2000      	movcs	r0, #0
 800762a:	f85d fb08 	ldr.w	pc, [sp], #8
 800762e:	bf00      	nop

08007630 <__aeabi_dcmpun>:
 8007630:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007638:	d102      	bne.n	8007640 <__aeabi_dcmpun+0x10>
 800763a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800763e:	d10a      	bne.n	8007656 <__aeabi_dcmpun+0x26>
 8007640:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007648:	d102      	bne.n	8007650 <__aeabi_dcmpun+0x20>
 800764a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800764e:	d102      	bne.n	8007656 <__aeabi_dcmpun+0x26>
 8007650:	f04f 0000 	mov.w	r0, #0
 8007654:	4770      	bx	lr
 8007656:	f04f 0001 	mov.w	r0, #1
 800765a:	4770      	bx	lr

0800765c <__aeabi_d2iz>:
 800765c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007660:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007664:	d215      	bcs.n	8007692 <__aeabi_d2iz+0x36>
 8007666:	d511      	bpl.n	800768c <__aeabi_d2iz+0x30>
 8007668:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800766c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007670:	d912      	bls.n	8007698 <__aeabi_d2iz+0x3c>
 8007672:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800767a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800767e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007682:	fa23 f002 	lsr.w	r0, r3, r2
 8007686:	bf18      	it	ne
 8007688:	4240      	negne	r0, r0
 800768a:	4770      	bx	lr
 800768c:	f04f 0000 	mov.w	r0, #0
 8007690:	4770      	bx	lr
 8007692:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007696:	d105      	bne.n	80076a4 <__aeabi_d2iz+0x48>
 8007698:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800769c:	bf08      	it	eq
 800769e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80076a2:	4770      	bx	lr
 80076a4:	f04f 0000 	mov.w	r0, #0
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop

080076ac <__aeabi_d2uiz>:
 80076ac:	004a      	lsls	r2, r1, #1
 80076ae:	d211      	bcs.n	80076d4 <__aeabi_d2uiz+0x28>
 80076b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80076b4:	d211      	bcs.n	80076da <__aeabi_d2uiz+0x2e>
 80076b6:	d50d      	bpl.n	80076d4 <__aeabi_d2uiz+0x28>
 80076b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80076bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80076c0:	d40e      	bmi.n	80076e0 <__aeabi_d2uiz+0x34>
 80076c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80076c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80076ce:	fa23 f002 	lsr.w	r0, r3, r2
 80076d2:	4770      	bx	lr
 80076d4:	f04f 0000 	mov.w	r0, #0
 80076d8:	4770      	bx	lr
 80076da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80076de:	d102      	bne.n	80076e6 <__aeabi_d2uiz+0x3a>
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	4770      	bx	lr
 80076e6:	f04f 0000 	mov.w	r0, #0
 80076ea:	4770      	bx	lr

080076ec <__aeabi_uldivmod>:
 80076ec:	b953      	cbnz	r3, 8007704 <__aeabi_uldivmod+0x18>
 80076ee:	b94a      	cbnz	r2, 8007704 <__aeabi_uldivmod+0x18>
 80076f0:	2900      	cmp	r1, #0
 80076f2:	bf08      	it	eq
 80076f4:	2800      	cmpeq	r0, #0
 80076f6:	bf1c      	itt	ne
 80076f8:	f04f 31ff 	movne.w	r1, #4294967295
 80076fc:	f04f 30ff 	movne.w	r0, #4294967295
 8007700:	f001 b8f8 	b.w	80088f4 <__aeabi_idiv0>
 8007704:	f1ad 0c08 	sub.w	ip, sp, #8
 8007708:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800770c:	f000 f806 	bl	800771c <__udivmoddi4>
 8007710:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007718:	b004      	add	sp, #16
 800771a:	4770      	bx	lr

0800771c <__udivmoddi4>:
 800771c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007720:	9e08      	ldr	r6, [sp, #32]
 8007722:	4604      	mov	r4, r0
 8007724:	4688      	mov	r8, r1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d14b      	bne.n	80077c2 <__udivmoddi4+0xa6>
 800772a:	428a      	cmp	r2, r1
 800772c:	4615      	mov	r5, r2
 800772e:	d967      	bls.n	8007800 <__udivmoddi4+0xe4>
 8007730:	fab2 f282 	clz	r2, r2
 8007734:	b14a      	cbz	r2, 800774a <__udivmoddi4+0x2e>
 8007736:	f1c2 0720 	rsb	r7, r2, #32
 800773a:	fa01 f302 	lsl.w	r3, r1, r2
 800773e:	fa20 f707 	lsr.w	r7, r0, r7
 8007742:	4095      	lsls	r5, r2
 8007744:	ea47 0803 	orr.w	r8, r7, r3
 8007748:	4094      	lsls	r4, r2
 800774a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800774e:	0c23      	lsrs	r3, r4, #16
 8007750:	fbb8 f7fe 	udiv	r7, r8, lr
 8007754:	fa1f fc85 	uxth.w	ip, r5
 8007758:	fb0e 8817 	mls	r8, lr, r7, r8
 800775c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007760:	fb07 f10c 	mul.w	r1, r7, ip
 8007764:	4299      	cmp	r1, r3
 8007766:	d909      	bls.n	800777c <__udivmoddi4+0x60>
 8007768:	18eb      	adds	r3, r5, r3
 800776a:	f107 30ff 	add.w	r0, r7, #4294967295
 800776e:	f080 811b 	bcs.w	80079a8 <__udivmoddi4+0x28c>
 8007772:	4299      	cmp	r1, r3
 8007774:	f240 8118 	bls.w	80079a8 <__udivmoddi4+0x28c>
 8007778:	3f02      	subs	r7, #2
 800777a:	442b      	add	r3, r5
 800777c:	1a5b      	subs	r3, r3, r1
 800777e:	b2a4      	uxth	r4, r4
 8007780:	fbb3 f0fe 	udiv	r0, r3, lr
 8007784:	fb0e 3310 	mls	r3, lr, r0, r3
 8007788:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800778c:	fb00 fc0c 	mul.w	ip, r0, ip
 8007790:	45a4      	cmp	ip, r4
 8007792:	d909      	bls.n	80077a8 <__udivmoddi4+0x8c>
 8007794:	192c      	adds	r4, r5, r4
 8007796:	f100 33ff 	add.w	r3, r0, #4294967295
 800779a:	f080 8107 	bcs.w	80079ac <__udivmoddi4+0x290>
 800779e:	45a4      	cmp	ip, r4
 80077a0:	f240 8104 	bls.w	80079ac <__udivmoddi4+0x290>
 80077a4:	3802      	subs	r0, #2
 80077a6:	442c      	add	r4, r5
 80077a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80077ac:	eba4 040c 	sub.w	r4, r4, ip
 80077b0:	2700      	movs	r7, #0
 80077b2:	b11e      	cbz	r6, 80077bc <__udivmoddi4+0xa0>
 80077b4:	40d4      	lsrs	r4, r2
 80077b6:	2300      	movs	r3, #0
 80077b8:	e9c6 4300 	strd	r4, r3, [r6]
 80077bc:	4639      	mov	r1, r7
 80077be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c2:	428b      	cmp	r3, r1
 80077c4:	d909      	bls.n	80077da <__udivmoddi4+0xbe>
 80077c6:	2e00      	cmp	r6, #0
 80077c8:	f000 80eb 	beq.w	80079a2 <__udivmoddi4+0x286>
 80077cc:	2700      	movs	r7, #0
 80077ce:	e9c6 0100 	strd	r0, r1, [r6]
 80077d2:	4638      	mov	r0, r7
 80077d4:	4639      	mov	r1, r7
 80077d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077da:	fab3 f783 	clz	r7, r3
 80077de:	2f00      	cmp	r7, #0
 80077e0:	d147      	bne.n	8007872 <__udivmoddi4+0x156>
 80077e2:	428b      	cmp	r3, r1
 80077e4:	d302      	bcc.n	80077ec <__udivmoddi4+0xd0>
 80077e6:	4282      	cmp	r2, r0
 80077e8:	f200 80fa 	bhi.w	80079e0 <__udivmoddi4+0x2c4>
 80077ec:	1a84      	subs	r4, r0, r2
 80077ee:	eb61 0303 	sbc.w	r3, r1, r3
 80077f2:	2001      	movs	r0, #1
 80077f4:	4698      	mov	r8, r3
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	d0e0      	beq.n	80077bc <__udivmoddi4+0xa0>
 80077fa:	e9c6 4800 	strd	r4, r8, [r6]
 80077fe:	e7dd      	b.n	80077bc <__udivmoddi4+0xa0>
 8007800:	b902      	cbnz	r2, 8007804 <__udivmoddi4+0xe8>
 8007802:	deff      	udf	#255	; 0xff
 8007804:	fab2 f282 	clz	r2, r2
 8007808:	2a00      	cmp	r2, #0
 800780a:	f040 808f 	bne.w	800792c <__udivmoddi4+0x210>
 800780e:	1b49      	subs	r1, r1, r5
 8007810:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007814:	fa1f f885 	uxth.w	r8, r5
 8007818:	2701      	movs	r7, #1
 800781a:	fbb1 fcfe 	udiv	ip, r1, lr
 800781e:	0c23      	lsrs	r3, r4, #16
 8007820:	fb0e 111c 	mls	r1, lr, ip, r1
 8007824:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007828:	fb08 f10c 	mul.w	r1, r8, ip
 800782c:	4299      	cmp	r1, r3
 800782e:	d907      	bls.n	8007840 <__udivmoddi4+0x124>
 8007830:	18eb      	adds	r3, r5, r3
 8007832:	f10c 30ff 	add.w	r0, ip, #4294967295
 8007836:	d202      	bcs.n	800783e <__udivmoddi4+0x122>
 8007838:	4299      	cmp	r1, r3
 800783a:	f200 80cd 	bhi.w	80079d8 <__udivmoddi4+0x2bc>
 800783e:	4684      	mov	ip, r0
 8007840:	1a59      	subs	r1, r3, r1
 8007842:	b2a3      	uxth	r3, r4
 8007844:	fbb1 f0fe 	udiv	r0, r1, lr
 8007848:	fb0e 1410 	mls	r4, lr, r0, r1
 800784c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007850:	fb08 f800 	mul.w	r8, r8, r0
 8007854:	45a0      	cmp	r8, r4
 8007856:	d907      	bls.n	8007868 <__udivmoddi4+0x14c>
 8007858:	192c      	adds	r4, r5, r4
 800785a:	f100 33ff 	add.w	r3, r0, #4294967295
 800785e:	d202      	bcs.n	8007866 <__udivmoddi4+0x14a>
 8007860:	45a0      	cmp	r8, r4
 8007862:	f200 80b6 	bhi.w	80079d2 <__udivmoddi4+0x2b6>
 8007866:	4618      	mov	r0, r3
 8007868:	eba4 0408 	sub.w	r4, r4, r8
 800786c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007870:	e79f      	b.n	80077b2 <__udivmoddi4+0x96>
 8007872:	f1c7 0c20 	rsb	ip, r7, #32
 8007876:	40bb      	lsls	r3, r7
 8007878:	fa22 fe0c 	lsr.w	lr, r2, ip
 800787c:	ea4e 0e03 	orr.w	lr, lr, r3
 8007880:	fa01 f407 	lsl.w	r4, r1, r7
 8007884:	fa20 f50c 	lsr.w	r5, r0, ip
 8007888:	fa21 f30c 	lsr.w	r3, r1, ip
 800788c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007890:	4325      	orrs	r5, r4
 8007892:	fbb3 f9f8 	udiv	r9, r3, r8
 8007896:	0c2c      	lsrs	r4, r5, #16
 8007898:	fb08 3319 	mls	r3, r8, r9, r3
 800789c:	fa1f fa8e 	uxth.w	sl, lr
 80078a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80078a4:	fb09 f40a 	mul.w	r4, r9, sl
 80078a8:	429c      	cmp	r4, r3
 80078aa:	fa02 f207 	lsl.w	r2, r2, r7
 80078ae:	fa00 f107 	lsl.w	r1, r0, r7
 80078b2:	d90b      	bls.n	80078cc <__udivmoddi4+0x1b0>
 80078b4:	eb1e 0303 	adds.w	r3, lr, r3
 80078b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80078bc:	f080 8087 	bcs.w	80079ce <__udivmoddi4+0x2b2>
 80078c0:	429c      	cmp	r4, r3
 80078c2:	f240 8084 	bls.w	80079ce <__udivmoddi4+0x2b2>
 80078c6:	f1a9 0902 	sub.w	r9, r9, #2
 80078ca:	4473      	add	r3, lr
 80078cc:	1b1b      	subs	r3, r3, r4
 80078ce:	b2ad      	uxth	r5, r5
 80078d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80078d4:	fb08 3310 	mls	r3, r8, r0, r3
 80078d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80078dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80078e0:	45a2      	cmp	sl, r4
 80078e2:	d908      	bls.n	80078f6 <__udivmoddi4+0x1da>
 80078e4:	eb1e 0404 	adds.w	r4, lr, r4
 80078e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ec:	d26b      	bcs.n	80079c6 <__udivmoddi4+0x2aa>
 80078ee:	45a2      	cmp	sl, r4
 80078f0:	d969      	bls.n	80079c6 <__udivmoddi4+0x2aa>
 80078f2:	3802      	subs	r0, #2
 80078f4:	4474      	add	r4, lr
 80078f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80078fa:	fba0 8902 	umull	r8, r9, r0, r2
 80078fe:	eba4 040a 	sub.w	r4, r4, sl
 8007902:	454c      	cmp	r4, r9
 8007904:	46c2      	mov	sl, r8
 8007906:	464b      	mov	r3, r9
 8007908:	d354      	bcc.n	80079b4 <__udivmoddi4+0x298>
 800790a:	d051      	beq.n	80079b0 <__udivmoddi4+0x294>
 800790c:	2e00      	cmp	r6, #0
 800790e:	d069      	beq.n	80079e4 <__udivmoddi4+0x2c8>
 8007910:	ebb1 050a 	subs.w	r5, r1, sl
 8007914:	eb64 0403 	sbc.w	r4, r4, r3
 8007918:	fa04 fc0c 	lsl.w	ip, r4, ip
 800791c:	40fd      	lsrs	r5, r7
 800791e:	40fc      	lsrs	r4, r7
 8007920:	ea4c 0505 	orr.w	r5, ip, r5
 8007924:	e9c6 5400 	strd	r5, r4, [r6]
 8007928:	2700      	movs	r7, #0
 800792a:	e747      	b.n	80077bc <__udivmoddi4+0xa0>
 800792c:	f1c2 0320 	rsb	r3, r2, #32
 8007930:	fa20 f703 	lsr.w	r7, r0, r3
 8007934:	4095      	lsls	r5, r2
 8007936:	fa01 f002 	lsl.w	r0, r1, r2
 800793a:	fa21 f303 	lsr.w	r3, r1, r3
 800793e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007942:	4338      	orrs	r0, r7
 8007944:	0c01      	lsrs	r1, r0, #16
 8007946:	fbb3 f7fe 	udiv	r7, r3, lr
 800794a:	fa1f f885 	uxth.w	r8, r5
 800794e:	fb0e 3317 	mls	r3, lr, r7, r3
 8007952:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007956:	fb07 f308 	mul.w	r3, r7, r8
 800795a:	428b      	cmp	r3, r1
 800795c:	fa04 f402 	lsl.w	r4, r4, r2
 8007960:	d907      	bls.n	8007972 <__udivmoddi4+0x256>
 8007962:	1869      	adds	r1, r5, r1
 8007964:	f107 3cff 	add.w	ip, r7, #4294967295
 8007968:	d22f      	bcs.n	80079ca <__udivmoddi4+0x2ae>
 800796a:	428b      	cmp	r3, r1
 800796c:	d92d      	bls.n	80079ca <__udivmoddi4+0x2ae>
 800796e:	3f02      	subs	r7, #2
 8007970:	4429      	add	r1, r5
 8007972:	1acb      	subs	r3, r1, r3
 8007974:	b281      	uxth	r1, r0
 8007976:	fbb3 f0fe 	udiv	r0, r3, lr
 800797a:	fb0e 3310 	mls	r3, lr, r0, r3
 800797e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007982:	fb00 f308 	mul.w	r3, r0, r8
 8007986:	428b      	cmp	r3, r1
 8007988:	d907      	bls.n	800799a <__udivmoddi4+0x27e>
 800798a:	1869      	adds	r1, r5, r1
 800798c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007990:	d217      	bcs.n	80079c2 <__udivmoddi4+0x2a6>
 8007992:	428b      	cmp	r3, r1
 8007994:	d915      	bls.n	80079c2 <__udivmoddi4+0x2a6>
 8007996:	3802      	subs	r0, #2
 8007998:	4429      	add	r1, r5
 800799a:	1ac9      	subs	r1, r1, r3
 800799c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80079a0:	e73b      	b.n	800781a <__udivmoddi4+0xfe>
 80079a2:	4637      	mov	r7, r6
 80079a4:	4630      	mov	r0, r6
 80079a6:	e709      	b.n	80077bc <__udivmoddi4+0xa0>
 80079a8:	4607      	mov	r7, r0
 80079aa:	e6e7      	b.n	800777c <__udivmoddi4+0x60>
 80079ac:	4618      	mov	r0, r3
 80079ae:	e6fb      	b.n	80077a8 <__udivmoddi4+0x8c>
 80079b0:	4541      	cmp	r1, r8
 80079b2:	d2ab      	bcs.n	800790c <__udivmoddi4+0x1f0>
 80079b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80079b8:	eb69 020e 	sbc.w	r2, r9, lr
 80079bc:	3801      	subs	r0, #1
 80079be:	4613      	mov	r3, r2
 80079c0:	e7a4      	b.n	800790c <__udivmoddi4+0x1f0>
 80079c2:	4660      	mov	r0, ip
 80079c4:	e7e9      	b.n	800799a <__udivmoddi4+0x27e>
 80079c6:	4618      	mov	r0, r3
 80079c8:	e795      	b.n	80078f6 <__udivmoddi4+0x1da>
 80079ca:	4667      	mov	r7, ip
 80079cc:	e7d1      	b.n	8007972 <__udivmoddi4+0x256>
 80079ce:	4681      	mov	r9, r0
 80079d0:	e77c      	b.n	80078cc <__udivmoddi4+0x1b0>
 80079d2:	3802      	subs	r0, #2
 80079d4:	442c      	add	r4, r5
 80079d6:	e747      	b.n	8007868 <__udivmoddi4+0x14c>
 80079d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80079dc:	442b      	add	r3, r5
 80079de:	e72f      	b.n	8007840 <__udivmoddi4+0x124>
 80079e0:	4638      	mov	r0, r7
 80079e2:	e708      	b.n	80077f6 <__udivmoddi4+0xda>
 80079e4:	4637      	mov	r7, r6
 80079e6:	e6e9      	b.n	80077bc <__udivmoddi4+0xa0>

080079e8 <selfrel_offset31>:
 80079e8:	6803      	ldr	r3, [r0, #0]
 80079ea:	005a      	lsls	r2, r3, #1
 80079ec:	bf4c      	ite	mi
 80079ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80079f2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80079f6:	4418      	add	r0, r3
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop

080079fc <search_EIT_table>:
 80079fc:	b361      	cbz	r1, 8007a58 <search_EIT_table+0x5c>
 80079fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a02:	f101 3aff 	add.w	sl, r1, #4294967295
 8007a06:	4690      	mov	r8, r2
 8007a08:	4606      	mov	r6, r0
 8007a0a:	46d1      	mov	r9, sl
 8007a0c:	2700      	movs	r7, #0
 8007a0e:	eb07 0409 	add.w	r4, r7, r9
 8007a12:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007a16:	1064      	asrs	r4, r4, #1
 8007a18:	00e5      	lsls	r5, r4, #3
 8007a1a:	1971      	adds	r1, r6, r5
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	f7ff ffe3 	bl	80079e8 <selfrel_offset31>
 8007a22:	45a2      	cmp	sl, r4
 8007a24:	4683      	mov	fp, r0
 8007a26:	f105 0008 	add.w	r0, r5, #8
 8007a2a:	4430      	add	r0, r6
 8007a2c:	d009      	beq.n	8007a42 <search_EIT_table+0x46>
 8007a2e:	f7ff ffdb 	bl	80079e8 <selfrel_offset31>
 8007a32:	45c3      	cmp	fp, r8
 8007a34:	f100 30ff 	add.w	r0, r0, #4294967295
 8007a38:	d805      	bhi.n	8007a46 <search_EIT_table+0x4a>
 8007a3a:	4540      	cmp	r0, r8
 8007a3c:	d209      	bcs.n	8007a52 <search_EIT_table+0x56>
 8007a3e:	1c67      	adds	r7, r4, #1
 8007a40:	e7e5      	b.n	8007a0e <search_EIT_table+0x12>
 8007a42:	45c3      	cmp	fp, r8
 8007a44:	d905      	bls.n	8007a52 <search_EIT_table+0x56>
 8007a46:	42a7      	cmp	r7, r4
 8007a48:	d002      	beq.n	8007a50 <search_EIT_table+0x54>
 8007a4a:	f104 39ff 	add.w	r9, r4, #4294967295
 8007a4e:	e7de      	b.n	8007a0e <search_EIT_table+0x12>
 8007a50:	2100      	movs	r1, #0
 8007a52:	4608      	mov	r0, r1
 8007a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a58:	4608      	mov	r0, r1
 8007a5a:	4770      	bx	lr

08007a5c <__gnu_unwind_get_pr_addr>:
 8007a5c:	2801      	cmp	r0, #1
 8007a5e:	d007      	beq.n	8007a70 <__gnu_unwind_get_pr_addr+0x14>
 8007a60:	2802      	cmp	r0, #2
 8007a62:	d007      	beq.n	8007a74 <__gnu_unwind_get_pr_addr+0x18>
 8007a64:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <__gnu_unwind_get_pr_addr+0x1c>)
 8007a66:	2800      	cmp	r0, #0
 8007a68:	bf0c      	ite	eq
 8007a6a:	4618      	moveq	r0, r3
 8007a6c:	2000      	movne	r0, #0
 8007a6e:	4770      	bx	lr
 8007a70:	4802      	ldr	r0, [pc, #8]	; (8007a7c <__gnu_unwind_get_pr_addr+0x20>)
 8007a72:	4770      	bx	lr
 8007a74:	4802      	ldr	r0, [pc, #8]	; (8007a80 <__gnu_unwind_get_pr_addr+0x24>)
 8007a76:	4770      	bx	lr
 8007a78:	08008149 	.word	0x08008149
 8007a7c:	0800814d 	.word	0x0800814d
 8007a80:	08008151 	.word	0x08008151

08007a84 <get_eit_entry>:
 8007a84:	b530      	push	{r4, r5, lr}
 8007a86:	4b25      	ldr	r3, [pc, #148]	; (8007b1c <get_eit_entry+0x98>)
 8007a88:	b083      	sub	sp, #12
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	1e8d      	subs	r5, r1, #2
 8007a8e:	b34b      	cbz	r3, 8007ae4 <get_eit_entry+0x60>
 8007a90:	a901      	add	r1, sp, #4
 8007a92:	4628      	mov	r0, r5
 8007a94:	f3af 8000 	nop.w
 8007a98:	b1f0      	cbz	r0, 8007ad8 <get_eit_entry+0x54>
 8007a9a:	9901      	ldr	r1, [sp, #4]
 8007a9c:	462a      	mov	r2, r5
 8007a9e:	f7ff ffad 	bl	80079fc <search_EIT_table>
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	b1c0      	cbz	r0, 8007ad8 <get_eit_entry+0x54>
 8007aa6:	f7ff ff9f 	bl	80079e8 <selfrel_offset31>
 8007aaa:	684b      	ldr	r3, [r1, #4]
 8007aac:	64a0      	str	r0, [r4, #72]	; 0x48
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d02e      	beq.n	8007b10 <get_eit_entry+0x8c>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f101 0004 	add.w	r0, r1, #4
 8007ab8:	db26      	blt.n	8007b08 <get_eit_entry+0x84>
 8007aba:	f7ff ff95 	bl	80079e8 <selfrel_offset31>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007ac4:	6803      	ldr	r3, [r0, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	db12      	blt.n	8007af0 <get_eit_entry+0x6c>
 8007aca:	f7ff ff8d 	bl	80079e8 <selfrel_offset31>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	6120      	str	r0, [r4, #16]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	b003      	add	sp, #12
 8007ad6:	bd30      	pop	{r4, r5, pc}
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6123      	str	r3, [r4, #16]
 8007adc:	2309      	movs	r3, #9
 8007ade:	4618      	mov	r0, r3
 8007ae0:	b003      	add	sp, #12
 8007ae2:	bd30      	pop	{r4, r5, pc}
 8007ae4:	490e      	ldr	r1, [pc, #56]	; (8007b20 <get_eit_entry+0x9c>)
 8007ae6:	480f      	ldr	r0, [pc, #60]	; (8007b24 <get_eit_entry+0xa0>)
 8007ae8:	1a09      	subs	r1, r1, r0
 8007aea:	10c9      	asrs	r1, r1, #3
 8007aec:	9101      	str	r1, [sp, #4]
 8007aee:	e7d5      	b.n	8007a9c <get_eit_entry+0x18>
 8007af0:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007af4:	f7ff ffb2 	bl	8007a5c <__gnu_unwind_get_pr_addr>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	bf14      	ite	ne
 8007afc:	2300      	movne	r3, #0
 8007afe:	2309      	moveq	r3, #9
 8007b00:	6120      	str	r0, [r4, #16]
 8007b02:	4618      	mov	r0, r3
 8007b04:	b003      	add	sp, #12
 8007b06:	bd30      	pop	{r4, r5, pc}
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007b0e:	e7d9      	b.n	8007ac4 <get_eit_entry+0x40>
 8007b10:	2300      	movs	r3, #0
 8007b12:	6123      	str	r3, [r4, #16]
 8007b14:	2305      	movs	r3, #5
 8007b16:	4618      	mov	r0, r3
 8007b18:	b003      	add	sp, #12
 8007b1a:	bd30      	pop	{r4, r5, pc}
 8007b1c:	00000000 	.word	0x00000000
 8007b20:	0801dc9c 	.word	0x0801dc9c
 8007b24:	0801d6cc 	.word	0x0801d6cc

08007b28 <restore_non_core_regs>:
 8007b28:	6803      	ldr	r3, [r0, #0]
 8007b2a:	07da      	lsls	r2, r3, #31
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	4604      	mov	r4, r0
 8007b30:	d406      	bmi.n	8007b40 <restore_non_core_regs+0x18>
 8007b32:	079b      	lsls	r3, r3, #30
 8007b34:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007b38:	d509      	bpl.n	8007b4e <restore_non_core_regs+0x26>
 8007b3a:	f000 fc5f 	bl	80083fc <__gnu_Unwind_Restore_VFP_D>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	0759      	lsls	r1, r3, #29
 8007b42:	d509      	bpl.n	8007b58 <restore_non_core_regs+0x30>
 8007b44:	071a      	lsls	r2, r3, #28
 8007b46:	d50e      	bpl.n	8007b66 <restore_non_core_regs+0x3e>
 8007b48:	06db      	lsls	r3, r3, #27
 8007b4a:	d513      	bpl.n	8007b74 <restore_non_core_regs+0x4c>
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	f000 fc4d 	bl	80083ec <__gnu_Unwind_Restore_VFP>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	0759      	lsls	r1, r3, #29
 8007b56:	d4f5      	bmi.n	8007b44 <restore_non_core_regs+0x1c>
 8007b58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b5c:	f000 fc56 	bl	800840c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	071a      	lsls	r2, r3, #28
 8007b64:	d4f0      	bmi.n	8007b48 <restore_non_core_regs+0x20>
 8007b66:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007b6a:	f000 fc57 	bl	800841c <__gnu_Unwind_Restore_WMMXD>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	06db      	lsls	r3, r3, #27
 8007b72:	d4eb      	bmi.n	8007b4c <restore_non_core_regs+0x24>
 8007b74:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b7c:	f000 bc92 	b.w	80084a4 <__gnu_Unwind_Restore_WMMXC>

08007b80 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007b80:	6803      	ldr	r3, [r0, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8007b84:	4403      	add	r3, r0
 8007b86:	4618      	mov	r0, r3
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop

08007b8c <__gnu_unwind_24bit.isra.1>:
 8007b8c:	2009      	movs	r0, #9
 8007b8e:	4770      	bx	lr

08007b90 <_Unwind_DebugHook>:
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop

08007b94 <unwind_phase2>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	4604      	mov	r4, r0
 8007b98:	460d      	mov	r5, r1
 8007b9a:	e008      	b.n	8007bae <unwind_phase2+0x1a>
 8007b9c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007b9e:	6163      	str	r3, [r4, #20]
 8007ba0:	462a      	mov	r2, r5
 8007ba2:	6923      	ldr	r3, [r4, #16]
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	4798      	blx	r3
 8007baa:	2808      	cmp	r0, #8
 8007bac:	d108      	bne.n	8007bc0 <unwind_phase2+0x2c>
 8007bae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f7ff ff67 	bl	8007a84 <get_eit_entry>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d0ef      	beq.n	8007b9c <unwind_phase2+0x8>
 8007bbc:	f00a fdd1 	bl	8012762 <abort>
 8007bc0:	2807      	cmp	r0, #7
 8007bc2:	d1fb      	bne.n	8007bbc <unwind_phase2+0x28>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007bc8:	f7ff ffe2 	bl	8007b90 <_Unwind_DebugHook>
 8007bcc:	1d28      	adds	r0, r5, #4
 8007bce:	f000 fc01 	bl	80083d4 <__restore_core_regs>
 8007bd2:	bf00      	nop

08007bd4 <unwind_phase2_forced>:
 8007bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd8:	1d0c      	adds	r4, r1, #4
 8007bda:	4605      	mov	r5, r0
 8007bdc:	4617      	mov	r7, r2
 8007bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007be0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007be4:	ae03      	add	r6, sp, #12
 8007be6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007bf0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007bf4:	ac02      	add	r4, sp, #8
 8007bf6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007bfa:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007bfe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007c02:	2300      	movs	r3, #0
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	e021      	b.n	8007c4c <unwind_phase2_forced+0x78>
 8007c08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c0a:	616b      	str	r3, [r5, #20]
 8007c0c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c10:	4621      	mov	r1, r4
 8007c12:	a87a      	add	r0, sp, #488	; 0x1e8
 8007c14:	f00b fa99 	bl	801314a <memcpy>
 8007c18:	692b      	ldr	r3, [r5, #16]
 8007c1a:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	4630      	mov	r0, r6
 8007c20:	4798      	blx	r3
 8007c22:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8007c24:	e9cd 4900 	strd	r4, r9, [sp]
 8007c28:	4682      	mov	sl, r0
 8007c2a:	6463      	str	r3, [r4, #68]	; 0x44
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	462b      	mov	r3, r5
 8007c30:	462a      	mov	r2, r5
 8007c32:	2001      	movs	r0, #1
 8007c34:	47c0      	blx	r8
 8007c36:	4607      	mov	r7, r0
 8007c38:	b9f8      	cbnz	r0, 8007c7a <unwind_phase2_forced+0xa6>
 8007c3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c3e:	a97a      	add	r1, sp, #488	; 0x1e8
 8007c40:	4620      	mov	r0, r4
 8007c42:	f00b fa82 	bl	801314a <memcpy>
 8007c46:	f1ba 0f08 	cmp.w	sl, #8
 8007c4a:	d11c      	bne.n	8007c86 <unwind_phase2_forced+0xb2>
 8007c4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f7ff ff18 	bl	8007a84 <get_eit_entry>
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	bf08      	it	eq
 8007c58:	2609      	moveq	r6, #9
 8007c5a:	4607      	mov	r7, r0
 8007c5c:	bf18      	it	ne
 8007c5e:	260a      	movne	r6, #10
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d0d1      	beq.n	8007c08 <unwind_phase2_forced+0x34>
 8007c64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c66:	f046 0110 	orr.w	r1, r6, #16
 8007c6a:	e9cd 4900 	strd	r4, r9, [sp]
 8007c6e:	462a      	mov	r2, r5
 8007c70:	6463      	str	r3, [r4, #68]	; 0x44
 8007c72:	2001      	movs	r0, #1
 8007c74:	462b      	mov	r3, r5
 8007c76:	47c0      	blx	r8
 8007c78:	b100      	cbz	r0, 8007c7c <unwind_phase2_forced+0xa8>
 8007c7a:	2709      	movs	r7, #9
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c86:	f1ba 0f07 	cmp.w	sl, #7
 8007c8a:	d1f6      	bne.n	8007c7a <unwind_phase2_forced+0xa6>
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c90:	f7ff ff7e 	bl	8007b90 <_Unwind_DebugHook>
 8007c94:	a803      	add	r0, sp, #12
 8007c96:	f000 fb9d 	bl	80083d4 <__restore_core_regs>
 8007c9a:	bf00      	nop

08007c9c <_Unwind_GetCFA>:
 8007c9c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007c9e:	4770      	bx	lr

08007ca0 <__gnu_Unwind_RaiseException>:
 8007ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007ca4:	640b      	str	r3, [r1, #64]	; 0x40
 8007ca6:	1d0d      	adds	r5, r1, #4
 8007ca8:	460f      	mov	r7, r1
 8007caa:	4606      	mov	r6, r0
 8007cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cae:	b0f9      	sub	sp, #484	; 0x1e4
 8007cb0:	ac01      	add	r4, sp, #4
 8007cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8007cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007cc8:	9500      	str	r5, [sp, #0]
 8007cca:	e006      	b.n	8007cda <__gnu_Unwind_RaiseException+0x3a>
 8007ccc:	6933      	ldr	r3, [r6, #16]
 8007cce:	466a      	mov	r2, sp
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	4798      	blx	r3
 8007cd4:	2808      	cmp	r0, #8
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	d108      	bne.n	8007cec <__gnu_Unwind_RaiseException+0x4c>
 8007cda:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff fed1 	bl	8007a84 <get_eit_entry>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d0f2      	beq.n	8007ccc <__gnu_Unwind_RaiseException+0x2c>
 8007ce6:	2009      	movs	r0, #9
 8007ce8:	b079      	add	sp, #484	; 0x1e4
 8007cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cec:	4668      	mov	r0, sp
 8007cee:	f7ff ff1b 	bl	8007b28 <restore_non_core_regs>
 8007cf2:	2c06      	cmp	r4, #6
 8007cf4:	d1f7      	bne.n	8007ce6 <__gnu_Unwind_RaiseException+0x46>
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	f7ff ff4b 	bl	8007b94 <unwind_phase2>
 8007cfe:	bf00      	nop

08007d00 <__gnu_Unwind_ForcedUnwind>:
 8007d00:	b430      	push	{r4, r5}
 8007d02:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007d04:	60c1      	str	r1, [r0, #12]
 8007d06:	6182      	str	r2, [r0, #24]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	641d      	str	r5, [r3, #64]	; 0x40
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	bc30      	pop	{r4, r5}
 8007d10:	e760      	b.n	8007bd4 <unwind_phase2_forced>
 8007d12:	bf00      	nop

08007d14 <__gnu_Unwind_Resume>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	68c6      	ldr	r6, [r0, #12]
 8007d18:	6943      	ldr	r3, [r0, #20]
 8007d1a:	640b      	str	r3, [r1, #64]	; 0x40
 8007d1c:	b9be      	cbnz	r6, 8007d4e <__gnu_Unwind_Resume+0x3a>
 8007d1e:	6903      	ldr	r3, [r0, #16]
 8007d20:	460a      	mov	r2, r1
 8007d22:	4604      	mov	r4, r0
 8007d24:	460d      	mov	r5, r1
 8007d26:	4601      	mov	r1, r0
 8007d28:	2002      	movs	r0, #2
 8007d2a:	4798      	blx	r3
 8007d2c:	2807      	cmp	r0, #7
 8007d2e:	d007      	beq.n	8007d40 <__gnu_Unwind_Resume+0x2c>
 8007d30:	2808      	cmp	r0, #8
 8007d32:	d103      	bne.n	8007d3c <__gnu_Unwind_Resume+0x28>
 8007d34:	4629      	mov	r1, r5
 8007d36:	4620      	mov	r0, r4
 8007d38:	f7ff ff2c 	bl	8007b94 <unwind_phase2>
 8007d3c:	f00a fd11 	bl	8012762 <abort>
 8007d40:	4630      	mov	r0, r6
 8007d42:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007d44:	f7ff ff24 	bl	8007b90 <_Unwind_DebugHook>
 8007d48:	1d28      	adds	r0, r5, #4
 8007d4a:	f000 fb43 	bl	80083d4 <__restore_core_regs>
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f7ff ff40 	bl	8007bd4 <unwind_phase2_forced>
 8007d54:	f00a fd05 	bl	8012762 <abort>

08007d58 <__gnu_Unwind_Resume_or_Rethrow>:
 8007d58:	68c2      	ldr	r2, [r0, #12]
 8007d5a:	b11a      	cbz	r2, 8007d64 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007d5c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007d5e:	640a      	str	r2, [r1, #64]	; 0x40
 8007d60:	2200      	movs	r2, #0
 8007d62:	e737      	b.n	8007bd4 <unwind_phase2_forced>
 8007d64:	e79c      	b.n	8007ca0 <__gnu_Unwind_RaiseException>
 8007d66:	bf00      	nop

08007d68 <_Unwind_Complete>:
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop

08007d6c <_Unwind_DeleteException>:
 8007d6c:	6883      	ldr	r3, [r0, #8]
 8007d6e:	b113      	cbz	r3, 8007d76 <_Unwind_DeleteException+0xa>
 8007d70:	4601      	mov	r1, r0
 8007d72:	2001      	movs	r0, #1
 8007d74:	4718      	bx	r3
 8007d76:	4770      	bx	lr

08007d78 <_Unwind_VRS_Get>:
 8007d78:	2904      	cmp	r1, #4
 8007d7a:	d807      	bhi.n	8007d8c <_Unwind_VRS_Get+0x14>
 8007d7c:	e8df f001 	tbb	[pc, r1]
 8007d80:	08060803 	.word	0x08060803
 8007d84:	08          	.byte	0x08
 8007d85:	00          	.byte	0x00
 8007d86:	b90b      	cbnz	r3, 8007d8c <_Unwind_VRS_Get+0x14>
 8007d88:	2a0f      	cmp	r2, #15
 8007d8a:	d903      	bls.n	8007d94 <_Unwind_VRS_Get+0x1c>
 8007d8c:	2002      	movs	r0, #2
 8007d8e:	4770      	bx	lr
 8007d90:	2001      	movs	r0, #1
 8007d92:	4770      	bx	lr
 8007d94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	6853      	ldr	r3, [r2, #4]
 8007d9c:	9a00      	ldr	r2, [sp, #0]
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop

08007da4 <_Unwind_GetGR>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	2300      	movs	r3, #0
 8007daa:	ac03      	add	r4, sp, #12
 8007dac:	460a      	mov	r2, r1
 8007dae:	9400      	str	r4, [sp, #0]
 8007db0:	4619      	mov	r1, r3
 8007db2:	f7ff ffe1 	bl	8007d78 <_Unwind_VRS_Get>
 8007db6:	9803      	ldr	r0, [sp, #12]
 8007db8:	b004      	add	sp, #16
 8007dba:	bd10      	pop	{r4, pc}

08007dbc <_Unwind_VRS_Set>:
 8007dbc:	2904      	cmp	r1, #4
 8007dbe:	d807      	bhi.n	8007dd0 <_Unwind_VRS_Set+0x14>
 8007dc0:	e8df f001 	tbb	[pc, r1]
 8007dc4:	08060803 	.word	0x08060803
 8007dc8:	08          	.byte	0x08
 8007dc9:	00          	.byte	0x00
 8007dca:	b90b      	cbnz	r3, 8007dd0 <_Unwind_VRS_Set+0x14>
 8007dcc:	2a0f      	cmp	r2, #15
 8007dce:	d903      	bls.n	8007dd8 <_Unwind_VRS_Set+0x1c>
 8007dd0:	2002      	movs	r0, #2
 8007dd2:	4770      	bx	lr
 8007dd4:	2001      	movs	r0, #1
 8007dd6:	4770      	bx	lr
 8007dd8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007ddc:	9a00      	ldr	r2, [sp, #0]
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	6042      	str	r2, [r0, #4]
 8007de2:	4618      	mov	r0, r3
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop

08007de8 <_Unwind_SetGR>:
 8007de8:	b510      	push	{r4, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	ac04      	add	r4, sp, #16
 8007dee:	2300      	movs	r3, #0
 8007df0:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007df4:	460a      	mov	r2, r1
 8007df6:	9400      	str	r4, [sp, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7ff ffdf 	bl	8007dbc <_Unwind_VRS_Set>
 8007dfe:	b004      	add	sp, #16
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	bf00      	nop

08007e04 <__gnu_Unwind_Backtrace>:
 8007e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e06:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007e08:	6413      	str	r3, [r2, #64]	; 0x40
 8007e0a:	1d15      	adds	r5, r2, #4
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	460e      	mov	r6, r1
 8007e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e12:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007e16:	ac17      	add	r4, sp, #92	; 0x5c
 8007e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e26:	f04f 35ff 	mov.w	r5, #4294967295
 8007e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e2e:	9516      	str	r5, [sp, #88]	; 0x58
 8007e30:	e010      	b.n	8007e54 <__gnu_Unwind_Backtrace+0x50>
 8007e32:	a816      	add	r0, sp, #88	; 0x58
 8007e34:	f7ff ffd8 	bl	8007de8 <_Unwind_SetGR>
 8007e38:	4631      	mov	r1, r6
 8007e3a:	a816      	add	r0, sp, #88	; 0x58
 8007e3c:	47b8      	blx	r7
 8007e3e:	aa16      	add	r2, sp, #88	; 0x58
 8007e40:	4669      	mov	r1, sp
 8007e42:	b978      	cbnz	r0, 8007e64 <__gnu_Unwind_Backtrace+0x60>
 8007e44:	9b04      	ldr	r3, [sp, #16]
 8007e46:	2008      	movs	r0, #8
 8007e48:	4798      	blx	r3
 8007e4a:	2805      	cmp	r0, #5
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	d00a      	beq.n	8007e66 <__gnu_Unwind_Backtrace+0x62>
 8007e50:	2809      	cmp	r0, #9
 8007e52:	d007      	beq.n	8007e64 <__gnu_Unwind_Backtrace+0x60>
 8007e54:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007e56:	4668      	mov	r0, sp
 8007e58:	f7ff fe14 	bl	8007a84 <get_eit_entry>
 8007e5c:	466a      	mov	r2, sp
 8007e5e:	210c      	movs	r1, #12
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d0e6      	beq.n	8007e32 <__gnu_Unwind_Backtrace+0x2e>
 8007e64:	2409      	movs	r4, #9
 8007e66:	a816      	add	r0, sp, #88	; 0x58
 8007e68:	f7ff fe5e 	bl	8007b28 <restore_non_core_regs>
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e74 <__gnu_unwind_pr_common>:
 8007e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e78:	460d      	mov	r5, r1
 8007e7a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007e7c:	b089      	sub	sp, #36	; 0x24
 8007e7e:	1d0c      	adds	r4, r1, #4
 8007e80:	4616      	mov	r6, r2
 8007e82:	f000 0b03 	and.w	fp, r0, #3
 8007e86:	680a      	ldr	r2, [r1, #0]
 8007e88:	9406      	str	r4, [sp, #24]
 8007e8a:	461f      	mov	r7, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d068      	beq.n	8007f62 <__gnu_unwind_pr_common+0xee>
 8007e90:	0c13      	lsrs	r3, r2, #16
 8007e92:	b2d9      	uxtb	r1, r3
 8007e94:	0412      	lsls	r2, r2, #16
 8007e96:	f88d 301d 	strb.w	r3, [sp, #29]
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007ea0:	9205      	str	r2, [sp, #20]
 8007ea2:	f88d 301c 	strb.w	r3, [sp, #28]
 8007ea6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007ea8:	f1bb 0f02 	cmp.w	fp, #2
 8007eac:	bf08      	it	eq
 8007eae:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007eb0:	f013 0301 	ands.w	r3, r3, #1
 8007eb4:	d146      	bne.n	8007f44 <__gnu_unwind_pr_common+0xd0>
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	f000 0308 	and.w	r3, r0, #8
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	f8d4 9000 	ldr.w	r9, [r4]
 8007ec2:	f1b9 0f00 	cmp.w	r9, #0
 8007ec6:	f000 80f3 	beq.w	80080b0 <__gnu_unwind_pr_common+0x23c>
 8007eca:	2f02      	cmp	r7, #2
 8007ecc:	d045      	beq.n	8007f5a <__gnu_unwind_pr_common+0xe6>
 8007ece:	f8b4 9000 	ldrh.w	r9, [r4]
 8007ed2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8007ed6:	3404      	adds	r4, #4
 8007ed8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007eda:	f028 0a01 	bic.w	sl, r8, #1
 8007ede:	210f      	movs	r1, #15
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	449a      	add	sl, r3
 8007ee4:	f7ff ff5e 	bl	8007da4 <_Unwind_GetGR>
 8007ee8:	4582      	cmp	sl, r0
 8007eea:	d834      	bhi.n	8007f56 <__gnu_unwind_pr_common+0xe2>
 8007eec:	f029 0301 	bic.w	r3, r9, #1
 8007ef0:	4453      	add	r3, sl
 8007ef2:	4283      	cmp	r3, r0
 8007ef4:	bf94      	ite	ls
 8007ef6:	2000      	movls	r0, #0
 8007ef8:	2001      	movhi	r0, #1
 8007efa:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007efe:	f008 0802 	and.w	r8, r8, #2
 8007f02:	f009 0901 	and.w	r9, r9, #1
 8007f06:	ea48 0809 	orr.w	r8, r8, r9
 8007f0a:	f1b8 0f01 	cmp.w	r8, #1
 8007f0e:	d03a      	beq.n	8007f86 <__gnu_unwind_pr_common+0x112>
 8007f10:	d331      	bcc.n	8007f76 <__gnu_unwind_pr_common+0x102>
 8007f12:	f1b8 0f02 	cmp.w	r8, #2
 8007f16:	d11a      	bne.n	8007f4e <__gnu_unwind_pr_common+0xda>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8007f1e:	f1bb 0f00 	cmp.w	fp, #0
 8007f22:	d166      	bne.n	8007ff2 <__gnu_unwind_pr_common+0x17e>
 8007f24:	b130      	cbz	r0, 8007f34 <__gnu_unwind_pr_common+0xc0>
 8007f26:	9a00      	ldr	r2, [sp, #0]
 8007f28:	2a00      	cmp	r2, #0
 8007f2a:	d06c      	beq.n	8008006 <__gnu_unwind_pr_common+0x192>
 8007f2c:	f1ba 0f00 	cmp.w	sl, #0
 8007f30:	f000 8090 	beq.w	8008054 <__gnu_unwind_pr_common+0x1e0>
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	da00      	bge.n	8007f3a <__gnu_unwind_pr_common+0xc6>
 8007f38:	3404      	adds	r4, #4
 8007f3a:	f10a 0301 	add.w	r3, sl, #1
 8007f3e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007f42:	e7bc      	b.n	8007ebe <__gnu_unwind_pr_common+0x4a>
 8007f44:	4630      	mov	r0, r6
 8007f46:	a905      	add	r1, sp, #20
 8007f48:	f000 fb46 	bl	80085d8 <__gnu_unwind_execute>
 8007f4c:	b178      	cbz	r0, 8007f6e <__gnu_unwind_pr_common+0xfa>
 8007f4e:	2009      	movs	r0, #9
 8007f50:	b009      	add	sp, #36	; 0x24
 8007f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f56:	2000      	movs	r0, #0
 8007f58:	e7cf      	b.n	8007efa <__gnu_unwind_pr_common+0x86>
 8007f5a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007f5e:	3408      	adds	r4, #8
 8007f60:	e7ba      	b.n	8007ed8 <__gnu_unwind_pr_common+0x64>
 8007f62:	0212      	lsls	r2, r2, #8
 8007f64:	2303      	movs	r3, #3
 8007f66:	9205      	str	r2, [sp, #20]
 8007f68:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007f6c:	e79b      	b.n	8007ea6 <__gnu_unwind_pr_common+0x32>
 8007f6e:	2008      	movs	r0, #8
 8007f70:	b009      	add	sp, #36	; 0x24
 8007f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f76:	f1bb 0f00 	cmp.w	fp, #0
 8007f7a:	d002      	beq.n	8007f82 <__gnu_unwind_pr_common+0x10e>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	f040 80b4 	bne.w	80080ea <__gnu_unwind_pr_common+0x276>
 8007f82:	3404      	adds	r4, #4
 8007f84:	e79b      	b.n	8007ebe <__gnu_unwind_pr_common+0x4a>
 8007f86:	f1bb 0f00 	cmp.w	fp, #0
 8007f8a:	d118      	bne.n	8007fbe <__gnu_unwind_pr_common+0x14a>
 8007f8c:	b1a8      	cbz	r0, 8007fba <__gnu_unwind_pr_common+0x146>
 8007f8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f92:	1c99      	adds	r1, r3, #2
 8007f94:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007f98:	d0d9      	beq.n	8007f4e <__gnu_unwind_pr_common+0xda>
 8007f9a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	9104      	str	r1, [sp, #16]
 8007fa2:	f000 80b5 	beq.w	8008110 <__gnu_unwind_pr_common+0x29c>
 8007fa6:	1d20      	adds	r0, r4, #4
 8007fa8:	f7ff fdea 	bl	8007b80 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007fac:	ab04      	add	r3, sp, #16
 8007fae:	4601      	mov	r1, r0
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f007 fd5d 	bl	800fa70 <__cxa_type_match>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d167      	bne.n	800808a <__gnu_unwind_pr_common+0x216>
 8007fba:	3408      	adds	r4, #8
 8007fbc:	e77f      	b.n	8007ebe <__gnu_unwind_pr_common+0x4a>
 8007fbe:	210d      	movs	r1, #13
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007fc6:	f7ff feed 	bl	8007da4 <_Unwind_GetGR>
 8007fca:	4580      	cmp	r8, r0
 8007fcc:	d1f5      	bne.n	8007fba <__gnu_unwind_pr_common+0x146>
 8007fce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007fd0:	429c      	cmp	r4, r3
 8007fd2:	d1f2      	bne.n	8007fba <__gnu_unwind_pr_common+0x146>
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7ff fd07 	bl	80079e8 <selfrel_offset31>
 8007fda:	210f      	movs	r1, #15
 8007fdc:	4602      	mov	r2, r0
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7ff ff02 	bl	8007de8 <_Unwind_SetGR>
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	462a      	mov	r2, r5
 8007fe8:	2100      	movs	r1, #0
 8007fea:	f7ff fefd 	bl	8007de8 <_Unwind_SetGR>
 8007fee:	2007      	movs	r0, #7
 8007ff0:	e7ae      	b.n	8007f50 <__gnu_unwind_pr_common+0xdc>
 8007ff2:	210d      	movs	r1, #13
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007ffa:	f7ff fed3 	bl	8007da4 <_Unwind_GetGR>
 8007ffe:	4580      	cmp	r8, r0
 8008000:	d032      	beq.n	8008068 <__gnu_unwind_pr_common+0x1f4>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	e796      	b.n	8007f34 <__gnu_unwind_pr_common+0xc0>
 8008006:	f1ba 0f00 	cmp.w	sl, #0
 800800a:	d023      	beq.n	8008054 <__gnu_unwind_pr_common+0x1e0>
 800800c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8008010:	f104 0804 	add.w	r8, r4, #4
 8008014:	f8cd b008 	str.w	fp, [sp, #8]
 8008018:	f8dd 9000 	ldr.w	r9, [sp]
 800801c:	9703      	str	r7, [sp, #12]
 800801e:	46a3      	mov	fp, r4
 8008020:	461c      	mov	r4, r3
 8008022:	e002      	b.n	800802a <__gnu_unwind_pr_common+0x1b6>
 8008024:	4557      	cmp	r7, sl
 8008026:	46b9      	mov	r9, r7
 8008028:	d040      	beq.n	80080ac <__gnu_unwind_pr_common+0x238>
 800802a:	4640      	mov	r0, r8
 800802c:	9404      	str	r4, [sp, #16]
 800802e:	f7ff fda7 	bl	8007b80 <_Unwind_decode_typeinfo_ptr.isra.0>
 8008032:	ab04      	add	r3, sp, #16
 8008034:	4601      	mov	r1, r0
 8008036:	2200      	movs	r2, #0
 8008038:	4628      	mov	r0, r5
 800803a:	f007 fd19 	bl	800fa70 <__cxa_type_match>
 800803e:	f109 0701 	add.w	r7, r9, #1
 8008042:	f108 0804 	add.w	r8, r8, #4
 8008046:	2800      	cmp	r0, #0
 8008048:	d0ec      	beq.n	8008024 <__gnu_unwind_pr_common+0x1b0>
 800804a:	45d1      	cmp	r9, sl
 800804c:	465c      	mov	r4, fp
 800804e:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8008052:	d1d6      	bne.n	8008002 <__gnu_unwind_pr_common+0x18e>
 8008054:	4630      	mov	r0, r6
 8008056:	210d      	movs	r1, #13
 8008058:	f7ff fea4 	bl	8007da4 <_Unwind_GetGR>
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	6228      	str	r0, [r5, #32]
 8008060:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8008064:	2006      	movs	r0, #6
 8008066:	e773      	b.n	8007f50 <__gnu_unwind_pr_common+0xdc>
 8008068:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800806a:	429c      	cmp	r4, r3
 800806c:	d1c9      	bne.n	8008002 <__gnu_unwind_pr_common+0x18e>
 800806e:	2204      	movs	r2, #4
 8008070:	f04f 0800 	mov.w	r8, #0
 8008074:	18a3      	adds	r3, r4, r2
 8008076:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 800807a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	4543      	cmp	r3, r8
 8008082:	db4d      	blt.n	8008120 <__gnu_unwind_pr_common+0x2ac>
 8008084:	2301      	movs	r3, #1
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	e757      	b.n	8007f3a <__gnu_unwind_pr_common+0xc6>
 800808a:	4680      	mov	r8, r0
 800808c:	210d      	movs	r1, #13
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff fe88 	bl	8007da4 <_Unwind_GetGR>
 8008094:	f1b8 0f02 	cmp.w	r8, #2
 8008098:	6228      	str	r0, [r5, #32]
 800809a:	d13e      	bne.n	800811a <__gnu_unwind_pr_common+0x2a6>
 800809c:	462b      	mov	r3, r5
 800809e:	9a04      	ldr	r2, [sp, #16]
 80080a0:	f843 2f2c 	str.w	r2, [r3, #44]!
 80080a4:	626b      	str	r3, [r5, #36]	; 0x24
 80080a6:	62ac      	str	r4, [r5, #40]	; 0x28
 80080a8:	2006      	movs	r0, #6
 80080aa:	e751      	b.n	8007f50 <__gnu_unwind_pr_common+0xdc>
 80080ac:	465c      	mov	r4, fp
 80080ae:	e7d1      	b.n	8008054 <__gnu_unwind_pr_common+0x1e0>
 80080b0:	a905      	add	r1, sp, #20
 80080b2:	4630      	mov	r0, r6
 80080b4:	f000 fa90 	bl	80085d8 <__gnu_unwind_execute>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f47f af48 	bne.w	8007f4e <__gnu_unwind_pr_common+0xda>
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f43f af54 	beq.w	8007f6e <__gnu_unwind_pr_common+0xfa>
 80080c6:	210f      	movs	r1, #15
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff fe6b 	bl	8007da4 <_Unwind_GetGR>
 80080ce:	210e      	movs	r1, #14
 80080d0:	4602      	mov	r2, r0
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7ff fe88 	bl	8007de8 <_Unwind_SetGR>
 80080d8:	4630      	mov	r0, r6
 80080da:	4a1a      	ldr	r2, [pc, #104]	; (8008144 <__gnu_unwind_pr_common+0x2d0>)
 80080dc:	210f      	movs	r1, #15
 80080de:	f7ff fe83 	bl	8007de8 <_Unwind_SetGR>
 80080e2:	2007      	movs	r0, #7
 80080e4:	b009      	add	sp, #36	; 0x24
 80080e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7ff fc7c 	bl	80079e8 <selfrel_offset31>
 80080f0:	3404      	adds	r4, #4
 80080f2:	4607      	mov	r7, r0
 80080f4:	63ac      	str	r4, [r5, #56]	; 0x38
 80080f6:	4628      	mov	r0, r5
 80080f8:	f007 fd12 	bl	800fb20 <__cxa_begin_cleanup>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	f43f af26 	beq.w	8007f4e <__gnu_unwind_pr_common+0xda>
 8008102:	4630      	mov	r0, r6
 8008104:	463a      	mov	r2, r7
 8008106:	210f      	movs	r1, #15
 8008108:	f7ff fe6e 	bl	8007de8 <_Unwind_SetGR>
 800810c:	2007      	movs	r0, #7
 800810e:	e71f      	b.n	8007f50 <__gnu_unwind_pr_common+0xdc>
 8008110:	4630      	mov	r0, r6
 8008112:	210d      	movs	r1, #13
 8008114:	f7ff fe46 	bl	8007da4 <_Unwind_GetGR>
 8008118:	6228      	str	r0, [r5, #32]
 800811a:	9b04      	ldr	r3, [sp, #16]
 800811c:	626b      	str	r3, [r5, #36]	; 0x24
 800811e:	e7c2      	b.n	80080a6 <__gnu_unwind_pr_common+0x232>
 8008120:	f10a 0001 	add.w	r0, sl, #1
 8008124:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8008128:	f7ff fc5e 	bl	80079e8 <selfrel_offset31>
 800812c:	210f      	movs	r1, #15
 800812e:	4602      	mov	r2, r0
 8008130:	4630      	mov	r0, r6
 8008132:	f7ff fe59 	bl	8007de8 <_Unwind_SetGR>
 8008136:	4630      	mov	r0, r6
 8008138:	462a      	mov	r2, r5
 800813a:	4641      	mov	r1, r8
 800813c:	f7ff fe54 	bl	8007de8 <_Unwind_SetGR>
 8008140:	2007      	movs	r0, #7
 8008142:	e705      	b.n	8007f50 <__gnu_unwind_pr_common+0xdc>
 8008144:	080113c5 	.word	0x080113c5

08008148 <__aeabi_unwind_cpp_pr0>:
 8008148:	2300      	movs	r3, #0
 800814a:	e693      	b.n	8007e74 <__gnu_unwind_pr_common>

0800814c <__aeabi_unwind_cpp_pr1>:
 800814c:	2301      	movs	r3, #1
 800814e:	e691      	b.n	8007e74 <__gnu_unwind_pr_common>

08008150 <__aeabi_unwind_cpp_pr2>:
 8008150:	2302      	movs	r3, #2
 8008152:	e68f      	b.n	8007e74 <__gnu_unwind_pr_common>

08008154 <_Unwind_VRS_Pop>:
 8008154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008158:	4605      	mov	r5, r0
 800815a:	b0c4      	sub	sp, #272	; 0x110
 800815c:	2904      	cmp	r1, #4
 800815e:	d806      	bhi.n	800816e <_Unwind_VRS_Pop+0x1a>
 8008160:	e8df f001 	tbb	[pc, r1]
 8008164:	03052b4d 	.word	0x03052b4d
 8008168:	09          	.byte	0x09
 8008169:	00          	.byte	0x00
 800816a:	2b03      	cmp	r3, #3
 800816c:	d05f      	beq.n	800822e <_Unwind_VRS_Pop+0xda>
 800816e:	2002      	movs	r0, #2
 8008170:	b044      	add	sp, #272	; 0x110
 8008172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1f9      	bne.n	800816e <_Unwind_VRS_Pop+0x1a>
 800817a:	2a10      	cmp	r2, #16
 800817c:	d8f7      	bhi.n	800816e <_Unwind_VRS_Pop+0x1a>
 800817e:	682b      	ldr	r3, [r5, #0]
 8008180:	06dc      	lsls	r4, r3, #27
 8008182:	f100 80f4 	bmi.w	800836e <_Unwind_VRS_Pop+0x21a>
 8008186:	ac22      	add	r4, sp, #136	; 0x88
 8008188:	4620      	mov	r0, r4
 800818a:	9201      	str	r2, [sp, #4]
 800818c:	f000 f994 	bl	80084b8 <__gnu_Unwind_Save_WMMXC>
 8008190:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008192:	9a01      	ldr	r2, [sp, #4]
 8008194:	2300      	movs	r3, #0
 8008196:	2601      	movs	r6, #1
 8008198:	fa06 f103 	lsl.w	r1, r6, r3
 800819c:	4211      	tst	r1, r2
 800819e:	d003      	beq.n	80081a8 <_Unwind_VRS_Pop+0x54>
 80081a0:	6801      	ldr	r1, [r0, #0]
 80081a2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80081a6:	3004      	adds	r0, #4
 80081a8:	3301      	adds	r3, #1
 80081aa:	2b04      	cmp	r3, #4
 80081ac:	d1f4      	bne.n	8008198 <_Unwind_VRS_Pop+0x44>
 80081ae:	63a8      	str	r0, [r5, #56]	; 0x38
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 f977 	bl	80084a4 <__gnu_Unwind_Restore_WMMXC>
 80081b6:	2000      	movs	r0, #0
 80081b8:	e7da      	b.n	8008170 <_Unwind_VRS_Pop+0x1c>
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80081c0:	b297      	uxth	r7, r2
 80081c2:	d052      	beq.n	800826a <_Unwind_VRS_Pop+0x116>
 80081c4:	2b05      	cmp	r3, #5
 80081c6:	d1d2      	bne.n	800816e <_Unwind_VRS_Pop+0x1a>
 80081c8:	eb06 0807 	add.w	r8, r6, r7
 80081cc:	f1b8 0f20 	cmp.w	r8, #32
 80081d0:	d8cd      	bhi.n	800816e <_Unwind_VRS_Pop+0x1a>
 80081d2:	2e0f      	cmp	r6, #15
 80081d4:	f240 8099 	bls.w	800830a <_Unwind_VRS_Pop+0x1b6>
 80081d8:	46b8      	mov	r8, r7
 80081da:	2f00      	cmp	r7, #0
 80081dc:	f040 80db 	bne.w	8008396 <_Unwind_VRS_Pop+0x242>
 80081e0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80081e2:	63aa      	str	r2, [r5, #56]	; 0x38
 80081e4:	2e0f      	cmp	r6, #15
 80081e6:	f240 80be 	bls.w	8008366 <_Unwind_VRS_Pop+0x212>
 80081ea:	f1b8 0f00 	cmp.w	r8, #0
 80081ee:	d002      	beq.n	80081f6 <_Unwind_VRS_Pop+0xa2>
 80081f0:	a802      	add	r0, sp, #8
 80081f2:	f000 f90b 	bl	800840c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80081f6:	2000      	movs	r0, #0
 80081f8:	b044      	add	sp, #272	; 0x110
 80081fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1b5      	bne.n	800816e <_Unwind_VRS_Pop+0x1a>
 8008202:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8008204:	b297      	uxth	r7, r2
 8008206:	1d28      	adds	r0, r5, #4
 8008208:	2601      	movs	r6, #1
 800820a:	fa06 f103 	lsl.w	r1, r6, r3
 800820e:	4239      	tst	r1, r7
 8008210:	f103 0301 	add.w	r3, r3, #1
 8008214:	d002      	beq.n	800821c <_Unwind_VRS_Pop+0xc8>
 8008216:	6821      	ldr	r1, [r4, #0]
 8008218:	6001      	str	r1, [r0, #0]
 800821a:	3404      	adds	r4, #4
 800821c:	2b10      	cmp	r3, #16
 800821e:	f100 0004 	add.w	r0, r0, #4
 8008222:	d1f2      	bne.n	800820a <_Unwind_VRS_Pop+0xb6>
 8008224:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8008228:	d1e5      	bne.n	80081f6 <_Unwind_VRS_Pop+0xa2>
 800822a:	63ac      	str	r4, [r5, #56]	; 0x38
 800822c:	e7a0      	b.n	8008170 <_Unwind_VRS_Pop+0x1c>
 800822e:	0c16      	lsrs	r6, r2, #16
 8008230:	b297      	uxth	r7, r2
 8008232:	19f3      	adds	r3, r6, r7
 8008234:	2b10      	cmp	r3, #16
 8008236:	d89a      	bhi.n	800816e <_Unwind_VRS_Pop+0x1a>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	071a      	lsls	r2, r3, #28
 800823c:	d45d      	bmi.n	80082fa <_Unwind_VRS_Pop+0x1a6>
 800823e:	ac22      	add	r4, sp, #136	; 0x88
 8008240:	4620      	mov	r0, r4
 8008242:	f000 f90d 	bl	8008460 <__gnu_Unwind_Save_WMMXD>
 8008246:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800824a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800824c:	b13f      	cbz	r7, 800825e <_Unwind_VRS_Pop+0x10a>
 800824e:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	f841 0b04 	str.w	r0, [r1], #4
 8008258:	3304      	adds	r3, #4
 800825a:	4293      	cmp	r3, r2
 800825c:	d1f9      	bne.n	8008252 <_Unwind_VRS_Pop+0xfe>
 800825e:	4620      	mov	r0, r4
 8008260:	63ab      	str	r3, [r5, #56]	; 0x38
 8008262:	f000 f8db 	bl	800841c <__gnu_Unwind_Restore_WMMXD>
 8008266:	2000      	movs	r0, #0
 8008268:	e782      	b.n	8008170 <_Unwind_VRS_Pop+0x1c>
 800826a:	19f2      	adds	r2, r6, r7
 800826c:	2a10      	cmp	r2, #16
 800826e:	f63f af7e 	bhi.w	800816e <_Unwind_VRS_Pop+0x1a>
 8008272:	2e0f      	cmp	r6, #15
 8008274:	f63f af7b 	bhi.w	800816e <_Unwind_VRS_Pop+0x1a>
 8008278:	682a      	ldr	r2, [r5, #0]
 800827a:	07d1      	lsls	r1, r2, #31
 800827c:	d508      	bpl.n	8008290 <_Unwind_VRS_Pop+0x13c>
 800827e:	4628      	mov	r0, r5
 8008280:	f022 0203 	bic.w	r2, r2, #3
 8008284:	f840 2b48 	str.w	r2, [r0], #72
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	f000 f8b3 	bl	80083f4 <__gnu_Unwind_Save_VFP>
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	ac22      	add	r4, sp, #136	; 0x88
 8008294:	4620      	mov	r0, r4
 8008296:	f000 f8ad 	bl	80083f4 <__gnu_Unwind_Save_VFP>
 800829a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	2f00      	cmp	r7, #0
 80082a0:	f000 8095 	beq.w	80083ce <_Unwind_VRS_Pop+0x27a>
 80082a4:	007f      	lsls	r7, r7, #1
 80082a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	3c04      	subs	r4, #4
 80082b0:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 80082b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80082b8:	f844 0f04 	str.w	r0, [r4, #4]!
 80082bc:	4291      	cmp	r1, r2
 80082be:	d1f9      	bne.n	80082b4 <_Unwind_VRS_Pop+0x160>
 80082c0:	f1b8 0f00 	cmp.w	r8, #0
 80082c4:	d00f      	beq.n	80082e6 <_Unwind_VRS_Pop+0x192>
 80082c6:	ac02      	add	r4, sp, #8
 80082c8:	2e10      	cmp	r6, #16
 80082ca:	4631      	mov	r1, r6
 80082cc:	bf38      	it	cc
 80082ce:	2110      	movcc	r1, #16
 80082d0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80082d4:	3984      	subs	r1, #132	; 0x84
 80082d6:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 80082da:	f852 0b04 	ldr.w	r0, [r2], #4
 80082de:	f841 0f04 	str.w	r0, [r1, #4]!
 80082e2:	4294      	cmp	r4, r2
 80082e4:	d1f9      	bne.n	80082da <_Unwind_VRS_Pop+0x186>
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	f47f af7b 	bne.w	80081e2 <_Unwind_VRS_Pop+0x8e>
 80082ec:	ac22      	add	r4, sp, #136	; 0x88
 80082ee:	3204      	adds	r2, #4
 80082f0:	63aa      	str	r2, [r5, #56]	; 0x38
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 f87a 	bl	80083ec <__gnu_Unwind_Restore_VFP>
 80082f8:	e77d      	b.n	80081f6 <_Unwind_VRS_Pop+0xa2>
 80082fa:	f023 0308 	bic.w	r3, r3, #8
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8008304:	f000 f8ac 	bl	8008460 <__gnu_Unwind_Save_WMMXD>
 8008308:	e799      	b.n	800823e <_Unwind_VRS_Pop+0xea>
 800830a:	f1b8 0f10 	cmp.w	r8, #16
 800830e:	682a      	ldr	r2, [r5, #0]
 8008310:	d943      	bls.n	800839a <_Unwind_VRS_Pop+0x246>
 8008312:	07d0      	lsls	r0, r2, #31
 8008314:	f1a8 0810 	sub.w	r8, r8, #16
 8008318:	d50b      	bpl.n	8008332 <_Unwind_VRS_Pop+0x1de>
 800831a:	4628      	mov	r0, r5
 800831c:	f022 0201 	bic.w	r2, r2, #1
 8008320:	f042 0202 	orr.w	r2, r2, #2
 8008324:	f840 2b48 	str.w	r2, [r0], #72
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	f000 f86b 	bl	8008404 <__gnu_Unwind_Save_VFP_D>
 800832e:	682a      	ldr	r2, [r5, #0]
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	0751      	lsls	r1, r2, #29
 8008334:	d425      	bmi.n	8008382 <_Unwind_VRS_Pop+0x22e>
 8008336:	2e0f      	cmp	r6, #15
 8008338:	d804      	bhi.n	8008344 <_Unwind_VRS_Pop+0x1f0>
 800833a:	a822      	add	r0, sp, #136	; 0x88
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	f000 f861 	bl	8008404 <__gnu_Unwind_Save_VFP_D>
 8008342:	9b01      	ldr	r3, [sp, #4]
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	ac02      	add	r4, sp, #8
 8008348:	4620      	mov	r0, r4
 800834a:	f000 f863 	bl	8008414 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800834e:	f1c6 0110 	rsb	r1, r6, #16
 8008352:	2900      	cmp	r1, #0
 8008354:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008356:	9b01      	ldr	r3, [sp, #4]
 8008358:	ddb6      	ble.n	80082c8 <_Unwind_VRS_Pop+0x174>
 800835a:	ac22      	add	r4, sp, #136	; 0x88
 800835c:	004f      	lsls	r7, r1, #1
 800835e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008362:	4611      	mov	r1, r2
 8008364:	e7a3      	b.n	80082ae <_Unwind_VRS_Pop+0x15a>
 8008366:	a822      	add	r0, sp, #136	; 0x88
 8008368:	f000 f848 	bl	80083fc <__gnu_Unwind_Restore_VFP_D>
 800836c:	e73d      	b.n	80081ea <_Unwind_VRS_Pop+0x96>
 800836e:	f023 0310 	bic.w	r3, r3, #16
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8008378:	9201      	str	r2, [sp, #4]
 800837a:	f000 f89d 	bl	80084b8 <__gnu_Unwind_Save_WMMXC>
 800837e:	9a01      	ldr	r2, [sp, #4]
 8008380:	e701      	b.n	8008186 <_Unwind_VRS_Pop+0x32>
 8008382:	4628      	mov	r0, r5
 8008384:	f022 0204 	bic.w	r2, r2, #4
 8008388:	f840 2bd0 	str.w	r2, [r0], #208
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	f000 f841 	bl	8008414 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008392:	9b01      	ldr	r3, [sp, #4]
 8008394:	e7cf      	b.n	8008336 <_Unwind_VRS_Pop+0x1e2>
 8008396:	682a      	ldr	r2, [r5, #0]
 8008398:	e7cb      	b.n	8008332 <_Unwind_VRS_Pop+0x1de>
 800839a:	07d0      	lsls	r0, r2, #31
 800839c:	d50a      	bpl.n	80083b4 <_Unwind_VRS_Pop+0x260>
 800839e:	4628      	mov	r0, r5
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	f042 0202 	orr.w	r2, r2, #2
 80083a8:	f840 2b48 	str.w	r2, [r0], #72
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	f000 f829 	bl	8008404 <__gnu_Unwind_Save_VFP_D>
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	ac22      	add	r4, sp, #136	; 0x88
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 f823 	bl	8008404 <__gnu_Unwind_Save_VFP_D>
 80083be:	46b8      	mov	r8, r7
 80083c0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80083c2:	9b01      	ldr	r3, [sp, #4]
 80083c4:	2f00      	cmp	r7, #0
 80083c6:	f47f af6d 	bne.w	80082a4 <_Unwind_VRS_Pop+0x150>
 80083ca:	460a      	mov	r2, r1
 80083cc:	e709      	b.n	80081e2 <_Unwind_VRS_Pop+0x8e>
 80083ce:	460a      	mov	r2, r1
 80083d0:	e78d      	b.n	80082ee <_Unwind_VRS_Pop+0x19a>
 80083d2:	bf00      	nop

080083d4 <__restore_core_regs>:
 80083d4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80083d8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80083dc:	469c      	mov	ip, r3
 80083de:	46a6      	mov	lr, r4
 80083e0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80083e4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80083e8:	46e5      	mov	sp, ip
 80083ea:	bd00      	pop	{pc}

080083ec <__gnu_Unwind_Restore_VFP>:
 80083ec:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop

080083f4 <__gnu_Unwind_Save_VFP>:
 80083f4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop

080083fc <__gnu_Unwind_Restore_VFP_D>:
 80083fc:	ec90 0b20 	vldmia	r0, {d0-d15}
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop

08008404 <__gnu_Unwind_Save_VFP_D>:
 8008404:	ec80 0b20 	vstmia	r0, {d0-d15}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop

0800840c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800840c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop

08008414 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8008414:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop

0800841c <__gnu_Unwind_Restore_WMMXD>:
 800841c:	ecf0 0102 	ldfe	f0, [r0], #8
 8008420:	ecf0 1102 	ldfe	f1, [r0], #8
 8008424:	ecf0 2102 	ldfe	f2, [r0], #8
 8008428:	ecf0 3102 	ldfe	f3, [r0], #8
 800842c:	ecf0 4102 	ldfe	f4, [r0], #8
 8008430:	ecf0 5102 	ldfe	f5, [r0], #8
 8008434:	ecf0 6102 	ldfe	f6, [r0], #8
 8008438:	ecf0 7102 	ldfe	f7, [r0], #8
 800843c:	ecf0 8102 	ldfp	f0, [r0], #8
 8008440:	ecf0 9102 	ldfp	f1, [r0], #8
 8008444:	ecf0 a102 	ldfp	f2, [r0], #8
 8008448:	ecf0 b102 	ldfp	f3, [r0], #8
 800844c:	ecf0 c102 	ldfp	f4, [r0], #8
 8008450:	ecf0 d102 	ldfp	f5, [r0], #8
 8008454:	ecf0 e102 	ldfp	f6, [r0], #8
 8008458:	ecf0 f102 	ldfp	f7, [r0], #8
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop

08008460 <__gnu_Unwind_Save_WMMXD>:
 8008460:	ece0 0102 	stfe	f0, [r0], #8
 8008464:	ece0 1102 	stfe	f1, [r0], #8
 8008468:	ece0 2102 	stfe	f2, [r0], #8
 800846c:	ece0 3102 	stfe	f3, [r0], #8
 8008470:	ece0 4102 	stfe	f4, [r0], #8
 8008474:	ece0 5102 	stfe	f5, [r0], #8
 8008478:	ece0 6102 	stfe	f6, [r0], #8
 800847c:	ece0 7102 	stfe	f7, [r0], #8
 8008480:	ece0 8102 	stfp	f0, [r0], #8
 8008484:	ece0 9102 	stfp	f1, [r0], #8
 8008488:	ece0 a102 	stfp	f2, [r0], #8
 800848c:	ece0 b102 	stfp	f3, [r0], #8
 8008490:	ece0 c102 	stfp	f4, [r0], #8
 8008494:	ece0 d102 	stfp	f5, [r0], #8
 8008498:	ece0 e102 	stfp	f6, [r0], #8
 800849c:	ece0 f102 	stfp	f7, [r0], #8
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop

080084a4 <__gnu_Unwind_Restore_WMMXC>:
 80084a4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80084a8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80084ac:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80084b0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop

080084b8 <__gnu_Unwind_Save_WMMXC>:
 80084b8:	fca0 8101 	stc2	1, cr8, [r0], #4
 80084bc:	fca0 9101 	stc2	1, cr9, [r0], #4
 80084c0:	fca0 a101 	stc2	1, cr10, [r0], #4
 80084c4:	fca0 b101 	stc2	1, cr11, [r0], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop

080084cc <_Unwind_RaiseException>:
 80084cc:	46ec      	mov	ip, sp
 80084ce:	b500      	push	{lr}
 80084d0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80084d4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80084e0:	a901      	add	r1, sp, #4
 80084e2:	f7ff fbdd 	bl	8007ca0 <__gnu_Unwind_RaiseException>
 80084e6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80084ea:	b012      	add	sp, #72	; 0x48
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop

080084f0 <_Unwind_Resume>:
 80084f0:	46ec      	mov	ip, sp
 80084f2:	b500      	push	{lr}
 80084f4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80084f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008504:	a901      	add	r1, sp, #4
 8008506:	f7ff fc05 	bl	8007d14 <__gnu_Unwind_Resume>
 800850a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800850e:	b012      	add	sp, #72	; 0x48
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop

08008514 <_Unwind_Resume_or_Rethrow>:
 8008514:	46ec      	mov	ip, sp
 8008516:	b500      	push	{lr}
 8008518:	e92d 5000 	stmdb	sp!, {ip, lr}
 800851c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008528:	a901      	add	r1, sp, #4
 800852a:	f7ff fc15 	bl	8007d58 <__gnu_Unwind_Resume_or_Rethrow>
 800852e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008532:	b012      	add	sp, #72	; 0x48
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop

08008538 <_Unwind_ForcedUnwind>:
 8008538:	46ec      	mov	ip, sp
 800853a:	b500      	push	{lr}
 800853c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008540:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	e92d 000c 	stmdb	sp!, {r2, r3}
 800854c:	ab01      	add	r3, sp, #4
 800854e:	f7ff fbd7 	bl	8007d00 <__gnu_Unwind_ForcedUnwind>
 8008552:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008556:	b012      	add	sp, #72	; 0x48
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop

0800855c <_Unwind_Backtrace>:
 800855c:	46ec      	mov	ip, sp
 800855e:	b500      	push	{lr}
 8008560:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008564:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008568:	f04f 0300 	mov.w	r3, #0
 800856c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008570:	aa01      	add	r2, sp, #4
 8008572:	f7ff fc47 	bl	8007e04 <__gnu_Unwind_Backtrace>
 8008576:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800857a:	b012      	add	sp, #72	; 0x48
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop

08008580 <next_unwind_byte>:
 8008580:	7a02      	ldrb	r2, [r0, #8]
 8008582:	b982      	cbnz	r2, 80085a6 <next_unwind_byte+0x26>
 8008584:	7a43      	ldrb	r3, [r0, #9]
 8008586:	b1ab      	cbz	r3, 80085b4 <next_unwind_byte+0x34>
 8008588:	6842      	ldr	r2, [r0, #4]
 800858a:	3b01      	subs	r3, #1
 800858c:	b410      	push	{r4}
 800858e:	7243      	strb	r3, [r0, #9]
 8008590:	6813      	ldr	r3, [r2, #0]
 8008592:	2103      	movs	r1, #3
 8008594:	1d14      	adds	r4, r2, #4
 8008596:	7201      	strb	r1, [r0, #8]
 8008598:	021a      	lsls	r2, r3, #8
 800859a:	6044      	str	r4, [r0, #4]
 800859c:	6002      	str	r2, [r0, #0]
 800859e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085a2:	0e18      	lsrs	r0, r3, #24
 80085a4:	4770      	bx	lr
 80085a6:	6803      	ldr	r3, [r0, #0]
 80085a8:	3a01      	subs	r2, #1
 80085aa:	7202      	strb	r2, [r0, #8]
 80085ac:	021a      	lsls	r2, r3, #8
 80085ae:	6002      	str	r2, [r0, #0]
 80085b0:	0e18      	lsrs	r0, r3, #24
 80085b2:	4770      	bx	lr
 80085b4:	20b0      	movs	r0, #176	; 0xb0
 80085b6:	4770      	bx	lr

080085b8 <_Unwind_GetGR.constprop.0>:
 80085b8:	b500      	push	{lr}
 80085ba:	b085      	sub	sp, #20
 80085bc:	aa03      	add	r2, sp, #12
 80085be:	2300      	movs	r3, #0
 80085c0:	9200      	str	r2, [sp, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	220c      	movs	r2, #12
 80085c6:	f7ff fbd7 	bl	8007d78 <_Unwind_VRS_Get>
 80085ca:	9803      	ldr	r0, [sp, #12]
 80085cc:	b005      	add	sp, #20
 80085ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80085d2:	bf00      	nop

080085d4 <unwind_UCB_from_context>:
 80085d4:	e7f0      	b.n	80085b8 <_Unwind_GetGR.constprop.0>
 80085d6:	bf00      	nop

080085d8 <__gnu_unwind_execute>:
 80085d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085dc:	4605      	mov	r5, r0
 80085de:	b085      	sub	sp, #20
 80085e0:	460e      	mov	r6, r1
 80085e2:	f04f 0800 	mov.w	r8, #0
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff ffca 	bl	8008580 <next_unwind_byte>
 80085ec:	28b0      	cmp	r0, #176	; 0xb0
 80085ee:	4604      	mov	r4, r0
 80085f0:	f000 80b1 	beq.w	8008756 <__gnu_unwind_execute+0x17e>
 80085f4:	0607      	lsls	r7, r0, #24
 80085f6:	d520      	bpl.n	800863a <__gnu_unwind_execute+0x62>
 80085f8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80085fc:	2b80      	cmp	r3, #128	; 0x80
 80085fe:	d065      	beq.n	80086cc <__gnu_unwind_execute+0xf4>
 8008600:	2b90      	cmp	r3, #144	; 0x90
 8008602:	d036      	beq.n	8008672 <__gnu_unwind_execute+0x9a>
 8008604:	2ba0      	cmp	r3, #160	; 0xa0
 8008606:	d078      	beq.n	80086fa <__gnu_unwind_execute+0x122>
 8008608:	2bb0      	cmp	r3, #176	; 0xb0
 800860a:	d047      	beq.n	800869c <__gnu_unwind_execute+0xc4>
 800860c:	2bc0      	cmp	r3, #192	; 0xc0
 800860e:	f000 808a 	beq.w	8008726 <__gnu_unwind_execute+0x14e>
 8008612:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8008616:	2bd0      	cmp	r3, #208	; 0xd0
 8008618:	d10b      	bne.n	8008632 <__gnu_unwind_execute+0x5a>
 800861a:	f000 0207 	and.w	r2, r0, #7
 800861e:	3201      	adds	r2, #1
 8008620:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008624:	2305      	movs	r3, #5
 8008626:	2101      	movs	r1, #1
 8008628:	4628      	mov	r0, r5
 800862a:	f7ff fd93 	bl	8008154 <_Unwind_VRS_Pop>
 800862e:	2800      	cmp	r0, #0
 8008630:	d0d9      	beq.n	80085e6 <__gnu_unwind_execute+0xe>
 8008632:	2009      	movs	r0, #9
 8008634:	b005      	add	sp, #20
 8008636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800863a:	f10d 090c 	add.w	r9, sp, #12
 800863e:	2300      	movs	r3, #0
 8008640:	4619      	mov	r1, r3
 8008642:	0087      	lsls	r7, r0, #2
 8008644:	f8cd 9000 	str.w	r9, [sp]
 8008648:	220d      	movs	r2, #13
 800864a:	4628      	mov	r0, r5
 800864c:	f7ff fb94 	bl	8007d78 <_Unwind_VRS_Get>
 8008650:	b2ff      	uxtb	r7, r7
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	f8cd 9000 	str.w	r9, [sp]
 8008658:	3704      	adds	r7, #4
 800865a:	0660      	lsls	r0, r4, #25
 800865c:	bf4c      	ite	mi
 800865e:	1bdf      	submi	r7, r3, r7
 8008660:	18ff      	addpl	r7, r7, r3
 8008662:	2300      	movs	r3, #0
 8008664:	4619      	mov	r1, r3
 8008666:	220d      	movs	r2, #13
 8008668:	4628      	mov	r0, r5
 800866a:	9703      	str	r7, [sp, #12]
 800866c:	f7ff fba6 	bl	8007dbc <_Unwind_VRS_Set>
 8008670:	e7b9      	b.n	80085e6 <__gnu_unwind_execute+0xe>
 8008672:	f000 030d 	and.w	r3, r0, #13
 8008676:	2b0d      	cmp	r3, #13
 8008678:	d0db      	beq.n	8008632 <__gnu_unwind_execute+0x5a>
 800867a:	af03      	add	r7, sp, #12
 800867c:	2300      	movs	r3, #0
 800867e:	f000 020f 	and.w	r2, r0, #15
 8008682:	4619      	mov	r1, r3
 8008684:	9700      	str	r7, [sp, #0]
 8008686:	4628      	mov	r0, r5
 8008688:	f7ff fb76 	bl	8007d78 <_Unwind_VRS_Get>
 800868c:	2300      	movs	r3, #0
 800868e:	9700      	str	r7, [sp, #0]
 8008690:	4619      	mov	r1, r3
 8008692:	220d      	movs	r2, #13
 8008694:	4628      	mov	r0, r5
 8008696:	f7ff fb91 	bl	8007dbc <_Unwind_VRS_Set>
 800869a:	e7a4      	b.n	80085e6 <__gnu_unwind_execute+0xe>
 800869c:	28b1      	cmp	r0, #177	; 0xb1
 800869e:	d05f      	beq.n	8008760 <__gnu_unwind_execute+0x188>
 80086a0:	28b2      	cmp	r0, #178	; 0xb2
 80086a2:	f000 80cc 	beq.w	800883e <__gnu_unwind_execute+0x266>
 80086a6:	28b3      	cmp	r0, #179	; 0xb3
 80086a8:	d07e      	beq.n	80087a8 <__gnu_unwind_execute+0x1d0>
 80086aa:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80086ae:	2bb4      	cmp	r3, #180	; 0xb4
 80086b0:	d0bf      	beq.n	8008632 <__gnu_unwind_execute+0x5a>
 80086b2:	f000 0207 	and.w	r2, r0, #7
 80086b6:	3201      	adds	r2, #1
 80086b8:	2301      	movs	r3, #1
 80086ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80086be:	4619      	mov	r1, r3
 80086c0:	4628      	mov	r0, r5
 80086c2:	f7ff fd47 	bl	8008154 <_Unwind_VRS_Pop>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d08d      	beq.n	80085e6 <__gnu_unwind_execute+0xe>
 80086ca:	e7b2      	b.n	8008632 <__gnu_unwind_execute+0x5a>
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7ff ff57 	bl	8008580 <next_unwind_byte>
 80086d2:	0224      	lsls	r4, r4, #8
 80086d4:	4304      	orrs	r4, r0
 80086d6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80086da:	d0aa      	beq.n	8008632 <__gnu_unwind_execute+0x5a>
 80086dc:	0124      	lsls	r4, r4, #4
 80086de:	2300      	movs	r3, #0
 80086e0:	b2a2      	uxth	r2, r4
 80086e2:	4619      	mov	r1, r3
 80086e4:	4628      	mov	r0, r5
 80086e6:	f7ff fd35 	bl	8008154 <_Unwind_VRS_Pop>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d1a1      	bne.n	8008632 <__gnu_unwind_execute+0x5a>
 80086ee:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80086f2:	bf18      	it	ne
 80086f4:	f04f 0801 	movne.w	r8, #1
 80086f8:	e775      	b.n	80085e6 <__gnu_unwind_execute+0xe>
 80086fa:	43c2      	mvns	r2, r0
 80086fc:	f002 0307 	and.w	r3, r2, #7
 8008700:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8008704:	411a      	asrs	r2, r3
 8008706:	0701      	lsls	r1, r0, #28
 8008708:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800870c:	f04f 0300 	mov.w	r3, #0
 8008710:	bf48      	it	mi
 8008712:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8008716:	4619      	mov	r1, r3
 8008718:	4628      	mov	r0, r5
 800871a:	f7ff fd1b 	bl	8008154 <_Unwind_VRS_Pop>
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f af61 	beq.w	80085e6 <__gnu_unwind_execute+0xe>
 8008724:	e785      	b.n	8008632 <__gnu_unwind_execute+0x5a>
 8008726:	28c6      	cmp	r0, #198	; 0xc6
 8008728:	d051      	beq.n	80087ce <__gnu_unwind_execute+0x1f6>
 800872a:	28c7      	cmp	r0, #199	; 0xc7
 800872c:	d05a      	beq.n	80087e4 <__gnu_unwind_execute+0x20c>
 800872e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8008732:	2bc0      	cmp	r3, #192	; 0xc0
 8008734:	d069      	beq.n	800880a <__gnu_unwind_execute+0x232>
 8008736:	28c8      	cmp	r0, #200	; 0xc8
 8008738:	d075      	beq.n	8008826 <__gnu_unwind_execute+0x24e>
 800873a:	28c9      	cmp	r0, #201	; 0xc9
 800873c:	f47f af79 	bne.w	8008632 <__gnu_unwind_execute+0x5a>
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff ff1d 	bl	8008580 <next_unwind_byte>
 8008746:	0302      	lsls	r2, r0, #12
 8008748:	f000 000f 	and.w	r0, r0, #15
 800874c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8008750:	3001      	adds	r0, #1
 8008752:	4302      	orrs	r2, r0
 8008754:	e766      	b.n	8008624 <__gnu_unwind_execute+0x4c>
 8008756:	f1b8 0f00 	cmp.w	r8, #0
 800875a:	d014      	beq.n	8008786 <__gnu_unwind_execute+0x1ae>
 800875c:	2000      	movs	r0, #0
 800875e:	e769      	b.n	8008634 <__gnu_unwind_execute+0x5c>
 8008760:	4630      	mov	r0, r6
 8008762:	f7ff ff0d 	bl	8008580 <next_unwind_byte>
 8008766:	2800      	cmp	r0, #0
 8008768:	f43f af63 	beq.w	8008632 <__gnu_unwind_execute+0x5a>
 800876c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008770:	f47f af5f 	bne.w	8008632 <__gnu_unwind_execute+0x5a>
 8008774:	4602      	mov	r2, r0
 8008776:	4619      	mov	r1, r3
 8008778:	4628      	mov	r0, r5
 800877a:	f7ff fceb 	bl	8008154 <_Unwind_VRS_Pop>
 800877e:	2800      	cmp	r0, #0
 8008780:	f43f af31 	beq.w	80085e6 <__gnu_unwind_execute+0xe>
 8008784:	e755      	b.n	8008632 <__gnu_unwind_execute+0x5a>
 8008786:	ac03      	add	r4, sp, #12
 8008788:	4643      	mov	r3, r8
 800878a:	220e      	movs	r2, #14
 800878c:	4641      	mov	r1, r8
 800878e:	9400      	str	r4, [sp, #0]
 8008790:	4628      	mov	r0, r5
 8008792:	f7ff faf1 	bl	8007d78 <_Unwind_VRS_Get>
 8008796:	9400      	str	r4, [sp, #0]
 8008798:	4628      	mov	r0, r5
 800879a:	4643      	mov	r3, r8
 800879c:	220f      	movs	r2, #15
 800879e:	4641      	mov	r1, r8
 80087a0:	f7ff fb0c 	bl	8007dbc <_Unwind_VRS_Set>
 80087a4:	4640      	mov	r0, r8
 80087a6:	e745      	b.n	8008634 <__gnu_unwind_execute+0x5c>
 80087a8:	4630      	mov	r0, r6
 80087aa:	f7ff fee9 	bl	8008580 <next_unwind_byte>
 80087ae:	0301      	lsls	r1, r0, #12
 80087b0:	f000 000f 	and.w	r0, r0, #15
 80087b4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80087b8:	1c42      	adds	r2, r0, #1
 80087ba:	2301      	movs	r3, #1
 80087bc:	430a      	orrs	r2, r1
 80087be:	4628      	mov	r0, r5
 80087c0:	4619      	mov	r1, r3
 80087c2:	f7ff fcc7 	bl	8008154 <_Unwind_VRS_Pop>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	f43f af0d 	beq.w	80085e6 <__gnu_unwind_execute+0xe>
 80087cc:	e731      	b.n	8008632 <__gnu_unwind_execute+0x5a>
 80087ce:	4630      	mov	r0, r6
 80087d0:	f7ff fed6 	bl	8008580 <next_unwind_byte>
 80087d4:	0301      	lsls	r1, r0, #12
 80087d6:	f000 000f 	and.w	r0, r0, #15
 80087da:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80087de:	1c42      	adds	r2, r0, #1
 80087e0:	2303      	movs	r3, #3
 80087e2:	e7eb      	b.n	80087bc <__gnu_unwind_execute+0x1e4>
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7ff fecb 	bl	8008580 <next_unwind_byte>
 80087ea:	4602      	mov	r2, r0
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f43f af20 	beq.w	8008632 <__gnu_unwind_execute+0x5a>
 80087f2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80087f6:	f47f af1c 	bne.w	8008632 <__gnu_unwind_execute+0x5a>
 80087fa:	2104      	movs	r1, #4
 80087fc:	4628      	mov	r0, r5
 80087fe:	f7ff fca9 	bl	8008154 <_Unwind_VRS_Pop>
 8008802:	2800      	cmp	r0, #0
 8008804:	f43f aeef 	beq.w	80085e6 <__gnu_unwind_execute+0xe>
 8008808:	e713      	b.n	8008632 <__gnu_unwind_execute+0x5a>
 800880a:	f000 020f 	and.w	r2, r0, #15
 800880e:	3201      	adds	r2, #1
 8008810:	2303      	movs	r3, #3
 8008812:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8008816:	4619      	mov	r1, r3
 8008818:	4628      	mov	r0, r5
 800881a:	f7ff fc9b 	bl	8008154 <_Unwind_VRS_Pop>
 800881e:	2800      	cmp	r0, #0
 8008820:	f43f aee1 	beq.w	80085e6 <__gnu_unwind_execute+0xe>
 8008824:	e705      	b.n	8008632 <__gnu_unwind_execute+0x5a>
 8008826:	4630      	mov	r0, r6
 8008828:	f7ff feaa 	bl	8008580 <next_unwind_byte>
 800882c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8008830:	f000 030f 	and.w	r3, r0, #15
 8008834:	3210      	adds	r2, #16
 8008836:	3301      	adds	r3, #1
 8008838:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800883c:	e6f2      	b.n	8008624 <__gnu_unwind_execute+0x4c>
 800883e:	2300      	movs	r3, #0
 8008840:	f10d 090c 	add.w	r9, sp, #12
 8008844:	220d      	movs	r2, #13
 8008846:	4619      	mov	r1, r3
 8008848:	f8cd 9000 	str.w	r9, [sp]
 800884c:	4628      	mov	r0, r5
 800884e:	f7ff fa93 	bl	8007d78 <_Unwind_VRS_Get>
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff fe94 	bl	8008580 <next_unwind_byte>
 8008858:	0602      	lsls	r2, r0, #24
 800885a:	f04f 0702 	mov.w	r7, #2
 800885e:	d50c      	bpl.n	800887a <__gnu_unwind_execute+0x2a2>
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008866:	40b8      	lsls	r0, r7
 8008868:	4403      	add	r3, r0
 800886a:	4630      	mov	r0, r6
 800886c:	9303      	str	r3, [sp, #12]
 800886e:	f7ff fe87 	bl	8008580 <next_unwind_byte>
 8008872:	0603      	lsls	r3, r0, #24
 8008874:	f107 0707 	add.w	r7, r7, #7
 8008878:	d4f2      	bmi.n	8008860 <__gnu_unwind_execute+0x288>
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	f8cd 9000 	str.w	r9, [sp]
 8008880:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8008884:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8008888:	40bc      	lsls	r4, r7
 800888a:	2300      	movs	r3, #0
 800888c:	4414      	add	r4, r2
 800888e:	4619      	mov	r1, r3
 8008890:	220d      	movs	r2, #13
 8008892:	4628      	mov	r0, r5
 8008894:	9403      	str	r4, [sp, #12]
 8008896:	f7ff fa91 	bl	8007dbc <_Unwind_VRS_Set>
 800889a:	e6a4      	b.n	80085e6 <__gnu_unwind_execute+0xe>

0800889c <__gnu_unwind_frame>:
 800889c:	b510      	push	{r4, lr}
 800889e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80088a0:	b084      	sub	sp, #16
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	2003      	movs	r0, #3
 80088a6:	f88d 000c 	strb.w	r0, [sp, #12]
 80088aa:	79dc      	ldrb	r4, [r3, #7]
 80088ac:	f88d 400d 	strb.w	r4, [sp, #13]
 80088b0:	0212      	lsls	r2, r2, #8
 80088b2:	3308      	adds	r3, #8
 80088b4:	4608      	mov	r0, r1
 80088b6:	a901      	add	r1, sp, #4
 80088b8:	9201      	str	r2, [sp, #4]
 80088ba:	9302      	str	r3, [sp, #8]
 80088bc:	f7ff fe8c 	bl	80085d8 <__gnu_unwind_execute>
 80088c0:	b004      	add	sp, #16
 80088c2:	bd10      	pop	{r4, pc}

080088c4 <_Unwind_GetRegionStart>:
 80088c4:	b508      	push	{r3, lr}
 80088c6:	f7ff fe85 	bl	80085d4 <unwind_UCB_from_context>
 80088ca:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80088cc:	bd08      	pop	{r3, pc}
 80088ce:	bf00      	nop

080088d0 <_Unwind_GetLanguageSpecificData>:
 80088d0:	b508      	push	{r3, lr}
 80088d2:	f7ff fe7f 	bl	80085d4 <unwind_UCB_from_context>
 80088d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80088d8:	79c3      	ldrb	r3, [r0, #7]
 80088da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80088de:	3008      	adds	r0, #8
 80088e0:	bd08      	pop	{r3, pc}
 80088e2:	bf00      	nop

080088e4 <_Unwind_GetDataRelBase>:
 80088e4:	b508      	push	{r3, lr}
 80088e6:	f009 ff3c 	bl	8012762 <abort>
 80088ea:	bf00      	nop

080088ec <_Unwind_GetTextRelBase>:
 80088ec:	b508      	push	{r3, lr}
 80088ee:	f7ff fff9 	bl	80088e4 <_Unwind_GetDataRelBase>
 80088f2:	bf00      	nop

080088f4 <__aeabi_idiv0>:
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop

080088f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80088fc:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <HAL_Init+0x40>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a0d      	ldr	r2, [pc, #52]	; (8008938 <HAL_Init+0x40>)
 8008902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008908:	4b0b      	ldr	r3, [pc, #44]	; (8008938 <HAL_Init+0x40>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a0a      	ldr	r2, [pc, #40]	; (8008938 <HAL_Init+0x40>)
 800890e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008914:	4b08      	ldr	r3, [pc, #32]	; (8008938 <HAL_Init+0x40>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a07      	ldr	r2, [pc, #28]	; (8008938 <HAL_Init+0x40>)
 800891a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800891e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008920:	2003      	movs	r0, #3
 8008922:	f000 fc73 	bl	800920c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008926:	2000      	movs	r0, #0
 8008928:	f000 f808 	bl	800893c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800892c:	f005 fcbc 	bl	800e2a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	40023c00 	.word	0x40023c00

0800893c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008944:	4b12      	ldr	r3, [pc, #72]	; (8008990 <HAL_InitTick+0x54>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	4b12      	ldr	r3, [pc, #72]	; (8008994 <HAL_InitTick+0x58>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	4619      	mov	r1, r3
 800894e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008952:	fbb3 f3f1 	udiv	r3, r3, r1
 8008956:	fbb2 f3f3 	udiv	r3, r2, r3
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fc8b 	bl	8009276 <HAL_SYSTICK_Config>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e00e      	b.n	8008988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b0f      	cmp	r3, #15
 800896e:	d80a      	bhi.n	8008986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008970:	2200      	movs	r2, #0
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	f000 fc53 	bl	8009222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800897c:	4a06      	ldr	r2, [pc, #24]	; (8008998 <HAL_InitTick+0x5c>)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	e000      	b.n	8008988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	200003f8 	.word	0x200003f8
 8008994:	20000004 	.word	0x20000004
 8008998:	20000000 	.word	0x20000000

0800899c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80089a0:	4b06      	ldr	r3, [pc, #24]	; (80089bc <HAL_IncTick+0x20>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <HAL_IncTick+0x24>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4413      	add	r3, r2
 80089ac:	4a04      	ldr	r2, [pc, #16]	; (80089c0 <HAL_IncTick+0x24>)
 80089ae:	6013      	str	r3, [r2, #0]
}
 80089b0:	bf00      	nop
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	20000004 	.word	0x20000004
 80089c0:	200010e8 	.word	0x200010e8

080089c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089c4:	b480      	push	{r7}
 80089c6:	af00      	add	r7, sp, #0
  return uwTick;
 80089c8:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <HAL_GetTick+0x14>)
 80089ca:	681b      	ldr	r3, [r3, #0]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	200010e8 	.word	0x200010e8

080089dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80089e4:	f7ff ffee 	bl	80089c4 <HAL_GetTick>
 80089e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f4:	d005      	beq.n	8008a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80089f6:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <HAL_Delay+0x40>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008a02:	bf00      	nop
 8008a04:	f7ff ffde 	bl	80089c4 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d8f7      	bhi.n	8008a04 <HAL_Delay+0x28>
  {
  }
}
 8008a14:	bf00      	nop
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	20000004 	.word	0x20000004

08008a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e033      	b.n	8008a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d109      	bne.n	8008a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f005 fc5a 	bl	800e2f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d118      	bne.n	8008a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008a66:	f023 0302 	bic.w	r3, r3, #2
 8008a6a:	f043 0202 	orr.w	r2, r3, #2
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f9fe 	bl	8008e74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	f023 0303 	bic.w	r3, r3, #3
 8008a86:	f043 0201 	orr.w	r2, r3, #1
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8008a8e:	e001      	b.n	8008a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_ADC_Start+0x1a>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e08a      	b.n	8008bd8 <HAL_ADC_Start+0x130>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d018      	beq.n	8008b0a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0201 	orr.w	r2, r2, #1
 8008ae6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008ae8:	4b3e      	ldr	r3, [pc, #248]	; (8008be4 <HAL_ADC_Start+0x13c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a3e      	ldr	r2, [pc, #248]	; (8008be8 <HAL_ADC_Start+0x140>)
 8008aee:	fba2 2303 	umull	r2, r3, r2, r3
 8008af2:	0c9a      	lsrs	r2, r3, #18
 8008af4:	4613      	mov	r3, r2
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	4413      	add	r3, r2
 8008afa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008afc:	e002      	b.n	8008b04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1f9      	bne.n	8008afe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d15e      	bne.n	8008bd6 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008b20:	f023 0301 	bic.w	r3, r3, #1
 8008b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d007      	beq.n	8008b4a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008b42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b56:	d106      	bne.n	8008b66 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5c:	f023 0206 	bic.w	r2, r3, #6
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	645a      	str	r2, [r3, #68]	; 0x44
 8008b64:	e002      	b.n	8008b6c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008b74:	4b1d      	ldr	r3, [pc, #116]	; (8008bec <HAL_ADC_Start+0x144>)
 8008b76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008b80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f003 031f 	and.w	r3, r3, #31
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10f      	bne.n	8008bae <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11c      	bne.n	8008bd6 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008baa:	609a      	str	r2, [r3, #8]
 8008bac:	e013      	b.n	8008bd6 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a0f      	ldr	r2, [pc, #60]	; (8008bf0 <HAL_ADC_Start+0x148>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_ADC_Start+0x12e>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d107      	bne.n	8008bd6 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008bd4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	200003f8 	.word	0x200003f8
 8008be8:	431bde83 	.word	0x431bde83
 8008bec:	40012300 	.word	0x40012300
 8008bf0:	40012000 	.word	0x40012000

08008bf4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_ADC_ConfigChannel+0x1c>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e113      	b.n	8008e54 <HAL_ADC_ConfigChannel+0x244>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b09      	cmp	r3, #9
 8008c3a:	d925      	bls.n	8008c88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68d9      	ldr	r1, [r3, #12]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	4413      	add	r3, r2
 8008c50:	3b1e      	subs	r3, #30
 8008c52:	2207      	movs	r2, #7
 8008c54:	fa02 f303 	lsl.w	r3, r2, r3
 8008c58:	43da      	mvns	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	400a      	ands	r2, r1
 8008c60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68d9      	ldr	r1, [r3, #12]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	4618      	mov	r0, r3
 8008c74:	4603      	mov	r3, r0
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	4403      	add	r3, r0
 8008c7a:	3b1e      	subs	r3, #30
 8008c7c:	409a      	lsls	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	60da      	str	r2, [r3, #12]
 8008c86:	e022      	b.n	8008cce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6919      	ldr	r1, [r3, #16]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	461a      	mov	r2, r3
 8008c96:	4613      	mov	r3, r2
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	4413      	add	r3, r2
 8008c9c:	2207      	movs	r2, #7
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	43da      	mvns	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	400a      	ands	r2, r1
 8008caa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6919      	ldr	r1, [r3, #16]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	4403      	add	r3, r0
 8008cc4:	409a      	lsls	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	2b06      	cmp	r3, #6
 8008cd4:	d824      	bhi.n	8008d20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	3b05      	subs	r3, #5
 8008ce8:	221f      	movs	r2, #31
 8008cea:	fa02 f303 	lsl.w	r3, r2, r3
 8008cee:	43da      	mvns	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	400a      	ands	r2, r1
 8008cf6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	4618      	mov	r0, r3
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	3b05      	subs	r3, #5
 8008d12:	fa00 f203 	lsl.w	r2, r0, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8008d1e:	e04c      	b.n	8008dba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b0c      	cmp	r3, #12
 8008d26:	d824      	bhi.n	8008d72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	3b23      	subs	r3, #35	; 0x23
 8008d3a:	221f      	movs	r2, #31
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	43da      	mvns	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	400a      	ands	r2, r1
 8008d48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	4618      	mov	r0, r3
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	3b23      	subs	r3, #35	; 0x23
 8008d64:	fa00 f203 	lsl.w	r2, r0, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d70:	e023      	b.n	8008dba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	3b41      	subs	r3, #65	; 0x41
 8008d84:	221f      	movs	r2, #31
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	43da      	mvns	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	400a      	ands	r2, r1
 8008d92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	4618      	mov	r0, r3
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	3b41      	subs	r3, #65	; 0x41
 8008dae:	fa00 f203 	lsl.w	r2, r0, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008dba:	4b29      	ldr	r3, [pc, #164]	; (8008e60 <HAL_ADC_ConfigChannel+0x250>)
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a28      	ldr	r2, [pc, #160]	; (8008e64 <HAL_ADC_ConfigChannel+0x254>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d10f      	bne.n	8008de8 <HAL_ADC_ConfigChannel+0x1d8>
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b12      	cmp	r3, #18
 8008dce:	d10b      	bne.n	8008de8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a1d      	ldr	r2, [pc, #116]	; (8008e64 <HAL_ADC_ConfigChannel+0x254>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d12b      	bne.n	8008e4a <HAL_ADC_ConfigChannel+0x23a>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a1c      	ldr	r2, [pc, #112]	; (8008e68 <HAL_ADC_ConfigChannel+0x258>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <HAL_ADC_ConfigChannel+0x1f4>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b11      	cmp	r3, #17
 8008e02:	d122      	bne.n	8008e4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a11      	ldr	r2, [pc, #68]	; (8008e68 <HAL_ADC_ConfigChannel+0x258>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d111      	bne.n	8008e4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008e26:	4b11      	ldr	r3, [pc, #68]	; (8008e6c <HAL_ADC_ConfigChannel+0x25c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a11      	ldr	r2, [pc, #68]	; (8008e70 <HAL_ADC_ConfigChannel+0x260>)
 8008e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e30:	0c9a      	lsrs	r2, r3, #18
 8008e32:	4613      	mov	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008e3c:	e002      	b.n	8008e44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1f9      	bne.n	8008e3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	40012300 	.word	0x40012300
 8008e64:	40012000 	.word	0x40012000
 8008e68:	10000012 	.word	0x10000012
 8008e6c:	200003f8 	.word	0x200003f8
 8008e70:	431bde83 	.word	0x431bde83

08008e74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008e7c:	4b79      	ldr	r3, [pc, #484]	; (8009064 <ADC_Init+0x1f0>)
 8008e7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	431a      	orrs	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6859      	ldr	r1, [r3, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	021a      	lsls	r2, r3, #8
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6859      	ldr	r1, [r3, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689a      	ldr	r2, [r3, #8]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6899      	ldr	r1, [r3, #8]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f06:	4a58      	ldr	r2, [pc, #352]	; (8009068 <ADC_Init+0x1f4>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d022      	beq.n	8008f52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689a      	ldr	r2, [r3, #8]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6899      	ldr	r1, [r3, #8]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6899      	ldr	r1, [r3, #8]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	609a      	str	r2, [r3, #8]
 8008f50:	e00f      	b.n	8008f72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008f70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0202 	bic.w	r2, r2, #2
 8008f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6899      	ldr	r1, [r3, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	7e1b      	ldrb	r3, [r3, #24]
 8008f8c:	005a      	lsls	r2, r3, #1
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01b      	beq.n	8008fd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008fbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6859      	ldr	r1, [r3, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	035a      	lsls	r2, r3, #13
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	605a      	str	r2, [r3, #4]
 8008fd6:	e007      	b.n	8008fe8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fe6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	3b01      	subs	r3, #1
 8009004:	051a      	lsls	r2, r3, #20
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	430a      	orrs	r2, r1
 800900c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689a      	ldr	r2, [r3, #8]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800901c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6899      	ldr	r1, [r3, #8]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800902a:	025a      	lsls	r2, r3, #9
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6899      	ldr	r1, [r3, #8]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	029a      	lsls	r2, r3, #10
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	609a      	str	r2, [r3, #8]
}
 8009058:	bf00      	nop
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	40012300 	.word	0x40012300
 8009068:	0f000001 	.word	0x0f000001

0800906c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800907c:	4b0c      	ldr	r3, [pc, #48]	; (80090b0 <__NVIC_SetPriorityGrouping+0x44>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009088:	4013      	ands	r3, r2
 800908a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800909c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800909e:	4a04      	ldr	r2, [pc, #16]	; (80090b0 <__NVIC_SetPriorityGrouping+0x44>)
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	60d3      	str	r3, [r2, #12]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	e000ed00 	.word	0xe000ed00

080090b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090b4:	b480      	push	{r7}
 80090b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <__NVIC_GetPriorityGrouping+0x18>)
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	0a1b      	lsrs	r3, r3, #8
 80090be:	f003 0307 	and.w	r3, r3, #7
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	e000ed00 	.word	0xe000ed00

080090d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	db0b      	blt.n	80090fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	f003 021f 	and.w	r2, r3, #31
 80090e8:	4907      	ldr	r1, [pc, #28]	; (8009108 <__NVIC_EnableIRQ+0x38>)
 80090ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ee:	095b      	lsrs	r3, r3, #5
 80090f0:	2001      	movs	r0, #1
 80090f2:	fa00 f202 	lsl.w	r2, r0, r2
 80090f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80090fa:	bf00      	nop
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	e000e100 	.word	0xe000e100

0800910c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	6039      	str	r1, [r7, #0]
 8009116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800911c:	2b00      	cmp	r3, #0
 800911e:	db0a      	blt.n	8009136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	b2da      	uxtb	r2, r3
 8009124:	490c      	ldr	r1, [pc, #48]	; (8009158 <__NVIC_SetPriority+0x4c>)
 8009126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800912a:	0112      	lsls	r2, r2, #4
 800912c:	b2d2      	uxtb	r2, r2
 800912e:	440b      	add	r3, r1
 8009130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009134:	e00a      	b.n	800914c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	b2da      	uxtb	r2, r3
 800913a:	4908      	ldr	r1, [pc, #32]	; (800915c <__NVIC_SetPriority+0x50>)
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	3b04      	subs	r3, #4
 8009144:	0112      	lsls	r2, r2, #4
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	440b      	add	r3, r1
 800914a:	761a      	strb	r2, [r3, #24]
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	e000e100 	.word	0xe000e100
 800915c:	e000ed00 	.word	0xe000ed00

08009160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009160:	b480      	push	{r7}
 8009162:	b089      	sub	sp, #36	; 0x24
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f1c3 0307 	rsb	r3, r3, #7
 800917a:	2b04      	cmp	r3, #4
 800917c:	bf28      	it	cs
 800917e:	2304      	movcs	r3, #4
 8009180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	3304      	adds	r3, #4
 8009186:	2b06      	cmp	r3, #6
 8009188:	d902      	bls.n	8009190 <NVIC_EncodePriority+0x30>
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	3b03      	subs	r3, #3
 800918e:	e000      	b.n	8009192 <NVIC_EncodePriority+0x32>
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009194:	f04f 32ff 	mov.w	r2, #4294967295
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	fa02 f303 	lsl.w	r3, r2, r3
 800919e:	43da      	mvns	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	401a      	ands	r2, r3
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091a8:	f04f 31ff 	mov.w	r1, #4294967295
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	fa01 f303 	lsl.w	r3, r1, r3
 80091b2:	43d9      	mvns	r1, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091b8:	4313      	orrs	r3, r2
         );
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3724      	adds	r7, #36	; 0x24
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
	...

080091c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091d8:	d301      	bcc.n	80091de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80091da:	2301      	movs	r3, #1
 80091dc:	e00f      	b.n	80091fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80091de:	4a0a      	ldr	r2, [pc, #40]	; (8009208 <SysTick_Config+0x40>)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80091e6:	210f      	movs	r1, #15
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	f7ff ff8e 	bl	800910c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <SysTick_Config+0x40>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091f6:	4b04      	ldr	r3, [pc, #16]	; (8009208 <SysTick_Config+0x40>)
 80091f8:	2207      	movs	r2, #7
 80091fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	e000e010 	.word	0xe000e010

0800920c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ff29 	bl	800906c <__NVIC_SetPriorityGrouping>
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009222:	b580      	push	{r7, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	4603      	mov	r3, r0
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009234:	f7ff ff3e 	bl	80090b4 <__NVIC_GetPriorityGrouping>
 8009238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	6978      	ldr	r0, [r7, #20]
 8009240:	f7ff ff8e 	bl	8009160 <NVIC_EncodePriority>
 8009244:	4602      	mov	r2, r0
 8009246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800924a:	4611      	mov	r1, r2
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff ff5d 	bl	800910c <__NVIC_SetPriority>
}
 8009252:	bf00      	nop
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	4603      	mov	r3, r0
 8009262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff ff31 	bl	80090d0 <__NVIC_EnableIRQ>
}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff ffa2 	bl	80091c8 <SysTick_Config>
 8009284:	4603      	mov	r3, r0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d004      	beq.n	80092ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2280      	movs	r2, #128	; 0x80
 80092a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e00c      	b.n	80092c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2205      	movs	r2, #5
 80092b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0201 	bic.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
	...

080092d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b089      	sub	sp, #36	; 0x24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80092de:	2300      	movs	r3, #0
 80092e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80092ea:	2300      	movs	r3, #0
 80092ec:	61fb      	str	r3, [r7, #28]
 80092ee:	e159      	b.n	80095a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80092f0:	2201      	movs	r2, #1
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	fa02 f303 	lsl.w	r3, r2, r3
 80092f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	4013      	ands	r3, r2
 8009302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	429a      	cmp	r2, r3
 800930a:	f040 8148 	bne.w	800959e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d00b      	beq.n	800932e <HAL_GPIO_Init+0x5a>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d007      	beq.n	800932e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009322:	2b11      	cmp	r3, #17
 8009324:	d003      	beq.n	800932e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	2b12      	cmp	r3, #18
 800932c:	d130      	bne.n	8009390 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	2203      	movs	r2, #3
 800933a:	fa02 f303 	lsl.w	r3, r2, r3
 800933e:	43db      	mvns	r3, r3
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	4013      	ands	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	fa02 f303 	lsl.w	r3, r2, r3
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	4313      	orrs	r3, r2
 8009356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009364:	2201      	movs	r2, #1
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	43db      	mvns	r3, r3
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	4013      	ands	r3, r2
 8009372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	091b      	lsrs	r3, r3, #4
 800937a:	f003 0201 	and.w	r2, r3, #1
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	4313      	orrs	r3, r2
 8009388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	2203      	movs	r2, #3
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	43db      	mvns	r3, r3
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	4013      	ands	r3, r2
 80093a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	fa02 f303 	lsl.w	r3, r2, r3
 80093b4:	69ba      	ldr	r2, [r7, #24]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d003      	beq.n	80093d0 <HAL_GPIO_Init+0xfc>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	2b12      	cmp	r3, #18
 80093ce:	d123      	bne.n	8009418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	08da      	lsrs	r2, r3, #3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3208      	adds	r2, #8
 80093d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	220f      	movs	r2, #15
 80093e8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ec:	43db      	mvns	r3, r3
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	4013      	ands	r3, r2
 80093f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	fa02 f303 	lsl.w	r3, r2, r3
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	4313      	orrs	r3, r2
 8009408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	08da      	lsrs	r2, r3, #3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3208      	adds	r2, #8
 8009412:	69b9      	ldr	r1, [r7, #24]
 8009414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	2203      	movs	r2, #3
 8009424:	fa02 f303 	lsl.w	r3, r2, r3
 8009428:	43db      	mvns	r3, r3
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	4013      	ands	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f003 0203 	and.w	r2, r3, #3
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	fa02 f303 	lsl.w	r3, r2, r3
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	4313      	orrs	r3, r2
 8009444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 80a2 	beq.w	800959e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	4b56      	ldr	r3, [pc, #344]	; (80095b8 <HAL_GPIO_Init+0x2e4>)
 8009460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009462:	4a55      	ldr	r2, [pc, #340]	; (80095b8 <HAL_GPIO_Init+0x2e4>)
 8009464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009468:	6453      	str	r3, [r2, #68]	; 0x44
 800946a:	4b53      	ldr	r3, [pc, #332]	; (80095b8 <HAL_GPIO_Init+0x2e4>)
 800946c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009476:	4a51      	ldr	r2, [pc, #324]	; (80095bc <HAL_GPIO_Init+0x2e8>)
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	089b      	lsrs	r3, r3, #2
 800947c:	3302      	adds	r3, #2
 800947e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	f003 0303 	and.w	r3, r3, #3
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	220f      	movs	r2, #15
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	43db      	mvns	r3, r3
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	4013      	ands	r3, r2
 8009498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a48      	ldr	r2, [pc, #288]	; (80095c0 <HAL_GPIO_Init+0x2ec>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d019      	beq.n	80094d6 <HAL_GPIO_Init+0x202>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a47      	ldr	r2, [pc, #284]	; (80095c4 <HAL_GPIO_Init+0x2f0>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d013      	beq.n	80094d2 <HAL_GPIO_Init+0x1fe>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a46      	ldr	r2, [pc, #280]	; (80095c8 <HAL_GPIO_Init+0x2f4>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00d      	beq.n	80094ce <HAL_GPIO_Init+0x1fa>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a45      	ldr	r2, [pc, #276]	; (80095cc <HAL_GPIO_Init+0x2f8>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d007      	beq.n	80094ca <HAL_GPIO_Init+0x1f6>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a44      	ldr	r2, [pc, #272]	; (80095d0 <HAL_GPIO_Init+0x2fc>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d101      	bne.n	80094c6 <HAL_GPIO_Init+0x1f2>
 80094c2:	2304      	movs	r3, #4
 80094c4:	e008      	b.n	80094d8 <HAL_GPIO_Init+0x204>
 80094c6:	2307      	movs	r3, #7
 80094c8:	e006      	b.n	80094d8 <HAL_GPIO_Init+0x204>
 80094ca:	2303      	movs	r3, #3
 80094cc:	e004      	b.n	80094d8 <HAL_GPIO_Init+0x204>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e002      	b.n	80094d8 <HAL_GPIO_Init+0x204>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <HAL_GPIO_Init+0x204>
 80094d6:	2300      	movs	r3, #0
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	f002 0203 	and.w	r2, r2, #3
 80094de:	0092      	lsls	r2, r2, #2
 80094e0:	4093      	lsls	r3, r2
 80094e2:	69ba      	ldr	r2, [r7, #24]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80094e8:	4934      	ldr	r1, [pc, #208]	; (80095bc <HAL_GPIO_Init+0x2e8>)
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	089b      	lsrs	r3, r3, #2
 80094ee:	3302      	adds	r3, #2
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80094f6:	4b37      	ldr	r3, [pc, #220]	; (80095d4 <HAL_GPIO_Init+0x300>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	43db      	mvns	r3, r3
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	4013      	ands	r3, r2
 8009504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	4313      	orrs	r3, r2
 8009518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800951a:	4a2e      	ldr	r2, [pc, #184]	; (80095d4 <HAL_GPIO_Init+0x300>)
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009520:	4b2c      	ldr	r3, [pc, #176]	; (80095d4 <HAL_GPIO_Init+0x300>)
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	43db      	mvns	r3, r3
 800952a:	69ba      	ldr	r2, [r7, #24]
 800952c:	4013      	ands	r3, r2
 800952e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	4313      	orrs	r3, r2
 8009542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009544:	4a23      	ldr	r2, [pc, #140]	; (80095d4 <HAL_GPIO_Init+0x300>)
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800954a:	4b22      	ldr	r3, [pc, #136]	; (80095d4 <HAL_GPIO_Init+0x300>)
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	43db      	mvns	r3, r3
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	4013      	ands	r3, r2
 8009558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d003      	beq.n	800956e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	4313      	orrs	r3, r2
 800956c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800956e:	4a19      	ldr	r2, [pc, #100]	; (80095d4 <HAL_GPIO_Init+0x300>)
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009574:	4b17      	ldr	r3, [pc, #92]	; (80095d4 <HAL_GPIO_Init+0x300>)
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	43db      	mvns	r3, r3
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	4013      	ands	r3, r2
 8009582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009590:	69ba      	ldr	r2, [r7, #24]
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	4313      	orrs	r3, r2
 8009596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009598:	4a0e      	ldr	r2, [pc, #56]	; (80095d4 <HAL_GPIO_Init+0x300>)
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	3301      	adds	r3, #1
 80095a2:	61fb      	str	r3, [r7, #28]
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	2b0f      	cmp	r3, #15
 80095a8:	f67f aea2 	bls.w	80092f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80095ac:	bf00      	nop
 80095ae:	3724      	adds	r7, #36	; 0x24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	40023800 	.word	0x40023800
 80095bc:	40013800 	.word	0x40013800
 80095c0:	40020000 	.word	0x40020000
 80095c4:	40020400 	.word	0x40020400
 80095c8:	40020800 	.word	0x40020800
 80095cc:	40020c00 	.word	0x40020c00
 80095d0:	40021000 	.word	0x40021000
 80095d4:	40013c00 	.word	0x40013c00

080095d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	807b      	strh	r3, [r7, #2]
 80095e4:	4613      	mov	r3, r2
 80095e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80095e8:	787b      	ldrb	r3, [r7, #1]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095ee:	887a      	ldrh	r2, [r7, #2]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80095f4:	e003      	b.n	80095fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80095f6:	887b      	ldrh	r3, [r7, #2]
 80095f8:	041a      	lsls	r2, r3, #16
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	619a      	str	r2, [r3, #24]
}
 80095fe:	bf00      	nop
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	695a      	ldr	r2, [r3, #20]
 800961a:	887b      	ldrh	r3, [r7, #2]
 800961c:	401a      	ands	r2, r3
 800961e:	887b      	ldrh	r3, [r7, #2]
 8009620:	429a      	cmp	r2, r3
 8009622:	d104      	bne.n	800962e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009624:	887b      	ldrh	r3, [r7, #2]
 8009626:	041a      	lsls	r2, r3, #16
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800962c:	e002      	b.n	8009634 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800962e:	887a      	ldrh	r2, [r7, #2]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	619a      	str	r2, [r3, #24]
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e25b      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d075      	beq.n	800974a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800965e:	4ba3      	ldr	r3, [pc, #652]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f003 030c 	and.w	r3, r3, #12
 8009666:	2b04      	cmp	r3, #4
 8009668:	d00c      	beq.n	8009684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800966a:	4ba0      	ldr	r3, [pc, #640]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009672:	2b08      	cmp	r3, #8
 8009674:	d112      	bne.n	800969c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009676:	4b9d      	ldr	r3, [pc, #628]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800967e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009682:	d10b      	bne.n	800969c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009684:	4b99      	ldr	r3, [pc, #612]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d05b      	beq.n	8009748 <HAL_RCC_OscConfig+0x108>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d157      	bne.n	8009748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e236      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096a4:	d106      	bne.n	80096b4 <HAL_RCC_OscConfig+0x74>
 80096a6:	4b91      	ldr	r3, [pc, #580]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a90      	ldr	r2, [pc, #576]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	e01d      	b.n	80096f0 <HAL_RCC_OscConfig+0xb0>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096bc:	d10c      	bne.n	80096d8 <HAL_RCC_OscConfig+0x98>
 80096be:	4b8b      	ldr	r3, [pc, #556]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a8a      	ldr	r2, [pc, #552]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	4b88      	ldr	r3, [pc, #544]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a87      	ldr	r2, [pc, #540]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	e00b      	b.n	80096f0 <HAL_RCC_OscConfig+0xb0>
 80096d8:	4b84      	ldr	r3, [pc, #528]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a83      	ldr	r2, [pc, #524]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	4b81      	ldr	r3, [pc, #516]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a80      	ldr	r2, [pc, #512]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80096ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d013      	beq.n	8009720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096f8:	f7ff f964 	bl	80089c4 <HAL_GetTick>
 80096fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096fe:	e008      	b.n	8009712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009700:	f7ff f960 	bl	80089c4 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	2b64      	cmp	r3, #100	; 0x64
 800970c:	d901      	bls.n	8009712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e1fb      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009712:	4b76      	ldr	r3, [pc, #472]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0f0      	beq.n	8009700 <HAL_RCC_OscConfig+0xc0>
 800971e:	e014      	b.n	800974a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009720:	f7ff f950 	bl	80089c4 <HAL_GetTick>
 8009724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009726:	e008      	b.n	800973a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009728:	f7ff f94c 	bl	80089c4 <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	2b64      	cmp	r3, #100	; 0x64
 8009734:	d901      	bls.n	800973a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e1e7      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800973a:	4b6c      	ldr	r3, [pc, #432]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1f0      	bne.n	8009728 <HAL_RCC_OscConfig+0xe8>
 8009746:	e000      	b.n	800974a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0302 	and.w	r3, r3, #2
 8009752:	2b00      	cmp	r3, #0
 8009754:	d063      	beq.n	800981e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009756:	4b65      	ldr	r3, [pc, #404]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 030c 	and.w	r3, r3, #12
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00b      	beq.n	800977a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009762:	4b62      	ldr	r3, [pc, #392]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800976a:	2b08      	cmp	r3, #8
 800976c:	d11c      	bne.n	80097a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800976e:	4b5f      	ldr	r3, [pc, #380]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d116      	bne.n	80097a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800977a:	4b5c      	ldr	r3, [pc, #368]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0302 	and.w	r3, r3, #2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d005      	beq.n	8009792 <HAL_RCC_OscConfig+0x152>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d001      	beq.n	8009792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e1bb      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009792:	4b56      	ldr	r3, [pc, #344]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	4952      	ldr	r1, [pc, #328]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097a6:	e03a      	b.n	800981e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d020      	beq.n	80097f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097b0:	4b4f      	ldr	r3, [pc, #316]	; (80098f0 <HAL_RCC_OscConfig+0x2b0>)
 80097b2:	2201      	movs	r2, #1
 80097b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097b6:	f7ff f905 	bl	80089c4 <HAL_GetTick>
 80097ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097bc:	e008      	b.n	80097d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097be:	f7ff f901 	bl	80089c4 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d901      	bls.n	80097d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e19c      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097d0:	4b46      	ldr	r3, [pc, #280]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0f0      	beq.n	80097be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097dc:	4b43      	ldr	r3, [pc, #268]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	4940      	ldr	r1, [pc, #256]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	600b      	str	r3, [r1, #0]
 80097f0:	e015      	b.n	800981e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097f2:	4b3f      	ldr	r3, [pc, #252]	; (80098f0 <HAL_RCC_OscConfig+0x2b0>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f8:	f7ff f8e4 	bl	80089c4 <HAL_GetTick>
 80097fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097fe:	e008      	b.n	8009812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009800:	f7ff f8e0 	bl	80089c4 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b02      	cmp	r3, #2
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e17b      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009812:	4b36      	ldr	r3, [pc, #216]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1f0      	bne.n	8009800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0308 	and.w	r3, r3, #8
 8009826:	2b00      	cmp	r3, #0
 8009828:	d030      	beq.n	800988c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d016      	beq.n	8009860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009832:	4b30      	ldr	r3, [pc, #192]	; (80098f4 <HAL_RCC_OscConfig+0x2b4>)
 8009834:	2201      	movs	r2, #1
 8009836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009838:	f7ff f8c4 	bl	80089c4 <HAL_GetTick>
 800983c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800983e:	e008      	b.n	8009852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009840:	f7ff f8c0 	bl	80089c4 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b02      	cmp	r3, #2
 800984c:	d901      	bls.n	8009852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e15b      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009852:	4b26      	ldr	r3, [pc, #152]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0f0      	beq.n	8009840 <HAL_RCC_OscConfig+0x200>
 800985e:	e015      	b.n	800988c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009860:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <HAL_RCC_OscConfig+0x2b4>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009866:	f7ff f8ad 	bl	80089c4 <HAL_GetTick>
 800986a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800986c:	e008      	b.n	8009880 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800986e:	f7ff f8a9 	bl	80089c4 <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	2b02      	cmp	r3, #2
 800987a:	d901      	bls.n	8009880 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e144      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009880:	4b1a      	ldr	r3, [pc, #104]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 8009882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1f0      	bne.n	800986e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0304 	and.w	r3, r3, #4
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 80a0 	beq.w	80099da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800989e:	4b13      	ldr	r3, [pc, #76]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10f      	bne.n	80098ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098aa:	2300      	movs	r3, #0
 80098ac:	60bb      	str	r3, [r7, #8]
 80098ae:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	4a0e      	ldr	r2, [pc, #56]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80098b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098b8:	6413      	str	r3, [r2, #64]	; 0x40
 80098ba:	4b0c      	ldr	r3, [pc, #48]	; (80098ec <HAL_RCC_OscConfig+0x2ac>)
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098c2:	60bb      	str	r3, [r7, #8]
 80098c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098c6:	2301      	movs	r3, #1
 80098c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098ca:	4b0b      	ldr	r3, [pc, #44]	; (80098f8 <HAL_RCC_OscConfig+0x2b8>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d121      	bne.n	800991a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098d6:	4b08      	ldr	r3, [pc, #32]	; (80098f8 <HAL_RCC_OscConfig+0x2b8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a07      	ldr	r2, [pc, #28]	; (80098f8 <HAL_RCC_OscConfig+0x2b8>)
 80098dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098e2:	f7ff f86f 	bl	80089c4 <HAL_GetTick>
 80098e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098e8:	e011      	b.n	800990e <HAL_RCC_OscConfig+0x2ce>
 80098ea:	bf00      	nop
 80098ec:	40023800 	.word	0x40023800
 80098f0:	42470000 	.word	0x42470000
 80098f4:	42470e80 	.word	0x42470e80
 80098f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098fc:	f7ff f862 	bl	80089c4 <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	2b02      	cmp	r3, #2
 8009908:	d901      	bls.n	800990e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e0fd      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800990e:	4b81      	ldr	r3, [pc, #516]	; (8009b14 <HAL_RCC_OscConfig+0x4d4>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0f0      	beq.n	80098fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d106      	bne.n	8009930 <HAL_RCC_OscConfig+0x2f0>
 8009922:	4b7d      	ldr	r3, [pc, #500]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009926:	4a7c      	ldr	r2, [pc, #496]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009928:	f043 0301 	orr.w	r3, r3, #1
 800992c:	6713      	str	r3, [r2, #112]	; 0x70
 800992e:	e01c      	b.n	800996a <HAL_RCC_OscConfig+0x32a>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	2b05      	cmp	r3, #5
 8009936:	d10c      	bne.n	8009952 <HAL_RCC_OscConfig+0x312>
 8009938:	4b77      	ldr	r3, [pc, #476]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 800993a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993c:	4a76      	ldr	r2, [pc, #472]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 800993e:	f043 0304 	orr.w	r3, r3, #4
 8009942:	6713      	str	r3, [r2, #112]	; 0x70
 8009944:	4b74      	ldr	r3, [pc, #464]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009948:	4a73      	ldr	r2, [pc, #460]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 800994a:	f043 0301 	orr.w	r3, r3, #1
 800994e:	6713      	str	r3, [r2, #112]	; 0x70
 8009950:	e00b      	b.n	800996a <HAL_RCC_OscConfig+0x32a>
 8009952:	4b71      	ldr	r3, [pc, #452]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009956:	4a70      	ldr	r2, [pc, #448]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	6713      	str	r3, [r2, #112]	; 0x70
 800995e:	4b6e      	ldr	r3, [pc, #440]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009962:	4a6d      	ldr	r2, [pc, #436]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009964:	f023 0304 	bic.w	r3, r3, #4
 8009968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d015      	beq.n	800999e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009972:	f7ff f827 	bl	80089c4 <HAL_GetTick>
 8009976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009978:	e00a      	b.n	8009990 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800997a:	f7ff f823 	bl	80089c4 <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	f241 3288 	movw	r2, #5000	; 0x1388
 8009988:	4293      	cmp	r3, r2
 800998a:	d901      	bls.n	8009990 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e0bc      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009990:	4b61      	ldr	r3, [pc, #388]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0ee      	beq.n	800997a <HAL_RCC_OscConfig+0x33a>
 800999c:	e014      	b.n	80099c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800999e:	f7ff f811 	bl	80089c4 <HAL_GetTick>
 80099a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099a4:	e00a      	b.n	80099bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099a6:	f7ff f80d 	bl	80089c4 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d901      	bls.n	80099bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e0a6      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099bc:	4b56      	ldr	r3, [pc, #344]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 80099be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1ee      	bne.n	80099a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d105      	bne.n	80099da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099ce:	4b52      	ldr	r3, [pc, #328]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	4a51      	ldr	r2, [pc, #324]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 80099d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 8092 	beq.w	8009b08 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099e4:	4b4c      	ldr	r3, [pc, #304]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f003 030c 	and.w	r3, r3, #12
 80099ec:	2b08      	cmp	r3, #8
 80099ee:	d05c      	beq.n	8009aaa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d141      	bne.n	8009a7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099f8:	4b48      	ldr	r3, [pc, #288]	; (8009b1c <HAL_RCC_OscConfig+0x4dc>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099fe:	f7fe ffe1 	bl	80089c4 <HAL_GetTick>
 8009a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a04:	e008      	b.n	8009a18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a06:	f7fe ffdd 	bl	80089c4 <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d901      	bls.n	8009a18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e078      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a18:	4b3f      	ldr	r3, [pc, #252]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1f0      	bne.n	8009a06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	69da      	ldr	r2, [r3, #28]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	019b      	lsls	r3, r3, #6
 8009a34:	431a      	orrs	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	085b      	lsrs	r3, r3, #1
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	041b      	lsls	r3, r3, #16
 8009a40:	431a      	orrs	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	061b      	lsls	r3, r3, #24
 8009a48:	4933      	ldr	r1, [pc, #204]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a4e:	4b33      	ldr	r3, [pc, #204]	; (8009b1c <HAL_RCC_OscConfig+0x4dc>)
 8009a50:	2201      	movs	r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a54:	f7fe ffb6 	bl	80089c4 <HAL_GetTick>
 8009a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a5a:	e008      	b.n	8009a6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a5c:	f7fe ffb2 	bl	80089c4 <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d901      	bls.n	8009a6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e04d      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a6e:	4b2a      	ldr	r3, [pc, #168]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0f0      	beq.n	8009a5c <HAL_RCC_OscConfig+0x41c>
 8009a7a:	e045      	b.n	8009b08 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a7c:	4b27      	ldr	r3, [pc, #156]	; (8009b1c <HAL_RCC_OscConfig+0x4dc>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a82:	f7fe ff9f 	bl	80089c4 <HAL_GetTick>
 8009a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a88:	e008      	b.n	8009a9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a8a:	f7fe ff9b 	bl	80089c4 <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d901      	bls.n	8009a9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e036      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a9c:	4b1e      	ldr	r3, [pc, #120]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1f0      	bne.n	8009a8a <HAL_RCC_OscConfig+0x44a>
 8009aa8:	e02e      	b.n	8009b08 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d101      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e029      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ab6:	4b18      	ldr	r3, [pc, #96]	; (8009b18 <HAL_RCC_OscConfig+0x4d8>)
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d11c      	bne.n	8009b04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d115      	bne.n	8009b04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009ade:	4013      	ands	r3, r2
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d10d      	bne.n	8009b04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d106      	bne.n	8009b04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d001      	beq.n	8009b08 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e000      	b.n	8009b0a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	40007000 	.word	0x40007000
 8009b18:	40023800 	.word	0x40023800
 8009b1c:	42470060 	.word	0x42470060

08009b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e0cc      	b.n	8009cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b34:	4b68      	ldr	r3, [pc, #416]	; (8009cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 030f 	and.w	r3, r3, #15
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d90c      	bls.n	8009b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b42:	4b65      	ldr	r3, [pc, #404]	; (8009cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b4a:	4b63      	ldr	r3, [pc, #396]	; (8009cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 030f 	and.w	r3, r3, #15
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d001      	beq.n	8009b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e0b8      	b.n	8009cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d020      	beq.n	8009baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b74:	4b59      	ldr	r3, [pc, #356]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	4a58      	ldr	r2, [pc, #352]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009b7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0308 	and.w	r3, r3, #8
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d005      	beq.n	8009b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b8c:	4b53      	ldr	r3, [pc, #332]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	4a52      	ldr	r2, [pc, #328]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009b92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b98:	4b50      	ldr	r3, [pc, #320]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	494d      	ldr	r1, [pc, #308]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d044      	beq.n	8009c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d107      	bne.n	8009bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bbe:	4b47      	ldr	r3, [pc, #284]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d119      	bne.n	8009bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e07f      	b.n	8009cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d003      	beq.n	8009bde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d107      	bne.n	8009bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bde:	4b3f      	ldr	r3, [pc, #252]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d109      	bne.n	8009bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e06f      	b.n	8009cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bee:	4b3b      	ldr	r3, [pc, #236]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e067      	b.n	8009cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009bfe:	4b37      	ldr	r3, [pc, #220]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f023 0203 	bic.w	r2, r3, #3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	4934      	ldr	r1, [pc, #208]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c10:	f7fe fed8 	bl	80089c4 <HAL_GetTick>
 8009c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c16:	e00a      	b.n	8009c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c18:	f7fe fed4 	bl	80089c4 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d901      	bls.n	8009c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e04f      	b.n	8009cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c2e:	4b2b      	ldr	r3, [pc, #172]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f003 020c 	and.w	r2, r3, #12
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d1eb      	bne.n	8009c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c40:	4b25      	ldr	r3, [pc, #148]	; (8009cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 030f 	and.w	r3, r3, #15
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d20c      	bcs.n	8009c68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c4e:	4b22      	ldr	r3, [pc, #136]	; (8009cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	b2d2      	uxtb	r2, r2
 8009c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c56:	4b20      	ldr	r3, [pc, #128]	; (8009cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 030f 	and.w	r3, r3, #15
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d001      	beq.n	8009c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e032      	b.n	8009cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d008      	beq.n	8009c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c74:	4b19      	ldr	r3, [pc, #100]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	4916      	ldr	r1, [pc, #88]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 0308 	and.w	r3, r3, #8
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d009      	beq.n	8009ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c92:	4b12      	ldr	r3, [pc, #72]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	490e      	ldr	r1, [pc, #56]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009ca6:	f000 f821 	bl	8009cec <HAL_RCC_GetSysClockFreq>
 8009caa:	4601      	mov	r1, r0
 8009cac:	4b0b      	ldr	r3, [pc, #44]	; (8009cdc <HAL_RCC_ClockConfig+0x1bc>)
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	091b      	lsrs	r3, r3, #4
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	4a0a      	ldr	r2, [pc, #40]	; (8009ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8009cb8:	5cd3      	ldrb	r3, [r2, r3]
 8009cba:	fa21 f303 	lsr.w	r3, r1, r3
 8009cbe:	4a09      	ldr	r2, [pc, #36]	; (8009ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8009cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009cc2:	4b09      	ldr	r3, [pc, #36]	; (8009ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fe38 	bl	800893c <HAL_InitTick>

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	40023c00 	.word	0x40023c00
 8009cdc:	40023800 	.word	0x40023800
 8009ce0:	0801bcb8 	.word	0x0801bcb8
 8009ce4:	200003f8 	.word	0x200003f8
 8009ce8:	20000000 	.word	0x20000000

08009cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	607b      	str	r3, [r7, #4]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60fb      	str	r3, [r7, #12]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d02:	4b63      	ldr	r3, [pc, #396]	; (8009e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f003 030c 	and.w	r3, r3, #12
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	d007      	beq.n	8009d1e <HAL_RCC_GetSysClockFreq+0x32>
 8009d0e:	2b08      	cmp	r3, #8
 8009d10:	d008      	beq.n	8009d24 <HAL_RCC_GetSysClockFreq+0x38>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f040 80b4 	bne.w	8009e80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d18:	4b5e      	ldr	r3, [pc, #376]	; (8009e94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009d1a:	60bb      	str	r3, [r7, #8]
       break;
 8009d1c:	e0b3      	b.n	8009e86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d1e:	4b5e      	ldr	r3, [pc, #376]	; (8009e98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009d20:	60bb      	str	r3, [r7, #8]
      break;
 8009d22:	e0b0      	b.n	8009e86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d24:	4b5a      	ldr	r3, [pc, #360]	; (8009e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d2e:	4b58      	ldr	r3, [pc, #352]	; (8009e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d04a      	beq.n	8009dd0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d3a:	4b55      	ldr	r3, [pc, #340]	; (8009e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	099b      	lsrs	r3, r3, #6
 8009d40:	f04f 0400 	mov.w	r4, #0
 8009d44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	ea03 0501 	and.w	r5, r3, r1
 8009d50:	ea04 0602 	and.w	r6, r4, r2
 8009d54:	4629      	mov	r1, r5
 8009d56:	4632      	mov	r2, r6
 8009d58:	f04f 0300 	mov.w	r3, #0
 8009d5c:	f04f 0400 	mov.w	r4, #0
 8009d60:	0154      	lsls	r4, r2, #5
 8009d62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009d66:	014b      	lsls	r3, r1, #5
 8009d68:	4619      	mov	r1, r3
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	1b49      	subs	r1, r1, r5
 8009d6e:	eb62 0206 	sbc.w	r2, r2, r6
 8009d72:	f04f 0300 	mov.w	r3, #0
 8009d76:	f04f 0400 	mov.w	r4, #0
 8009d7a:	0194      	lsls	r4, r2, #6
 8009d7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009d80:	018b      	lsls	r3, r1, #6
 8009d82:	1a5b      	subs	r3, r3, r1
 8009d84:	eb64 0402 	sbc.w	r4, r4, r2
 8009d88:	f04f 0100 	mov.w	r1, #0
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	00e2      	lsls	r2, r4, #3
 8009d92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009d96:	00d9      	lsls	r1, r3, #3
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4614      	mov	r4, r2
 8009d9c:	195b      	adds	r3, r3, r5
 8009d9e:	eb44 0406 	adc.w	r4, r4, r6
 8009da2:	f04f 0100 	mov.w	r1, #0
 8009da6:	f04f 0200 	mov.w	r2, #0
 8009daa:	0262      	lsls	r2, r4, #9
 8009dac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009db0:	0259      	lsls	r1, r3, #9
 8009db2:	460b      	mov	r3, r1
 8009db4:	4614      	mov	r4, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	4621      	mov	r1, r4
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f04f 0400 	mov.w	r4, #0
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	f7fd fc92 	bl	80076ec <__aeabi_uldivmod>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	460c      	mov	r4, r1
 8009dcc:	60fb      	str	r3, [r7, #12]
 8009dce:	e049      	b.n	8009e64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009dd0:	4b2f      	ldr	r3, [pc, #188]	; (8009e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	099b      	lsrs	r3, r3, #6
 8009dd6:	f04f 0400 	mov.w	r4, #0
 8009dda:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009dde:	f04f 0200 	mov.w	r2, #0
 8009de2:	ea03 0501 	and.w	r5, r3, r1
 8009de6:	ea04 0602 	and.w	r6, r4, r2
 8009dea:	4629      	mov	r1, r5
 8009dec:	4632      	mov	r2, r6
 8009dee:	f04f 0300 	mov.w	r3, #0
 8009df2:	f04f 0400 	mov.w	r4, #0
 8009df6:	0154      	lsls	r4, r2, #5
 8009df8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009dfc:	014b      	lsls	r3, r1, #5
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4622      	mov	r2, r4
 8009e02:	1b49      	subs	r1, r1, r5
 8009e04:	eb62 0206 	sbc.w	r2, r2, r6
 8009e08:	f04f 0300 	mov.w	r3, #0
 8009e0c:	f04f 0400 	mov.w	r4, #0
 8009e10:	0194      	lsls	r4, r2, #6
 8009e12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009e16:	018b      	lsls	r3, r1, #6
 8009e18:	1a5b      	subs	r3, r3, r1
 8009e1a:	eb64 0402 	sbc.w	r4, r4, r2
 8009e1e:	f04f 0100 	mov.w	r1, #0
 8009e22:	f04f 0200 	mov.w	r2, #0
 8009e26:	00e2      	lsls	r2, r4, #3
 8009e28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009e2c:	00d9      	lsls	r1, r3, #3
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4614      	mov	r4, r2
 8009e32:	195b      	adds	r3, r3, r5
 8009e34:	eb44 0406 	adc.w	r4, r4, r6
 8009e38:	f04f 0100 	mov.w	r1, #0
 8009e3c:	f04f 0200 	mov.w	r2, #0
 8009e40:	02a2      	lsls	r2, r4, #10
 8009e42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009e46:	0299      	lsls	r1, r3, #10
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4614      	mov	r4, r2
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	4621      	mov	r1, r4
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f04f 0400 	mov.w	r4, #0
 8009e56:	461a      	mov	r2, r3
 8009e58:	4623      	mov	r3, r4
 8009e5a:	f7fd fc47 	bl	80076ec <__aeabi_uldivmod>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	460c      	mov	r4, r1
 8009e62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e64:	4b0a      	ldr	r3, [pc, #40]	; (8009e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	0c1b      	lsrs	r3, r3, #16
 8009e6a:	f003 0303 	and.w	r3, r3, #3
 8009e6e:	3301      	adds	r3, #1
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e7c:	60bb      	str	r3, [r7, #8]
      break;
 8009e7e:	e002      	b.n	8009e86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e80:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009e82:	60bb      	str	r3, [r7, #8]
      break;
 8009e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e86:	68bb      	ldr	r3, [r7, #8]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e90:	40023800 	.word	0x40023800
 8009e94:	00f42400 	.word	0x00f42400
 8009e98:	007a1200 	.word	0x007a1200

08009e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ea0:	4b03      	ldr	r3, [pc, #12]	; (8009eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	200003f8 	.word	0x200003f8

08009eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009eb8:	f7ff fff0 	bl	8009e9c <HAL_RCC_GetHCLKFreq>
 8009ebc:	4601      	mov	r1, r0
 8009ebe:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	0a9b      	lsrs	r3, r3, #10
 8009ec4:	f003 0307 	and.w	r3, r3, #7
 8009ec8:	4a03      	ldr	r2, [pc, #12]	; (8009ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009eca:	5cd3      	ldrb	r3, [r2, r3]
 8009ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	40023800 	.word	0x40023800
 8009ed8:	0801bcc8 	.word	0x0801bcc8

08009edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009ee0:	f7ff ffdc 	bl	8009e9c <HAL_RCC_GetHCLKFreq>
 8009ee4:	4601      	mov	r1, r0
 8009ee6:	4b05      	ldr	r3, [pc, #20]	; (8009efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	0b5b      	lsrs	r3, r3, #13
 8009eec:	f003 0307 	and.w	r3, r3, #7
 8009ef0:	4a03      	ldr	r2, [pc, #12]	; (8009f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ef2:	5cd3      	ldrb	r3, [r2, r3]
 8009ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	40023800 	.word	0x40023800
 8009f00:	0801bcc8 	.word	0x0801bcc8

08009f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e03f      	b.n	8009f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f004 fa28 	bl	800e380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2224      	movs	r2, #36	; 0x24
 8009f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68da      	ldr	r2, [r3, #12]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fb97 	bl	800a67c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	691a      	ldr	r2, [r3, #16]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	695a      	ldr	r2, [r3, #20]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2220      	movs	r2, #32
 8009f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b088      	sub	sp, #32
 8009fa2:	af02      	add	r7, sp, #8
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	603b      	str	r3, [r7, #0]
 8009faa:	4613      	mov	r3, r2
 8009fac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b20      	cmp	r3, #32
 8009fbc:	f040 8083 	bne.w	800a0c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d002      	beq.n	8009fcc <HAL_UART_Transmit+0x2e>
 8009fc6:	88fb      	ldrh	r3, [r7, #6]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e07b      	b.n	800a0c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_UART_Transmit+0x40>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e074      	b.n	800a0c8 <HAL_UART_Transmit+0x12a>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2221      	movs	r2, #33	; 0x21
 8009ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009ff4:	f7fe fce6 	bl	80089c4 <HAL_GetTick>
 8009ff8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	88fa      	ldrh	r2, [r7, #6]
 8009ffe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	88fa      	ldrh	r2, [r7, #6]
 800a004:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a00e:	e042      	b.n	800a096 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a014:	b29b      	uxth	r3, r3
 800a016:	3b01      	subs	r3, #1
 800a018:	b29a      	uxth	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a026:	d122      	bne.n	800a06e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2200      	movs	r2, #0
 800a030:	2180      	movs	r1, #128	; 0x80
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 f9b6 	bl	800a3a4 <UART_WaitOnFlagUntilTimeout>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e042      	b.n	800a0c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a054:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d103      	bne.n	800a066 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	3302      	adds	r3, #2
 800a062:	60bb      	str	r3, [r7, #8]
 800a064:	e017      	b.n	800a096 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	3301      	adds	r3, #1
 800a06a:	60bb      	str	r3, [r7, #8]
 800a06c:	e013      	b.n	800a096 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2200      	movs	r2, #0
 800a076:	2180      	movs	r1, #128	; 0x80
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f993 	bl	800a3a4 <UART_WaitOnFlagUntilTimeout>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e01f      	b.n	800a0c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	60ba      	str	r2, [r7, #8]
 800a08e:	781a      	ldrb	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1b7      	bne.n	800a010 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2140      	movs	r1, #64	; 0x40
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 f97a 	bl	800a3a4 <UART_WaitOnFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e006      	b.n	800a0c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e000      	b.n	800a0c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a0c6:	2302      	movs	r3, #2
  }
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b20      	cmp	r3, #32
 800a0e8:	d140      	bne.n	800a16c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_UART_Receive_IT+0x26>
 800a0f0:	88fb      	ldrh	r3, [r7, #6]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e039      	b.n	800a16e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_UART_Receive_IT+0x38>
 800a104:	2302      	movs	r3, #2
 800a106:	e032      	b.n	800a16e <HAL_UART_Receive_IT+0x9e>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	88fa      	ldrh	r2, [r7, #6]
 800a11a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	88fa      	ldrh	r2, [r7, #6]
 800a120:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2222      	movs	r2, #34	; 0x22
 800a12c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68da      	ldr	r2, [r3, #12]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a146:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695a      	ldr	r2, [r3, #20]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 0201 	orr.w	r2, r2, #1
 800a156:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0220 	orr.w	r2, r2, #32
 800a166:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	e000      	b.n	800a16e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a16c:	2302      	movs	r3, #2
  }
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
	...

0800a17c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a19c:	2300      	movs	r3, #0
 800a19e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10d      	bne.n	800a1ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	f003 0320 	and.w	r3, r3, #32
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d008      	beq.n	800a1ce <HAL_UART_IRQHandler+0x52>
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f9d6 	bl	800a578 <UART_Receive_IT>
      return;
 800a1cc:	e0d1      	b.n	800a372 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 80b0 	beq.w	800a336 <HAL_UART_IRQHandler+0x1ba>
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d105      	bne.n	800a1ec <HAL_UART_IRQHandler+0x70>
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 80a5 	beq.w	800a336 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <HAL_UART_IRQHandler+0x90>
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d005      	beq.n	800a20c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a204:	f043 0201 	orr.w	r2, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <HAL_UART_IRQHandler+0xb0>
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d005      	beq.n	800a22c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a224:	f043 0202 	orr.w	r2, r3, #2
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f003 0302 	and.w	r3, r3, #2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00a      	beq.n	800a24c <HAL_UART_IRQHandler+0xd0>
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d005      	beq.n	800a24c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a244:	f043 0204 	orr.w	r2, r3, #4
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	f003 0308 	and.w	r3, r3, #8
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00f      	beq.n	800a276 <HAL_UART_IRQHandler+0xfa>
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	f003 0320 	and.w	r3, r3, #32
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d104      	bne.n	800a26a <HAL_UART_IRQHandler+0xee>
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26e:	f043 0208 	orr.w	r2, r3, #8
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d078      	beq.n	800a370 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b00      	cmp	r3, #0
 800a286:	d007      	beq.n	800a298 <HAL_UART_IRQHandler+0x11c>
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f970 	bl	800a578 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a2:	2b40      	cmp	r3, #64	; 0x40
 800a2a4:	bf0c      	ite	eq
 800a2a6:	2301      	moveq	r3, #1
 800a2a8:	2300      	movne	r3, #0
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b2:	f003 0308 	and.w	r3, r3, #8
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d102      	bne.n	800a2c0 <HAL_UART_IRQHandler+0x144>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d031      	beq.n	800a324 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f8b9 	bl	800a438 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d0:	2b40      	cmp	r3, #64	; 0x40
 800a2d2:	d123      	bne.n	800a31c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	695a      	ldr	r2, [r3, #20]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d013      	beq.n	800a314 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f0:	4a21      	ldr	r2, [pc, #132]	; (800a378 <HAL_UART_IRQHandler+0x1fc>)
 800a2f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe ffc8 	bl	800928e <HAL_DMA_Abort_IT>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d016      	beq.n	800a332 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a30e:	4610      	mov	r0, r2
 800a310:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a312:	e00e      	b.n	800a332 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f83b 	bl	800a390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a31a:	e00a      	b.n	800a332 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f837 	bl	800a390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a322:	e006      	b.n	800a332 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f833 	bl	800a390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a330:	e01e      	b.n	800a370 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a332:	bf00      	nop
    return;
 800a334:	e01c      	b.n	800a370 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d008      	beq.n	800a352 <HAL_UART_IRQHandler+0x1d6>
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a346:	2b00      	cmp	r3, #0
 800a348:	d003      	beq.n	800a352 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f8a6 	bl	800a49c <UART_Transmit_IT>
    return;
 800a350:	e00f      	b.n	800a372 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00a      	beq.n	800a372 <HAL_UART_IRQHandler+0x1f6>
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	d005      	beq.n	800a372 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f8ee 	bl	800a548 <UART_EndTransmit_IT>
    return;
 800a36c:	bf00      	nop
 800a36e:	e000      	b.n	800a372 <HAL_UART_IRQHandler+0x1f6>
    return;
 800a370:	bf00      	nop
  }
}
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	0800a475 	.word	0x0800a475

0800a37c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	603b      	str	r3, [r7, #0]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3b4:	e02c      	b.n	800a410 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3bc:	d028      	beq.n	800a410 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d007      	beq.n	800a3d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a3c4:	f7fe fafe 	bl	80089c4 <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d21d      	bcs.n	800a410 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68da      	ldr	r2, [r3, #12]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	695a      	ldr	r2, [r3, #20]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0201 	bic.w	r2, r2, #1
 800a3f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e00f      	b.n	800a430 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	4013      	ands	r3, r2
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	bf0c      	ite	eq
 800a420:	2301      	moveq	r3, #1
 800a422:	2300      	movne	r3, #0
 800a424:	b2db      	uxtb	r3, r3
 800a426:	461a      	mov	r2, r3
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d0c3      	beq.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a44e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	695a      	ldr	r2, [r3, #20]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f022 0201 	bic.w	r2, r2, #1
 800a45e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2220      	movs	r2, #32
 800a464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff ff7e 	bl	800a390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a494:	bf00      	nop
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b21      	cmp	r3, #33	; 0x21
 800a4ae:	d144      	bne.n	800a53a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b8:	d11a      	bne.n	800a4f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d105      	bne.n	800a4e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a1b      	ldr	r3, [r3, #32]
 800a4dc:	1c9a      	adds	r2, r3, #2
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	621a      	str	r2, [r3, #32]
 800a4e2:	e00e      	b.n	800a502 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	621a      	str	r2, [r3, #32]
 800a4ee:	e008      	b.n	800a502 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a1b      	ldr	r3, [r3, #32]
 800a4f4:	1c59      	adds	r1, r3, #1
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	6211      	str	r1, [r2, #32]
 800a4fa:	781a      	ldrb	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a506:	b29b      	uxth	r3, r3
 800a508:	3b01      	subs	r3, #1
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	4619      	mov	r1, r3
 800a510:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10f      	bne.n	800a536 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a524:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68da      	ldr	r2, [r3, #12]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a534:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	e000      	b.n	800a53c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a53a:	2302      	movs	r3, #2
  }
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a55e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2220      	movs	r2, #32
 800a564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff ff07 	bl	800a37c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b22      	cmp	r3, #34	; 0x22
 800a58a:	d171      	bne.n	800a670 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a594:	d123      	bne.n	800a5de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10e      	bne.n	800a5c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ba:	1c9a      	adds	r2, r3, #2
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	629a      	str	r2, [r3, #40]	; 0x28
 800a5c0:	e029      	b.n	800a616 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	629a      	str	r2, [r3, #40]	; 0x28
 800a5dc:	e01b      	b.n	800a616 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6858      	ldr	r0, [r3, #4]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f0:	1c59      	adds	r1, r3, #1
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	6291      	str	r1, [r2, #40]	; 0x28
 800a5f6:	b2c2      	uxtb	r2, r0
 800a5f8:	701a      	strb	r2, [r3, #0]
 800a5fa:	e00c      	b.n	800a616 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	b2da      	uxtb	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	1c58      	adds	r0, r3, #1
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	6288      	str	r0, [r1, #40]	; 0x28
 800a60e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a612:	b2d2      	uxtb	r2, r2
 800a614:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	3b01      	subs	r3, #1
 800a61e:	b29b      	uxth	r3, r3
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	4619      	mov	r1, r3
 800a624:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a626:	2b00      	cmp	r3, #0
 800a628:	d120      	bne.n	800a66c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0220 	bic.w	r2, r2, #32
 800a638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	695a      	ldr	r2, [r3, #20]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f022 0201 	bic.w	r2, r2, #1
 800a658:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2220      	movs	r2, #32
 800a65e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f002 ffbe 	bl	800d5e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	e002      	b.n	800a672 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	e000      	b.n	800a672 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a670:	2302      	movs	r3, #2
  }
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a680:	b085      	sub	sp, #20
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	430a      	orrs	r2, r1
 800a69a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a6be:	f023 030c 	bic.w	r3, r3, #12
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6812      	ldr	r2, [r2, #0]
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	699a      	ldr	r2, [r3, #24]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ea:	f040 818b 	bne.w	800aa04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4ac1      	ldr	r2, [pc, #772]	; (800a9f8 <UART_SetConfig+0x37c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d005      	beq.n	800a704 <UART_SetConfig+0x88>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4abf      	ldr	r2, [pc, #764]	; (800a9fc <UART_SetConfig+0x380>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	f040 80bd 	bne.w	800a87e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a704:	f7ff fbea 	bl	8009edc <HAL_RCC_GetPCLK2Freq>
 800a708:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	461d      	mov	r5, r3
 800a70e:	f04f 0600 	mov.w	r6, #0
 800a712:	46a8      	mov	r8, r5
 800a714:	46b1      	mov	r9, r6
 800a716:	eb18 0308 	adds.w	r3, r8, r8
 800a71a:	eb49 0409 	adc.w	r4, r9, r9
 800a71e:	4698      	mov	r8, r3
 800a720:	46a1      	mov	r9, r4
 800a722:	eb18 0805 	adds.w	r8, r8, r5
 800a726:	eb49 0906 	adc.w	r9, r9, r6
 800a72a:	f04f 0100 	mov.w	r1, #0
 800a72e:	f04f 0200 	mov.w	r2, #0
 800a732:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a736:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a73a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a73e:	4688      	mov	r8, r1
 800a740:	4691      	mov	r9, r2
 800a742:	eb18 0005 	adds.w	r0, r8, r5
 800a746:	eb49 0106 	adc.w	r1, r9, r6
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	461d      	mov	r5, r3
 800a750:	f04f 0600 	mov.w	r6, #0
 800a754:	196b      	adds	r3, r5, r5
 800a756:	eb46 0406 	adc.w	r4, r6, r6
 800a75a:	461a      	mov	r2, r3
 800a75c:	4623      	mov	r3, r4
 800a75e:	f7fc ffc5 	bl	80076ec <__aeabi_uldivmod>
 800a762:	4603      	mov	r3, r0
 800a764:	460c      	mov	r4, r1
 800a766:	461a      	mov	r2, r3
 800a768:	4ba5      	ldr	r3, [pc, #660]	; (800aa00 <UART_SetConfig+0x384>)
 800a76a:	fba3 2302 	umull	r2, r3, r3, r2
 800a76e:	095b      	lsrs	r3, r3, #5
 800a770:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	461d      	mov	r5, r3
 800a778:	f04f 0600 	mov.w	r6, #0
 800a77c:	46a9      	mov	r9, r5
 800a77e:	46b2      	mov	sl, r6
 800a780:	eb19 0309 	adds.w	r3, r9, r9
 800a784:	eb4a 040a 	adc.w	r4, sl, sl
 800a788:	4699      	mov	r9, r3
 800a78a:	46a2      	mov	sl, r4
 800a78c:	eb19 0905 	adds.w	r9, r9, r5
 800a790:	eb4a 0a06 	adc.w	sl, sl, r6
 800a794:	f04f 0100 	mov.w	r1, #0
 800a798:	f04f 0200 	mov.w	r2, #0
 800a79c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a7a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a7a8:	4689      	mov	r9, r1
 800a7aa:	4692      	mov	sl, r2
 800a7ac:	eb19 0005 	adds.w	r0, r9, r5
 800a7b0:	eb4a 0106 	adc.w	r1, sl, r6
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	461d      	mov	r5, r3
 800a7ba:	f04f 0600 	mov.w	r6, #0
 800a7be:	196b      	adds	r3, r5, r5
 800a7c0:	eb46 0406 	adc.w	r4, r6, r6
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	4623      	mov	r3, r4
 800a7c8:	f7fc ff90 	bl	80076ec <__aeabi_uldivmod>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4b8b      	ldr	r3, [pc, #556]	; (800aa00 <UART_SetConfig+0x384>)
 800a7d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a7d8:	095b      	lsrs	r3, r3, #5
 800a7da:	2164      	movs	r1, #100	; 0x64
 800a7dc:	fb01 f303 	mul.w	r3, r1, r3
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	3332      	adds	r3, #50	; 0x32
 800a7e6:	4a86      	ldr	r2, [pc, #536]	; (800aa00 <UART_SetConfig+0x384>)
 800a7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ec:	095b      	lsrs	r3, r3, #5
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7f4:	4498      	add	r8, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	461d      	mov	r5, r3
 800a7fa:	f04f 0600 	mov.w	r6, #0
 800a7fe:	46a9      	mov	r9, r5
 800a800:	46b2      	mov	sl, r6
 800a802:	eb19 0309 	adds.w	r3, r9, r9
 800a806:	eb4a 040a 	adc.w	r4, sl, sl
 800a80a:	4699      	mov	r9, r3
 800a80c:	46a2      	mov	sl, r4
 800a80e:	eb19 0905 	adds.w	r9, r9, r5
 800a812:	eb4a 0a06 	adc.w	sl, sl, r6
 800a816:	f04f 0100 	mov.w	r1, #0
 800a81a:	f04f 0200 	mov.w	r2, #0
 800a81e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a822:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a826:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a82a:	4689      	mov	r9, r1
 800a82c:	4692      	mov	sl, r2
 800a82e:	eb19 0005 	adds.w	r0, r9, r5
 800a832:	eb4a 0106 	adc.w	r1, sl, r6
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	461d      	mov	r5, r3
 800a83c:	f04f 0600 	mov.w	r6, #0
 800a840:	196b      	adds	r3, r5, r5
 800a842:	eb46 0406 	adc.w	r4, r6, r6
 800a846:	461a      	mov	r2, r3
 800a848:	4623      	mov	r3, r4
 800a84a:	f7fc ff4f 	bl	80076ec <__aeabi_uldivmod>
 800a84e:	4603      	mov	r3, r0
 800a850:	460c      	mov	r4, r1
 800a852:	461a      	mov	r2, r3
 800a854:	4b6a      	ldr	r3, [pc, #424]	; (800aa00 <UART_SetConfig+0x384>)
 800a856:	fba3 1302 	umull	r1, r3, r3, r2
 800a85a:	095b      	lsrs	r3, r3, #5
 800a85c:	2164      	movs	r1, #100	; 0x64
 800a85e:	fb01 f303 	mul.w	r3, r1, r3
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	3332      	adds	r3, #50	; 0x32
 800a868:	4a65      	ldr	r2, [pc, #404]	; (800aa00 <UART_SetConfig+0x384>)
 800a86a:	fba2 2303 	umull	r2, r3, r2, r3
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	f003 0207 	and.w	r2, r3, #7
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4442      	add	r2, r8
 800a87a:	609a      	str	r2, [r3, #8]
 800a87c:	e26f      	b.n	800ad5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a87e:	f7ff fb19 	bl	8009eb4 <HAL_RCC_GetPCLK1Freq>
 800a882:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	461d      	mov	r5, r3
 800a888:	f04f 0600 	mov.w	r6, #0
 800a88c:	46a8      	mov	r8, r5
 800a88e:	46b1      	mov	r9, r6
 800a890:	eb18 0308 	adds.w	r3, r8, r8
 800a894:	eb49 0409 	adc.w	r4, r9, r9
 800a898:	4698      	mov	r8, r3
 800a89a:	46a1      	mov	r9, r4
 800a89c:	eb18 0805 	adds.w	r8, r8, r5
 800a8a0:	eb49 0906 	adc.w	r9, r9, r6
 800a8a4:	f04f 0100 	mov.w	r1, #0
 800a8a8:	f04f 0200 	mov.w	r2, #0
 800a8ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a8b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a8b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8b8:	4688      	mov	r8, r1
 800a8ba:	4691      	mov	r9, r2
 800a8bc:	eb18 0005 	adds.w	r0, r8, r5
 800a8c0:	eb49 0106 	adc.w	r1, r9, r6
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	461d      	mov	r5, r3
 800a8ca:	f04f 0600 	mov.w	r6, #0
 800a8ce:	196b      	adds	r3, r5, r5
 800a8d0:	eb46 0406 	adc.w	r4, r6, r6
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	4623      	mov	r3, r4
 800a8d8:	f7fc ff08 	bl	80076ec <__aeabi_uldivmod>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	4b47      	ldr	r3, [pc, #284]	; (800aa00 <UART_SetConfig+0x384>)
 800a8e4:	fba3 2302 	umull	r2, r3, r3, r2
 800a8e8:	095b      	lsrs	r3, r3, #5
 800a8ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	461d      	mov	r5, r3
 800a8f2:	f04f 0600 	mov.w	r6, #0
 800a8f6:	46a9      	mov	r9, r5
 800a8f8:	46b2      	mov	sl, r6
 800a8fa:	eb19 0309 	adds.w	r3, r9, r9
 800a8fe:	eb4a 040a 	adc.w	r4, sl, sl
 800a902:	4699      	mov	r9, r3
 800a904:	46a2      	mov	sl, r4
 800a906:	eb19 0905 	adds.w	r9, r9, r5
 800a90a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a90e:	f04f 0100 	mov.w	r1, #0
 800a912:	f04f 0200 	mov.w	r2, #0
 800a916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a91a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a91e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a922:	4689      	mov	r9, r1
 800a924:	4692      	mov	sl, r2
 800a926:	eb19 0005 	adds.w	r0, r9, r5
 800a92a:	eb4a 0106 	adc.w	r1, sl, r6
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	461d      	mov	r5, r3
 800a934:	f04f 0600 	mov.w	r6, #0
 800a938:	196b      	adds	r3, r5, r5
 800a93a:	eb46 0406 	adc.w	r4, r6, r6
 800a93e:	461a      	mov	r2, r3
 800a940:	4623      	mov	r3, r4
 800a942:	f7fc fed3 	bl	80076ec <__aeabi_uldivmod>
 800a946:	4603      	mov	r3, r0
 800a948:	460c      	mov	r4, r1
 800a94a:	461a      	mov	r2, r3
 800a94c:	4b2c      	ldr	r3, [pc, #176]	; (800aa00 <UART_SetConfig+0x384>)
 800a94e:	fba3 1302 	umull	r1, r3, r3, r2
 800a952:	095b      	lsrs	r3, r3, #5
 800a954:	2164      	movs	r1, #100	; 0x64
 800a956:	fb01 f303 	mul.w	r3, r1, r3
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	3332      	adds	r3, #50	; 0x32
 800a960:	4a27      	ldr	r2, [pc, #156]	; (800aa00 <UART_SetConfig+0x384>)
 800a962:	fba2 2303 	umull	r2, r3, r2, r3
 800a966:	095b      	lsrs	r3, r3, #5
 800a968:	005b      	lsls	r3, r3, #1
 800a96a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a96e:	4498      	add	r8, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	461d      	mov	r5, r3
 800a974:	f04f 0600 	mov.w	r6, #0
 800a978:	46a9      	mov	r9, r5
 800a97a:	46b2      	mov	sl, r6
 800a97c:	eb19 0309 	adds.w	r3, r9, r9
 800a980:	eb4a 040a 	adc.w	r4, sl, sl
 800a984:	4699      	mov	r9, r3
 800a986:	46a2      	mov	sl, r4
 800a988:	eb19 0905 	adds.w	r9, r9, r5
 800a98c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a990:	f04f 0100 	mov.w	r1, #0
 800a994:	f04f 0200 	mov.w	r2, #0
 800a998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a99c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	4692      	mov	sl, r2
 800a9a8:	eb19 0005 	adds.w	r0, r9, r5
 800a9ac:	eb4a 0106 	adc.w	r1, sl, r6
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	461d      	mov	r5, r3
 800a9b6:	f04f 0600 	mov.w	r6, #0
 800a9ba:	196b      	adds	r3, r5, r5
 800a9bc:	eb46 0406 	adc.w	r4, r6, r6
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4623      	mov	r3, r4
 800a9c4:	f7fc fe92 	bl	80076ec <__aeabi_uldivmod>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <UART_SetConfig+0x384>)
 800a9d0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9d4:	095b      	lsrs	r3, r3, #5
 800a9d6:	2164      	movs	r1, #100	; 0x64
 800a9d8:	fb01 f303 	mul.w	r3, r1, r3
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	00db      	lsls	r3, r3, #3
 800a9e0:	3332      	adds	r3, #50	; 0x32
 800a9e2:	4a07      	ldr	r2, [pc, #28]	; (800aa00 <UART_SetConfig+0x384>)
 800a9e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e8:	095b      	lsrs	r3, r3, #5
 800a9ea:	f003 0207 	and.w	r2, r3, #7
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4442      	add	r2, r8
 800a9f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a9f6:	e1b2      	b.n	800ad5e <UART_SetConfig+0x6e2>
 800a9f8:	40011000 	.word	0x40011000
 800a9fc:	40011400 	.word	0x40011400
 800aa00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4ad7      	ldr	r2, [pc, #860]	; (800ad68 <UART_SetConfig+0x6ec>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d005      	beq.n	800aa1a <UART_SetConfig+0x39e>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4ad6      	ldr	r2, [pc, #856]	; (800ad6c <UART_SetConfig+0x6f0>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	f040 80d1 	bne.w	800abbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa1a:	f7ff fa5f 	bl	8009edc <HAL_RCC_GetPCLK2Freq>
 800aa1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	469a      	mov	sl, r3
 800aa24:	f04f 0b00 	mov.w	fp, #0
 800aa28:	46d0      	mov	r8, sl
 800aa2a:	46d9      	mov	r9, fp
 800aa2c:	eb18 0308 	adds.w	r3, r8, r8
 800aa30:	eb49 0409 	adc.w	r4, r9, r9
 800aa34:	4698      	mov	r8, r3
 800aa36:	46a1      	mov	r9, r4
 800aa38:	eb18 080a 	adds.w	r8, r8, sl
 800aa3c:	eb49 090b 	adc.w	r9, r9, fp
 800aa40:	f04f 0100 	mov.w	r1, #0
 800aa44:	f04f 0200 	mov.w	r2, #0
 800aa48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa54:	4688      	mov	r8, r1
 800aa56:	4691      	mov	r9, r2
 800aa58:	eb1a 0508 	adds.w	r5, sl, r8
 800aa5c:	eb4b 0609 	adc.w	r6, fp, r9
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	4619      	mov	r1, r3
 800aa66:	f04f 0200 	mov.w	r2, #0
 800aa6a:	f04f 0300 	mov.w	r3, #0
 800aa6e:	f04f 0400 	mov.w	r4, #0
 800aa72:	0094      	lsls	r4, r2, #2
 800aa74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa78:	008b      	lsls	r3, r1, #2
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	4628      	mov	r0, r5
 800aa80:	4631      	mov	r1, r6
 800aa82:	f7fc fe33 	bl	80076ec <__aeabi_uldivmod>
 800aa86:	4603      	mov	r3, r0
 800aa88:	460c      	mov	r4, r1
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4bb8      	ldr	r3, [pc, #736]	; (800ad70 <UART_SetConfig+0x6f4>)
 800aa8e:	fba3 2302 	umull	r2, r3, r3, r2
 800aa92:	095b      	lsrs	r3, r3, #5
 800aa94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	469b      	mov	fp, r3
 800aa9c:	f04f 0c00 	mov.w	ip, #0
 800aaa0:	46d9      	mov	r9, fp
 800aaa2:	46e2      	mov	sl, ip
 800aaa4:	eb19 0309 	adds.w	r3, r9, r9
 800aaa8:	eb4a 040a 	adc.w	r4, sl, sl
 800aaac:	4699      	mov	r9, r3
 800aaae:	46a2      	mov	sl, r4
 800aab0:	eb19 090b 	adds.w	r9, r9, fp
 800aab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aab8:	f04f 0100 	mov.w	r1, #0
 800aabc:	f04f 0200 	mov.w	r2, #0
 800aac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aacc:	4689      	mov	r9, r1
 800aace:	4692      	mov	sl, r2
 800aad0:	eb1b 0509 	adds.w	r5, fp, r9
 800aad4:	eb4c 060a 	adc.w	r6, ip, sl
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	4619      	mov	r1, r3
 800aade:	f04f 0200 	mov.w	r2, #0
 800aae2:	f04f 0300 	mov.w	r3, #0
 800aae6:	f04f 0400 	mov.w	r4, #0
 800aaea:	0094      	lsls	r4, r2, #2
 800aaec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aaf0:	008b      	lsls	r3, r1, #2
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	4623      	mov	r3, r4
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	4631      	mov	r1, r6
 800aafa:	f7fc fdf7 	bl	80076ec <__aeabi_uldivmod>
 800aafe:	4603      	mov	r3, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	461a      	mov	r2, r3
 800ab04:	4b9a      	ldr	r3, [pc, #616]	; (800ad70 <UART_SetConfig+0x6f4>)
 800ab06:	fba3 1302 	umull	r1, r3, r3, r2
 800ab0a:	095b      	lsrs	r3, r3, #5
 800ab0c:	2164      	movs	r1, #100	; 0x64
 800ab0e:	fb01 f303 	mul.w	r3, r1, r3
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	011b      	lsls	r3, r3, #4
 800ab16:	3332      	adds	r3, #50	; 0x32
 800ab18:	4a95      	ldr	r2, [pc, #596]	; (800ad70 <UART_SetConfig+0x6f4>)
 800ab1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1e:	095b      	lsrs	r3, r3, #5
 800ab20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab24:	4498      	add	r8, r3
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	469b      	mov	fp, r3
 800ab2a:	f04f 0c00 	mov.w	ip, #0
 800ab2e:	46d9      	mov	r9, fp
 800ab30:	46e2      	mov	sl, ip
 800ab32:	eb19 0309 	adds.w	r3, r9, r9
 800ab36:	eb4a 040a 	adc.w	r4, sl, sl
 800ab3a:	4699      	mov	r9, r3
 800ab3c:	46a2      	mov	sl, r4
 800ab3e:	eb19 090b 	adds.w	r9, r9, fp
 800ab42:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab46:	f04f 0100 	mov.w	r1, #0
 800ab4a:	f04f 0200 	mov.w	r2, #0
 800ab4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab5a:	4689      	mov	r9, r1
 800ab5c:	4692      	mov	sl, r2
 800ab5e:	eb1b 0509 	adds.w	r5, fp, r9
 800ab62:	eb4c 060a 	adc.w	r6, ip, sl
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	f04f 0200 	mov.w	r2, #0
 800ab70:	f04f 0300 	mov.w	r3, #0
 800ab74:	f04f 0400 	mov.w	r4, #0
 800ab78:	0094      	lsls	r4, r2, #2
 800ab7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab7e:	008b      	lsls	r3, r1, #2
 800ab80:	461a      	mov	r2, r3
 800ab82:	4623      	mov	r3, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	4631      	mov	r1, r6
 800ab88:	f7fc fdb0 	bl	80076ec <__aeabi_uldivmod>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	461a      	mov	r2, r3
 800ab92:	4b77      	ldr	r3, [pc, #476]	; (800ad70 <UART_SetConfig+0x6f4>)
 800ab94:	fba3 1302 	umull	r1, r3, r3, r2
 800ab98:	095b      	lsrs	r3, r3, #5
 800ab9a:	2164      	movs	r1, #100	; 0x64
 800ab9c:	fb01 f303 	mul.w	r3, r1, r3
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	011b      	lsls	r3, r3, #4
 800aba4:	3332      	adds	r3, #50	; 0x32
 800aba6:	4a72      	ldr	r2, [pc, #456]	; (800ad70 <UART_SetConfig+0x6f4>)
 800aba8:	fba2 2303 	umull	r2, r3, r2, r3
 800abac:	095b      	lsrs	r3, r3, #5
 800abae:	f003 020f 	and.w	r2, r3, #15
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4442      	add	r2, r8
 800abb8:	609a      	str	r2, [r3, #8]
 800abba:	e0d0      	b.n	800ad5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800abbc:	f7ff f97a 	bl	8009eb4 <HAL_RCC_GetPCLK1Freq>
 800abc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	469a      	mov	sl, r3
 800abc6:	f04f 0b00 	mov.w	fp, #0
 800abca:	46d0      	mov	r8, sl
 800abcc:	46d9      	mov	r9, fp
 800abce:	eb18 0308 	adds.w	r3, r8, r8
 800abd2:	eb49 0409 	adc.w	r4, r9, r9
 800abd6:	4698      	mov	r8, r3
 800abd8:	46a1      	mov	r9, r4
 800abda:	eb18 080a 	adds.w	r8, r8, sl
 800abde:	eb49 090b 	adc.w	r9, r9, fp
 800abe2:	f04f 0100 	mov.w	r1, #0
 800abe6:	f04f 0200 	mov.w	r2, #0
 800abea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800abee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800abf2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800abf6:	4688      	mov	r8, r1
 800abf8:	4691      	mov	r9, r2
 800abfa:	eb1a 0508 	adds.w	r5, sl, r8
 800abfe:	eb4b 0609 	adc.w	r6, fp, r9
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	4619      	mov	r1, r3
 800ac08:	f04f 0200 	mov.w	r2, #0
 800ac0c:	f04f 0300 	mov.w	r3, #0
 800ac10:	f04f 0400 	mov.w	r4, #0
 800ac14:	0094      	lsls	r4, r2, #2
 800ac16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac1a:	008b      	lsls	r3, r1, #2
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	4623      	mov	r3, r4
 800ac20:	4628      	mov	r0, r5
 800ac22:	4631      	mov	r1, r6
 800ac24:	f7fc fd62 	bl	80076ec <__aeabi_uldivmod>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	4b50      	ldr	r3, [pc, #320]	; (800ad70 <UART_SetConfig+0x6f4>)
 800ac30:	fba3 2302 	umull	r2, r3, r3, r2
 800ac34:	095b      	lsrs	r3, r3, #5
 800ac36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	469b      	mov	fp, r3
 800ac3e:	f04f 0c00 	mov.w	ip, #0
 800ac42:	46d9      	mov	r9, fp
 800ac44:	46e2      	mov	sl, ip
 800ac46:	eb19 0309 	adds.w	r3, r9, r9
 800ac4a:	eb4a 040a 	adc.w	r4, sl, sl
 800ac4e:	4699      	mov	r9, r3
 800ac50:	46a2      	mov	sl, r4
 800ac52:	eb19 090b 	adds.w	r9, r9, fp
 800ac56:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac5a:	f04f 0100 	mov.w	r1, #0
 800ac5e:	f04f 0200 	mov.w	r2, #0
 800ac62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac6e:	4689      	mov	r9, r1
 800ac70:	4692      	mov	sl, r2
 800ac72:	eb1b 0509 	adds.w	r5, fp, r9
 800ac76:	eb4c 060a 	adc.w	r6, ip, sl
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	f04f 0200 	mov.w	r2, #0
 800ac84:	f04f 0300 	mov.w	r3, #0
 800ac88:	f04f 0400 	mov.w	r4, #0
 800ac8c:	0094      	lsls	r4, r2, #2
 800ac8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac92:	008b      	lsls	r3, r1, #2
 800ac94:	461a      	mov	r2, r3
 800ac96:	4623      	mov	r3, r4
 800ac98:	4628      	mov	r0, r5
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	f7fc fd26 	bl	80076ec <__aeabi_uldivmod>
 800aca0:	4603      	mov	r3, r0
 800aca2:	460c      	mov	r4, r1
 800aca4:	461a      	mov	r2, r3
 800aca6:	4b32      	ldr	r3, [pc, #200]	; (800ad70 <UART_SetConfig+0x6f4>)
 800aca8:	fba3 1302 	umull	r1, r3, r3, r2
 800acac:	095b      	lsrs	r3, r3, #5
 800acae:	2164      	movs	r1, #100	; 0x64
 800acb0:	fb01 f303 	mul.w	r3, r1, r3
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	011b      	lsls	r3, r3, #4
 800acb8:	3332      	adds	r3, #50	; 0x32
 800acba:	4a2d      	ldr	r2, [pc, #180]	; (800ad70 <UART_SetConfig+0x6f4>)
 800acbc:	fba2 2303 	umull	r2, r3, r2, r3
 800acc0:	095b      	lsrs	r3, r3, #5
 800acc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acc6:	4498      	add	r8, r3
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	469b      	mov	fp, r3
 800accc:	f04f 0c00 	mov.w	ip, #0
 800acd0:	46d9      	mov	r9, fp
 800acd2:	46e2      	mov	sl, ip
 800acd4:	eb19 0309 	adds.w	r3, r9, r9
 800acd8:	eb4a 040a 	adc.w	r4, sl, sl
 800acdc:	4699      	mov	r9, r3
 800acde:	46a2      	mov	sl, r4
 800ace0:	eb19 090b 	adds.w	r9, r9, fp
 800ace4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ace8:	f04f 0100 	mov.w	r1, #0
 800acec:	f04f 0200 	mov.w	r2, #0
 800acf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800acf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800acfc:	4689      	mov	r9, r1
 800acfe:	4692      	mov	sl, r2
 800ad00:	eb1b 0509 	adds.w	r5, fp, r9
 800ad04:	eb4c 060a 	adc.w	r6, ip, sl
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	f04f 0200 	mov.w	r2, #0
 800ad12:	f04f 0300 	mov.w	r3, #0
 800ad16:	f04f 0400 	mov.w	r4, #0
 800ad1a:	0094      	lsls	r4, r2, #2
 800ad1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad20:	008b      	lsls	r3, r1, #2
 800ad22:	461a      	mov	r2, r3
 800ad24:	4623      	mov	r3, r4
 800ad26:	4628      	mov	r0, r5
 800ad28:	4631      	mov	r1, r6
 800ad2a:	f7fc fcdf 	bl	80076ec <__aeabi_uldivmod>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	460c      	mov	r4, r1
 800ad32:	461a      	mov	r2, r3
 800ad34:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <UART_SetConfig+0x6f4>)
 800ad36:	fba3 1302 	umull	r1, r3, r3, r2
 800ad3a:	095b      	lsrs	r3, r3, #5
 800ad3c:	2164      	movs	r1, #100	; 0x64
 800ad3e:	fb01 f303 	mul.w	r3, r1, r3
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	011b      	lsls	r3, r3, #4
 800ad46:	3332      	adds	r3, #50	; 0x32
 800ad48:	4a09      	ldr	r2, [pc, #36]	; (800ad70 <UART_SetConfig+0x6f4>)
 800ad4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4e:	095b      	lsrs	r3, r3, #5
 800ad50:	f003 020f 	and.w	r2, r3, #15
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4442      	add	r2, r8
 800ad5a:	609a      	str	r2, [r3, #8]
}
 800ad5c:	e7ff      	b.n	800ad5e <UART_SetConfig+0x6e2>
 800ad5e:	bf00      	nop
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad68:	40011000 	.word	0x40011000
 800ad6c:	40011400 	.word	0x40011400
 800ad70:	51eb851f 	.word	0x51eb851f

0800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af02      	add	r7, sp, #8
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f006 f9cf 	bl	8011124 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800ad86:	4602      	mov	r2, r0
					__idx, __base); }
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	4904      	ldr	r1, [pc, #16]	; (800ada0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 800ad90:	4804      	ldr	r0, [pc, #16]	; (800ada4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800ad92:	f000 ff55 	bl	800bc40 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800ad96:	4603      	mov	r3, r0
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	080197a0 	.word	0x080197a0
 800ada4:	08014531 	.word	0x08014531

0800ada8 <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
			     __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
 800ada8:	b590      	push	{r4, r7, lr}
 800adaa:	b087      	sub	sp, #28
 800adac:	af02      	add	r7, sp, #8
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f006 f9b5 	bl	8011124 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800adba:	4602      	mov	r2, r0
			     __idx, __base); }
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	4905      	ldr	r1, [pc, #20]	; (800add8 <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800adc4:	4805      	ldr	r0, [pc, #20]	; (800addc <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x34>)
 800adc6:	f000 ffc5 	bl	800bd54 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800adca:	4603      	mov	r3, r0
 800adcc:	460c      	mov	r4, r1
 800adce:	4618      	mov	r0, r3
 800add0:	4621      	mov	r1, r4
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	bd90      	pop	{r4, r7, pc}
 800add8:	080197a8 	.word	0x080197a8
 800addc:	080146c5 	.word	0x080146c5

0800ade0 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f006 f99a 	bl	8011124 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800adf0:	4602      	mov	r2, r0
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	4907      	ldr	r1, [pc, #28]	; (800ae14 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x34>)
 800adf6:	4808      	ldr	r0, [pc, #32]	; (800ae18 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x38>)
 800adf8:	f001 f83e 	bl	800be78 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800adfc:	eeb0 7a40 	vmov.f32	s14, s0
 800ae00:	eef0 7a60 	vmov.f32	s15, s1
 800ae04:	eeb0 0a47 	vmov.f32	s0, s14
 800ae08:	eef0 0a67 	vmov.f32	s1, s15
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	080197b0 	.word	0x080197b0
 800ae18:	08014411 	.word	0x08014411

0800ae1c <_ZNSt16invalid_argumentC1ERKS_>:
#endif
    virtual ~domain_error() _GLIBCXX_USE_NOEXCEPT;
  };

  /** Thrown to report invalid arguments to functions.  */
  class invalid_argument : public logic_error
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f005 fea1 	bl	8010b74 <_ZNSt11logic_errorC1ERKS_>
 800ae32:	4a04      	ldr	r2, [pc, #16]	; (800ae44 <_ZNSt16invalid_argumentC1ERKS_+0x28>)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	0801be50 	.word	0x0801be50

0800ae48 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
using std::string;

#define UART_TX_WAITING 50

void CommandInitModule(std::string& command)
{
 800ae48:	b590      	push	{r4, r7, lr}
 800ae4a:	b08b      	sub	sp, #44	; 0x2c
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 1;
 800ae50:	2301      	movs	r3, #1
 800ae52:	627b      	str	r3, [r7, #36]	; 0x24
  
  int initModuleNumberArgument = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	623b      	str	r3, [r7, #32]
  
  vector<string> extractedArguments;
 800ae58:	f107 0314 	add.w	r3, r7, #20
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f001 f866 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800ae62:	f107 0314 	add.w	r3, r7, #20
 800ae66:	461a      	mov	r2, r3
 800ae68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f004 f972 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d013      	beq.n	800ae9e <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
  {
    try
    {
      initModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800ae76:	f107 0314 	add.w	r3, r7, #20
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f001 f87e 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800ae82:	4603      	mov	r3, r0
 800ae84:	220a      	movs	r2, #10
 800ae86:	2100      	movs	r1, #0
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff ff73 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	623b      	str	r3, [r7, #32]
      
      printf("Invoking InitModule\n");
 800ae92:	481e      	ldr	r0, [pc, #120]	; (800af0c <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 800ae94:	f008 f9f4 	bl	8013280 <puts>
      InitModule(initModuleNumberArgument);
 800ae98:	6a38      	ldr	r0, [r7, #32]
 800ae9a:	f001 fa39 	bl	800c310 <_Z10InitModulei>
  vector<string> extractedArguments;
 800ae9e:	f107 0314 	add.w	r3, r7, #20
 800aea2:	4618      	mov	r0, r3
 800aea4:	f001 f850 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800aea8:	e02c      	b.n	800af04 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	460b      	mov	r3, r1
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d121      	bne.n	800aef6 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
    catch(std::invalid_argument)
 800aeb2:	4623      	mov	r3, r4
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f005 fa7f 	bl	80103b8 <__cxa_get_exception_ptr>
 800aeba:	4602      	mov	r2, r0
 800aebc:	f107 030c 	add.w	r3, r7, #12
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff ffaa 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800aec8:	4623      	mov	r3, r4
 800aeca:	4618      	mov	r0, r3
 800aecc:	f005 fa76 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800aed0:	480f      	ldr	r0, [pc, #60]	; (800af10 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 800aed2:	f008 f9d5 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800aed6:	f107 030c 	add.w	r3, r7, #12
 800aeda:	4618      	mov	r0, r3
 800aedc:	f005 fd42 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800aee0:	f005 faac 	bl	801043c <__cxa_end_catch>
 800aee4:	e7db      	b.n	800ae9e <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
 800aee6:	f107 030c 	add.w	r3, r7, #12
 800aeea:	4618      	mov	r0, r3
 800aeec:	f005 fd3a 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800aef0:	f005 faa4 	bl	801043c <__cxa_end_catch>
 800aef4:	e7ff      	b.n	800aef6 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
  vector<string> extractedArguments;
 800aef6:	f107 0314 	add.w	r3, r7, #20
 800aefa:	4618      	mov	r0, r3
 800aefc:	f001 f824 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800af00:	f004 fdaf 	bl	800fa62 <__cxa_end_cleanup>
}
 800af04:	372c      	adds	r7, #44	; 0x2c
 800af06:	46bd      	mov	sp, r7
 800af08:	bd90      	pop	{r4, r7, pc}
 800af0a:	bf00      	nop
 800af0c:	080197b8 	.word	0x080197b8
 800af10:	080197cc 	.word	0x080197cc

0800af14 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandDeinitModule(std::string& command)
{
 800af14:	b590      	push	{r4, r7, lr}
 800af16:	b08b      	sub	sp, #44	; 0x2c
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 1;
 800af1c:	2301      	movs	r3, #1
 800af1e:	627b      	str	r3, [r7, #36]	; 0x24
  
  int deinitModuleNumberArgument = 0;
 800af20:	2300      	movs	r3, #0
 800af22:	623b      	str	r3, [r7, #32]
  
  vector<string> extractedArguments;
 800af24:	f107 0314 	add.w	r3, r7, #20
 800af28:	4618      	mov	r0, r3
 800af2a:	f001 f800 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800af2e:	f107 0314 	add.w	r3, r7, #20
 800af32:	461a      	mov	r2, r3
 800af34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f004 f90c 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d013      	beq.n	800af6a <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
  {
    try
    {
      deinitModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800af42:	f107 0314 	add.w	r3, r7, #20
 800af46:	2100      	movs	r1, #0
 800af48:	4618      	mov	r0, r3
 800af4a:	f001 f818 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800af4e:	4603      	mov	r3, r0
 800af50:	220a      	movs	r2, #10
 800af52:	2100      	movs	r1, #0
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff ff0d 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800af5a:	4603      	mov	r3, r0
 800af5c:	623b      	str	r3, [r7, #32]
      
      printf("Invoking DeinitModule\n");
 800af5e:	481e      	ldr	r0, [pc, #120]	; (800afd8 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 800af60:	f008 f98e 	bl	8013280 <puts>
      DeinitModule(deinitModuleNumberArgument);
 800af64:	6a38      	ldr	r0, [r7, #32]
 800af66:	f001 fa83 	bl	800c470 <_Z12DeinitModulei>
  vector<string> extractedArguments;
 800af6a:	f107 0314 	add.w	r3, r7, #20
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 ffea 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800af74:	e02c      	b.n	800afd0 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 800af76:	4604      	mov	r4, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d121      	bne.n	800afc2 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
    catch(std::invalid_argument)
 800af7e:	4623      	mov	r3, r4
 800af80:	4618      	mov	r0, r3
 800af82:	f005 fa19 	bl	80103b8 <__cxa_get_exception_ptr>
 800af86:	4602      	mov	r2, r0
 800af88:	f107 030c 	add.w	r3, r7, #12
 800af8c:	4611      	mov	r1, r2
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff ff44 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800af94:	4623      	mov	r3, r4
 800af96:	4618      	mov	r0, r3
 800af98:	f005 fa10 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800af9c:	480f      	ldr	r0, [pc, #60]	; (800afdc <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 800af9e:	f008 f96f 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800afa2:	f107 030c 	add.w	r3, r7, #12
 800afa6:	4618      	mov	r0, r3
 800afa8:	f005 fcdc 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800afac:	f005 fa46 	bl	801043c <__cxa_end_catch>
 800afb0:	e7db      	b.n	800af6a <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
 800afb2:	f107 030c 	add.w	r3, r7, #12
 800afb6:	4618      	mov	r0, r3
 800afb8:	f005 fcd4 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800afbc:	f005 fa3e 	bl	801043c <__cxa_end_catch>
 800afc0:	e7ff      	b.n	800afc2 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
  vector<string> extractedArguments;
 800afc2:	f107 0314 	add.w	r3, r7, #20
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 ffbe 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800afcc:	f004 fd49 	bl	800fa62 <__cxa_end_cleanup>
}
 800afd0:	372c      	adds	r7, #44	; 0x2c
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd90      	pop	{r4, r7, pc}
 800afd6:	bf00      	nop
 800afd8:	080197f0 	.word	0x080197f0
 800afdc:	080197cc 	.word	0x080197cc

0800afe0 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSetGraphMin(std::string& command)
{
 800afe0:	b590      	push	{r4, r7, lr}
 800afe2:	b08d      	sub	sp, #52	; 0x34
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 800afe8:	2302      	movs	r3, #2
 800afea:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  int setGraphLowerRangeModuleNumberArgument = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	62bb      	str	r3, [r7, #40]	; 0x28
  long long int setGraphLowerRangeValueArgument = 0;
 800aff0:	f04f 0300 	mov.w	r3, #0
 800aff4:	f04f 0400 	mov.w	r4, #0
 800aff8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 800affc:	f107 0314 	add.w	r3, r7, #20
 800b000:	4618      	mov	r0, r3
 800b002:	f000 ff94 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b006:	f107 0314 	add.w	r3, r7, #20
 800b00a:	461a      	mov	r2, r3
 800b00c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f004 f8a0 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d025      	beq.n	800b066 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
  {
    try
    {
      setGraphLowerRangeModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800b01a:	f107 0314 	add.w	r3, r7, #20
 800b01e:	2100      	movs	r1, #0
 800b020:	4618      	mov	r0, r3
 800b022:	f000 ffac 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b026:	4603      	mov	r3, r0
 800b028:	220a      	movs	r2, #10
 800b02a:	2100      	movs	r1, #0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7ff fea1 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b032:	4603      	mov	r3, r0
 800b034:	62bb      	str	r3, [r7, #40]	; 0x28
      setGraphLowerRangeValueArgument = std::stoll(extractedArguments.at(1));
 800b036:	f107 0314 	add.w	r3, r7, #20
 800b03a:	2101      	movs	r1, #1
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 ff9e 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b042:	4603      	mov	r3, r0
 800b044:	220a      	movs	r2, #10
 800b046:	2100      	movs	r1, #0
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff fead 	bl	800ada8 <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b04e:	4603      	mov	r3, r0
 800b050:	460c      	mov	r4, r1
 800b052:	e9c7 3408 	strd	r3, r4, [r7, #32]
      
      printf("Invoking SetGraphLowerRange\n");
 800b056:	481f      	ldr	r0, [pc, #124]	; (800b0d4 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4>)
 800b058:	f008 f912 	bl	8013280 <puts>
      SetGraphLowerRange(setGraphLowerRangeModuleNumberArgument, setGraphLowerRangeValueArgument);
 800b05c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b062:	f001 fa4b 	bl	800c4fc <_Z18SetGraphLowerRangeix>
  vector<string> extractedArguments;
 800b066:	f107 0314 	add.w	r3, r7, #20
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 ff6c 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800b070:	e02c      	b.n	800b0cc <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xec>
 800b072:	4604      	mov	r4, r0
 800b074:	460b      	mov	r3, r1
 800b076:	2b01      	cmp	r3, #1
 800b078:	d121      	bne.n	800b0be <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
    catch(std::invalid_argument)
 800b07a:	4623      	mov	r3, r4
 800b07c:	4618      	mov	r0, r3
 800b07e:	f005 f99b 	bl	80103b8 <__cxa_get_exception_ptr>
 800b082:	4602      	mov	r2, r0
 800b084:	f107 030c 	add.w	r3, r7, #12
 800b088:	4611      	mov	r1, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff fec6 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800b090:	4623      	mov	r3, r4
 800b092:	4618      	mov	r0, r3
 800b094:	f005 f992 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800b098:	480f      	ldr	r0, [pc, #60]	; (800b0d8 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf8>)
 800b09a:	f008 f8f1 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800b09e:	f107 030c 	add.w	r3, r7, #12
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f005 fc5e 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b0a8:	f005 f9c8 	bl	801043c <__cxa_end_catch>
 800b0ac:	e7db      	b.n	800b066 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
 800b0ae:	f107 030c 	add.w	r3, r7, #12
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f005 fc56 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b0b8:	f005 f9c0 	bl	801043c <__cxa_end_catch>
 800b0bc:	e7ff      	b.n	800b0be <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
  vector<string> extractedArguments;
 800b0be:	f107 0314 	add.w	r3, r7, #20
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 ff40 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800b0c8:	f004 fccb 	bl	800fa62 <__cxa_end_cleanup>
}
 800b0cc:	3734      	adds	r7, #52	; 0x34
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd90      	pop	{r4, r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	08019808 	.word	0x08019808
 800b0d8:	080197cc 	.word	0x080197cc

0800b0dc <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSetGraphMax(std::string& command)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b08d      	sub	sp, #52	; 0x34
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  int setGraphUpperRangeModuleNumberArgument = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28
  long long int setGraphUpperRangeValueArgument = 0;
 800b0ec:	f04f 0300 	mov.w	r3, #0
 800b0f0:	f04f 0400 	mov.w	r4, #0
 800b0f4:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 800b0f8:	f107 0314 	add.w	r3, r7, #20
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 ff16 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b102:	f107 0314 	add.w	r3, r7, #20
 800b106:	461a      	mov	r2, r3
 800b108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f004 f822 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d025      	beq.n	800b162 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
  {    
    try
    {
      setGraphUpperRangeModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800b116:	f107 0314 	add.w	r3, r7, #20
 800b11a:	2100      	movs	r1, #0
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 ff2e 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b122:	4603      	mov	r3, r0
 800b124:	220a      	movs	r2, #10
 800b126:	2100      	movs	r1, #0
 800b128:	4618      	mov	r0, r3
 800b12a:	f7ff fe23 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b12e:	4603      	mov	r3, r0
 800b130:	62bb      	str	r3, [r7, #40]	; 0x28
      setGraphUpperRangeValueArgument = std::stoll(extractedArguments.at(1));
 800b132:	f107 0314 	add.w	r3, r7, #20
 800b136:	2101      	movs	r1, #1
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 ff20 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b13e:	4603      	mov	r3, r0
 800b140:	220a      	movs	r2, #10
 800b142:	2100      	movs	r1, #0
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff fe2f 	bl	800ada8 <_ZNSt7__cxx115stollERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b14a:	4603      	mov	r3, r0
 800b14c:	460c      	mov	r4, r1
 800b14e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      
      printf("Invoking SetGraphUpperRange\n");
 800b152:	481f      	ldr	r0, [pc, #124]	; (800b1d0 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4>)
 800b154:	f008 f894 	bl	8013280 <puts>
      SetGraphUpperRange(setGraphUpperRangeModuleNumberArgument, setGraphUpperRangeValueArgument);
 800b158:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b15e:	f001 fa47 	bl	800c5f0 <_Z18SetGraphUpperRangeix>
  vector<string> extractedArguments;
 800b162:	f107 0314 	add.w	r3, r7, #20
 800b166:	4618      	mov	r0, r3
 800b168:	f000 feee 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800b16c:	e02c      	b.n	800b1c8 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xec>
 800b16e:	4604      	mov	r4, r0
 800b170:	460b      	mov	r3, r1
 800b172:	2b01      	cmp	r3, #1
 800b174:	d121      	bne.n	800b1ba <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
    catch(std::invalid_argument)
 800b176:	4623      	mov	r3, r4
 800b178:	4618      	mov	r0, r3
 800b17a:	f005 f91d 	bl	80103b8 <__cxa_get_exception_ptr>
 800b17e:	4602      	mov	r2, r0
 800b180:	f107 030c 	add.w	r3, r7, #12
 800b184:	4611      	mov	r1, r2
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff fe48 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800b18c:	4623      	mov	r3, r4
 800b18e:	4618      	mov	r0, r3
 800b190:	f005 f914 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800b194:	480f      	ldr	r0, [pc, #60]	; (800b1d4 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf8>)
 800b196:	f008 f873 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800b19a:	f107 030c 	add.w	r3, r7, #12
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f005 fbe0 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b1a4:	f005 f94a 	bl	801043c <__cxa_end_catch>
 800b1a8:	e7db      	b.n	800b162 <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x86>
 800b1aa:	f107 030c 	add.w	r3, r7, #12
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f005 fbd8 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b1b4:	f005 f942 	bl	801043c <__cxa_end_catch>
 800b1b8:	e7ff      	b.n	800b1ba <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
  vector<string> extractedArguments;
 800b1ba:	f107 0314 	add.w	r3, r7, #20
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 fec2 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800b1c4:	f004 fc4d 	bl	800fa62 <__cxa_end_cleanup>
}
 800b1c8:	3734      	adds	r7, #52	; 0x34
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd90      	pop	{r4, r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	08019824 	.word	0x08019824
 800b1d4:	080197cc 	.word	0x080197cc

0800b1d8 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSetGraphTime(std::string& command)
{
 800b1d8:	b590      	push	{r4, r7, lr}
 800b1da:	b08b      	sub	sp, #44	; 0x2c
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
  
  int setGraphTimeRangeModuleNumberArgument = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	623b      	str	r3, [r7, #32]
  int setGraphTimeRangeValueArgument = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	61fb      	str	r3, [r7, #28]
  
  vector<string> extractedArguments;
 800b1ec:	f107 0310 	add.w	r3, r7, #16
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 fe9c 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b1f6:	f107 0310 	add.w	r3, r7, #16
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f003 ffa8 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d022      	beq.n	800b250 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
  {    
    try
    {
      setGraphTimeRangeModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800b20a:	f107 0310 	add.w	r3, r7, #16
 800b20e:	2100      	movs	r1, #0
 800b210:	4618      	mov	r0, r3
 800b212:	f000 feb4 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b216:	4603      	mov	r3, r0
 800b218:	220a      	movs	r2, #10
 800b21a:	2100      	movs	r1, #0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7ff fda9 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b222:	4603      	mov	r3, r0
 800b224:	623b      	str	r3, [r7, #32]
      setGraphTimeRangeValueArgument = std::stoi(extractedArguments.at(1));
 800b226:	f107 0310 	add.w	r3, r7, #16
 800b22a:	2101      	movs	r1, #1
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 fea6 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b232:	4603      	mov	r3, r0
 800b234:	220a      	movs	r2, #10
 800b236:	2100      	movs	r1, #0
 800b238:	4618      	mov	r0, r3
 800b23a:	f7ff fd9b 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b23e:	4603      	mov	r3, r0
 800b240:	61fb      	str	r3, [r7, #28]
      
      printf("Invoking SetGraphTimeRange\n");
 800b242:	481e      	ldr	r0, [pc, #120]	; (800b2bc <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 800b244:	f008 f81c 	bl	8013280 <puts>
      SetGraphTimeRange(setGraphTimeRangeModuleNumberArgument, setGraphTimeRangeValueArgument);
 800b248:	69f9      	ldr	r1, [r7, #28]
 800b24a:	6a38      	ldr	r0, [r7, #32]
 800b24c:	f001 fa4a 	bl	800c6e4 <_Z17SetGraphTimeRangeii>
  vector<string> extractedArguments;
 800b250:	f107 0310 	add.w	r3, r7, #16
 800b254:	4618      	mov	r0, r3
 800b256:	f000 fe77 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800b25a:	e02c      	b.n	800b2b6 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
 800b25c:	4604      	mov	r4, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	2b01      	cmp	r3, #1
 800b262:	d121      	bne.n	800b2a8 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
    catch(std::invalid_argument)
 800b264:	4623      	mov	r3, r4
 800b266:	4618      	mov	r0, r3
 800b268:	f005 f8a6 	bl	80103b8 <__cxa_get_exception_ptr>
 800b26c:	4602      	mov	r2, r0
 800b26e:	f107 0308 	add.w	r3, r7, #8
 800b272:	4611      	mov	r1, r2
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff fdd1 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800b27a:	4623      	mov	r3, r4
 800b27c:	4618      	mov	r0, r3
 800b27e:	f005 f89d 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800b282:	480f      	ldr	r0, [pc, #60]	; (800b2c0 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>)
 800b284:	f007 fffc 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800b288:	f107 0308 	add.w	r3, r7, #8
 800b28c:	4618      	mov	r0, r3
 800b28e:	f005 fb69 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b292:	f005 f8d3 	bl	801043c <__cxa_end_catch>
 800b296:	e7db      	b.n	800b250 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
 800b298:	f107 0308 	add.w	r3, r7, #8
 800b29c:	4618      	mov	r0, r3
 800b29e:	f005 fb61 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b2a2:	f005 f8cb 	bl	801043c <__cxa_end_catch>
 800b2a6:	e7ff      	b.n	800b2a8 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
  vector<string> extractedArguments;
 800b2a8:	f107 0310 	add.w	r3, r7, #16
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f000 fe4b 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800b2b2:	f004 fbd6 	bl	800fa62 <__cxa_end_cleanup>
}
 800b2b6:	372c      	adds	r7, #44	; 0x2c
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd90      	pop	{r4, r7, pc}
 800b2bc:	08019840 	.word	0x08019840
 800b2c0:	080197cc 	.word	0x080197cc

0800b2c4 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandGraphLinear(std::string& command)
{
 800b2c4:	b590      	push	{r4, r7, lr}
 800b2c6:	b093      	sub	sp, #76	; 0x4c
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 5;
 800b2cc:	2305      	movs	r3, #5
 800b2ce:	647b      	str	r3, [r7, #68]	; 0x44
  
  int moduleNumberArgument = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	643b      	str	r3, [r7, #64]	; 0x40
  int signalCount = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  double startValue = 0;
 800b2d8:	f04f 0300 	mov.w	r3, #0
 800b2dc:	f04f 0400 	mov.w	r4, #0
 800b2e0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  double endValue = 0;
 800b2e4:	f04f 0300 	mov.w	r3, #0
 800b2e8:	f04f 0400 	mov.w	r4, #0
 800b2ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  double stepValue = 0;
 800b2f0:	f04f 0300 	mov.w	r3, #0
 800b2f4:	f04f 0400 	mov.w	r4, #0
 800b2f8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 800b2fc:	f107 0314 	add.w	r3, r7, #20
 800b300:	4618      	mov	r0, r3
 800b302:	f000 fe14 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b306:	f107 0314 	add.w	r3, r7, #20
 800b30a:	461a      	mov	r2, r3
 800b30c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f003 ff20 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d05b      	beq.n	800b3d2 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
  {
    try
    {
      moduleNumberArgument = std::stoi(extractedArguments.at(0));
 800b31a:	f107 0314 	add.w	r3, r7, #20
 800b31e:	2100      	movs	r1, #0
 800b320:	4618      	mov	r0, r3
 800b322:	f000 fe2c 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b326:	4603      	mov	r3, r0
 800b328:	220a      	movs	r2, #10
 800b32a:	2100      	movs	r1, #0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7ff fd21 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b332:	4603      	mov	r3, r0
 800b334:	643b      	str	r3, [r7, #64]	; 0x40
      signalCount = std::stoi(extractedArguments.at(1));
 800b336:	f107 0314 	add.w	r3, r7, #20
 800b33a:	2101      	movs	r1, #1
 800b33c:	4618      	mov	r0, r3
 800b33e:	f000 fe1e 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b342:	4603      	mov	r3, r0
 800b344:	220a      	movs	r2, #10
 800b346:	2100      	movs	r1, #0
 800b348:	4618      	mov	r0, r3
 800b34a:	f7ff fd13 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b34e:	4603      	mov	r3, r0
 800b350:	63fb      	str	r3, [r7, #60]	; 0x3c
      startValue = std::stod(extractedArguments.at(2));
 800b352:	f107 0314 	add.w	r3, r7, #20
 800b356:	2102      	movs	r1, #2
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 fe10 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b35e:	4603      	mov	r3, r0
 800b360:	2100      	movs	r1, #0
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff fd3c 	bl	800ade0 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800b368:	eeb0 7a40 	vmov.f32	s14, s0
 800b36c:	eef0 7a60 	vmov.f32	s15, s1
 800b370:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
      endValue = std::stod(extractedArguments.at(3));
 800b374:	f107 0314 	add.w	r3, r7, #20
 800b378:	2103      	movs	r1, #3
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 fdff 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b380:	4603      	mov	r3, r0
 800b382:	2100      	movs	r1, #0
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff fd2b 	bl	800ade0 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800b38a:	eeb0 7a40 	vmov.f32	s14, s0
 800b38e:	eef0 7a60 	vmov.f32	s15, s1
 800b392:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
      stepValue = std::stod(extractedArguments.at(4));
 800b396:	f107 0314 	add.w	r3, r7, #20
 800b39a:	2104      	movs	r1, #4
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fdee 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7ff fd1a 	bl	800ade0 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800b3ac:	eeb0 7a40 	vmov.f32	s14, s0
 800b3b0:	eef0 7a60 	vmov.f32	s15, s1
 800b3b4:	ed87 7b08 	vstr	d7, [r7, #32]
      
      printf("Invoking GenerateLinearGraph\n");
 800b3b8:	4821      	ldr	r0, [pc, #132]	; (800b440 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>)
 800b3ba:	f007 ff61 	bl	8013280 <puts>
      GenerateLinearGraph(moduleNumberArgument, signalCount, startValue, endValue, stepValue);
 800b3be:	ed97 2b08 	vldr	d2, [r7, #32]
 800b3c2:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800b3c6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800b3ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b3ce:	f001 fa09 	bl	800c7e4 <_Z19GenerateLinearGraphiiddd>
  vector<string> extractedArguments;
 800b3d2:	f107 0314 	add.w	r3, r7, #20
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 fdb6 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800b3dc:	e02c      	b.n	800b438 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x174>
 800b3de:	4604      	mov	r4, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d121      	bne.n	800b42a <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x166>
    catch(std::invalid_argument)
 800b3e6:	4623      	mov	r3, r4
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f004 ffe5 	bl	80103b8 <__cxa_get_exception_ptr>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	f107 030c 	add.w	r3, r7, #12
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff fd10 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800b3fc:	4623      	mov	r3, r4
 800b3fe:	4618      	mov	r0, r3
 800b400:	f004 ffdc 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800b404:	480f      	ldr	r0, [pc, #60]	; (800b444 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>)
 800b406:	f007 ff3b 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800b40a:	f107 030c 	add.w	r3, r7, #12
 800b40e:	4618      	mov	r0, r3
 800b410:	f005 faa8 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b414:	f005 f812 	bl	801043c <__cxa_end_catch>
 800b418:	e7db      	b.n	800b3d2 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
 800b41a:	f107 030c 	add.w	r3, r7, #12
 800b41e:	4618      	mov	r0, r3
 800b420:	f005 faa0 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b424:	f005 f80a 	bl	801043c <__cxa_end_catch>
 800b428:	e7ff      	b.n	800b42a <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x166>
  vector<string> extractedArguments;
 800b42a:	f107 0314 	add.w	r3, r7, #20
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 fd8a 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800b434:	f004 fb15 	bl	800fa62 <__cxa_end_cleanup>
}
 800b438:	374c      	adds	r7, #76	; 0x4c
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd90      	pop	{r4, r7, pc}
 800b43e:	bf00      	nop
 800b440:	0801985c 	.word	0x0801985c
 800b444:	080197cc 	.word	0x080197cc

0800b448 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandGraphSine(std::string& command)
{
 800b448:	b590      	push	{r4, r7, lr}
 800b44a:	b091      	sub	sp, #68	; 0x44
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 5;
 800b450:	2305      	movs	r3, #5
 800b452:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  int moduleNumberArgument = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	63bb      	str	r3, [r7, #56]	; 0x38
  int signalCount = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	637b      	str	r3, [r7, #52]	; 0x34
  int startDegrees = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	633b      	str	r3, [r7, #48]	; 0x30
  int stopDegrees = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	62fb      	str	r3, [r7, #44]	; 0x2c
  double amplitude = 0;
 800b464:	f04f 0300 	mov.w	r3, #0
 800b468:	f04f 0400 	mov.w	r4, #0
 800b46c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 800b470:	f107 0314 	add.w	r3, r7, #20
 800b474:	4618      	mov	r0, r3
 800b476:	f000 fd5a 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b47a:	f107 0314 	add.w	r3, r7, #20
 800b47e:	461a      	mov	r2, r3
 800b480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f003 fe66 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d053      	beq.n	800b536 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee>
  {
    try
    {
      moduleNumberArgument = std::stoi(extractedArguments.at(0));
 800b48e:	f107 0314 	add.w	r3, r7, #20
 800b492:	2100      	movs	r1, #0
 800b494:	4618      	mov	r0, r3
 800b496:	f000 fd72 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b49a:	4603      	mov	r3, r0
 800b49c:	220a      	movs	r2, #10
 800b49e:	2100      	movs	r1, #0
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff fc67 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	63bb      	str	r3, [r7, #56]	; 0x38
      signalCount = std::stoi(extractedArguments.at(1));
 800b4aa:	f107 0314 	add.w	r3, r7, #20
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 fd64 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	220a      	movs	r2, #10
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff fc59 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34
      startDegrees = std::stoi(extractedArguments.at(2));
 800b4c6:	f107 0314 	add.w	r3, r7, #20
 800b4ca:	2102      	movs	r1, #2
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f000 fd56 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	220a      	movs	r2, #10
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7ff fc4b 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	633b      	str	r3, [r7, #48]	; 0x30
      stopDegrees = std::stoi(extractedArguments.at(3));
 800b4e2:	f107 0314 	add.w	r3, r7, #20
 800b4e6:	2103      	movs	r1, #3
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 fd48 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	220a      	movs	r2, #10
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff fc3d 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      amplitude = std::stod(extractedArguments.at(4));
 800b4fe:	f107 0314 	add.w	r3, r7, #20
 800b502:	2104      	movs	r1, #4
 800b504:	4618      	mov	r0, r3
 800b506:	f000 fd3a 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2100      	movs	r1, #0
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff fc66 	bl	800ade0 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800b514:	eeb0 7a40 	vmov.f32	s14, s0
 800b518:	eef0 7a60 	vmov.f32	s15, s1
 800b51c:	ed87 7b08 	vstr	d7, [r7, #32]
      
      printf("Invoking GenerateSineGraph\n");
 800b520:	4820      	ldr	r0, [pc, #128]	; (800b5a4 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15c>)
 800b522:	f007 fead 	bl	8013280 <puts>
      GenerateSineGraph(moduleNumberArgument, signalCount, startDegrees, stopDegrees, amplitude);
 800b526:	ed97 0b08 	vldr	d0, [r7, #32]
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b52e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b532:	f001 fa65 	bl	800ca00 <_Z17GenerateSineGraphiiiid>
  vector<string> extractedArguments;
 800b536:	f107 0314 	add.w	r3, r7, #20
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 fd04 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800b540:	e02c      	b.n	800b59c <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x154>
 800b542:	4604      	mov	r4, r0
 800b544:	460b      	mov	r3, r1
 800b546:	2b01      	cmp	r3, #1
 800b548:	d121      	bne.n	800b58e <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x146>
    catch(std::invalid_argument)
 800b54a:	4623      	mov	r3, r4
 800b54c:	4618      	mov	r0, r3
 800b54e:	f004 ff33 	bl	80103b8 <__cxa_get_exception_ptr>
 800b552:	4602      	mov	r2, r0
 800b554:	f107 030c 	add.w	r3, r7, #12
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7ff fc5e 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800b560:	4623      	mov	r3, r4
 800b562:	4618      	mov	r0, r3
 800b564:	f004 ff2a 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800b568:	480f      	ldr	r0, [pc, #60]	; (800b5a8 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>)
 800b56a:	f007 fe89 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800b56e:	f107 030c 	add.w	r3, r7, #12
 800b572:	4618      	mov	r0, r3
 800b574:	f005 f9f6 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b578:	f004 ff60 	bl	801043c <__cxa_end_catch>
 800b57c:	e7db      	b.n	800b536 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee>
 800b57e:	f107 030c 	add.w	r3, r7, #12
 800b582:	4618      	mov	r0, r3
 800b584:	f005 f9ee 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b588:	f004 ff58 	bl	801043c <__cxa_end_catch>
 800b58c:	e7ff      	b.n	800b58e <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x146>
  vector<string> extractedArguments;
 800b58e:	f107 0314 	add.w	r3, r7, #20
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fcd8 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800b598:	f004 fa63 	bl	800fa62 <__cxa_end_cleanup>
}
 800b59c:	3744      	adds	r7, #68	; 0x44
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd90      	pop	{r4, r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	0801987c 	.word	0x0801987c
 800b5a8:	080197cc 	.word	0x080197cc

0800b5ac <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandGraphSquare(std::string& command)
{
 800b5ac:	b590      	push	{r4, r7, lr}
 800b5ae:	b093      	sub	sp, #76	; 0x4c
 800b5b0:	af02      	add	r7, sp, #8
 800b5b2:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 6;
 800b5b4:	2306      	movs	r3, #6
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  int moduleNumberArgument = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	63bb      	str	r3, [r7, #56]	; 0x38
  int signalCount = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	637b      	str	r3, [r7, #52]	; 0x34
  int startValue = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	633b      	str	r3, [r7, #48]	; 0x30
  int stopValue = 0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  double amplitude = 0;
 800b5c8:	f04f 0300 	mov.w	r3, #0
 800b5cc:	f04f 0400 	mov.w	r4, #0
 800b5d0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int period = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	61fb      	str	r3, [r7, #28]
  
  vector<string> extractedArguments;
 800b5d8:	f107 0310 	add.w	r3, r7, #16
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 fca6 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b5e2:	f107 0310 	add.w	r3, r7, #16
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f003 fdb2 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d063      	beq.n	800b6be <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x112>
  {
    try
    {
      moduleNumberArgument = std::stoi(extractedArguments.at(0));
 800b5f6:	f107 0310 	add.w	r3, r7, #16
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 fcbe 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b602:	4603      	mov	r3, r0
 800b604:	220a      	movs	r2, #10
 800b606:	2100      	movs	r1, #0
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fbb3 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b60e:	4603      	mov	r3, r0
 800b610:	63bb      	str	r3, [r7, #56]	; 0x38
      signalCount = std::stoi(extractedArguments.at(1));
 800b612:	f107 0310 	add.w	r3, r7, #16
 800b616:	2101      	movs	r1, #1
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 fcb0 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b61e:	4603      	mov	r3, r0
 800b620:	220a      	movs	r2, #10
 800b622:	2100      	movs	r1, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f7ff fba5 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b62a:	4603      	mov	r3, r0
 800b62c:	637b      	str	r3, [r7, #52]	; 0x34
      startValue = std::stoi(extractedArguments.at(2));
 800b62e:	f107 0310 	add.w	r3, r7, #16
 800b632:	2102      	movs	r1, #2
 800b634:	4618      	mov	r0, r3
 800b636:	f000 fca2 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b63a:	4603      	mov	r3, r0
 800b63c:	220a      	movs	r2, #10
 800b63e:	2100      	movs	r1, #0
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff fb97 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b646:	4603      	mov	r3, r0
 800b648:	633b      	str	r3, [r7, #48]	; 0x30
      stopValue = std::stoi(extractedArguments.at(3));
 800b64a:	f107 0310 	add.w	r3, r7, #16
 800b64e:	2103      	movs	r1, #3
 800b650:	4618      	mov	r0, r3
 800b652:	f000 fc94 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b656:	4603      	mov	r3, r0
 800b658:	220a      	movs	r2, #10
 800b65a:	2100      	movs	r1, #0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7ff fb89 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b662:	4603      	mov	r3, r0
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
      amplitude = std::stod(extractedArguments.at(4));
 800b666:	f107 0310 	add.w	r3, r7, #16
 800b66a:	2104      	movs	r1, #4
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 fc86 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b672:	4603      	mov	r3, r0
 800b674:	2100      	movs	r1, #0
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff fbb2 	bl	800ade0 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800b67c:	eeb0 7a40 	vmov.f32	s14, s0
 800b680:	eef0 7a60 	vmov.f32	s15, s1
 800b684:	ed87 7b08 	vstr	d7, [r7, #32]
      period = std::stoi(extractedArguments.at(5));
 800b688:	f107 0310 	add.w	r3, r7, #16
 800b68c:	2105      	movs	r1, #5
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 fc75 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b694:	4603      	mov	r3, r0
 800b696:	220a      	movs	r2, #10
 800b698:	2100      	movs	r1, #0
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff fb6a 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	61fb      	str	r3, [r7, #28]
      
      printf("Invoking GenerateSquareGraph\n");
 800b6a4:	4821      	ldr	r0, [pc, #132]	; (800b72c <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>)
 800b6a6:	f007 fdeb 	bl	8013280 <puts>
      GenerateSquareGraph(moduleNumberArgument, signalCount, startValue, stopValue, amplitude, period);
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	ed97 0b08 	vldr	d0, [r7, #32]
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6ba:	f001 faa1 	bl	800cc00 <_Z19GenerateSquareGraphiiiidi>
  vector<string> extractedArguments;
 800b6be:	f107 0310 	add.w	r3, r7, #16
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 fc40 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800b6c8:	e02c      	b.n	800b724 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d121      	bne.n	800b716 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16a>
    catch(std::invalid_argument)
 800b6d2:	4623      	mov	r3, r4
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f004 fe6f 	bl	80103b8 <__cxa_get_exception_ptr>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	f107 0308 	add.w	r3, r7, #8
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff fb9a 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800b6e8:	4623      	mov	r3, r4
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f004 fe66 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800b6f0:	480f      	ldr	r0, [pc, #60]	; (800b730 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x184>)
 800b6f2:	f007 fdc5 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800b6f6:	f107 0308 	add.w	r3, r7, #8
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f005 f932 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b700:	f004 fe9c 	bl	801043c <__cxa_end_catch>
 800b704:	e7db      	b.n	800b6be <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x112>
 800b706:	f107 0308 	add.w	r3, r7, #8
 800b70a:	4618      	mov	r0, r3
 800b70c:	f005 f92a 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b710:	f004 fe94 	bl	801043c <__cxa_end_catch>
 800b714:	e7ff      	b.n	800b716 <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16a>
  vector<string> extractedArguments;
 800b716:	f107 0310 	add.w	r3, r7, #16
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 fc14 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800b720:	f004 f99f 	bl	800fa62 <__cxa_end_cleanup>
}
 800b724:	3744      	adds	r7, #68	; 0x44
 800b726:	46bd      	mov	sp, r7
 800b728:	bd90      	pop	{r4, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	08019898 	.word	0x08019898
 800b730:	080197cc 	.word	0x080197cc

0800b734 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSendWrongCrc(std::string& command)
{
 800b734:	b590      	push	{r4, r7, lr}
 800b736:	b08b      	sub	sp, #44	; 0x2c
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 1;
 800b73c:	2301      	movs	r3, #1
 800b73e:	627b      	str	r3, [r7, #36]	; 0x24
  
  int moduleNumberArgument = 0;
 800b740:	2300      	movs	r3, #0
 800b742:	623b      	str	r3, [r7, #32]
  
  vector<string> extractedArguments;
 800b744:	f107 0314 	add.w	r3, r7, #20
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fbf0 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b74e:	f107 0314 	add.w	r3, r7, #20
 800b752:	461a      	mov	r2, r3
 800b754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f003 fcfc 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d013      	beq.n	800b78a <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
  {
    try
    {
      moduleNumberArgument = std::stoi(extractedArguments.at(0));
 800b762:	f107 0314 	add.w	r3, r7, #20
 800b766:	2100      	movs	r1, #0
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fc08 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b76e:	4603      	mov	r3, r0
 800b770:	220a      	movs	r2, #10
 800b772:	2100      	movs	r1, #0
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff fafd 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b77a:	4603      	mov	r3, r0
 800b77c:	623b      	str	r3, [r7, #32]
      
      printf("Invoking SendWrongCrc\n");
 800b77e:	481e      	ldr	r0, [pc, #120]	; (800b7f8 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 800b780:	f007 fd7e 	bl	8013280 <puts>
      SendWrongCrc(moduleNumberArgument);
 800b784:	6a38      	ldr	r0, [r7, #32]
 800b786:	f001 fb7d 	bl	800ce84 <_Z12SendWrongCrci>
  vector<string> extractedArguments;
 800b78a:	f107 0314 	add.w	r3, r7, #20
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fbda 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800b794:	e02c      	b.n	800b7f0 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 800b796:	4604      	mov	r4, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d121      	bne.n	800b7e2 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
    catch(std::invalid_argument)
 800b79e:	4623      	mov	r3, r4
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f004 fe09 	bl	80103b8 <__cxa_get_exception_ptr>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	f107 030c 	add.w	r3, r7, #12
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7ff fb34 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800b7b4:	4623      	mov	r3, r4
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f004 fe00 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800b7bc:	480f      	ldr	r0, [pc, #60]	; (800b7fc <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 800b7be:	f007 fd5f 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800b7c2:	f107 030c 	add.w	r3, r7, #12
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f005 f8cc 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b7cc:	f004 fe36 	bl	801043c <__cxa_end_catch>
 800b7d0:	e7db      	b.n	800b78a <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
 800b7d2:	f107 030c 	add.w	r3, r7, #12
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f005 f8c4 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b7dc:	f004 fe2e 	bl	801043c <__cxa_end_catch>
 800b7e0:	e7ff      	b.n	800b7e2 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
  vector<string> extractedArguments;
 800b7e2:	f107 0314 	add.w	r3, r7, #20
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 fbae 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800b7ec:	f004 f939 	bl	800fa62 <__cxa_end_cleanup>
}
 800b7f0:	372c      	adds	r7, #44	; 0x2c
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd90      	pop	{r4, r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	080198b8 	.word	0x080198b8
 800b7fc:	080197cc 	.word	0x080197cc

0800b800 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandGetParameters(std::string& command)
{
 800b800:	b590      	push	{r4, r7, lr}
 800b802:	b08b      	sub	sp, #44	; 0x2c
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 1;
 800b808:	2301      	movs	r3, #1
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
  
  int getParametersModuleNumberArgument = 0;
 800b80c:	2300      	movs	r3, #0
 800b80e:	623b      	str	r3, [r7, #32]
  
  vector<string> extractedArguments;
 800b810:	f107 0314 	add.w	r3, r7, #20
 800b814:	4618      	mov	r0, r3
 800b816:	f000 fb8a 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b81a:	f107 0314 	add.w	r3, r7, #20
 800b81e:	461a      	mov	r2, r3
 800b820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f003 fc96 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d013      	beq.n	800b856 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
  {    
    try
    {
      getParametersModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800b82e:	f107 0314 	add.w	r3, r7, #20
 800b832:	2100      	movs	r1, #0
 800b834:	4618      	mov	r0, r3
 800b836:	f000 fba2 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b83a:	4603      	mov	r3, r0
 800b83c:	220a      	movs	r2, #10
 800b83e:	2100      	movs	r1, #0
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff fa97 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b846:	4603      	mov	r3, r0
 800b848:	623b      	str	r3, [r7, #32]
      
      printf("Invoking GetParameters\n");
 800b84a:	481e      	ldr	r0, [pc, #120]	; (800b8c4 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 800b84c:	f007 fd18 	bl	8013280 <puts>
      GetParameters(getParametersModuleNumberArgument);
 800b850:	6a38      	ldr	r0, [r7, #32]
 800b852:	f001 fb51 	bl	800cef8 <_Z13GetParametersi>
  vector<string> extractedArguments;
 800b856:	f107 0314 	add.w	r3, r7, #20
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 fb74 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800b860:	e02c      	b.n	800b8bc <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 800b862:	4604      	mov	r4, r0
 800b864:	460b      	mov	r3, r1
 800b866:	2b01      	cmp	r3, #1
 800b868:	d121      	bne.n	800b8ae <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
    catch(std::invalid_argument)
 800b86a:	4623      	mov	r3, r4
 800b86c:	4618      	mov	r0, r3
 800b86e:	f004 fda3 	bl	80103b8 <__cxa_get_exception_ptr>
 800b872:	4602      	mov	r2, r0
 800b874:	f107 030c 	add.w	r3, r7, #12
 800b878:	4611      	mov	r1, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7ff face 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800b880:	4623      	mov	r3, r4
 800b882:	4618      	mov	r0, r3
 800b884:	f004 fd9a 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800b888:	480f      	ldr	r0, [pc, #60]	; (800b8c8 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 800b88a:	f007 fcf9 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800b88e:	f107 030c 	add.w	r3, r7, #12
 800b892:	4618      	mov	r0, r3
 800b894:	f005 f866 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b898:	f004 fdd0 	bl	801043c <__cxa_end_catch>
 800b89c:	e7db      	b.n	800b856 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x56>
 800b89e:	f107 030c 	add.w	r3, r7, #12
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f005 f85e 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b8a8:	f004 fdc8 	bl	801043c <__cxa_end_catch>
 800b8ac:	e7ff      	b.n	800b8ae <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
  vector<string> extractedArguments;
 800b8ae:	f107 0314 	add.w	r3, r7, #20
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 fb48 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800b8b8:	f004 f8d3 	bl	800fa62 <__cxa_end_cleanup>
}
 800b8bc:	372c      	adds	r7, #44	; 0x2c
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd90      	pop	{r4, r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	080198d0 	.word	0x080198d0
 800b8c8:	080197cc 	.word	0x080197cc

0800b8cc <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandAdc1(std::string& command)
{
 800b8cc:	b590      	push	{r4, r7, lr}
 800b8ce:	b08b      	sub	sp, #44	; 0x2c
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	627b      	str	r3, [r7, #36]	; 0x24
  
  int adcModuleNumberArgument = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	623b      	str	r3, [r7, #32]
  int adcPacketCountNumberArgument = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	61fb      	str	r3, [r7, #28]
  
  vector<string> extractedArguments;
 800b8e0:	f107 0310 	add.w	r3, r7, #16
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f000 fb22 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b8ea:	f107 0310 	add.w	r3, r7, #16
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f003 fc2e 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d022      	beq.n	800b944 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
  {    
    try
    {
      adcModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800b8fe:	f107 0310 	add.w	r3, r7, #16
 800b902:	2100      	movs	r1, #0
 800b904:	4618      	mov	r0, r3
 800b906:	f000 fb3a 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b90a:	4603      	mov	r3, r0
 800b90c:	220a      	movs	r2, #10
 800b90e:	2100      	movs	r1, #0
 800b910:	4618      	mov	r0, r3
 800b912:	f7ff fa2f 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b916:	4603      	mov	r3, r0
 800b918:	623b      	str	r3, [r7, #32]
      adcPacketCountNumberArgument = std::stoi(extractedArguments.at(1));
 800b91a:	f107 0310 	add.w	r3, r7, #16
 800b91e:	2101      	movs	r1, #1
 800b920:	4618      	mov	r0, r3
 800b922:	f000 fb2c 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b926:	4603      	mov	r3, r0
 800b928:	220a      	movs	r2, #10
 800b92a:	2100      	movs	r1, #0
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff fa21 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800b932:	4603      	mov	r3, r0
 800b934:	61fb      	str	r3, [r7, #28]
      
      printf("Invoking SendAdcToGraphScreen\n");
 800b936:	481e      	ldr	r0, [pc, #120]	; (800b9b0 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 800b938:	f007 fca2 	bl	8013280 <puts>
      SendAdcToGraphScreen(adcModuleNumberArgument, adcPacketCountNumberArgument);
 800b93c:	69f9      	ldr	r1, [r7, #28]
 800b93e:	6a38      	ldr	r0, [r7, #32]
 800b940:	f001 fb38 	bl	800cfb4 <_Z20SendAdcToGraphScreenii>
  vector<string> extractedArguments;
 800b944:	f107 0310 	add.w	r3, r7, #16
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fafd 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800b94e:	e02c      	b.n	800b9aa <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
 800b950:	4604      	mov	r4, r0
 800b952:	460b      	mov	r3, r1
 800b954:	2b01      	cmp	r3, #1
 800b956:	d121      	bne.n	800b99c <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
    catch(std::invalid_argument)
 800b958:	4623      	mov	r3, r4
 800b95a:	4618      	mov	r0, r3
 800b95c:	f004 fd2c 	bl	80103b8 <__cxa_get_exception_ptr>
 800b960:	4602      	mov	r2, r0
 800b962:	f107 0308 	add.w	r3, r7, #8
 800b966:	4611      	mov	r1, r2
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff fa57 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800b96e:	4623      	mov	r3, r4
 800b970:	4618      	mov	r0, r3
 800b972:	f004 fd23 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800b976:	480f      	ldr	r0, [pc, #60]	; (800b9b4 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>)
 800b978:	f007 fc82 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800b97c:	f107 0308 	add.w	r3, r7, #8
 800b980:	4618      	mov	r0, r3
 800b982:	f004 ffef 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b986:	f004 fd59 	bl	801043c <__cxa_end_catch>
 800b98a:	e7db      	b.n	800b944 <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
 800b98c:	f107 0308 	add.w	r3, r7, #8
 800b990:	4618      	mov	r0, r3
 800b992:	f004 ffe7 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800b996:	f004 fd51 	bl	801043c <__cxa_end_catch>
 800b99a:	e7ff      	b.n	800b99c <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
  vector<string> extractedArguments;
 800b99c:	f107 0310 	add.w	r3, r7, #16
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 fad1 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800b9a6:	f004 f85c 	bl	800fa62 <__cxa_end_cleanup>
}
 800b9aa:	372c      	adds	r7, #44	; 0x2c
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd90      	pop	{r4, r7, pc}
 800b9b0:	080198e8 	.word	0x080198e8
 800b9b4:	080197cc 	.word	0x080197cc

0800b9b8 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandAdc2(std::string& command)
{
 800b9b8:	b590      	push	{r4, r7, lr}
 800b9ba:	b08b      	sub	sp, #44	; 0x2c
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 2;
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24
  
  int adcModuleNumberArgument = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	623b      	str	r3, [r7, #32]
  int adcPacketCountNumberArgument = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	61fb      	str	r3, [r7, #28]
  
  vector<string> extractedArguments;
 800b9cc:	f107 0310 	add.w	r3, r7, #16
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f000 faac 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800b9d6:	f107 0310 	add.w	r3, r7, #16
 800b9da:	461a      	mov	r2, r3
 800b9dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f003 fbb8 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d022      	beq.n	800ba30 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
  {    
    try
    {
      adcModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800b9ea:	f107 0310 	add.w	r3, r7, #16
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 fac4 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	220a      	movs	r2, #10
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7ff f9b9 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800ba02:	4603      	mov	r3, r0
 800ba04:	623b      	str	r3, [r7, #32]
      adcPacketCountNumberArgument = std::stoi(extractedArguments.at(1));
 800ba06:	f107 0310 	add.w	r3, r7, #16
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 fab6 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800ba12:	4603      	mov	r3, r0
 800ba14:	220a      	movs	r2, #10
 800ba16:	2100      	movs	r1, #0
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7ff f9ab 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	61fb      	str	r3, [r7, #28]
      
      printf("Invoking SendAdcToDataScreen\n");
 800ba22:	481e      	ldr	r0, [pc, #120]	; (800ba9c <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 800ba24:	f007 fc2c 	bl	8013280 <puts>
      SendAdcToDataScreen(adcModuleNumberArgument, adcPacketCountNumberArgument);
 800ba28:	69f9      	ldr	r1, [r7, #28]
 800ba2a:	6a38      	ldr	r0, [r7, #32]
 800ba2c:	f001 fbb4 	bl	800d198 <_Z19SendAdcToDataScreenii>
  vector<string> extractedArguments;
 800ba30:	f107 0310 	add.w	r3, r7, #16
 800ba34:	4618      	mov	r0, r3
 800ba36:	f000 fa87 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
}
 800ba3a:	e02c      	b.n	800ba96 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	460b      	mov	r3, r1
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d121      	bne.n	800ba88 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
    catch(std::invalid_argument)
 800ba44:	4623      	mov	r3, r4
 800ba46:	4618      	mov	r0, r3
 800ba48:	f004 fcb6 	bl	80103b8 <__cxa_get_exception_ptr>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	f107 0308 	add.w	r3, r7, #8
 800ba52:	4611      	mov	r1, r2
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7ff f9e1 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800ba5a:	4623      	mov	r3, r4
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f004 fcad 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800ba62:	480f      	ldr	r0, [pc, #60]	; (800baa0 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>)
 800ba64:	f007 fc0c 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800ba68:	f107 0308 	add.w	r3, r7, #8
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f004 ff79 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800ba72:	f004 fce3 	bl	801043c <__cxa_end_catch>
 800ba76:	e7db      	b.n	800ba30 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
 800ba78:	f107 0308 	add.w	r3, r7, #8
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f004 ff71 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800ba82:	f004 fcdb 	bl	801043c <__cxa_end_catch>
 800ba86:	e7ff      	b.n	800ba88 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
  vector<string> extractedArguments;
 800ba88:	f107 0310 	add.w	r3, r7, #16
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 fa5b 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800ba92:	f003 ffe6 	bl	800fa62 <__cxa_end_cleanup>
}
 800ba96:	372c      	adds	r7, #44	; 0x2c
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd90      	pop	{r4, r7, pc}
 800ba9c:	08019908 	.word	0x08019908
 800baa0:	080197cc 	.word	0x080197cc

0800baa4 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void CommandSendPacket(std::string& command)
{
 800baa4:	b590      	push	{r4, r7, lr}
 800baa6:	b08f      	sub	sp, #60	; 0x3c
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  int requiredArgumentsCount = 3;
 800baac:	2303      	movs	r3, #3
 800baae:	637b      	str	r3, [r7, #52]	; 0x34
  
  int sendPacketModuleNumberArgument = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	633b      	str	r3, [r7, #48]	; 0x30
  char sendPacketParameterNumberArgument = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  double sendPacketValueArgument = 0;
 800baba:	f04f 0300 	mov.w	r3, #0
 800babe:	f04f 0400 	mov.w	r4, #0
 800bac2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  
  vector<string> extractedArguments;
 800bac6:	f107 0314 	add.w	r3, r7, #20
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 fa2f 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
  
  if(ExtractArguments(command, requiredArgumentsCount, extractedArguments))
 800bad0:	f107 0314 	add.w	r3, r7, #20
 800bad4:	461a      	mov	r2, r3
 800bad6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f003 fb3b 	bl	800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d038      	beq.n	800bb56 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb2>
  {
    try
    {
      sendPacketModuleNumberArgument = std::stoi(extractedArguments.at(0));
 800bae4:	f107 0314 	add.w	r3, r7, #20
 800bae8:	2100      	movs	r1, #0
 800baea:	4618      	mov	r0, r3
 800baec:	f000 fa47 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800baf0:	4603      	mov	r3, r0
 800baf2:	220a      	movs	r2, #10
 800baf4:	2100      	movs	r1, #0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff f93c 	bl	800ad74 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800bafc:	4603      	mov	r3, r0
 800bafe:	633b      	str	r3, [r7, #48]	; 0x30
      sendPacketParameterNumberArgument = extractedArguments.at(1).at(0);
 800bb00:	f107 0314 	add.w	r3, r7, #20
 800bb04:	2101      	movs	r1, #1
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 fa39 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f005 fa25 	bl	8010f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj>
 800bb16:	4603      	mov	r3, r0
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      sendPacketValueArgument = std::stod(extractedArguments.at(2));
 800bb1e:	f107 0314 	add.w	r3, r7, #20
 800bb22:	2102      	movs	r1, #2
 800bb24:	4618      	mov	r0, r3
 800bb26:	f000 fa2a 	bl	800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff f956 	bl	800ade0 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800bb34:	eeb0 7a40 	vmov.f32	s14, s0
 800bb38:	eef0 7a60 	vmov.f32	s15, s1
 800bb3c:	ed87 7b08 	vstr	d7, [r7, #32]
      
      printf("Invoking SendCustomPacket\n");
 800bb40:	4820      	ldr	r0, [pc, #128]	; (800bbc4 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>)
 800bb42:	f007 fb9d 	bl	8013280 <puts>
      SendCustomPacket(sendPacketModuleNumberArgument, sendPacketParameterNumberArgument, sendPacketValueArgument);
 800bb46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb4a:	ed97 0b08 	vldr	d0, [r7, #32]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb52:	f001 fc21 	bl	800d398 <_Z16SendCustomPacketicd>
  vector<string> extractedArguments;
 800bb56:	f107 0314 	add.w	r3, r7, #20
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 f9f4 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    catch(std::invalid_argument)
    {
      printf("ERROR, Invalid argument, aborting\n");
    }
  }
 800bb60:	e02c      	b.n	800bbbc <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x118>
 800bb62:	4604      	mov	r4, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d121      	bne.n	800bbae <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10a>
    catch(std::invalid_argument)
 800bb6a:	4623      	mov	r3, r4
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f004 fc23 	bl	80103b8 <__cxa_get_exception_ptr>
 800bb72:	4602      	mov	r2, r0
 800bb74:	f107 030c 	add.w	r3, r7, #12
 800bb78:	4611      	mov	r1, r2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff f94e 	bl	800ae1c <_ZNSt16invalid_argumentC1ERKS_>
 800bb80:	4623      	mov	r3, r4
 800bb82:	4618      	mov	r0, r3
 800bb84:	f004 fc1a 	bl	80103bc <__cxa_begin_catch>
      printf("ERROR, Invalid argument, aborting\n");
 800bb88:	480f      	ldr	r0, [pc, #60]	; (800bbc8 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x124>)
 800bb8a:	f007 fb79 	bl	8013280 <puts>
    catch(std::invalid_argument)
 800bb8e:	f107 030c 	add.w	r3, r7, #12
 800bb92:	4618      	mov	r0, r3
 800bb94:	f004 fee6 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800bb98:	f004 fc50 	bl	801043c <__cxa_end_catch>
 800bb9c:	e7db      	b.n	800bb56 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb2>
 800bb9e:	f107 030c 	add.w	r3, r7, #12
 800bba2:	4618      	mov	r0, r3
 800bba4:	f004 fede 	bl	8010964 <_ZNSt16invalid_argumentD1Ev>
 800bba8:	f004 fc48 	bl	801043c <__cxa_end_catch>
 800bbac:	e7ff      	b.n	800bbae <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10a>
  vector<string> extractedArguments;
 800bbae:	f107 0314 	add.w	r3, r7, #20
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 f9c8 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800bbb8:	f003 ff53 	bl	800fa62 <__cxa_end_cleanup>
 800bbbc:	373c      	adds	r7, #60	; 0x3c
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd90      	pop	{r4, r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	08019928 	.word	0x08019928
 800bbc8:	080197cc 	.word	0x080197cc

0800bbcc <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	f006 fdd0 	bl	8012778 <__errno>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	601a      	str	r2, [r3, #0]
 800bbe0:	f006 fdca 	bl	8012778 <__errno>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	6013      	str	r3, [r2, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4618      	mov	r0, r3
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	f006 fdbc 	bl	8012778 <__errno>
 800bc00:	4603      	mov	r3, r0
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	bf0c      	ite	eq
 800bc08:	2301      	moveq	r3, #1
 800bc0a:	2300      	movne	r3, #0
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d005      	beq.n	800bc1e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 800bc12:	f006 fdb1 	bl	8012778 <__errno>
 800bc16:	4602      	mov	r2, r0
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 800bc32:	2300      	movs	r3, #0
	  }
 800bc34:	4618      	mov	r0, r3
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800bc40:	b590      	push	{r4, r7, lr}
 800bc42:	b08b      	sub	sp, #44	; 0x2c
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800bc4e:	f107 0314 	add.w	r3, r7, #20
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7ff ffba 	bl	800bbcc <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800bc58:	f107 0118 	add.w	r1, r7, #24
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	4798      	blx	r3
 800bc64:	4603      	mov	r3, r0
 800bc66:	627b      	str	r3, [r7, #36]	; 0x24

      if (__endptr == __str)
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d102      	bne.n	800bc76 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 800bc70:	68b8      	ldr	r0, [r7, #8]
 800bc72:	f004 ffe5 	bl	8010c40 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800bc76:	f006 fd7f 	bl	8012778 <__errno>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800bc7e:	2b22      	cmp	r3, #34	; 0x22
 800bc80:	d006      	beq.n	800bc90 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x50>
 800bc82:	4621      	mov	r1, r4
 800bc84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc86:	f7ff ffcf 	bl	800bc28 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 800bc90:	2301      	movs	r3, #1
 800bc92:	e000      	b.n	800bc96 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 800bc94:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d002      	beq.n	800bca0 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x60>
	std::__throw_out_of_range(__name);
 800bc9a:	68b8      	ldr	r0, [r7, #8]
 800bc9c:	f005 f800 	bl	8010ca0 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	623b      	str	r3, [r7, #32]

      if (__idx)
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d006      	beq.n	800bcb8 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x78>
	*__idx = __endptr - __str;
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	461a      	mov	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	601a      	str	r2, [r3, #0]

      return __ret;
 800bcb8:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 800bcba:	f107 0314 	add.w	r3, r7, #20
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff ff98 	bl	800bbf4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800bcc4:	4623      	mov	r3, r4
 800bcc6:	e006      	b.n	800bcd6 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x96>
      } const __save_errno;
 800bcc8:	f107 0314 	add.w	r3, r7, #20
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff ff91 	bl	800bbf4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
 800bcd2:	f003 fec6 	bl	800fa62 <__cxa_end_cleanup>
    }
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	372c      	adds	r7, #44	; 0x2c
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd90      	pop	{r4, r7, pc}

0800bcde <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b082      	sub	sp, #8
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	f006 fd47 	bl	8012778 <__errno>
 800bcea:	4603      	mov	r3, r0
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	f006 fd41 	bl	8012778 <__errno>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	6013      	str	r3, [r2, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b082      	sub	sp, #8
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	f006 fd33 	bl	8012778 <__errno>
 800bd12:	4603      	mov	r3, r0
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	bf0c      	ite	eq
 800bd1a:	2301      	moveq	r3, #1
 800bd1c:	2300      	movne	r3, #0
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d005      	beq.n	800bd30 <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 800bd24:	f006 fd28 	bl	8012778 <__errno>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4618      	mov	r0, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkExSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 800bd3a:	b480      	push	{r7}
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800bd44:	713a      	strb	r2, [r7, #4]
 800bd46:	2300      	movs	r3, #0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800bd54:	b5b0      	push	{r4, r5, r7, lr}
 800bd56:	b08c      	sub	sp, #48	; 0x30
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800bd62:	f107 0314 	add.w	r3, r7, #20
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff ffb9 	bl	800bcde <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800bd6c:	f107 0118 	add.w	r1, r7, #24
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	4798      	blx	r3
 800bd78:	4603      	mov	r3, r0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      if (__endptr == __str)
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d102      	bne.n	800bd8e <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x3a>
	std::__throw_invalid_argument(__name);
 800bd88:	68b8      	ldr	r0, [r7, #8]
 800bd8a:	f004 ff59 	bl	8010c40 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800bd8e:	f006 fcf3 	bl	8012778 <__errno>
 800bd92:	4603      	mov	r3, r0
 800bd94:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800bd96:	2b22      	cmp	r3, #34	; 0x22
 800bd98:	d007      	beq.n	800bdaa <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 800bd9a:	462a      	mov	r2, r5
 800bd9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bda0:	f7ff ffcb 	bl	800bd3a <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkExSt17integral_constantIbLb0EE>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5a>
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e000      	b.n	800bdb0 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5c>
 800bdae:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d002      	beq.n	800bdba <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x66>
	std::__throw_out_of_range(__name);
 800bdb4:	68b8      	ldr	r0, [r7, #8]
 800bdb6:	f004 ff73 	bl	8010ca0 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 800bdba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800bdbe:	e9c7 3408 	strd	r3, r4, [r7, #32]
      if (__idx)
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d006      	beq.n	800bdd6 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x82>
	*__idx = __endptr - __str;
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	601a      	str	r2, [r3, #0]
      return __ret;
 800bdd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
      } const __save_errno;
 800bdda:	f107 0314 	add.w	r3, r7, #20
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff ff91 	bl	800bd06 <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800bde4:	4623      	mov	r3, r4
 800bde6:	462c      	mov	r4, r5
 800bde8:	e006      	b.n	800bdf8 <_ZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0xa4>
      } const __save_errno;
 800bdea:	f107 0314 	add.w	r3, r7, #20
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff ff89 	bl	800bd06 <_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
 800bdf4:	f003 fe35 	bl	800fa62 <__cxa_end_cleanup>
    }
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	3730      	adds	r7, #48	; 0x30
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bdb0      	pop	{r4, r5, r7, pc}

0800be02 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 800be02:	b580      	push	{r7, lr}
 800be04:	b082      	sub	sp, #8
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	f006 fcb5 	bl	8012778 <__errno>
 800be0e:	4603      	mov	r3, r0
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	f006 fcaf 	bl	8012778 <__errno>
 800be1a:	4602      	mov	r2, r0
 800be1c:	2300      	movs	r3, #0
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4618      	mov	r0, r3
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b082      	sub	sp, #8
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	f006 fca1 	bl	8012778 <__errno>
 800be36:	4603      	mov	r3, r0
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	bf0c      	ite	eq
 800be3e:	2301      	moveq	r3, #1
 800be40:	2300      	movne	r3, #0
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b00      	cmp	r3, #0
 800be46:	d005      	beq.n	800be54 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 800be48:	f006 fc96 	bl	8012778 <__errno>
 800be4c:	4602      	mov	r2, r0
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6013      	str	r3, [r2, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 800be5e:	b480      	push	{r7}
 800be60:	b085      	sub	sp, #20
 800be62:	af00      	add	r7, sp, #0
 800be64:	ed87 0b02 	vstr	d0, [r7, #8]
 800be68:	7138      	strb	r0, [r7, #4]
 800be6a:	2300      	movs	r3, #0
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800be78:	b5b0      	push	{r4, r5, r7, lr}
 800be7a:	b08c      	sub	sp, #48	; 0x30
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
 800be84:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800be86:	f107 0314 	add.w	r3, r7, #20
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff ffb9 	bl	800be02 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800be90:	f107 0218 	add.w	r2, r7, #24
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	4611      	mov	r1, r2
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	4798      	blx	r3
 800be9c:	eeb0 7a40 	vmov.f32	s14, s0
 800bea0:	eef0 7a60 	vmov.f32	s15, s1
 800bea4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
      if (__endptr == __str)
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	429a      	cmp	r2, r3
 800beae:	d102      	bne.n	800beb6 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x3e>
	std::__throw_invalid_argument(__name);
 800beb0:	68b8      	ldr	r0, [r7, #8]
 800beb2:	f004 fec5 	bl	8010c40 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800beb6:	f006 fc5f 	bl	8012778 <__errno>
 800beba:	4603      	mov	r3, r0
 800bebc:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800bebe:	2b22      	cmp	r3, #34	; 0x22
 800bec0:	d007      	beq.n	800bed2 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5a>
 800bec2:	4620      	mov	r0, r4
 800bec4:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800bec8:	f7ff ffc9 	bl	800be5e <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
 800bed2:	2301      	movs	r3, #1
 800bed4:	e000      	b.n	800bed8 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x60>
 800bed6:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x6a>
	std::__throw_out_of_range(__name);
 800bedc:	68b8      	ldr	r0, [r7, #8]
 800bede:	f004 fedf 	bl	8010ca0 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 800bee2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800bee6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      if (__idx)
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d006      	beq.n	800befe <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x86>
	*__idx = __endptr - __str;
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	461a      	mov	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	461a      	mov	r2, r3
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	601a      	str	r2, [r3, #0]
      return __ret;
 800befe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
      } const __save_errno;
 800bf02:	f107 0314 	add.w	r3, r7, #20
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7ff ff8f 	bl	800be2a <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800bf0c:	ec45 4b17 	vmov	d7, r4, r5
 800bf10:	e006      	b.n	800bf20 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0xa8>
      } const __save_errno;
 800bf12:	f107 0314 	add.w	r3, r7, #20
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7ff ff87 	bl	800be2a <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
 800bf1c:	f003 fda1 	bl	800fa62 <__cxa_end_cleanup>
    }
 800bf20:	eeb0 0a47 	vmov.f32	s0, s14
 800bf24:	eef0 0a67 	vmov.f32	s1, s15
 800bf28:	3730      	adds	r7, #48	; 0x30
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bdb0      	pop	{r4, r5, r7, pc}

0800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b082      	sub	sp, #8
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 f83e 	bl	800bfba <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800bf48:	b5b0      	push	{r4, r5, r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681c      	ldr	r4, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 f85a 	bl	800c014 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800bf60:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bf62:	461a      	mov	r2, r3
 800bf64:	4629      	mov	r1, r5
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 f85f 	bl	800c02a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 f830 	bl	800bfd4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bdb0      	pop	{r4, r5, r7, pc}

0800bf7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>:
       *  This function provides for safer data access.  The parameter
       *  is first checked that it is in the range of the vector.  The
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b082      	sub	sp, #8
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	6039      	str	r1, [r7, #0]
      {
	_M_range_check(__n);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f85c 	bl	800c048 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj>
	return (*this)[__n];
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 f878 	bl	800c088 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>
 800bf98:	4603      	mov	r3, r0
      }
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f894 	bl	800c0d8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 f872 	bl	800c0ae <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6819      	ldr	r1, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	10db      	asrs	r3, r3, #3
 800bfee:	4a08      	ldr	r2, [pc, #32]	; (800c010 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x3c>)
 800bff0:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800bff4:	461a      	mov	r2, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f87a 	bl	800c0f0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
		      - this->_M_impl._M_start); }
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff ffcf 	bl	800bfa2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	aaaaaaab 	.word	0xaaaaaaab

0800c014 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4618      	mov	r0, r3
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b084      	sub	sp, #16
 800c02e:	af00      	add	r7, sp, #0
 800c030:	60f8      	str	r0, [r7, #12]
 800c032:	60b9      	str	r1, [r7, #8]
 800c034:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800c036:	68b9      	ldr	r1, [r7, #8]
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f000 f86c 	bl	800c116 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f86c 	bl	800c130 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800c058:	4602      	mov	r2, r0
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	4293      	cmp	r3, r2
 800c05e:	bf2c      	ite	cs
 800c060:	2301      	movcs	r3, #1
 800c062:	2300      	movcc	r3, #0
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d008      	beq.n	800c07c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f860 	bl	800c130 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800c070:	4603      	mov	r3, r0
 800c072:	461a      	mov	r2, r3
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	4803      	ldr	r0, [pc, #12]	; (800c084 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj+0x3c>)
 800c078:	f004 fe2a 	bl	8010cd0 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	08019944 	.word	0x08019944

0800c088 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6819      	ldr	r1, [r3, #0]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	4613      	mov	r3, r2
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	4413      	add	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	440b      	add	r3, r1
      }
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f850 	bl	800c15c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	605a      	str	r2, [r3, #4]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	609a      	str	r2, [r3, #8]
	{ }
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f847 	bl	800c174 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
	if (__p)
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d005      	beq.n	800c10e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	68b9      	ldr	r1, [r7, #8]
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 f83e 	bl	800c18a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800c10e:	bf00      	nop
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f84b 	bl	800c1be <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800c128:	bf00      	nop
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	461a      	mov	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	10db      	asrs	r3, r3, #3
 800c146:	4a04      	ldr	r2, [pc, #16]	; (800c158 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800c148:	fb02 f303 	mul.w	r3, r2, r3
 800c14c:	4618      	mov	r0, r3
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	aaaaaaab 	.word	0xaaaaaaab

0800c15c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() throw() { }
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f842 	bl	800c1ee <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4618      	mov	r0, r3
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4618      	mov	r0, r3
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b084      	sub	sp, #16
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	68b9      	ldr	r1, [r7, #8]
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f000 f832 	bl	800c204 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800c1a0:	bf00      	nop
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	370c      	adds	r7, #12
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d00a      	beq.n	800c1e6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7ff ffe9 	bl	800c1a8 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 f820 	bl	800c21e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	3318      	adds	r3, #24
 800c1e2:	607b      	str	r3, [r7, #4]
 800c1e4:	e7f0      	b.n	800c1c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c1ee:	b480      	push	{r7}
 800c1f0:	b083      	sub	sp, #12
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800c210:	68b8      	ldr	r0, [r7, #8]
 800c212:	f004 fa87 	bl	8010724 <_ZdlPv>
      }
 800c216:	bf00      	nop
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800c21e:	b580      	push	{r7, lr}
 800c220:	b082      	sub	sp, #8
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f004 fe5a 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c22c:	bf00      	nop
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <_Z14CalculateCrc32PKhi>:
#include <cstring>
#include "crc32.h"
#include "packet_field_definitions.h"

uint32_t CalculateCrc32 (uint8_t const* uartPacketTable, int length)
{
 800c234:	b4b0      	push	{r4, r5, r7}
 800c236:	b08b      	sub	sp, #44	; 0x2c
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  uint32_t crcValue = 0xFFFFFFFF;
 800c23e:	f04f 33ff 	mov.w	r3, #4294967295
 800c242:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint8_t dataTable[PACKET_SIZE] = {0};
 800c244:	f107 030c 	add.w	r3, r7, #12
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]
 800c24c:	605a      	str	r2, [r3, #4]
 800c24e:	609a      	str	r2, [r3, #8]
 800c250:	60da      	str	r2, [r3, #12]
 800c252:	611a      	str	r2, [r3, #16]
  
  memcpy(dataTable, uartPacketTable, PACKET_SIZE);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f107 040c 	add.w	r4, r7, #12
 800c25a:	461d      	mov	r5, r3
 800c25c:	6828      	ldr	r0, [r5, #0]
 800c25e:	6869      	ldr	r1, [r5, #4]
 800c260:	68aa      	ldr	r2, [r5, #8]
 800c262:	68eb      	ldr	r3, [r5, #12]
 800c264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c266:	6928      	ldr	r0, [r5, #16]
 800c268:	6020      	str	r0, [r4, #0]
  
  uint8_t* dataTablePointer = dataTable;
 800c26a:	f107 030c 	add.w	r3, r7, #12
 800c26e:	623b      	str	r3, [r7, #32]
  
  while (length > 0)
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	dd12      	ble.n	800c29c <_Z14CalculateCrc32PKhi+0x68>
  {
    crcValue = (crcValue << 8) ^ crcLookupTable[((crcValue >> 24) ^ *dataTablePointer++) & 0xFF];
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	021a      	lsls	r2, r3, #8
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	0e19      	lsrs	r1, r3, #24
 800c27e:	6a3b      	ldr	r3, [r7, #32]
 800c280:	1c58      	adds	r0, r3, #1
 800c282:	6238      	str	r0, [r7, #32]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	404b      	eors	r3, r1
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	4907      	ldr	r1, [pc, #28]	; (800c2a8 <_Z14CalculateCrc32PKhi+0x74>)
 800c28c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c290:	4053      	eors	r3, r2
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
    --length;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	3b01      	subs	r3, #1
 800c298:	603b      	str	r3, [r7, #0]
  while (length > 0)
 800c29a:	e7e9      	b.n	800c270 <_Z14CalculateCrc32PKhi+0x3c>
  }
  
  return crcValue;
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	4618      	mov	r0, r3
 800c2a0:	372c      	adds	r7, #44	; 0x2c
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bcb0      	pop	{r4, r5, r7}
 800c2a6:	4770      	bx	lr
 800c2a8:	0801aa48 	.word	0x0801aa48

0800c2ac <_ZNK10UartPacket10GetPayloadEv>:
  ModuleID GetModule() const;
  Function GetFunction() const;
  Parameter GetParameter() const;
  Sign GetSign() const;
  uint8_t GetLength() const;
  uint8_t const* GetPayload() const {return m_Payload;}
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <_ZNK6Module17GetParameterStateEi>:
{
public:
  void EnableParameter(Parameter parameter);
  void DisableParameter(Parameter parameter);
  void SetParameter(Parameter parameter, double value);
  bool GetParameterState(int index) const {return m_ParameterStates[index];}
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <_ZNK6Module17GetParameterValueEi>:
  double GetParameterValue(int index) const {return m_ParameterValues[index];}
 800c2e2:	b490      	push	{r4, r7}
 800c2e4:	b082      	sub	sp, #8
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	6039      	str	r1, [r7, #0]
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	3302      	adds	r3, #2
 800c2f2:	00db      	lsls	r3, r3, #3
 800c2f4:	4413      	add	r3, r2
 800c2f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2fa:	ec44 3b17 	vmov	d7, r3, r4
 800c2fe:	eeb0 0a47 	vmov.f32	s0, s14
 800c302:	eef0 0a67 	vmov.f32	s1, s15
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bc90      	pop	{r4, r7}
 800c30c:	4770      	bx	lr
	...

0800c310 <_Z10InitModulei>:
Module module1;
Module module2;
Module module3;

void InitModule(int module)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b090      	sub	sp, #64	; 0x40
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  for(int i=0; i < INIT_PACKETS_COUNT; i++)
 800c318:	2300      	movs	r3, #0
 800c31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c31e:	2b1b      	cmp	r3, #27
 800c320:	f300 8097 	bgt.w	800c452 <_Z10InitModulei+0x142>
  {
#if DEBUG == 1
    printf("Sending init packet %d: ", i + 1);
 800c324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c326:	3301      	adds	r3, #1
 800c328:	4619      	mov	r1, r3
 800c32a:	484b      	ldr	r0, [pc, #300]	; (800c458 <_Z10InitModulei+0x148>)
 800c32c:	f006 ff46 	bl	80131bc <printf>
#endif
    
    UartPacket uartPacket;
 800c330:	f107 0308 	add.w	r3, r7, #8
 800c334:	4618      	mov	r0, r3
 800c336:	f002 fa0b 	bl	800e750 <_ZN10UartPacketC1Ev>
    
    uartPacket.SetSource(Source::SOURCE_TARGET1);
 800c33a:	f107 0308 	add.w	r3, r7, #8
 800c33e:	2131      	movs	r1, #49	; 0x31
 800c340:	4618      	mov	r0, r3
 800c342:	f002 fa64 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
    uartPacket.SetModule(module);
 800c346:	f107 0308 	add.w	r3, r7, #8
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f002 fa70 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
    uartPacket.SetFunction(Function::INIT_PACKET);
 800c352:	f107 0308 	add.w	r3, r7, #8
 800c356:	2132      	movs	r1, #50	; 0x32
 800c358:	4618      	mov	r0, r3
 800c35a:	f002 fa7c 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
    uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 800c35e:	f107 0308 	add.w	r3, r7, #8
 800c362:	2130      	movs	r1, #48	; 0x30
 800c364:	4618      	mov	r0, r3
 800c366:	f002 fac8 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
    uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800c36a:	f107 0308 	add.w	r3, r7, #8
 800c36e:	2131      	movs	r1, #49	; 0x31
 800c370:	4618      	mov	r0, r3
 800c372:	f002 fb54 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
    
    if(module == 1)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d110      	bne.n	800c39e <_Z10InitModulei+0x8e>
    {
      memcpy((char*)uartPacket.GetPayload(), *(initParametersModule1[i]), PAYLOAD_SIZE);
 800c37c:	f107 0308 	add.w	r3, r7, #8
 800c380:	4618      	mov	r0, r3
 800c382:	f7ff ff93 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800c386:	4a35      	ldr	r2, [pc, #212]	; (800c45c <_Z10InitModulei+0x14c>)
 800c388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38a:	212c      	movs	r1, #44	; 0x2c
 800c38c:	fb01 f303 	mul.w	r3, r1, r3
 800c390:	4413      	add	r3, r2
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	220a      	movs	r2, #10
 800c396:	4619      	mov	r1, r3
 800c398:	f006 fed7 	bl	801314a <memcpy>
 800c39c:	e02b      	b.n	800c3f6 <_Z10InitModulei+0xe6>
    }
    else if(module == 2)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	d110      	bne.n	800c3c6 <_Z10InitModulei+0xb6>
    {
      memcpy((char*)uartPacket.GetPayload(), *(initParametersModule2[i]), PAYLOAD_SIZE);
 800c3a4:	f107 0308 	add.w	r3, r7, #8
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7ff ff7f 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800c3ae:	4a2c      	ldr	r2, [pc, #176]	; (800c460 <_Z10InitModulei+0x150>)
 800c3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b2:	212c      	movs	r1, #44	; 0x2c
 800c3b4:	fb01 f303 	mul.w	r3, r1, r3
 800c3b8:	4413      	add	r3, r2
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	220a      	movs	r2, #10
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f006 fec3 	bl	801314a <memcpy>
 800c3c4:	e017      	b.n	800c3f6 <_Z10InitModulei+0xe6>
    }
    else if(module == 3)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b03      	cmp	r3, #3
 800c3ca:	d110      	bne.n	800c3ee <_Z10InitModulei+0xde>
    {
      memcpy((char*)uartPacket.GetPayload(), *(initParametersModule3[i]), PAYLOAD_SIZE);
 800c3cc:	f107 0308 	add.w	r3, r7, #8
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff ff6b 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800c3d6:	4a23      	ldr	r2, [pc, #140]	; (800c464 <_Z10InitModulei+0x154>)
 800c3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3da:	212c      	movs	r1, #44	; 0x2c
 800c3dc:	fb01 f303 	mul.w	r3, r1, r3
 800c3e0:	4413      	add	r3, r2
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	220a      	movs	r2, #10
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	f006 feaf 	bl	801314a <memcpy>
 800c3ec:	e003      	b.n	800c3f6 <_Z10InitModulei+0xe6>
    }
    else
    {
      printf("ERROR, Bad module ID in InitModule function, aborting\n");
 800c3ee:	481e      	ldr	r0, [pc, #120]	; (800c468 <_Z10InitModulei+0x158>)
 800c3f0:	f006 ff46 	bl	8013280 <puts>
 800c3f4:	e02d      	b.n	800c452 <_Z10InitModulei+0x142>
      return;
    }
    
    uint8_t lengthInt = strlen(reinterpret_cast<const char*>(uartPacket.GetPayload()));
 800c3f6:	f107 0308 	add.w	r3, r7, #8
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7ff ff56 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800c400:	4603      	mov	r3, r0
 800c402:	4618      	mov	r0, r3
 800c404:	f7fa fcb6 	bl	8006d74 <strlen>
 800c408:	4603      	mov	r3, r0
 800c40a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    
    uartPacket.SetLength(lengthInt); // convert from int to ASCII
 800c40e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800c412:	f107 0308 	add.w	r3, r7, #8
 800c416:	4611      	mov	r1, r2
 800c418:	4618      	mov	r0, r3
 800c41a:	f002 fb2c 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
    
    uartPacket.AppendCrcToPacket();
 800c41e:	f107 0308 	add.w	r3, r7, #8
 800c422:	4618      	mov	r0, r3
 800c424:	f002 fc68 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
    
#if DEBUG == 1
    printf("Init Packet is: ");
 800c428:	4810      	ldr	r0, [pc, #64]	; (800c46c <_Z10InitModulei+0x15c>)
 800c42a:	f006 fec7 	bl	80131bc <printf>
    uartPacket.PrintPacket();
 800c42e:	f107 0308 	add.w	r3, r7, #8
 800c432:	2100      	movs	r1, #0
 800c434:	4618      	mov	r0, r3
 800c436:	f002 fced 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
    
    SendPacketViaUart(uartPacket);
 800c43a:	f107 0308 	add.w	r3, r7, #8
 800c43e:	4618      	mov	r0, r3
 800c440:	f002 ff4c 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
    
    HAL_Delay(20);
 800c444:	2014      	movs	r0, #20
 800c446:	f7fc fac9 	bl	80089dc <HAL_Delay>
  for(int i=0; i < INIT_PACKETS_COUNT; i++)
 800c44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c44c:	3301      	adds	r3, #1
 800c44e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c450:	e764      	b.n	800c31c <_Z10InitModulei+0xc>
  }
}
 800c452:	3740      	adds	r7, #64	; 0x40
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	08019990 	.word	0x08019990
 800c45c:	0801ae48 	.word	0x0801ae48
 800c460:	0801b318 	.word	0x0801b318
 800c464:	0801b7e8 	.word	0x0801b7e8
 800c468:	080199ac 	.word	0x080199ac
 800c46c:	080199e4 	.word	0x080199e4

0800c470 <_Z12DeinitModulei>:

void DeinitModule(int module)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08e      	sub	sp, #56	; 0x38
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  UartPacket uartPacket;
 800c478:	f107 0308 	add.w	r3, r7, #8
 800c47c:	4618      	mov	r0, r3
 800c47e:	f002 f967 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800c482:	f107 0308 	add.w	r3, r7, #8
 800c486:	2131      	movs	r1, #49	; 0x31
 800c488:	4618      	mov	r0, r3
 800c48a:	f002 f9c0 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800c48e:	f107 0308 	add.w	r3, r7, #8
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	f002 f9cc 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DEINIT_PACKET);
 800c49a:	f107 0308 	add.w	r3, r7, #8
 800c49e:	2133      	movs	r1, #51	; 0x33
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f002 f9d8 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 800c4a6:	f107 0308 	add.w	r3, r7, #8
 800c4aa:	2130      	movs	r1, #48	; 0x30
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f002 fa24 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
  uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800c4b2:	f107 0308 	add.w	r3, r7, #8
 800c4b6:	2131      	movs	r1, #49	; 0x31
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f002 fab0 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
  uartPacket.SetLength(Length::NO_PAYLOAD);
 800c4be:	f107 0308 	add.w	r3, r7, #8
 800c4c2:	2130      	movs	r1, #48	; 0x30
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f002 fac4 	bl	800ea52 <_ZN10UartPacket9SetLengthE6Length>
  
  uartPacket.AppendCrcToPacket();
 800c4ca:	f107 0308 	add.w	r3, r7, #8
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f002 fc12 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
  
#if DEBUG == 1
  printf("Deinit Packet is: ");
 800c4d4:	4808      	ldr	r0, [pc, #32]	; (800c4f8 <_Z12DeinitModulei+0x88>)
 800c4d6:	f006 fe71 	bl	80131bc <printf>
  uartPacket.PrintPacket();
 800c4da:	f107 0308 	add.w	r3, r7, #8
 800c4de:	2100      	movs	r1, #0
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f002 fc97 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
  
  SendPacketViaUart(uartPacket);
 800c4e6:	f107 0308 	add.w	r3, r7, #8
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f002 fef6 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
}
 800c4f0:	bf00      	nop
 800c4f2:	3738      	adds	r7, #56	; 0x38
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	080199f8 	.word	0x080199f8

0800c4fc <_Z18SetGraphLowerRangeix>:

void SetGraphLowerRange(int module, long long int value)
{
 800c4fc:	b590      	push	{r4, r7, lr}
 800c4fe:	b097      	sub	sp, #92	; 0x5c
 800c500:	af02      	add	r7, sp, #8
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	e9c7 2300 	strd	r2, r3, [r7]
  UartPacket uartPacket;
 800c508:	f107 031c 	add.w	r3, r7, #28
 800c50c:	4618      	mov	r0, r3
 800c50e:	f002 f91f 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800c512:	f107 031c 	add.w	r3, r7, #28
 800c516:	2131      	movs	r1, #49	; 0x31
 800c518:	4618      	mov	r0, r3
 800c51a:	f002 f978 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800c51e:	f107 031c 	add.w	r3, r7, #28
 800c522:	68f9      	ldr	r1, [r7, #12]
 800c524:	4618      	mov	r0, r3
 800c526:	f002 f984 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::SET_GRAPH_RANGE_MIN);
 800c52a:	f107 031c 	add.w	r3, r7, #28
 800c52e:	2137      	movs	r1, #55	; 0x37
 800c530:	4618      	mov	r0, r3
 800c532:	f002 f990 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 800c536:	f107 031c 	add.w	r3, r7, #28
 800c53a:	2130      	movs	r1, #48	; 0x30
 800c53c:	4618      	mov	r0, r3
 800c53e:	f002 f9dc 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
  
  if(value >= 0)
 800c542:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c546:	2b00      	cmp	r3, #0
 800c548:	f174 0300 	sbcs.w	r3, r4, #0
 800c54c:	db06      	blt.n	800c55c <_Z18SetGraphLowerRangeix+0x60>
  {
    uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800c54e:	f107 031c 	add.w	r3, r7, #28
 800c552:	2131      	movs	r1, #49	; 0x31
 800c554:	4618      	mov	r0, r3
 800c556:	f002 fa62 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
 800c55a:	e00c      	b.n	800c576 <_Z18SetGraphLowerRangeix+0x7a>
  }
  else
  {
    uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800c55c:	f107 031c 	add.w	r3, r7, #28
 800c560:	2132      	movs	r1, #50	; 0x32
 800c562:	4618      	mov	r0, r3
 800c564:	f002 fa5b 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
    value = value * (-1);
 800c568:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c56c:	425b      	negs	r3, r3
 800c56e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800c572:	e9c7 3400 	strd	r3, r4, [r7]
  }
  
  char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
  
  snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lld", value);
 800c576:	f107 0010 	add.w	r0, r7, #16
 800c57a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c57e:	e9cd 3400 	strd	r3, r4, [sp]
 800c582:	4a19      	ldr	r2, [pc, #100]	; (800c5e8 <_Z18SetGraphLowerRangeix+0xec>)
 800c584:	210b      	movs	r1, #11
 800c586:	f007 f889 	bl	801369c <snprintf>
  
  int lengthInt = strlen(numericStringConversionBuffer);
 800c58a:	f107 0310 	add.w	r3, r7, #16
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fa fbf0 	bl	8006d74 <strlen>
 800c594:	4603      	mov	r3, r0
 800c596:	64fb      	str	r3, [r7, #76]	; 0x4c
  
  uartPacket.SetLength(lengthInt);
 800c598:	f107 031c 	add.w	r3, r7, #28
 800c59c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f002 fa69 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
  
  memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 800c5a4:	f107 031c 	add.w	r3, r7, #28
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff fe7f 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800c5ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5b0:	f107 0310 	add.w	r3, r7, #16
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	f006 fdc8 	bl	801314a <memcpy>
  
  uartPacket.AppendCrcToPacket();
 800c5ba:	f107 031c 	add.w	r3, r7, #28
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f002 fb9a 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
  
#if DEBUG == 1
  printf("SetGraphLowerRange Packet is: ");
 800c5c4:	4809      	ldr	r0, [pc, #36]	; (800c5ec <_Z18SetGraphLowerRangeix+0xf0>)
 800c5c6:	f006 fdf9 	bl	80131bc <printf>
  uartPacket.PrintPacket();
 800c5ca:	f107 031c 	add.w	r3, r7, #28
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f002 fc1f 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
  
  SendPacketViaUart(uartPacket);
 800c5d6:	f107 031c 	add.w	r3, r7, #28
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f002 fe7e 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
}
 800c5e0:	bf00      	nop
 800c5e2:	3754      	adds	r7, #84	; 0x54
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd90      	pop	{r4, r7, pc}
 800c5e8:	08019a0c 	.word	0x08019a0c
 800c5ec:	08019a14 	.word	0x08019a14

0800c5f0 <_Z18SetGraphUpperRangeix>:

void SetGraphUpperRange(int module, long long int value)
{
 800c5f0:	b590      	push	{r4, r7, lr}
 800c5f2:	b097      	sub	sp, #92	; 0x5c
 800c5f4:	af02      	add	r7, sp, #8
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	e9c7 2300 	strd	r2, r3, [r7]
  UartPacket uartPacket;
 800c5fc:	f107 031c 	add.w	r3, r7, #28
 800c600:	4618      	mov	r0, r3
 800c602:	f002 f8a5 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800c606:	f107 031c 	add.w	r3, r7, #28
 800c60a:	2131      	movs	r1, #49	; 0x31
 800c60c:	4618      	mov	r0, r3
 800c60e:	f002 f8fe 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800c612:	f107 031c 	add.w	r3, r7, #28
 800c616:	68f9      	ldr	r1, [r7, #12]
 800c618:	4618      	mov	r0, r3
 800c61a:	f002 f90a 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::SET_GRAPH_RANGE_MAX);
 800c61e:	f107 031c 	add.w	r3, r7, #28
 800c622:	2138      	movs	r1, #56	; 0x38
 800c624:	4618      	mov	r0, r3
 800c626:	f002 f916 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 800c62a:	f107 031c 	add.w	r3, r7, #28
 800c62e:	2130      	movs	r1, #48	; 0x30
 800c630:	4618      	mov	r0, r3
 800c632:	f002 f962 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
  
  if(value >= 0)
 800c636:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f174 0300 	sbcs.w	r3, r4, #0
 800c640:	db06      	blt.n	800c650 <_Z18SetGraphUpperRangeix+0x60>
  {
    uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800c642:	f107 031c 	add.w	r3, r7, #28
 800c646:	2131      	movs	r1, #49	; 0x31
 800c648:	4618      	mov	r0, r3
 800c64a:	f002 f9e8 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
 800c64e:	e00c      	b.n	800c66a <_Z18SetGraphUpperRangeix+0x7a>
  }
  else
  {
    uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800c650:	f107 031c 	add.w	r3, r7, #28
 800c654:	2132      	movs	r1, #50	; 0x32
 800c656:	4618      	mov	r0, r3
 800c658:	f002 f9e1 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
    value = value * (-1);
 800c65c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c660:	425b      	negs	r3, r3
 800c662:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800c666:	e9c7 3400 	strd	r3, r4, [r7]
  }
  
  char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
  
  snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lld", value);
 800c66a:	f107 0010 	add.w	r0, r7, #16
 800c66e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c672:	e9cd 3400 	strd	r3, r4, [sp]
 800c676:	4a19      	ldr	r2, [pc, #100]	; (800c6dc <_Z18SetGraphUpperRangeix+0xec>)
 800c678:	210b      	movs	r1, #11
 800c67a:	f007 f80f 	bl	801369c <snprintf>
  
  int lengthInt = strlen(numericStringConversionBuffer);
 800c67e:	f107 0310 	add.w	r3, r7, #16
 800c682:	4618      	mov	r0, r3
 800c684:	f7fa fb76 	bl	8006d74 <strlen>
 800c688:	4603      	mov	r3, r0
 800c68a:	64fb      	str	r3, [r7, #76]	; 0x4c
  
  uartPacket.SetLength(lengthInt);
 800c68c:	f107 031c 	add.w	r3, r7, #28
 800c690:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c692:	4618      	mov	r0, r3
 800c694:	f002 f9ef 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
  
  memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 800c698:	f107 031c 	add.w	r3, r7, #28
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7ff fe05 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800c6a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6a4:	f107 0310 	add.w	r3, r7, #16
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	f006 fd4e 	bl	801314a <memcpy>
  
  uartPacket.AppendCrcToPacket();
 800c6ae:	f107 031c 	add.w	r3, r7, #28
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f002 fb20 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
  
#if DEBUG == 1
  printf("SetGraphUpperRange Packet is: ");
 800c6b8:	4809      	ldr	r0, [pc, #36]	; (800c6e0 <_Z18SetGraphUpperRangeix+0xf0>)
 800c6ba:	f006 fd7f 	bl	80131bc <printf>
  uartPacket.PrintPacket();
 800c6be:	f107 031c 	add.w	r3, r7, #28
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f002 fba5 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
  
  SendPacketViaUart(uartPacket);
 800c6ca:	f107 031c 	add.w	r3, r7, #28
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f002 fe04 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
}
 800c6d4:	bf00      	nop
 800c6d6:	3754      	adds	r7, #84	; 0x54
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd90      	pop	{r4, r7, pc}
 800c6dc:	08019a0c 	.word	0x08019a0c
 800c6e0:	08019a34 	.word	0x08019a34

0800c6e4 <_Z17SetGraphTimeRangeii>:

void SetGraphTimeRange(int module, int value)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b092      	sub	sp, #72	; 0x48
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  if(value > 3600 || value < 360 || (value % 360 != 0))
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800c6f4:	dc12      	bgt.n	800c71c <_Z17SetGraphTimeRangeii+0x38>
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800c6fc:	db0e      	blt.n	800c71c <_Z17SetGraphTimeRangeii+0x38>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	4a34      	ldr	r2, [pc, #208]	; (800c7d4 <_Z17SetGraphTimeRangeii+0xf0>)
 800c702:	fb82 1203 	smull	r1, r2, r2, r3
 800c706:	441a      	add	r2, r3
 800c708:	1211      	asrs	r1, r2, #8
 800c70a:	17da      	asrs	r2, r3, #31
 800c70c:	1a8a      	subs	r2, r1, r2
 800c70e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800c712:	fb01 f202 	mul.w	r2, r1, r2
 800c716:	1a9a      	subs	r2, r3, r2
 800c718:	2a00      	cmp	r2, #0
 800c71a:	d003      	beq.n	800c724 <_Z17SetGraphTimeRangeii+0x40>
  {
    printf("ERROR, Time range value is too high, too low or not multiplier of 360, aborting\n");
 800c71c:	482e      	ldr	r0, [pc, #184]	; (800c7d8 <_Z17SetGraphTimeRangeii+0xf4>)
 800c71e:	f006 fdaf 	bl	8013280 <puts>
 800c722:	e054      	b.n	800c7ce <_Z17SetGraphTimeRangeii+0xea>
    return;
  }
  
  UartPacket uartPacket;
 800c724:	f107 0314 	add.w	r3, r7, #20
 800c728:	4618      	mov	r0, r3
 800c72a:	f002 f811 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800c72e:	f107 0314 	add.w	r3, r7, #20
 800c732:	2131      	movs	r1, #49	; 0x31
 800c734:	4618      	mov	r0, r3
 800c736:	f002 f86a 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800c73a:	f107 0314 	add.w	r3, r7, #20
 800c73e:	6879      	ldr	r1, [r7, #4]
 800c740:	4618      	mov	r0, r3
 800c742:	f002 f876 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::SET_GRAPH_TIME_RANGE);
 800c746:	f107 0314 	add.w	r3, r7, #20
 800c74a:	2139      	movs	r1, #57	; 0x39
 800c74c:	4618      	mov	r0, r3
 800c74e:	f002 f882 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 800c752:	f107 0314 	add.w	r3, r7, #20
 800c756:	2130      	movs	r1, #48	; 0x30
 800c758:	4618      	mov	r0, r3
 800c75a:	f002 f8ce 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
  uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800c75e:	f107 0314 	add.w	r3, r7, #20
 800c762:	2131      	movs	r1, #49	; 0x31
 800c764:	4618      	mov	r0, r3
 800c766:	f002 f95a 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
  
  char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
  
  snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%d", value);
 800c76a:	f107 0008 	add.w	r0, r7, #8
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	4a1a      	ldr	r2, [pc, #104]	; (800c7dc <_Z17SetGraphTimeRangeii+0xf8>)
 800c772:	210b      	movs	r1, #11
 800c774:	f006 ff92 	bl	801369c <snprintf>
  
  int lengthInt = strlen(numericStringConversionBuffer);
 800c778:	f107 0308 	add.w	r3, r7, #8
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fa faf9 	bl	8006d74 <strlen>
 800c782:	4603      	mov	r3, r0
 800c784:	647b      	str	r3, [r7, #68]	; 0x44
  
  uartPacket.SetLength(lengthInt);
 800c786:	f107 0314 	add.w	r3, r7, #20
 800c78a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c78c:	4618      	mov	r0, r3
 800c78e:	f002 f972 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
  
  memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 800c792:	f107 0314 	add.w	r3, r7, #20
 800c796:	4618      	mov	r0, r3
 800c798:	f7ff fd88 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800c79c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c79e:	f107 0308 	add.w	r3, r7, #8
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	f006 fcd1 	bl	801314a <memcpy>
  
  uartPacket.AppendCrcToPacket();
 800c7a8:	f107 0314 	add.w	r3, r7, #20
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f002 faa3 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
  
#if DEBUG == 1
  printf("SetGraphTimeRange Packet is: ");
 800c7b2:	480b      	ldr	r0, [pc, #44]	; (800c7e0 <_Z17SetGraphTimeRangeii+0xfc>)
 800c7b4:	f006 fd02 	bl	80131bc <printf>
  uartPacket.PrintPacket();
 800c7b8:	f107 0314 	add.w	r3, r7, #20
 800c7bc:	2100      	movs	r1, #0
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f002 fb28 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
  
  SendPacketViaUart(uartPacket);
 800c7c4:	f107 0314 	add.w	r3, r7, #20
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f002 fd87 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
}
 800c7ce:	3748      	adds	r7, #72	; 0x48
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	b60b60b7 	.word	0xb60b60b7
 800c7d8:	08019a54 	.word	0x08019a54
 800c7dc:	08019aa4 	.word	0x08019aa4
 800c7e0:	08019aa8 	.word	0x08019aa8

0800c7e4 <_Z19GenerateLinearGraphiiddd>:

void GenerateLinearGraph(int module, int signalCount, double startValue, double stopValue, double stepValue)
{
 800c7e4:	b590      	push	{r4, r7, lr}
 800c7e6:	b0a5      	sub	sp, #148	; 0x94
 800c7e8:	af02      	add	r7, sp, #8
 800c7ea:	61f8      	str	r0, [r7, #28]
 800c7ec:	61b9      	str	r1, [r7, #24]
 800c7ee:	ed87 0b04 	vstr	d0, [r7, #16]
 800c7f2:	ed87 1b02 	vstr	d1, [r7, #8]
 800c7f6:	ed87 2b00 	vstr	d2, [r7]
  UartPacket uartPacket;
 800c7fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c7fe:	4618      	mov	r0, r3
 800c800:	f001 ffa6 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  if(startValue >= stopValue)
 800c804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c808:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c80c:	f7fa fefc 	bl	8007608 <__aeabi_dcmpge>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <_Z19GenerateLinearGraphiiddd+0x3a>
  {
    printf("ERROR, GenerateLinearGraph: Start values is higher than or equal to stop value, aborting");
 800c816:	4873      	ldr	r0, [pc, #460]	; (800c9e4 <_Z19GenerateLinearGraphiiddd+0x200>)
 800c818:	f006 fcd0 	bl	80131bc <printf>
    return;
 800c81c:	e0de      	b.n	800c9dc <_Z19GenerateLinearGraphiiddd+0x1f8>
  }
  
  if(stepValue < 0)
 800c81e:	f04f 0200 	mov.w	r2, #0
 800c822:	f04f 0300 	mov.w	r3, #0
 800c826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c82a:	f7fa fed9 	bl	80075e0 <__aeabi_dcmplt>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d003      	beq.n	800c83c <_Z19GenerateLinearGraphiiddd+0x58>
  {
    printf("ERROR, GenerateLinearGraph: Negative step value not supported, aborting");
 800c834:	486c      	ldr	r0, [pc, #432]	; (800c9e8 <_Z19GenerateLinearGraphiiddd+0x204>)
 800c836:	f006 fcc1 	bl	80131bc <printf>
    return;
 800c83a:	e0cf      	b.n	800c9dc <_Z19GenerateLinearGraphiiddd+0x1f8>
  }
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800c83c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c840:	2131      	movs	r1, #49	; 0x31
 800c842:	4618      	mov	r0, r3
 800c844:	f001 ffe3 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  
  uartPacket.SetModule(module);
 800c848:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c84c:	69f9      	ldr	r1, [r7, #28]
 800c84e:	4618      	mov	r0, r3
 800c850:	f001 ffef 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  
  uartPacket.SetFunction(Function::DATA_PACKET);
 800c854:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c858:	2131      	movs	r1, #49	; 0x31
 800c85a:	4618      	mov	r0, r3
 800c85c:	f001 fffb 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  
  uint8_t length;
  
  double value;
  
  Parameter parameters[4] = {Parameter::GRAPH_PARAMETER1, Parameter::GRAPH_PARAMETER2, Parameter::GRAPH_PARAMETER3, Parameter::GRAPH_PARAMETER4};
 800c860:	4b62      	ldr	r3, [pc, #392]	; (800c9ec <_Z19GenerateLinearGraphiiddd+0x208>)
 800c862:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800c866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  for(double x = startValue; x < stopValue; x = x + stepValue)
 800c86c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c870:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800c874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c878:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800c87c:	f7fa feb0 	bl	80075e0 <__aeabi_dcmplt>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 80aa 	beq.w	800c9dc <_Z19GenerateLinearGraphiiddd+0x1f8>
  {
    for(int signalNumber = 0; signalNumber < signalCount; signalNumber++)
 800c888:	2300      	movs	r3, #0
 800c88a:	677b      	str	r3, [r7, #116]	; 0x74
 800c88c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	429a      	cmp	r2, r3
 800c892:	f280 8098 	bge.w	800c9c6 <_Z19GenerateLinearGraphiiddd+0x1e2>
    {
      uartPacket.SetParameter(parameters[signalNumber]);
 800c896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c89e:	4413      	add	r3, r2
 800c8a0:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800c8a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f002 f825 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
      
      value = x;
 800c8b0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c8b4:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
      
      if(value < 0)
 800c8b8:	f04f 0200 	mov.w	r2, #0
 800c8bc:	f04f 0300 	mov.w	r3, #0
 800c8c0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c8c4:	f7fa fe8c 	bl	80075e0 <__aeabi_dcmplt>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d010      	beq.n	800c8f0 <_Z19GenerateLinearGraphiiddd+0x10c>
      {
        /*Change value sign back to positive and mark it as negative in UART packet*/
        value = value * (-1);
 800c8ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c8d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c8d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c8da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c8de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800c8e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8e6:	2132      	movs	r1, #50	; 0x32
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f002 f898 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
 800c8ee:	e005      	b.n	800c8fc <_Z19GenerateLinearGraphiiddd+0x118>
      }
      else
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800c8f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8f4:	2131      	movs	r1, #49	; 0x31
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f002 f891 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
      }
      
      /*Change parameter values so that graph lines do not overlap each other*/
      switch(signalNumber)
 800c8fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d00f      	beq.n	800c922 <_Z19GenerateLinearGraphiiddd+0x13e>
 800c902:	2b03      	cmp	r3, #3
 800c904:	d019      	beq.n	800c93a <_Z19GenerateLinearGraphiiddd+0x156>
 800c906:	2b01      	cmp	r3, #1
 800c908:	d123      	bne.n	800c952 <_Z19GenerateLinearGraphiiddd+0x16e>
      {
      case 1:
        value = value * 0.75;
 800c90a:	f04f 0200 	mov.w	r2, #0
 800c90e:	4b38      	ldr	r3, [pc, #224]	; (800c9f0 <_Z19GenerateLinearGraphiiddd+0x20c>)
 800c910:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c914:	f7fa fbf2 	bl	80070fc <__aeabi_dmul>
 800c918:	4603      	mov	r3, r0
 800c91a:	460c      	mov	r4, r1
 800c91c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        break;
 800c920:	e017      	b.n	800c952 <_Z19GenerateLinearGraphiiddd+0x16e>
      case 2:
        value = value * 0.5;
 800c922:	f04f 0200 	mov.w	r2, #0
 800c926:	4b33      	ldr	r3, [pc, #204]	; (800c9f4 <_Z19GenerateLinearGraphiiddd+0x210>)
 800c928:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c92c:	f7fa fbe6 	bl	80070fc <__aeabi_dmul>
 800c930:	4603      	mov	r3, r0
 800c932:	460c      	mov	r4, r1
 800c934:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        break;
 800c938:	e00b      	b.n	800c952 <_Z19GenerateLinearGraphiiddd+0x16e>
      case 3:
        value = value * 0.25;
 800c93a:	f04f 0200 	mov.w	r2, #0
 800c93e:	4b2e      	ldr	r3, [pc, #184]	; (800c9f8 <_Z19GenerateLinearGraphiiddd+0x214>)
 800c940:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c944:	f7fa fbda 	bl	80070fc <__aeabi_dmul>
 800c948:	4603      	mov	r3, r0
 800c94a:	460c      	mov	r4, r1
 800c94c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
        break;
 800c950:	bf00      	nop
      }
      
      /*Temporary buffer for number-string conversion with additional space for null character*/
      char tempBuffer[PAYLOAD_SIZE + 1] = {0};
 800c952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c956:	2200      	movs	r2, #0
 800c958:	601a      	str	r2, [r3, #0]
 800c95a:	605a      	str	r2, [r3, #4]
 800c95c:	f8c3 2007 	str.w	r2, [r3, #7]
      
      /*Convert double number to string and write it to temporary buffer*/
      snprintf(tempBuffer , PAYLOAD_SIZE + 1, "%lf", value);
 800c960:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c964:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800c968:	e9cd 3400 	strd	r3, r4, [sp]
 800c96c:	4a23      	ldr	r2, [pc, #140]	; (800c9fc <_Z19GenerateLinearGraphiiddd+0x218>)
 800c96e:	210b      	movs	r1, #11
 800c970:	f006 fe94 	bl	801369c <snprintf>
      
      length = static_cast<uint8_t>(strlen(tempBuffer));
 800c974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fa f9fb 	bl	8006d74 <strlen>
 800c97e:	4603      	mov	r3, r0
 800c980:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
      
      uartPacket.SetPayload(reinterpret_cast<uint8_t*>(tempBuffer));
 800c984:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c98c:	4611      	mov	r1, r2
 800c98e:	4618      	mov	r0, r3
 800c990:	f002 f883 	bl	800ea9a <_ZN10UartPacket10SetPayloadEPh>
      
      uartPacket.SetLength(length);
 800c994:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800c998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c99c:	4611      	mov	r1, r2
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f002 f869 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
      
      uartPacket.AppendCrcToPacket();
 800c9a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f002 f9a5 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
      
      SendPacketViaUart(uartPacket);
 800c9ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f002 fc92 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 800c9b8:	2014      	movs	r0, #20
 800c9ba:	f7fc f80f 	bl	80089dc <HAL_Delay>
    for(int signalNumber = 0; signalNumber < signalCount; signalNumber++)
 800c9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	677b      	str	r3, [r7, #116]	; 0x74
 800c9c4:	e762      	b.n	800c88c <_Z19GenerateLinearGraphiiddd+0xa8>
  for(double x = startValue; x < stopValue; x = x + stepValue)
 800c9c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800c9ce:	f7fa f9df 	bl	8006d90 <__adddf3>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800c9da:	e74b      	b.n	800c874 <_Z19GenerateLinearGraphiiddd+0x90>
    }
  }
}
 800c9dc:	378c      	adds	r7, #140	; 0x8c
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd90      	pop	{r4, r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	08019ac8 	.word	0x08019ac8
 800c9e8:	08019b24 	.word	0x08019b24
 800c9ec:	08019b70 	.word	0x08019b70
 800c9f0:	3fe80000 	.word	0x3fe80000
 800c9f4:	3fe00000 	.word	0x3fe00000
 800c9f8:	3fd00000 	.word	0x3fd00000
 800c9fc:	08019b6c 	.word	0x08019b6c

0800ca00 <_Z17GenerateSineGraphiiiid>:

void GenerateSineGraph(int module, int signalCount, int startDegrees, int stopDegrees, double amplitude)
{
 800ca00:	b5b0      	push	{r4, r5, r7, lr}
 800ca02:	b0ac      	sub	sp, #176	; 0xb0
 800ca04:	af02      	add	r7, sp, #8
 800ca06:	6178      	str	r0, [r7, #20]
 800ca08:	6139      	str	r1, [r7, #16]
 800ca0a:	60fa      	str	r2, [r7, #12]
 800ca0c:	60bb      	str	r3, [r7, #8]
 800ca0e:	ed87 0b00 	vstr	d0, [r7]
  UartPacket uartPacket;
 800ca12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ca16:	4618      	mov	r0, r3
 800ca18:	f001 fe9a 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  if(startDegrees > stopDegrees)
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	dd03      	ble.n	800ca2c <_Z17GenerateSineGraphiiiid+0x2c>
  {
    printf("ERROR, GenerateSineGraph: Start values is higher than stop value, aborting");
 800ca24:	4872      	ldr	r0, [pc, #456]	; (800cbf0 <_Z17GenerateSineGraphiiiid+0x1f0>)
 800ca26:	f006 fbc9 	bl	80131bc <printf>
 800ca2a:	e0da      	b.n	800cbe2 <_Z17GenerateSineGraphiiiid+0x1e2>
    return;
  }
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800ca2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ca30:	2131      	movs	r1, #49	; 0x31
 800ca32:	4618      	mov	r0, r3
 800ca34:	f001 feeb 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800ca38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ca3c:	6979      	ldr	r1, [r7, #20]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f001 fef7 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 800ca44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ca48:	2131      	movs	r1, #49	; 0x31
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f001 ff03 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  
  uint8_t length;
  double value;
  
  Parameter parameters[4] = {Parameter::GRAPH_PARAMETER1, Parameter::GRAPH_PARAMETER2, Parameter::GRAPH_PARAMETER3, Parameter::GRAPH_PARAMETER4};
 800ca50:	4b68      	ldr	r3, [pc, #416]	; (800cbf4 <_Z17GenerateSineGraphiiiid+0x1f4>)
 800ca52:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ca56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  constexpr double radianInverse = 3.14159/180;
 800ca5c:	a462      	add	r4, pc, #392	; (adr r4, 800cbe8 <_Z17GenerateSineGraphiiiid+0x1e8>)
 800ca5e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ca62:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
  
  double phaseShift[4] = {0.0, 120.0, 240.0, 360.0};
 800ca66:	4b64      	ldr	r3, [pc, #400]	; (800cbf8 <_Z17GenerateSineGraphiiiid+0x1f8>)
 800ca68:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ca6c:	461d      	mov	r5, r3
 800ca6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ca76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  for(int x = startDegrees; x < stopDegrees; x++)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca80:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	f280 80ab 	bge.w	800cbe2 <_Z17GenerateSineGraphiiiid+0x1e2>
  {
    for(int signalNumber = 0; signalNumber < signalCount; signalNumber++)
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca92:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	f280 809c 	bge.w	800cbd6 <_Z17GenerateSineGraphiiiid+0x1d6>
    {
      uartPacket.SetParameter(parameters[signalNumber]);
 800ca9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800caa8:	4413      	add	r3, r2
 800caaa:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 800caae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cab2:	4611      	mov	r1, r2
 800cab4:	4618      	mov	r0, r3
 800cab6:	f001 ff20 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
      
      /*Multiply by radian inverse to get rid of radian unit and calculate sine of x measured in degrees*/
      value = amplitude * (sin(static_cast<double>(x) * radianInverse + phaseShift[signalNumber]));
 800caba:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800cabe:	f7fa fab3 	bl	8007028 <__aeabi_i2d>
 800cac2:	a349      	add	r3, pc, #292	; (adr r3, 800cbe8 <_Z17GenerateSineGraphiiiid+0x1e8>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	f7fa fb18 	bl	80070fc <__aeabi_dmul>
 800cacc:	4603      	mov	r3, r0
 800cace:	460c      	mov	r4, r1
 800cad0:	4618      	mov	r0, r3
 800cad2:	4621      	mov	r1, r4
 800cad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cad8:	00db      	lsls	r3, r3, #3
 800cada:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800cade:	4413      	add	r3, r2
 800cae0:	3b80      	subs	r3, #128	; 0x80
 800cae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cae6:	461a      	mov	r2, r3
 800cae8:	4623      	mov	r3, r4
 800caea:	f7fa f951 	bl	8006d90 <__adddf3>
 800caee:	4603      	mov	r3, r0
 800caf0:	460c      	mov	r4, r1
 800caf2:	ec44 3b17 	vmov	d7, r3, r4
 800caf6:	eeb0 0a47 	vmov.f32	s0, s14
 800cafa:	eef0 0a67 	vmov.f32	s1, s15
 800cafe:	f004 fe1f 	bl	8011740 <sin>
 800cb02:	ec54 3b10 	vmov	r3, r4, d0
 800cb06:	461a      	mov	r2, r3
 800cb08:	4623      	mov	r3, r4
 800cb0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb0e:	f7fa faf5 	bl	80070fc <__aeabi_dmul>
 800cb12:	4603      	mov	r3, r0
 800cb14:	460c      	mov	r4, r1
 800cb16:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
      
      if(value < 0)
 800cb1a:	f04f 0200 	mov.w	r2, #0
 800cb1e:	f04f 0300 	mov.w	r3, #0
 800cb22:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800cb26:	f7fa fd5b 	bl	80075e0 <__aeabi_dcmplt>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d010      	beq.n	800cb52 <_Z17GenerateSineGraphiiiid+0x152>
      {
        /*Change value sign back to positive and mark it as negative in UART packet*/
        value = value * (-1);
 800cb30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cb38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cb3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cb40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800cb44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cb48:	2132      	movs	r1, #50	; 0x32
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f001 ff67 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
 800cb50:	e005      	b.n	800cb5e <_Z17GenerateSineGraphiiiid+0x15e>
      }
      else
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800cb52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cb56:	2131      	movs	r1, #49	; 0x31
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f001 ff60 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
      }
      
      /*Temporary buffer for number-string conversion with additional space for null character*/
      char tempBuffer[PAYLOAD_SIZE + 1] = {0};
 800cb5e:	f107 031c 	add.w	r3, r7, #28
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	605a      	str	r2, [r3, #4]
 800cb68:	f8c3 2007 	str.w	r2, [r3, #7]
      
      /*Convert double number to string and write it to temporary buffer*/
      snprintf(tempBuffer , PAYLOAD_SIZE + 1, "%lf", value);
 800cb6c:	f107 001c 	add.w	r0, r7, #28
 800cb70:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800cb74:	e9cd 3400 	strd	r3, r4, [sp]
 800cb78:	4a20      	ldr	r2, [pc, #128]	; (800cbfc <_Z17GenerateSineGraphiiiid+0x1fc>)
 800cb7a:	210b      	movs	r1, #11
 800cb7c:	f006 fd8e 	bl	801369c <snprintf>
      
      length = static_cast<uint8_t>(strlen(tempBuffer));
 800cb80:	f107 031c 	add.w	r3, r7, #28
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fa f8f5 	bl	8006d74 <strlen>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      
      uartPacket.SetPayload(reinterpret_cast<uint8_t*>(tempBuffer));
 800cb90:	f107 021c 	add.w	r2, r7, #28
 800cb94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cb98:	4611      	mov	r1, r2
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f001 ff7d 	bl	800ea9a <_ZN10UartPacket10SetPayloadEPh>
      
      uartPacket.SetLength(length);
 800cba0:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800cba4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cba8:	4611      	mov	r1, r2
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f001 ff63 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
      
      uartPacket.AppendCrcToPacket();
 800cbb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f002 f89f 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
      
      SendPacketViaUart(uartPacket);
 800cbba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f002 fb8c 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 800cbc4:	2014      	movs	r0, #20
 800cbc6:	f7fb ff09 	bl	80089dc <HAL_Delay>
    for(int signalNumber = 0; signalNumber < signalCount; signalNumber++)
 800cbca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cbce:	3301      	adds	r3, #1
 800cbd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cbd4:	e75d      	b.n	800ca92 <_Z17GenerateSineGraphiiiid+0x92>
  for(int x = startDegrees; x < stopDegrees; x++)
 800cbd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cbda:	3301      	adds	r3, #1
 800cbdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cbe0:	e74e      	b.n	800ca80 <_Z17GenerateSineGraphiiiid+0x80>
    }
  }
}
 800cbe2:	37a8      	adds	r7, #168	; 0xa8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bdb0      	pop	{r4, r5, r7, pc}
 800cbe8:	a50de270 	.word	0xa50de270
 800cbec:	3f91df45 	.word	0x3f91df45
 800cbf0:	08019b80 	.word	0x08019b80
 800cbf4:	08019b70 	.word	0x08019b70
 800cbf8:	08019bd0 	.word	0x08019bd0
 800cbfc:	08019b6c 	.word	0x08019b6c

0800cc00 <_Z19GenerateSquareGraphiiiidi>:

void GenerateSquareGraph(int module, int signalCount, int startValue, int stopValue, double amplitude, int period)
{
 800cc00:	b590      	push	{r4, r7, lr}
 800cc02:	b0a5      	sub	sp, #148	; 0x94
 800cc04:	af02      	add	r7, sp, #8
 800cc06:	6178      	str	r0, [r7, #20]
 800cc08:	6139      	str	r1, [r7, #16]
 800cc0a:	60fa      	str	r2, [r7, #12]
 800cc0c:	60bb      	str	r3, [r7, #8]
 800cc0e:	ed87 0b00 	vstr	d0, [r7]
  UartPacket uartPacket;
 800cc12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc16:	4618      	mov	r0, r3
 800cc18:	f001 fd9a 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  if(startValue > stopValue)
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	dd03      	ble.n	800cc2c <_Z19GenerateSquareGraphiiiidi+0x2c>
  {
    printf("ERROR, GenerateSquareGraph: Start values is higher than stop value, aborting");
 800cc24:	4895      	ldr	r0, [pc, #596]	; (800ce7c <_Z19GenerateSquareGraphiiiidi+0x27c>)
 800cc26:	f006 fac9 	bl	80131bc <printf>
 800cc2a:	e123      	b.n	800ce74 <_Z19GenerateSquareGraphiiiidi+0x274>
    return;
  }
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800cc2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc30:	2131      	movs	r1, #49	; 0x31
 800cc32:	4618      	mov	r0, r3
 800cc34:	f001 fdeb 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800cc38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc3c:	6979      	ldr	r1, [r7, #20]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f001 fdf7 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 800cc44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc48:	2131      	movs	r1, #49	; 0x31
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f001 fe03 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  
  uint8_t length;
  double value;
  
  const int halfPeriod = period / 2;
 800cc50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc54:	0fda      	lsrs	r2, r3, #31
 800cc56:	4413      	add	r3, r2
 800cc58:	105b      	asrs	r3, r3, #1
 800cc5a:	66bb      	str	r3, [r7, #104]	; 0x68
  
  int multiplierSignal1 = +1;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  int multiplierSignal2 = -1;
 800cc60:	f04f 33ff 	mov.w	r3, #4294967295
 800cc64:	67bb      	str	r3, [r7, #120]	; 0x78
  
  int counterSignal1 = halfPeriod;
 800cc66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc68:	677b      	str	r3, [r7, #116]	; 0x74
  int counterSignal2 = halfPeriod;
 800cc6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc6c:	673b      	str	r3, [r7, #112]	; 0x70
  
  for(int x = startValue; x < stopValue; x++)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	f280 80fc 	bge.w	800ce74 <_Z19GenerateSquareGraphiiiidi+0x274>
  {
    if(signalCount >= 1)
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	dd78      	ble.n	800cd74 <_Z19GenerateSquareGraphiiiidi+0x174>
    {      
      if(counterSignal1 == 0)
 800cc82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d105      	bne.n	800cc94 <_Z19GenerateSquareGraphiiiidi+0x94>
      {
        counterSignal1 = halfPeriod;
 800cc88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc8a:	677b      	str	r3, [r7, #116]	; 0x74
        multiplierSignal1 = multiplierSignal1 * (-1);
 800cc8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc8e:	425b      	negs	r3, r3
 800cc90:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc92:	e002      	b.n	800cc9a <_Z19GenerateSquareGraphiiiidi+0x9a>
      }
      else
      {
        --counterSignal1;
 800cc94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc96:	3b01      	subs	r3, #1
 800cc98:	677b      	str	r3, [r7, #116]	; 0x74
      }
      
      uartPacket.SetParameter(Parameter::GRAPH_PARAMETER1);
 800cc9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc9e:	2162      	movs	r1, #98	; 0x62
 800cca0:	4618      	mov	r0, r3
 800cca2:	f001 fe2a 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
      
      value = amplitude * multiplierSignal1;
 800cca6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cca8:	f7fa f9be 	bl	8007028 <__aeabi_i2d>
 800ccac:	4603      	mov	r3, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	4623      	mov	r3, r4
 800ccb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccb8:	f7fa fa20 	bl	80070fc <__aeabi_dmul>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	460c      	mov	r4, r1
 800ccc0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
      
      if(value < 0)
 800ccc4:	f04f 0200 	mov.w	r2, #0
 800ccc8:	f04f 0300 	mov.w	r3, #0
 800cccc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ccd0:	f7fa fc86 	bl	80075e0 <__aeabi_dcmplt>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d010      	beq.n	800ccfc <_Z19GenerateSquareGraphiiiidi+0xfc>
      {
        /*Change value sign back to positive and mark it as negative in UART packet*/
        value = value * (-1);
 800ccda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ccde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cce6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ccea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800ccee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ccf2:	2132      	movs	r1, #50	; 0x32
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f001 fe92 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
 800ccfa:	e005      	b.n	800cd08 <_Z19GenerateSquareGraphiiiidi+0x108>
      }
      else
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800ccfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd00:	2131      	movs	r1, #49	; 0x31
 800cd02:	4618      	mov	r0, r3
 800cd04:	f001 fe8b 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
      }
      
      /*Temporary buffer for number-string conversion with additional space for null character*/
      char tempBuffer[PAYLOAD_SIZE + 1] = {0};
 800cd08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	601a      	str	r2, [r3, #0]
 800cd10:	605a      	str	r2, [r3, #4]
 800cd12:	f8c3 2007 	str.w	r2, [r3, #7]
      
      /*Convert double number to string and write it to temporary buffer*/
      snprintf(tempBuffer , PAYLOAD_SIZE + 1, "%lf", value);
 800cd16:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cd1a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800cd1e:	e9cd 3400 	strd	r3, r4, [sp]
 800cd22:	4a57      	ldr	r2, [pc, #348]	; (800ce80 <_Z19GenerateSquareGraphiiiidi+0x280>)
 800cd24:	210b      	movs	r1, #11
 800cd26:	f006 fcb9 	bl	801369c <snprintf>
      
      length = static_cast<uint8_t>(strlen(tempBuffer));
 800cd2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fa f820 	bl	8006d74 <strlen>
 800cd34:	4603      	mov	r3, r0
 800cd36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      
      uartPacket.SetPayload(reinterpret_cast<uint8_t*>(tempBuffer));
 800cd3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cd3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd42:	4611      	mov	r1, r2
 800cd44:	4618      	mov	r0, r3
 800cd46:	f001 fea8 	bl	800ea9a <_ZN10UartPacket10SetPayloadEPh>
      
      uartPacket.SetLength(length);
 800cd4a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800cd4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd52:	4611      	mov	r1, r2
 800cd54:	4618      	mov	r0, r3
 800cd56:	f001 fe8e 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
      
      uartPacket.AppendCrcToPacket();
 800cd5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f001 ffca 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
      
      SendPacketViaUart(uartPacket);
 800cd64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f002 fab7 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 800cd6e:	2014      	movs	r0, #20
 800cd70:	f7fb fe34 	bl	80089dc <HAL_Delay>
    }
    
    if(signalCount >= 2)
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	dd78      	ble.n	800ce6c <_Z19GenerateSquareGraphiiiidi+0x26c>
    {      
      if(counterSignal2 == 0)
 800cd7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d105      	bne.n	800cd8c <_Z19GenerateSquareGraphiiiidi+0x18c>
      {
        counterSignal2 = halfPeriod;
 800cd80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd82:	673b      	str	r3, [r7, #112]	; 0x70
        multiplierSignal2 = multiplierSignal2 * (-1);
 800cd84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd86:	425b      	negs	r3, r3
 800cd88:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd8a:	e002      	b.n	800cd92 <_Z19GenerateSquareGraphiiiidi+0x192>
      }
      else
      {
        --counterSignal2;
 800cd8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      uartPacket.SetParameter(Parameter::GRAPH_PARAMETER2);
 800cd92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd96:	2163      	movs	r1, #99	; 0x63
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f001 fdae 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
      
      value = amplitude * multiplierSignal2;
 800cd9e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cda0:	f7fa f942 	bl	8007028 <__aeabi_i2d>
 800cda4:	4603      	mov	r3, r0
 800cda6:	460c      	mov	r4, r1
 800cda8:	461a      	mov	r2, r3
 800cdaa:	4623      	mov	r3, r4
 800cdac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdb0:	f7fa f9a4 	bl	80070fc <__aeabi_dmul>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
      
      if(value < 0)
 800cdbc:	f04f 0200 	mov.w	r2, #0
 800cdc0:	f04f 0300 	mov.w	r3, #0
 800cdc4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cdc8:	f7fa fc0a 	bl	80075e0 <__aeabi_dcmplt>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d010      	beq.n	800cdf4 <_Z19GenerateSquareGraphiiiidi+0x1f4>
      {
        /*Change value sign back to positive and mark it as negative in UART packet*/
        value = value * (-1);
 800cdd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cdda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cdde:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cde2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800cde6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cdea:	2132      	movs	r1, #50	; 0x32
 800cdec:	4618      	mov	r0, r3
 800cdee:	f001 fe16 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
 800cdf2:	e005      	b.n	800ce00 <_Z19GenerateSquareGraphiiiidi+0x200>
      }
      else
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800cdf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cdf8:	2131      	movs	r1, #49	; 0x31
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f001 fe0f 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
      }
      
      /*Temporary buffer for number-string conversion with additional space for null character*/
      char tempBuffer[PAYLOAD_SIZE + 1] = {0};
 800ce00:	f107 031c 	add.w	r3, r7, #28
 800ce04:	2200      	movs	r2, #0
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	605a      	str	r2, [r3, #4]
 800ce0a:	f8c3 2007 	str.w	r2, [r3, #7]
      
      /*Convert double number to string and write it to temporary buffer*/
      snprintf(tempBuffer , PAYLOAD_SIZE + 1, "%lf", value);
 800ce0e:	f107 001c 	add.w	r0, r7, #28
 800ce12:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800ce16:	e9cd 3400 	strd	r3, r4, [sp]
 800ce1a:	4a19      	ldr	r2, [pc, #100]	; (800ce80 <_Z19GenerateSquareGraphiiiidi+0x280>)
 800ce1c:	210b      	movs	r1, #11
 800ce1e:	f006 fc3d 	bl	801369c <snprintf>
      
      length = static_cast<uint8_t>(strlen(tempBuffer));
 800ce22:	f107 031c 	add.w	r3, r7, #28
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7f9 ffa4 	bl	8006d74 <strlen>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      
      uartPacket.SetPayload(reinterpret_cast<uint8_t*>(tempBuffer));
 800ce32:	f107 021c 	add.w	r2, r7, #28
 800ce36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f001 fe2c 	bl	800ea9a <_ZN10UartPacket10SetPayloadEPh>
      
      uartPacket.SetLength(length);
 800ce42:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800ce46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f001 fe12 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
      
      uartPacket.AppendCrcToPacket();
 800ce52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ce56:	4618      	mov	r0, r3
 800ce58:	f001 ff4e 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
      
      SendPacketViaUart(uartPacket);
 800ce5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ce60:	4618      	mov	r0, r3
 800ce62:	f002 fa3b 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 800ce66:	2014      	movs	r0, #20
 800ce68:	f7fb fdb8 	bl	80089dc <HAL_Delay>
  for(int x = startValue; x < stopValue; x++)
 800ce6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce6e:	3301      	adds	r3, #1
 800ce70:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce72:	e6fe      	b.n	800cc72 <_Z19GenerateSquareGraphiiiidi+0x72>
    }
  }
}
 800ce74:	378c      	adds	r7, #140	; 0x8c
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd90      	pop	{r4, r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	08019bf0 	.word	0x08019bf0
 800ce80:	08019b6c 	.word	0x08019b6c

0800ce84 <_Z12SendWrongCrci>:

void SendWrongCrc(int module)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b08e      	sub	sp, #56	; 0x38
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  UartPacket uartPacket;
 800ce8c:	f107 0308 	add.w	r3, r7, #8
 800ce90:	4618      	mov	r0, r3
 800ce92:	f001 fc5d 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800ce96:	f107 0308 	add.w	r3, r7, #8
 800ce9a:	2131      	movs	r1, #49	; 0x31
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f001 fcb6 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800cea2:	f107 0308 	add.w	r3, r7, #8
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f001 fcc2 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 800ceae:	f107 0308 	add.w	r3, r7, #8
 800ceb2:	2131      	movs	r1, #49	; 0x31
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f001 fcce 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(Parameter::NULL_PARAMETER);
 800ceba:	f107 0308 	add.w	r3, r7, #8
 800cebe:	2130      	movs	r1, #48	; 0x30
 800cec0:	4618      	mov	r0, r3
 800cec2:	f001 fd1a 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
  
  uartPacket.SetWrongCrc();
 800cec6:	f107 0308 	add.w	r3, r7, #8
 800ceca:	4618      	mov	r0, r3
 800cecc:	f001 feec 	bl	800eca8 <_ZN10UartPacket11SetWrongCrcEv>
  
#if DEBUG == 1
  printf("SendWrongCrc packet is:");
 800ced0:	4808      	ldr	r0, [pc, #32]	; (800cef4 <_Z12SendWrongCrci+0x70>)
 800ced2:	f006 f973 	bl	80131bc <printf>
  uartPacket.PrintPacket();
 800ced6:	f107 0308 	add.w	r3, r7, #8
 800ceda:	2100      	movs	r1, #0
 800cedc:	4618      	mov	r0, r3
 800cede:	f001 ff99 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
  
  SendPacketViaUart(uartPacket);
 800cee2:	f107 0308 	add.w	r3, r7, #8
 800cee6:	4618      	mov	r0, r3
 800cee8:	f002 f9f8 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
}
 800ceec:	bf00      	nop
 800ceee:	3738      	adds	r7, #56	; 0x38
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	08019c40 	.word	0x08019c40

0800cef8 <_Z13GetParametersi>:

void GetParameters(int module)
{
 800cef8:	b590      	push	{r4, r7, lr}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  printf("\nModule %d parameters:\n\n", module);
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	4825      	ldr	r0, [pc, #148]	; (800cf98 <_Z13GetParametersi+0xa0>)
 800cf04:	f006 f95a 	bl	80131bc <printf>
  
  Module* pCurrentModule = nullptr;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	617b      	str	r3, [r7, #20]
  
  if(module == 1)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d102      	bne.n	800cf18 <_Z13GetParametersi+0x20>
  {
    pCurrentModule = &module1;
 800cf12:	4b22      	ldr	r3, [pc, #136]	; (800cf9c <_Z13GetParametersi+0xa4>)
 800cf14:	617b      	str	r3, [r7, #20]
 800cf16:	e00f      	b.n	800cf38 <_Z13GetParametersi+0x40>
  }
  else if(module == 2)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	d102      	bne.n	800cf24 <_Z13GetParametersi+0x2c>
  {
    pCurrentModule = &module2;
 800cf1e:	4b20      	ldr	r3, [pc, #128]	; (800cfa0 <_Z13GetParametersi+0xa8>)
 800cf20:	617b      	str	r3, [r7, #20]
 800cf22:	e009      	b.n	800cf38 <_Z13GetParametersi+0x40>
  }
  else if(module == 3)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d102      	bne.n	800cf30 <_Z13GetParametersi+0x38>
  {
    pCurrentModule = &module3;
 800cf2a:	4b1e      	ldr	r3, [pc, #120]	; (800cfa4 <_Z13GetParametersi+0xac>)
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	e003      	b.n	800cf38 <_Z13GetParametersi+0x40>
  }
  else
  {
    printf("ERROR, Wrong module field in received packet, aborting\n");
 800cf30:	481d      	ldr	r0, [pc, #116]	; (800cfa8 <_Z13GetParametersi+0xb0>)
 800cf32:	f006 f9a5 	bl	8013280 <puts>
    return;
 800cf36:	e02c      	b.n	800cf92 <_Z13GetParametersi+0x9a>
  }
  
  for(int i = 0; i < PARAMETERS_COUNT; i++)
 800cf38:	2300      	movs	r3, #0
 800cf3a:	613b      	str	r3, [r7, #16]
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	2b09      	cmp	r3, #9
 800cf40:	dc0f      	bgt.n	800cf62 <_Z13GetParametersi+0x6a>
  {
    printf("Parameter %3d state: %10d\n", i+1, pCurrentModule->GetParameterState(i));
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	1c5c      	adds	r4, r3, #1
 800cf46:	6939      	ldr	r1, [r7, #16]
 800cf48:	6978      	ldr	r0, [r7, #20]
 800cf4a:	f7ff f9bb 	bl	800c2c4 <_ZNK6Module17GetParameterStateEi>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	461a      	mov	r2, r3
 800cf52:	4621      	mov	r1, r4
 800cf54:	4815      	ldr	r0, [pc, #84]	; (800cfac <_Z13GetParametersi+0xb4>)
 800cf56:	f006 f931 	bl	80131bc <printf>
  for(int i = 0; i < PARAMETERS_COUNT; i++)
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	613b      	str	r3, [r7, #16]
 800cf60:	e7ec      	b.n	800cf3c <_Z13GetParametersi+0x44>
  }
  
  printf("\n");
 800cf62:	200a      	movs	r0, #10
 800cf64:	f006 f93c 	bl	80131e0 <putchar>
  
  for(int i = 0; i < PARAMETERS_COUNT; i++)
 800cf68:	2300      	movs	r3, #0
 800cf6a:	60fb      	str	r3, [r7, #12]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2b09      	cmp	r3, #9
 800cf70:	dc0f      	bgt.n	800cf92 <_Z13GetParametersi+0x9a>
  {
    printf("Parameter %3d value: %10lf\n", i+1, pCurrentModule->GetParameterValue(i));
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	1c5c      	adds	r4, r3, #1
 800cf76:	68f9      	ldr	r1, [r7, #12]
 800cf78:	6978      	ldr	r0, [r7, #20]
 800cf7a:	f7ff f9b2 	bl	800c2e2 <_ZNK6Module17GetParameterValueEi>
 800cf7e:	ec53 2b10 	vmov	r2, r3, d0
 800cf82:	4621      	mov	r1, r4
 800cf84:	480a      	ldr	r0, [pc, #40]	; (800cfb0 <_Z13GetParametersi+0xb8>)
 800cf86:	f006 f919 	bl	80131bc <printf>
  for(int i = 0; i < PARAMETERS_COUNT; i++)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	60fb      	str	r3, [r7, #12]
 800cf90:	e7ec      	b.n	800cf6c <_Z13GetParametersi+0x74>
  } 
}
 800cf92:	371c      	adds	r7, #28
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd90      	pop	{r4, r7, pc}
 800cf98:	08019c58 	.word	0x08019c58
 800cf9c:	20000dd0 	.word	0x20000dd0
 800cfa0:	20000e30 	.word	0x20000e30
 800cfa4:	20000e90 	.word	0x20000e90
 800cfa8:	08019c74 	.word	0x08019c74
 800cfac:	08019cac 	.word	0x08019cac
 800cfb0:	08019cc8 	.word	0x08019cc8

0800cfb4 <_Z20SendAdcToGraphScreenii>:

void SendAdcToGraphScreen(int module, int packetCount)
{  
 800cfb4:	b590      	push	{r4, r7, lr}
 800cfb6:	b09f      	sub	sp, #124	; 0x7c
 800cfb8:	af02      	add	r7, sp, #8
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
#if DEBUG == 1
  printf("\nModule %d, generating and sending %d ADC packets per each of 4 signals\n\n", module, packetCount);
 800cfbe:	683a      	ldr	r2, [r7, #0]
 800cfc0:	6879      	ldr	r1, [r7, #4]
 800cfc2:	486d      	ldr	r0, [pc, #436]	; (800d178 <_Z20SendAdcToGraphScreenii+0x1c4>)
 800cfc4:	f006 f8fa 	bl	80131bc <printf>
#endif
  
  UartPacket uartPacket;
 800cfc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f001 fbbf 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800cfd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfd6:	2131      	movs	r1, #49	; 0x31
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f001 fc18 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800cfde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfe2:	6879      	ldr	r1, [r7, #4]
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f001 fc24 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 800cfea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfee:	2131      	movs	r1, #49	; 0x31
 800cff0:	4618      	mov	r0, r3
 800cff2:	f001 fc30 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  
  int rawAdcValue = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  double value = 0;
 800cffa:	f04f 0300 	mov.w	r3, #0
 800cffe:	f04f 0400 	mov.w	r4, #0
 800d002:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  
  Parameter parameters[4] = {Parameter::GRAPH_PARAMETER1, Parameter::GRAPH_PARAMETER2, Parameter::GRAPH_PARAMETER3, Parameter::GRAPH_PARAMETER4};
 800d006:	4b5d      	ldr	r3, [pc, #372]	; (800d17c <_Z20SendAdcToGraphScreenii+0x1c8>)
 800d008:	f107 0418 	add.w	r4, r7, #24
 800d00c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d00e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  for(int i = 0; i < packetCount; i++)
 800d012:	2300      	movs	r3, #0
 800d014:	667b      	str	r3, [r7, #100]	; 0x64
 800d016:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	f280 80a7 	bge.w	800d16e <_Z20SendAdcToGraphScreenii+0x1ba>
  {    
    for(int signalNumber = 0; signalNumber < 4; signalNumber++)
 800d020:	2300      	movs	r3, #0
 800d022:	663b      	str	r3, [r7, #96]	; 0x60
 800d024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d026:	2b03      	cmp	r3, #3
 800d028:	f300 809d 	bgt.w	800d166 <_Z20SendAdcToGraphScreenii+0x1b2>
    {
      HAL_ADC_Start(&hadc1);
 800d02c:	4854      	ldr	r0, [pc, #336]	; (800d180 <_Z20SendAdcToGraphScreenii+0x1cc>)
 800d02e:	f7fb fd3b 	bl	8008aa8 <HAL_ADC_Start>
      
      rawAdcValue = HAL_ADC_GetValue(&hadc1);
 800d032:	4853      	ldr	r0, [pc, #332]	; (800d180 <_Z20SendAdcToGraphScreenii+0x1cc>)
 800d034:	f7fb fdde 	bl	8008bf4 <HAL_ADC_GetValue>
 800d038:	4603      	mov	r3, r0
 800d03a:	65fb      	str	r3, [r7, #92]	; 0x5c
      
      uartPacket.SetParameter(parameters[signalNumber]);
 800d03c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d044:	4413      	add	r3, r2
 800d046:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800d04a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d04e:	4611      	mov	r1, r2
 800d050:	4618      	mov	r0, r3
 800d052:	f001 fc52 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
      
#if DEBUG == 1
      printf("ADC raw value is %d out of 4096 = %.3fV\n", rawAdcValue, rawAdcValue * 3.3f / 4096.0f);
 800d056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d058:	ee07 3a90 	vmov	s15, r3
 800d05c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d060:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d184 <_Z20SendAdcToGraphScreenii+0x1d0>
 800d064:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d068:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800d188 <_Z20SendAdcToGraphScreenii+0x1d4>
 800d06c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d070:	ee16 0a90 	vmov	r0, s13
 800d074:	f7f9 ffea 	bl	800704c <__aeabi_f2d>
 800d078:	4603      	mov	r3, r0
 800d07a:	460c      	mov	r4, r1
 800d07c:	461a      	mov	r2, r3
 800d07e:	4623      	mov	r3, r4
 800d080:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d082:	4842      	ldr	r0, [pc, #264]	; (800d18c <_Z20SendAdcToGraphScreenii+0x1d8>)
 800d084:	f006 f89a 	bl	80131bc <printf>
#endif
      
      /*Scale ADC value to reference voltage and 12-bit size*/
      value = rawAdcValue * 3.3f / 4096.0f;// * 3.3f / 4096.0f; //adcValue;
 800d088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d08a:	ee07 3a90 	vmov	s15, r3
 800d08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d092:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800d184 <_Z20SendAdcToGraphScreenii+0x1d0>
 800d096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d09a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800d188 <_Z20SendAdcToGraphScreenii+0x1d4>
 800d09e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d0a2:	ee16 0a90 	vmov	r0, s13
 800d0a6:	f7f9 ffd1 	bl	800704c <__aeabi_f2d>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
      
      if(value >= 0)
 800d0b2:	f04f 0200 	mov.w	r2, #0
 800d0b6:	f04f 0300 	mov.w	r3, #0
 800d0ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d0be:	f7fa faa3 	bl	8007608 <__aeabi_dcmpge>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d006      	beq.n	800d0d6 <_Z20SendAdcToGraphScreenii+0x122>
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800d0c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d0cc:	2131      	movs	r1, #49	; 0x31
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f001 fca5 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
 800d0d4:	e00b      	b.n	800d0ee <_Z20SendAdcToGraphScreenii+0x13a>
      }
      else
      {
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800d0d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d0da:	2132      	movs	r1, #50	; 0x32
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f001 fc9e 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
        value = value * (-1);
 800d0e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d0ec:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      
      char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
      
      snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lf", value);
 800d0ee:	f107 000c 	add.w	r0, r7, #12
 800d0f2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800d0f6:	e9cd 3400 	strd	r3, r4, [sp]
 800d0fa:	4a25      	ldr	r2, [pc, #148]	; (800d190 <_Z20SendAdcToGraphScreenii+0x1dc>)
 800d0fc:	210b      	movs	r1, #11
 800d0fe:	f006 facd 	bl	801369c <snprintf>
      
      int lengthInt = strlen(numericStringConversionBuffer);
 800d102:	f107 030c 	add.w	r3, r7, #12
 800d106:	4618      	mov	r0, r3
 800d108:	f7f9 fe34 	bl	8006d74 <strlen>
 800d10c:	4603      	mov	r3, r0
 800d10e:	65bb      	str	r3, [r7, #88]	; 0x58
      
      uartPacket.SetLength(lengthInt);
 800d110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d114:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d116:	4618      	mov	r0, r3
 800d118:	f001 fcad 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
      
      memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 800d11c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d120:	4618      	mov	r0, r3
 800d122:	f7ff f8c3 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800d126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d128:	f107 030c 	add.w	r3, r7, #12
 800d12c:	4619      	mov	r1, r3
 800d12e:	f006 f80c 	bl	801314a <memcpy>
      
      uartPacket.AppendCrcToPacket();
 800d132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d136:	4618      	mov	r0, r3
 800d138:	f001 fdde 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
      
#if DEBUG == 1
      printf("Sending packet: ");
 800d13c:	4815      	ldr	r0, [pc, #84]	; (800d194 <_Z20SendAdcToGraphScreenii+0x1e0>)
 800d13e:	f006 f83d 	bl	80131bc <printf>
      uartPacket.PrintPacket();
 800d142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d146:	2100      	movs	r1, #0
 800d148:	4618      	mov	r0, r3
 800d14a:	f001 fe63 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
      SendPacketViaUart(uartPacket);
 800d14e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d152:	4618      	mov	r0, r3
 800d154:	f002 f8c2 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 800d158:	2014      	movs	r0, #20
 800d15a:	f7fb fc3f 	bl	80089dc <HAL_Delay>
    for(int signalNumber = 0; signalNumber < 4; signalNumber++)
 800d15e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d160:	3301      	adds	r3, #1
 800d162:	663b      	str	r3, [r7, #96]	; 0x60
 800d164:	e75e      	b.n	800d024 <_Z20SendAdcToGraphScreenii+0x70>
  for(int i = 0; i < packetCount; i++)
 800d166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d168:	3301      	adds	r3, #1
 800d16a:	667b      	str	r3, [r7, #100]	; 0x64
 800d16c:	e753      	b.n	800d016 <_Z20SendAdcToGraphScreenii+0x62>
    }
  }
}
 800d16e:	bf00      	nop
 800d170:	3774      	adds	r7, #116	; 0x74
 800d172:	46bd      	mov	sp, r7
 800d174:	bd90      	pop	{r4, r7, pc}
 800d176:	bf00      	nop
 800d178:	08019ce4 	.word	0x08019ce4
 800d17c:	08019b70 	.word	0x08019b70
 800d180:	20000fe0 	.word	0x20000fe0
 800d184:	40533333 	.word	0x40533333
 800d188:	45800000 	.word	0x45800000
 800d18c:	08019d30 	.word	0x08019d30
 800d190:	08019b6c 	.word	0x08019b6c
 800d194:	08019d5c 	.word	0x08019d5c

0800d198 <_Z19SendAdcToDataScreenii>:

void SendAdcToDataScreen(int module, int packetCount)
{
 800d198:	b590      	push	{r4, r7, lr}
 800d19a:	b09f      	sub	sp, #124	; 0x7c
 800d19c:	af02      	add	r7, sp, #8
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  if(module != 1 && module != 2 && module != 3)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d009      	beq.n	800d1bc <_Z19SendAdcToDataScreenii+0x24>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	d006      	beq.n	800d1bc <_Z19SendAdcToDataScreenii+0x24>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2b03      	cmp	r3, #3
 800d1b2:	d003      	beq.n	800d1bc <_Z19SendAdcToDataScreenii+0x24>
  {
    printf("Error, wrong module field in received packet, aborting\n");
 800d1b4:	486f      	ldr	r0, [pc, #444]	; (800d374 <_Z19SendAdcToDataScreenii+0x1dc>)
 800d1b6:	f006 f863 	bl	8013280 <puts>
 800d1ba:	e0d7      	b.n	800d36c <_Z19SendAdcToDataScreenii+0x1d4>
    return;
  }
  
#if DEBUG == 1
  printf("\nModule %d, generating and sending %d ADC packets per each of 4 signals\n\n", module, packetCount);
 800d1bc:	683a      	ldr	r2, [r7, #0]
 800d1be:	6879      	ldr	r1, [r7, #4]
 800d1c0:	486d      	ldr	r0, [pc, #436]	; (800d378 <_Z19SendAdcToDataScreenii+0x1e0>)
 800d1c2:	f005 fffb 	bl	80131bc <printf>
#endif
  
  UartPacket uartPacket;
 800d1c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f001 fac0 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800d1d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1d4:	2131      	movs	r1, #49	; 0x31
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f001 fb19 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800d1dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f001 fb25 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 800d1e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1ec:	2131      	movs	r1, #49	; 0x31
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f001 fb31 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  
  int rawAdcValue = 0;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  double value = 0;
 800d1f8:	f04f 0300 	mov.w	r3, #0
 800d1fc:	f04f 0400 	mov.w	r4, #0
 800d200:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  
  Parameter parameters[4] = {Parameter::PARAMETER1, Parameter::PARAMETER2, Parameter::PARAMETER3, Parameter::PARAMETER4};
 800d204:	4b5d      	ldr	r3, [pc, #372]	; (800d37c <_Z19SendAdcToDataScreenii+0x1e4>)
 800d206:	f107 0418 	add.w	r4, r7, #24
 800d20a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d20c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  for(int i = 0; i < packetCount; i++)
 800d210:	2300      	movs	r3, #0
 800d212:	667b      	str	r3, [r7, #100]	; 0x64
 800d214:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	429a      	cmp	r2, r3
 800d21a:	f280 80a7 	bge.w	800d36c <_Z19SendAdcToDataScreenii+0x1d4>
  {    
    for(int signalNumber = 0; signalNumber < 4; signalNumber++)
 800d21e:	2300      	movs	r3, #0
 800d220:	663b      	str	r3, [r7, #96]	; 0x60
 800d222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d224:	2b03      	cmp	r3, #3
 800d226:	f300 809d 	bgt.w	800d364 <_Z19SendAdcToDataScreenii+0x1cc>
    {
      HAL_ADC_Start(&hadc1);
 800d22a:	4855      	ldr	r0, [pc, #340]	; (800d380 <_Z19SendAdcToDataScreenii+0x1e8>)
 800d22c:	f7fb fc3c 	bl	8008aa8 <HAL_ADC_Start>
      
      rawAdcValue = HAL_ADC_GetValue(&hadc1);
 800d230:	4853      	ldr	r0, [pc, #332]	; (800d380 <_Z19SendAdcToDataScreenii+0x1e8>)
 800d232:	f7fb fcdf 	bl	8008bf4 <HAL_ADC_GetValue>
 800d236:	4603      	mov	r3, r0
 800d238:	65fb      	str	r3, [r7, #92]	; 0x5c
      
      uartPacket.SetParameter(parameters[signalNumber]);
 800d23a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d242:	4413      	add	r3, r2
 800d244:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800d248:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f001 fb53 	bl	800e8fa <_ZN10UartPacket12SetParameterE9Parameter>
      
#if DEBUG == 1
      printf("ADC raw value is %d out of 4096 = %.3fV\n", rawAdcValue, rawAdcValue * 3.3f / 4096.0f);
 800d254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d256:	ee07 3a90 	vmov	s15, r3
 800d25a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d25e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d384 <_Z19SendAdcToDataScreenii+0x1ec>
 800d262:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d266:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d388 <_Z19SendAdcToDataScreenii+0x1f0>
 800d26a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d26e:	ee16 0a90 	vmov	r0, s13
 800d272:	f7f9 feeb 	bl	800704c <__aeabi_f2d>
 800d276:	4603      	mov	r3, r0
 800d278:	460c      	mov	r4, r1
 800d27a:	461a      	mov	r2, r3
 800d27c:	4623      	mov	r3, r4
 800d27e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d280:	4842      	ldr	r0, [pc, #264]	; (800d38c <_Z19SendAdcToDataScreenii+0x1f4>)
 800d282:	f005 ff9b 	bl	80131bc <printf>
#endif
      /*Scale ADC value to reference voltage and 12-bit size*/
      value = rawAdcValue * 3.3f / 4096.0f;
 800d286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d288:	ee07 3a90 	vmov	s15, r3
 800d28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d290:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800d384 <_Z19SendAdcToDataScreenii+0x1ec>
 800d294:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d298:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800d388 <_Z19SendAdcToDataScreenii+0x1f0>
 800d29c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d2a0:	ee16 0a90 	vmov	r0, s13
 800d2a4:	f7f9 fed2 	bl	800704c <__aeabi_f2d>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	460c      	mov	r4, r1
 800d2ac:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
      
      if(value >= 0)
 800d2b0:	f04f 0200 	mov.w	r2, #0
 800d2b4:	f04f 0300 	mov.w	r3, #0
 800d2b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d2bc:	f7fa f9a4 	bl	8007608 <__aeabi_dcmpge>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d006      	beq.n	800d2d4 <_Z19SendAdcToDataScreenii+0x13c>
      {
        uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800d2c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d2ca:	2131      	movs	r1, #49	; 0x31
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f001 fba6 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
 800d2d2:	e00b      	b.n	800d2ec <_Z19SendAdcToDataScreenii+0x154>
      }
      else
      {
        uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800d2d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d2d8:	2132      	movs	r1, #50	; 0x32
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f001 fb9f 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
        value = value * (-1);
 800d2e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d2ea:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      
      char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
      
      snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lf", value);
 800d2ec:	f107 000c 	add.w	r0, r7, #12
 800d2f0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800d2f4:	e9cd 3400 	strd	r3, r4, [sp]
 800d2f8:	4a25      	ldr	r2, [pc, #148]	; (800d390 <_Z19SendAdcToDataScreenii+0x1f8>)
 800d2fa:	210b      	movs	r1, #11
 800d2fc:	f006 f9ce 	bl	801369c <snprintf>
      
      int lengthInt = strlen(numericStringConversionBuffer);
 800d300:	f107 030c 	add.w	r3, r7, #12
 800d304:	4618      	mov	r0, r3
 800d306:	f7f9 fd35 	bl	8006d74 <strlen>
 800d30a:	4603      	mov	r3, r0
 800d30c:	65bb      	str	r3, [r7, #88]	; 0x58
      
      uartPacket.SetLength(lengthInt);
 800d30e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d314:	4618      	mov	r0, r3
 800d316:	f001 fbae 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
      
      memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 800d31a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fe ffc4 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800d324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d326:	f107 030c 	add.w	r3, r7, #12
 800d32a:	4619      	mov	r1, r3
 800d32c:	f005 ff0d 	bl	801314a <memcpy>
      
      uartPacket.AppendCrcToPacket();
 800d330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d334:	4618      	mov	r0, r3
 800d336:	f001 fcdf 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
      
#if DEBUG == 1
      printf("Sending packet: ");
 800d33a:	4816      	ldr	r0, [pc, #88]	; (800d394 <_Z19SendAdcToDataScreenii+0x1fc>)
 800d33c:	f005 ff3e 	bl	80131bc <printf>
      uartPacket.PrintPacket();
 800d340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d344:	2100      	movs	r1, #0
 800d346:	4618      	mov	r0, r3
 800d348:	f001 fd64 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
      
      SendPacketViaUart(uartPacket);
 800d34c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d350:	4618      	mov	r0, r3
 800d352:	f001 ffc3 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
      
      HAL_Delay(20);
 800d356:	2014      	movs	r0, #20
 800d358:	f7fb fb40 	bl	80089dc <HAL_Delay>
    for(int signalNumber = 0; signalNumber < 4; signalNumber++)
 800d35c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d35e:	3301      	adds	r3, #1
 800d360:	663b      	str	r3, [r7, #96]	; 0x60
 800d362:	e75e      	b.n	800d222 <_Z19SendAdcToDataScreenii+0x8a>
  for(int i = 0; i < packetCount; i++)
 800d364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d366:	3301      	adds	r3, #1
 800d368:	667b      	str	r3, [r7, #100]	; 0x64
 800d36a:	e753      	b.n	800d214 <_Z19SendAdcToDataScreenii+0x7c>
    }
  }
}
 800d36c:	3774      	adds	r7, #116	; 0x74
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd90      	pop	{r4, r7, pc}
 800d372:	bf00      	nop
 800d374:	08019d70 	.word	0x08019d70
 800d378:	08019ce4 	.word	0x08019ce4
 800d37c:	08019da8 	.word	0x08019da8
 800d380:	20000fe0 	.word	0x20000fe0
 800d384:	40533333 	.word	0x40533333
 800d388:	45800000 	.word	0x45800000
 800d38c:	08019d30 	.word	0x08019d30
 800d390:	08019b6c 	.word	0x08019b6c
 800d394:	08019d5c 	.word	0x08019d5c

0800d398 <_Z16SendCustomPacketicd>:

void SendCustomPacket(int module, char rawParameter, double value)
{
 800d398:	b590      	push	{r4, r7, lr}
 800d39a:	b097      	sub	sp, #92	; 0x5c
 800d39c:	af02      	add	r7, sp, #8
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	ed87 0b00 	vstr	d0, [r7]
 800d3a6:	72fb      	strb	r3, [r7, #11]
  UartPacket uartPacket;
 800d3a8:	f107 031c 	add.w	r3, r7, #28
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f001 f9cf 	bl	800e750 <_ZN10UartPacketC1Ev>
  
  uartPacket.SetSource(Source::SOURCE_TARGET1);
 800d3b2:	f107 031c 	add.w	r3, r7, #28
 800d3b6:	2131      	movs	r1, #49	; 0x31
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f001 fa28 	bl	800e80e <_ZN10UartPacket9SetSourceE6Source>
  uartPacket.SetModule(module);
 800d3be:	f107 031c 	add.w	r3, r7, #28
 800d3c2:	68f9      	ldr	r1, [r7, #12]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f001 fa34 	bl	800e832 <_ZN10UartPacket9SetModuleEi>
  uartPacket.SetFunction(Function::DATA_PACKET);
 800d3ca:	f107 031c 	add.w	r3, r7, #28
 800d3ce:	2131      	movs	r1, #49	; 0x31
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f001 fa40 	bl	800e856 <_ZN10UartPacket11SetFunctionE8Function>
  uartPacket.SetParameter(rawParameter);
 800d3d6:	7afa      	ldrb	r2, [r7, #11]
 800d3d8:	f107 031c 	add.w	r3, r7, #28
 800d3dc:	4611      	mov	r1, r2
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f001 fb0d 	bl	800e9fe <_ZN10UartPacket12SetParameterEh>
  
  if(value >= 0)
 800d3e4:	f04f 0200 	mov.w	r2, #0
 800d3e8:	f04f 0300 	mov.w	r3, #0
 800d3ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3f0:	f7fa f90a 	bl	8007608 <__aeabi_dcmpge>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d006      	beq.n	800d408 <_Z16SendCustomPacketicd+0x70>
  {
    uartPacket.SetSign(Sign::POSITIVE_SIGN);
 800d3fa:	f107 031c 	add.w	r3, r7, #28
 800d3fe:	2131      	movs	r1, #49	; 0x31
 800d400:	4618      	mov	r0, r3
 800d402:	f001 fb0c 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
 800d406:	e00b      	b.n	800d420 <_Z16SendCustomPacketicd+0x88>
  }
  else
  {
    uartPacket.SetSign(Sign::NEGATIVE_SIGN);
 800d408:	f107 031c 	add.w	r3, r7, #28
 800d40c:	2132      	movs	r1, #50	; 0x32
 800d40e:	4618      	mov	r0, r3
 800d410:	f001 fb05 	bl	800ea1e <_ZN10UartPacket7SetSignE4Sign>
    value = value * (-1);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	603b      	str	r3, [r7, #0]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d41e:	607b      	str	r3, [r7, #4]
  }
  
  char numericStringConversionBuffer[PAYLOAD_SIZE + 1];
  
  snprintf(numericStringConversionBuffer, PAYLOAD_SIZE + 1, "%lf", value);
 800d420:	f107 0010 	add.w	r0, r7, #16
 800d424:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d428:	e9cd 3400 	strd	r3, r4, [sp]
 800d42c:	4a19      	ldr	r2, [pc, #100]	; (800d494 <_Z16SendCustomPacketicd+0xfc>)
 800d42e:	210b      	movs	r1, #11
 800d430:	f006 f934 	bl	801369c <snprintf>
  
  int lengthInt = strlen(numericStringConversionBuffer);
 800d434:	f107 0310 	add.w	r3, r7, #16
 800d438:	4618      	mov	r0, r3
 800d43a:	f7f9 fc9b 	bl	8006d74 <strlen>
 800d43e:	4603      	mov	r3, r0
 800d440:	64fb      	str	r3, [r7, #76]	; 0x4c
  
  uartPacket.SetLength(lengthInt);
 800d442:	f107 031c 	add.w	r3, r7, #28
 800d446:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d448:	4618      	mov	r0, r3
 800d44a:	f001 fb14 	bl	800ea76 <_ZN10UartPacket9SetLengthEi>
  
  memcpy((char*)uartPacket.GetPayload(), numericStringConversionBuffer, lengthInt);
 800d44e:	f107 031c 	add.w	r3, r7, #28
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe ff2a 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800d458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d45a:	f107 0310 	add.w	r3, r7, #16
 800d45e:	4619      	mov	r1, r3
 800d460:	f005 fe73 	bl	801314a <memcpy>
  
  uartPacket.AppendCrcToPacket();
 800d464:	f107 031c 	add.w	r3, r7, #28
 800d468:	4618      	mov	r0, r3
 800d46a:	f001 fc45 	bl	800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>
  
#if DEBUG == 1
  printf("SendCustomPacket packet is:");
 800d46e:	480a      	ldr	r0, [pc, #40]	; (800d498 <_Z16SendCustomPacketicd+0x100>)
 800d470:	f005 fea4 	bl	80131bc <printf>
  uartPacket.PrintPacket();
 800d474:	f107 031c 	add.w	r3, r7, #28
 800d478:	2100      	movs	r1, #0
 800d47a:	4618      	mov	r0, r3
 800d47c:	f001 fcca 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
  
  SendPacketViaUart(uartPacket);
 800d480:	f107 031c 	add.w	r3, r7, #28
 800d484:	4618      	mov	r0, r3
 800d486:	f001 ff29 	bl	800f2dc <_Z17SendPacketViaUartR10UartPacket>
}
 800d48a:	bf00      	nop
 800d48c:	3754      	adds	r7, #84	; 0x54
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd90      	pop	{r4, r7, pc}
 800d492:	bf00      	nop
 800d494:	08019b6c 	.word	0x08019b6c
 800d498:	08019db8 	.word	0x08019db8

0800d49c <_Z19ProcessReceivedDataR10UartPacket>:

void ProcessReceivedData(UartPacket& uartPacket)
{   
 800d49c:	b590      	push	{r4, r7, lr}
 800d49e:	b08b      	sub	sp, #44	; 0x2c
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
#if DEBUG == 1
  uartPacket.PrintPacket();
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f001 fcb4 	bl	800ee14 <_ZNK10UartPacket11PrintPacketEb>
#endif
  
  if(uartPacket.CheckCrc32())
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f001 fc68 	bl	800ed82 <_ZNK10UartPacket10CheckCrc32Ev>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d06b      	beq.n	800d590 <_Z19ProcessReceivedDataR10UartPacket+0xf4>
  {
    Module* pCurrentModule = nullptr;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	627b      	str	r3, [r7, #36]	; 0x24
    
    ModuleID moduleID = uartPacket.GetModule();
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f001 fafc 	bl	800eaba <_ZNK10UartPacket9GetModuleEv>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	617b      	str	r3, [r7, #20]
    
    if(moduleID == ModuleID::MODULE1)
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	2b31      	cmp	r3, #49	; 0x31
 800d4ca:	d102      	bne.n	800d4d2 <_Z19ProcessReceivedDataR10UartPacket+0x36>
    {
      pCurrentModule = &module1;
 800d4cc:	4b33      	ldr	r3, [pc, #204]	; (800d59c <_Z19ProcessReceivedDataR10UartPacket+0x100>)
 800d4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d0:	e00f      	b.n	800d4f2 <_Z19ProcessReceivedDataR10UartPacket+0x56>
    }
    else if(moduleID == ModuleID::MODULE2)
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	2b32      	cmp	r3, #50	; 0x32
 800d4d6:	d102      	bne.n	800d4de <_Z19ProcessReceivedDataR10UartPacket+0x42>
    {
      pCurrentModule = &module2;
 800d4d8:	4b31      	ldr	r3, [pc, #196]	; (800d5a0 <_Z19ProcessReceivedDataR10UartPacket+0x104>)
 800d4da:	627b      	str	r3, [r7, #36]	; 0x24
 800d4dc:	e009      	b.n	800d4f2 <_Z19ProcessReceivedDataR10UartPacket+0x56>
    }
    else if(moduleID == ModuleID::MODULE3)
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	2b33      	cmp	r3, #51	; 0x33
 800d4e2:	d102      	bne.n	800d4ea <_Z19ProcessReceivedDataR10UartPacket+0x4e>
    {
      pCurrentModule = &module3;
 800d4e4:	4b2f      	ldr	r3, [pc, #188]	; (800d5a4 <_Z19ProcessReceivedDataR10UartPacket+0x108>)
 800d4e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4e8:	e003      	b.n	800d4f2 <_Z19ProcessReceivedDataR10UartPacket+0x56>
    }
    else
    {
      printf("ERROR, Wrong module field in received packet, aborting\n");
 800d4ea:	482f      	ldr	r0, [pc, #188]	; (800d5a8 <_Z19ProcessReceivedDataR10UartPacket+0x10c>)
 800d4ec:	f005 fec8 	bl	8013280 <puts>
      return;
 800d4f0:	e051      	b.n	800d596 <_Z19ProcessReceivedDataR10UartPacket+0xfa>
    }
    
    Function function = uartPacket.GetFunction();
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f001 fb01 	bl	800eafa <_ZNK10UartPacket11GetFunctionEv>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	613b      	str	r3, [r7, #16]
    Parameter parameter = uartPacket.GetParameter();
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f001 fb46 	bl	800eb8e <_ZNK10UartPacket12GetParameterEv>
 800d502:	4603      	mov	r3, r0
 800d504:	60fb      	str	r3, [r7, #12]
    
    double valueDouble = 0;
 800d506:	f04f 0300 	mov.w	r3, #0
 800d50a:	f04f 0400 	mov.w	r4, #0
 800d50e:	e9c7 3406 	strd	r3, r4, [r7, #24]
    
    switch(function)
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	2b35      	cmp	r3, #53	; 0x35
 800d516:	d00b      	beq.n	800d530 <_Z19ProcessReceivedDataR10UartPacket+0x94>
 800d518:	2b36      	cmp	r3, #54	; 0x36
 800d51a:	d011      	beq.n	800d540 <_Z19ProcessReceivedDataR10UartPacket+0xa4>
 800d51c:	2b34      	cmp	r3, #52	; 0x34
 800d51e:	d133      	bne.n	800d588 <_Z19ProcessReceivedDataR10UartPacket+0xec>
    {
    case Function::ENABLE_PARAMETER_PACKET:
      printf("Enable parameter packet received\n");
 800d520:	4822      	ldr	r0, [pc, #136]	; (800d5ac <_Z19ProcessReceivedDataR10UartPacket+0x110>)
 800d522:	f005 fead 	bl	8013280 <puts>
      pCurrentModule->EnableParameter(parameter);
 800d526:	68f9      	ldr	r1, [r7, #12]
 800d528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d52a:	f000 fca3 	bl	800de74 <_ZN6Module15EnableParameterE9Parameter>
      break;
 800d52e:	e032      	b.n	800d596 <_Z19ProcessReceivedDataR10UartPacket+0xfa>
      
    case Function::DISABLE_PARAMETER_PACKET: 
      printf("Disable parameter packet received\n");
 800d530:	481f      	ldr	r0, [pc, #124]	; (800d5b0 <_Z19ProcessReceivedDataR10UartPacket+0x114>)
 800d532:	f005 fea5 	bl	8013280 <puts>
      pCurrentModule->DisableParameter(parameter);
 800d536:	68f9      	ldr	r1, [r7, #12]
 800d538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d53a:	f000 fd47 	bl	800dfcc <_ZN6Module16DisableParameterE9Parameter>
      break;
 800d53e:	e02a      	b.n	800d596 <_Z19ProcessReceivedDataR10UartPacket+0xfa>
      
    case Function::SET_PARAMETER_PACKET:
      printf("Set parameter packet received\n");
 800d540:	481c      	ldr	r0, [pc, #112]	; (800d5b4 <_Z19ProcessReceivedDataR10UartPacket+0x118>)
 800d542:	f005 fe9d 	bl	8013280 <puts>
      valueDouble = double(atof((char*)(uartPacket.GetPayload())));
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7fe feb0 	bl	800c2ac <_ZNK10UartPacket10GetPayloadEv>
 800d54c:	4603      	mov	r3, r0
 800d54e:	4618      	mov	r0, r3
 800d550:	f005 f90e 	bl	8012770 <atof>
 800d554:	ed87 0b06 	vstr	d0, [r7, #24]
      
      if(uartPacket.GetSign() == Sign::NEGATIVE_SIGN)
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f001 fb8c 	bl	800ec76 <_ZNK10UartPacket7GetSignEv>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b32      	cmp	r3, #50	; 0x32
 800d562:	bf0c      	ite	eq
 800d564:	2301      	moveq	r3, #1
 800d566:	2300      	movne	r3, #0
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d005      	beq.n	800d57a <_Z19ProcessReceivedDataR10UartPacket+0xde>
      {
        /*Make value negative if it was marked as negative in UART Packet*/
        valueDouble = valueDouble * (-1);
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	61bb      	str	r3, [r7, #24]
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d578:	61fb      	str	r3, [r7, #28]
      }
      
      pCurrentModule->SetParameter(parameter, valueDouble);
 800d57a:	ed97 0b06 	vldr	d0, [r7, #24]
 800d57e:	68f9      	ldr	r1, [r7, #12]
 800d580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d582:	f000 fdcf 	bl	800e124 <_ZN6Module12SetParameterE9Parameterd>
      break;
 800d586:	e006      	b.n	800d596 <_Z19ProcessReceivedDataR10UartPacket+0xfa>
      
    default:
      printf("ERROR, Wrong function type, aborting\n");
 800d588:	480b      	ldr	r0, [pc, #44]	; (800d5b8 <_Z19ProcessReceivedDataR10UartPacket+0x11c>)
 800d58a:	f005 fe79 	bl	8013280 <puts>
      return;
 800d58e:	e002      	b.n	800d596 <_Z19ProcessReceivedDataR10UartPacket+0xfa>
    }
  }
  else
  {
    printf("ERROR, WRONG CRC IN DATA RECEIVED FROM STM32F469\n");
 800d590:	480a      	ldr	r0, [pc, #40]	; (800d5bc <_Z19ProcessReceivedDataR10UartPacket+0x120>)
 800d592:	f005 fe75 	bl	8013280 <puts>
  }
}
 800d596:	372c      	adds	r7, #44	; 0x2c
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd90      	pop	{r4, r7, pc}
 800d59c:	20000dd0 	.word	0x20000dd0
 800d5a0:	20000e30 	.word	0x20000e30
 800d5a4:	20000e90 	.word	0x20000e90
 800d5a8:	08019c74 	.word	0x08019c74
 800d5ac:	08019dd4 	.word	0x08019dd4
 800d5b0:	08019df8 	.word	0x08019df8
 800d5b4:	08019e1c 	.word	0x08019e1c
 800d5b8:	08019e3c 	.word	0x08019e3c
 800d5bc:	08019e64 	.word	0x08019e64

0800d5c0 <fputc>:
ADC_HandleTypeDef hadc1;

/* USER CODE BEGIN PV */

int fputc(int ch, FILE *f)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, UART_TX_WAITING);
 800d5ca:	1d39      	adds	r1, r7, #4
 800d5cc:	2332      	movs	r3, #50	; 0x32
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	4803      	ldr	r0, [pc, #12]	; (800d5e0 <fputc+0x20>)
 800d5d2:	f7fc fce4 	bl	8009f9e <HAL_UART_Transmit>
  
  return ch;
 800d5d6:	687b      	ldr	r3, [r7, #4]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	20000f30 	.word	0x20000f30

0800d5e4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*UART receive interrupt callback function*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  /*Command UART*/
  if(huart == &huart1)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4aaa      	ldr	r2, [pc, #680]	; (800d898 <HAL_UART_RxCpltCallback+0x2b4>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	f040 8132 	bne.w	800d85a <HAL_UART_RxCpltCallback+0x276>
  {
    printf("\n-----------------Received command data from PC-----------------\n");
 800d5f6:	48a9      	ldr	r0, [pc, #676]	; (800d89c <HAL_UART_RxCpltCallback+0x2b8>)
 800d5f8:	f005 fe42 	bl	8013280 <puts>
    printf("Command: %.60s\n", receivedCommandBuffer);
 800d5fc:	49a8      	ldr	r1, [pc, #672]	; (800d8a0 <HAL_UART_RxCpltCallback+0x2bc>)
 800d5fe:	48a9      	ldr	r0, [pc, #676]	; (800d8a4 <HAL_UART_RxCpltCallback+0x2c0>)
 800d600:	f005 fddc 	bl	80131bc <printf>
    
    fullCommandBuffer.assign(receivedCommandBuffer);
 800d604:	49a6      	ldr	r1, [pc, #664]	; (800d8a0 <HAL_UART_RxCpltCallback+0x2bc>)
 800d606:	48a8      	ldr	r0, [pc, #672]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d608:	f003 fd7c 	bl	8011104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
    
    vector<string> extractedArguments;
 800d60c:	f107 030c 	add.w	r3, r7, #12
 800d610:	4618      	mov	r0, r3
 800d612:	f7fe fc8c 	bl	800bf2e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
    
    if(fullCommandBuffer.find("#InitModule") != string::npos)
 800d616:	2200      	movs	r2, #0
 800d618:	49a4      	ldr	r1, [pc, #656]	; (800d8ac <HAL_UART_RxCpltCallback+0x2c8>)
 800d61a:	48a3      	ldr	r0, [pc, #652]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d61c:	f003 fdc0 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d620:	4603      	mov	r3, r0
 800d622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d626:	bf14      	ite	ne
 800d628:	2301      	movne	r3, #1
 800d62a:	2300      	moveq	r3, #0
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d006      	beq.n	800d640 <HAL_UART_RxCpltCallback+0x5c>
    {
      printf("Invoking InitModule command\n");
 800d632:	489f      	ldr	r0, [pc, #636]	; (800d8b0 <HAL_UART_RxCpltCallback+0x2cc>)
 800d634:	f005 fe24 	bl	8013280 <puts>
      CommandInitModule(fullCommandBuffer);
 800d638:	489b      	ldr	r0, [pc, #620]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d63a:	f7fd fc05 	bl	800ae48 <_Z17CommandInitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d63e:	e101      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#DeinitModule") != string::npos)
 800d640:	2200      	movs	r2, #0
 800d642:	499c      	ldr	r1, [pc, #624]	; (800d8b4 <HAL_UART_RxCpltCallback+0x2d0>)
 800d644:	4898      	ldr	r0, [pc, #608]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d646:	f003 fdab 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d64a:	4603      	mov	r3, r0
 800d64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d650:	bf14      	ite	ne
 800d652:	2301      	movne	r3, #1
 800d654:	2300      	moveq	r3, #0
 800d656:	b2db      	uxtb	r3, r3
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d006      	beq.n	800d66a <HAL_UART_RxCpltCallback+0x86>
    {
      printf("Invoking DeinitModule command\n");
 800d65c:	4896      	ldr	r0, [pc, #600]	; (800d8b8 <HAL_UART_RxCpltCallback+0x2d4>)
 800d65e:	f005 fe0f 	bl	8013280 <puts>
      CommandDeinitModule(fullCommandBuffer);
 800d662:	4891      	ldr	r0, [pc, #580]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d664:	f7fd fc56 	bl	800af14 <_Z19CommandDeinitModuleRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d668:	e0ec      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SetGraphMin") != string::npos)
 800d66a:	2200      	movs	r2, #0
 800d66c:	4993      	ldr	r1, [pc, #588]	; (800d8bc <HAL_UART_RxCpltCallback+0x2d8>)
 800d66e:	488e      	ldr	r0, [pc, #568]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d670:	f003 fd96 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d674:	4603      	mov	r3, r0
 800d676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d67a:	bf14      	ite	ne
 800d67c:	2301      	movne	r3, #1
 800d67e:	2300      	moveq	r3, #0
 800d680:	b2db      	uxtb	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d006      	beq.n	800d694 <HAL_UART_RxCpltCallback+0xb0>
    {
      printf("Invoking SetGraphMin command\n");
 800d686:	488e      	ldr	r0, [pc, #568]	; (800d8c0 <HAL_UART_RxCpltCallback+0x2dc>)
 800d688:	f005 fdfa 	bl	8013280 <puts>
      CommandSetGraphMin(fullCommandBuffer);
 800d68c:	4886      	ldr	r0, [pc, #536]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d68e:	f7fd fca7 	bl	800afe0 <_Z18CommandSetGraphMinRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d692:	e0d7      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SetGraphMax") != string::npos)
 800d694:	2200      	movs	r2, #0
 800d696:	498b      	ldr	r1, [pc, #556]	; (800d8c4 <HAL_UART_RxCpltCallback+0x2e0>)
 800d698:	4883      	ldr	r0, [pc, #524]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d69a:	f003 fd81 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a4:	bf14      	ite	ne
 800d6a6:	2301      	movne	r3, #1
 800d6a8:	2300      	moveq	r3, #0
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d006      	beq.n	800d6be <HAL_UART_RxCpltCallback+0xda>
    {
      printf("Invoking SetGraphMax command\n");
 800d6b0:	4885      	ldr	r0, [pc, #532]	; (800d8c8 <HAL_UART_RxCpltCallback+0x2e4>)
 800d6b2:	f005 fde5 	bl	8013280 <puts>
      CommandSetGraphMax(fullCommandBuffer);
 800d6b6:	487c      	ldr	r0, [pc, #496]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d6b8:	f7fd fd10 	bl	800b0dc <_Z18CommandSetGraphMaxRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d6bc:	e0c2      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SetGraphTime") != string::npos)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	4982      	ldr	r1, [pc, #520]	; (800d8cc <HAL_UART_RxCpltCallback+0x2e8>)
 800d6c2:	4879      	ldr	r0, [pc, #484]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d6c4:	f003 fd6c 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ce:	bf14      	ite	ne
 800d6d0:	2301      	movne	r3, #1
 800d6d2:	2300      	moveq	r3, #0
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d006      	beq.n	800d6e8 <HAL_UART_RxCpltCallback+0x104>
    {
      printf("Invoking SetGraphTime command\n");
 800d6da:	487d      	ldr	r0, [pc, #500]	; (800d8d0 <HAL_UART_RxCpltCallback+0x2ec>)
 800d6dc:	f005 fdd0 	bl	8013280 <puts>
      CommandSetGraphTime(fullCommandBuffer);
 800d6e0:	4871      	ldr	r0, [pc, #452]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d6e2:	f7fd fd79 	bl	800b1d8 <_Z19CommandSetGraphTimeRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d6e6:	e0ad      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#GraphLinear") != string::npos)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	497a      	ldr	r1, [pc, #488]	; (800d8d4 <HAL_UART_RxCpltCallback+0x2f0>)
 800d6ec:	486e      	ldr	r0, [pc, #440]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d6ee:	f003 fd57 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f8:	bf14      	ite	ne
 800d6fa:	2301      	movne	r3, #1
 800d6fc:	2300      	moveq	r3, #0
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	2b00      	cmp	r3, #0
 800d702:	d006      	beq.n	800d712 <HAL_UART_RxCpltCallback+0x12e>
    {
      printf("Invoking GraphLinear command\n");
 800d704:	4874      	ldr	r0, [pc, #464]	; (800d8d8 <HAL_UART_RxCpltCallback+0x2f4>)
 800d706:	f005 fdbb 	bl	8013280 <puts>
      CommandGraphLinear(fullCommandBuffer);
 800d70a:	4867      	ldr	r0, [pc, #412]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d70c:	f7fd fdda 	bl	800b2c4 <_Z18CommandGraphLinearRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d710:	e098      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#GraphSine") != string::npos)
 800d712:	2200      	movs	r2, #0
 800d714:	4971      	ldr	r1, [pc, #452]	; (800d8dc <HAL_UART_RxCpltCallback+0x2f8>)
 800d716:	4864      	ldr	r0, [pc, #400]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d718:	f003 fd42 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d71c:	4603      	mov	r3, r0
 800d71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d722:	bf14      	ite	ne
 800d724:	2301      	movne	r3, #1
 800d726:	2300      	moveq	r3, #0
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d006      	beq.n	800d73c <HAL_UART_RxCpltCallback+0x158>
    {
      printf("Invoking GraphSine command\n");
 800d72e:	486c      	ldr	r0, [pc, #432]	; (800d8e0 <HAL_UART_RxCpltCallback+0x2fc>)
 800d730:	f005 fda6 	bl	8013280 <puts>
      CommandGraphSine(fullCommandBuffer);
 800d734:	485c      	ldr	r0, [pc, #368]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d736:	f7fd fe87 	bl	800b448 <_Z16CommandGraphSineRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d73a:	e083      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#GraphSquare") != string::npos)
 800d73c:	2200      	movs	r2, #0
 800d73e:	4969      	ldr	r1, [pc, #420]	; (800d8e4 <HAL_UART_RxCpltCallback+0x300>)
 800d740:	4859      	ldr	r0, [pc, #356]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d742:	f003 fd2d 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d746:	4603      	mov	r3, r0
 800d748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74c:	bf14      	ite	ne
 800d74e:	2301      	movne	r3, #1
 800d750:	2300      	moveq	r3, #0
 800d752:	b2db      	uxtb	r3, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <HAL_UART_RxCpltCallback+0x182>
    {
      printf("Invoking GraphSquare command\n");
 800d758:	4863      	ldr	r0, [pc, #396]	; (800d8e8 <HAL_UART_RxCpltCallback+0x304>)
 800d75a:	f005 fd91 	bl	8013280 <puts>
      CommandGraphSquare(fullCommandBuffer);
 800d75e:	4852      	ldr	r0, [pc, #328]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d760:	f7fd ff24 	bl	800b5ac <_Z18CommandGraphSquareRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d764:	e06e      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SendWrongCrc") != string::npos)
 800d766:	2200      	movs	r2, #0
 800d768:	4960      	ldr	r1, [pc, #384]	; (800d8ec <HAL_UART_RxCpltCallback+0x308>)
 800d76a:	484f      	ldr	r0, [pc, #316]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d76c:	f003 fd18 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d770:	4603      	mov	r3, r0
 800d772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d776:	bf14      	ite	ne
 800d778:	2301      	movne	r3, #1
 800d77a:	2300      	moveq	r3, #0
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d006      	beq.n	800d790 <HAL_UART_RxCpltCallback+0x1ac>
    {
      printf("Invoking SendWrongCrc command\n");
 800d782:	485b      	ldr	r0, [pc, #364]	; (800d8f0 <HAL_UART_RxCpltCallback+0x30c>)
 800d784:	f005 fd7c 	bl	8013280 <puts>
      CommandSendWrongCrc(fullCommandBuffer);
 800d788:	4847      	ldr	r0, [pc, #284]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d78a:	f7fd ffd3 	bl	800b734 <_Z19CommandSendWrongCrcRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d78e:	e059      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#GetParameters") != string::npos)
 800d790:	2200      	movs	r2, #0
 800d792:	4958      	ldr	r1, [pc, #352]	; (800d8f4 <HAL_UART_RxCpltCallback+0x310>)
 800d794:	4844      	ldr	r0, [pc, #272]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d796:	f003 fd03 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d79a:	4603      	mov	r3, r0
 800d79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a0:	bf14      	ite	ne
 800d7a2:	2301      	movne	r3, #1
 800d7a4:	2300      	moveq	r3, #0
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d006      	beq.n	800d7ba <HAL_UART_RxCpltCallback+0x1d6>
    {
      printf("Invoking GetParameters command\n");
 800d7ac:	4852      	ldr	r0, [pc, #328]	; (800d8f8 <HAL_UART_RxCpltCallback+0x314>)
 800d7ae:	f005 fd67 	bl	8013280 <puts>
      CommandGetParameters(fullCommandBuffer);
 800d7b2:	483d      	ldr	r0, [pc, #244]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d7b4:	f7fe f824 	bl	800b800 <_Z20CommandGetParametersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d7b8:	e044      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#Adc1") != string::npos)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	494f      	ldr	r1, [pc, #316]	; (800d8fc <HAL_UART_RxCpltCallback+0x318>)
 800d7be:	483a      	ldr	r0, [pc, #232]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d7c0:	f003 fcee 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ca:	bf14      	ite	ne
 800d7cc:	2301      	movne	r3, #1
 800d7ce:	2300      	moveq	r3, #0
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d006      	beq.n	800d7e4 <HAL_UART_RxCpltCallback+0x200>
    {
      printf("Invoking Adc1 command\n");
 800d7d6:	484a      	ldr	r0, [pc, #296]	; (800d900 <HAL_UART_RxCpltCallback+0x31c>)
 800d7d8:	f005 fd52 	bl	8013280 <puts>
      CommandAdc1(fullCommandBuffer);
 800d7dc:	4832      	ldr	r0, [pc, #200]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d7de:	f7fe f875 	bl	800b8cc <_Z11CommandAdc1RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d7e2:	e02f      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#Adc2") != string::npos)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	4947      	ldr	r1, [pc, #284]	; (800d904 <HAL_UART_RxCpltCallback+0x320>)
 800d7e8:	482f      	ldr	r0, [pc, #188]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d7ea:	f003 fcd9 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f4:	bf14      	ite	ne
 800d7f6:	2301      	movne	r3, #1
 800d7f8:	2300      	moveq	r3, #0
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d006      	beq.n	800d80e <HAL_UART_RxCpltCallback+0x22a>
    {
      printf("Invoking Adc2 command\n");
 800d800:	4841      	ldr	r0, [pc, #260]	; (800d908 <HAL_UART_RxCpltCallback+0x324>)
 800d802:	f005 fd3d 	bl	8013280 <puts>
      CommandAdc2(fullCommandBuffer);
 800d806:	4828      	ldr	r0, [pc, #160]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d808:	f7fe f8d6 	bl	800b9b8 <_Z11CommandAdc2RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d80c:	e01a      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else if(fullCommandBuffer.find("#SendPacket") != string::npos)
 800d80e:	2200      	movs	r2, #0
 800d810:	493e      	ldr	r1, [pc, #248]	; (800d90c <HAL_UART_RxCpltCallback+0x328>)
 800d812:	4825      	ldr	r0, [pc, #148]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d814:	f003 fcc4 	bl	80111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800d818:	4603      	mov	r3, r0
 800d81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81e:	bf14      	ite	ne
 800d820:	2301      	movne	r3, #1
 800d822:	2300      	moveq	r3, #0
 800d824:	b2db      	uxtb	r3, r3
 800d826:	2b00      	cmp	r3, #0
 800d828:	d006      	beq.n	800d838 <HAL_UART_RxCpltCallback+0x254>
    {
      printf("Invoking SendPacket command\n");
 800d82a:	4839      	ldr	r0, [pc, #228]	; (800d910 <HAL_UART_RxCpltCallback+0x32c>)
 800d82c:	f005 fd28 	bl	8013280 <puts>
      CommandSendPacket(fullCommandBuffer);
 800d830:	481d      	ldr	r0, [pc, #116]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d832:	f7fe f937 	bl	800baa4 <_Z17CommandSendPacketRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800d836:	e005      	b.n	800d844 <HAL_UART_RxCpltCallback+0x260>
    }
    else
    {
      printf("Unrecognized command, reseting buffer\n");
 800d838:	4836      	ldr	r0, [pc, #216]	; (800d914 <HAL_UART_RxCpltCallback+0x330>)
 800d83a:	f005 fd21 	bl	8013280 <puts>
      fullCommandBuffer.clear();
 800d83e:	481a      	ldr	r0, [pc, #104]	; (800d8a8 <HAL_UART_RxCpltCallback+0x2c4>)
 800d840:	f003 fb88 	bl	8010f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    }
    
    HAL_UART_Receive_IT(&huart1, reinterpret_cast<uint8_t*>(receivedCommandBuffer), COMMAND_LENGTH);
 800d844:	223c      	movs	r2, #60	; 0x3c
 800d846:	4916      	ldr	r1, [pc, #88]	; (800d8a0 <HAL_UART_RxCpltCallback+0x2bc>)
 800d848:	4813      	ldr	r0, [pc, #76]	; (800d898 <HAL_UART_RxCpltCallback+0x2b4>)
 800d84a:	f7fc fc41 	bl	800a0d0 <HAL_UART_Receive_IT>
    vector<string> extractedArguments;
 800d84e:	f107 030c 	add.w	r3, r7, #12
 800d852:	4618      	mov	r0, r3
 800d854:	f7fe fb78 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    
    ProcessReceivedData(uartPacketReceived);
    
    HAL_UART_Receive_IT(&huart6, static_cast<uint8_t*>(uartPacketReceived), PACKET_SIZE);
  }
}
 800d858:	e01a      	b.n	800d890 <HAL_UART_RxCpltCallback+0x2ac>
  else if(huart == &huart6)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a2e      	ldr	r2, [pc, #184]	; (800d918 <HAL_UART_RxCpltCallback+0x334>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d116      	bne.n	800d890 <HAL_UART_RxCpltCallback+0x2ac>
    printf("\n-----------------Received data from Touch Panel STM32F469\n");   
 800d862:	482e      	ldr	r0, [pc, #184]	; (800d91c <HAL_UART_RxCpltCallback+0x338>)
 800d864:	f005 fd0c 	bl	8013280 <puts>
    ProcessReceivedData(uartPacketReceived);
 800d868:	482d      	ldr	r0, [pc, #180]	; (800d920 <HAL_UART_RxCpltCallback+0x33c>)
 800d86a:	f7ff fe17 	bl	800d49c <_Z19ProcessReceivedDataR10UartPacket>
    HAL_UART_Receive_IT(&huart6, static_cast<uint8_t*>(uartPacketReceived), PACKET_SIZE);
 800d86e:	482c      	ldr	r0, [pc, #176]	; (800d920 <HAL_UART_RxCpltCallback+0x33c>)
 800d870:	f000 ffc0 	bl	800e7f4 <_ZN10UartPacketcvPhEv>
 800d874:	4603      	mov	r3, r0
 800d876:	2214      	movs	r2, #20
 800d878:	4619      	mov	r1, r3
 800d87a:	4827      	ldr	r0, [pc, #156]	; (800d918 <HAL_UART_RxCpltCallback+0x334>)
 800d87c:	f7fc fc28 	bl	800a0d0 <HAL_UART_Receive_IT>
}
 800d880:	e006      	b.n	800d890 <HAL_UART_RxCpltCallback+0x2ac>
    vector<string> extractedArguments;
 800d882:	f107 030c 	add.w	r3, r7, #12
 800d886:	4618      	mov	r0, r3
 800d888:	f7fe fb5e 	bl	800bf48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800d88c:	f002 f8e9 	bl	800fa62 <__cxa_end_cleanup>
}
 800d890:	bf00      	nop
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20000ef0 	.word	0x20000ef0
 800d89c:	08019e98 	.word	0x08019e98
 800d8a0:	20001028 	.word	0x20001028
 800d8a4:	08019edc 	.word	0x08019edc
 800d8a8:	20001064 	.word	0x20001064
 800d8ac:	08019eec 	.word	0x08019eec
 800d8b0:	08019ef8 	.word	0x08019ef8
 800d8b4:	08019f14 	.word	0x08019f14
 800d8b8:	08019f24 	.word	0x08019f24
 800d8bc:	08019f44 	.word	0x08019f44
 800d8c0:	08019f54 	.word	0x08019f54
 800d8c4:	08019f74 	.word	0x08019f74
 800d8c8:	08019f84 	.word	0x08019f84
 800d8cc:	08019fa4 	.word	0x08019fa4
 800d8d0:	08019fb4 	.word	0x08019fb4
 800d8d4:	08019fd4 	.word	0x08019fd4
 800d8d8:	08019fe4 	.word	0x08019fe4
 800d8dc:	0801a004 	.word	0x0801a004
 800d8e0:	0801a010 	.word	0x0801a010
 800d8e4:	0801a02c 	.word	0x0801a02c
 800d8e8:	0801a03c 	.word	0x0801a03c
 800d8ec:	0801a05c 	.word	0x0801a05c
 800d8f0:	0801a06c 	.word	0x0801a06c
 800d8f4:	0801a08c 	.word	0x0801a08c
 800d8f8:	0801a09c 	.word	0x0801a09c
 800d8fc:	0801a0bc 	.word	0x0801a0bc
 800d900:	0801a0c4 	.word	0x0801a0c4
 800d904:	0801a0dc 	.word	0x0801a0dc
 800d908:	0801a0e4 	.word	0x0801a0e4
 800d90c:	0801a0fc 	.word	0x0801a0fc
 800d910:	0801a108 	.word	0x0801a108
 800d914:	0801a124 	.word	0x0801a124
 800d918:	20000f70 	.word	0x20000f70
 800d91c:	0801a14c 	.word	0x0801a14c
 800d920:	20000fb0 	.word	0x20000fb0

0800d924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d928:	f7fa ffe6 	bl	80088f8 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d92c:	f000 f82c 	bl	800d988 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d930:	f000 f9bc 	bl	800dcac <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800d934:	f000 f89a 	bl	800da6c <_ZL12MX_ADC1_Initv>
  MX_USART1_UART_Init();
 800d938:	f000 f92e 	bl	800db98 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 800d93c:	f000 f988 	bl	800dc50 <_ZL19MX_USART6_UART_Initv>
  MX_USART2_UART_Init();
 800d940:	f000 f958 	bl	800dbf4 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  
  HAL_UART_Receive_IT(&huart1, reinterpret_cast<uint8_t*>(receivedCommandBuffer), COMMAND_LENGTH);
 800d944:	223c      	movs	r2, #60	; 0x3c
 800d946:	490a      	ldr	r1, [pc, #40]	; (800d970 <main+0x4c>)
 800d948:	480a      	ldr	r0, [pc, #40]	; (800d974 <main+0x50>)
 800d94a:	f7fc fbc1 	bl	800a0d0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, static_cast<uint8_t*>(uartPacketReceived), PACKET_SIZE);
 800d94e:	480a      	ldr	r0, [pc, #40]	; (800d978 <main+0x54>)
 800d950:	f000 ff50 	bl	800e7f4 <_ZN10UartPacketcvPhEv>
 800d954:	4603      	mov	r3, r0
 800d956:	2214      	movs	r2, #20
 800d958:	4619      	mov	r1, r3
 800d95a:	4808      	ldr	r0, [pc, #32]	; (800d97c <main+0x58>)
 800d95c:	f7fc fbb8 	bl	800a0d0 <HAL_UART_Receive_IT>
  
  HAL_ADC_Start(&hadc1);
 800d960:	4807      	ldr	r0, [pc, #28]	; (800d980 <main+0x5c>)
 800d962:	f7fb f8a1 	bl	8008aa8 <HAL_ADC_Start>
  
  printf("System initialized\n");
 800d966:	4807      	ldr	r0, [pc, #28]	; (800d984 <main+0x60>)
 800d968:	f005 fc8a 	bl	8013280 <puts>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d96c:	e7fe      	b.n	800d96c <main+0x48>
 800d96e:	bf00      	nop
 800d970:	20001028 	.word	0x20001028
 800d974:	20000ef0 	.word	0x20000ef0
 800d978:	20000fb0 	.word	0x20000fb0
 800d97c:	20000f70 	.word	0x20000f70
 800d980:	20000fe0 	.word	0x20000fe0
 800d984:	0801a188 	.word	0x0801a188

0800d988 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b094      	sub	sp, #80	; 0x50
 800d98c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d98e:	f107 0320 	add.w	r3, r7, #32
 800d992:	2230      	movs	r2, #48	; 0x30
 800d994:	2100      	movs	r1, #0
 800d996:	4618      	mov	r0, r3
 800d998:	f005 fbfb 	bl	8013192 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d99c:	f107 030c 	add.w	r3, r7, #12
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	601a      	str	r2, [r3, #0]
 800d9a4:	605a      	str	r2, [r3, #4]
 800d9a6:	609a      	str	r2, [r3, #8]
 800d9a8:	60da      	str	r2, [r3, #12]
 800d9aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	60bb      	str	r3, [r7, #8]
 800d9b0:	4b2c      	ldr	r3, [pc, #176]	; (800da64 <_Z18SystemClock_Configv+0xdc>)
 800d9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b4:	4a2b      	ldr	r2, [pc, #172]	; (800da64 <_Z18SystemClock_Configv+0xdc>)
 800d9b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9ba:	6413      	str	r3, [r2, #64]	; 0x40
 800d9bc:	4b29      	ldr	r3, [pc, #164]	; (800da64 <_Z18SystemClock_Configv+0xdc>)
 800d9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9c4:	60bb      	str	r3, [r7, #8]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	607b      	str	r3, [r7, #4]
 800d9cc:	4b26      	ldr	r3, [pc, #152]	; (800da68 <_Z18SystemClock_Configv+0xe0>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a25      	ldr	r2, [pc, #148]	; (800da68 <_Z18SystemClock_Configv+0xe0>)
 800d9d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d9d6:	6013      	str	r3, [r2, #0]
 800d9d8:	4b23      	ldr	r3, [pc, #140]	; (800da68 <_Z18SystemClock_Configv+0xe0>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d9e0:	607b      	str	r3, [r7, #4]
 800d9e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d9ec:	2310      	movs	r3, #16
 800d9ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d9f8:	2308      	movs	r3, #8
 800d9fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800d9fc:	2364      	movs	r3, #100	; 0x64
 800d9fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800da00:	2302      	movs	r3, #2
 800da02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800da04:	2304      	movs	r3, #4
 800da06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800da08:	f107 0320 	add.w	r3, r7, #32
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fb fe17 	bl	8009640 <HAL_RCC_OscConfig>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	bf14      	ite	ne
 800da18:	2301      	movne	r3, #1
 800da1a:	2300      	moveq	r3, #0
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800da22:	f000 f9b3 	bl	800dd8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800da26:	230f      	movs	r3, #15
 800da28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800da2a:	2302      	movs	r3, #2
 800da2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800da2e:	2300      	movs	r3, #0
 800da30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800da32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800da38:	2300      	movs	r3, #0
 800da3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800da3c:	f107 030c 	add.w	r3, r7, #12
 800da40:	2103      	movs	r1, #3
 800da42:	4618      	mov	r0, r3
 800da44:	f7fc f86c 	bl	8009b20 <HAL_RCC_ClockConfig>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	bf14      	ite	ne
 800da4e:	2301      	movne	r3, #1
 800da50:	2300      	moveq	r3, #0
 800da52:	b2db      	uxtb	r3, r3
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800da58:	f000 f998 	bl	800dd8c <Error_Handler>
  }
}
 800da5c:	bf00      	nop
 800da5e:	3750      	adds	r7, #80	; 0x50
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	40023800 	.word	0x40023800
 800da68:	40007000 	.word	0x40007000

0800da6c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800da72:	463b      	mov	r3, r7
 800da74:	2200      	movs	r2, #0
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	605a      	str	r2, [r3, #4]
 800da7a:	609a      	str	r2, [r3, #8]
 800da7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800da7e:	4b43      	ldr	r3, [pc, #268]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800da80:	4a43      	ldr	r2, [pc, #268]	; (800db90 <_ZL12MX_ADC1_Initv+0x124>)
 800da82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800da84:	4b41      	ldr	r3, [pc, #260]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800da86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800da8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800da8c:	4b3f      	ldr	r3, [pc, #252]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800da8e:	2200      	movs	r2, #0
 800da90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800da92:	4b3e      	ldr	r3, [pc, #248]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800da94:	2201      	movs	r2, #1
 800da96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800da98:	4b3c      	ldr	r3, [pc, #240]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800da9a:	2201      	movs	r2, #1
 800da9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800da9e:	4b3b      	ldr	r3, [pc, #236]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800daa6:	4b39      	ldr	r3, [pc, #228]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800daa8:	2200      	movs	r2, #0
 800daaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800daac:	4b37      	ldr	r3, [pc, #220]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800daae:	4a39      	ldr	r2, [pc, #228]	; (800db94 <_ZL12MX_ADC1_Initv+0x128>)
 800dab0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dab2:	4b36      	ldr	r3, [pc, #216]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800dab8:	4b34      	ldr	r3, [pc, #208]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800daba:	2204      	movs	r2, #4
 800dabc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800dabe:	4b33      	ldr	r3, [pc, #204]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dac6:	4b31      	ldr	r3, [pc, #196]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800dac8:	2201      	movs	r2, #1
 800daca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800dacc:	482f      	ldr	r0, [pc, #188]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800dace:	f7fa ffa7 	bl	8008a20 <HAL_ADC_Init>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	bf14      	ite	ne
 800dad8:	2301      	movne	r3, #1
 800dada:	2300      	moveq	r3, #0
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800dae2:	f000 f953 	bl	800dd8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800daea:	2301      	movs	r3, #1
 800daec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800daee:	2300      	movs	r3, #0
 800daf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800daf2:	463b      	mov	r3, r7
 800daf4:	4619      	mov	r1, r3
 800daf6:	4825      	ldr	r0, [pc, #148]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800daf8:	f7fb f88a 	bl	8008c10 <HAL_ADC_ConfigChannel>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	bf14      	ite	ne
 800db02:	2301      	movne	r3, #1
 800db04:	2300      	moveq	r3, #0
 800db06:	b2db      	uxtb	r3, r3
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d001      	beq.n	800db10 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 800db0c:	f000 f93e 	bl	800dd8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800db10:	2301      	movs	r3, #1
 800db12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800db14:	2302      	movs	r3, #2
 800db16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800db18:	463b      	mov	r3, r7
 800db1a:	4619      	mov	r1, r3
 800db1c:	481b      	ldr	r0, [pc, #108]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800db1e:	f7fb f877 	bl	8008c10 <HAL_ADC_ConfigChannel>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	bf14      	ite	ne
 800db28:	2301      	movne	r3, #1
 800db2a:	2300      	moveq	r3, #0
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <_ZL12MX_ADC1_Initv+0xca>
  {
    Error_Handler();
 800db32:	f000 f92b 	bl	800dd8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800db36:	2304      	movs	r3, #4
 800db38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800db3a:	2303      	movs	r3, #3
 800db3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800db3e:	463b      	mov	r3, r7
 800db40:	4619      	mov	r1, r3
 800db42:	4812      	ldr	r0, [pc, #72]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800db44:	f7fb f864 	bl	8008c10 <HAL_ADC_ConfigChannel>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	bf14      	ite	ne
 800db4e:	2301      	movne	r3, #1
 800db50:	2300      	moveq	r3, #0
 800db52:	b2db      	uxtb	r3, r3
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <_ZL12MX_ADC1_Initv+0xf0>
  {
    Error_Handler();
 800db58:	f000 f918 	bl	800dd8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800db5c:	2306      	movs	r3, #6
 800db5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800db60:	2304      	movs	r3, #4
 800db62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800db64:	463b      	mov	r3, r7
 800db66:	4619      	mov	r1, r3
 800db68:	4808      	ldr	r0, [pc, #32]	; (800db8c <_ZL12MX_ADC1_Initv+0x120>)
 800db6a:	f7fb f851 	bl	8008c10 <HAL_ADC_ConfigChannel>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	bf14      	ite	ne
 800db74:	2301      	movne	r3, #1
 800db76:	2300      	moveq	r3, #0
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d001      	beq.n	800db82 <_ZL12MX_ADC1_Initv+0x116>
  {
    Error_Handler();
 800db7e:	f000 f905 	bl	800dd8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  
  /* USER CODE END ADC1_Init 2 */

}
 800db82:	bf00      	nop
 800db84:	3710      	adds	r7, #16
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	20000fe0 	.word	0x20000fe0
 800db90:	40012000 	.word	0x40012000
 800db94:	0f000001 	.word	0x0f000001

0800db98 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800db9c:	4b13      	ldr	r3, [pc, #76]	; (800dbec <_ZL19MX_USART1_UART_Initv+0x54>)
 800db9e:	4a14      	ldr	r2, [pc, #80]	; (800dbf0 <_ZL19MX_USART1_UART_Initv+0x58>)
 800dba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800dba2:	4b12      	ldr	r3, [pc, #72]	; (800dbec <_ZL19MX_USART1_UART_Initv+0x54>)
 800dba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dbaa:	4b10      	ldr	r3, [pc, #64]	; (800dbec <_ZL19MX_USART1_UART_Initv+0x54>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800dbb0:	4b0e      	ldr	r3, [pc, #56]	; (800dbec <_ZL19MX_USART1_UART_Initv+0x54>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800dbb6:	4b0d      	ldr	r3, [pc, #52]	; (800dbec <_ZL19MX_USART1_UART_Initv+0x54>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dbbc:	4b0b      	ldr	r3, [pc, #44]	; (800dbec <_ZL19MX_USART1_UART_Initv+0x54>)
 800dbbe:	220c      	movs	r2, #12
 800dbc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbc2:	4b0a      	ldr	r3, [pc, #40]	; (800dbec <_ZL19MX_USART1_UART_Initv+0x54>)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbc8:	4b08      	ldr	r3, [pc, #32]	; (800dbec <_ZL19MX_USART1_UART_Initv+0x54>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800dbce:	4807      	ldr	r0, [pc, #28]	; (800dbec <_ZL19MX_USART1_UART_Initv+0x54>)
 800dbd0:	f7fc f998 	bl	8009f04 <HAL_UART_Init>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	bf14      	ite	ne
 800dbda:	2301      	movne	r3, #1
 800dbdc:	2300      	moveq	r3, #0
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800dbe4:	f000 f8d2 	bl	800dd8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  
  /* USER CODE END USART1_Init 2 */

}
 800dbe8:	bf00      	nop
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	20000ef0 	.word	0x20000ef0
 800dbf0:	40011000 	.word	0x40011000

0800dbf4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800dbf8:	4b13      	ldr	r3, [pc, #76]	; (800dc48 <_ZL19MX_USART2_UART_Initv+0x54>)
 800dbfa:	4a14      	ldr	r2, [pc, #80]	; (800dc4c <_ZL19MX_USART2_UART_Initv+0x58>)
 800dbfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800dbfe:	4b12      	ldr	r3, [pc, #72]	; (800dc48 <_ZL19MX_USART2_UART_Initv+0x54>)
 800dc00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dc04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800dc06:	4b10      	ldr	r3, [pc, #64]	; (800dc48 <_ZL19MX_USART2_UART_Initv+0x54>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dc0c:	4b0e      	ldr	r3, [pc, #56]	; (800dc48 <_ZL19MX_USART2_UART_Initv+0x54>)
 800dc0e:	2200      	movs	r2, #0
 800dc10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dc12:	4b0d      	ldr	r3, [pc, #52]	; (800dc48 <_ZL19MX_USART2_UART_Initv+0x54>)
 800dc14:	2200      	movs	r2, #0
 800dc16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dc18:	4b0b      	ldr	r3, [pc, #44]	; (800dc48 <_ZL19MX_USART2_UART_Initv+0x54>)
 800dc1a:	220c      	movs	r2, #12
 800dc1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc1e:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <_ZL19MX_USART2_UART_Initv+0x54>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc24:	4b08      	ldr	r3, [pc, #32]	; (800dc48 <_ZL19MX_USART2_UART_Initv+0x54>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800dc2a:	4807      	ldr	r0, [pc, #28]	; (800dc48 <_ZL19MX_USART2_UART_Initv+0x54>)
 800dc2c:	f7fc f96a 	bl	8009f04 <HAL_UART_Init>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	bf14      	ite	ne
 800dc36:	2301      	movne	r3, #1
 800dc38:	2300      	moveq	r3, #0
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d001      	beq.n	800dc44 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800dc40:	f000 f8a4 	bl	800dd8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  
  /* USER CODE END USART2_Init 2 */

}
 800dc44:	bf00      	nop
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	20000f30 	.word	0x20000f30
 800dc4c:	40004400 	.word	0x40004400

0800dc50 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
  
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800dc54:	4b13      	ldr	r3, [pc, #76]	; (800dca4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800dc56:	4a14      	ldr	r2, [pc, #80]	; (800dca8 <_ZL19MX_USART6_UART_Initv+0x58>)
 800dc58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800dc5a:	4b12      	ldr	r3, [pc, #72]	; (800dca4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800dc5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dc60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800dc62:	4b10      	ldr	r3, [pc, #64]	; (800dca4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800dc68:	4b0e      	ldr	r3, [pc, #56]	; (800dca4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800dc6e:	4b0d      	ldr	r3, [pc, #52]	; (800dca4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800dc70:	2200      	movs	r2, #0
 800dc72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800dc74:	4b0b      	ldr	r3, [pc, #44]	; (800dca4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800dc76:	220c      	movs	r2, #12
 800dc78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc7a:	4b0a      	ldr	r3, [pc, #40]	; (800dca4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc80:	4b08      	ldr	r3, [pc, #32]	; (800dca4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800dc86:	4807      	ldr	r0, [pc, #28]	; (800dca4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800dc88:	f7fc f93c 	bl	8009f04 <HAL_UART_Init>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	bf14      	ite	ne
 800dc92:	2301      	movne	r3, #1
 800dc94:	2300      	moveq	r3, #0
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d001      	beq.n	800dca0 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 800dc9c:	f000 f876 	bl	800dd8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  
  /* USER CODE END USART6_Init 2 */

}
 800dca0:	bf00      	nop
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	20000f70 	.word	0x20000f70
 800dca8:	40011400 	.word	0x40011400

0800dcac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b08a      	sub	sp, #40	; 0x28
 800dcb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcb2:	f107 0314 	add.w	r3, r7, #20
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	605a      	str	r2, [r3, #4]
 800dcbc:	609a      	str	r2, [r3, #8]
 800dcbe:	60da      	str	r2, [r3, #12]
 800dcc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	613b      	str	r3, [r7, #16]
 800dcc6:	4b2d      	ldr	r3, [pc, #180]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcca:	4a2c      	ldr	r2, [pc, #176]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dccc:	f043 0304 	orr.w	r3, r3, #4
 800dcd0:	6313      	str	r3, [r2, #48]	; 0x30
 800dcd2:	4b2a      	ldr	r3, [pc, #168]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dcd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd6:	f003 0304 	and.w	r3, r3, #4
 800dcda:	613b      	str	r3, [r7, #16]
 800dcdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800dcde:	2300      	movs	r3, #0
 800dce0:	60fb      	str	r3, [r7, #12]
 800dce2:	4b26      	ldr	r3, [pc, #152]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce6:	4a25      	ldr	r2, [pc, #148]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcec:	6313      	str	r3, [r2, #48]	; 0x30
 800dcee:	4b23      	ldr	r3, [pc, #140]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dcf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcf6:	60fb      	str	r3, [r7, #12]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	60bb      	str	r3, [r7, #8]
 800dcfe:	4b1f      	ldr	r3, [pc, #124]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd02:	4a1e      	ldr	r2, [pc, #120]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dd04:	f043 0301 	orr.w	r3, r3, #1
 800dd08:	6313      	str	r3, [r2, #48]	; 0x30
 800dd0a:	4b1c      	ldr	r3, [pc, #112]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	60bb      	str	r3, [r7, #8]
 800dd14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800dd16:	2300      	movs	r3, #0
 800dd18:	607b      	str	r3, [r7, #4]
 800dd1a:	4b18      	ldr	r3, [pc, #96]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dd1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd1e:	4a17      	ldr	r2, [pc, #92]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dd20:	f043 0302 	orr.w	r3, r3, #2
 800dd24:	6313      	str	r3, [r2, #48]	; 0x30
 800dd26:	4b15      	ldr	r3, [pc, #84]	; (800dd7c <_ZL12MX_GPIO_Initv+0xd0>)
 800dd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd2a:	f003 0302 	and.w	r3, r3, #2
 800dd2e:	607b      	str	r3, [r7, #4]
 800dd30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800dd32:	2200      	movs	r2, #0
 800dd34:	2120      	movs	r1, #32
 800dd36:	4812      	ldr	r0, [pc, #72]	; (800dd80 <_ZL12MX_GPIO_Initv+0xd4>)
 800dd38:	f7fb fc4e 	bl	80095d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800dd3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800dd42:	4b10      	ldr	r3, [pc, #64]	; (800dd84 <_ZL12MX_GPIO_Initv+0xd8>)
 800dd44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd46:	2300      	movs	r3, #0
 800dd48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dd4a:	f107 0314 	add.w	r3, r7, #20
 800dd4e:	4619      	mov	r1, r3
 800dd50:	480d      	ldr	r0, [pc, #52]	; (800dd88 <_ZL12MX_GPIO_Initv+0xdc>)
 800dd52:	f7fb fabf 	bl	80092d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800dd56:	2320      	movs	r3, #32
 800dd58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd62:	2300      	movs	r3, #0
 800dd64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd66:	f107 0314 	add.w	r3, r7, #20
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4804      	ldr	r0, [pc, #16]	; (800dd80 <_ZL12MX_GPIO_Initv+0xd4>)
 800dd6e:	f7fb fab1 	bl	80092d4 <HAL_GPIO_Init>

}
 800dd72:	bf00      	nop
 800dd74:	3728      	adds	r7, #40	; 0x28
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	40023800 	.word	0x40023800
 800dd80:	40020000 	.word	0x40020000
 800dd84:	10110000 	.word	0x10110000
 800dd88:	40020800 	.word	0x40020800

0800dd8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  
  /* USER CODE END Error_Handler_Debug */
}
 800dd90:	bf00      	nop
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr
	...

0800dd9c <_Z41__static_initialization_and_destruction_0ii>:
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d10a      	bne.n	800ddc2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d105      	bne.n	800ddc2 <_Z41__static_initialization_and_destruction_0ii+0x26>
UartPacket uartPacketReceived;
 800ddb6:	480a      	ldr	r0, [pc, #40]	; (800dde0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800ddb8:	f000 fcca 	bl	800e750 <_ZN10UartPacketC1Ev>
string fullCommandBuffer;
 800ddbc:	4809      	ldr	r0, [pc, #36]	; (800dde4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800ddbe:	f003 f869 	bl	8010e94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d107      	bne.n	800ddd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d102      	bne.n	800ddd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800ddd2:	4804      	ldr	r0, [pc, #16]	; (800dde4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800ddd4:	f003 f884 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800ddd8:	bf00      	nop
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	20000fb0 	.word	0x20000fb0
 800dde4:	20001064 	.word	0x20001064

0800dde8 <_GLOBAL__sub_I_huart1>:
 800dde8:	b580      	push	{r7, lr}
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ddf0:	2001      	movs	r0, #1
 800ddf2:	f7ff ffd3 	bl	800dd9c <_Z41__static_initialization_and_destruction_0ii>
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <_GLOBAL__sub_D_huart1>:
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800de00:	2000      	movs	r0, #0
 800de02:	f7ff ffcb 	bl	800dd9c <_Z41__static_initialization_and_destruction_0ii>
 800de06:	bd80      	pop	{r7, pc}

0800de08 <_ZN6Module22EnableParameterByIndexEi>:
  
private:
  bool m_ParameterStates[PARAMETERS_COUNT] {false};
  double m_ParameterValues[PARAMETERS_COUNT] {0.0};
  
  void EnableParameterByIndex(int index) {m_ParameterStates[index] = true;}
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	4413      	add	r3, r2
 800de18:	2201      	movs	r2, #1
 800de1a:	701a      	strb	r2, [r3, #0]
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <_ZN6Module23DisableParameterByIndexEi>:
  void DisableParameterByIndex(int index) {m_ParameterStates[index] = false;}
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	4413      	add	r3, r2
 800de38:	2200      	movs	r2, #0
 800de3a:	701a      	strb	r2, [r3, #0]
 800de3c:	bf00      	nop
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <_ZN6Module19SetParameterByIndexEid>:
  void SetParameterByIndex(int index, double value) {m_ParameterValues[index] = value;}
 800de48:	b490      	push	{r4, r7}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	ed87 0b00 	vstr	d0, [r7]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	3302      	adds	r3, #2
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	441a      	add	r2, r3
 800de60:	e9d7 3400 	ldrd	r3, r4, [r7]
 800de64:	e9c2 3400 	strd	r3, r4, [r2]
 800de68:	bf00      	nop
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bc90      	pop	{r4, r7}
 800de70:	4770      	bx	lr
	...

0800de74 <_ZN6Module15EnableParameterE9Parameter>:
#include "module.h"
#include <cstdio>

void Module::EnableParameter(Parameter parameter)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  switch(parameter)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	3b31      	subs	r3, #49	; 0x31
 800de82:	2b30      	cmp	r3, #48	; 0x30
 800de84:	f200 8098 	bhi.w	800dfb8 <_ZN6Module15EnableParameterE9Parameter+0x144>
 800de88:	a201      	add	r2, pc, #4	; (adr r2, 800de90 <_ZN6Module15EnableParameterE9Parameter+0x1c>)
 800de8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de8e:	bf00      	nop
 800de90:	0800df55 	.word	0x0800df55
 800de94:	0800df5f 	.word	0x0800df5f
 800de98:	0800df69 	.word	0x0800df69
 800de9c:	0800df73 	.word	0x0800df73
 800dea0:	0800df7d 	.word	0x0800df7d
 800dea4:	0800df87 	.word	0x0800df87
 800dea8:	0800df91 	.word	0x0800df91
 800deac:	0800df9b 	.word	0x0800df9b
 800deb0:	0800dfa5 	.word	0x0800dfa5
 800deb4:	0800dfb9 	.word	0x0800dfb9
 800deb8:	0800dfb9 	.word	0x0800dfb9
 800debc:	0800dfb9 	.word	0x0800dfb9
 800dec0:	0800dfb9 	.word	0x0800dfb9
 800dec4:	0800dfb9 	.word	0x0800dfb9
 800dec8:	0800dfb9 	.word	0x0800dfb9
 800decc:	0800dfb9 	.word	0x0800dfb9
 800ded0:	0800dfb9 	.word	0x0800dfb9
 800ded4:	0800dfb9 	.word	0x0800dfb9
 800ded8:	0800dfb9 	.word	0x0800dfb9
 800dedc:	0800dfb9 	.word	0x0800dfb9
 800dee0:	0800dfb9 	.word	0x0800dfb9
 800dee4:	0800dfb9 	.word	0x0800dfb9
 800dee8:	0800dfb9 	.word	0x0800dfb9
 800deec:	0800dfb9 	.word	0x0800dfb9
 800def0:	0800dfb9 	.word	0x0800dfb9
 800def4:	0800dfb9 	.word	0x0800dfb9
 800def8:	0800dfb9 	.word	0x0800dfb9
 800defc:	0800dfb9 	.word	0x0800dfb9
 800df00:	0800dfb9 	.word	0x0800dfb9
 800df04:	0800dfb9 	.word	0x0800dfb9
 800df08:	0800dfb9 	.word	0x0800dfb9
 800df0c:	0800dfb9 	.word	0x0800dfb9
 800df10:	0800dfb9 	.word	0x0800dfb9
 800df14:	0800dfb9 	.word	0x0800dfb9
 800df18:	0800dfb9 	.word	0x0800dfb9
 800df1c:	0800dfb9 	.word	0x0800dfb9
 800df20:	0800dfb9 	.word	0x0800dfb9
 800df24:	0800dfb9 	.word	0x0800dfb9
 800df28:	0800dfb9 	.word	0x0800dfb9
 800df2c:	0800dfb9 	.word	0x0800dfb9
 800df30:	0800dfb9 	.word	0x0800dfb9
 800df34:	0800dfb9 	.word	0x0800dfb9
 800df38:	0800dfb9 	.word	0x0800dfb9
 800df3c:	0800dfb9 	.word	0x0800dfb9
 800df40:	0800dfb9 	.word	0x0800dfb9
 800df44:	0800dfb9 	.word	0x0800dfb9
 800df48:	0800dfb9 	.word	0x0800dfb9
 800df4c:	0800dfb9 	.word	0x0800dfb9
 800df50:	0800dfaf 	.word	0x0800dfaf
  {
  case Parameter::PARAMETER1:
    EnableParameterByIndex(0);
 800df54:	2100      	movs	r1, #0
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f7ff ff56 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800df5c:	e02f      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER2:
    EnableParameterByIndex(1);
 800df5e:	2101      	movs	r1, #1
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff ff51 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800df66:	e02a      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER3:
    EnableParameterByIndex(2);
 800df68:	2102      	movs	r1, #2
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7ff ff4c 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800df70:	e025      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER4:
    EnableParameterByIndex(3);
 800df72:	2103      	movs	r1, #3
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7ff ff47 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800df7a:	e020      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER5:
    EnableParameterByIndex(4);
 800df7c:	2104      	movs	r1, #4
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7ff ff42 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800df84:	e01b      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER6:
    EnableParameterByIndex(5);
 800df86:	2105      	movs	r1, #5
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7ff ff3d 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800df8e:	e016      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER7:
    EnableParameterByIndex(6);
 800df90:	2106      	movs	r1, #6
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7ff ff38 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800df98:	e011      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER8:
    EnableParameterByIndex(7);
 800df9a:	2107      	movs	r1, #7
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ff33 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800dfa2:	e00c      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER9:
    EnableParameterByIndex(8);
 800dfa4:	2108      	movs	r1, #8
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7ff ff2e 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800dfac:	e007      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER10:
    EnableParameterByIndex(9);
 800dfae:	2109      	movs	r1, #9
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7ff ff29 	bl	800de08 <_ZN6Module22EnableParameterByIndexEi>
    break;
 800dfb6:	e002      	b.n	800dfbe <_ZN6Module15EnableParameterE9Parameter+0x14a>
  default:
    printf("Wrong parameter number\n");
 800dfb8:	4803      	ldr	r0, [pc, #12]	; (800dfc8 <_ZN6Module15EnableParameterE9Parameter+0x154>)
 800dfba:	f005 f961 	bl	8013280 <puts>
  }
}
 800dfbe:	bf00      	nop
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	0801a19c 	.word	0x0801a19c

0800dfcc <_ZN6Module16DisableParameterE9Parameter>:

void Module::DisableParameter(Parameter parameter)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  switch(parameter)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	3b31      	subs	r3, #49	; 0x31
 800dfda:	2b30      	cmp	r3, #48	; 0x30
 800dfdc:	f200 8098 	bhi.w	800e110 <_ZN6Module16DisableParameterE9Parameter+0x144>
 800dfe0:	a201      	add	r2, pc, #4	; (adr r2, 800dfe8 <_ZN6Module16DisableParameterE9Parameter+0x1c>)
 800dfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe6:	bf00      	nop
 800dfe8:	0800e0ad 	.word	0x0800e0ad
 800dfec:	0800e0b7 	.word	0x0800e0b7
 800dff0:	0800e0c1 	.word	0x0800e0c1
 800dff4:	0800e0cb 	.word	0x0800e0cb
 800dff8:	0800e0d5 	.word	0x0800e0d5
 800dffc:	0800e0df 	.word	0x0800e0df
 800e000:	0800e0e9 	.word	0x0800e0e9
 800e004:	0800e0f3 	.word	0x0800e0f3
 800e008:	0800e0fd 	.word	0x0800e0fd
 800e00c:	0800e111 	.word	0x0800e111
 800e010:	0800e111 	.word	0x0800e111
 800e014:	0800e111 	.word	0x0800e111
 800e018:	0800e111 	.word	0x0800e111
 800e01c:	0800e111 	.word	0x0800e111
 800e020:	0800e111 	.word	0x0800e111
 800e024:	0800e111 	.word	0x0800e111
 800e028:	0800e111 	.word	0x0800e111
 800e02c:	0800e111 	.word	0x0800e111
 800e030:	0800e111 	.word	0x0800e111
 800e034:	0800e111 	.word	0x0800e111
 800e038:	0800e111 	.word	0x0800e111
 800e03c:	0800e111 	.word	0x0800e111
 800e040:	0800e111 	.word	0x0800e111
 800e044:	0800e111 	.word	0x0800e111
 800e048:	0800e111 	.word	0x0800e111
 800e04c:	0800e111 	.word	0x0800e111
 800e050:	0800e111 	.word	0x0800e111
 800e054:	0800e111 	.word	0x0800e111
 800e058:	0800e111 	.word	0x0800e111
 800e05c:	0800e111 	.word	0x0800e111
 800e060:	0800e111 	.word	0x0800e111
 800e064:	0800e111 	.word	0x0800e111
 800e068:	0800e111 	.word	0x0800e111
 800e06c:	0800e111 	.word	0x0800e111
 800e070:	0800e111 	.word	0x0800e111
 800e074:	0800e111 	.word	0x0800e111
 800e078:	0800e111 	.word	0x0800e111
 800e07c:	0800e111 	.word	0x0800e111
 800e080:	0800e111 	.word	0x0800e111
 800e084:	0800e111 	.word	0x0800e111
 800e088:	0800e111 	.word	0x0800e111
 800e08c:	0800e111 	.word	0x0800e111
 800e090:	0800e111 	.word	0x0800e111
 800e094:	0800e111 	.word	0x0800e111
 800e098:	0800e111 	.word	0x0800e111
 800e09c:	0800e111 	.word	0x0800e111
 800e0a0:	0800e111 	.word	0x0800e111
 800e0a4:	0800e111 	.word	0x0800e111
 800e0a8:	0800e107 	.word	0x0800e107
  {
  case Parameter::PARAMETER1:
    DisableParameterByIndex(0);
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7ff feba 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e0b4:	e02f      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER2:
    DisableParameterByIndex(1);
 800e0b6:	2101      	movs	r1, #1
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7ff feb5 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e0be:	e02a      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER3:
    DisableParameterByIndex(2);
 800e0c0:	2102      	movs	r1, #2
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f7ff feb0 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e0c8:	e025      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER4:
    DisableParameterByIndex(3);
 800e0ca:	2103      	movs	r1, #3
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7ff feab 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e0d2:	e020      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER5:
    DisableParameterByIndex(4);
 800e0d4:	2104      	movs	r1, #4
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff fea6 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e0dc:	e01b      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER6:
    DisableParameterByIndex(5);
 800e0de:	2105      	movs	r1, #5
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7ff fea1 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e0e6:	e016      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER7:
    DisableParameterByIndex(6);
 800e0e8:	2106      	movs	r1, #6
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7ff fe9c 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e0f0:	e011      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER8:
    DisableParameterByIndex(7);
 800e0f2:	2107      	movs	r1, #7
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7ff fe97 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e0fa:	e00c      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER9:
    DisableParameterByIndex(8);
 800e0fc:	2108      	movs	r1, #8
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f7ff fe92 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e104:	e007      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  case Parameter::PARAMETER10:
    DisableParameterByIndex(9);
 800e106:	2109      	movs	r1, #9
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff fe8d 	bl	800de28 <_ZN6Module23DisableParameterByIndexEi>
    break;
 800e10e:	e002      	b.n	800e116 <_ZN6Module16DisableParameterE9Parameter+0x14a>
  default:
    printf("Wrong parameter number\n");
 800e110:	4803      	ldr	r0, [pc, #12]	; (800e120 <_ZN6Module16DisableParameterE9Parameter+0x154>)
 800e112:	f005 f8b5 	bl	8013280 <puts>
  }
}
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	0801a19c 	.word	0x0801a19c

0800e124 <_ZN6Module12SetParameterE9Parameterd>:

void Module::SetParameter(Parameter parameter, double value)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	ed87 0b00 	vstr	d0, [r7]
  switch(parameter)
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	3b31      	subs	r3, #49	; 0x31
 800e136:	2b30      	cmp	r3, #48	; 0x30
 800e138:	f200 80ac 	bhi.w	800e294 <_ZN6Module12SetParameterE9Parameterd+0x170>
 800e13c:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <_ZN6Module12SetParameterE9Parameterd+0x20>)
 800e13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e142:	bf00      	nop
 800e144:	0800e209 	.word	0x0800e209
 800e148:	0800e217 	.word	0x0800e217
 800e14c:	0800e225 	.word	0x0800e225
 800e150:	0800e233 	.word	0x0800e233
 800e154:	0800e241 	.word	0x0800e241
 800e158:	0800e24f 	.word	0x0800e24f
 800e15c:	0800e25d 	.word	0x0800e25d
 800e160:	0800e26b 	.word	0x0800e26b
 800e164:	0800e279 	.word	0x0800e279
 800e168:	0800e295 	.word	0x0800e295
 800e16c:	0800e295 	.word	0x0800e295
 800e170:	0800e295 	.word	0x0800e295
 800e174:	0800e295 	.word	0x0800e295
 800e178:	0800e295 	.word	0x0800e295
 800e17c:	0800e295 	.word	0x0800e295
 800e180:	0800e295 	.word	0x0800e295
 800e184:	0800e295 	.word	0x0800e295
 800e188:	0800e295 	.word	0x0800e295
 800e18c:	0800e295 	.word	0x0800e295
 800e190:	0800e295 	.word	0x0800e295
 800e194:	0800e295 	.word	0x0800e295
 800e198:	0800e295 	.word	0x0800e295
 800e19c:	0800e295 	.word	0x0800e295
 800e1a0:	0800e295 	.word	0x0800e295
 800e1a4:	0800e295 	.word	0x0800e295
 800e1a8:	0800e295 	.word	0x0800e295
 800e1ac:	0800e295 	.word	0x0800e295
 800e1b0:	0800e295 	.word	0x0800e295
 800e1b4:	0800e295 	.word	0x0800e295
 800e1b8:	0800e295 	.word	0x0800e295
 800e1bc:	0800e295 	.word	0x0800e295
 800e1c0:	0800e295 	.word	0x0800e295
 800e1c4:	0800e295 	.word	0x0800e295
 800e1c8:	0800e295 	.word	0x0800e295
 800e1cc:	0800e295 	.word	0x0800e295
 800e1d0:	0800e295 	.word	0x0800e295
 800e1d4:	0800e295 	.word	0x0800e295
 800e1d8:	0800e295 	.word	0x0800e295
 800e1dc:	0800e295 	.word	0x0800e295
 800e1e0:	0800e295 	.word	0x0800e295
 800e1e4:	0800e295 	.word	0x0800e295
 800e1e8:	0800e295 	.word	0x0800e295
 800e1ec:	0800e295 	.word	0x0800e295
 800e1f0:	0800e295 	.word	0x0800e295
 800e1f4:	0800e295 	.word	0x0800e295
 800e1f8:	0800e295 	.word	0x0800e295
 800e1fc:	0800e295 	.word	0x0800e295
 800e200:	0800e295 	.word	0x0800e295
 800e204:	0800e287 	.word	0x0800e287
  {
  case Parameter::PARAMETER1:
    SetParameterByIndex(0, value);
 800e208:	ed97 0b00 	vldr	d0, [r7]
 800e20c:	2100      	movs	r1, #0
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f7ff fe1a 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e214:	e041      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER2:
    SetParameterByIndex(1, value);
 800e216:	ed97 0b00 	vldr	d0, [r7]
 800e21a:	2101      	movs	r1, #1
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f7ff fe13 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e222:	e03a      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER3:
    SetParameterByIndex(2, value);
 800e224:	ed97 0b00 	vldr	d0, [r7]
 800e228:	2102      	movs	r1, #2
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f7ff fe0c 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e230:	e033      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER4:
    SetParameterByIndex(3, value);
 800e232:	ed97 0b00 	vldr	d0, [r7]
 800e236:	2103      	movs	r1, #3
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f7ff fe05 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e23e:	e02c      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER5:
    SetParameterByIndex(4, value);
 800e240:	ed97 0b00 	vldr	d0, [r7]
 800e244:	2104      	movs	r1, #4
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	f7ff fdfe 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e24c:	e025      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER6:
    SetParameterByIndex(5, value);
 800e24e:	ed97 0b00 	vldr	d0, [r7]
 800e252:	2105      	movs	r1, #5
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f7ff fdf7 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e25a:	e01e      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER7:
    SetParameterByIndex(6, value);
 800e25c:	ed97 0b00 	vldr	d0, [r7]
 800e260:	2106      	movs	r1, #6
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f7ff fdf0 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e268:	e017      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER8:
    SetParameterByIndex(7, value);
 800e26a:	ed97 0b00 	vldr	d0, [r7]
 800e26e:	2107      	movs	r1, #7
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f7ff fde9 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e276:	e010      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER9:
    SetParameterByIndex(8, value);
 800e278:	ed97 0b00 	vldr	d0, [r7]
 800e27c:	2108      	movs	r1, #8
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f7ff fde2 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e284:	e009      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  case Parameter::PARAMETER10:
    SetParameterByIndex(9, value);
 800e286:	ed97 0b00 	vldr	d0, [r7]
 800e28a:	2109      	movs	r1, #9
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	f7ff fddb 	bl	800de48 <_ZN6Module19SetParameterByIndexEid>
    break;
 800e292:	e002      	b.n	800e29a <_ZN6Module12SetParameterE9Parameterd+0x176>
  default:
    printf("Wrong parameter number\n");
 800e294:	4803      	ldr	r0, [pc, #12]	; (800e2a4 <_ZN6Module12SetParameterE9Parameterd+0x180>)
 800e296:	f004 fff3 	bl	8013280 <puts>
  }
 800e29a:	bf00      	nop
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	0801a19c 	.word	0x0801a19c

0800e2a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	607b      	str	r3, [r7, #4]
 800e2b2:	4b10      	ldr	r3, [pc, #64]	; (800e2f4 <HAL_MspInit+0x4c>)
 800e2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2b6:	4a0f      	ldr	r2, [pc, #60]	; (800e2f4 <HAL_MspInit+0x4c>)
 800e2b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2bc:	6453      	str	r3, [r2, #68]	; 0x44
 800e2be:	4b0d      	ldr	r3, [pc, #52]	; (800e2f4 <HAL_MspInit+0x4c>)
 800e2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2c6:	607b      	str	r3, [r7, #4]
 800e2c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	603b      	str	r3, [r7, #0]
 800e2ce:	4b09      	ldr	r3, [pc, #36]	; (800e2f4 <HAL_MspInit+0x4c>)
 800e2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d2:	4a08      	ldr	r2, [pc, #32]	; (800e2f4 <HAL_MspInit+0x4c>)
 800e2d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2d8:	6413      	str	r3, [r2, #64]	; 0x40
 800e2da:	4b06      	ldr	r3, [pc, #24]	; (800e2f4 <HAL_MspInit+0x4c>)
 800e2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2e2:	603b      	str	r3, [r7, #0]
 800e2e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800e2e6:	2006      	movs	r0, #6
 800e2e8:	f7fa ff90 	bl	800920c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e2ec:	bf00      	nop
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	40023800 	.word	0x40023800

0800e2f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08a      	sub	sp, #40	; 0x28
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e300:	f107 0314 	add.w	r3, r7, #20
 800e304:	2200      	movs	r2, #0
 800e306:	601a      	str	r2, [r3, #0]
 800e308:	605a      	str	r2, [r3, #4]
 800e30a:	609a      	str	r2, [r3, #8]
 800e30c:	60da      	str	r2, [r3, #12]
 800e30e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a17      	ldr	r2, [pc, #92]	; (800e374 <HAL_ADC_MspInit+0x7c>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d127      	bne.n	800e36a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e31a:	2300      	movs	r3, #0
 800e31c:	613b      	str	r3, [r7, #16]
 800e31e:	4b16      	ldr	r3, [pc, #88]	; (800e378 <HAL_ADC_MspInit+0x80>)
 800e320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e322:	4a15      	ldr	r2, [pc, #84]	; (800e378 <HAL_ADC_MspInit+0x80>)
 800e324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e328:	6453      	str	r3, [r2, #68]	; 0x44
 800e32a:	4b13      	ldr	r3, [pc, #76]	; (800e378 <HAL_ADC_MspInit+0x80>)
 800e32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e32e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e332:	613b      	str	r3, [r7, #16]
 800e334:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e336:	2300      	movs	r3, #0
 800e338:	60fb      	str	r3, [r7, #12]
 800e33a:	4b0f      	ldr	r3, [pc, #60]	; (800e378 <HAL_ADC_MspInit+0x80>)
 800e33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e33e:	4a0e      	ldr	r2, [pc, #56]	; (800e378 <HAL_ADC_MspInit+0x80>)
 800e340:	f043 0301 	orr.w	r3, r3, #1
 800e344:	6313      	str	r3, [r2, #48]	; 0x30
 800e346:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <HAL_ADC_MspInit+0x80>)
 800e348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e34a:	f003 0301 	and.w	r3, r3, #1
 800e34e:	60fb      	str	r3, [r7, #12]
 800e350:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 800e352:	2353      	movs	r3, #83	; 0x53
 800e354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e356:	2303      	movs	r3, #3
 800e358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e35a:	2300      	movs	r3, #0
 800e35c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e35e:	f107 0314 	add.w	r3, r7, #20
 800e362:	4619      	mov	r1, r3
 800e364:	4805      	ldr	r0, [pc, #20]	; (800e37c <HAL_ADC_MspInit+0x84>)
 800e366:	f7fa ffb5 	bl	80092d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e36a:	bf00      	nop
 800e36c:	3728      	adds	r7, #40	; 0x28
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	40012000 	.word	0x40012000
 800e378:	40023800 	.word	0x40023800
 800e37c:	40020000 	.word	0x40020000

0800e380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b08e      	sub	sp, #56	; 0x38
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e38c:	2200      	movs	r2, #0
 800e38e:	601a      	str	r2, [r3, #0]
 800e390:	605a      	str	r2, [r3, #4]
 800e392:	609a      	str	r2, [r3, #8]
 800e394:	60da      	str	r2, [r3, #12]
 800e396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a53      	ldr	r2, [pc, #332]	; (800e4ec <HAL_UART_MspInit+0x16c>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d135      	bne.n	800e40e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	623b      	str	r3, [r7, #32]
 800e3a6:	4b52      	ldr	r3, [pc, #328]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3aa:	4a51      	ldr	r2, [pc, #324]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e3ac:	f043 0310 	orr.w	r3, r3, #16
 800e3b0:	6453      	str	r3, [r2, #68]	; 0x44
 800e3b2:	4b4f      	ldr	r3, [pc, #316]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3b6:	f003 0310 	and.w	r3, r3, #16
 800e3ba:	623b      	str	r3, [r7, #32]
 800e3bc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3be:	2300      	movs	r3, #0
 800e3c0:	61fb      	str	r3, [r7, #28]
 800e3c2:	4b4b      	ldr	r3, [pc, #300]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3c6:	4a4a      	ldr	r2, [pc, #296]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e3c8:	f043 0301 	orr.w	r3, r3, #1
 800e3cc:	6313      	str	r3, [r2, #48]	; 0x30
 800e3ce:	4b48      	ldr	r3, [pc, #288]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3d2:	f003 0301 	and.w	r3, r3, #1
 800e3d6:	61fb      	str	r3, [r7, #28]
 800e3d8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e3da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e3de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3e0:	2302      	movs	r3, #2
 800e3e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3e8:	2303      	movs	r3, #3
 800e3ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e3ec:	2307      	movs	r3, #7
 800e3ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	483f      	ldr	r0, [pc, #252]	; (800e4f4 <HAL_UART_MspInit+0x174>)
 800e3f8:	f7fa ff6c 	bl	80092d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2101      	movs	r1, #1
 800e400:	2025      	movs	r0, #37	; 0x25
 800e402:	f7fa ff0e 	bl	8009222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e406:	2025      	movs	r0, #37	; 0x25
 800e408:	f7fa ff27 	bl	800925a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800e40c:	e06a      	b.n	800e4e4 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4a39      	ldr	r2, [pc, #228]	; (800e4f8 <HAL_UART_MspInit+0x178>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d12c      	bne.n	800e472 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e418:	2300      	movs	r3, #0
 800e41a:	61bb      	str	r3, [r7, #24]
 800e41c:	4b34      	ldr	r3, [pc, #208]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e420:	4a33      	ldr	r2, [pc, #204]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e426:	6413      	str	r3, [r2, #64]	; 0x40
 800e428:	4b31      	ldr	r3, [pc, #196]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e430:	61bb      	str	r3, [r7, #24]
 800e432:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e434:	2300      	movs	r3, #0
 800e436:	617b      	str	r3, [r7, #20]
 800e438:	4b2d      	ldr	r3, [pc, #180]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e43c:	4a2c      	ldr	r2, [pc, #176]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e43e:	f043 0301 	orr.w	r3, r3, #1
 800e442:	6313      	str	r3, [r2, #48]	; 0x30
 800e444:	4b2a      	ldr	r3, [pc, #168]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e448:	f003 0301 	and.w	r3, r3, #1
 800e44c:	617b      	str	r3, [r7, #20]
 800e44e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800e450:	230c      	movs	r3, #12
 800e452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e454:	2302      	movs	r3, #2
 800e456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e458:	2300      	movs	r3, #0
 800e45a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e45c:	2303      	movs	r3, #3
 800e45e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e460:	2307      	movs	r3, #7
 800e462:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e468:	4619      	mov	r1, r3
 800e46a:	4822      	ldr	r0, [pc, #136]	; (800e4f4 <HAL_UART_MspInit+0x174>)
 800e46c:	f7fa ff32 	bl	80092d4 <HAL_GPIO_Init>
}
 800e470:	e038      	b.n	800e4e4 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a21      	ldr	r2, [pc, #132]	; (800e4fc <HAL_UART_MspInit+0x17c>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d133      	bne.n	800e4e4 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 800e47c:	2300      	movs	r3, #0
 800e47e:	613b      	str	r3, [r7, #16]
 800e480:	4b1b      	ldr	r3, [pc, #108]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e484:	4a1a      	ldr	r2, [pc, #104]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e486:	f043 0320 	orr.w	r3, r3, #32
 800e48a:	6453      	str	r3, [r2, #68]	; 0x44
 800e48c:	4b18      	ldr	r3, [pc, #96]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e490:	f003 0320 	and.w	r3, r3, #32
 800e494:	613b      	str	r3, [r7, #16]
 800e496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e498:	2300      	movs	r3, #0
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	4b14      	ldr	r3, [pc, #80]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a0:	4a13      	ldr	r2, [pc, #76]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e4a2:	f043 0304 	orr.w	r3, r3, #4
 800e4a6:	6313      	str	r3, [r2, #48]	; 0x30
 800e4a8:	4b11      	ldr	r3, [pc, #68]	; (800e4f0 <HAL_UART_MspInit+0x170>)
 800e4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ac:	f003 0304 	and.w	r3, r3, #4
 800e4b0:	60fb      	str	r3, [r7, #12]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e4b4:	23c0      	movs	r3, #192	; 0xc0
 800e4b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4b8:	2302      	movs	r3, #2
 800e4ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e4c4:	2308      	movs	r3, #8
 800e4c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e4c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	480c      	ldr	r0, [pc, #48]	; (800e500 <HAL_UART_MspInit+0x180>)
 800e4d0:	f7fa ff00 	bl	80092d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	2101      	movs	r1, #1
 800e4d8:	2047      	movs	r0, #71	; 0x47
 800e4da:	f7fa fea2 	bl	8009222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800e4de:	2047      	movs	r0, #71	; 0x47
 800e4e0:	f7fa febb 	bl	800925a <HAL_NVIC_EnableIRQ>
}
 800e4e4:	bf00      	nop
 800e4e6:	3738      	adds	r7, #56	; 0x38
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	40011000 	.word	0x40011000
 800e4f0:	40023800 	.word	0x40023800
 800e4f4:	40020000 	.word	0x40020000
 800e4f8:	40004400 	.word	0x40004400
 800e4fc:	40011400 	.word	0x40011400
 800e500:	40020800 	.word	0x40020800

0800e504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e504:	b480      	push	{r7}
 800e506:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e508:	bf00      	nop
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr

0800e512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e512:	b480      	push	{r7}
 800e514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e516:	e7fe      	b.n	800e516 <HardFault_Handler+0x4>

0800e518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e518:	b480      	push	{r7}
 800e51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e51c:	e7fe      	b.n	800e51c <MemManage_Handler+0x4>

0800e51e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e51e:	b480      	push	{r7}
 800e520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e522:	e7fe      	b.n	800e522 <BusFault_Handler+0x4>

0800e524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e524:	b480      	push	{r7}
 800e526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e528:	e7fe      	b.n	800e528 <UsageFault_Handler+0x4>

0800e52a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e52a:	b480      	push	{r7}
 800e52c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e52e:	bf00      	nop
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e538:	b480      	push	{r7}
 800e53a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e53c:	bf00      	nop
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr

0800e546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e546:	b480      	push	{r7}
 800e548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e54a:	bf00      	nop
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e558:	f7fa fa20 	bl	800899c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e55c:	bf00      	nop
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e564:	4802      	ldr	r0, [pc, #8]	; (800e570 <USART1_IRQHandler+0x10>)
 800e566:	f7fb fe09 	bl	800a17c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e56a:	bf00      	nop
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	20000ef0 	.word	0x20000ef0

0800e574 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800e578:	4802      	ldr	r0, [pc, #8]	; (800e584 <USART6_IRQHandler+0x10>)
 800e57a:	f7fb fdff 	bl	800a17c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800e57e:	bf00      	nop
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	20000f70 	.word	0x20000f70

0800e588 <__io_putchar>:

char *__env[1] = { 0 };
char **environ = __env;

__attribute__((weak)) int __io_putchar(int ch)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800e590:	1d39      	adds	r1, r7, #4
 800e592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e596:	2201      	movs	r2, #1
 800e598:	4803      	ldr	r0, [pc, #12]	; (800e5a8 <__io_putchar+0x20>)
 800e59a:	f7fb fd00 	bl	8009f9e <HAL_UART_Transmit>
    return ch;
 800e59e:	687b      	ldr	r3, [r7, #4]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	20000f30 	.word	0x20000f30

0800e5ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	af00      	add	r7, sp, #0
	return 1;
 800e5b0:	2301      	movs	r3, #1
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <_kill>:

int _kill(int pid, int sig)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800e5c6:	f004 f8d7 	bl	8012778 <__errno>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	2316      	movs	r3, #22
 800e5ce:	6013      	str	r3, [r2, #0]
	return -1;
 800e5d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <_exit>:

void _exit (int status)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800e5e4:	f04f 31ff 	mov.w	r1, #4294967295
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff ffe7 	bl	800e5bc <_kill>
	while (1) {}		/* Make sure we hang here */
 800e5ee:	e7fe      	b.n	800e5ee <_exit+0x12>

0800e5f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	617b      	str	r3, [r7, #20]
 800e600:	e00a      	b.n	800e618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e602:	f3af 8000 	nop.w
 800e606:	4601      	mov	r1, r0
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	1c5a      	adds	r2, r3, #1
 800e60c:	60ba      	str	r2, [r7, #8]
 800e60e:	b2ca      	uxtb	r2, r1
 800e610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	3301      	adds	r3, #1
 800e616:	617b      	str	r3, [r7, #20]
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	dbf0      	blt.n	800e602 <_read+0x12>
	}

return len;
 800e620:	687b      	ldr	r3, [r7, #4]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3718      	adds	r7, #24
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b086      	sub	sp, #24
 800e62e:	af00      	add	r7, sp, #0
 800e630:	60f8      	str	r0, [r7, #12]
 800e632:	60b9      	str	r1, [r7, #8]
 800e634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e636:	2300      	movs	r3, #0
 800e638:	617b      	str	r3, [r7, #20]
 800e63a:	e009      	b.n	800e650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	1c5a      	adds	r2, r3, #1
 800e640:	60ba      	str	r2, [r7, #8]
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	4618      	mov	r0, r3
 800e646:	f7ff ff9f 	bl	800e588 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	3301      	adds	r3, #1
 800e64e:	617b      	str	r3, [r7, #20]
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	429a      	cmp	r2, r3
 800e656:	dbf1      	blt.n	800e63c <_write+0x12>
	}
	return len;
 800e658:	687b      	ldr	r3, [r7, #4]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3718      	adds	r7, #24
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <_close>:

int _close(int file)
{
 800e662:	b480      	push	{r7}
 800e664:	b083      	sub	sp, #12
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
	return -1;
 800e66a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e66e:	4618      	mov	r0, r3
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr

0800e67a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b083      	sub	sp, #12
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
 800e682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e68a:	605a      	str	r2, [r3, #4]
	return 0;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr

0800e69a <_isatty>:

int _isatty(int file)
{
 800e69a:	b480      	push	{r7}
 800e69c:	b083      	sub	sp, #12
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
	return 1;
 800e6a2:	2301      	movs	r3, #1
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]
	return 0;
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
	...

0800e6cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e6d4:	4b11      	ldr	r3, [pc, #68]	; (800e71c <_sbrk+0x50>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d102      	bne.n	800e6e2 <_sbrk+0x16>
		heap_end = &end;
 800e6dc:	4b0f      	ldr	r3, [pc, #60]	; (800e71c <_sbrk+0x50>)
 800e6de:	4a10      	ldr	r2, [pc, #64]	; (800e720 <_sbrk+0x54>)
 800e6e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e6e2:	4b0e      	ldr	r3, [pc, #56]	; (800e71c <_sbrk+0x50>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e6e8:	4b0c      	ldr	r3, [pc, #48]	; (800e71c <_sbrk+0x50>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	466a      	mov	r2, sp
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d907      	bls.n	800e706 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e6f6:	f004 f83f 	bl	8012778 <__errno>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	230c      	movs	r3, #12
 800e6fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e700:	f04f 33ff 	mov.w	r3, #4294967295
 800e704:	e006      	b.n	800e714 <_sbrk+0x48>
	}

	heap_end += incr;
 800e706:	4b05      	ldr	r3, [pc, #20]	; (800e71c <_sbrk+0x50>)
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4413      	add	r3, r2
 800e70e:	4a03      	ldr	r2, [pc, #12]	; (800e71c <_sbrk+0x50>)
 800e710:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e712:	68fb      	ldr	r3, [r7, #12]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	2000107c 	.word	0x2000107c
 800e720:	20001100 	.word	0x20001100

0800e724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e724:	b480      	push	{r7}
 800e726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e728:	4b08      	ldr	r3, [pc, #32]	; (800e74c <SystemInit+0x28>)
 800e72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e72e:	4a07      	ldr	r2, [pc, #28]	; (800e74c <SystemInit+0x28>)
 800e730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e738:	4b04      	ldr	r3, [pc, #16]	; (800e74c <SystemInit+0x28>)
 800e73a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e73e:	609a      	str	r2, [r3, #8]
#endif
}
 800e740:	bf00      	nop
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	e000ed00 	.word	0xe000ed00

0800e750 <_ZN10UartPacketC1Ev>:
int const CRC_BYTE1_POSITION = 19;
int const CRC_BYTE2_POSITION = 18;
int const CRC_BYTE3_POSITION = 17;
int const CRC_BYTE4_POSITION = 16;

UartPacket::UartPacket()
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	461a      	mov	r2, r3
 800e75c:	2300      	movs	r3, #0
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	6053      	str	r3, [r2, #4]
 800e762:	6093      	str	r3, [r2, #8]
 800e764:	60d3      	str	r3, [r2, #12]
 800e766:	6113      	str	r3, [r2, #16]
  void PrintPacket(bool withCrc = false) const;
  
private:
  std::array<uint8_t, PACKET_SIZE> m_PacketTable = {0};
  
  uint8_t& m_Source = m_PacketTable[0];
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2100      	movs	r1, #0
 800e76c:	4618      	mov	r0, r3
 800e76e:	f000 fbd5 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800e772:	4602      	mov	r2, r0
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	615a      	str	r2, [r3, #20]
  uint8_t& m_Module = m_PacketTable[1];
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2101      	movs	r1, #1
 800e77c:	4618      	mov	r0, r3
 800e77e:	f000 fbcd 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800e782:	4602      	mov	r2, r0
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	619a      	str	r2, [r3, #24]
  uint8_t& m_Function = m_PacketTable[2];
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2102      	movs	r1, #2
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 fbc5 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800e792:	4602      	mov	r2, r0
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	61da      	str	r2, [r3, #28]
  uint8_t& m_Parameter = m_PacketTable[3];
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2103      	movs	r1, #3
 800e79c:	4618      	mov	r0, r3
 800e79e:	f000 fbbd 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	621a      	str	r2, [r3, #32]
  uint8_t& m_Sign = m_PacketTable[4];
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2104      	movs	r1, #4
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f000 fbb5 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	625a      	str	r2, [r3, #36]	; 0x24
  uint8_t& m_Length = m_PacketTable[5];
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2105      	movs	r1, #5
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f000 fbad 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	629a      	str	r2, [r3, #40]	; 0x28
  uint8_t* m_Payload = &m_PacketTable[6];
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2106      	movs	r1, #6
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f000 fba5 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	62da      	str	r2, [r3, #44]	; 0x2c
{
  m_PacketTable.fill(0);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	73fa      	strb	r2, [r7, #15]
 800e7de:	f107 020f 	add.w	r2, r7, #15
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f000 fbb3 	bl	800ef50 <_ZNSt5arrayIhLj20EE4fillERKh>
}
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <_ZN10UartPacketcvPhEv>:
{  
  memcpy(m_PacketTable.data(), uartPacketTable, PACKET_SIZE);
}

UartPacket::operator uint8_t*()
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  return m_PacketTable.data();
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 fbbc 	bl	800ef7c <_ZNSt5arrayIhLj20EE4dataEv>
 800e804:	4603      	mov	r3, r0
}
 800e806:	4618      	mov	r0, r3
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <_ZN10UartPacket9SetSourceE6Source>:

void UartPacket::SetSource(Source source)
{
 800e80e:	b480      	push	{r7}
 800e810:	b083      	sub	sp, #12
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
 800e816:	6039      	str	r1, [r7, #0]
  if(source == Source::SOURCE_TARGET1)
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	2b31      	cmp	r3, #49	; 0x31
 800e81c:	d103      	bne.n	800e826 <_ZN10UartPacket9SetSourceE6Source+0x18>
  {
    m_Source = static_cast<uint8_t>(Source::SOURCE_TARGET1);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	695b      	ldr	r3, [r3, #20]
 800e822:	2231      	movs	r2, #49	; 0x31
 800e824:	701a      	strb	r2, [r3, #0]
  }
}
 800e826:	bf00      	nop
 800e828:	370c      	adds	r7, #12
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <_ZN10UartPacket9SetModuleEi>:
    m_Module = static_cast<uint8_t>(ModuleID::MODULE3);
  }
}

void UartPacket::SetModule(int module)
{
 800e832:	b480      	push	{r7}
 800e834:	b083      	sub	sp, #12
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
 800e83a:	6039      	str	r1, [r7, #0]
  m_Module = static_cast<uint8_t>(module) + '0';
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	3230      	adds	r2, #48	; 0x30
 800e846:	b2d2      	uxtb	r2, r2
 800e848:	701a      	strb	r2, [r3, #0]
}
 800e84a:	bf00      	nop
 800e84c:	370c      	adds	r7, #12
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr

0800e856 <_ZN10UartPacket11SetFunctionE8Function>:

void UartPacket::SetFunction(Function function)
{
 800e856:	b480      	push	{r7}
 800e858:	b083      	sub	sp, #12
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
  if(function == Function::DATA_PACKET)
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	2b31      	cmp	r3, #49	; 0x31
 800e864:	d104      	bne.n	800e870 <_ZN10UartPacket11SetFunctionE8Function+0x1a>
  {
    m_Function = static_cast<uint8_t>(Function::DATA_PACKET);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	69db      	ldr	r3, [r3, #28]
 800e86a:	2231      	movs	r2, #49	; 0x31
 800e86c:	701a      	strb	r2, [r3, #0]
  }
  else if(function == Function::SET_GRAPH_TIME_RANGE)
  {
    m_Function = static_cast<uint8_t>(Function::SET_GRAPH_TIME_RANGE);
  }
}
 800e86e:	e03e      	b.n	800e8ee <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::INIT_PACKET)
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	2b32      	cmp	r3, #50	; 0x32
 800e874:	d104      	bne.n	800e880 <_ZN10UartPacket11SetFunctionE8Function+0x2a>
    m_Function = static_cast<uint8_t>(Function::INIT_PACKET);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	69db      	ldr	r3, [r3, #28]
 800e87a:	2232      	movs	r2, #50	; 0x32
 800e87c:	701a      	strb	r2, [r3, #0]
}
 800e87e:	e036      	b.n	800e8ee <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::DEINIT_PACKET)
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b33      	cmp	r3, #51	; 0x33
 800e884:	d104      	bne.n	800e890 <_ZN10UartPacket11SetFunctionE8Function+0x3a>
    m_Function = static_cast<uint8_t>(Function::DEINIT_PACKET);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	69db      	ldr	r3, [r3, #28]
 800e88a:	2233      	movs	r2, #51	; 0x33
 800e88c:	701a      	strb	r2, [r3, #0]
}
 800e88e:	e02e      	b.n	800e8ee <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::ENABLE_PARAMETER_PACKET)
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2b34      	cmp	r3, #52	; 0x34
 800e894:	d104      	bne.n	800e8a0 <_ZN10UartPacket11SetFunctionE8Function+0x4a>
    m_Function = static_cast<uint8_t>(Function::ENABLE_PARAMETER_PACKET);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	69db      	ldr	r3, [r3, #28]
 800e89a:	2234      	movs	r2, #52	; 0x34
 800e89c:	701a      	strb	r2, [r3, #0]
}
 800e89e:	e026      	b.n	800e8ee <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::DISABLE_PARAMETER_PACKET)
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	2b35      	cmp	r3, #53	; 0x35
 800e8a4:	d104      	bne.n	800e8b0 <_ZN10UartPacket11SetFunctionE8Function+0x5a>
    m_Function = static_cast<uint8_t>(Function::DISABLE_PARAMETER_PACKET);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	69db      	ldr	r3, [r3, #28]
 800e8aa:	2235      	movs	r2, #53	; 0x35
 800e8ac:	701a      	strb	r2, [r3, #0]
}
 800e8ae:	e01e      	b.n	800e8ee <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::SET_PARAMETER_PACKET)
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b36      	cmp	r3, #54	; 0x36
 800e8b4:	d104      	bne.n	800e8c0 <_ZN10UartPacket11SetFunctionE8Function+0x6a>
    m_Function = static_cast<uint8_t>(Function::SET_PARAMETER_PACKET);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	69db      	ldr	r3, [r3, #28]
 800e8ba:	2236      	movs	r2, #54	; 0x36
 800e8bc:	701a      	strb	r2, [r3, #0]
}
 800e8be:	e016      	b.n	800e8ee <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::SET_GRAPH_RANGE_MIN)
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2b37      	cmp	r3, #55	; 0x37
 800e8c4:	d104      	bne.n	800e8d0 <_ZN10UartPacket11SetFunctionE8Function+0x7a>
    m_Function = static_cast<uint8_t>(Function::SET_GRAPH_RANGE_MIN);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	69db      	ldr	r3, [r3, #28]
 800e8ca:	2237      	movs	r2, #55	; 0x37
 800e8cc:	701a      	strb	r2, [r3, #0]
}
 800e8ce:	e00e      	b.n	800e8ee <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::SET_GRAPH_RANGE_MAX)
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	2b38      	cmp	r3, #56	; 0x38
 800e8d4:	d104      	bne.n	800e8e0 <_ZN10UartPacket11SetFunctionE8Function+0x8a>
    m_Function = static_cast<uint8_t>(Function::SET_GRAPH_RANGE_MAX);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	69db      	ldr	r3, [r3, #28]
 800e8da:	2238      	movs	r2, #56	; 0x38
 800e8dc:	701a      	strb	r2, [r3, #0]
}
 800e8de:	e006      	b.n	800e8ee <_ZN10UartPacket11SetFunctionE8Function+0x98>
  else if(function == Function::SET_GRAPH_TIME_RANGE)
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	2b39      	cmp	r3, #57	; 0x39
 800e8e4:	d103      	bne.n	800e8ee <_ZN10UartPacket11SetFunctionE8Function+0x98>
    m_Function = static_cast<uint8_t>(Function::SET_GRAPH_TIME_RANGE);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	69db      	ldr	r3, [r3, #28]
 800e8ea:	2239      	movs	r2, #57	; 0x39
 800e8ec:	701a      	strb	r2, [r3, #0]
}
 800e8ee:	bf00      	nop
 800e8f0:	370c      	adds	r7, #12
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr

0800e8fa <_ZN10UartPacket12SetParameterE9Parameter>:

void UartPacket::SetParameter(Parameter parameter)
{
 800e8fa:	b480      	push	{r7}
 800e8fc:	b083      	sub	sp, #12
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
 800e902:	6039      	str	r1, [r7, #0]
  if(parameter == Parameter::NULL_PARAMETER)
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	2b30      	cmp	r3, #48	; 0x30
 800e908:	d104      	bne.n	800e914 <_ZN10UartPacket12SetParameterE9Parameter+0x1a>
  {
    m_Parameter = static_cast<uint8_t>(Parameter::NULL_PARAMETER);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a1b      	ldr	r3, [r3, #32]
 800e90e:	2230      	movs	r2, #48	; 0x30
 800e910:	701a      	strb	r2, [r3, #0]
  }
  else if(parameter == Parameter::PARAMETER10)
  {
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER10);
  }
}
 800e912:	e06e      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::GRAPH_PARAMETER1)
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b62      	cmp	r3, #98	; 0x62
 800e918:	d104      	bne.n	800e924 <_ZN10UartPacket12SetParameterE9Parameter+0x2a>
    m_Parameter = static_cast<uint8_t>(Parameter::GRAPH_PARAMETER1);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6a1b      	ldr	r3, [r3, #32]
 800e91e:	2262      	movs	r2, #98	; 0x62
 800e920:	701a      	strb	r2, [r3, #0]
}
 800e922:	e066      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::GRAPH_PARAMETER2)
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b63      	cmp	r3, #99	; 0x63
 800e928:	d104      	bne.n	800e934 <_ZN10UartPacket12SetParameterE9Parameter+0x3a>
    m_Parameter = static_cast<uint8_t>(Parameter::GRAPH_PARAMETER2);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a1b      	ldr	r3, [r3, #32]
 800e92e:	2263      	movs	r2, #99	; 0x63
 800e930:	701a      	strb	r2, [r3, #0]
}
 800e932:	e05e      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::GRAPH_PARAMETER3)
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	2b64      	cmp	r3, #100	; 0x64
 800e938:	d104      	bne.n	800e944 <_ZN10UartPacket12SetParameterE9Parameter+0x4a>
    m_Parameter = static_cast<uint8_t>(Parameter::GRAPH_PARAMETER3);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6a1b      	ldr	r3, [r3, #32]
 800e93e:	2264      	movs	r2, #100	; 0x64
 800e940:	701a      	strb	r2, [r3, #0]
}
 800e942:	e056      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::GRAPH_PARAMETER4)
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	2b65      	cmp	r3, #101	; 0x65
 800e948:	d104      	bne.n	800e954 <_ZN10UartPacket12SetParameterE9Parameter+0x5a>
    m_Parameter = static_cast<uint8_t>(Parameter::GRAPH_PARAMETER4);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a1b      	ldr	r3, [r3, #32]
 800e94e:	2265      	movs	r2, #101	; 0x65
 800e950:	701a      	strb	r2, [r3, #0]
}
 800e952:	e04e      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER1)
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	2b31      	cmp	r3, #49	; 0x31
 800e958:	d104      	bne.n	800e964 <_ZN10UartPacket12SetParameterE9Parameter+0x6a>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER1);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	2231      	movs	r2, #49	; 0x31
 800e960:	701a      	strb	r2, [r3, #0]
}
 800e962:	e046      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER2)
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	2b32      	cmp	r3, #50	; 0x32
 800e968:	d104      	bne.n	800e974 <_ZN10UartPacket12SetParameterE9Parameter+0x7a>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER2);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
 800e96e:	2232      	movs	r2, #50	; 0x32
 800e970:	701a      	strb	r2, [r3, #0]
}
 800e972:	e03e      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER3)
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	2b33      	cmp	r3, #51	; 0x33
 800e978:	d104      	bne.n	800e984 <_ZN10UartPacket12SetParameterE9Parameter+0x8a>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER3);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a1b      	ldr	r3, [r3, #32]
 800e97e:	2233      	movs	r2, #51	; 0x33
 800e980:	701a      	strb	r2, [r3, #0]
}
 800e982:	e036      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER4)
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	2b34      	cmp	r3, #52	; 0x34
 800e988:	d104      	bne.n	800e994 <_ZN10UartPacket12SetParameterE9Parameter+0x9a>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER4);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	2234      	movs	r2, #52	; 0x34
 800e990:	701a      	strb	r2, [r3, #0]
}
 800e992:	e02e      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER5)
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	2b35      	cmp	r3, #53	; 0x35
 800e998:	d104      	bne.n	800e9a4 <_ZN10UartPacket12SetParameterE9Parameter+0xaa>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER5);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6a1b      	ldr	r3, [r3, #32]
 800e99e:	2235      	movs	r2, #53	; 0x35
 800e9a0:	701a      	strb	r2, [r3, #0]
}
 800e9a2:	e026      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER6)
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2b36      	cmp	r3, #54	; 0x36
 800e9a8:	d104      	bne.n	800e9b4 <_ZN10UartPacket12SetParameterE9Parameter+0xba>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER6);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	2236      	movs	r2, #54	; 0x36
 800e9b0:	701a      	strb	r2, [r3, #0]
}
 800e9b2:	e01e      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER7)
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	2b37      	cmp	r3, #55	; 0x37
 800e9b8:	d104      	bne.n	800e9c4 <_ZN10UartPacket12SetParameterE9Parameter+0xca>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER7);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
 800e9be:	2237      	movs	r2, #55	; 0x37
 800e9c0:	701a      	strb	r2, [r3, #0]
}
 800e9c2:	e016      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER8)
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	2b38      	cmp	r3, #56	; 0x38
 800e9c8:	d104      	bne.n	800e9d4 <_ZN10UartPacket12SetParameterE9Parameter+0xda>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER8);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6a1b      	ldr	r3, [r3, #32]
 800e9ce:	2238      	movs	r2, #56	; 0x38
 800e9d0:	701a      	strb	r2, [r3, #0]
}
 800e9d2:	e00e      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER9)
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2b39      	cmp	r3, #57	; 0x39
 800e9d8:	d104      	bne.n	800e9e4 <_ZN10UartPacket12SetParameterE9Parameter+0xea>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER9);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6a1b      	ldr	r3, [r3, #32]
 800e9de:	2239      	movs	r2, #57	; 0x39
 800e9e0:	701a      	strb	r2, [r3, #0]
}
 800e9e2:	e006      	b.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
  else if(parameter == Parameter::PARAMETER10)
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	2b61      	cmp	r3, #97	; 0x61
 800e9e8:	d103      	bne.n	800e9f2 <_ZN10UartPacket12SetParameterE9Parameter+0xf8>
    m_Parameter = static_cast<uint8_t>(Parameter::PARAMETER10);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	2261      	movs	r2, #97	; 0x61
 800e9f0:	701a      	strb	r2, [r3, #0]
}
 800e9f2:	bf00      	nop
 800e9f4:	370c      	adds	r7, #12
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr

0800e9fe <_ZN10UartPacket12SetParameterEh>:

void UartPacket::SetParameter(uint8_t parameter)
{
 800e9fe:	b480      	push	{r7}
 800ea00:	b083      	sub	sp, #12
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
 800ea06:	460b      	mov	r3, r1
 800ea08:	70fb      	strb	r3, [r7, #3]
  m_Parameter = parameter;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a1b      	ldr	r3, [r3, #32]
 800ea0e:	78fa      	ldrb	r2, [r7, #3]
 800ea10:	701a      	strb	r2, [r3, #0]
}
 800ea12:	bf00      	nop
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <_ZN10UartPacket7SetSignE4Sign>:

void UartPacket::SetSign(Sign sign)
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b083      	sub	sp, #12
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
 800ea26:	6039      	str	r1, [r7, #0]
  if(sign == Sign::POSITIVE_SIGN)
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	2b31      	cmp	r3, #49	; 0x31
 800ea2c:	d104      	bne.n	800ea38 <_ZN10UartPacket7SetSignE4Sign+0x1a>
  {
    m_Sign = static_cast<uint8_t>(Sign::POSITIVE_SIGN);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea32:	2231      	movs	r2, #49	; 0x31
 800ea34:	701a      	strb	r2, [r3, #0]
  }
  else if(sign == Sign::NEGATIVE_SIGN)
  {
    m_Sign = static_cast<uint8_t>(Sign::NEGATIVE_SIGN);
  }
}
 800ea36:	e006      	b.n	800ea46 <_ZN10UartPacket7SetSignE4Sign+0x28>
  else if(sign == Sign::NEGATIVE_SIGN)
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	2b32      	cmp	r3, #50	; 0x32
 800ea3c:	d103      	bne.n	800ea46 <_ZN10UartPacket7SetSignE4Sign+0x28>
    m_Sign = static_cast<uint8_t>(Sign::NEGATIVE_SIGN);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea42:	2232      	movs	r2, #50	; 0x32
 800ea44:	701a      	strb	r2, [r3, #0]
}
 800ea46:	bf00      	nop
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <_ZN10UartPacket9SetLengthE6Length>:

void UartPacket::SetLength(Length length)
{
 800ea52:	b480      	push	{r7}
 800ea54:	b083      	sub	sp, #12
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	6039      	str	r1, [r7, #0]
  if(length == Length::NO_PAYLOAD)
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	2b30      	cmp	r3, #48	; 0x30
 800ea60:	d103      	bne.n	800ea6a <_ZN10UartPacket9SetLengthE6Length+0x18>
  {
    m_Length = static_cast<uint8_t>(Length::NO_PAYLOAD);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea66:	2230      	movs	r2, #48	; 0x30
 800ea68:	701a      	strb	r2, [r3, #0]
  }
}
 800ea6a:	bf00      	nop
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <_ZN10UartPacket9SetLengthEi>:

void UartPacket::SetLength(int length)
{
 800ea76:	b480      	push	{r7}
 800ea78:	b083      	sub	sp, #12
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
 800ea7e:	6039      	str	r1, [r7, #0]
  m_Length = static_cast<uint8_t>(length + '0');
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	b2da      	uxtb	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea88:	3230      	adds	r2, #48	; 0x30
 800ea8a:	b2d2      	uxtb	r2, r2
 800ea8c:	701a      	strb	r2, [r3, #0]
}
 800ea8e:	bf00      	nop
 800ea90:	370c      	adds	r7, #12
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr

0800ea9a <_ZN10UartPacket10SetPayloadEPh>:

void UartPacket::SetPayload(uint8_t* payload)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b082      	sub	sp, #8
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
 800eaa2:	6039      	str	r1, [r7, #0]
  memcpy(m_Payload, payload, PAYLOAD_SIZE);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaa8:	220a      	movs	r2, #10
 800eaaa:	6839      	ldr	r1, [r7, #0]
 800eaac:	4618      	mov	r0, r3
 800eaae:	f004 fb4c 	bl	801314a <memcpy>
}
 800eab2:	bf00      	nop
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <_ZNK10UartPacket9GetModuleEv>:
    return Source::SOURCE_ERROR;
  }
}

ModuleID UartPacket::GetModule() const
{
 800eaba:	b480      	push	{r7}
 800eabc:	b083      	sub	sp, #12
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
  if(m_Module == static_cast<uint8_t>(ModuleID::MODULE1))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	699b      	ldr	r3, [r3, #24]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	2b31      	cmp	r3, #49	; 0x31
 800eaca:	d101      	bne.n	800ead0 <_ZNK10UartPacket9GetModuleEv+0x16>
  {
    return ModuleID::MODULE1;
 800eacc:	2331      	movs	r3, #49	; 0x31
 800eace:	e00e      	b.n	800eaee <_ZNK10UartPacket9GetModuleEv+0x34>
  }
  else if(m_Module == static_cast<uint8_t>(ModuleID::MODULE2))
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	2b32      	cmp	r3, #50	; 0x32
 800ead8:	d101      	bne.n	800eade <_ZNK10UartPacket9GetModuleEv+0x24>
  {
    return ModuleID::MODULE2;
 800eada:	2332      	movs	r3, #50	; 0x32
 800eadc:	e007      	b.n	800eaee <_ZNK10UartPacket9GetModuleEv+0x34>
  }
  else if(m_Module == static_cast<uint8_t>(ModuleID::MODULE3))
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	699b      	ldr	r3, [r3, #24]
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2b33      	cmp	r3, #51	; 0x33
 800eae6:	d101      	bne.n	800eaec <_ZNK10UartPacket9GetModuleEv+0x32>
  {
    return ModuleID::MODULE3;
 800eae8:	2333      	movs	r3, #51	; 0x33
 800eaea:	e000      	b.n	800eaee <_ZNK10UartPacket9GetModuleEv+0x34>
  }
  else
  {
    return ModuleID::MODULEID_ERROR;
 800eaec:	2300      	movs	r3, #0
  }
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	370c      	adds	r7, #12
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr

0800eafa <_ZNK10UartPacket11GetFunctionEv>:

Function UartPacket::GetFunction() const
{
 800eafa:	b480      	push	{r7}
 800eafc:	b083      	sub	sp, #12
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  if(m_Function == static_cast<uint8_t>(Function::DATA_PACKET))
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	69db      	ldr	r3, [r3, #28]
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b31      	cmp	r3, #49	; 0x31
 800eb0a:	d101      	bne.n	800eb10 <_ZNK10UartPacket11GetFunctionEv+0x16>
  {
    return Function::DATA_PACKET;
 800eb0c:	2331      	movs	r3, #49	; 0x31
 800eb0e:	e038      	b.n	800eb82 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::INIT_PACKET))
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	69db      	ldr	r3, [r3, #28]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b32      	cmp	r3, #50	; 0x32
 800eb18:	d101      	bne.n	800eb1e <_ZNK10UartPacket11GetFunctionEv+0x24>
  {
    return Function::INIT_PACKET;
 800eb1a:	2332      	movs	r3, #50	; 0x32
 800eb1c:	e031      	b.n	800eb82 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::DEINIT_PACKET))
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	69db      	ldr	r3, [r3, #28]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	2b33      	cmp	r3, #51	; 0x33
 800eb26:	d101      	bne.n	800eb2c <_ZNK10UartPacket11GetFunctionEv+0x32>
  {
    return Function::DEINIT_PACKET;
 800eb28:	2333      	movs	r3, #51	; 0x33
 800eb2a:	e02a      	b.n	800eb82 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::ENABLE_PARAMETER_PACKET))
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	69db      	ldr	r3, [r3, #28]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	2b34      	cmp	r3, #52	; 0x34
 800eb34:	d101      	bne.n	800eb3a <_ZNK10UartPacket11GetFunctionEv+0x40>
  {
    return Function::ENABLE_PARAMETER_PACKET;
 800eb36:	2334      	movs	r3, #52	; 0x34
 800eb38:	e023      	b.n	800eb82 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::DISABLE_PARAMETER_PACKET))
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	69db      	ldr	r3, [r3, #28]
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b35      	cmp	r3, #53	; 0x35
 800eb42:	d101      	bne.n	800eb48 <_ZNK10UartPacket11GetFunctionEv+0x4e>
  {
    return Function::DISABLE_PARAMETER_PACKET;
 800eb44:	2335      	movs	r3, #53	; 0x35
 800eb46:	e01c      	b.n	800eb82 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::SET_PARAMETER_PACKET))
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	69db      	ldr	r3, [r3, #28]
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	2b36      	cmp	r3, #54	; 0x36
 800eb50:	d101      	bne.n	800eb56 <_ZNK10UartPacket11GetFunctionEv+0x5c>
  {
    return Function::SET_PARAMETER_PACKET;
 800eb52:	2336      	movs	r3, #54	; 0x36
 800eb54:	e015      	b.n	800eb82 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::SET_GRAPH_RANGE_MIN))
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	69db      	ldr	r3, [r3, #28]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b37      	cmp	r3, #55	; 0x37
 800eb5e:	d101      	bne.n	800eb64 <_ZNK10UartPacket11GetFunctionEv+0x6a>
  {
    return Function::SET_GRAPH_RANGE_MIN;
 800eb60:	2337      	movs	r3, #55	; 0x37
 800eb62:	e00e      	b.n	800eb82 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::SET_GRAPH_RANGE_MAX))
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	69db      	ldr	r3, [r3, #28]
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	2b38      	cmp	r3, #56	; 0x38
 800eb6c:	d101      	bne.n	800eb72 <_ZNK10UartPacket11GetFunctionEv+0x78>
  {
    return Function::SET_GRAPH_RANGE_MAX;
 800eb6e:	2338      	movs	r3, #56	; 0x38
 800eb70:	e007      	b.n	800eb82 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else if(m_Function == static_cast<uint8_t>(Function::SET_GRAPH_TIME_RANGE))
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	69db      	ldr	r3, [r3, #28]
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	2b39      	cmp	r3, #57	; 0x39
 800eb7a:	d101      	bne.n	800eb80 <_ZNK10UartPacket11GetFunctionEv+0x86>
  {
    return Function::SET_GRAPH_TIME_RANGE;
 800eb7c:	2339      	movs	r3, #57	; 0x39
 800eb7e:	e000      	b.n	800eb82 <_ZNK10UartPacket11GetFunctionEv+0x88>
  }
  else
  {
    return Function::FUNCTION_ERROR;
 800eb80:	2300      	movs	r3, #0
  }
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <_ZNK10UartPacket12GetParameterEv>:

Parameter UartPacket::GetParameter() const
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b083      	sub	sp, #12
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
  if(m_Parameter == static_cast<uint8_t>(Parameter::NULL_PARAMETER))
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a1b      	ldr	r3, [r3, #32]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b30      	cmp	r3, #48	; 0x30
 800eb9e:	d101      	bne.n	800eba4 <_ZNK10UartPacket12GetParameterEv+0x16>
  {
    return Parameter::NULL_PARAMETER;
 800eba0:	2330      	movs	r3, #48	; 0x30
 800eba2:	e062      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::GRAPH_PARAMETER1))
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a1b      	ldr	r3, [r3, #32]
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	2b62      	cmp	r3, #98	; 0x62
 800ebac:	d101      	bne.n	800ebb2 <_ZNK10UartPacket12GetParameterEv+0x24>
  {
    return Parameter::GRAPH_PARAMETER1;
 800ebae:	2362      	movs	r3, #98	; 0x62
 800ebb0:	e05b      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::GRAPH_PARAMETER2))
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6a1b      	ldr	r3, [r3, #32]
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b63      	cmp	r3, #99	; 0x63
 800ebba:	d101      	bne.n	800ebc0 <_ZNK10UartPacket12GetParameterEv+0x32>
  {
    return Parameter::GRAPH_PARAMETER2;
 800ebbc:	2363      	movs	r3, #99	; 0x63
 800ebbe:	e054      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::GRAPH_PARAMETER3))
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	2b64      	cmp	r3, #100	; 0x64
 800ebc8:	d101      	bne.n	800ebce <_ZNK10UartPacket12GetParameterEv+0x40>
  {
    return Parameter::GRAPH_PARAMETER3;
 800ebca:	2364      	movs	r3, #100	; 0x64
 800ebcc:	e04d      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::GRAPH_PARAMETER4))
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a1b      	ldr	r3, [r3, #32]
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	2b65      	cmp	r3, #101	; 0x65
 800ebd6:	d101      	bne.n	800ebdc <_ZNK10UartPacket12GetParameterEv+0x4e>
  {
    return Parameter::GRAPH_PARAMETER4;
 800ebd8:	2365      	movs	r3, #101	; 0x65
 800ebda:	e046      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER1))
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a1b      	ldr	r3, [r3, #32]
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	2b31      	cmp	r3, #49	; 0x31
 800ebe4:	d101      	bne.n	800ebea <_ZNK10UartPacket12GetParameterEv+0x5c>
  {
    return Parameter::PARAMETER1;
 800ebe6:	2331      	movs	r3, #49	; 0x31
 800ebe8:	e03f      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER2))
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	2b32      	cmp	r3, #50	; 0x32
 800ebf2:	d101      	bne.n	800ebf8 <_ZNK10UartPacket12GetParameterEv+0x6a>
  {
    return Parameter::PARAMETER2;
 800ebf4:	2332      	movs	r3, #50	; 0x32
 800ebf6:	e038      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER3))
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a1b      	ldr	r3, [r3, #32]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	2b33      	cmp	r3, #51	; 0x33
 800ec00:	d101      	bne.n	800ec06 <_ZNK10UartPacket12GetParameterEv+0x78>
  {
    return Parameter::PARAMETER3;
 800ec02:	2333      	movs	r3, #51	; 0x33
 800ec04:	e031      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER4))
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6a1b      	ldr	r3, [r3, #32]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	2b34      	cmp	r3, #52	; 0x34
 800ec0e:	d101      	bne.n	800ec14 <_ZNK10UartPacket12GetParameterEv+0x86>
  {
    return Parameter::PARAMETER4;
 800ec10:	2334      	movs	r3, #52	; 0x34
 800ec12:	e02a      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER5))
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6a1b      	ldr	r3, [r3, #32]
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	2b35      	cmp	r3, #53	; 0x35
 800ec1c:	d101      	bne.n	800ec22 <_ZNK10UartPacket12GetParameterEv+0x94>
  {
    return Parameter::PARAMETER5;
 800ec1e:	2335      	movs	r3, #53	; 0x35
 800ec20:	e023      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER6))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a1b      	ldr	r3, [r3, #32]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b36      	cmp	r3, #54	; 0x36
 800ec2a:	d101      	bne.n	800ec30 <_ZNK10UartPacket12GetParameterEv+0xa2>
  {
    return Parameter::PARAMETER6;
 800ec2c:	2336      	movs	r3, #54	; 0x36
 800ec2e:	e01c      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER7))
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6a1b      	ldr	r3, [r3, #32]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b37      	cmp	r3, #55	; 0x37
 800ec38:	d101      	bne.n	800ec3e <_ZNK10UartPacket12GetParameterEv+0xb0>
  {
    return Parameter::PARAMETER7;
 800ec3a:	2337      	movs	r3, #55	; 0x37
 800ec3c:	e015      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER8))
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a1b      	ldr	r3, [r3, #32]
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	2b38      	cmp	r3, #56	; 0x38
 800ec46:	d101      	bne.n	800ec4c <_ZNK10UartPacket12GetParameterEv+0xbe>
  {
    return Parameter::PARAMETER8;
 800ec48:	2338      	movs	r3, #56	; 0x38
 800ec4a:	e00e      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER9))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6a1b      	ldr	r3, [r3, #32]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2b39      	cmp	r3, #57	; 0x39
 800ec54:	d101      	bne.n	800ec5a <_ZNK10UartPacket12GetParameterEv+0xcc>
  {
    return Parameter::PARAMETER9;
 800ec56:	2339      	movs	r3, #57	; 0x39
 800ec58:	e007      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else if(m_Parameter == static_cast<uint8_t>(Parameter::PARAMETER10))
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a1b      	ldr	r3, [r3, #32]
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	2b61      	cmp	r3, #97	; 0x61
 800ec62:	d101      	bne.n	800ec68 <_ZNK10UartPacket12GetParameterEv+0xda>
  {
    return Parameter::PARAMETER10;
 800ec64:	2361      	movs	r3, #97	; 0x61
 800ec66:	e000      	b.n	800ec6a <_ZNK10UartPacket12GetParameterEv+0xdc>
  }
  else
  {
    return Parameter::PARAMETER_ERROR;
 800ec68:	2300      	movs	r3, #0
  }
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	370c      	adds	r7, #12
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr

0800ec76 <_ZNK10UartPacket7GetSignEv>:

Sign UartPacket::GetSign() const
{
 800ec76:	b480      	push	{r7}
 800ec78:	b083      	sub	sp, #12
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
  if(m_Sign == static_cast<uint8_t>(Sign::POSITIVE_SIGN))
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	2b31      	cmp	r3, #49	; 0x31
 800ec86:	d101      	bne.n	800ec8c <_ZNK10UartPacket7GetSignEv+0x16>
  {
    return Sign::POSITIVE_SIGN;
 800ec88:	2331      	movs	r3, #49	; 0x31
 800ec8a:	e007      	b.n	800ec9c <_ZNK10UartPacket7GetSignEv+0x26>
  }
  else if(m_Sign == static_cast<uint8_t>(Sign::NEGATIVE_SIGN))
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	2b32      	cmp	r3, #50	; 0x32
 800ec94:	d101      	bne.n	800ec9a <_ZNK10UartPacket7GetSignEv+0x24>
  {
    return Sign::NEGATIVE_SIGN;
 800ec96:	2332      	movs	r3, #50	; 0x32
 800ec98:	e000      	b.n	800ec9c <_ZNK10UartPacket7GetSignEv+0x26>
  }
  else
  {
    return Sign::SIGN_ERROR;
 800ec9a:	2300      	movs	r3, #0
  }
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <_ZN10UartPacket11SetWrongCrcEv>:
{
  return m_Length - '0';
}

void UartPacket::SetWrongCrc()
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
    m_PacketTable[CRC_BYTE1_POSITION] = 0;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2113      	movs	r1, #19
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f000 f931 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	701a      	strb	r2, [r3, #0]
    m_PacketTable[CRC_BYTE2_POSITION] = 0;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2112      	movs	r1, #18
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f000 f929 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2200      	movs	r2, #0
 800ecce:	701a      	strb	r2, [r3, #0]
    m_PacketTable[CRC_BYTE3_POSITION] = 0;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2111      	movs	r1, #17
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f000 f921 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2200      	movs	r2, #0
 800ecde:	701a      	strb	r2, [r3, #0]
    m_PacketTable[CRC_BYTE4_POSITION] = 0;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2110      	movs	r1, #16
 800ece4:	4618      	mov	r0, r3
 800ece6:	f000 f919 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2200      	movs	r2, #0
 800ecee:	701a      	strb	r2, [r3, #0]
}
 800ecf0:	bf00      	nop
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <_ZN10UartPacket17AppendCrcToPacketEv>:

void UartPacket::AppendCrcToPacket()
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b088      	sub	sp, #32
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  uint32_t crcValueCalculated = CalculateCrc32(m_PacketTable.data(), PACKET_SIZE_WITHOUT_CRC);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 f93a 	bl	800ef7c <_ZNSt5arrayIhLj20EE4dataEv>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2110      	movs	r1, #16
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7fd fa91 	bl	800c234 <_Z14CalculateCrc32PKhi>
 800ed12:	4603      	mov	r3, r0
 800ed14:	60bb      	str	r3, [r7, #8]
  uint32_t* crcAddress = &crcValueCalculated;
 800ed16:	f107 0308 	add.w	r3, r7, #8
 800ed1a:	61fb      	str	r3, [r7, #28]
  
  uint8_t* p1 = reinterpret_cast<uint8_t*>(crcAddress);
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	61bb      	str	r3, [r7, #24]
  uint8_t* p2 = reinterpret_cast<uint8_t*>(crcAddress) + 1;
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	3301      	adds	r3, #1
 800ed24:	617b      	str	r3, [r7, #20]
  uint8_t* p3 = reinterpret_cast<uint8_t*>(crcAddress) + 2;
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	3302      	adds	r3, #2
 800ed2a:	613b      	str	r3, [r7, #16]
  uint8_t* p4 = reinterpret_cast<uint8_t*>(crcAddress) + 3;
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	3303      	adds	r3, #3
 800ed30:	60fb      	str	r3, [r7, #12]
  
  m_PacketTable[CRC_BYTE1_POSITION] = *p1;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2113      	movs	r1, #19
 800ed36:	4618      	mov	r0, r3
 800ed38:	f000 f8f0 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	7013      	strb	r3, [r2, #0]
  m_PacketTable[CRC_BYTE2_POSITION] = *p2;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2112      	movs	r1, #18
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f000 f8e7 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	7013      	strb	r3, [r2, #0]
  m_PacketTable[CRC_BYTE3_POSITION] = *p3;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2111      	movs	r1, #17
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 f8de 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800ed60:	4602      	mov	r2, r0
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	7013      	strb	r3, [r2, #0]
  m_PacketTable[CRC_BYTE4_POSITION] = *p4;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2110      	movs	r1, #16
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f000 f8d5 	bl	800ef1c <_ZNSt5arrayIhLj20EEixEj>
 800ed72:	4602      	mov	r2, r0
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	7013      	strb	r3, [r2, #0]
}
 800ed7a:	bf00      	nop
 800ed7c:	3720      	adds	r7, #32
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <_ZNK10UartPacket10CheckCrc32Ev>:

bool UartPacket::CheckCrc32() const
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b086      	sub	sp, #24
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
  uint8_t crcValueReceivedRaw8Bit[4] = {0};
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	60fb      	str	r3, [r7, #12]
  uint32_t crcValueCalculated = CalculateCrc32(m_PacketTable.data(), PACKET_SIZE_WITHOUT_CRC);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4618      	mov	r0, r3
 800ed92:	f000 f900 	bl	800ef96 <_ZNKSt5arrayIhLj20EE4dataEv>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2110      	movs	r1, #16
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fd fa4a 	bl	800c234 <_Z14CalculateCrc32PKhi>
 800eda0:	4603      	mov	r3, r0
 800eda2:	617b      	str	r3, [r7, #20]
  
  crcValueReceivedRaw8Bit[0] = m_PacketTable[CRC_BYTE4_POSITION];
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2110      	movs	r1, #16
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 f901 	bl	800efb0 <_ZNKSt5arrayIhLj20EEixEj>
 800edae:	4603      	mov	r3, r0
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	733b      	strb	r3, [r7, #12]
  crcValueReceivedRaw8Bit[1] = m_PacketTable[CRC_BYTE3_POSITION];
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2111      	movs	r1, #17
 800edb8:	4618      	mov	r0, r3
 800edba:	f000 f8f9 	bl	800efb0 <_ZNKSt5arrayIhLj20EEixEj>
 800edbe:	4603      	mov	r3, r0
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	737b      	strb	r3, [r7, #13]
  crcValueReceivedRaw8Bit[2] = m_PacketTable[CRC_BYTE2_POSITION];
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2112      	movs	r1, #18
 800edc8:	4618      	mov	r0, r3
 800edca:	f000 f8f1 	bl	800efb0 <_ZNKSt5arrayIhLj20EEixEj>
 800edce:	4603      	mov	r3, r0
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	73bb      	strb	r3, [r7, #14]
  crcValueReceivedRaw8Bit[3] = m_PacketTable[CRC_BYTE1_POSITION];
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2113      	movs	r1, #19
 800edd8:	4618      	mov	r0, r3
 800edda:	f000 f8e9 	bl	800efb0 <_ZNKSt5arrayIhLj20EEixEj>
 800edde:	4603      	mov	r3, r0
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	73fb      	strb	r3, [r7, #15]
  
  uint32_t crcValueReceived = crcValueReceivedRaw8Bit[3] | crcValueReceivedRaw8Bit[2] << 8 | crcValueReceivedRaw8Bit[1] << 16 | crcValueReceivedRaw8Bit[0] << 24;
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
 800ede6:	461a      	mov	r2, r3
 800ede8:	7bbb      	ldrb	r3, [r7, #14]
 800edea:	021b      	lsls	r3, r3, #8
 800edec:	431a      	orrs	r2, r3
 800edee:	7b7b      	ldrb	r3, [r7, #13]
 800edf0:	041b      	lsls	r3, r3, #16
 800edf2:	431a      	orrs	r2, r3
 800edf4:	7b3b      	ldrb	r3, [r7, #12]
 800edf6:	061b      	lsls	r3, r3, #24
 800edf8:	4313      	orrs	r3, r2
 800edfa:	613b      	str	r3, [r7, #16]
  
  return crcValueCalculated == crcValueReceived;
 800edfc:	697a      	ldr	r2, [r7, #20]
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	bf0c      	ite	eq
 800ee04:	2301      	moveq	r3, #1
 800ee06:	2300      	movne	r3, #0
 800ee08:	b2db      	uxtb	r3, r3
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3718      	adds	r7, #24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
	...

0800ee14 <_ZNK10UartPacket11PrintPacketEb>:

void UartPacket::PrintPacket(bool withCrc) const
{
 800ee14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee18:	b08e      	sub	sp, #56	; 0x38
 800ee1a:	af08      	add	r7, sp, #32
 800ee1c:	6178      	str	r0, [r7, #20]
 800ee1e:	460b      	mov	r3, r1
 800ee20:	74fb      	strb	r3, [r7, #19]
  if(withCrc)
 800ee22:	7cfb      	ldrb	r3, [r7, #19]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d04b      	beq.n	800eec0 <_ZNK10UartPacket11PrintPacketEb+0xac>
  {
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
           m_Source, 
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	695b      	ldr	r3, [r3, #20]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee2e:	4698      	mov	r8, r3
           m_Module, 
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	699b      	ldr	r3, [r3, #24]
 800ee34:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee36:	4699      	mov	r9, r3
           m_Function, 
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	69db      	ldr	r3, [r3, #28]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee3e:	469a      	mov	sl, r3
           m_Parameter, 
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	6a1b      	ldr	r3, [r3, #32]
 800ee44:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee46:	461d      	mov	r5, r3
           m_Sign, 
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee4c:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee4e:	461e      	mov	r6, r3
           m_Length, 
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee54:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee56:	60fb      	str	r3, [r7, #12]
           m_Payload, 
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
           m_PacketTable[CRC_BYTE4_POSITION], 
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	2110      	movs	r1, #16
 800ee60:	4618      	mov	r0, r3
 800ee62:	f000 f8a5 	bl	800efb0 <_ZNKSt5arrayIhLj20EEixEj>
 800ee66:	4603      	mov	r3, r0
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	60bb      	str	r3, [r7, #8]
           m_PacketTable[CRC_BYTE3_POSITION], 
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	2111      	movs	r1, #17
 800ee70:	4618      	mov	r0, r3
 800ee72:	f000 f89d 	bl	800efb0 <_ZNKSt5arrayIhLj20EEixEj>
 800ee76:	4603      	mov	r3, r0
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	607b      	str	r3, [r7, #4]
           m_PacketTable[CRC_BYTE2_POSITION], 
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	2112      	movs	r1, #18
 800ee80:	4618      	mov	r0, r3
 800ee82:	f000 f895 	bl	800efb0 <_ZNKSt5arrayIhLj20EEixEj>
 800ee86:	4603      	mov	r3, r0
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	603b      	str	r3, [r7, #0]
           m_PacketTable[CRC_BYTE1_POSITION]);
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	2113      	movs	r1, #19
 800ee90:	4618      	mov	r0, r3
 800ee92:	f000 f88d 	bl	800efb0 <_ZNKSt5arrayIhLj20EEixEj>
 800ee96:	4603      	mov	r3, r0
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s CRC1 %d CRC2 %d CRC3 %d CRC4 %d\n", 
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	9307      	str	r3, [sp, #28]
 800ee9c:	683a      	ldr	r2, [r7, #0]
 800ee9e:	9206      	str	r2, [sp, #24]
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	9205      	str	r2, [sp, #20]
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	9204      	str	r2, [sp, #16]
 800eea8:	9403      	str	r4, [sp, #12]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	9302      	str	r3, [sp, #8]
 800eeae:	9601      	str	r6, [sp, #4]
 800eeb0:	9500      	str	r5, [sp, #0]
 800eeb2:	4653      	mov	r3, sl
 800eeb4:	464a      	mov	r2, r9
 800eeb6:	4641      	mov	r1, r8
 800eeb8:	4816      	ldr	r0, [pc, #88]	; (800ef14 <_ZNK10UartPacket11PrintPacketEb+0x100>)
 800eeba:	f004 f97f 	bl	80131bc <printf>
           m_Parameter, 
           m_Sign, 
           m_Length, 
           m_Payload);
  }
}
 800eebe:	e023      	b.n	800ef08 <_ZNK10UartPacket11PrintPacketEb+0xf4>
           m_Source, 
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	695b      	ldr	r3, [r3, #20]
 800eec4:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s\n", 
 800eec6:	461c      	mov	r4, r3
           m_Module, 
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	699b      	ldr	r3, [r3, #24]
 800eecc:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s\n", 
 800eece:	461d      	mov	r5, r3
           m_Function, 
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	69db      	ldr	r3, [r3, #28]
 800eed4:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s\n", 
 800eed6:	461e      	mov	r6, r3
           m_Parameter, 
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	6a1b      	ldr	r3, [r3, #32]
 800eedc:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s\n", 
 800eede:	461a      	mov	r2, r3
           m_Sign, 
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee4:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s\n", 
 800eee6:	4619      	mov	r1, r3
           m_Length, 
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeec:	781b      	ldrb	r3, [r3, #0]
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s\n", 
 800eeee:	4618      	mov	r0, r3
           m_Payload);
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    printf("S %c M %c F %c P %c Sign %c L %c Payload %.10s\n", 
 800eef4:	9303      	str	r3, [sp, #12]
 800eef6:	9002      	str	r0, [sp, #8]
 800eef8:	9101      	str	r1, [sp, #4]
 800eefa:	9200      	str	r2, [sp, #0]
 800eefc:	4633      	mov	r3, r6
 800eefe:	462a      	mov	r2, r5
 800ef00:	4621      	mov	r1, r4
 800ef02:	4805      	ldr	r0, [pc, #20]	; (800ef18 <_ZNK10UartPacket11PrintPacketEb+0x104>)
 800ef04:	f004 f95a 	bl	80131bc <printf>
}
 800ef08:	bf00      	nop
 800ef0a:	3718      	adds	r7, #24
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef12:	bf00      	nop
 800ef14:	0801a1b4 	.word	0x0801a1b4
 800ef18:	0801a204 	.word	0x0801a204

0800ef1c <_ZNSt5arrayIhLj20EEixEj>:
      constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6839      	ldr	r1, [r7, #0]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f000 f84f 	bl	800efce <_ZNSt14__array_traitsIhLj20EE6_S_refERA20_Khj>
 800ef30:	4603      	mov	r3, r0
 800ef32:	4618      	mov	r0, r3
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <_ZNKSt5arrayIhLj20EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800ef3a:	b480      	push	{r7}
 800ef3c:	b083      	sub	sp, #12
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
 800ef42:	2314      	movs	r3, #20
 800ef44:	4618      	mov	r0, r3
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <_ZNSt5arrayIhLj20EE4fillERKh>:
      fill(const value_type& __u)
 800ef50:	b590      	push	{r4, r7, lr}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f845 	bl	800efea <_ZNSt5arrayIhLj20EE5beginEv>
 800ef60:	4604      	mov	r4, r0
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f7ff ffe9 	bl	800ef3a <_ZNKSt5arrayIhLj20EE4sizeEv>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	683a      	ldr	r2, [r7, #0]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f000 f847 	bl	800f002 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 800ef74:	bf00      	nop
 800ef76:	370c      	adds	r7, #12
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd90      	pop	{r4, r7, pc}

0800ef7c <_ZNSt5arrayIhLj20EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4618      	mov	r0, r3
 800ef88:	f000 f84f 	bl	800f02a <_ZNSt14__array_traitsIhLj20EE6_S_ptrERA20_Kh>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <_ZNKSt5arrayIhLj20EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b082      	sub	sp, #8
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 f842 	bl	800f02a <_ZNSt14__array_traitsIhLj20EE6_S_ptrERA20_Kh>
 800efa6:	4603      	mov	r3, r0
 800efa8:	4618      	mov	r0, r3
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <_ZNKSt5arrayIhLj20EEixEj>:
      operator[](size_type __n) const noexcept
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6839      	ldr	r1, [r7, #0]
 800efbe:	4618      	mov	r0, r3
 800efc0:	f000 f805 	bl	800efce <_ZNSt14__array_traitsIhLj20EE6_S_refERA20_Khj>
 800efc4:	4603      	mov	r3, r0
 800efc6:	4618      	mov	r0, r3
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <_ZNSt14__array_traitsIhLj20EE6_S_refERA20_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800efce:	b480      	push	{r7}
 800efd0:	b083      	sub	sp, #12
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	4413      	add	r3, r2
 800efde:	4618      	mov	r0, r3
 800efe0:	370c      	adds	r7, #12
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr

0800efea <_ZNSt5arrayIhLj20EE5beginEv>:
      begin() noexcept
 800efea:	b580      	push	{r7, lr}
 800efec:	b082      	sub	sp, #8
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7ff ffc2 	bl	800ef7c <_ZNSt5arrayIhLj20EE4dataEv>
 800eff8:	4603      	mov	r3, r0
 800effa:	4618      	mov	r0, r3
 800effc:	3708      	adds	r7, #8
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	60f8      	str	r0, [r7, #12]
 800f00a:	60b9      	str	r1, [r7, #8]
 800f00c:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f000 f816 	bl	800f040 <_ZSt12__niter_baseIPhET_S1_>
 800f014:	4603      	mov	r3, r0
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	68b9      	ldr	r1, [r7, #8]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f000 f81b 	bl	800f056 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 800f020:	4603      	mov	r3, r0
    }
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <_ZNSt14__array_traitsIhLj20EE6_S_ptrERA20_Kh>:
      _S_ptr(const _Type& __t) noexcept
 800f02a:	b480      	push	{r7}
 800f02c:	b083      	sub	sp, #12
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4618      	mov	r0, r3
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr

0800f040 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4618      	mov	r0, r3
 800f04c:	370c      	adds	r7, #12
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 800f056:	b580      	push	{r7, lr}
 800f058:	b084      	sub	sp, #16
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	60f8      	str	r0, [r7, #12]
 800f05e:	60b9      	str	r1, [r7, #8]
 800f060:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	4413      	add	r3, r2
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	4619      	mov	r1, r3
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	f000 f807 	bl	800f080 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	4413      	add	r3, r2
    }
 800f078:	4618      	mov	r0, r3
 800f07a:	3710      	adds	r7, #16
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 800f092:	68ba      	ldr	r2, [r7, #8]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	613b      	str	r3, [r7, #16]
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d005      	beq.n	800f0ac <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 800f0a0:	7dfb      	ldrb	r3, [r7, #23]
 800f0a2:	693a      	ldr	r2, [r7, #16]
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	68f8      	ldr	r0, [r7, #12]
 800f0a8:	f004 f873 	bl	8013192 <memset>
    }
 800f0ac:	bf00      	nop
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	370c      	adds	r7, #12
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr

0800f0cc <_ZdlPvS_>:
inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 800f0cc:	b480      	push	{r7}
 800f0ce:	b083      	sub	sp, #12
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
 800f0d6:	bf00      	nop
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <_Z16GetArgumentCountNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
using std::string;

extern UART_HandleTypeDef huart6;

int GetArgumentCount(std::string input)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b08c      	sub	sp, #48	; 0x30
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
  int commasCount = 0;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  int index = 0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	62bb      	str	r3, [r7, #40]	; 0x28
  
  while ((index = input.find_first_of(',')) != string::npos)
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	212c      	movs	r1, #44	; 0x2c
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f002 f870 	bl	80111dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f106:	bf14      	ite	ne
 800f108:	2301      	movne	r3, #1
 800f10a:	2300      	moveq	r3, #0
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d018      	beq.n	800f144 <_Z16GetArgumentCountNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
  {
    ++commasCount;
 800f112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f114:	3301      	adds	r3, #1
 800f116:	62fb      	str	r3, [r7, #44]	; 0x2c
    input = input.substr(index + 1);
 800f118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11a:	3301      	adds	r3, #1
 800f11c:	461a      	mov	r2, r3
 800f11e:	f107 000c 	add.w	r0, r7, #12
 800f122:	f04f 33ff 	mov.w	r3, #4294967295
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	f002 f8cc 	bl	80112c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800f12c:	f107 030c 	add.w	r3, r7, #12
 800f130:	4619      	mov	r1, r3
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f001 fee0 	bl	8010ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800f138:	f107 030c 	add.w	r3, r7, #12
 800f13c:	4618      	mov	r0, r3
 800f13e:	f001 fecf 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  while ((index = input.find_first_of(',')) != string::npos)
 800f142:	e7d6      	b.n	800f0f2 <_Z16GetArgumentCountNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
  }
  
  /*First comma is separating command from the first argument so number of commas is equal to number of arguments*/
  int argumentsCount = commasCount;
 800f144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f146:	627b      	str	r3, [r7, #36]	; 0x24
  
  return argumentsCount;
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3730      	adds	r7, #48	; 0x30
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
	...

0800f154 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE>:

bool ExtractArguments(string& input, int requiredArgumentCount, std::vector<std::string>& extractedArguments)
{
 800f154:	b590      	push	{r4, r7, lr}
 800f156:	b0a7      	sub	sp, #156	; 0x9c
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	607a      	str	r2, [r7, #4]
  string argument;
 800f160:	f107 0314 	add.w	r3, r7, #20
 800f164:	4618      	mov	r0, r3
 800f166:	f001 fe95 	bl	8010e94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
  int index = 0;
 800f16a:	2300      	movs	r3, #0
 800f16c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  
  if (input.find_first_of(' ') != string::npos)
 800f170:	2200      	movs	r2, #0
 800f172:	2120      	movs	r1, #32
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f002 f831 	bl	80111dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>
 800f17a:	4603      	mov	r3, r0
 800f17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f180:	bf14      	ite	ne
 800f182:	2301      	movne	r3, #1
 800f184:	2300      	moveq	r3, #0
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d004      	beq.n	800f196 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x42>
  {
    printf("ERROR, Spaces are not allowed, aborting\n");
 800f18c:	4851      	ldr	r0, [pc, #324]	; (800f2d4 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x180>)
 800f18e:	f004 f877 	bl	8013280 <puts>
    return false;
 800f192:	2400      	movs	r4, #0
 800f194:	e085      	b.n	800f2a2 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x14e>
  }
  
  int argumentCount = GetArgumentCount(input);
 800f196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f19a:	68f9      	ldr	r1, [r7, #12]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f002 f851 	bl	8011244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800f1a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7ff ff9b 	bl	800f0e2 <_Z16GetArgumentCountNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f1b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f001 fe92 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  
  if (argumentCount != requiredArgumentCount)
 800f1bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d007      	beq.n	800f1d6 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x82>
  {
    printf("ERROR, Wrong number of arguments, expected %d, got %d\n",requiredArgumentCount, argumentCount);
 800f1c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f1ca:	68b9      	ldr	r1, [r7, #8]
 800f1cc:	4842      	ldr	r0, [pc, #264]	; (800f2d8 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x184>)
 800f1ce:	f003 fff5 	bl	80131bc <printf>
    return false;
 800f1d2:	2400      	movs	r4, #0
 800f1d4:	e065      	b.n	800f2a2 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x14e>
  }
  
  /*Skip extraction of first parameter because it is command*/
  index = input.find_first_of(',');
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	212c      	movs	r1, #44	; 0x2c
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f001 fffe 	bl	80111dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  input = input.substr(index + 1);
 800f1e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800f1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f6:	68f9      	ldr	r1, [r7, #12]
 800f1f8:	f002 f864 	bl	80112c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800f1fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f200:	4619      	mov	r1, r3
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f001 fe78 	bl	8010ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800f208:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f20c:	4618      	mov	r0, r3
 800f20e:	f001 fe67 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  
  for (int argumentIndex = 0; argumentIndex < requiredArgumentCount; argumentIndex++)
 800f212:	2300      	movs	r3, #0
 800f214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f218:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	429a      	cmp	r2, r3
 800f220:	da3e      	bge.n	800f2a0 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x14c>
  {
    index = input.find_first_of(',');
 800f222:	2200      	movs	r2, #0
 800f224:	212c      	movs	r1, #44	; 0x2c
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f001 ffd8 	bl	80111dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>
 800f22c:	4603      	mov	r3, r0
 800f22e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    
    argument = input.substr(0, index);
 800f232:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f236:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800f23a:	2200      	movs	r2, #0
 800f23c:	68f9      	ldr	r1, [r7, #12]
 800f23e:	f002 f841 	bl	80112c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800f242:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800f246:	f107 0314 	add.w	r3, r7, #20
 800f24a:	4611      	mov	r1, r2
 800f24c:	4618      	mov	r0, r3
 800f24e:	f001 fe53 	bl	8010ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800f252:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f256:	4618      	mov	r0, r3
 800f258:	f001 fe42 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    
    input = input.substr(index + 1);
 800f25c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f260:	3301      	adds	r3, #1
 800f262:	461a      	mov	r2, r3
 800f264:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800f268:	f04f 33ff 	mov.w	r3, #4294967295
 800f26c:	68f9      	ldr	r1, [r7, #12]
 800f26e:	f002 f829 	bl	80112c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800f272:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f276:	4619      	mov	r1, r3
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f001 fe3d 	bl	8010ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800f27e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f282:	4618      	mov	r0, r3
 800f284:	f001 fe2c 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    
    extractedArguments.push_back(argument);
 800f288:	f107 0314 	add.w	r3, r7, #20
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f83e 	bl	800f310 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
  for (int argumentIndex = 0; argumentIndex < requiredArgumentCount; argumentIndex++)
 800f294:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f298:	3301      	adds	r3, #1
 800f29a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f29e:	e7bb      	b.n	800f218 <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0xc4>
  }
  
  return true;
 800f2a0:	2401      	movs	r4, #1
  string argument;
 800f2a2:	f107 0314 	add.w	r3, r7, #20
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f001 fe1a 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f2ac:	4623      	mov	r3, r4
 800f2ae:	e00c      	b.n	800f2ca <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x176>
  int argumentCount = GetArgumentCount(input);
 800f2b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f001 fe13 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f2ba:	e7ff      	b.n	800f2bc <_Z16ExtractArgumentsRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRSt6vectorIS4_SaIS4_EE+0x168>
  string argument;
 800f2bc:	f107 0314 	add.w	r3, r7, #20
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f001 fe0d 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f2c6:	f000 fbcc 	bl	800fa62 <__cxa_end_cleanup>
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	379c      	adds	r7, #156	; 0x9c
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd90      	pop	{r4, r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	0801a234 	.word	0x0801a234
 800f2d8:	0801a25c 	.word	0x0801a25c

0800f2dc <_Z17SendPacketViaUartR10UartPacket>:

void SendPacketViaUart(UartPacket& uartPacket)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart6, static_cast<uint8_t*>(uartPacket), PACKET_SIZE, UART_TX_WAITING);
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff fa85 	bl	800e7f4 <_ZN10UartPacketcvPhEv>
 800f2ea:	4601      	mov	r1, r0
 800f2ec:	2332      	movs	r3, #50	; 0x32
 800f2ee:	2214      	movs	r2, #20
 800f2f0:	4805      	ldr	r0, [pc, #20]	; (800f308 <_Z17SendPacketViaUartR10UartPacket+0x2c>)
 800f2f2:	f7fa fe54 	bl	8009f9e <HAL_UART_Transmit>
  
  /*Toggle green LED*/
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800f2f6:	2120      	movs	r1, #32
 800f2f8:	4804      	ldr	r0, [pc, #16]	; (800f30c <_Z17SendPacketViaUartR10UartPacket+0x30>)
 800f2fa:	f7fa f986 	bl	800960a <HAL_GPIO_TogglePin>
 800f2fe:	bf00      	nop
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	20000f70 	.word	0x20000f70
 800f30c:	40020000 	.word	0x40020000

0800f310 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	685a      	ldr	r2, [r3, #4]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	429a      	cmp	r2, r3
 800f324:	d00d      	beq.n	800f342 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	683a      	ldr	r2, [r7, #0]
 800f32e:	4619      	mov	r1, r3
 800f330:	f000 f81f 	bl	800f372 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	f103 0218 	add.w	r2, r3, #24
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800f340:	e008      	b.n	800f354 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x44>
	  _M_realloc_insert(end(), __x);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f828 	bl	800f398 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800f348:	4603      	mov	r3, r0
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	4619      	mov	r1, r3
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 f834 	bl	800f3bc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 800f354:	bf00      	nop
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4618      	mov	r0, r3
 800f368:	370c      	adds	r7, #12
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr

0800f372 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800f372:	b580      	push	{r7, lr}
 800f374:	b084      	sub	sp, #16
 800f376:	af00      	add	r7, sp, #0
 800f378:	60f8      	str	r0, [r7, #12]
 800f37a:	60b9      	str	r1, [r7, #8]
 800f37c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7ff ffec 	bl	800f35c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f384:	4603      	mov	r3, r0
 800f386:	461a      	mov	r2, r3
 800f388:	68b9      	ldr	r1, [r7, #8]
 800f38a:	68f8      	ldr	r0, [r7, #12]
 800f38c:	f000 f8dc 	bl	800f548 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 800f390:	bf00      	nop
 800f392:	3710      	adds	r7, #16
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	1d1a      	adds	r2, r3, #4
 800f3a4:	f107 030c 	add.w	r3, r7, #12
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f000 f8ed 	bl	800f58a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3710      	adds	r7, #16
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
	...

0800f3bc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800f3bc:	b5b0      	push	{r4, r5, r7, lr}
 800f3be:	b08a      	sub	sp, #40	; 0x28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800f3c8:	4a5d      	ldr	r2, [pc, #372]	; (800f540 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x184>)
 800f3ca:	2101      	movs	r1, #1
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f000 f8ec 	bl	800f5aa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	623b      	str	r3, [r7, #32]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	f000 f92f 	bl	800f63a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	f107 0214 	add.w	r2, r7, #20
 800f3e4:	f107 0308 	add.w	r3, r7, #8
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f000 f936 	bl	800f65c <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	6a39      	ldr	r1, [r7, #32]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f000 f94b 	bl	800f694 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800f3fe:	4603      	mov	r3, r0
 800f400:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	627b      	str	r3, [r7, #36]	; 0x24
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800f406:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800f408:	69fa      	ldr	r2, [r7, #28]
 800f40a:	4613      	mov	r3, r2
 800f40c:	005b      	lsls	r3, r3, #1
 800f40e:	4413      	add	r3, r2
 800f410:	00db      	lsls	r3, r3, #3
 800f412:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	189d      	adds	r5, r3, r2
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7ff ff9f 	bl	800f35c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f41e:	4603      	mov	r3, r0
 800f420:	461a      	mov	r2, r3
 800f422:	4629      	mov	r1, r5
 800f424:	4620      	mov	r0, r4
 800f426:	f7ff ffa4 	bl	800f372 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800f42a:	2300      	movs	r3, #0
 800f42c:	627b      	str	r3, [r7, #36]	; 0x24

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681c      	ldr	r4, [r3, #0]
 800f432:	f107 0308 	add.w	r3, r7, #8
 800f436:	4618      	mov	r0, r3
 800f438:	f000 f940 	bl	800f6bc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800f43c:	4603      	mov	r3, r0
 800f43e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	4618      	mov	r0, r3
 800f444:	f7fc fde6 	bl	800c014 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800f448:	4603      	mov	r3, r0
	  __new_finish
 800f44a:	69ba      	ldr	r2, [r7, #24]
 800f44c:	4629      	mov	r1, r5
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 f93f 	bl	800f6d2 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800f454:	4603      	mov	r3, r0
 800f456:	627b      	str	r3, [r7, #36]	; 0x24

	  ++__new_finish;
 800f458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45a:	3318      	adds	r3, #24
 800f45c:	627b      	str	r3, [r7, #36]	; 0x24

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800f45e:	f107 0308 	add.w	r3, r7, #8
 800f462:	4618      	mov	r0, r3
 800f464:	f000 f92a 	bl	800f6bc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800f468:	4603      	mov	r3, r0
 800f46a:	681c      	ldr	r4, [r3, #0]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4618      	mov	r0, r3
 800f474:	f7fc fdce 	bl	800c014 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800f478:	4603      	mov	r3, r0
	  __new_finish
 800f47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f47c:	4629      	mov	r1, r5
 800f47e:	4620      	mov	r0, r4
 800f480:	f000 f927 	bl	800f6d2 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800f484:	4603      	mov	r3, r0
 800f486:	627b      	str	r3, [r7, #36]	; 0x24
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681c      	ldr	r4, [r3, #0]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	4618      	mov	r0, r3
 800f494:	f7fc fdbe 	bl	800c014 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800f498:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800f49a:	461a      	mov	r2, r3
 800f49c:	4629      	mov	r1, r5
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f7fc fdc3 	bl	800c02a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800f4a4:	68f8      	ldr	r0, [r7, #12]
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	10db      	asrs	r3, r3, #3
 800f4b8:	4a22      	ldr	r2, [pc, #136]	; (800f544 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 800f4ba:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 800f4be:	461a      	mov	r2, r3
 800f4c0:	f7fc fe16 	bl	800c0f0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	69ba      	ldr	r2, [r7, #24]
 800f4c8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ce:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f4d0:	6a3a      	ldr	r2, [r7, #32]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	005b      	lsls	r3, r3, #1
 800f4d6:	4413      	add	r3, r2
 800f4d8:	00db      	lsls	r3, r3, #3
 800f4da:	461a      	mov	r2, r3
 800f4dc:	69bb      	ldr	r3, [r7, #24]
 800f4de:	441a      	add	r2, r3
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	609a      	str	r2, [r3, #8]
    }
 800f4e4:	e029      	b.n	800f53a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x17e>
 800f4e6:	4603      	mov	r3, r0
      __catch(...)
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f000 ff67 	bl	80103bc <__cxa_begin_catch>
	  if (!__new_finish)
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d10c      	bne.n	800f50e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x152>
	    _Alloc_traits::destroy(this->_M_impl,
 800f4f4:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 800f4f6:	69fa      	ldr	r2, [r7, #28]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	005b      	lsls	r3, r3, #1
 800f4fc:	4413      	add	r3, r2
 800f4fe:	00db      	lsls	r3, r3, #3
 800f500:	461a      	mov	r2, r3
	    _Alloc_traits::destroy(this->_M_impl,
 800f502:	69bb      	ldr	r3, [r7, #24]
 800f504:	4413      	add	r3, r2
 800f506:	4619      	mov	r1, r3
 800f508:	f000 f8fc 	bl	800f704 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
 800f50c:	e009      	b.n	800f522 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x166>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	4618      	mov	r0, r3
 800f512:	f7fc fd7f 	bl	800c014 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800f516:	4603      	mov	r3, r0
 800f518:	461a      	mov	r2, r3
 800f51a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f51c:	69b8      	ldr	r0, [r7, #24]
 800f51e:	f7fc fd84 	bl	800c02a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	6a3a      	ldr	r2, [r7, #32]
 800f526:	69b9      	ldr	r1, [r7, #24]
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fc fde1 	bl	800c0f0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
	  __throw_exception_again;
 800f52e:	f000 ff0b 	bl	8010348 <__cxa_rethrow>
      __catch(...)
 800f532:	f000 ff83 	bl	801043c <__cxa_end_catch>
 800f536:	f000 fa94 	bl	800fa62 <__cxa_end_cleanup>
    }
 800f53a:	3728      	adds	r7, #40	; 0x28
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bdb0      	pop	{r4, r5, r7, pc}
 800f540:	0801a294 	.word	0x0801a294
 800f544:	aaaaaaab 	.word	0xaaaaaaab

0800f548 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800f548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7ff ff01 	bl	800f35c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800f55a:	4606      	mov	r6, r0
 800f55c:	68bd      	ldr	r5, [r7, #8]
 800f55e:	4629      	mov	r1, r5
 800f560:	2018      	movs	r0, #24
 800f562:	f7ff fda7 	bl	800f0b4 <_ZnwjPv>
 800f566:	4604      	mov	r4, r0
 800f568:	2c00      	cmp	r4, #0
 800f56a:	d00a      	beq.n	800f582 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_+0x3a>
 800f56c:	4631      	mov	r1, r6
 800f56e:	4620      	mov	r0, r4
 800f570:	f001 fe68 	bl	8011244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800f574:	e005      	b.n	800f582 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_+0x3a>
 800f576:	4629      	mov	r1, r5
 800f578:	4620      	mov	r0, r4
 800f57a:	f7ff fda7 	bl	800f0cc <_ZdlPvS_>
 800f57e:	f000 fa70 	bl	800fa62 <__cxa_end_cleanup>
 800f582:	bf00      	nop
 800f584:	3714      	adds	r7, #20
 800f586:	46bd      	mov	sp, r7
 800f588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f58a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f58a:	b480      	push	{r7}
 800f58c:	b083      	sub	sp, #12
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
 800f592:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	681a      	ldr	r2, [r3, #0]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	370c      	adds	r7, #12
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800f5aa:	b590      	push	{r4, r7, lr}
 800f5ac:	b087      	sub	sp, #28
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	60f8      	str	r0, [r7, #12]
 800f5b2:	60b9      	str	r1, [r7, #8]
 800f5b4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f000 f8b1 	bl	800f71e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800f5bc:	4604      	mov	r4, r0
 800f5be:	68f8      	ldr	r0, [r7, #12]
 800f5c0:	f7fc fdb6 	bl	800c130 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	1ae2      	subs	r2, r4, r3
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	bf34      	ite	cc
 800f5ce:	2301      	movcc	r3, #1
 800f5d0:	2300      	movcs	r3, #0
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d003      	beq.n	800f5e0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f001 fb48 	bl	8010c70 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 800f5e0:	68f8      	ldr	r0, [r7, #12]
 800f5e2:	f7fc fda5 	bl	800c130 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f7fc fda1 	bl	800c130 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	613b      	str	r3, [r7, #16]
 800f5f2:	f107 0208 	add.w	r2, r7, #8
 800f5f6:	f107 0310 	add.w	r3, r7, #16
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f000 f89f 	bl	800f740 <_ZSt3maxIjERKT_S2_S2_>
 800f602:	4603      	mov	r3, r0
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4423      	add	r3, r4
 800f608:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f7fc fd90 	bl	800c130 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800f610:	4602      	mov	r2, r0
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	4293      	cmp	r3, r2
 800f616:	d306      	bcc.n	800f626 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f000 f880 	bl	800f71e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800f61e:	4602      	mov	r2, r0
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	4293      	cmp	r3, r2
 800f624:	d904      	bls.n	800f630 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f000 f879 	bl	800f71e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800f62c:	4603      	mov	r3, r0
 800f62e:	e000      	b.n	800f632 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 800f630:	697b      	ldr	r3, [r7, #20]
      }
 800f632:	4618      	mov	r0, r3
 800f634:	371c      	adds	r7, #28
 800f636:	46bd      	mov	sp, r7
 800f638:	bd90      	pop	{r4, r7, pc}

0800f63a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b084      	sub	sp, #16
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	f107 030c 	add.w	r3, r7, #12
 800f648:	4611      	mov	r1, r2
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7ff ff9d 	bl	800f58a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	4618      	mov	r0, r3
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
	...

0800f65c <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f65c:	b590      	push	{r4, r7, lr}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 f828 	bl	800f6bc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800f66c:	4603      	mov	r3, r0
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	461c      	mov	r4, r3
 800f672:	6838      	ldr	r0, [r7, #0]
 800f674:	f000 f822 	bl	800f6bc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800f678:	4603      	mov	r3, r0
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	1ae3      	subs	r3, r4, r3
 800f67e:	10db      	asrs	r3, r3, #3
 800f680:	4a03      	ldr	r2, [pc, #12]	; (800f690 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 800f682:	fb02 f303 	mul.w	r3, r2, r3
 800f686:	4618      	mov	r0, r3
 800f688:	370c      	adds	r7, #12
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd90      	pop	{r4, r7, pc}
 800f68e:	bf00      	nop
 800f690:	aaaaaaab 	.word	0xaaaaaaab

0800f694 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d006      	beq.n	800f6b2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f000 f85d 	bl	800f768 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	e000      	b.n	800f6b4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800f6b2:	2300      	movs	r3, #0
      }
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800f6d2:	b590      	push	{r4, r7, lr}
 800f6d4:	b085      	sub	sp, #20
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	60f8      	str	r0, [r7, #12]
 800f6da:	60b9      	str	r1, [r7, #8]
 800f6dc:	607a      	str	r2, [r7, #4]
 800f6de:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f000 f850 	bl	800f786 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	68b8      	ldr	r0, [r7, #8]
 800f6ea:	f000 f84c 	bl	800f786 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800f6ee:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f000 f855 	bl	800f7a4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800f6fa:	4603      	mov	r3, r0
    }
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3714      	adds	r7, #20
 800f700:	46bd      	mov	sp, r7
 800f702:	bd90      	pop	{r4, r7, pc}

0800f704 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800f70e:	6839      	ldr	r1, [r7, #0]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 f858 	bl	800f7c6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
 800f716:	bf00      	nop
 800f718:	3708      	adds	r7, #8
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800f71e:	b580      	push	{r7, lr}
 800f720:	b082      	sub	sp, #8
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 f864 	bl	800f7f6 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800f72e:	4603      	mov	r3, r0
 800f730:	4618      	mov	r0, r3
 800f732:	f000 f854 	bl	800f7de <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800f736:	4603      	mov	r3, r0
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	429a      	cmp	r2, r3
 800f754:	d201      	bcs.n	800f75a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	e000      	b.n	800f75c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800f75a:	687b      	ldr	r3, [r7, #4]
    }
 800f75c:	4618      	mov	r0, r3
 800f75e:	370c      	adds	r7, #12
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800f772:	2200      	movs	r2, #0
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 f848 	bl	800f80c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800f77c:	4603      	mov	r3, r0
 800f77e:	4618      	mov	r0, r3
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800f786:	b580      	push	{r7, lr}
 800f788:	b084      	sub	sp, #16
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800f78e:	f107 030c 	add.w	r3, r7, #12
 800f792:	6879      	ldr	r1, [r7, #4]
 800f794:	4618      	mov	r0, r3
 800f796:	f000 f85a 	bl	800f84e <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	4618      	mov	r0, r3
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
 800f7b0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	68b9      	ldr	r1, [r7, #8]
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f000 f858 	bl	800f86c <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b082      	sub	sp, #8
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
 800f7ce:	6039      	str	r1, [r7, #0]
 800f7d0:	6838      	ldr	r0, [r7, #0]
 800f7d2:	f001 fb85 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f7d6:	bf00      	nop
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 f852 	bl	800f890 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3708      	adds	r7, #8
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800f7f6:	b480      	push	{r7}
 800f7f8:	b083      	sub	sp, #12
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4618      	mov	r0, r3
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f000 f839 	bl	800f890 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800f81e:	4602      	mov	r2, r0
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	4293      	cmp	r3, r2
 800f824:	bf8c      	ite	hi
 800f826:	2301      	movhi	r3, #1
 800f828:	2300      	movls	r3, #0
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d001      	beq.n	800f834 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f830:	f001 f9de 	bl	8010bf0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f834:	68ba      	ldr	r2, [r7, #8]
 800f836:	4613      	mov	r3, r2
 800f838:	005b      	lsls	r3, r3, #1
 800f83a:	4413      	add	r3, r2
 800f83c:	00db      	lsls	r3, r3, #3
 800f83e:	4618      	mov	r0, r3
 800f840:	f000 fe40 	bl	80104c4 <_Znwj>
 800f844:	4603      	mov	r3, r0
      }
 800f846:	4618      	mov	r0, r3
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800f84e:	b480      	push	{r7}
 800f850:	b083      	sub	sp, #12
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
 800f856:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	683a      	ldr	r2, [r7, #0]
 800f85c:	601a      	str	r2, [r3, #0]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4618      	mov	r0, r3
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b086      	sub	sp, #24
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800f878:	2301      	movs	r3, #1
 800f87a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	68b9      	ldr	r1, [r7, #8]
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f000 f813 	bl	800f8ac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800f886:	4603      	mov	r3, r0
    }
 800f888:	4618      	mov	r0, r3
 800f88a:	3718      	adds	r7, #24
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800f898:	4b03      	ldr	r3, [pc, #12]	; (800f8a8 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x18>)
 800f89a:	4618      	mov	r0, r3
 800f89c:	370c      	adds	r7, #12
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr
 800f8a6:	bf00      	nop
 800f8a8:	0aaaaaaa 	.word	0x0aaaaaaa

0800f8ac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f8ac:	b590      	push	{r4, r7, lr}
 800f8ae:	b087      	sub	sp, #28
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800f8bc:	f107 0208 	add.w	r2, r7, #8
 800f8c0:	f107 030c 	add.w	r3, r7, #12
 800f8c4:	4611      	mov	r1, r2
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f000 f82e 	bl	800f928 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d016      	beq.n	800f900 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800f8d2:	6978      	ldr	r0, [r7, #20]
 800f8d4:	f7fc fc68 	bl	800c1a8 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800f8d8:	4604      	mov	r4, r0
 800f8da:	f107 030c 	add.w	r3, r7, #12
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f000 f844 	bl	800f96c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f000 f856 	bl	800f99a <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800f8ee:	f107 030c 	add.w	r3, r7, #12
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f000 f829 	bl	800f94a <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	3318      	adds	r3, #24
 800f8fc:	617b      	str	r3, [r7, #20]
 800f8fe:	e7dd      	b.n	800f8bc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	e00d      	b.n	800f920 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x74>
 800f904:	4603      	mov	r3, r0
	  __catch(...)
 800f906:	4618      	mov	r0, r3
 800f908:	f000 fd58 	bl	80103bc <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 800f90c:	6979      	ldr	r1, [r7, #20]
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7fc fc01 	bl	800c116 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
	      __throw_exception_again;
 800f914:	f000 fd18 	bl	8010348 <__cxa_rethrow>
	  __catch(...)
 800f918:	f000 fd90 	bl	801043c <__cxa_end_catch>
 800f91c:	f000 f8a1 	bl	800fa62 <__cxa_end_cleanup>
	}
 800f920:	4618      	mov	r0, r3
 800f922:	371c      	adds	r7, #28
 800f924:	46bd      	mov	sp, r7
 800f926:	bd90      	pop	{r4, r7, pc}

0800f928 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800f932:	6839      	ldr	r1, [r7, #0]
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f000 f849 	bl	800f9cc <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800f93a:	4603      	mov	r3, r0
 800f93c:	f083 0301 	eor.w	r3, r3, #1
 800f940:	b2db      	uxtb	r3, r3
 800f942:	4618      	mov	r0, r3
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800f94a:	b480      	push	{r7}
 800f94c:	b083      	sub	sp, #12
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
	++_M_current;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f103 0218 	add.w	r2, r3, #24
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	601a      	str	r2, [r3, #0]
	return *this;
 800f95e:	687b      	ldr	r3, [r7, #4]
      }
 800f960:	4618      	mov	r0, r3
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4618      	mov	r0, r3
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4618      	mov	r0, r3
 800f990:	370c      	adds	r7, #12
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800f99a:	b590      	push	{r4, r7, lr}
 800f99c:	b083      	sub	sp, #12
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
 800f9a2:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800f9a4:	6838      	ldr	r0, [r7, #0]
 800f9a6:	f7ff ffed 	bl	800f984 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	2018      	movs	r0, #24
 800f9b2:	f7ff fb7f 	bl	800f0b4 <_ZnwjPv>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d003      	beq.n	800f9c4 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800f9bc:	4621      	mov	r1, r4
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f001 fa70 	bl	8010ea4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800f9c4:	bf00      	nop
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd90      	pop	{r4, r7, pc}

0800f9cc <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800f9cc:	b590      	push	{r4, r7, lr}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 f80e 	bl	800f9f8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800f9dc:	4604      	mov	r4, r0
 800f9de:	6838      	ldr	r0, [r7, #0]
 800f9e0:	f000 f80a 	bl	800f9f8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	429c      	cmp	r4, r3
 800f9e8:	bf0c      	ite	eq
 800f9ea:	2301      	moveq	r3, #1
 800f9ec:	2300      	movne	r3, #0
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	370c      	adds	r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd90      	pop	{r4, r7, pc}

0800f9f8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4618      	mov	r0, r3
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800fa10:	f8df d034 	ldr.w	sp, [pc, #52]	; 800fa48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800fa14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800fa16:	e003      	b.n	800fa20 <LoopCopyDataInit>

0800fa18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800fa18:	4b0c      	ldr	r3, [pc, #48]	; (800fa4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800fa1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800fa1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800fa1e:	3104      	adds	r1, #4

0800fa20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800fa20:	480b      	ldr	r0, [pc, #44]	; (800fa50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800fa22:	4b0c      	ldr	r3, [pc, #48]	; (800fa54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800fa24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800fa26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800fa28:	d3f6      	bcc.n	800fa18 <CopyDataInit>
  ldr  r2, =_sbss
 800fa2a:	4a0b      	ldr	r2, [pc, #44]	; (800fa58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800fa2c:	e002      	b.n	800fa34 <LoopFillZerobss>

0800fa2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800fa2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800fa30:	f842 3b04 	str.w	r3, [r2], #4

0800fa34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800fa34:	4b09      	ldr	r3, [pc, #36]	; (800fa5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800fa36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800fa38:	d3f9      	bcc.n	800fa2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800fa3a:	f7fe fe73 	bl	800e724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800fa3e:	f003 f89b 	bl	8012b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fa42:	f7fd ff6f 	bl	800d924 <main>
  bx  lr    
 800fa46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800fa48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800fa4c:	0801dcb4 	.word	0x0801dcb4
  ldr  r0, =_sdata
 800fa50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800fa54:	20000db0 	.word	0x20000db0
  ldr  r2, =_sbss
 800fa58:	20000db0 	.word	0x20000db0
  ldr  r3, = _ebss
 800fa5c:	200010fc 	.word	0x200010fc

0800fa60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fa60:	e7fe      	b.n	800fa60 <ADC_IRQHandler>

0800fa62 <__cxa_end_cleanup>:
 800fa62:	b41e      	push	{r1, r2, r3, r4}
 800fa64:	f000 f88e 	bl	800fb84 <__gnu_end_cleanup>
 800fa68:	bc1e      	pop	{r1, r2, r3, r4}
 800fa6a:	f7f8 fd41 	bl	80084f0 <_Unwind_Resume>
	...

0800fa70 <__cxa_type_match>:
 800fa70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa72:	7802      	ldrb	r2, [r0, #0]
 800fa74:	2a47      	cmp	r2, #71	; 0x47
 800fa76:	b083      	sub	sp, #12
 800fa78:	460d      	mov	r5, r1
 800fa7a:	461f      	mov	r7, r3
 800fa7c:	d01e      	beq.n	800fabc <__cxa_type_match+0x4c>
 800fa7e:	2300      	movs	r3, #0
 800fa80:	4c25      	ldr	r4, [pc, #148]	; (800fb18 <__cxa_type_match+0xa8>)
 800fa82:	9301      	str	r3, [sp, #4]
 800fa84:	6823      	ldr	r3, [r4, #0]
 800fa86:	4620      	mov	r0, r4
 800fa88:	689b      	ldr	r3, [r3, #8]
 800fa8a:	4798      	blx	r3
 800fa8c:	b180      	cbz	r0, 800fab0 <__cxa_type_match+0x40>
 800fa8e:	9b01      	ldr	r3, [sp, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	9301      	str	r3, [sp, #4]
 800fa94:	2602      	movs	r6, #2
 800fa96:	682b      	ldr	r3, [r5, #0]
 800fa98:	4621      	mov	r1, r4
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	691c      	ldr	r4, [r3, #16]
 800fa9e:	aa01      	add	r2, sp, #4
 800faa0:	2301      	movs	r3, #1
 800faa2:	47a0      	blx	r4
 800faa4:	b130      	cbz	r0, 800fab4 <__cxa_type_match+0x44>
 800faa6:	9b01      	ldr	r3, [sp, #4]
 800faa8:	603b      	str	r3, [r7, #0]
 800faaa:	4630      	mov	r0, r6
 800faac:	b003      	add	sp, #12
 800faae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fab0:	2601      	movs	r6, #1
 800fab2:	e7f0      	b.n	800fa96 <__cxa_type_match+0x26>
 800fab4:	4606      	mov	r6, r0
 800fab6:	4630      	mov	r0, r6
 800fab8:	b003      	add	sp, #12
 800faba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fabc:	7843      	ldrb	r3, [r0, #1]
 800fabe:	2b4e      	cmp	r3, #78	; 0x4e
 800fac0:	d1dd      	bne.n	800fa7e <__cxa_type_match+0xe>
 800fac2:	7883      	ldrb	r3, [r0, #2]
 800fac4:	2b55      	cmp	r3, #85	; 0x55
 800fac6:	d1da      	bne.n	800fa7e <__cxa_type_match+0xe>
 800fac8:	78c3      	ldrb	r3, [r0, #3]
 800faca:	2b43      	cmp	r3, #67	; 0x43
 800facc:	d1d7      	bne.n	800fa7e <__cxa_type_match+0xe>
 800face:	7903      	ldrb	r3, [r0, #4]
 800fad0:	2b46      	cmp	r3, #70	; 0x46
 800fad2:	d015      	beq.n	800fb00 <__cxa_type_match+0x90>
 800fad4:	7903      	ldrb	r3, [r0, #4]
 800fad6:	2b43      	cmp	r3, #67	; 0x43
 800fad8:	d1d1      	bne.n	800fa7e <__cxa_type_match+0xe>
 800fada:	7943      	ldrb	r3, [r0, #5]
 800fadc:	2b2b      	cmp	r3, #43	; 0x2b
 800fade:	d1ce      	bne.n	800fa7e <__cxa_type_match+0xe>
 800fae0:	7983      	ldrb	r3, [r0, #6]
 800fae2:	2b2b      	cmp	r3, #43	; 0x2b
 800fae4:	d1cb      	bne.n	800fa7e <__cxa_type_match+0xe>
 800fae6:	79c3      	ldrb	r3, [r0, #7]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d8c8      	bhi.n	800fa7e <__cxa_type_match+0xe>
 800faec:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800faf0:	d002      	beq.n	800faf8 <__cxa_type_match+0x88>
 800faf2:	3058      	adds	r0, #88	; 0x58
 800faf4:	9001      	str	r0, [sp, #4]
 800faf6:	e7c5      	b.n	800fa84 <__cxa_type_match+0x14>
 800faf8:	4620      	mov	r0, r4
 800fafa:	f854 4c78 	ldr.w	r4, [r4, #-120]
 800fafe:	e7f9      	b.n	800faf4 <__cxa_type_match+0x84>
 800fb00:	7943      	ldrb	r3, [r0, #5]
 800fb02:	2b4f      	cmp	r3, #79	; 0x4f
 800fb04:	d1e6      	bne.n	800fad4 <__cxa_type_match+0x64>
 800fb06:	7983      	ldrb	r3, [r0, #6]
 800fb08:	2b52      	cmp	r3, #82	; 0x52
 800fb0a:	d1e3      	bne.n	800fad4 <__cxa_type_match+0x64>
 800fb0c:	79c3      	ldrb	r3, [r0, #7]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d1e0      	bne.n	800fad4 <__cxa_type_match+0x64>
 800fb12:	9301      	str	r3, [sp, #4]
 800fb14:	4c01      	ldr	r4, [pc, #4]	; (800fb1c <__cxa_type_match+0xac>)
 800fb16:	e7b5      	b.n	800fa84 <__cxa_type_match+0x14>
 800fb18:	0801bfcc 	.word	0x0801bfcc
 800fb1c:	0801bfc4 	.word	0x0801bfc4

0800fb20 <__cxa_begin_cleanup>:
 800fb20:	b510      	push	{r4, lr}
 800fb22:	4604      	mov	r4, r0
 800fb24:	f000 f86a 	bl	800fbfc <__cxa_get_globals>
 800fb28:	7823      	ldrb	r3, [r4, #0]
 800fb2a:	2b47      	cmp	r3, #71	; 0x47
 800fb2c:	f1a4 0220 	sub.w	r2, r4, #32
 800fb30:	d004      	beq.n	800fb3c <__cxa_begin_cleanup+0x1c>
 800fb32:	6883      	ldr	r3, [r0, #8]
 800fb34:	bb23      	cbnz	r3, 800fb80 <__cxa_begin_cleanup+0x60>
 800fb36:	6082      	str	r2, [r0, #8]
 800fb38:	2001      	movs	r0, #1
 800fb3a:	bd10      	pop	{r4, pc}
 800fb3c:	7863      	ldrb	r3, [r4, #1]
 800fb3e:	2b4e      	cmp	r3, #78	; 0x4e
 800fb40:	d1f7      	bne.n	800fb32 <__cxa_begin_cleanup+0x12>
 800fb42:	78a3      	ldrb	r3, [r4, #2]
 800fb44:	2b55      	cmp	r3, #85	; 0x55
 800fb46:	d1f4      	bne.n	800fb32 <__cxa_begin_cleanup+0x12>
 800fb48:	78e3      	ldrb	r3, [r4, #3]
 800fb4a:	2b43      	cmp	r3, #67	; 0x43
 800fb4c:	d1f1      	bne.n	800fb32 <__cxa_begin_cleanup+0x12>
 800fb4e:	7923      	ldrb	r3, [r4, #4]
 800fb50:	2b43      	cmp	r3, #67	; 0x43
 800fb52:	d1ee      	bne.n	800fb32 <__cxa_begin_cleanup+0x12>
 800fb54:	7963      	ldrb	r3, [r4, #5]
 800fb56:	2b2b      	cmp	r3, #43	; 0x2b
 800fb58:	d1eb      	bne.n	800fb32 <__cxa_begin_cleanup+0x12>
 800fb5a:	79a3      	ldrb	r3, [r4, #6]
 800fb5c:	2b2b      	cmp	r3, #43	; 0x2b
 800fb5e:	d1e8      	bne.n	800fb32 <__cxa_begin_cleanup+0x12>
 800fb60:	79e3      	ldrb	r3, [r4, #7]
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d8e5      	bhi.n	800fb32 <__cxa_begin_cleanup+0x12>
 800fb66:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb72:	d1e1      	bne.n	800fb38 <__cxa_begin_cleanup+0x18>
 800fb74:	6883      	ldr	r3, [r0, #8]
 800fb76:	f844 3c08 	str.w	r3, [r4, #-8]
 800fb7a:	6082      	str	r2, [r0, #8]
 800fb7c:	2001      	movs	r0, #1
 800fb7e:	bd10      	pop	{r4, pc}
 800fb80:	f000 fde6 	bl	8010750 <_ZSt9terminatev>

0800fb84 <__gnu_end_cleanup>:
 800fb84:	b508      	push	{r3, lr}
 800fb86:	f000 f839 	bl	800fbfc <__cxa_get_globals>
 800fb8a:	6883      	ldr	r3, [r0, #8]
 800fb8c:	b383      	cbz	r3, 800fbf0 <__gnu_end_cleanup+0x6c>
 800fb8e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fb92:	2a47      	cmp	r2, #71	; 0x47
 800fb94:	d004      	beq.n	800fba0 <__gnu_end_cleanup+0x1c>
 800fb96:	2200      	movs	r2, #0
 800fb98:	6082      	str	r2, [r0, #8]
 800fb9a:	f103 0020 	add.w	r0, r3, #32
 800fb9e:	bd08      	pop	{r3, pc}
 800fba0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fba4:	2a4e      	cmp	r2, #78	; 0x4e
 800fba6:	d1f6      	bne.n	800fb96 <__gnu_end_cleanup+0x12>
 800fba8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fbac:	2a55      	cmp	r2, #85	; 0x55
 800fbae:	d1f2      	bne.n	800fb96 <__gnu_end_cleanup+0x12>
 800fbb0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fbb4:	2a43      	cmp	r2, #67	; 0x43
 800fbb6:	d1ee      	bne.n	800fb96 <__gnu_end_cleanup+0x12>
 800fbb8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800fbbc:	2a43      	cmp	r2, #67	; 0x43
 800fbbe:	d1ea      	bne.n	800fb96 <__gnu_end_cleanup+0x12>
 800fbc0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800fbc4:	2a2b      	cmp	r2, #43	; 0x2b
 800fbc6:	d1e6      	bne.n	800fb96 <__gnu_end_cleanup+0x12>
 800fbc8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800fbcc:	2a2b      	cmp	r2, #43	; 0x2b
 800fbce:	d1e2      	bne.n	800fb96 <__gnu_end_cleanup+0x12>
 800fbd0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800fbd4:	2a01      	cmp	r2, #1
 800fbd6:	d8de      	bhi.n	800fb96 <__gnu_end_cleanup+0x12>
 800fbd8:	69da      	ldr	r2, [r3, #28]
 800fbda:	3a01      	subs	r2, #1
 800fbdc:	61da      	str	r2, [r3, #28]
 800fbde:	2a00      	cmp	r2, #0
 800fbe0:	d1db      	bne.n	800fb9a <__gnu_end_cleanup+0x16>
 800fbe2:	699a      	ldr	r2, [r3, #24]
 800fbe4:	6082      	str	r2, [r0, #8]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	619a      	str	r2, [r3, #24]
 800fbea:	f103 0020 	add.w	r0, r3, #32
 800fbee:	bd08      	pop	{r3, pc}
 800fbf0:	f000 fdae 	bl	8010750 <_ZSt9terminatev>

0800fbf4 <__cxa_get_globals_fast>:
 800fbf4:	4800      	ldr	r0, [pc, #0]	; (800fbf8 <__cxa_get_globals_fast+0x4>)
 800fbf6:	4770      	bx	lr
 800fbf8:	20001080 	.word	0x20001080

0800fbfc <__cxa_get_globals>:
 800fbfc:	4800      	ldr	r0, [pc, #0]	; (800fc00 <__cxa_get_globals+0x4>)
 800fbfe:	4770      	bx	lr
 800fc00:	20001080 	.word	0x20001080

0800fc04 <_ZL28read_encoded_value_with_basehjPKhPj>:
 800fc04:	2850      	cmp	r0, #80	; 0x50
 800fc06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc08:	d01c      	beq.n	800fc44 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 800fc0a:	f000 040f 	and.w	r4, r0, #15
 800fc0e:	2c0c      	cmp	r4, #12
 800fc10:	d856      	bhi.n	800fcc0 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 800fc12:	e8df f004 	tbb	[pc, r4]
 800fc16:	4107      	.short	0x4107
 800fc18:	551f0751 	.word	0x551f0751
 800fc1c:	27555555 	.word	0x27555555
 800fc20:	0723      	.short	0x0723
 800fc22:	1f          	.byte	0x1f
 800fc23:	00          	.byte	0x00
 800fc24:	4614      	mov	r4, r2
 800fc26:	f854 5b04 	ldr.w	r5, [r4], #4
 800fc2a:	b145      	cbz	r5, 800fc3e <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 800fc2c:	f000 0670 	and.w	r6, r0, #112	; 0x70
 800fc30:	2e10      	cmp	r6, #16
 800fc32:	bf08      	it	eq
 800fc34:	4611      	moveq	r1, r2
 800fc36:	440d      	add	r5, r1
 800fc38:	0602      	lsls	r2, r0, #24
 800fc3a:	bf48      	it	mi
 800fc3c:	682d      	ldrmi	r5, [r5, #0]
 800fc3e:	601d      	str	r5, [r3, #0]
 800fc40:	4620      	mov	r0, r4
 800fc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc44:	3203      	adds	r2, #3
 800fc46:	f022 0403 	bic.w	r4, r2, #3
 800fc4a:	f854 5b04 	ldr.w	r5, [r4], #4
 800fc4e:	601d      	str	r5, [r3, #0]
 800fc50:	4620      	mov	r0, r4
 800fc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc54:	4614      	mov	r4, r2
 800fc56:	f854 5b08 	ldr.w	r5, [r4], #8
 800fc5a:	e7e6      	b.n	800fc2a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800fc5c:	4614      	mov	r4, r2
 800fc5e:	f934 5b02 	ldrsh.w	r5, [r4], #2
 800fc62:	e7e2      	b.n	800fc2a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800fc64:	2500      	movs	r5, #0
 800fc66:	462f      	mov	r7, r5
 800fc68:	4614      	mov	r4, r2
 800fc6a:	f814 cb01 	ldrb.w	ip, [r4], #1
 800fc6e:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 800fc72:	40be      	lsls	r6, r7
 800fc74:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800fc78:	ea45 0506 	orr.w	r5, r5, r6
 800fc7c:	f107 0707 	add.w	r7, r7, #7
 800fc80:	d1f3      	bne.n	800fc6a <_ZL28read_encoded_value_with_basehjPKhPj+0x66>
 800fc82:	2f1f      	cmp	r7, #31
 800fc84:	d8d1      	bhi.n	800fc2a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800fc86:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800fc8a:	d0ce      	beq.n	800fc2a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800fc8c:	f04f 36ff 	mov.w	r6, #4294967295
 800fc90:	fa06 f707 	lsl.w	r7, r6, r7
 800fc94:	433d      	orrs	r5, r7
 800fc96:	e7c9      	b.n	800fc2c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800fc98:	2500      	movs	r5, #0
 800fc9a:	462f      	mov	r7, r5
 800fc9c:	4614      	mov	r4, r2
 800fc9e:	f814 cb01 	ldrb.w	ip, [r4], #1
 800fca2:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 800fca6:	40be      	lsls	r6, r7
 800fca8:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800fcac:	ea45 0506 	orr.w	r5, r5, r6
 800fcb0:	f107 0707 	add.w	r7, r7, #7
 800fcb4:	d1f3      	bne.n	800fc9e <_ZL28read_encoded_value_with_basehjPKhPj+0x9a>
 800fcb6:	e7b8      	b.n	800fc2a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800fcb8:	4614      	mov	r4, r2
 800fcba:	f834 5b02 	ldrh.w	r5, [r4], #2
 800fcbe:	e7b4      	b.n	800fc2a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800fcc0:	f002 fd4f 	bl	8012762 <abort>

0800fcc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 800fcc4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800fcc8:	2820      	cmp	r0, #32
 800fcca:	d011      	beq.n	800fcf0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 800fccc:	d90b      	bls.n	800fce6 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x22>
 800fcce:	2840      	cmp	r0, #64	; 0x40
 800fcd0:	d006      	beq.n	800fce0 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x1c>
 800fcd2:	2850      	cmp	r0, #80	; 0x50
 800fcd4:	d00a      	beq.n	800fcec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 800fcd6:	2830      	cmp	r0, #48	; 0x30
 800fcd8:	d10d      	bne.n	800fcf6 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 800fcda:	4608      	mov	r0, r1
 800fcdc:	f7f8 be02 	b.w	80088e4 <_Unwind_GetDataRelBase>
 800fce0:	4608      	mov	r0, r1
 800fce2:	f7f8 bdef 	b.w	80088c4 <_Unwind_GetRegionStart>
 800fce6:	b108      	cbz	r0, 800fcec <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 800fce8:	2810      	cmp	r0, #16
 800fcea:	d104      	bne.n	800fcf6 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 800fcec:	2000      	movs	r0, #0
 800fcee:	4770      	bx	lr
 800fcf0:	4608      	mov	r0, r1
 800fcf2:	f7f8 bdfb 	b.w	80088ec <_Unwind_GetTextRelBase>
 800fcf6:	b508      	push	{r3, lr}
 800fcf8:	f002 fd33 	bl	8012762 <abort>

0800fcfc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800fcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfe:	460c      	mov	r4, r1
 800fd00:	4615      	mov	r5, r2
 800fd02:	4607      	mov	r7, r0
 800fd04:	b108      	cbz	r0, 800fd0a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 800fd06:	f7f8 fddd 	bl	80088c4 <_Unwind_GetRegionStart>
 800fd0a:	6028      	str	r0, [r5, #0]
 800fd0c:	7826      	ldrb	r6, [r4, #0]
 800fd0e:	2eff      	cmp	r6, #255	; 0xff
 800fd10:	f104 0401 	add.w	r4, r4, #1
 800fd14:	d129      	bne.n	800fd6a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6e>
 800fd16:	6068      	str	r0, [r5, #4]
 800fd18:	7823      	ldrb	r3, [r4, #0]
 800fd1a:	752b      	strb	r3, [r5, #20]
 800fd1c:	2bff      	cmp	r3, #255	; 0xff
 800fd1e:	f104 0001 	add.w	r0, r4, #1
 800fd22:	d032      	beq.n	800fd8a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
 800fd24:	2310      	movs	r3, #16
 800fd26:	2400      	movs	r4, #0
 800fd28:	752b      	strb	r3, [r5, #20]
 800fd2a:	4622      	mov	r2, r4
 800fd2c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fd30:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800fd34:	4093      	lsls	r3, r2
 800fd36:	0609      	lsls	r1, r1, #24
 800fd38:	ea44 0403 	orr.w	r4, r4, r3
 800fd3c:	f102 0207 	add.w	r2, r2, #7
 800fd40:	d4f4      	bmi.n	800fd2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 800fd42:	4404      	add	r4, r0
 800fd44:	60ec      	str	r4, [r5, #12]
 800fd46:	7803      	ldrb	r3, [r0, #0]
 800fd48:	756b      	strb	r3, [r5, #21]
 800fd4a:	2400      	movs	r4, #0
 800fd4c:	3001      	adds	r0, #1
 800fd4e:	4622      	mov	r2, r4
 800fd50:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fd54:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800fd58:	4093      	lsls	r3, r2
 800fd5a:	431c      	orrs	r4, r3
 800fd5c:	060b      	lsls	r3, r1, #24
 800fd5e:	f102 0207 	add.w	r2, r2, #7
 800fd62:	d4f5      	bmi.n	800fd50 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 800fd64:	4404      	add	r4, r0
 800fd66:	612c      	str	r4, [r5, #16]
 800fd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd6a:	4639      	mov	r1, r7
 800fd6c:	4630      	mov	r0, r6
 800fd6e:	f7ff ffa9 	bl	800fcc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800fd72:	4622      	mov	r2, r4
 800fd74:	4601      	mov	r1, r0
 800fd76:	1d2b      	adds	r3, r5, #4
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f7ff ff43 	bl	800fc04 <_ZL28read_encoded_value_with_basehjPKhPj>
 800fd7e:	4604      	mov	r4, r0
 800fd80:	1c60      	adds	r0, r4, #1
 800fd82:	7823      	ldrb	r3, [r4, #0]
 800fd84:	752b      	strb	r3, [r5, #20]
 800fd86:	2bff      	cmp	r3, #255	; 0xff
 800fd88:	d1cc      	bne.n	800fd24 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x28>
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	60eb      	str	r3, [r5, #12]
 800fd8e:	e7da      	b.n	800fd46 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x4a>

0800fd90 <__gxx_personality_v0>:
 800fd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd94:	f000 0403 	and.w	r4, r0, #3
 800fd98:	b099      	sub	sp, #100	; 0x64
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	2c01      	cmp	r4, #1
 800fd9e:	4688      	mov	r8, r1
 800fda0:	4617      	mov	r7, r2
 800fda2:	930c      	str	r3, [sp, #48]	; 0x30
 800fda4:	f000 8096 	beq.w	800fed4 <__gxx_personality_v0+0x144>
 800fda8:	d30d      	bcc.n	800fdc6 <__gxx_personality_v0+0x36>
 800fdaa:	2c02      	cmp	r4, #2
 800fdac:	f040 825f 	bne.w	801026e <__gxx_personality_v0+0x4de>
 800fdb0:	4639      	mov	r1, r7
 800fdb2:	4640      	mov	r0, r8
 800fdb4:	f7f8 fd72 	bl	800889c <__gnu_unwind_frame>
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	f000 809b 	beq.w	800fef4 <__gxx_personality_v0+0x164>
 800fdbe:	2009      	movs	r0, #9
 800fdc0:	b019      	add	sp, #100	; 0x64
 800fdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdc6:	0702      	lsls	r2, r0, #28
 800fdc8:	d4f2      	bmi.n	800fdb0 <__gxx_personality_v0+0x20>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	9304      	str	r3, [sp, #16]
 800fdce:	aa18      	add	r2, sp, #96	; 0x60
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	f842 8d2c 	str.w	r8, [r2, #-44]!
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	9200      	str	r2, [sp, #0]
 800fdda:	4638      	mov	r0, r7
 800fddc:	220c      	movs	r2, #12
 800fdde:	f7f7 ffed 	bl	8007dbc <_Unwind_VRS_Set>
 800fde2:	4638      	mov	r0, r7
 800fde4:	f7f8 fd74 	bl	80088d0 <_Unwind_GetLanguageSpecificData>
 800fde8:	9005      	str	r0, [sp, #20]
 800fdea:	2800      	cmp	r0, #0
 800fdec:	d0e0      	beq.n	800fdb0 <__gxx_personality_v0+0x20>
 800fdee:	ab12      	add	r3, sp, #72	; 0x48
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	9905      	ldr	r1, [sp, #20]
 800fdf4:	9306      	str	r3, [sp, #24]
 800fdf6:	4638      	mov	r0, r7
 800fdf8:	f7ff ff80 	bl	800fcfc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800fdfc:	4605      	mov	r5, r0
 800fdfe:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800fe02:	28ff      	cmp	r0, #255	; 0xff
 800fe04:	f000 80e5 	beq.w	800ffd2 <__gxx_personality_v0+0x242>
 800fe08:	4639      	mov	r1, r7
 800fe0a:	f7ff ff5b 	bl	800fcc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800fe0e:	4604      	mov	r4, r0
 800fe10:	2300      	movs	r3, #0
 800fe12:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
 800fe16:	4619      	mov	r1, r3
 800fe18:	f8cd b000 	str.w	fp, [sp]
 800fe1c:	220f      	movs	r2, #15
 800fe1e:	4638      	mov	r0, r7
 800fe20:	9414      	str	r4, [sp, #80]	; 0x50
 800fe22:	f7f7 ffa9 	bl	8007d78 <_Unwind_VRS_Get>
 800fe26:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fe28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fe2a:	f026 0601 	bic.w	r6, r6, #1
 800fe2e:	429d      	cmp	r5, r3
 800fe30:	f106 36ff 	add.w	r6, r6, #4294967295
 800fe34:	f080 80d4 	bcs.w	800ffe0 <__gxx_personality_v0+0x250>
 800fe38:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 800fe3c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 800fe40:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 800fe44:	2cff      	cmp	r4, #255	; 0xff
 800fe46:	f04f 0100 	mov.w	r1, #0
 800fe4a:	d003      	beq.n	800fe54 <__gxx_personality_v0+0xc4>
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f7ff ff39 	bl	800fcc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800fe52:	4601      	mov	r1, r0
 800fe54:	462a      	mov	r2, r5
 800fe56:	4620      	mov	r0, r4
 800fe58:	4653      	mov	r3, sl
 800fe5a:	f7ff fed3 	bl	800fc04 <_ZL28read_encoded_value_with_basehjPKhPj>
 800fe5e:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 800fe62:	2cff      	cmp	r4, #255	; 0xff
 800fe64:	4605      	mov	r5, r0
 800fe66:	f04f 0100 	mov.w	r1, #0
 800fe6a:	d003      	beq.n	800fe74 <__gxx_personality_v0+0xe4>
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f7ff ff29 	bl	800fcc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800fe72:	4601      	mov	r1, r0
 800fe74:	462a      	mov	r2, r5
 800fe76:	4620      	mov	r0, r4
 800fe78:	464b      	mov	r3, r9
 800fe7a:	f7ff fec3 	bl	800fc04 <_ZL28read_encoded_value_with_basehjPKhPj>
 800fe7e:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 800fe82:	2cff      	cmp	r4, #255	; 0xff
 800fe84:	4605      	mov	r5, r0
 800fe86:	f04f 0100 	mov.w	r1, #0
 800fe8a:	d003      	beq.n	800fe94 <__gxx_personality_v0+0x104>
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f7ff ff19 	bl	800fcc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800fe92:	4601      	mov	r1, r0
 800fe94:	462a      	mov	r2, r5
 800fe96:	4620      	mov	r0, r4
 800fe98:	465b      	mov	r3, fp
 800fe9a:	f7ff feb3 	bl	800fc04 <_ZL28read_encoded_value_with_basehjPKhPj>
 800fe9e:	2400      	movs	r4, #0
 800fea0:	4605      	mov	r5, r0
 800fea2:	4621      	mov	r1, r4
 800fea4:	f815 2b01 	ldrb.w	r2, [r5], #1
 800fea8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800feac:	408b      	lsls	r3, r1
 800feae:	431c      	orrs	r4, r3
 800feb0:	0613      	lsls	r3, r2, #24
 800feb2:	f101 0107 	add.w	r1, r1, #7
 800feb6:	d4f5      	bmi.n	800fea4 <__gxx_personality_v0+0x114>
 800feb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800feba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800febc:	4413      	add	r3, r2
 800febe:	42b3      	cmp	r3, r6
 800fec0:	d91f      	bls.n	800ff02 <__gxx_personality_v0+0x172>
 800fec2:	9b04      	ldr	r3, [sp, #16]
 800fec4:	07db      	lsls	r3, r3, #31
 800fec6:	f100 8091 	bmi.w	800ffec <__gxx_personality_v0+0x25c>
 800feca:	9b04      	ldr	r3, [sp, #16]
 800fecc:	071c      	lsls	r4, r3, #28
 800fece:	d515      	bpl.n	800fefc <__gxx_personality_v0+0x16c>
 800fed0:	f000 fc3e 	bl	8010750 <_ZSt9terminatev>
 800fed4:	f010 0408 	ands.w	r4, r0, #8
 800fed8:	d01c      	beq.n	800ff14 <__gxx_personality_v0+0x184>
 800feda:	aa18      	add	r2, sp, #96	; 0x60
 800fedc:	f044 0402 	orr.w	r4, r4, #2
 800fee0:	f842 1d2c 	str.w	r1, [r2, #-44]!
 800fee4:	4638      	mov	r0, r7
 800fee6:	9200      	str	r2, [sp, #0]
 800fee8:	4619      	mov	r1, r3
 800feea:	220c      	movs	r2, #12
 800feec:	9404      	str	r4, [sp, #16]
 800feee:	f7f7 ff65 	bl	8007dbc <_Unwind_VRS_Set>
 800fef2:	e776      	b.n	800fde2 <__gxx_personality_v0+0x52>
 800fef4:	2008      	movs	r0, #8
 800fef6:	b019      	add	sp, #100	; 0x64
 800fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefc:	4640      	mov	r0, r8
 800fefe:	f001 fa51 	bl	80113a4 <__cxa_call_terminate>
 800ff02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff04:	4413      	add	r3, r2
 800ff06:	42b3      	cmp	r3, r6
 800ff08:	f200 8088 	bhi.w	801001c <__gxx_personality_v0+0x28c>
 800ff0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff0e:	42ab      	cmp	r3, r5
 800ff10:	d896      	bhi.n	800fe40 <__gxx_personality_v0+0xb0>
 800ff12:	e7d6      	b.n	800fec2 <__gxx_personality_v0+0x132>
 800ff14:	ab12      	add	r3, sp, #72	; 0x48
 800ff16:	9300      	str	r3, [sp, #0]
 800ff18:	9306      	str	r3, [sp, #24]
 800ff1a:	220d      	movs	r2, #13
 800ff1c:	4623      	mov	r3, r4
 800ff1e:	4621      	mov	r1, r4
 800ff20:	4638      	mov	r0, r7
 800ff22:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800ff26:	f7f7 ff27 	bl	8007d78 <_Unwind_VRS_Get>
 800ff2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ff2c:	429d      	cmp	r5, r3
 800ff2e:	d002      	beq.n	800ff36 <__gxx_personality_v0+0x1a6>
 800ff30:	2302      	movs	r3, #2
 800ff32:	9304      	str	r3, [sp, #16]
 800ff34:	e74b      	b.n	800fdce <__gxx_personality_v0+0x3e>
 800ff36:	aa18      	add	r2, sp, #96	; 0x60
 800ff38:	4623      	mov	r3, r4
 800ff3a:	f842 8d2c 	str.w	r8, [r2, #-44]!
 800ff3e:	4621      	mov	r1, r4
 800ff40:	9200      	str	r2, [sp, #0]
 800ff42:	4638      	mov	r0, r7
 800ff44:	220c      	movs	r2, #12
 800ff46:	f7f7 ff39 	bl	8007dbc <_Unwind_VRS_Set>
 800ff4a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800ff4e:	9303      	str	r3, [sp, #12]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d0d3      	beq.n	800fefc <__gxx_personality_v0+0x16c>
 800ff54:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800ff58:	461a      	mov	r2, r3
 800ff5a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800ff5e:	9305      	str	r3, [sp, #20]
 800ff60:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 800ff64:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 800ff68:	4613      	mov	r3, r2
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	461c      	mov	r4, r3
 800ff6e:	f2c0 8127 	blt.w	80101c0 <__gxx_personality_v0+0x430>
 800ff72:	2503      	movs	r5, #3
 800ff74:	a918      	add	r1, sp, #96	; 0x60
 800ff76:	2300      	movs	r3, #0
 800ff78:	f841 8d28 	str.w	r8, [r1, #-40]!
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	9100      	str	r1, [sp, #0]
 800ff80:	4638      	mov	r0, r7
 800ff82:	4619      	mov	r1, r3
 800ff84:	f7f7 ff1a 	bl	8007dbc <_Unwind_VRS_Set>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	f8cd a000 	str.w	sl, [sp]
 800ff92:	4638      	mov	r0, r7
 800ff94:	940f      	str	r4, [sp, #60]	; 0x3c
 800ff96:	f7f7 ff11 	bl	8007dbc <_Unwind_VRS_Set>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	220f      	movs	r2, #15
 800ffa0:	f8cd 9000 	str.w	r9, [sp]
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	f7f7 fee7 	bl	8007d78 <_Unwind_VRS_Get>
 800ffaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffac:	9a03      	ldr	r2, [sp, #12]
 800ffae:	f8cd 9000 	str.w	r9, [sp]
 800ffb2:	f003 0401 	and.w	r4, r3, #1
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	4314      	orrs	r4, r2
 800ffba:	4638      	mov	r0, r7
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	220f      	movs	r2, #15
 800ffc0:	9410      	str	r4, [sp, #64]	; 0x40
 800ffc2:	f7f7 fefb 	bl	8007dbc <_Unwind_VRS_Set>
 800ffc6:	2d02      	cmp	r5, #2
 800ffc8:	d005      	beq.n	800ffd6 <__gxx_personality_v0+0x246>
 800ffca:	2007      	movs	r0, #7
 800ffcc:	b019      	add	sp, #100	; 0x64
 800ffce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd2:	2400      	movs	r4, #0
 800ffd4:	e71c      	b.n	800fe10 <__gxx_personality_v0+0x80>
 800ffd6:	4640      	mov	r0, r8
 800ffd8:	f7ff fda2 	bl	800fb20 <__cxa_begin_cleanup>
 800ffdc:	2007      	movs	r0, #7
 800ffde:	e6ef      	b.n	800fdc0 <__gxx_personality_v0+0x30>
 800ffe0:	9b04      	ldr	r3, [sp, #16]
 800ffe2:	07d9      	lsls	r1, r3, #31
 800ffe4:	f57f af71 	bpl.w	800feca <__gxx_personality_v0+0x13a>
 800ffe8:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 800ffec:	2400      	movs	r4, #0
 800ffee:	9403      	str	r4, [sp, #12]
 800fff0:	2300      	movs	r3, #0
 800fff2:	4619      	mov	r1, r3
 800fff4:	220d      	movs	r2, #13
 800fff6:	f8cd 9000 	str.w	r9, [sp]
 800fffa:	4638      	mov	r0, r7
 800fffc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fffe:	f7f7 febb 	bl	8007d78 <_Unwind_VRS_Get>
 8010002:	9a05      	ldr	r2, [sp, #20]
 8010004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010006:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 801000a:	9a03      	ldr	r2, [sp, #12]
 801000c:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 8010010:	e9c8 5409 	strd	r5, r4, [r8, #36]	; 0x24
 8010014:	f8c8 3020 	str.w	r3, [r8, #32]
 8010018:	2006      	movs	r0, #6
 801001a:	e6d1      	b.n	800fdc0 <__gxx_personality_v0+0x30>
 801001c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801001e:	2b00      	cmp	r3, #0
 8010020:	f43f aec6 	beq.w	800fdb0 <__gxx_personality_v0+0x20>
 8010024:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010026:	189a      	adds	r2, r3, r2
 8010028:	9203      	str	r2, [sp, #12]
 801002a:	2c00      	cmp	r4, #0
 801002c:	f000 80f0 	beq.w	8010210 <__gxx_personality_v0+0x480>
 8010030:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010032:	3c01      	subs	r4, #1
 8010034:	4423      	add	r3, r4
 8010036:	2a00      	cmp	r2, #0
 8010038:	f43f aeba 	beq.w	800fdb0 <__gxx_personality_v0+0x20>
 801003c:	2b00      	cmp	r3, #0
 801003e:	f000 80f8 	beq.w	8010232 <__gxx_personality_v0+0x4a2>
 8010042:	9a04      	ldr	r2, [sp, #16]
 8010044:	f012 0208 	ands.w	r2, r2, #8
 8010048:	9209      	str	r2, [sp, #36]	; 0x24
 801004a:	f000 8103 	beq.w	8010254 <__gxx_personality_v0+0x4c4>
 801004e:	2147      	movs	r1, #71	; 0x47
 8010050:	224e      	movs	r2, #78	; 0x4e
 8010052:	f888 1000 	strb.w	r1, [r8]
 8010056:	f888 2001 	strb.w	r2, [r8, #1]
 801005a:	2155      	movs	r1, #85	; 0x55
 801005c:	2243      	movs	r2, #67	; 0x43
 801005e:	f888 1002 	strb.w	r1, [r8, #2]
 8010062:	f888 2003 	strb.w	r2, [r8, #3]
 8010066:	2146      	movs	r1, #70	; 0x46
 8010068:	224f      	movs	r2, #79	; 0x4f
 801006a:	f888 1004 	strb.w	r1, [r8, #4]
 801006e:	f888 2005 	strb.w	r2, [r8, #5]
 8010072:	2152      	movs	r1, #82	; 0x52
 8010074:	2200      	movs	r2, #0
 8010076:	f888 1006 	strb.w	r1, [r8, #6]
 801007a:	f888 2007 	strb.w	r2, [r8, #7]
 801007e:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
 8010082:	2200      	movs	r2, #0
 8010084:	9207      	str	r2, [sp, #28]
 8010086:	f8cd 9020 	str.w	r9, [sp, #32]
 801008a:	2400      	movs	r4, #0
 801008c:	4621      	mov	r1, r4
 801008e:	e000      	b.n	8010092 <__gxx_personality_v0+0x302>
 8010090:	462b      	mov	r3, r5
 8010092:	461d      	mov	r5, r3
 8010094:	f815 0b01 	ldrb.w	r0, [r5], #1
 8010098:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 801009c:	408a      	lsls	r2, r1
 801009e:	0606      	lsls	r6, r0, #24
 80100a0:	ea44 0402 	orr.w	r4, r4, r2
 80100a4:	f101 0107 	add.w	r1, r1, #7
 80100a8:	d4f2      	bmi.n	8010090 <__gxx_personality_v0+0x300>
 80100aa:	291f      	cmp	r1, #31
 80100ac:	d805      	bhi.n	80100ba <__gxx_personality_v0+0x32a>
 80100ae:	0640      	lsls	r0, r0, #25
 80100b0:	d503      	bpl.n	80100ba <__gxx_personality_v0+0x32a>
 80100b2:	2201      	movs	r2, #1
 80100b4:	408a      	lsls	r2, r1
 80100b6:	4252      	negs	r2, r2
 80100b8:	4314      	orrs	r4, r2
 80100ba:	2600      	movs	r6, #0
 80100bc:	4631      	mov	r1, r6
 80100be:	46a1      	mov	r9, r4
 80100c0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80100c4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80100c8:	408a      	lsls	r2, r1
 80100ca:	4316      	orrs	r6, r2
 80100cc:	0602      	lsls	r2, r0, #24
 80100ce:	f101 0107 	add.w	r1, r1, #7
 80100d2:	d4f5      	bmi.n	80100c0 <__gxx_personality_v0+0x330>
 80100d4:	291f      	cmp	r1, #31
 80100d6:	d805      	bhi.n	80100e4 <__gxx_personality_v0+0x354>
 80100d8:	0647      	lsls	r7, r0, #25
 80100da:	d503      	bpl.n	80100e4 <__gxx_personality_v0+0x354>
 80100dc:	2301      	movs	r3, #1
 80100de:	408b      	lsls	r3, r1
 80100e0:	425b      	negs	r3, r3
 80100e2:	431e      	orrs	r6, r3
 80100e4:	2c00      	cmp	r4, #0
 80100e6:	d04c      	beq.n	8010182 <__gxx_personality_v0+0x3f2>
 80100e8:	dc4e      	bgt.n	8010188 <__gxx_personality_v0+0x3f8>
 80100ea:	f104 0a01 	add.w	sl, r4, #1
 80100ee:	ebca 728a 	rsb	r2, sl, sl, lsl #30
 80100f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100f4:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 80100f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80100fc:	f1b8 0f00 	cmp.w	r8, #0
 8010100:	d001      	beq.n	8010106 <__gxx_personality_v0+0x376>
 8010102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010104:	b12b      	cbz	r3, 8010112 <__gxx_personality_v0+0x382>
 8010106:	b351      	cbz	r1, 801015e <__gxx_personality_v0+0x3ce>
 8010108:	2e00      	cmp	r6, #0
 801010a:	f000 808b 	beq.w	8010224 <__gxx_personality_v0+0x494>
 801010e:	19ab      	adds	r3, r5, r6
 8010110:	e7bb      	b.n	801008a <__gxx_personality_v0+0x2fa>
 8010112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010114:	9311      	str	r3, [sp, #68]	; 0x44
 8010116:	b929      	cbnz	r1, 8010124 <__gxx_personality_v0+0x394>
 8010118:	e091      	b.n	801023e <__gxx_personality_v0+0x4ae>
 801011a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 801011e:	2900      	cmp	r1, #0
 8010120:	f000 808d 	beq.w	801023e <__gxx_personality_v0+0x4ae>
 8010124:	4439      	add	r1, r7
 8010126:	465b      	mov	r3, fp
 8010128:	2200      	movs	r2, #0
 801012a:	4640      	mov	r0, r8
 801012c:	f7ff fca0 	bl	800fa70 <__cxa_type_match>
 8010130:	2800      	cmp	r0, #0
 8010132:	d0f2      	beq.n	801011a <__gxx_personality_v0+0x38a>
 8010134:	e7e8      	b.n	8010108 <__gxx_personality_v0+0x378>
 8010136:	00e2      	lsls	r2, r4, #3
 8010138:	4252      	negs	r2, r2
 801013a:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	; 0x50
 801013e:	441a      	add	r2, r3
 8010140:	9b08      	ldr	r3, [sp, #32]
 8010142:	f7ff fd5f 	bl	800fc04 <_ZL28read_encoded_value_with_basehjPKhPj>
 8010146:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010148:	b149      	cbz	r1, 801015e <__gxx_personality_v0+0x3ce>
 801014a:	f1b8 0f00 	cmp.w	r8, #0
 801014e:	d0db      	beq.n	8010108 <__gxx_personality_v0+0x378>
 8010150:	ab0c      	add	r3, sp, #48	; 0x30
 8010152:	2200      	movs	r2, #0
 8010154:	4640      	mov	r0, r8
 8010156:	f7ff fc8b 	bl	800fa70 <__cxa_type_match>
 801015a:	2800      	cmp	r0, #0
 801015c:	d0d4      	beq.n	8010108 <__gxx_personality_v0+0x378>
 801015e:	9b04      	ldr	r3, [sp, #16]
 8010160:	07d8      	lsls	r0, r3, #31
 8010162:	464a      	mov	r2, r9
 8010164:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 8010168:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801016c:	f53f af40 	bmi.w	800fff0 <__gxx_personality_v0+0x260>
 8010170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010172:	2b00      	cmp	r3, #0
 8010174:	f43f aef8 	beq.w	800ff68 <__gxx_personality_v0+0x1d8>
 8010178:	2c00      	cmp	r4, #0
 801017a:	f6bf aefa 	bge.w	800ff72 <__gxx_personality_v0+0x1e2>
 801017e:	f000 faf5 	bl	801076c <_ZSt10unexpectedv>
 8010182:	2301      	movs	r3, #1
 8010184:	9307      	str	r3, [sp, #28]
 8010186:	e7bf      	b.n	8010108 <__gxx_personality_v0+0x378>
 8010188:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801018c:	28ff      	cmp	r0, #255	; 0xff
 801018e:	d03b      	beq.n	8010208 <__gxx_personality_v0+0x478>
 8010190:	f000 0307 	and.w	r3, r0, #7
 8010194:	2b04      	cmp	r3, #4
 8010196:	d86a      	bhi.n	801026e <__gxx_personality_v0+0x4de>
 8010198:	a201      	add	r2, pc, #4	; (adr r2, 80101a0 <__gxx_personality_v0+0x410>)
 801019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019e:	bf00      	nop
 80101a0:	080101bb 	.word	0x080101bb
 80101a4:	0801026f 	.word	0x0801026f
 80101a8:	080101b5 	.word	0x080101b5
 80101ac:	080101bb 	.word	0x080101bb
 80101b0:	08010137 	.word	0x08010137
 80101b4:	0062      	lsls	r2, r4, #1
 80101b6:	4252      	negs	r2, r2
 80101b8:	e7bf      	b.n	801013a <__gxx_personality_v0+0x3aa>
 80101ba:	00a2      	lsls	r2, r4, #2
 80101bc:	4252      	negs	r2, r2
 80101be:	e7bc      	b.n	801013a <__gxx_personality_v0+0x3aa>
 80101c0:	3301      	adds	r3, #1
 80101c2:	461d      	mov	r5, r3
 80101c4:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80101c8:	4638      	mov	r0, r7
 80101ca:	f7ff fd97 	bl	800fcfc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80101ce:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80101d2:	28ff      	cmp	r0, #255	; 0xff
 80101d4:	d01a      	beq.n	801020c <__gxx_personality_v0+0x47c>
 80101d6:	4639      	mov	r1, r7
 80101d8:	f7ff fd74 	bl	800fcc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 80101dc:	ebc5 7285 	rsb	r2, r5, r5, lsl #30
 80101e0:	0092      	lsls	r2, r2, #2
 80101e2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80101e4:	9014      	str	r0, [sp, #80]	; 0x50
 80101e6:	58ab      	ldr	r3, [r5, r2]
 80101e8:	4415      	add	r5, r2
 80101ea:	b133      	cbz	r3, 80101fa <__gxx_personality_v0+0x46a>
 80101ec:	462a      	mov	r2, r5
 80101ee:	2300      	movs	r3, #0
 80101f0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80101f4:	3301      	adds	r3, #1
 80101f6:	2900      	cmp	r1, #0
 80101f8:	d1fa      	bne.n	80101f0 <__gxx_personality_v0+0x460>
 80101fa:	2204      	movs	r2, #4
 80101fc:	e9c8 250c 	strd	r2, r5, [r8, #48]	; 0x30
 8010200:	e9c8 300a 	strd	r3, r0, [r8, #40]	; 0x28
 8010204:	2503      	movs	r5, #3
 8010206:	e6b5      	b.n	800ff74 <__gxx_personality_v0+0x1e4>
 8010208:	2200      	movs	r2, #0
 801020a:	e796      	b.n	801013a <__gxx_personality_v0+0x3aa>
 801020c:	2000      	movs	r0, #0
 801020e:	e7e5      	b.n	80101dc <__gxx_personality_v0+0x44c>
 8010210:	9b03      	ldr	r3, [sp, #12]
 8010212:	2b00      	cmp	r3, #0
 8010214:	f43f adcc 	beq.w	800fdb0 <__gxx_personality_v0+0x20>
 8010218:	9b04      	ldr	r3, [sp, #16]
 801021a:	07da      	lsls	r2, r3, #31
 801021c:	f53f adc8 	bmi.w	800fdb0 <__gxx_personality_v0+0x20>
 8010220:	2502      	movs	r5, #2
 8010222:	e6a7      	b.n	800ff74 <__gxx_personality_v0+0x1e4>
 8010224:	e9dd 3907 	ldrd	r3, r9, [sp, #28]
 8010228:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 801022c:	2b00      	cmp	r3, #0
 801022e:	f43f adbf 	beq.w	800fdb0 <__gxx_personality_v0+0x20>
 8010232:	9b04      	ldr	r3, [sp, #16]
 8010234:	07dd      	lsls	r5, r3, #31
 8010236:	f53f adbb 	bmi.w	800fdb0 <__gxx_personality_v0+0x20>
 801023a:	2400      	movs	r4, #0
 801023c:	e7f0      	b.n	8010220 <__gxx_personality_v0+0x490>
 801023e:	9b04      	ldr	r3, [sp, #16]
 8010240:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010242:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010246:	07de      	lsls	r6, r3, #31
 8010248:	4655      	mov	r5, sl
 801024a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801024e:	f53f aecf 	bmi.w	800fff0 <__gxx_personality_v0+0x260>
 8010252:	e7b7      	b.n	80101c4 <__gxx_personality_v0+0x434>
 8010254:	f898 2007 	ldrb.w	r2, [r8, #7]
 8010258:	2a01      	cmp	r2, #1
 801025a:	bf0c      	ite	eq
 801025c:	f858 2c20 	ldreq.w	r2, [r8, #-32]
 8010260:	f108 0258 	addne.w	r2, r8, #88	; 0x58
 8010264:	920c      	str	r2, [sp, #48]	; 0x30
 8010266:	e70a      	b.n	801007e <__gxx_personality_v0+0x2ee>
 8010268:	f000 f8a8 	bl	80103bc <__cxa_begin_catch>
 801026c:	e630      	b.n	800fed0 <__gxx_personality_v0+0x140>
 801026e:	f002 fa78 	bl	8012762 <abort>
 8010272:	bf00      	nop

08010274 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8010274:	2801      	cmp	r0, #1
 8010276:	b510      	push	{r4, lr}
 8010278:	d81a      	bhi.n	80102b0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 801027a:	f3bf 8f5b 	dmb	ish
 801027e:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8010282:	e853 2f00 	ldrex	r2, [r3]
 8010286:	3a01      	subs	r2, #1
 8010288:	e843 2000 	strex	r0, r2, [r3]
 801028c:	2800      	cmp	r0, #0
 801028e:	d1f8      	bne.n	8010282 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8010290:	f3bf 8f5b 	dmb	ish
 8010294:	b95a      	cbnz	r2, 80102ae <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8010296:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 801029a:	f101 0458 	add.w	r4, r1, #88	; 0x58
 801029e:	b10b      	cbz	r3, 80102a4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 80102a0:	4620      	mov	r0, r4
 80102a2:	4798      	blx	r3
 80102a4:	4620      	mov	r0, r4
 80102a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102aa:	f000 bb0b 	b.w	80108c4 <__cxa_free_exception>
 80102ae:	bd10      	pop	{r4, pc}
 80102b0:	f851 0c14 	ldr.w	r0, [r1, #-20]
 80102b4:	f000 fa38 	bl	8010728 <_ZN10__cxxabiv111__terminateEPFvvE>

080102b8 <__cxa_init_primary_exception>:
 80102b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ba:	2500      	movs	r5, #0
 80102bc:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 80102c0:	f840 5c80 	str.w	r5, [r0, #-128]
 80102c4:	4604      	mov	r4, r0
 80102c6:	f000 fa63 	bl	8010790 <_ZSt14get_unexpectedv>
 80102ca:	f844 0c70 	str.w	r0, [r4, #-112]
 80102ce:	f000 fa57 	bl	8010780 <_ZSt13get_terminatev>
 80102d2:	2347      	movs	r3, #71	; 0x47
 80102d4:	2243      	movs	r2, #67	; 0x43
 80102d6:	274e      	movs	r7, #78	; 0x4e
 80102d8:	2655      	movs	r6, #85	; 0x55
 80102da:	490c      	ldr	r1, [pc, #48]	; (801030c <__cxa_init_primary_exception+0x54>)
 80102dc:	f804 3c58 	strb.w	r3, [r4, #-88]
 80102e0:	232b      	movs	r3, #43	; 0x2b
 80102e2:	f804 5c51 	strb.w	r5, [r4, #-81]
 80102e6:	f804 7c57 	strb.w	r7, [r4, #-87]
 80102ea:	f804 6c56 	strb.w	r6, [r4, #-86]
 80102ee:	f844 1c50 	str.w	r1, [r4, #-80]
 80102f2:	f804 2c55 	strb.w	r2, [r4, #-85]
 80102f6:	f804 2c54 	strb.w	r2, [r4, #-84]
 80102fa:	f804 3c53 	strb.w	r3, [r4, #-83]
 80102fe:	f804 3c52 	strb.w	r3, [r4, #-82]
 8010302:	f844 0c6c 	str.w	r0, [r4, #-108]
 8010306:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 801030a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030c:	08010275 	.word	0x08010275

08010310 <__cxa_throw>:
 8010310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010312:	4605      	mov	r5, r0
 8010314:	460e      	mov	r6, r1
 8010316:	4617      	mov	r7, r2
 8010318:	f7ff fc70 	bl	800fbfc <__cxa_get_globals>
 801031c:	6843      	ldr	r3, [r0, #4]
 801031e:	4604      	mov	r4, r0
 8010320:	3301      	adds	r3, #1
 8010322:	463a      	mov	r2, r7
 8010324:	4631      	mov	r1, r6
 8010326:	6063      	str	r3, [r4, #4]
 8010328:	4628      	mov	r0, r5
 801032a:	f7ff ffc5 	bl	80102b8 <__cxa_init_primary_exception>
 801032e:	4604      	mov	r4, r0
 8010330:	2301      	movs	r3, #1
 8010332:	f844 3b28 	str.w	r3, [r4], #40
 8010336:	4620      	mov	r0, r4
 8010338:	f7f8 f8c8 	bl	80084cc <_Unwind_RaiseException>
 801033c:	4620      	mov	r0, r4
 801033e:	f000 f83d 	bl	80103bc <__cxa_begin_catch>
 8010342:	f000 fa05 	bl	8010750 <_ZSt9terminatev>
 8010346:	bf00      	nop

08010348 <__cxa_rethrow>:
 8010348:	b510      	push	{r4, lr}
 801034a:	f7ff fc57 	bl	800fbfc <__cxa_get_globals>
 801034e:	e9d0 4200 	ldrd	r4, r2, [r0]
 8010352:	3201      	adds	r2, #1
 8010354:	6042      	str	r2, [r0, #4]
 8010356:	b164      	cbz	r4, 8010372 <__cxa_rethrow+0x2a>
 8010358:	f894 2020 	ldrb.w	r2, [r4, #32]
 801035c:	2a47      	cmp	r2, #71	; 0x47
 801035e:	d00a      	beq.n	8010376 <__cxa_rethrow+0x2e>
 8010360:	2200      	movs	r2, #0
 8010362:	6002      	str	r2, [r0, #0]
 8010364:	3420      	adds	r4, #32
 8010366:	4620      	mov	r0, r4
 8010368:	f7f8 f8d4 	bl	8008514 <_Unwind_Resume_or_Rethrow>
 801036c:	4620      	mov	r0, r4
 801036e:	f000 f825 	bl	80103bc <__cxa_begin_catch>
 8010372:	f000 f9ed 	bl	8010750 <_ZSt9terminatev>
 8010376:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 801037a:	2a4e      	cmp	r2, #78	; 0x4e
 801037c:	d1f0      	bne.n	8010360 <__cxa_rethrow+0x18>
 801037e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8010382:	2a55      	cmp	r2, #85	; 0x55
 8010384:	d1ec      	bne.n	8010360 <__cxa_rethrow+0x18>
 8010386:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 801038a:	2a43      	cmp	r2, #67	; 0x43
 801038c:	d1e8      	bne.n	8010360 <__cxa_rethrow+0x18>
 801038e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8010392:	2a43      	cmp	r2, #67	; 0x43
 8010394:	d1e4      	bne.n	8010360 <__cxa_rethrow+0x18>
 8010396:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801039a:	2a2b      	cmp	r2, #43	; 0x2b
 801039c:	d1e0      	bne.n	8010360 <__cxa_rethrow+0x18>
 801039e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80103a2:	2a2b      	cmp	r2, #43	; 0x2b
 80103a4:	d1dc      	bne.n	8010360 <__cxa_rethrow+0x18>
 80103a6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80103aa:	2a01      	cmp	r2, #1
 80103ac:	d8d8      	bhi.n	8010360 <__cxa_rethrow+0x18>
 80103ae:	6962      	ldr	r2, [r4, #20]
 80103b0:	4252      	negs	r2, r2
 80103b2:	6162      	str	r2, [r4, #20]
 80103b4:	e7d6      	b.n	8010364 <__cxa_rethrow+0x1c>
 80103b6:	bf00      	nop

080103b8 <__cxa_get_exception_ptr>:
 80103b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80103ba:	4770      	bx	lr

080103bc <__cxa_begin_catch>:
 80103bc:	b538      	push	{r3, r4, r5, lr}
 80103be:	4604      	mov	r4, r0
 80103c0:	f7ff fc1c 	bl	800fbfc <__cxa_get_globals>
 80103c4:	7822      	ldrb	r2, [r4, #0]
 80103c6:	6803      	ldr	r3, [r0, #0]
 80103c8:	2a47      	cmp	r2, #71	; 0x47
 80103ca:	f1a4 0120 	sub.w	r1, r4, #32
 80103ce:	d004      	beq.n	80103da <__cxa_begin_catch+0x1e>
 80103d0:	bb8b      	cbnz	r3, 8010436 <__cxa_begin_catch+0x7a>
 80103d2:	461c      	mov	r4, r3
 80103d4:	6001      	str	r1, [r0, #0]
 80103d6:	4620      	mov	r0, r4
 80103d8:	bd38      	pop	{r3, r4, r5, pc}
 80103da:	7862      	ldrb	r2, [r4, #1]
 80103dc:	2a4e      	cmp	r2, #78	; 0x4e
 80103de:	d1f7      	bne.n	80103d0 <__cxa_begin_catch+0x14>
 80103e0:	78a2      	ldrb	r2, [r4, #2]
 80103e2:	2a55      	cmp	r2, #85	; 0x55
 80103e4:	d1f4      	bne.n	80103d0 <__cxa_begin_catch+0x14>
 80103e6:	78e2      	ldrb	r2, [r4, #3]
 80103e8:	2a43      	cmp	r2, #67	; 0x43
 80103ea:	d1f1      	bne.n	80103d0 <__cxa_begin_catch+0x14>
 80103ec:	7922      	ldrb	r2, [r4, #4]
 80103ee:	2a43      	cmp	r2, #67	; 0x43
 80103f0:	d1ee      	bne.n	80103d0 <__cxa_begin_catch+0x14>
 80103f2:	7962      	ldrb	r2, [r4, #5]
 80103f4:	2a2b      	cmp	r2, #43	; 0x2b
 80103f6:	d1eb      	bne.n	80103d0 <__cxa_begin_catch+0x14>
 80103f8:	79a2      	ldrb	r2, [r4, #6]
 80103fa:	2a2b      	cmp	r2, #43	; 0x2b
 80103fc:	d1e8      	bne.n	80103d0 <__cxa_begin_catch+0x14>
 80103fe:	79e2      	ldrb	r2, [r4, #7]
 8010400:	2a01      	cmp	r2, #1
 8010402:	d8e5      	bhi.n	80103d0 <__cxa_begin_catch+0x14>
 8010404:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8010408:	2a00      	cmp	r2, #0
 801040a:	db11      	blt.n	8010430 <__cxa_begin_catch+0x74>
 801040c:	3201      	adds	r2, #1
 801040e:	6845      	ldr	r5, [r0, #4]
 8010410:	f844 2c0c 	str.w	r2, [r4, #-12]
 8010414:	428b      	cmp	r3, r1
 8010416:	f105 35ff 	add.w	r5, r5, #4294967295
 801041a:	6045      	str	r5, [r0, #4]
 801041c:	bf1c      	itt	ne
 801041e:	f844 3c10 	strne.w	r3, [r4, #-16]
 8010422:	6001      	strne	r1, [r0, #0]
 8010424:	4620      	mov	r0, r4
 8010426:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8010428:	f7f7 fc9e 	bl	8007d68 <_Unwind_Complete>
 801042c:	4620      	mov	r0, r4
 801042e:	bd38      	pop	{r3, r4, r5, pc}
 8010430:	f1c2 0201 	rsb	r2, r2, #1
 8010434:	e7eb      	b.n	801040e <__cxa_begin_catch+0x52>
 8010436:	f000 f98b 	bl	8010750 <_ZSt9terminatev>
 801043a:	bf00      	nop

0801043c <__cxa_end_catch>:
 801043c:	b508      	push	{r3, lr}
 801043e:	f7ff fbd9 	bl	800fbf4 <__cxa_get_globals_fast>
 8010442:	4602      	mov	r2, r0
 8010444:	6800      	ldr	r0, [r0, #0]
 8010446:	b370      	cbz	r0, 80104a6 <__cxa_end_catch+0x6a>
 8010448:	f890 3020 	ldrb.w	r3, [r0, #32]
 801044c:	2b47      	cmp	r3, #71	; 0x47
 801044e:	d006      	beq.n	801045e <__cxa_end_catch+0x22>
 8010450:	2300      	movs	r3, #0
 8010452:	6013      	str	r3, [r2, #0]
 8010454:	3020      	adds	r0, #32
 8010456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801045a:	f7f7 bc87 	b.w	8007d6c <_Unwind_DeleteException>
 801045e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8010462:	2b4e      	cmp	r3, #78	; 0x4e
 8010464:	d1f4      	bne.n	8010450 <__cxa_end_catch+0x14>
 8010466:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 801046a:	2b55      	cmp	r3, #85	; 0x55
 801046c:	d1f0      	bne.n	8010450 <__cxa_end_catch+0x14>
 801046e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8010472:	2b43      	cmp	r3, #67	; 0x43
 8010474:	d1ec      	bne.n	8010450 <__cxa_end_catch+0x14>
 8010476:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801047a:	2b43      	cmp	r3, #67	; 0x43
 801047c:	d1e8      	bne.n	8010450 <__cxa_end_catch+0x14>
 801047e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8010482:	2b2b      	cmp	r3, #43	; 0x2b
 8010484:	d1e4      	bne.n	8010450 <__cxa_end_catch+0x14>
 8010486:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 801048a:	2b2b      	cmp	r3, #43	; 0x2b
 801048c:	d1e0      	bne.n	8010450 <__cxa_end_catch+0x14>
 801048e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8010492:	2b01      	cmp	r3, #1
 8010494:	d8dc      	bhi.n	8010450 <__cxa_end_catch+0x14>
 8010496:	6943      	ldr	r3, [r0, #20]
 8010498:	2b00      	cmp	r3, #0
 801049a:	db05      	blt.n	80104a8 <__cxa_end_catch+0x6c>
 801049c:	3b01      	subs	r3, #1
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d007      	beq.n	80104b2 <__cxa_end_catch+0x76>
 80104a2:	db0d      	blt.n	80104c0 <__cxa_end_catch+0x84>
 80104a4:	6143      	str	r3, [r0, #20]
 80104a6:	bd08      	pop	{r3, pc}
 80104a8:	3301      	adds	r3, #1
 80104aa:	d1fb      	bne.n	80104a4 <__cxa_end_catch+0x68>
 80104ac:	6901      	ldr	r1, [r0, #16]
 80104ae:	6011      	str	r1, [r2, #0]
 80104b0:	e7f8      	b.n	80104a4 <__cxa_end_catch+0x68>
 80104b2:	6903      	ldr	r3, [r0, #16]
 80104b4:	6013      	str	r3, [r2, #0]
 80104b6:	3020      	adds	r0, #32
 80104b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80104bc:	f7f7 bc56 	b.w	8007d6c <_Unwind_DeleteException>
 80104c0:	f000 f946 	bl	8010750 <_ZSt9terminatev>

080104c4 <_Znwj>:
 80104c4:	b510      	push	{r4, lr}
 80104c6:	2800      	cmp	r0, #0
 80104c8:	bf14      	ite	ne
 80104ca:	4604      	movne	r4, r0
 80104cc:	2401      	moveq	r4, #1
 80104ce:	4620      	mov	r0, r4
 80104d0:	f002 fbe6 	bl	8012ca0 <malloc>
 80104d4:	b100      	cbz	r0, 80104d8 <_Znwj+0x14>
 80104d6:	bd10      	pop	{r4, pc}
 80104d8:	f000 f91c 	bl	8010714 <_ZSt15get_new_handlerv>
 80104dc:	b108      	cbz	r0, 80104e2 <_Znwj+0x1e>
 80104de:	4780      	blx	r0
 80104e0:	e7f5      	b.n	80104ce <_Znwj+0xa>
 80104e2:	2004      	movs	r0, #4
 80104e4:	f000 f9d6 	bl	8010894 <__cxa_allocate_exception>
 80104e8:	4b02      	ldr	r3, [pc, #8]	; (80104f4 <_Znwj+0x30>)
 80104ea:	6003      	str	r3, [r0, #0]
 80104ec:	4a02      	ldr	r2, [pc, #8]	; (80104f8 <_Znwj+0x34>)
 80104ee:	4903      	ldr	r1, [pc, #12]	; (80104fc <_Znwj+0x38>)
 80104f0:	f7ff ff0e 	bl	8010310 <__cxa_throw>
 80104f4:	0801c0b0 	.word	0x0801c0b0
 80104f8:	080114a9 	.word	0x080114a9
 80104fc:	0801c08c 	.word	0x0801c08c

08010500 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	6803      	ldr	r3, [r0, #0]
 8010504:	b084      	sub	sp, #16
 8010506:	2400      	movs	r4, #0
 8010508:	699e      	ldr	r6, [r3, #24]
 801050a:	9400      	str	r4, [sp, #0]
 801050c:	2310      	movs	r3, #16
 801050e:	4615      	mov	r5, r2
 8010510:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010514:	6812      	ldr	r2, [r2, #0]
 8010516:	f88d 4004 	strb.w	r4, [sp, #4]
 801051a:	466b      	mov	r3, sp
 801051c:	47b0      	blx	r6
 801051e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010522:	f003 0306 	and.w	r3, r3, #6
 8010526:	2b06      	cmp	r3, #6
 8010528:	bf03      	ittte	eq
 801052a:	9b00      	ldreq	r3, [sp, #0]
 801052c:	602b      	streq	r3, [r5, #0]
 801052e:	2001      	moveq	r0, #1
 8010530:	4620      	movne	r0, r4
 8010532:	b004      	add	sp, #16
 8010534:	bd70      	pop	{r4, r5, r6, pc}
 8010536:	bf00      	nop

08010538 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8010538:	9800      	ldr	r0, [sp, #0]
 801053a:	4290      	cmp	r0, r2
 801053c:	bf0c      	ite	eq
 801053e:	2006      	moveq	r0, #6
 8010540:	2001      	movne	r0, #1
 8010542:	4770      	bx	lr

08010544 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8010544:	b510      	push	{r4, lr}
 8010546:	4b03      	ldr	r3, [pc, #12]	; (8010554 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8010548:	6003      	str	r3, [r0, #0]
 801054a:	4604      	mov	r4, r0
 801054c:	f000 fef2 	bl	8011334 <_ZNSt9type_infoD1Ev>
 8010550:	4620      	mov	r0, r4
 8010552:	bd10      	pop	{r4, pc}
 8010554:	0801bd08 	.word	0x0801bd08

08010558 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8010558:	b510      	push	{r4, lr}
 801055a:	4b05      	ldr	r3, [pc, #20]	; (8010570 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 801055c:	6003      	str	r3, [r0, #0]
 801055e:	4604      	mov	r4, r0
 8010560:	f000 fee8 	bl	8011334 <_ZNSt9type_infoD1Ev>
 8010564:	4620      	mov	r0, r4
 8010566:	2108      	movs	r1, #8
 8010568:	f000 ffb6 	bl	80114d8 <_ZdlPvj>
 801056c:	4620      	mov	r0, r4
 801056e:	bd10      	pop	{r4, pc}
 8010570:	0801bd08 	.word	0x0801bd08

08010574 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8010574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010578:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
 801057c:	9d06      	ldr	r5, [sp, #24]
 801057e:	428d      	cmp	r5, r1
 8010580:	4690      	mov	r8, r2
 8010582:	461f      	mov	r7, r3
 8010584:	4606      	mov	r6, r0
 8010586:	d00c      	beq.n	80105a2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8010588:	4639      	mov	r1, r7
 801058a:	4630      	mov	r0, r6
 801058c:	f000 fed6 	bl	801133c <_ZNKSt9type_infoeqERKS_>
 8010590:	b120      	cbz	r0, 801059c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 8010592:	2301      	movs	r3, #1
 8010594:	6025      	str	r5, [r4, #0]
 8010596:	f884 8004 	strb.w	r8, [r4, #4]
 801059a:	71a3      	strb	r3, [r4, #6]
 801059c:	2000      	movs	r0, #0
 801059e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a2:	9907      	ldr	r1, [sp, #28]
 80105a4:	f000 feca 	bl	801133c <_ZNKSt9type_infoeqERKS_>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d0ed      	beq.n	8010588 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 80105ac:	f884 8005 	strb.w	r8, [r4, #5]
 80105b0:	2000      	movs	r0, #0
 80105b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b6:	bf00      	nop

080105b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80105b8:	b538      	push	{r3, r4, r5, lr}
 80105ba:	4615      	mov	r5, r2
 80105bc:	461c      	mov	r4, r3
 80105be:	f000 febd 	bl	801133c <_ZNKSt9type_infoeqERKS_>
 80105c2:	b120      	cbz	r0, 80105ce <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80105c4:	2208      	movs	r2, #8
 80105c6:	2306      	movs	r3, #6
 80105c8:	6025      	str	r5, [r4, #0]
 80105ca:	60e2      	str	r2, [r4, #12]
 80105cc:	7123      	strb	r3, [r4, #4]
 80105ce:	bd38      	pop	{r3, r4, r5, pc}

080105d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80105d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105d4:	4617      	mov	r7, r2
 80105d6:	461c      	mov	r4, r3
 80105d8:	4606      	mov	r6, r0
 80105da:	460d      	mov	r5, r1
 80105dc:	f000 feae 	bl	801133c <_ZNKSt9type_infoeqERKS_>
 80105e0:	b908      	cbnz	r0, 80105e6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 80105e2:	2c03      	cmp	r4, #3
 80105e4:	d901      	bls.n	80105ea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 80105e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ea:	682b      	ldr	r3, [r5, #0]
 80105ec:	463a      	mov	r2, r7
 80105ee:	4631      	mov	r1, r6
 80105f0:	4628      	mov	r0, r5
 80105f2:	695b      	ldr	r3, [r3, #20]
 80105f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105f8:	4718      	bx	r3
 80105fa:	bf00      	nop

080105fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80105fc:	b510      	push	{r4, lr}
 80105fe:	4b03      	ldr	r3, [pc, #12]	; (801060c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8010600:	6003      	str	r3, [r0, #0]
 8010602:	4604      	mov	r4, r0
 8010604:	f7ff ff9e 	bl	8010544 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8010608:	4620      	mov	r0, r4
 801060a:	bd10      	pop	{r4, pc}
 801060c:	0801bd68 	.word	0x0801bd68

08010610 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8010610:	b510      	push	{r4, lr}
 8010612:	4b05      	ldr	r3, [pc, #20]	; (8010628 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8010614:	6003      	str	r3, [r0, #0]
 8010616:	4604      	mov	r4, r0
 8010618:	f7ff ff94 	bl	8010544 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801061c:	4620      	mov	r0, r4
 801061e:	210c      	movs	r1, #12
 8010620:	f000 ff5a 	bl	80114d8 <_ZdlPvj>
 8010624:	4620      	mov	r0, r4
 8010626:	bd10      	pop	{r4, pc}
 8010628:	0801bd68 	.word	0x0801bd68

0801062c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801062c:	b570      	push	{r4, r5, r6, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	460e      	mov	r6, r1
 8010632:	9c06      	ldr	r4, [sp, #24]
 8010634:	4294      	cmp	r4, r2
 8010636:	4605      	mov	r5, r0
 8010638:	d009      	beq.n	801064e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 801063a:	68a8      	ldr	r0, [r5, #8]
 801063c:	6805      	ldr	r5, [r0, #0]
 801063e:	9406      	str	r4, [sp, #24]
 8010640:	6a2c      	ldr	r4, [r5, #32]
 8010642:	4631      	mov	r1, r6
 8010644:	46a4      	mov	ip, r4
 8010646:	b002      	add	sp, #8
 8010648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801064c:	4760      	bx	ip
 801064e:	4619      	mov	r1, r3
 8010650:	9201      	str	r2, [sp, #4]
 8010652:	9300      	str	r3, [sp, #0]
 8010654:	f000 fe72 	bl	801133c <_ZNKSt9type_infoeqERKS_>
 8010658:	e9dd 3200 	ldrd	r3, r2, [sp]
 801065c:	2800      	cmp	r0, #0
 801065e:	d0ec      	beq.n	801063a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8010660:	2006      	movs	r0, #6
 8010662:	b002      	add	sp, #8
 8010664:	bd70      	pop	{r4, r5, r6, pc}
 8010666:	bf00      	nop

08010668 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8010668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	460e      	mov	r6, r1
 801066e:	b081      	sub	sp, #4
 8010670:	4619      	mov	r1, r3
 8010672:	461f      	mov	r7, r3
 8010674:	4691      	mov	r9, r2
 8010676:	4683      	mov	fp, r0
 8010678:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 801067c:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 8010680:	f000 fe5c 	bl	801133c <_ZNKSt9type_infoeqERKS_>
 8010684:	b170      	cbz	r0, 80106a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8010686:	2e00      	cmp	r6, #0
 8010688:	602c      	str	r4, [r5, #0]
 801068a:	f885 9004 	strb.w	r9, [r5, #4]
 801068e:	db1d      	blt.n	80106cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 8010690:	4434      	add	r4, r6
 8010692:	45a0      	cmp	r8, r4
 8010694:	bf0c      	ite	eq
 8010696:	2406      	moveq	r4, #6
 8010698:	2401      	movne	r4, #1
 801069a:	71ac      	strb	r4, [r5, #6]
 801069c:	2000      	movs	r0, #0
 801069e:	b001      	add	sp, #4
 80106a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a4:	4544      	cmp	r4, r8
 80106a6:	d016      	beq.n	80106d6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 80106a8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80106ac:	f8d0 c000 	ldr.w	ip, [r0]
 80106b0:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 80106b4:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 80106b8:	f8dc 401c 	ldr.w	r4, [ip, #28]
 80106bc:	463b      	mov	r3, r7
 80106be:	464a      	mov	r2, r9
 80106c0:	4631      	mov	r1, r6
 80106c2:	46a4      	mov	ip, r4
 80106c4:	b001      	add	sp, #4
 80106c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ca:	4760      	bx	ip
 80106cc:	3602      	adds	r6, #2
 80106ce:	d1e5      	bne.n	801069c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80106d0:	2301      	movs	r3, #1
 80106d2:	71ab      	strb	r3, [r5, #6]
 80106d4:	e7e2      	b.n	801069c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80106d6:	4651      	mov	r1, sl
 80106d8:	4658      	mov	r0, fp
 80106da:	f000 fe2f 	bl	801133c <_ZNKSt9type_infoeqERKS_>
 80106de:	2800      	cmp	r0, #0
 80106e0:	d0e2      	beq.n	80106a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 80106e2:	f885 9005 	strb.w	r9, [r5, #5]
 80106e6:	e7d9      	b.n	801069c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

080106e8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80106e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ec:	4607      	mov	r7, r0
 80106ee:	460c      	mov	r4, r1
 80106f0:	4615      	mov	r5, r2
 80106f2:	461e      	mov	r6, r3
 80106f4:	f7ff ff60 	bl	80105b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80106f8:	b108      	cbz	r0, 80106fe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 80106fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106fe:	68b8      	ldr	r0, [r7, #8]
 8010700:	6807      	ldr	r7, [r0, #0]
 8010702:	4621      	mov	r1, r4
 8010704:	69bc      	ldr	r4, [r7, #24]
 8010706:	4633      	mov	r3, r6
 8010708:	462a      	mov	r2, r5
 801070a:	46a4      	mov	ip, r4
 801070c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010710:	4760      	bx	ip
 8010712:	bf00      	nop

08010714 <_ZSt15get_new_handlerv>:
 8010714:	4b02      	ldr	r3, [pc, #8]	; (8010720 <_ZSt15get_new_handlerv+0xc>)
 8010716:	6818      	ldr	r0, [r3, #0]
 8010718:	f3bf 8f5b 	dmb	ish
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop
 8010720:	2000108c 	.word	0x2000108c

08010724 <_ZdlPv>:
 8010724:	f002 bac4 	b.w	8012cb0 <free>

08010728 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010728:	b508      	push	{r3, lr}
 801072a:	4780      	blx	r0
 801072c:	f002 f819 	bl	8012762 <abort>
 8010730:	f7ff fe44 	bl	80103bc <__cxa_begin_catch>
 8010734:	f002 f815 	bl	8012762 <abort>
 8010738:	460d      	mov	r5, r1
 801073a:	4604      	mov	r4, r0
 801073c:	f7ff fe7e 	bl	801043c <__cxa_end_catch>
 8010740:	3501      	adds	r5, #1
 8010742:	d001      	beq.n	8010748 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 8010744:	f7ff f98d 	bl	800fa62 <__cxa_end_cleanup>
 8010748:	4620      	mov	r0, r4
 801074a:	f000 fe3b 	bl	80113c4 <__cxa_call_unexpected>
 801074e:	bf00      	nop

08010750 <_ZSt9terminatev>:
 8010750:	b508      	push	{r3, lr}
 8010752:	4b03      	ldr	r3, [pc, #12]	; (8010760 <_ZSt9terminatev+0x10>)
 8010754:	6818      	ldr	r0, [r3, #0]
 8010756:	f3bf 8f5b 	dmb	ish
 801075a:	f7ff ffe5 	bl	8010728 <_ZN10__cxxabiv111__terminateEPFvvE>
 801075e:	bf00      	nop
 8010760:	20000400 	.word	0x20000400

08010764 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8010764:	b508      	push	{r3, lr}
 8010766:	4780      	blx	r0
 8010768:	f7ff fff2 	bl	8010750 <_ZSt9terminatev>

0801076c <_ZSt10unexpectedv>:
 801076c:	b508      	push	{r3, lr}
 801076e:	4b03      	ldr	r3, [pc, #12]	; (801077c <_ZSt10unexpectedv+0x10>)
 8010770:	6818      	ldr	r0, [r3, #0]
 8010772:	f3bf 8f5b 	dmb	ish
 8010776:	f7ff fff5 	bl	8010764 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 801077a:	bf00      	nop
 801077c:	200003fc 	.word	0x200003fc

08010780 <_ZSt13get_terminatev>:
 8010780:	4b02      	ldr	r3, [pc, #8]	; (801078c <_ZSt13get_terminatev+0xc>)
 8010782:	6818      	ldr	r0, [r3, #0]
 8010784:	f3bf 8f5b 	dmb	ish
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop
 801078c:	20000400 	.word	0x20000400

08010790 <_ZSt14get_unexpectedv>:
 8010790:	4b02      	ldr	r3, [pc, #8]	; (801079c <_ZSt14get_unexpectedv+0xc>)
 8010792:	6818      	ldr	r0, [r3, #0]
 8010794:	f3bf 8f5b 	dmb	ish
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	200003fc 	.word	0x200003fc

080107a0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 80107a0:	b4f0      	push	{r4, r5, r6, r7}
 80107a2:	4c22      	ldr	r4, [pc, #136]	; (801082c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>)
 80107a4:	6863      	ldr	r3, [r4, #4]
 80107a6:	f1a0 0608 	sub.w	r6, r0, #8
 80107aa:	b31b      	cbz	r3, 80107f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 80107ac:	f850 7c08 	ldr.w	r7, [r0, #-8]
 80107b0:	19f5      	adds	r5, r6, r7
 80107b2:	42ab      	cmp	r3, r5
 80107b4:	d81e      	bhi.n	80107f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 80107b6:	d022      	beq.n	80107fe <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5e>
 80107b8:	6859      	ldr	r1, [r3, #4]
 80107ba:	2900      	cmp	r1, #0
 80107bc:	d031      	beq.n	8010822 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 80107be:	428d      	cmp	r5, r1
 80107c0:	d303      	bcc.n	80107ca <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x2a>
 80107c2:	e02e      	b.n	8010822 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 80107c4:	4295      	cmp	r5, r2
 80107c6:	d205      	bcs.n	80107d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 80107c8:	4611      	mov	r1, r2
 80107ca:	684a      	ldr	r2, [r1, #4]
 80107cc:	1d1c      	adds	r4, r3, #4
 80107ce:	460b      	mov	r3, r1
 80107d0:	2a00      	cmp	r2, #0
 80107d2:	d1f7      	bne.n	80107c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x24>
 80107d4:	4295      	cmp	r5, r2
 80107d6:	d01c      	beq.n	8010812 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x72>
 80107d8:	6823      	ldr	r3, [r4, #0]
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	1899      	adds	r1, r3, r2
 80107de:	428e      	cmp	r6, r1
 80107e0:	d01c      	beq.n	801081c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x7c>
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	f840 3c04 	str.w	r3, [r0, #-4]
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	f840 7c08 	str.w	r7, [r0, #-8]
 80107ee:	605e      	str	r6, [r3, #4]
 80107f0:	bcf0      	pop	{r4, r5, r6, r7}
 80107f2:	4770      	bx	lr
 80107f4:	f840 3c04 	str.w	r3, [r0, #-4]
 80107f8:	6066      	str	r6, [r4, #4]
 80107fa:	bcf0      	pop	{r4, r5, r6, r7}
 80107fc:	4770      	bx	lr
 80107fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010802:	4417      	add	r7, r2
 8010804:	f840 7c08 	str.w	r7, [r0, #-8]
 8010808:	f840 3c04 	str.w	r3, [r0, #-4]
 801080c:	6066      	str	r6, [r4, #4]
 801080e:	bcf0      	pop	{r4, r5, r6, r7}
 8010810:	4770      	bx	lr
 8010812:	e9d5 3200 	ldrd	r3, r2, [r5]
 8010816:	604a      	str	r2, [r1, #4]
 8010818:	441f      	add	r7, r3
 801081a:	e7dd      	b.n	80107d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 801081c:	4417      	add	r7, r2
 801081e:	601f      	str	r7, [r3, #0]
 8010820:	e7eb      	b.n	80107fa <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5a>
 8010822:	460a      	mov	r2, r1
 8010824:	3404      	adds	r4, #4
 8010826:	4619      	mov	r1, r3
 8010828:	e7d4      	b.n	80107d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 801082a:	bf00      	nop
 801082c:	20001090 	.word	0x20001090

08010830 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 8010830:	b430      	push	{r4, r5}
 8010832:	4c17      	ldr	r4, [pc, #92]	; (8010890 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 8010834:	f100 0208 	add.w	r2, r0, #8
 8010838:	6863      	ldr	r3, [r4, #4]
 801083a:	2a08      	cmp	r2, #8
 801083c:	bf38      	it	cc
 801083e:	2208      	movcc	r2, #8
 8010840:	b303      	cbz	r3, 8010884 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x54>
 8010842:	3207      	adds	r2, #7
 8010844:	6819      	ldr	r1, [r3, #0]
 8010846:	f022 0207 	bic.w	r2, r2, #7
 801084a:	428a      	cmp	r2, r1
 801084c:	d804      	bhi.n	8010858 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 801084e:	e01b      	b.n	8010888 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 8010850:	6801      	ldr	r1, [r0, #0]
 8010852:	428a      	cmp	r2, r1
 8010854:	d905      	bls.n	8010862 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 8010856:	4603      	mov	r3, r0
 8010858:	6858      	ldr	r0, [r3, #4]
 801085a:	2800      	cmp	r0, #0
 801085c:	d1f8      	bne.n	8010850 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 801085e:	bc30      	pop	{r4, r5}
 8010860:	4770      	bx	lr
 8010862:	3304      	adds	r3, #4
 8010864:	1a8c      	subs	r4, r1, r2
 8010866:	2c07      	cmp	r4, #7
 8010868:	6845      	ldr	r5, [r0, #4]
 801086a:	d908      	bls.n	801087e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4e>
 801086c:	1881      	adds	r1, r0, r2
 801086e:	604d      	str	r5, [r1, #4]
 8010870:	5084      	str	r4, [r0, r2]
 8010872:	6818      	ldr	r0, [r3, #0]
 8010874:	6002      	str	r2, [r0, #0]
 8010876:	6019      	str	r1, [r3, #0]
 8010878:	3008      	adds	r0, #8
 801087a:	bc30      	pop	{r4, r5}
 801087c:	4770      	bx	lr
 801087e:	6001      	str	r1, [r0, #0]
 8010880:	601d      	str	r5, [r3, #0]
 8010882:	e7f9      	b.n	8010878 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 8010884:	4618      	mov	r0, r3
 8010886:	e7ea      	b.n	801085e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 8010888:	4618      	mov	r0, r3
 801088a:	1d23      	adds	r3, r4, #4
 801088c:	e7ea      	b.n	8010864 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 801088e:	bf00      	nop
 8010890:	20001090 	.word	0x20001090

08010894 <__cxa_allocate_exception>:
 8010894:	b510      	push	{r4, lr}
 8010896:	f100 0480 	add.w	r4, r0, #128	; 0x80
 801089a:	4620      	mov	r0, r4
 801089c:	f002 fa00 	bl	8012ca0 <malloc>
 80108a0:	b138      	cbz	r0, 80108b2 <__cxa_allocate_exception+0x1e>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2280      	movs	r2, #128	; 0x80
 80108a6:	2100      	movs	r1, #0
 80108a8:	4618      	mov	r0, r3
 80108aa:	f002 fc72 	bl	8013192 <memset>
 80108ae:	3080      	adds	r0, #128	; 0x80
 80108b0:	bd10      	pop	{r4, pc}
 80108b2:	4620      	mov	r0, r4
 80108b4:	f7ff ffbc 	bl	8010830 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 80108b8:	4603      	mov	r3, r0
 80108ba:	2800      	cmp	r0, #0
 80108bc:	d1f2      	bne.n	80108a4 <__cxa_allocate_exception+0x10>
 80108be:	f7ff ff47 	bl	8010750 <_ZSt9terminatev>
 80108c2:	bf00      	nop

080108c4 <__cxa_free_exception>:
 80108c4:	4a06      	ldr	r2, [pc, #24]	; (80108e0 <__cxa_free_exception+0x1c>)
 80108c6:	6893      	ldr	r3, [r2, #8]
 80108c8:	3880      	subs	r0, #128	; 0x80
 80108ca:	4298      	cmp	r0, r3
 80108cc:	d903      	bls.n	80108d6 <__cxa_free_exception+0x12>
 80108ce:	68d2      	ldr	r2, [r2, #12]
 80108d0:	4413      	add	r3, r2
 80108d2:	4298      	cmp	r0, r3
 80108d4:	d301      	bcc.n	80108da <__cxa_free_exception+0x16>
 80108d6:	f002 b9eb 	b.w	8012cb0 <free>
 80108da:	f7ff bf61 	b.w	80107a0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 80108de:	bf00      	nop
 80108e0:	20001090 	.word	0x20001090

080108e4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80108e4:	b538      	push	{r3, r4, r5, lr}
 80108e6:	4c08      	ldr	r4, [pc, #32]	; (8010908 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80108e8:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80108ec:	4628      	mov	r0, r5
 80108ee:	60e5      	str	r5, [r4, #12]
 80108f0:	f002 f9d6 	bl	8012ca0 <malloc>
 80108f4:	60a0      	str	r0, [r4, #8]
 80108f6:	b120      	cbz	r0, 8010902 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 80108f8:	2300      	movs	r3, #0
 80108fa:	6060      	str	r0, [r4, #4]
 80108fc:	e9c0 5300 	strd	r5, r3, [r0]
 8010900:	bd38      	pop	{r3, r4, r5, pc}
 8010902:	60e0      	str	r0, [r4, #12]
 8010904:	6060      	str	r0, [r4, #4]
 8010906:	bd38      	pop	{r3, r4, r5, pc}
 8010908:	20001090 	.word	0x20001090

0801090c <_ZNKSt11logic_error4whatEv>:
 801090c:	6840      	ldr	r0, [r0, #4]
 801090e:	4770      	bx	lr

08010910 <_ZNSt11logic_errorD1Ev>:
 8010910:	b510      	push	{r4, lr}
 8010912:	6843      	ldr	r3, [r0, #4]
 8010914:	4a0c      	ldr	r2, [pc, #48]	; (8010948 <_ZNSt11logic_errorD1Ev+0x38>)
 8010916:	490d      	ldr	r1, [pc, #52]	; (801094c <_ZNSt11logic_errorD1Ev+0x3c>)
 8010918:	6001      	str	r1, [r0, #0]
 801091a:	4604      	mov	r4, r0
 801091c:	f1a3 000c 	sub.w	r0, r3, #12
 8010920:	4290      	cmp	r0, r2
 8010922:	b082      	sub	sp, #8
 8010924:	d105      	bne.n	8010932 <_ZNSt11logic_errorD1Ev+0x22>
 8010926:	4620      	mov	r0, r4
 8010928:	f000 fcf4 	bl	8011314 <_ZNSt9exceptionD1Ev>
 801092c:	4620      	mov	r0, r4
 801092e:	b002      	add	sp, #8
 8010930:	bd10      	pop	{r4, pc}
 8010932:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8010936:	1e51      	subs	r1, r2, #1
 8010938:	2a00      	cmp	r2, #0
 801093a:	f843 1c04 	str.w	r1, [r3, #-4]
 801093e:	dcf2      	bgt.n	8010926 <_ZNSt11logic_errorD1Ev+0x16>
 8010940:	a901      	add	r1, sp, #4
 8010942:	f000 f883 	bl	8010a4c <_ZNSs4_Rep10_M_destroyERKSaIcE>
 8010946:	e7ee      	b.n	8010926 <_ZNSt11logic_errorD1Ev+0x16>
 8010948:	200010a0 	.word	0x200010a0
 801094c:	0801be14 	.word	0x0801be14

08010950 <_ZNSt11logic_errorD0Ev>:
 8010950:	b510      	push	{r4, lr}
 8010952:	4604      	mov	r4, r0
 8010954:	f7ff ffdc 	bl	8010910 <_ZNSt11logic_errorD1Ev>
 8010958:	4620      	mov	r0, r4
 801095a:	f7ff fee3 	bl	8010724 <_ZdlPv>
 801095e:	4620      	mov	r0, r4
 8010960:	bd10      	pop	{r4, pc}
 8010962:	bf00      	nop

08010964 <_ZNSt16invalid_argumentD1Ev>:
 8010964:	b510      	push	{r4, lr}
 8010966:	4b03      	ldr	r3, [pc, #12]	; (8010974 <_ZNSt16invalid_argumentD1Ev+0x10>)
 8010968:	6003      	str	r3, [r0, #0]
 801096a:	4604      	mov	r4, r0
 801096c:	f7ff ffd0 	bl	8010910 <_ZNSt11logic_errorD1Ev>
 8010970:	4620      	mov	r0, r4
 8010972:	bd10      	pop	{r4, pc}
 8010974:	0801be50 	.word	0x0801be50

08010978 <_ZNSt16invalid_argumentD0Ev>:
 8010978:	b510      	push	{r4, lr}
 801097a:	4b05      	ldr	r3, [pc, #20]	; (8010990 <_ZNSt16invalid_argumentD0Ev+0x18>)
 801097c:	6003      	str	r3, [r0, #0]
 801097e:	4604      	mov	r4, r0
 8010980:	f7ff ffc6 	bl	8010910 <_ZNSt11logic_errorD1Ev>
 8010984:	4620      	mov	r0, r4
 8010986:	f7ff fecd 	bl	8010724 <_ZdlPv>
 801098a:	4620      	mov	r0, r4
 801098c:	bd10      	pop	{r4, pc}
 801098e:	bf00      	nop
 8010990:	0801be50 	.word	0x0801be50

08010994 <_ZNSt12length_errorD1Ev>:
 8010994:	b510      	push	{r4, lr}
 8010996:	4b03      	ldr	r3, [pc, #12]	; (80109a4 <_ZNSt12length_errorD1Ev+0x10>)
 8010998:	6003      	str	r3, [r0, #0]
 801099a:	4604      	mov	r4, r0
 801099c:	f7ff ffb8 	bl	8010910 <_ZNSt11logic_errorD1Ev>
 80109a0:	4620      	mov	r0, r4
 80109a2:	bd10      	pop	{r4, pc}
 80109a4:	0801be28 	.word	0x0801be28

080109a8 <_ZNSt12length_errorD0Ev>:
 80109a8:	b510      	push	{r4, lr}
 80109aa:	4b05      	ldr	r3, [pc, #20]	; (80109c0 <_ZNSt12length_errorD0Ev+0x18>)
 80109ac:	6003      	str	r3, [r0, #0]
 80109ae:	4604      	mov	r4, r0
 80109b0:	f7ff ffae 	bl	8010910 <_ZNSt11logic_errorD1Ev>
 80109b4:	4620      	mov	r0, r4
 80109b6:	f7ff feb5 	bl	8010724 <_ZdlPv>
 80109ba:	4620      	mov	r0, r4
 80109bc:	bd10      	pop	{r4, pc}
 80109be:	bf00      	nop
 80109c0:	0801be28 	.word	0x0801be28

080109c4 <_ZNSt12out_of_rangeD1Ev>:
 80109c4:	b510      	push	{r4, lr}
 80109c6:	4b03      	ldr	r3, [pc, #12]	; (80109d4 <_ZNSt12out_of_rangeD1Ev+0x10>)
 80109c8:	6003      	str	r3, [r0, #0]
 80109ca:	4604      	mov	r4, r0
 80109cc:	f7ff ffa0 	bl	8010910 <_ZNSt11logic_errorD1Ev>
 80109d0:	4620      	mov	r0, r4
 80109d2:	bd10      	pop	{r4, pc}
 80109d4:	0801be3c 	.word	0x0801be3c

080109d8 <_ZNSt12out_of_rangeD0Ev>:
 80109d8:	b510      	push	{r4, lr}
 80109da:	4b05      	ldr	r3, [pc, #20]	; (80109f0 <_ZNSt12out_of_rangeD0Ev+0x18>)
 80109dc:	6003      	str	r3, [r0, #0]
 80109de:	4604      	mov	r4, r0
 80109e0:	f7ff ff96 	bl	8010910 <_ZNSt11logic_errorD1Ev>
 80109e4:	4620      	mov	r0, r4
 80109e6:	f7ff fe9d 	bl	8010724 <_ZdlPv>
 80109ea:	4620      	mov	r0, r4
 80109ec:	bd10      	pop	{r4, pc}
 80109ee:	bf00      	nop
 80109f0:	0801be3c 	.word	0x0801be3c

080109f4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 80109f4:	4b13      	ldr	r3, [pc, #76]	; (8010a44 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
 80109f6:	4298      	cmp	r0, r3
 80109f8:	b510      	push	{r4, lr}
 80109fa:	d81f      	bhi.n	8010a3c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
 80109fc:	4288      	cmp	r0, r1
 80109fe:	4604      	mov	r4, r0
 8010a00:	d914      	bls.n	8010a2c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
 8010a02:	004a      	lsls	r2, r1, #1
 8010a04:	4290      	cmp	r0, r2
 8010a06:	bf38      	it	cc
 8010a08:	4614      	movcc	r4, r2
 8010a0a:	f104 021d 	add.w	r2, r4, #29
 8010a0e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8010a12:	f104 000d 	add.w	r0, r4, #13
 8010a16:	d90b      	bls.n	8010a30 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 8010a18:	42a1      	cmp	r1, r4
 8010a1a:	d209      	bcs.n	8010a30 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 8010a1c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8010a20:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8010a24:	1aa4      	subs	r4, r4, r2
 8010a26:	429c      	cmp	r4, r3
 8010a28:	bf28      	it	cs
 8010a2a:	461c      	movcs	r4, r3
 8010a2c:	f104 000d 	add.w	r0, r4, #13
 8010a30:	f7ff fd48 	bl	80104c4 <_Znwj>
 8010a34:	2200      	movs	r2, #0
 8010a36:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8010a3a:	bd10      	pop	{r4, pc}
 8010a3c:	4802      	ldr	r0, [pc, #8]	; (8010a48 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
 8010a3e:	f000 f917 	bl	8010c70 <_ZSt20__throw_length_errorPKc>
 8010a42:	bf00      	nop
 8010a44:	3ffffffc 	.word	0x3ffffffc
 8010a48:	0801be88 	.word	0x0801be88

08010a4c <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 8010a4c:	f7ff be6a 	b.w	8010724 <_ZdlPv>

08010a50 <_ZNSs4_Rep8_M_cloneERKSaIcEj>:
 8010a50:	b538      	push	{r3, r4, r5, lr}
 8010a52:	4604      	mov	r4, r0
 8010a54:	6800      	ldr	r0, [r0, #0]
 8010a56:	4410      	add	r0, r2
 8010a58:	460a      	mov	r2, r1
 8010a5a:	6861      	ldr	r1, [r4, #4]
 8010a5c:	f7ff ffca 	bl	80109f4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8010a60:	6822      	ldr	r2, [r4, #0]
 8010a62:	4605      	mov	r5, r0
 8010a64:	f100 030c 	add.w	r3, r0, #12
 8010a68:	b122      	cbz	r2, 8010a74 <_ZNSs4_Rep8_M_cloneERKSaIcEj+0x24>
 8010a6a:	2a01      	cmp	r2, #1
 8010a6c:	d107      	bne.n	8010a7e <_ZNSs4_Rep8_M_cloneERKSaIcEj+0x2e>
 8010a6e:	7b22      	ldrb	r2, [r4, #12]
 8010a70:	7302      	strb	r2, [r0, #12]
 8010a72:	6822      	ldr	r2, [r4, #0]
 8010a74:	490a      	ldr	r1, [pc, #40]	; (8010aa0 <_ZNSs4_Rep8_M_cloneERKSaIcEj+0x50>)
 8010a76:	428d      	cmp	r5, r1
 8010a78:	d10b      	bne.n	8010a92 <_ZNSs4_Rep8_M_cloneERKSaIcEj+0x42>
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	bd38      	pop	{r3, r4, r5, pc}
 8010a7e:	f104 010c 	add.w	r1, r4, #12
 8010a82:	4618      	mov	r0, r3
 8010a84:	f002 fb61 	bl	801314a <memcpy>
 8010a88:	4905      	ldr	r1, [pc, #20]	; (8010aa0 <_ZNSs4_Rep8_M_cloneERKSaIcEj+0x50>)
 8010a8a:	6822      	ldr	r2, [r4, #0]
 8010a8c:	428d      	cmp	r5, r1
 8010a8e:	4603      	mov	r3, r0
 8010a90:	d0f3      	beq.n	8010a7a <_ZNSs4_Rep8_M_cloneERKSaIcEj+0x2a>
 8010a92:	18a8      	adds	r0, r5, r2
 8010a94:	2100      	movs	r1, #0
 8010a96:	602a      	str	r2, [r5, #0]
 8010a98:	60a9      	str	r1, [r5, #8]
 8010a9a:	7301      	strb	r1, [r0, #12]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	bd38      	pop	{r3, r4, r5, pc}
 8010aa0:	200010a0 	.word	0x200010a0

08010aa4 <_ZNSsC1ERKSs>:
 8010aa4:	b510      	push	{r4, lr}
 8010aa6:	680b      	ldr	r3, [r1, #0]
 8010aa8:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8010aac:	2a00      	cmp	r2, #0
 8010aae:	4604      	mov	r4, r0
 8010ab0:	b082      	sub	sp, #8
 8010ab2:	f1a3 000c 	sub.w	r0, r3, #12
 8010ab6:	db06      	blt.n	8010ac6 <_ZNSsC1ERKSs+0x22>
 8010ab8:	4909      	ldr	r1, [pc, #36]	; (8010ae0 <_ZNSsC1ERKSs+0x3c>)
 8010aba:	4288      	cmp	r0, r1
 8010abc:	d10c      	bne.n	8010ad8 <_ZNSsC1ERKSs+0x34>
 8010abe:	4620      	mov	r0, r4
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	b002      	add	sp, #8
 8010ac4:	bd10      	pop	{r4, pc}
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	a901      	add	r1, sp, #4
 8010aca:	f7ff ffc1 	bl	8010a50 <_ZNSs4_Rep8_M_cloneERKSaIcEj>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	6023      	str	r3, [r4, #0]
 8010ad4:	b002      	add	sp, #8
 8010ad6:	bd10      	pop	{r4, pc}
 8010ad8:	3201      	adds	r2, #1
 8010ada:	f843 2c04 	str.w	r2, [r3, #-4]
 8010ade:	e7ee      	b.n	8010abe <_ZNSsC1ERKSs+0x1a>
 8010ae0:	200010a0 	.word	0x200010a0

08010ae4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 8010ae4:	4288      	cmp	r0, r1
 8010ae6:	d015      	beq.n	8010b14 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x30>
 8010ae8:	b570      	push	{r4, r5, r6, lr}
 8010aea:	4605      	mov	r5, r0
 8010aec:	b310      	cbz	r0, 8010b34 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x50>
 8010aee:	1a0c      	subs	r4, r1, r0
 8010af0:	4620      	mov	r0, r4
 8010af2:	2100      	movs	r1, #0
 8010af4:	f7ff ff7e 	bl	80109f4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8010af8:	2c01      	cmp	r4, #1
 8010afa:	4606      	mov	r6, r0
 8010afc:	f100 030c 	add.w	r3, r0, #12
 8010b00:	d005      	beq.n	8010b0e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x2a>
 8010b02:	b954      	cbnz	r4, 8010b1a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x36>
 8010b04:	4a0d      	ldr	r2, [pc, #52]	; (8010b3c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x58>)
 8010b06:	4296      	cmp	r6, r2
 8010b08:	d10e      	bne.n	8010b28 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x44>
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	bd70      	pop	{r4, r5, r6, pc}
 8010b0e:	782a      	ldrb	r2, [r5, #0]
 8010b10:	7302      	strb	r2, [r0, #12]
 8010b12:	e7f7      	b.n	8010b04 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>
 8010b14:	4b0a      	ldr	r3, [pc, #40]	; (8010b40 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x5c>)
 8010b16:	4618      	mov	r0, r3
 8010b18:	4770      	bx	lr
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	4622      	mov	r2, r4
 8010b20:	f002 fb13 	bl	801314a <memcpy>
 8010b24:	4603      	mov	r3, r0
 8010b26:	e7ed      	b.n	8010b04 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>
 8010b28:	1931      	adds	r1, r6, r4
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	6034      	str	r4, [r6, #0]
 8010b2e:	60b2      	str	r2, [r6, #8]
 8010b30:	730a      	strb	r2, [r1, #12]
 8010b32:	e7ea      	b.n	8010b0a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x26>
 8010b34:	4803      	ldr	r0, [pc, #12]	; (8010b44 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x60>)
 8010b36:	f000 f86b 	bl	8010c10 <_ZSt19__throw_logic_errorPKc>
 8010b3a:	bf00      	nop
 8010b3c:	200010a0 	.word	0x200010a0
 8010b40:	200010ac 	.word	0x200010ac
 8010b44:	0801be5c 	.word	0x0801be5c

08010b48 <_ZNSsC1EPKcRKSaIcE>:
 8010b48:	b570      	push	{r4, r5, r6, lr}
 8010b4a:	4605      	mov	r5, r0
 8010b4c:	4616      	mov	r6, r2
 8010b4e:	460c      	mov	r4, r1
 8010b50:	b161      	cbz	r1, 8010b6c <_ZNSsC1EPKcRKSaIcE+0x24>
 8010b52:	4608      	mov	r0, r1
 8010b54:	f7f6 f90e 	bl	8006d74 <strlen>
 8010b58:	1821      	adds	r1, r4, r0
 8010b5a:	4632      	mov	r2, r6
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	f04f 0300 	mov.w	r3, #0
 8010b62:	f7ff ffbf 	bl	8010ae4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8010b66:	6028      	str	r0, [r5, #0]
 8010b68:	4628      	mov	r0, r5
 8010b6a:	bd70      	pop	{r4, r5, r6, pc}
 8010b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8010b70:	e7f3      	b.n	8010b5a <_ZNSsC1EPKcRKSaIcE+0x12>
 8010b72:	bf00      	nop

08010b74 <_ZNSt11logic_errorC1ERKS_>:
 8010b74:	b510      	push	{r4, lr}
 8010b76:	4b04      	ldr	r3, [pc, #16]	; (8010b88 <_ZNSt11logic_errorC1ERKS_+0x14>)
 8010b78:	4604      	mov	r4, r0
 8010b7a:	3104      	adds	r1, #4
 8010b7c:	f840 3b04 	str.w	r3, [r0], #4
 8010b80:	f7ff ff90 	bl	8010aa4 <_ZNSsC1ERKSs>
 8010b84:	4620      	mov	r0, r4
 8010b86:	bd10      	pop	{r4, pc}
 8010b88:	0801be14 	.word	0x0801be14

08010b8c <_ZNSt11logic_errorC1EPKc>:
 8010b8c:	b510      	push	{r4, lr}
 8010b8e:	4b08      	ldr	r3, [pc, #32]	; (8010bb0 <_ZNSt11logic_errorC1EPKc+0x24>)
 8010b90:	b082      	sub	sp, #8
 8010b92:	4604      	mov	r4, r0
 8010b94:	aa01      	add	r2, sp, #4
 8010b96:	f840 3b04 	str.w	r3, [r0], #4
 8010b9a:	f7ff ffd5 	bl	8010b48 <_ZNSsC1EPKcRKSaIcE>
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	b002      	add	sp, #8
 8010ba2:	bd10      	pop	{r4, pc}
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f000 fbb5 	bl	8011314 <_ZNSt9exceptionD1Ev>
 8010baa:	f7fe ff5a 	bl	800fa62 <__cxa_end_cleanup>
 8010bae:	bf00      	nop
 8010bb0:	0801be14 	.word	0x0801be14

08010bb4 <_ZNSt16invalid_argumentC1EPKc>:
 8010bb4:	b510      	push	{r4, lr}
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	f7ff ffe8 	bl	8010b8c <_ZNSt11logic_errorC1EPKc>
 8010bbc:	4b01      	ldr	r3, [pc, #4]	; (8010bc4 <_ZNSt16invalid_argumentC1EPKc+0x10>)
 8010bbe:	6023      	str	r3, [r4, #0]
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	bd10      	pop	{r4, pc}
 8010bc4:	0801be50 	.word	0x0801be50

08010bc8 <_ZNSt12length_errorC1EPKc>:
 8010bc8:	b510      	push	{r4, lr}
 8010bca:	4604      	mov	r4, r0
 8010bcc:	f7ff ffde 	bl	8010b8c <_ZNSt11logic_errorC1EPKc>
 8010bd0:	4b01      	ldr	r3, [pc, #4]	; (8010bd8 <_ZNSt12length_errorC1EPKc+0x10>)
 8010bd2:	6023      	str	r3, [r4, #0]
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	bd10      	pop	{r4, pc}
 8010bd8:	0801be28 	.word	0x0801be28

08010bdc <_ZNSt12out_of_rangeC1EPKc>:
 8010bdc:	b510      	push	{r4, lr}
 8010bde:	4604      	mov	r4, r0
 8010be0:	f7ff ffd4 	bl	8010b8c <_ZNSt11logic_errorC1EPKc>
 8010be4:	4b01      	ldr	r3, [pc, #4]	; (8010bec <_ZNSt12out_of_rangeC1EPKc+0x10>)
 8010be6:	6023      	str	r3, [r4, #0]
 8010be8:	4620      	mov	r0, r4
 8010bea:	bd10      	pop	{r4, pc}
 8010bec:	0801be3c 	.word	0x0801be3c

08010bf0 <_ZSt17__throw_bad_allocv>:
 8010bf0:	b508      	push	{r3, lr}
 8010bf2:	2004      	movs	r0, #4
 8010bf4:	f7ff fe4e 	bl	8010894 <__cxa_allocate_exception>
 8010bf8:	4b02      	ldr	r3, [pc, #8]	; (8010c04 <_ZSt17__throw_bad_allocv+0x14>)
 8010bfa:	6003      	str	r3, [r0, #0]
 8010bfc:	4a02      	ldr	r2, [pc, #8]	; (8010c08 <_ZSt17__throw_bad_allocv+0x18>)
 8010bfe:	4903      	ldr	r1, [pc, #12]	; (8010c0c <_ZSt17__throw_bad_allocv+0x1c>)
 8010c00:	f7ff fb86 	bl	8010310 <__cxa_throw>
 8010c04:	0801c0b0 	.word	0x0801c0b0
 8010c08:	080114a9 	.word	0x080114a9
 8010c0c:	0801c08c 	.word	0x0801c08c

08010c10 <_ZSt19__throw_logic_errorPKc>:
 8010c10:	b538      	push	{r3, r4, r5, lr}
 8010c12:	4605      	mov	r5, r0
 8010c14:	2008      	movs	r0, #8
 8010c16:	f7ff fe3d 	bl	8010894 <__cxa_allocate_exception>
 8010c1a:	4629      	mov	r1, r5
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	f7ff ffb5 	bl	8010b8c <_ZNSt11logic_errorC1EPKc>
 8010c22:	4620      	mov	r0, r4
 8010c24:	4a04      	ldr	r2, [pc, #16]	; (8010c38 <_ZSt19__throw_logic_errorPKc+0x28>)
 8010c26:	4905      	ldr	r1, [pc, #20]	; (8010c3c <_ZSt19__throw_logic_errorPKc+0x2c>)
 8010c28:	f7ff fb72 	bl	8010310 <__cxa_throw>
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f7ff fe49 	bl	80108c4 <__cxa_free_exception>
 8010c32:	f7fe ff16 	bl	800fa62 <__cxa_end_cleanup>
 8010c36:	bf00      	nop
 8010c38:	08010911 	.word	0x08010911
 8010c3c:	0801bd8c 	.word	0x0801bd8c

08010c40 <_ZSt24__throw_invalid_argumentPKc>:
 8010c40:	b538      	push	{r3, r4, r5, lr}
 8010c42:	4605      	mov	r5, r0
 8010c44:	2008      	movs	r0, #8
 8010c46:	f7ff fe25 	bl	8010894 <__cxa_allocate_exception>
 8010c4a:	4629      	mov	r1, r5
 8010c4c:	4604      	mov	r4, r0
 8010c4e:	f7ff ffb1 	bl	8010bb4 <_ZNSt16invalid_argumentC1EPKc>
 8010c52:	4620      	mov	r0, r4
 8010c54:	4a04      	ldr	r2, [pc, #16]	; (8010c68 <_ZSt24__throw_invalid_argumentPKc+0x28>)
 8010c56:	4905      	ldr	r1, [pc, #20]	; (8010c6c <_ZSt24__throw_invalid_argumentPKc+0x2c>)
 8010c58:	f7ff fb5a 	bl	8010310 <__cxa_throw>
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	f7ff fe31 	bl	80108c4 <__cxa_free_exception>
 8010c62:	f7fe fefe 	bl	800fa62 <__cxa_end_cleanup>
 8010c66:	bf00      	nop
 8010c68:	08010965 	.word	0x08010965
 8010c6c:	0801bdb0 	.word	0x0801bdb0

08010c70 <_ZSt20__throw_length_errorPKc>:
 8010c70:	b538      	push	{r3, r4, r5, lr}
 8010c72:	4605      	mov	r5, r0
 8010c74:	2008      	movs	r0, #8
 8010c76:	f7ff fe0d 	bl	8010894 <__cxa_allocate_exception>
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	f7ff ffa3 	bl	8010bc8 <_ZNSt12length_errorC1EPKc>
 8010c82:	4620      	mov	r0, r4
 8010c84:	4a04      	ldr	r2, [pc, #16]	; (8010c98 <_ZSt20__throw_length_errorPKc+0x28>)
 8010c86:	4905      	ldr	r1, [pc, #20]	; (8010c9c <_ZSt20__throw_length_errorPKc+0x2c>)
 8010c88:	f7ff fb42 	bl	8010310 <__cxa_throw>
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f7ff fe19 	bl	80108c4 <__cxa_free_exception>
 8010c92:	f7fe fee6 	bl	800fa62 <__cxa_end_cleanup>
 8010c96:	bf00      	nop
 8010c98:	08010995 	.word	0x08010995
 8010c9c:	0801bd98 	.word	0x0801bd98

08010ca0 <_ZSt20__throw_out_of_rangePKc>:
 8010ca0:	b538      	push	{r3, r4, r5, lr}
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	2008      	movs	r0, #8
 8010ca6:	f7ff fdf5 	bl	8010894 <__cxa_allocate_exception>
 8010caa:	4629      	mov	r1, r5
 8010cac:	4604      	mov	r4, r0
 8010cae:	f7ff ff95 	bl	8010bdc <_ZNSt12out_of_rangeC1EPKc>
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	4a04      	ldr	r2, [pc, #16]	; (8010cc8 <_ZSt20__throw_out_of_rangePKc+0x28>)
 8010cb6:	4905      	ldr	r1, [pc, #20]	; (8010ccc <_ZSt20__throw_out_of_rangePKc+0x2c>)
 8010cb8:	f7ff fb2a 	bl	8010310 <__cxa_throw>
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f7ff fe01 	bl	80108c4 <__cxa_free_exception>
 8010cc2:	f7fe fece 	bl	800fa62 <__cxa_end_cleanup>
 8010cc6:	bf00      	nop
 8010cc8:	080109c5 	.word	0x080109c5
 8010ccc:	0801bda4 	.word	0x0801bda4

08010cd0 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8010cd0:	b40f      	push	{r0, r1, r2, r3}
 8010cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cd4:	b083      	sub	sp, #12
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	f107 0420 	add.w	r4, r7, #32
 8010cdc:	f854 6b04 	ldr.w	r6, [r4], #4
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f7f6 f847 	bl	8006d74 <strlen>
 8010ce6:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8010cea:	f023 0307 	bic.w	r3, r3, #7
 8010cee:	ebad 0d03 	sub.w	sp, sp, r3
 8010cf2:	466d      	mov	r5, sp
 8010cf4:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8010cf8:	4623      	mov	r3, r4
 8010cfa:	4632      	mov	r2, r6
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	607c      	str	r4, [r7, #4]
 8010d00:	f000 fc40 	bl	8011584 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8010d04:	2008      	movs	r0, #8
 8010d06:	f7ff fdc5 	bl	8010894 <__cxa_allocate_exception>
 8010d0a:	4629      	mov	r1, r5
 8010d0c:	4604      	mov	r4, r0
 8010d0e:	f7ff ff65 	bl	8010bdc <_ZNSt12out_of_rangeC1EPKc>
 8010d12:	4620      	mov	r0, r4
 8010d14:	4a04      	ldr	r2, [pc, #16]	; (8010d28 <_ZSt24__throw_out_of_range_fmtPKcz+0x58>)
 8010d16:	4905      	ldr	r1, [pc, #20]	; (8010d2c <_ZSt24__throw_out_of_range_fmtPKcz+0x5c>)
 8010d18:	f7ff fafa 	bl	8010310 <__cxa_throw>
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	f7ff fdd1 	bl	80108c4 <__cxa_free_exception>
 8010d22:	f7fe fe9e 	bl	800fa62 <__cxa_end_cleanup>
 8010d26:	bf00      	nop
 8010d28:	080109c5 	.word	0x080109c5
 8010d2c:	0801bda4 	.word	0x0801bda4

08010d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8010d30:	6808      	ldr	r0, [r1, #0]
 8010d32:	2800      	cmp	r0, #0
 8010d34:	b508      	push	{r3, lr}
 8010d36:	db1a      	blt.n	8010d6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3e>
 8010d38:	4290      	cmp	r0, r2
 8010d3a:	d90a      	bls.n	8010d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8010d3c:	0052      	lsls	r2, r2, #1
 8010d3e:	4290      	cmp	r0, r2
 8010d40:	d207      	bcs.n	8010d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8010d42:	2a00      	cmp	r2, #0
 8010d44:	db0a      	blt.n	8010d5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8010d46:	600a      	str	r2, [r1, #0]
 8010d48:	1c50      	adds	r0, r2, #1
 8010d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010d4e:	f7ff bbb9 	b.w	80104c4 <_Znwj>
 8010d52:	3001      	adds	r0, #1
 8010d54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010d58:	f7ff bbb4 	b.w	80104c4 <_Znwj>
 8010d5c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010d60:	600b      	str	r3, [r1, #0]
 8010d62:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010d6a:	f7ff bbab 	b.w	80104c4 <_Znwj>
 8010d6e:	4801      	ldr	r0, [pc, #4]	; (8010d74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x44>)
 8010d70:	f7ff ff7e 	bl	8010c70 <_ZSt20__throw_length_errorPKc>
 8010d74:	0801bf7c 	.word	0x0801bf7c

08010d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8010d78:	4288      	cmp	r0, r1
 8010d7a:	d02c      	beq.n	8010dd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x5e>
 8010d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d80:	4680      	mov	r8, r0
 8010d82:	684e      	ldr	r6, [r1, #4]
 8010d84:	f858 7b08 	ldr.w	r7, [r8], #8
 8010d88:	45b8      	cmp	r8, r7
 8010d8a:	bf14      	ite	ne
 8010d8c:	6882      	ldrne	r2, [r0, #8]
 8010d8e:	220f      	moveq	r2, #15
 8010d90:	42b2      	cmp	r2, r6
 8010d92:	b082      	sub	sp, #8
 8010d94:	460d      	mov	r5, r1
 8010d96:	4604      	mov	r4, r0
 8010d98:	d30c      	bcc.n	8010db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3c>
 8010d9a:	b12e      	cbz	r6, 8010da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x30>
 8010d9c:	2e01      	cmp	r6, #1
 8010d9e:	6829      	ldr	r1, [r5, #0]
 8010da0:	d11a      	bne.n	8010dd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x60>
 8010da2:	780b      	ldrb	r3, [r1, #0]
 8010da4:	703b      	strb	r3, [r7, #0]
 8010da6:	6827      	ldr	r7, [r4, #0]
 8010da8:	6066      	str	r6, [r4, #4]
 8010daa:	2300      	movs	r3, #0
 8010dac:	55bb      	strb	r3, [r7, r6]
 8010dae:	b002      	add	sp, #8
 8010db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db4:	a902      	add	r1, sp, #8
 8010db6:	f841 6d04 	str.w	r6, [r1, #-4]!
 8010dba:	f7ff ffb9 	bl	8010d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010dbe:	4607      	mov	r7, r0
 8010dc0:	6820      	ldr	r0, [r4, #0]
 8010dc2:	4580      	cmp	r8, r0
 8010dc4:	d001      	beq.n	8010dca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x52>
 8010dc6:	f7ff fcad 	bl	8010724 <_ZdlPv>
 8010dca:	9b01      	ldr	r3, [sp, #4]
 8010dcc:	6027      	str	r7, [r4, #0]
 8010dce:	60a3      	str	r3, [r4, #8]
 8010dd0:	2e00      	cmp	r6, #0
 8010dd2:	d0e9      	beq.n	8010da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x30>
 8010dd4:	e7e2      	b.n	8010d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x24>
 8010dd6:	4770      	bx	lr
 8010dd8:	4638      	mov	r0, r7
 8010dda:	4632      	mov	r2, r6
 8010ddc:	f002 f9b5 	bl	801314a <memcpy>
 8010de0:	6827      	ldr	r7, [r4, #0]
 8010de2:	e7e1      	b.n	8010da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x30>

08010de4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8010de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	b083      	sub	sp, #12
 8010dea:	4604      	mov	r4, r0
 8010dec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010dee:	e9d0 0700 	ldrd	r0, r7, [r0]
 8010df2:	4692      	mov	sl, r2
 8010df4:	f104 0908 	add.w	r9, r4, #8
 8010df8:	1ab2      	subs	r2, r6, r2
 8010dfa:	443a      	add	r2, r7
 8010dfc:	4581      	cmp	r9, r0
 8010dfe:	460d      	mov	r5, r1
 8010e00:	eba7 0101 	sub.w	r1, r7, r1
 8010e04:	9201      	str	r2, [sp, #4]
 8010e06:	eba1 070a 	sub.w	r7, r1, sl
 8010e0a:	bf14      	ite	ne
 8010e0c:	68a2      	ldrne	r2, [r4, #8]
 8010e0e:	220f      	moveq	r2, #15
 8010e10:	a901      	add	r1, sp, #4
 8010e12:	4620      	mov	r0, r4
 8010e14:	469b      	mov	fp, r3
 8010e16:	f7ff ff8b 	bl	8010d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010e1a:	4680      	mov	r8, r0
 8010e1c:	b125      	cbz	r5, 8010e28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x44>
 8010e1e:	2d01      	cmp	r5, #1
 8010e20:	6821      	ldr	r1, [r4, #0]
 8010e22:	d127      	bne.n	8010e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x90>
 8010e24:	780b      	ldrb	r3, [r1, #0]
 8010e26:	7003      	strb	r3, [r0, #0]
 8010e28:	f1bb 0f00 	cmp.w	fp, #0
 8010e2c:	d000      	beq.n	8010e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8010e2e:	b9c6      	cbnz	r6, 8010e62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x7e>
 8010e30:	6820      	ldr	r0, [r4, #0]
 8010e32:	b15f      	cbz	r7, 8010e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x68>
 8010e34:	442e      	add	r6, r5
 8010e36:	2f01      	cmp	r7, #1
 8010e38:	4455      	add	r5, sl
 8010e3a:	eb08 0306 	add.w	r3, r8, r6
 8010e3e:	eb00 0105 	add.w	r1, r0, r5
 8010e42:	d11b      	bne.n	8010e7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x98>
 8010e44:	5d43      	ldrb	r3, [r0, r5]
 8010e46:	f808 3006 	strb.w	r3, [r8, r6]
 8010e4a:	6820      	ldr	r0, [r4, #0]
 8010e4c:	4581      	cmp	r9, r0
 8010e4e:	d001      	beq.n	8010e54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x70>
 8010e50:	f7ff fc68 	bl	8010724 <_ZdlPv>
 8010e54:	9b01      	ldr	r3, [sp, #4]
 8010e56:	f8c4 8000 	str.w	r8, [r4]
 8010e5a:	60a3      	str	r3, [r4, #8]
 8010e5c:	b003      	add	sp, #12
 8010e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e62:	2e01      	cmp	r6, #1
 8010e64:	eb08 0005 	add.w	r0, r8, r5
 8010e68:	d10e      	bne.n	8010e88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0xa4>
 8010e6a:	f89b 3000 	ldrb.w	r3, [fp]
 8010e6e:	f808 3005 	strb.w	r3, [r8, r5]
 8010e72:	e7dd      	b.n	8010e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8010e74:	462a      	mov	r2, r5
 8010e76:	f002 f968 	bl	801314a <memcpy>
 8010e7a:	e7d5      	b.n	8010e28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x44>
 8010e7c:	463a      	mov	r2, r7
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f002 f963 	bl	801314a <memcpy>
 8010e84:	6820      	ldr	r0, [r4, #0]
 8010e86:	e7e1      	b.n	8010e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x68>
 8010e88:	4659      	mov	r1, fp
 8010e8a:	4632      	mov	r2, r6
 8010e8c:	f002 f95d 	bl	801314a <memcpy>
 8010e90:	e7ce      	b.n	8010e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8010e92:	bf00      	nop

08010e94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8010e94:	2200      	movs	r2, #0
 8010e96:	f100 0108 	add.w	r1, r0, #8
 8010e9a:	e9c0 1200 	strd	r1, r2, [r0]
 8010e9e:	7202      	strb	r2, [r0, #8]
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop

08010ea4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8010ea4:	b4f0      	push	{r4, r5, r6, r7}
 8010ea6:	460b      	mov	r3, r1
 8010ea8:	f100 0408 	add.w	r4, r0, #8
 8010eac:	6004      	str	r4, [r0, #0]
 8010eae:	f853 2b08 	ldr.w	r2, [r3], #8
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d00a      	beq.n	8010ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x28>
 8010eb6:	6002      	str	r2, [r0, #0]
 8010eb8:	688a      	ldr	r2, [r1, #8]
 8010eba:	6082      	str	r2, [r0, #8]
 8010ebc:	684a      	ldr	r2, [r1, #4]
 8010ebe:	6042      	str	r2, [r0, #4]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	e9c1 3200 	strd	r3, r2, [r1]
 8010ec6:	720a      	strb	r2, [r1, #8]
 8010ec8:	bcf0      	pop	{r4, r5, r6, r7}
 8010eca:	4770      	bx	lr
 8010ecc:	681f      	ldr	r7, [r3, #0]
 8010ece:	685e      	ldr	r6, [r3, #4]
 8010ed0:	689d      	ldr	r5, [r3, #8]
 8010ed2:	68da      	ldr	r2, [r3, #12]
 8010ed4:	6142      	str	r2, [r0, #20]
 8010ed6:	6087      	str	r7, [r0, #8]
 8010ed8:	60c6      	str	r6, [r0, #12]
 8010eda:	6105      	str	r5, [r0, #16]
 8010edc:	e7ee      	b.n	8010ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x18>
 8010ede:	bf00      	nop

08010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8010ee0:	b510      	push	{r4, lr}
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	4604      	mov	r4, r0
 8010ee6:	f853 0b08 	ldr.w	r0, [r3], #8
 8010eea:	4298      	cmp	r0, r3
 8010eec:	d001      	beq.n	8010ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev+0x12>
 8010eee:	f7ff fc19 	bl	8010724 <_ZdlPv>
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	bd10      	pop	{r4, pc}
 8010ef6:	bf00      	nop

08010ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8010ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010efa:	460b      	mov	r3, r1
 8010efc:	4606      	mov	r6, r0
 8010efe:	f853 7b08 	ldr.w	r7, [r3], #8
 8010f02:	f856 2b08 	ldr.w	r2, [r6], #8
 8010f06:	42bb      	cmp	r3, r7
 8010f08:	460c      	mov	r4, r1
 8010f0a:	4605      	mov	r5, r0
 8010f0c:	d01a      	beq.n	8010f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 8010f0e:	4296      	cmp	r6, r2
 8010f10:	6007      	str	r7, [r0, #0]
 8010f12:	d00c      	beq.n	8010f2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x36>
 8010f14:	6849      	ldr	r1, [r1, #4]
 8010f16:	6041      	str	r1, [r0, #4]
 8010f18:	68a0      	ldr	r0, [r4, #8]
 8010f1a:	68a9      	ldr	r1, [r5, #8]
 8010f1c:	60a8      	str	r0, [r5, #8]
 8010f1e:	b152      	cbz	r2, 8010f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3e>
 8010f20:	2300      	movs	r3, #0
 8010f22:	6022      	str	r2, [r4, #0]
 8010f24:	60a1      	str	r1, [r4, #8]
 8010f26:	6063      	str	r3, [r4, #4]
 8010f28:	7013      	strb	r3, [r2, #0]
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f2e:	684a      	ldr	r2, [r1, #4]
 8010f30:	6042      	str	r2, [r0, #4]
 8010f32:	688a      	ldr	r2, [r1, #8]
 8010f34:	6082      	str	r2, [r0, #8]
 8010f36:	461a      	mov	r2, r3
 8010f38:	6023      	str	r3, [r4, #0]
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	6063      	str	r3, [r4, #4]
 8010f3e:	7013      	strb	r3, [r2, #0]
 8010f40:	4628      	mov	r0, r5
 8010f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f44:	f7ff ff18 	bl	8010d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8010f48:	6822      	ldr	r2, [r4, #0]
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	6063      	str	r3, [r4, #4]
 8010f4e:	7013      	strb	r3, [r2, #0]
 8010f50:	4628      	mov	r0, r5
 8010f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8010f54:	6802      	ldr	r2, [r0, #0]
 8010f56:	2300      	movs	r3, #0
 8010f58:	6043      	str	r3, [r0, #4]
 8010f5a:	7013      	strb	r3, [r2, #0]
 8010f5c:	4770      	bx	lr
 8010f5e:	bf00      	nop

08010f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj>:
 8010f60:	b508      	push	{r3, lr}
 8010f62:	6842      	ldr	r2, [r0, #4]
 8010f64:	4291      	cmp	r1, r2
 8010f66:	d202      	bcs.n	8010f6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj+0xe>
 8010f68:	6800      	ldr	r0, [r0, #0]
 8010f6a:	4408      	add	r0, r1
 8010f6c:	bd08      	pop	{r3, pc}
 8010f6e:	4801      	ldr	r0, [pc, #4]	; (8010f74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEj+0x14>)
 8010f70:	f7ff feae 	bl	8010cd0 <_ZSt24__throw_out_of_range_fmtPKcz>
 8010f74:	0801bea0 	.word	0x0801bea0

08010f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8010f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7c:	b085      	sub	sp, #20
 8010f7e:	4604      	mov	r4, r0
 8010f80:	4616      	mov	r6, r2
 8010f82:	6840      	ldr	r0, [r0, #4]
 8010f84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010f86:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8010f8a:	3a01      	subs	r2, #1
 8010f8c:	1a12      	subs	r2, r2, r0
 8010f8e:	4295      	cmp	r5, r2
 8010f90:	f200 80b2 	bhi.w	80110f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x180>
 8010f94:	4622      	mov	r2, r4
 8010f96:	eba5 0a06 	sub.w	sl, r5, r6
 8010f9a:	f852 8b08 	ldr.w	r8, [r2], #8
 8010f9e:	4590      	cmp	r8, r2
 8010fa0:	bf18      	it	ne
 8010fa2:	68a2      	ldrne	r2, [r4, #8]
 8010fa4:	eb00 070a 	add.w	r7, r0, sl
 8010fa8:	bf08      	it	eq
 8010faa:	220f      	moveq	r2, #15
 8010fac:	42ba      	cmp	r2, r7
 8010fae:	4689      	mov	r9, r1
 8010fb0:	d336      	bcc.n	8011020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8010fb2:	1a42      	subs	r2, r0, r1
 8010fb4:	1b92      	subs	r2, r2, r6
 8010fb6:	4543      	cmp	r3, r8
 8010fb8:	9202      	str	r2, [sp, #8]
 8010fba:	eb08 0b01 	add.w	fp, r8, r1
 8010fbe:	d21b      	bcs.n	8010ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x80>
 8010fc0:	9a02      	ldr	r2, [sp, #8]
 8010fc2:	b15a      	cbz	r2, 8010fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8010fc4:	42ae      	cmp	r6, r5
 8010fc6:	d009      	beq.n	8010fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8010fc8:	2a01      	cmp	r2, #1
 8010fca:	eb0b 0005 	add.w	r0, fp, r5
 8010fce:	eb0b 0106 	add.w	r1, fp, r6
 8010fd2:	d149      	bne.n	8011068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>
 8010fd4:	f81b 2006 	ldrb.w	r2, [fp, r6]
 8010fd8:	f80b 2005 	strb.w	r2, [fp, r5]
 8010fdc:	b125      	cbz	r5, 8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 8010fde:	2d01      	cmp	r5, #1
 8010fe0:	d124      	bne.n	801102c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb4>
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	f808 3009 	strb.w	r3, [r8, r9]
 8010fe8:	6823      	ldr	r3, [r4, #0]
 8010fea:	6067      	str	r7, [r4, #4]
 8010fec:	2200      	movs	r2, #0
 8010fee:	4620      	mov	r0, r4
 8010ff0:	55da      	strb	r2, [r3, r7]
 8010ff2:	b005      	add	sp, #20
 8010ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff8:	4440      	add	r0, r8
 8010ffa:	4283      	cmp	r3, r0
 8010ffc:	d8e0      	bhi.n	8010fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x48>
 8010ffe:	b315      	cbz	r5, 8011046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xce>
 8011000:	42ae      	cmp	r6, r5
 8011002:	d239      	bcs.n	8011078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x100>
 8011004:	9a02      	ldr	r2, [sp, #8]
 8011006:	bb1a      	cbnz	r2, 8011050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 8011008:	445e      	add	r6, fp
 801100a:	195a      	adds	r2, r3, r5
 801100c:	4296      	cmp	r6, r2
 801100e:	d344      	bcc.n	801109a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x122>
 8011010:	2d01      	cmp	r5, #1
 8011012:	d0e6      	beq.n	8010fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6a>
 8011014:	462a      	mov	r2, r5
 8011016:	4619      	mov	r1, r3
 8011018:	4658      	mov	r0, fp
 801101a:	f002 f8a1 	bl	8013160 <memmove>
 801101e:	e7e3      	b.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 8011020:	9500      	str	r5, [sp, #0]
 8011022:	4632      	mov	r2, r6
 8011024:	4620      	mov	r0, r4
 8011026:	f7ff fedd 	bl	8010de4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801102a:	e7dd      	b.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 801102c:	462a      	mov	r2, r5
 801102e:	4619      	mov	r1, r3
 8011030:	4658      	mov	r0, fp
 8011032:	f002 f88a 	bl	801314a <memcpy>
 8011036:	e7d7      	b.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 8011038:	4619      	mov	r1, r3
 801103a:	462a      	mov	r2, r5
 801103c:	4658      	mov	r0, fp
 801103e:	9303      	str	r3, [sp, #12]
 8011040:	f002 f88e 	bl	8013160 <memmove>
 8011044:	9b03      	ldr	r3, [sp, #12]
 8011046:	9a02      	ldr	r2, [sp, #8]
 8011048:	2a00      	cmp	r2, #0
 801104a:	d0cd      	beq.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 801104c:	42ae      	cmp	r6, r5
 801104e:	d0cb      	beq.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 8011050:	9a02      	ldr	r2, [sp, #8]
 8011052:	2a01      	cmp	r2, #1
 8011054:	eb0b 0005 	add.w	r0, fp, r5
 8011058:	eb0b 0106 	add.w	r1, fp, r6
 801105c:	d117      	bne.n	801108e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x116>
 801105e:	f81b 2006 	ldrb.w	r2, [fp, r6]
 8011062:	f80b 2005 	strb.w	r2, [fp, r5]
 8011066:	e00f      	b.n	8011088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x110>
 8011068:	9a02      	ldr	r2, [sp, #8]
 801106a:	9303      	str	r3, [sp, #12]
 801106c:	f002 f878 	bl	8013160 <memmove>
 8011070:	9b03      	ldr	r3, [sp, #12]
 8011072:	2d00      	cmp	r5, #0
 8011074:	d1b3      	bne.n	8010fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8011076:	e7b7      	b.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 8011078:	2d01      	cmp	r5, #1
 801107a:	d1dd      	bne.n	8011038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc0>
 801107c:	781a      	ldrb	r2, [r3, #0]
 801107e:	f808 2001 	strb.w	r2, [r8, r1]
 8011082:	9a02      	ldr	r2, [sp, #8]
 8011084:	2a00      	cmp	r2, #0
 8011086:	d1e1      	bne.n	801104c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd4>
 8011088:	42ae      	cmp	r6, r5
 801108a:	d3bd      	bcc.n	8011008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x90>
 801108c:	e7ac      	b.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 801108e:	9a02      	ldr	r2, [sp, #8]
 8011090:	9303      	str	r3, [sp, #12]
 8011092:	f002 f865 	bl	8013160 <memmove>
 8011096:	9b03      	ldr	r3, [sp, #12]
 8011098:	e7f6      	b.n	8011088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x110>
 801109a:	429e      	cmp	r6, r3
 801109c:	d808      	bhi.n	80110b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x138>
 801109e:	2d01      	cmp	r5, #1
 80110a0:	eb03 010a 	add.w	r1, r3, sl
 80110a4:	d018      	beq.n	80110d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x160>
 80110a6:	462a      	mov	r2, r5
 80110a8:	4658      	mov	r0, fp
 80110aa:	f002 f84e 	bl	801314a <memcpy>
 80110ae:	e79b      	b.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 80110b0:	1af6      	subs	r6, r6, r3
 80110b2:	2e01      	cmp	r6, #1
 80110b4:	d00c      	beq.n	80110d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x158>
 80110b6:	b9ce      	cbnz	r6, 80110ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x174>
 80110b8:	1baa      	subs	r2, r5, r6
 80110ba:	2a01      	cmp	r2, #1
 80110bc:	eb0b 0006 	add.w	r0, fp, r6
 80110c0:	eb0b 0105 	add.w	r1, fp, r5
 80110c4:	d00d      	beq.n	80110e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x16a>
 80110c6:	2a00      	cmp	r2, #0
 80110c8:	d08e      	beq.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 80110ca:	f002 f83e 	bl	801314a <memcpy>
 80110ce:	e78b      	b.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	f808 3009 	strb.w	r3, [r8, r9]
 80110d6:	e7ef      	b.n	80110b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x140>
 80110d8:	f813 300a 	ldrb.w	r3, [r3, sl]
 80110dc:	f808 3009 	strb.w	r3, [r8, r9]
 80110e0:	e782      	b.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 80110e2:	f81b 3005 	ldrb.w	r3, [fp, r5]
 80110e6:	f80b 3006 	strb.w	r3, [fp, r6]
 80110ea:	e77d      	b.n	8010fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x70>
 80110ec:	4619      	mov	r1, r3
 80110ee:	4632      	mov	r2, r6
 80110f0:	4658      	mov	r0, fp
 80110f2:	f002 f835 	bl	8013160 <memmove>
 80110f6:	e7df      	b.n	80110b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x140>
 80110f8:	4801      	ldr	r0, [pc, #4]	; (8011100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x188>)
 80110fa:	f7ff fdb9 	bl	8010c70 <_ZSt20__throw_length_errorPKc>
 80110fe:	bf00      	nop
 8011100:	0801bf34 	.word	0x0801bf34

08011104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8011104:	b530      	push	{r4, r5, lr}
 8011106:	4604      	mov	r4, r0
 8011108:	b083      	sub	sp, #12
 801110a:	4608      	mov	r0, r1
 801110c:	460d      	mov	r5, r1
 801110e:	f7f5 fe31 	bl	8006d74 <strlen>
 8011112:	6862      	ldr	r2, [r4, #4]
 8011114:	9000      	str	r0, [sp, #0]
 8011116:	462b      	mov	r3, r5
 8011118:	4620      	mov	r0, r4
 801111a:	2100      	movs	r1, #0
 801111c:	f7ff ff2c 	bl	8010f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8011120:	b003      	add	sp, #12
 8011122:	bd30      	pop	{r4, r5, pc}

08011124 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8011124:	6800      	ldr	r0, [r0, #0]
 8011126:	4770      	bx	lr

08011128 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 8011128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801112c:	6845      	ldr	r5, [r0, #4]
 801112e:	b933      	cbnz	r3, 801113e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
 8011130:	4295      	cmp	r5, r2
 8011132:	bf2c      	ite	cs
 8011134:	4610      	movcs	r0, r2
 8011136:	f04f 30ff 	movcc.w	r0, #4294967295
 801113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801113e:	4295      	cmp	r5, r2
 8011140:	d926      	bls.n	8011190 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x68>
 8011142:	f8d0 9000 	ldr.w	r9, [r0]
 8011146:	f891 8000 	ldrb.w	r8, [r1]
 801114a:	eba5 0c02 	sub.w	ip, r5, r2
 801114e:	4563      	cmp	r3, ip
 8011150:	eb09 0e02 	add.w	lr, r9, r2
 8011154:	444d      	add	r5, r9
 8011156:	d81b      	bhi.n	8011190 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x68>
 8011158:	f1c3 0601 	rsb	r6, r3, #1
 801115c:	eb16 020c 	adds.w	r2, r6, ip
 8011160:	461c      	mov	r4, r3
 8011162:	460f      	mov	r7, r1
 8011164:	d10b      	bne.n	801117e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x56>
 8011166:	e013      	b.n	8011190 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x68>
 8011168:	f001 ffe0 	bl	801312c <memcmp>
 801116c:	f10a 0e01 	add.w	lr, sl, #1
 8011170:	eba5 020e 	sub.w	r2, r5, lr
 8011174:	b180      	cbz	r0, 8011198 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x70>
 8011176:	4294      	cmp	r4, r2
 8011178:	d80a      	bhi.n	8011190 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x68>
 801117a:	18b2      	adds	r2, r6, r2
 801117c:	d008      	beq.n	8011190 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x68>
 801117e:	4641      	mov	r1, r8
 8011180:	4670      	mov	r0, lr
 8011182:	f7f5 fd9d 	bl	8006cc0 <memchr>
 8011186:	4622      	mov	r2, r4
 8011188:	4682      	mov	sl, r0
 801118a:	4639      	mov	r1, r7
 801118c:	2800      	cmp	r0, #0
 801118e:	d1eb      	bne.n	8011168 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x40>
 8011190:	f04f 30ff 	mov.w	r0, #4294967295
 8011194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011198:	ebaa 0009 	sub.w	r0, sl, r9
 801119c:	e7cd      	b.n	801113a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x12>
 801119e:	bf00      	nop

080111a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
 80111a0:	b570      	push	{r4, r5, r6, lr}
 80111a2:	4605      	mov	r5, r0
 80111a4:	4608      	mov	r0, r1
 80111a6:	460c      	mov	r4, r1
 80111a8:	4616      	mov	r6, r2
 80111aa:	f7f5 fde3 	bl	8006d74 <strlen>
 80111ae:	4632      	mov	r2, r6
 80111b0:	4603      	mov	r3, r0
 80111b2:	4621      	mov	r1, r4
 80111b4:	4628      	mov	r0, r5
 80111b6:	f7ff ffb7 	bl	8011128 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 80111ba:	bd70      	pop	{r4, r5, r6, pc}

080111bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 80111bc:	b538      	push	{r3, r4, r5, lr}
 80111be:	6844      	ldr	r4, [r0, #4]
 80111c0:	42a2      	cmp	r2, r4
 80111c2:	d208      	bcs.n	80111d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x1a>
 80111c4:	6805      	ldr	r5, [r0, #0]
 80111c6:	4613      	mov	r3, r2
 80111c8:	18e8      	adds	r0, r5, r3
 80111ca:	1aa2      	subs	r2, r4, r2
 80111cc:	f7f5 fd78 	bl	8006cc0 <memchr>
 80111d0:	b108      	cbz	r0, 80111d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x1a>
 80111d2:	1b40      	subs	r0, r0, r5
 80111d4:	bd38      	pop	{r3, r4, r5, pc}
 80111d6:	f04f 30ff 	mov.w	r0, #4294967295
 80111da:	bd38      	pop	{r3, r4, r5, pc}

080111dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcj>:
 80111dc:	b508      	push	{r3, lr}
 80111de:	f7ff ffed 	bl	80111bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80111e2:	bd08      	pop	{r3, pc}

080111e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80111e4:	b570      	push	{r4, r5, r6, lr}
 80111e6:	4605      	mov	r5, r0
 80111e8:	b082      	sub	sp, #8
 80111ea:	b1f1      	cbz	r1, 801122a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x46>
 80111ec:	1a54      	subs	r4, r2, r1
 80111ee:	2c0f      	cmp	r4, #15
 80111f0:	460e      	mov	r6, r1
 80111f2:	9401      	str	r4, [sp, #4]
 80111f4:	d80c      	bhi.n	8011210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2c>
 80111f6:	6802      	ldr	r2, [r0, #0]
 80111f8:	2c01      	cmp	r4, #1
 80111fa:	4610      	mov	r0, r2
 80111fc:	d119      	bne.n	8011232 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x4e>
 80111fe:	780b      	ldrb	r3, [r1, #0]
 8011200:	7013      	strb	r3, [r2, #0]
 8011202:	682a      	ldr	r2, [r5, #0]
 8011204:	9b01      	ldr	r3, [sp, #4]
 8011206:	606b      	str	r3, [r5, #4]
 8011208:	2100      	movs	r1, #0
 801120a:	54d1      	strb	r1, [r2, r3]
 801120c:	b002      	add	sp, #8
 801120e:	bd70      	pop	{r4, r5, r6, pc}
 8011210:	2200      	movs	r2, #0
 8011212:	a901      	add	r1, sp, #4
 8011214:	f7ff fd8c 	bl	8010d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011218:	9b01      	ldr	r3, [sp, #4]
 801121a:	6028      	str	r0, [r5, #0]
 801121c:	60ab      	str	r3, [r5, #8]
 801121e:	4622      	mov	r2, r4
 8011220:	4631      	mov	r1, r6
 8011222:	f001 ff92 	bl	801314a <memcpy>
 8011226:	682a      	ldr	r2, [r5, #0]
 8011228:	e7ec      	b.n	8011204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x20>
 801122a:	b92a      	cbnz	r2, 8011238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x54>
 801122c:	9201      	str	r2, [sp, #4]
 801122e:	6802      	ldr	r2, [r0, #0]
 8011230:	e7e8      	b.n	8011204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x20>
 8011232:	2c00      	cmp	r4, #0
 8011234:	d0e6      	beq.n	8011204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x20>
 8011236:	e7f2      	b.n	801121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x3a>
 8011238:	4801      	ldr	r0, [pc, #4]	; (8011240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x5c>)
 801123a:	f7ff fce9 	bl	8010c10 <_ZSt19__throw_logic_errorPKc>
 801123e:	bf00      	nop
 8011240:	0801bf50 	.word	0x0801bf50

08011244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8011244:	b510      	push	{r4, lr}
 8011246:	f100 0308 	add.w	r3, r0, #8
 801124a:	6003      	str	r3, [r0, #0]
 801124c:	e9d1 3200 	ldrd	r3, r2, [r1]
 8011250:	4604      	mov	r4, r0
 8011252:	4619      	mov	r1, r3
 8011254:	441a      	add	r2, r3
 8011256:	f04f 0300 	mov.w	r3, #0
 801125a:	f7ff ffc3 	bl	80111e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801125e:	4620      	mov	r0, r4
 8011260:	bd10      	pop	{r4, pc}
 8011262:	bf00      	nop

08011264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8011264:	b570      	push	{r4, r5, r6, lr}
 8011266:	4605      	mov	r5, r0
 8011268:	b082      	sub	sp, #8
 801126a:	b1f1      	cbz	r1, 80112aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x46>
 801126c:	1a54      	subs	r4, r2, r1
 801126e:	2c0f      	cmp	r4, #15
 8011270:	460e      	mov	r6, r1
 8011272:	9401      	str	r4, [sp, #4]
 8011274:	d80c      	bhi.n	8011290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2c>
 8011276:	6802      	ldr	r2, [r0, #0]
 8011278:	2c01      	cmp	r4, #1
 801127a:	4610      	mov	r0, r2
 801127c:	d119      	bne.n	80112b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x4e>
 801127e:	780b      	ldrb	r3, [r1, #0]
 8011280:	7013      	strb	r3, [r2, #0]
 8011282:	682a      	ldr	r2, [r5, #0]
 8011284:	9b01      	ldr	r3, [sp, #4]
 8011286:	606b      	str	r3, [r5, #4]
 8011288:	2100      	movs	r1, #0
 801128a:	54d1      	strb	r1, [r2, r3]
 801128c:	b002      	add	sp, #8
 801128e:	bd70      	pop	{r4, r5, r6, pc}
 8011290:	2200      	movs	r2, #0
 8011292:	a901      	add	r1, sp, #4
 8011294:	f7ff fd4c 	bl	8010d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011298:	9b01      	ldr	r3, [sp, #4]
 801129a:	6028      	str	r0, [r5, #0]
 801129c:	60ab      	str	r3, [r5, #8]
 801129e:	4622      	mov	r2, r4
 80112a0:	4631      	mov	r1, r6
 80112a2:	f001 ff52 	bl	801314a <memcpy>
 80112a6:	682a      	ldr	r2, [r5, #0]
 80112a8:	e7ec      	b.n	8011284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x20>
 80112aa:	b92a      	cbnz	r2, 80112b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x54>
 80112ac:	9201      	str	r2, [sp, #4]
 80112ae:	6802      	ldr	r2, [r0, #0]
 80112b0:	e7e8      	b.n	8011284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x20>
 80112b2:	2c00      	cmp	r4, #0
 80112b4:	d0e6      	beq.n	8011284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x20>
 80112b6:	e7f2      	b.n	801129e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3a>
 80112b8:	4801      	ldr	r0, [pc, #4]	; (80112c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x5c>)
 80112ba:	f7ff fca9 	bl	8010c10 <_ZSt19__throw_logic_errorPKc>
 80112be:	bf00      	nop
 80112c0:	0801bf50 	.word	0x0801bf50

080112c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80112c4:	b570      	push	{r4, r5, r6, lr}
 80112c6:	684d      	ldr	r5, [r1, #4]
 80112c8:	42aa      	cmp	r2, r5
 80112ca:	d813      	bhi.n	80112f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x30>
 80112cc:	f100 0508 	add.w	r5, r0, #8
 80112d0:	6005      	str	r5, [r0, #0]
 80112d2:	e9d1 1500 	ldrd	r1, r5, [r1]
 80112d6:	42aa      	cmp	r2, r5
 80112d8:	4606      	mov	r6, r0
 80112da:	d810      	bhi.n	80112fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x3a>
 80112dc:	4411      	add	r1, r2
 80112de:	1aaa      	subs	r2, r5, r2
 80112e0:	429a      	cmp	r2, r3
 80112e2:	bf94      	ite	ls
 80112e4:	188a      	addls	r2, r1, r2
 80112e6:	18ca      	addhi	r2, r1, r3
 80112e8:	f04f 0300 	mov.w	r3, #0
 80112ec:	f7ff ffba 	bl	8011264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80112f0:	4630      	mov	r0, r6
 80112f2:	bd70      	pop	{r4, r5, r6, pc}
 80112f4:	462b      	mov	r3, r5
 80112f6:	4904      	ldr	r1, [pc, #16]	; (8011308 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x44>)
 80112f8:	4804      	ldr	r0, [pc, #16]	; (801130c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x48>)
 80112fa:	f7ff fce9 	bl	8010cd0 <_ZSt24__throw_out_of_range_fmtPKcz>
 80112fe:	462b      	mov	r3, r5
 8011300:	4903      	ldr	r1, [pc, #12]	; (8011310 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x4c>)
 8011302:	4802      	ldr	r0, [pc, #8]	; (801130c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x48>)
 8011304:	f7ff fce4 	bl	8010cd0 <_ZSt24__throw_out_of_range_fmtPKcz>
 8011308:	0801bee4 	.word	0x0801bee4
 801130c:	0801befc 	.word	0x0801befc
 8011310:	0801bf94 	.word	0x0801bf94

08011314 <_ZNSt9exceptionD1Ev>:
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop

08011318 <_ZNSt13bad_exceptionD1Ev>:
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop

0801131c <_ZGTtNKSt13bad_exception4whatEv>:
 801131c:	4800      	ldr	r0, [pc, #0]	; (8011320 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 801131e:	4770      	bx	lr
 8011320:	0801bfb0 	.word	0x0801bfb0

08011324 <_ZNSt13bad_exceptionD0Ev>:
 8011324:	b510      	push	{r4, lr}
 8011326:	2104      	movs	r1, #4
 8011328:	4604      	mov	r4, r0
 801132a:	f000 f8d5 	bl	80114d8 <_ZdlPvj>
 801132e:	4620      	mov	r0, r4
 8011330:	bd10      	pop	{r4, pc}
 8011332:	bf00      	nop

08011334 <_ZNSt9type_infoD1Ev>:
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop

08011338 <_ZNKSt9type_info14__is_pointer_pEv>:
 8011338:	2000      	movs	r0, #0
 801133a:	4770      	bx	lr

0801133c <_ZNKSt9type_infoeqERKS_>:
 801133c:	4281      	cmp	r1, r0
 801133e:	d00f      	beq.n	8011360 <_ZNKSt9type_infoeqERKS_+0x24>
 8011340:	b508      	push	{r3, lr}
 8011342:	6840      	ldr	r0, [r0, #4]
 8011344:	7803      	ldrb	r3, [r0, #0]
 8011346:	2b2a      	cmp	r3, #42	; 0x2a
 8011348:	d00c      	beq.n	8011364 <_ZNKSt9type_infoeqERKS_+0x28>
 801134a:	6849      	ldr	r1, [r1, #4]
 801134c:	780b      	ldrb	r3, [r1, #0]
 801134e:	2b2a      	cmp	r3, #42	; 0x2a
 8011350:	bf08      	it	eq
 8011352:	3101      	addeq	r1, #1
 8011354:	f7f5 fd04 	bl	8006d60 <strcmp>
 8011358:	fab0 f080 	clz	r0, r0
 801135c:	0940      	lsrs	r0, r0, #5
 801135e:	bd08      	pop	{r3, pc}
 8011360:	2001      	movs	r0, #1
 8011362:	4770      	bx	lr
 8011364:	2000      	movs	r0, #0
 8011366:	bd08      	pop	{r3, pc}

08011368 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8011368:	7803      	ldrb	r3, [r0, #0]
 801136a:	2b47      	cmp	r3, #71	; 0x47
 801136c:	d001      	beq.n	8011372 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 801136e:	2000      	movs	r0, #0
 8011370:	4770      	bx	lr
 8011372:	7843      	ldrb	r3, [r0, #1]
 8011374:	2b4e      	cmp	r3, #78	; 0x4e
 8011376:	d1fa      	bne.n	801136e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8011378:	7883      	ldrb	r3, [r0, #2]
 801137a:	2b55      	cmp	r3, #85	; 0x55
 801137c:	d1f7      	bne.n	801136e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801137e:	78c3      	ldrb	r3, [r0, #3]
 8011380:	2b43      	cmp	r3, #67	; 0x43
 8011382:	d1f4      	bne.n	801136e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8011384:	7903      	ldrb	r3, [r0, #4]
 8011386:	2b43      	cmp	r3, #67	; 0x43
 8011388:	d1f1      	bne.n	801136e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801138a:	7943      	ldrb	r3, [r0, #5]
 801138c:	2b2b      	cmp	r3, #43	; 0x2b
 801138e:	d1ee      	bne.n	801136e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8011390:	7983      	ldrb	r3, [r0, #6]
 8011392:	2b2b      	cmp	r3, #43	; 0x2b
 8011394:	d1eb      	bne.n	801136e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8011396:	79c0      	ldrb	r0, [r0, #7]
 8011398:	2801      	cmp	r0, #1
 801139a:	bf8c      	ite	hi
 801139c:	2000      	movhi	r0, #0
 801139e:	2001      	movls	r0, #1
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop

080113a4 <__cxa_call_terminate>:
 80113a4:	b510      	push	{r4, lr}
 80113a6:	b130      	cbz	r0, 80113b6 <__cxa_call_terminate+0x12>
 80113a8:	4604      	mov	r4, r0
 80113aa:	f7ff f807 	bl	80103bc <__cxa_begin_catch>
 80113ae:	4620      	mov	r0, r4
 80113b0:	f7ff ffda 	bl	8011368 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80113b4:	b908      	cbnz	r0, 80113ba <__cxa_call_terminate+0x16>
 80113b6:	f7ff f9cb 	bl	8010750 <_ZSt9terminatev>
 80113ba:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80113be:	f7ff f9b3 	bl	8010728 <_ZN10__cxxabiv111__terminateEPFvvE>
 80113c2:	bf00      	nop

080113c4 <__cxa_call_unexpected>:
 80113c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c8:	b085      	sub	sp, #20
 80113ca:	4602      	mov	r2, r0
 80113cc:	f7ff ffcc 	bl	8011368 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80113d0:	b150      	cbz	r0, 80113e8 <__cxa_call_unexpected+0x24>
 80113d2:	e952 8506 	ldrd	r8, r5, [r2, #-24]
 80113d6:	4610      	mov	r0, r2
 80113d8:	6a96      	ldr	r6, [r2, #40]	; 0x28
 80113da:	e9d2 740c 	ldrd	r7, r4, [r2, #48]	; 0x30
 80113de:	f7fe ffed 	bl	80103bc <__cxa_begin_catch>
 80113e2:	4640      	mov	r0, r8
 80113e4:	f7ff f9be 	bl	8010764 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 80113e8:	4610      	mov	r0, r2
 80113ea:	f7fe ffe7 	bl	80103bc <__cxa_begin_catch>
 80113ee:	f7ff f9bd 	bl	801076c <_ZSt10unexpectedv>
 80113f2:	f7fe ffe3 	bl	80103bc <__cxa_begin_catch>
 80113f6:	f7ff f9ab 	bl	8010750 <_ZSt9terminatev>
 80113fa:	f7fe ffdf 	bl	80103bc <__cxa_begin_catch>
 80113fe:	f7fe fbf9 	bl	800fbf4 <__cxa_get_globals_fast>
 8011402:	6803      	ldr	r3, [r0, #0]
 8011404:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8011408:	f10d 0a10 	add.w	sl, sp, #16
 801140c:	2a01      	cmp	r2, #1
 801140e:	bf0c      	ite	eq
 8011410:	681a      	ldreq	r2, [r3, #0]
 8011412:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 8011416:	f04f 0800 	mov.w	r8, #0
 801141a:	3320      	adds	r3, #32
 801141c:	f84a 2d08 	str.w	r2, [sl, #-8]!
 8011420:	f027 0b03 	bic.w	fp, r7, #3
 8011424:	9301      	str	r3, [sp, #4]
 8011426:	46c1      	mov	r9, r8
 8011428:	45b1      	cmp	r9, r6
 801142a:	da1b      	bge.n	8011464 <__cxa_call_unexpected+0xa0>
 801142c:	6827      	ldr	r7, [r4, #0]
 801142e:	b107      	cbz	r7, 8011432 <__cxa_call_unexpected+0x6e>
 8011430:	4427      	add	r7, r4
 8011432:	4653      	mov	r3, sl
 8011434:	2200      	movs	r2, #0
 8011436:	4639      	mov	r1, r7
 8011438:	9801      	ldr	r0, [sp, #4]
 801143a:	f7fe fb19 	bl	800fa70 <__cxa_type_match>
 801143e:	b9e8      	cbnz	r0, 801147c <__cxa_call_unexpected+0xb8>
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	4914      	ldr	r1, [pc, #80]	; (8011494 <__cxa_call_unexpected+0xd0>)
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	9300      	str	r3, [sp, #0]
 8011448:	aa04      	add	r2, sp, #16
 801144a:	2301      	movs	r3, #1
 801144c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8011450:	4638      	mov	r0, r7
 8011452:	9f00      	ldr	r7, [sp, #0]
 8011454:	47b8      	blx	r7
 8011456:	2800      	cmp	r0, #0
 8011458:	bf18      	it	ne
 801145a:	4680      	movne	r8, r0
 801145c:	f109 0901 	add.w	r9, r9, #1
 8011460:	445c      	add	r4, fp
 8011462:	e7e1      	b.n	8011428 <__cxa_call_unexpected+0x64>
 8011464:	f1b8 0f00 	cmp.w	r8, #0
 8011468:	d010      	beq.n	801148c <__cxa_call_unexpected+0xc8>
 801146a:	2004      	movs	r0, #4
 801146c:	f7ff fa12 	bl	8010894 <__cxa_allocate_exception>
 8011470:	4b09      	ldr	r3, [pc, #36]	; (8011498 <__cxa_call_unexpected+0xd4>)
 8011472:	6003      	str	r3, [r0, #0]
 8011474:	4a09      	ldr	r2, [pc, #36]	; (801149c <__cxa_call_unexpected+0xd8>)
 8011476:	4907      	ldr	r1, [pc, #28]	; (8011494 <__cxa_call_unexpected+0xd0>)
 8011478:	f7fe ff4a 	bl	8010310 <__cxa_throw>
 801147c:	f7fe ff64 	bl	8010348 <__cxa_rethrow>
 8011480:	f7fe ffdc 	bl	801043c <__cxa_end_catch>
 8011484:	f7fe ffda 	bl	801043c <__cxa_end_catch>
 8011488:	f7fe faeb 	bl	800fa62 <__cxa_end_cleanup>
 801148c:	4628      	mov	r0, r5
 801148e:	f7ff f94b 	bl	8010728 <_ZN10__cxxabiv111__terminateEPFvvE>
 8011492:	bf00      	nop
 8011494:	0801bfd4 	.word	0x0801bfd4
 8011498:	0801c058 	.word	0x0801c058
 801149c:	08011319 	.word	0x08011319

080114a0 <_ZNKSt9bad_alloc4whatEv>:
 80114a0:	4800      	ldr	r0, [pc, #0]	; (80114a4 <_ZNKSt9bad_alloc4whatEv+0x4>)
 80114a2:	4770      	bx	lr
 80114a4:	0801c07c 	.word	0x0801c07c

080114a8 <_ZNSt9bad_allocD1Ev>:
 80114a8:	b510      	push	{r4, lr}
 80114aa:	4b03      	ldr	r3, [pc, #12]	; (80114b8 <_ZNSt9bad_allocD1Ev+0x10>)
 80114ac:	6003      	str	r3, [r0, #0]
 80114ae:	4604      	mov	r4, r0
 80114b0:	f7ff ff30 	bl	8011314 <_ZNSt9exceptionD1Ev>
 80114b4:	4620      	mov	r0, r4
 80114b6:	bd10      	pop	{r4, pc}
 80114b8:	0801c0b0 	.word	0x0801c0b0

080114bc <_ZNSt9bad_allocD0Ev>:
 80114bc:	b510      	push	{r4, lr}
 80114be:	4b05      	ldr	r3, [pc, #20]	; (80114d4 <_ZNSt9bad_allocD0Ev+0x18>)
 80114c0:	6003      	str	r3, [r0, #0]
 80114c2:	4604      	mov	r4, r0
 80114c4:	f7ff ff26 	bl	8011314 <_ZNSt9exceptionD1Ev>
 80114c8:	4620      	mov	r0, r4
 80114ca:	2104      	movs	r1, #4
 80114cc:	f000 f804 	bl	80114d8 <_ZdlPvj>
 80114d0:	4620      	mov	r0, r4
 80114d2:	bd10      	pop	{r4, pc}
 80114d4:	0801c0b0 	.word	0x0801c0b0

080114d8 <_ZdlPvj>:
 80114d8:	f7ff b924 	b.w	8010724 <_ZdlPv>

080114dc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80114dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114de:	b09d      	sub	sp, #116	; 0x74
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	1a0c      	subs	r4, r1, r0
 80114e4:	4606      	mov	r6, r0
 80114e6:	2269      	movs	r2, #105	; 0x69
 80114e8:	490e      	ldr	r1, [pc, #56]	; (8011524 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80114ea:	1d38      	adds	r0, r7, #4
 80114ec:	f001 fe2d 	bl	801314a <memcpy>
 80114f0:	f104 0377 	add.w	r3, r4, #119	; 0x77
 80114f4:	f023 0307 	bic.w	r3, r3, #7
 80114f8:	ebad 0d03 	sub.w	sp, sp, r3
 80114fc:	466d      	mov	r5, sp
 80114fe:	1d39      	adds	r1, r7, #4
 8011500:	2268      	movs	r2, #104	; 0x68
 8011502:	4628      	mov	r0, r5
 8011504:	f001 fe21 	bl	801314a <memcpy>
 8011508:	4622      	mov	r2, r4
 801150a:	3401      	adds	r4, #1
 801150c:	4631      	mov	r1, r6
 801150e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8011512:	442c      	add	r4, r5
 8011514:	f001 fe19 	bl	801314a <memcpy>
 8011518:	2300      	movs	r3, #0
 801151a:	4628      	mov	r0, r5
 801151c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8011520:	f7ff fb76 	bl	8010c10 <_ZSt19__throw_logic_errorPKc>
 8011524:	0801c0c8 	.word	0x0801c0c8

08011528 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8011528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801152c:	af00      	add	r7, sp, #0
 801152e:	b086      	sub	sp, #24
 8011530:	46e8      	mov	r8, sp
 8011532:	f108 060c 	add.w	r6, r8, #12
 8011536:	f8df e044 	ldr.w	lr, [pc, #68]	; 801157c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 801153a:	f8df c044 	ldr.w	ip, [pc, #68]	; 8011580 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x58>
 801153e:	4635      	mov	r5, r6
 8011540:	fbac 4302 	umull	r4, r3, ip, r2
 8011544:	08db      	lsrs	r3, r3, #3
 8011546:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 801154a:	eba2 0444 	sub.w	r4, r2, r4, lsl #1
 801154e:	461a      	mov	r2, r3
 8011550:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8011554:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011558:	2a00      	cmp	r2, #0
 801155a:	d1f1      	bne.n	8011540 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 801155c:	1b75      	subs	r5, r6, r5
 801155e:	428d      	cmp	r5, r1
 8011560:	d809      	bhi.n	8011576 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4e>
 8011562:	f1c5 010c 	rsb	r1, r5, #12
 8011566:	4441      	add	r1, r8
 8011568:	462a      	mov	r2, r5
 801156a:	f001 fdee 	bl	801314a <memcpy>
 801156e:	4628      	mov	r0, r5
 8011570:	46bd      	mov	sp, r7
 8011572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011576:	f04f 35ff 	mov.w	r5, #4294967295
 801157a:	e7f8      	b.n	801156e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x46>
 801157c:	0801c0bc 	.word	0x0801c0bc
 8011580:	cccccccd 	.word	0xcccccccd

08011584 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8011584:	3901      	subs	r1, #1
 8011586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801158a:	4607      	mov	r7, r0
 801158c:	1846      	adds	r6, r0, r1
 801158e:	4615      	mov	r5, r2
 8011590:	4604      	mov	r4, r0
 8011592:	e002      	b.n	801159a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x16>
 8011594:	7022      	strb	r2, [r4, #0]
 8011596:	3501      	adds	r5, #1
 8011598:	3401      	adds	r4, #1
 801159a:	782a      	ldrb	r2, [r5, #0]
 801159c:	b1f2      	cbz	r2, 80115dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x58>
 801159e:	42b4      	cmp	r4, r6
 80115a0:	d233      	bcs.n	801160a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x86>
 80115a2:	2a25      	cmp	r2, #37	; 0x25
 80115a4:	d1f6      	bne.n	8011594 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80115a6:	7869      	ldrb	r1, [r5, #1]
 80115a8:	2973      	cmp	r1, #115	; 0x73
 80115aa:	d01b      	beq.n	80115e4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x60>
 80115ac:	297a      	cmp	r1, #122	; 0x7a
 80115ae:	d003      	beq.n	80115b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 80115b0:	2925      	cmp	r1, #37	; 0x25
 80115b2:	d1ef      	bne.n	8011594 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80115b4:	3501      	adds	r5, #1
 80115b6:	e7ed      	b.n	8011594 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80115b8:	78a9      	ldrb	r1, [r5, #2]
 80115ba:	2975      	cmp	r1, #117	; 0x75
 80115bc:	d1ea      	bne.n	8011594 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	1b31      	subs	r1, r6, r4
 80115c2:	4620      	mov	r0, r4
 80115c4:	f103 0804 	add.w	r8, r3, #4
 80115c8:	f7ff ffae 	bl	8011528 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80115cc:	2800      	cmp	r0, #0
 80115ce:	dd1c      	ble.n	801160a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x86>
 80115d0:	3503      	adds	r5, #3
 80115d2:	782a      	ldrb	r2, [r5, #0]
 80115d4:	4404      	add	r4, r0
 80115d6:	4643      	mov	r3, r8
 80115d8:	2a00      	cmp	r2, #0
 80115da:	d1e0      	bne.n	801159e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1a>
 80115dc:	7022      	strb	r2, [r4, #0]
 80115de:	1be0      	subs	r0, r4, r7
 80115e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e4:	6819      	ldr	r1, [r3, #0]
 80115e6:	780a      	ldrb	r2, [r1, #0]
 80115e8:	3304      	adds	r3, #4
 80115ea:	b912      	cbnz	r2, 80115f2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80115ec:	e007      	b.n	80115fe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80115ee:	42a6      	cmp	r6, r4
 80115f0:	d007      	beq.n	8011602 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 80115f2:	f804 2b01 	strb.w	r2, [r4], #1
 80115f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80115fa:	2a00      	cmp	r2, #0
 80115fc:	d1f7      	bne.n	80115ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 80115fe:	3502      	adds	r5, #2
 8011600:	e7cb      	b.n	801159a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x16>
 8011602:	4631      	mov	r1, r6
 8011604:	4638      	mov	r0, r7
 8011606:	f7ff ff69 	bl	80114dc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801160a:	4621      	mov	r1, r4
 801160c:	4638      	mov	r0, r7
 801160e:	f7ff ff65 	bl	80114dc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8011612:	bf00      	nop

08011614 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 8011614:	b570      	push	{r4, r5, r6, lr}
 8011616:	4b3c      	ldr	r3, [pc, #240]	; (8011708 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 8011618:	781a      	ldrb	r2, [r3, #0]
 801161a:	b082      	sub	sp, #8
 801161c:	2a00      	cmp	r2, #0
 801161e:	d135      	bne.n	801168c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 8011620:	2401      	movs	r4, #1
 8011622:	701c      	strb	r4, [r3, #0]
 8011624:	f000 f87e 	bl	8011724 <__cxa_current_exception_type>
 8011628:	2800      	cmp	r0, #0
 801162a:	d03d      	beq.n	80116a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x94>
 801162c:	6844      	ldr	r4, [r0, #4]
 801162e:	4d37      	ldr	r5, [pc, #220]	; (801170c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8011630:	7823      	ldrb	r3, [r4, #0]
 8011632:	2b2a      	cmp	r3, #42	; 0x2a
 8011634:	ab02      	add	r3, sp, #8
 8011636:	f04f 32ff 	mov.w	r2, #4294967295
 801163a:	bf08      	it	eq
 801163c:	3401      	addeq	r4, #1
 801163e:	f843 2d04 	str.w	r2, [r3, #-4]!
 8011642:	2200      	movs	r2, #0
 8011644:	4611      	mov	r1, r2
 8011646:	4620      	mov	r0, r4
 8011648:	f7f5 fac2 	bl	8006bd0 <__cxa_demangle>
 801164c:	682b      	ldr	r3, [r5, #0]
 801164e:	4606      	mov	r6, r0
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	482f      	ldr	r0, [pc, #188]	; (8011710 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8011654:	2230      	movs	r2, #48	; 0x30
 8011656:	2101      	movs	r1, #1
 8011658:	f001 fa80 	bl	8012b5c <fwrite>
 801165c:	9b01      	ldr	r3, [sp, #4]
 801165e:	b17b      	cbz	r3, 8011680 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8011660:	682b      	ldr	r3, [r5, #0]
 8011662:	4620      	mov	r0, r4
 8011664:	68d9      	ldr	r1, [r3, #12]
 8011666:	f001 f8c7 	bl	80127f8 <fputs>
 801166a:	682b      	ldr	r3, [r5, #0]
 801166c:	4829      	ldr	r0, [pc, #164]	; (8011714 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	2202      	movs	r2, #2
 8011672:	2101      	movs	r1, #1
 8011674:	f001 fa72 	bl	8012b5c <fwrite>
 8011678:	9b01      	ldr	r3, [sp, #4]
 801167a:	b18b      	cbz	r3, 80116a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 801167c:	f7fe fe64 	bl	8010348 <__cxa_rethrow>
 8011680:	682b      	ldr	r3, [r5, #0]
 8011682:	4630      	mov	r0, r6
 8011684:	68d9      	ldr	r1, [r3, #12]
 8011686:	f001 f8b7 	bl	80127f8 <fputs>
 801168a:	e7ee      	b.n	801166a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 801168c:	4b1f      	ldr	r3, [pc, #124]	; (801170c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 801168e:	4822      	ldr	r0, [pc, #136]	; (8011718 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	221d      	movs	r2, #29
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	2101      	movs	r1, #1
 8011698:	f001 fa60 	bl	8012b5c <fwrite>
 801169c:	f001 f861 	bl	8012762 <abort>
 80116a0:	4630      	mov	r0, r6
 80116a2:	f001 fb05 	bl	8012cb0 <free>
 80116a6:	e7e9      	b.n	801167c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 80116a8:	4b18      	ldr	r3, [pc, #96]	; (801170c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80116aa:	481c      	ldr	r0, [pc, #112]	; (801171c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	4621      	mov	r1, r4
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	222d      	movs	r2, #45	; 0x2d
 80116b4:	f001 fa52 	bl	8012b5c <fwrite>
 80116b8:	f001 f853 	bl	8012762 <abort>
 80116bc:	2901      	cmp	r1, #1
 80116be:	460c      	mov	r4, r1
 80116c0:	d119      	bne.n	80116f6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe2>
 80116c2:	f7fe fe7b 	bl	80103bc <__cxa_begin_catch>
 80116c6:	6803      	ldr	r3, [r0, #0]
 80116c8:	689b      	ldr	r3, [r3, #8]
 80116ca:	4798      	blx	r3
 80116cc:	682b      	ldr	r3, [r5, #0]
 80116ce:	4606      	mov	r6, r0
 80116d0:	68db      	ldr	r3, [r3, #12]
 80116d2:	4813      	ldr	r0, [pc, #76]	; (8011720 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 80116d4:	4621      	mov	r1, r4
 80116d6:	220b      	movs	r2, #11
 80116d8:	f001 fa40 	bl	8012b5c <fwrite>
 80116dc:	682b      	ldr	r3, [r5, #0]
 80116de:	4630      	mov	r0, r6
 80116e0:	68d9      	ldr	r1, [r3, #12]
 80116e2:	f001 f889 	bl	80127f8 <fputs>
 80116e6:	682b      	ldr	r3, [r5, #0]
 80116e8:	200a      	movs	r0, #10
 80116ea:	68d9      	ldr	r1, [r3, #12]
 80116ec:	f7fb ff68 	bl	800d5c0 <fputc>
 80116f0:	f7fe fea4 	bl	801043c <__cxa_end_catch>
 80116f4:	e7e0      	b.n	80116b8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 80116f6:	f7fe fe61 	bl	80103bc <__cxa_begin_catch>
 80116fa:	f7fe fe9f 	bl	801043c <__cxa_end_catch>
 80116fe:	e7db      	b.n	80116b8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 8011700:	f7fe fe9c 	bl	801043c <__cxa_end_catch>
 8011704:	f7fe f9ad 	bl	800fa62 <__cxa_end_cleanup>
 8011708:	200010b0 	.word	0x200010b0
 801170c:	20000404 	.word	0x20000404
 8011710:	0801c154 	.word	0x0801c154
 8011714:	0801c188 	.word	0x0801c188
 8011718:	0801c134 	.word	0x0801c134
 801171c:	0801c18c 	.word	0x0801c18c
 8011720:	0801c1bc 	.word	0x0801c1bc

08011724 <__cxa_current_exception_type>:
 8011724:	b508      	push	{r3, lr}
 8011726:	f7fe fa69 	bl	800fbfc <__cxa_get_globals>
 801172a:	6800      	ldr	r0, [r0, #0]
 801172c:	b130      	cbz	r0, 801173c <__cxa_current_exception_type+0x18>
 801172e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8011732:	6800      	ldr	r0, [r0, #0]
 8011734:	2b01      	cmp	r3, #1
 8011736:	bf08      	it	eq
 8011738:	f850 0c78 	ldreq.w	r0, [r0, #-120]
 801173c:	bd08      	pop	{r3, pc}
 801173e:	bf00      	nop

08011740 <sin>:
 8011740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011742:	ec51 0b10 	vmov	r0, r1, d0
 8011746:	4a20      	ldr	r2, [pc, #128]	; (80117c8 <sin+0x88>)
 8011748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801174c:	4293      	cmp	r3, r2
 801174e:	dc07      	bgt.n	8011760 <sin+0x20>
 8011750:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80117c0 <sin+0x80>
 8011754:	2000      	movs	r0, #0
 8011756:	f000 fe37 	bl	80123c8 <__kernel_sin>
 801175a:	ec51 0b10 	vmov	r0, r1, d0
 801175e:	e007      	b.n	8011770 <sin+0x30>
 8011760:	4a1a      	ldr	r2, [pc, #104]	; (80117cc <sin+0x8c>)
 8011762:	4293      	cmp	r3, r2
 8011764:	dd09      	ble.n	801177a <sin+0x3a>
 8011766:	ee10 2a10 	vmov	r2, s0
 801176a:	460b      	mov	r3, r1
 801176c:	f7f5 fb0e 	bl	8006d8c <__aeabi_dsub>
 8011770:	ec41 0b10 	vmov	d0, r0, r1
 8011774:	b005      	add	sp, #20
 8011776:	f85d fb04 	ldr.w	pc, [sp], #4
 801177a:	4668      	mov	r0, sp
 801177c:	f000 f828 	bl	80117d0 <__ieee754_rem_pio2>
 8011780:	f000 0003 	and.w	r0, r0, #3
 8011784:	2801      	cmp	r0, #1
 8011786:	ed9d 1b02 	vldr	d1, [sp, #8]
 801178a:	ed9d 0b00 	vldr	d0, [sp]
 801178e:	d004      	beq.n	801179a <sin+0x5a>
 8011790:	2802      	cmp	r0, #2
 8011792:	d005      	beq.n	80117a0 <sin+0x60>
 8011794:	b970      	cbnz	r0, 80117b4 <sin+0x74>
 8011796:	2001      	movs	r0, #1
 8011798:	e7dd      	b.n	8011756 <sin+0x16>
 801179a:	f000 fa0d 	bl	8011bb8 <__kernel_cos>
 801179e:	e7dc      	b.n	801175a <sin+0x1a>
 80117a0:	2001      	movs	r0, #1
 80117a2:	f000 fe11 	bl	80123c8 <__kernel_sin>
 80117a6:	ec53 2b10 	vmov	r2, r3, d0
 80117aa:	ee10 0a10 	vmov	r0, s0
 80117ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80117b2:	e7dd      	b.n	8011770 <sin+0x30>
 80117b4:	f000 fa00 	bl	8011bb8 <__kernel_cos>
 80117b8:	e7f5      	b.n	80117a6 <sin+0x66>
 80117ba:	bf00      	nop
 80117bc:	f3af 8000 	nop.w
	...
 80117c8:	3fe921fb 	.word	0x3fe921fb
 80117cc:	7fefffff 	.word	0x7fefffff

080117d0 <__ieee754_rem_pio2>:
 80117d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d4:	ec57 6b10 	vmov	r6, r7, d0
 80117d8:	4bc3      	ldr	r3, [pc, #780]	; (8011ae8 <__ieee754_rem_pio2+0x318>)
 80117da:	b08d      	sub	sp, #52	; 0x34
 80117dc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80117e0:	4598      	cmp	r8, r3
 80117e2:	4604      	mov	r4, r0
 80117e4:	9704      	str	r7, [sp, #16]
 80117e6:	dc07      	bgt.n	80117f8 <__ieee754_rem_pio2+0x28>
 80117e8:	2200      	movs	r2, #0
 80117ea:	2300      	movs	r3, #0
 80117ec:	ed84 0b00 	vstr	d0, [r4]
 80117f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80117f4:	2500      	movs	r5, #0
 80117f6:	e027      	b.n	8011848 <__ieee754_rem_pio2+0x78>
 80117f8:	4bbc      	ldr	r3, [pc, #752]	; (8011aec <__ieee754_rem_pio2+0x31c>)
 80117fa:	4598      	cmp	r8, r3
 80117fc:	dc75      	bgt.n	80118ea <__ieee754_rem_pio2+0x11a>
 80117fe:	9b04      	ldr	r3, [sp, #16]
 8011800:	4dbb      	ldr	r5, [pc, #748]	; (8011af0 <__ieee754_rem_pio2+0x320>)
 8011802:	2b00      	cmp	r3, #0
 8011804:	ee10 0a10 	vmov	r0, s0
 8011808:	a3a9      	add	r3, pc, #676	; (adr r3, 8011ab0 <__ieee754_rem_pio2+0x2e0>)
 801180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180e:	4639      	mov	r1, r7
 8011810:	dd36      	ble.n	8011880 <__ieee754_rem_pio2+0xb0>
 8011812:	f7f5 fabb 	bl	8006d8c <__aeabi_dsub>
 8011816:	45a8      	cmp	r8, r5
 8011818:	4606      	mov	r6, r0
 801181a:	460f      	mov	r7, r1
 801181c:	d018      	beq.n	8011850 <__ieee754_rem_pio2+0x80>
 801181e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011ab8 <__ieee754_rem_pio2+0x2e8>)
 8011820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011824:	f7f5 fab2 	bl	8006d8c <__aeabi_dsub>
 8011828:	4602      	mov	r2, r0
 801182a:	460b      	mov	r3, r1
 801182c:	e9c4 2300 	strd	r2, r3, [r4]
 8011830:	4630      	mov	r0, r6
 8011832:	4639      	mov	r1, r7
 8011834:	f7f5 faaa 	bl	8006d8c <__aeabi_dsub>
 8011838:	a39f      	add	r3, pc, #636	; (adr r3, 8011ab8 <__ieee754_rem_pio2+0x2e8>)
 801183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183e:	f7f5 faa5 	bl	8006d8c <__aeabi_dsub>
 8011842:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011846:	2501      	movs	r5, #1
 8011848:	4628      	mov	r0, r5
 801184a:	b00d      	add	sp, #52	; 0x34
 801184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011850:	a39b      	add	r3, pc, #620	; (adr r3, 8011ac0 <__ieee754_rem_pio2+0x2f0>)
 8011852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011856:	f7f5 fa99 	bl	8006d8c <__aeabi_dsub>
 801185a:	a39b      	add	r3, pc, #620	; (adr r3, 8011ac8 <__ieee754_rem_pio2+0x2f8>)
 801185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011860:	4606      	mov	r6, r0
 8011862:	460f      	mov	r7, r1
 8011864:	f7f5 fa92 	bl	8006d8c <__aeabi_dsub>
 8011868:	4602      	mov	r2, r0
 801186a:	460b      	mov	r3, r1
 801186c:	e9c4 2300 	strd	r2, r3, [r4]
 8011870:	4630      	mov	r0, r6
 8011872:	4639      	mov	r1, r7
 8011874:	f7f5 fa8a 	bl	8006d8c <__aeabi_dsub>
 8011878:	a393      	add	r3, pc, #588	; (adr r3, 8011ac8 <__ieee754_rem_pio2+0x2f8>)
 801187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187e:	e7de      	b.n	801183e <__ieee754_rem_pio2+0x6e>
 8011880:	f7f5 fa86 	bl	8006d90 <__adddf3>
 8011884:	45a8      	cmp	r8, r5
 8011886:	4606      	mov	r6, r0
 8011888:	460f      	mov	r7, r1
 801188a:	d016      	beq.n	80118ba <__ieee754_rem_pio2+0xea>
 801188c:	a38a      	add	r3, pc, #552	; (adr r3, 8011ab8 <__ieee754_rem_pio2+0x2e8>)
 801188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011892:	f7f5 fa7d 	bl	8006d90 <__adddf3>
 8011896:	4602      	mov	r2, r0
 8011898:	460b      	mov	r3, r1
 801189a:	e9c4 2300 	strd	r2, r3, [r4]
 801189e:	4630      	mov	r0, r6
 80118a0:	4639      	mov	r1, r7
 80118a2:	f7f5 fa73 	bl	8006d8c <__aeabi_dsub>
 80118a6:	a384      	add	r3, pc, #528	; (adr r3, 8011ab8 <__ieee754_rem_pio2+0x2e8>)
 80118a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ac:	f7f5 fa70 	bl	8006d90 <__adddf3>
 80118b0:	f04f 35ff 	mov.w	r5, #4294967295
 80118b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80118b8:	e7c6      	b.n	8011848 <__ieee754_rem_pio2+0x78>
 80118ba:	a381      	add	r3, pc, #516	; (adr r3, 8011ac0 <__ieee754_rem_pio2+0x2f0>)
 80118bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c0:	f7f5 fa66 	bl	8006d90 <__adddf3>
 80118c4:	a380      	add	r3, pc, #512	; (adr r3, 8011ac8 <__ieee754_rem_pio2+0x2f8>)
 80118c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ca:	4606      	mov	r6, r0
 80118cc:	460f      	mov	r7, r1
 80118ce:	f7f5 fa5f 	bl	8006d90 <__adddf3>
 80118d2:	4602      	mov	r2, r0
 80118d4:	460b      	mov	r3, r1
 80118d6:	e9c4 2300 	strd	r2, r3, [r4]
 80118da:	4630      	mov	r0, r6
 80118dc:	4639      	mov	r1, r7
 80118de:	f7f5 fa55 	bl	8006d8c <__aeabi_dsub>
 80118e2:	a379      	add	r3, pc, #484	; (adr r3, 8011ac8 <__ieee754_rem_pio2+0x2f8>)
 80118e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e8:	e7e0      	b.n	80118ac <__ieee754_rem_pio2+0xdc>
 80118ea:	4b82      	ldr	r3, [pc, #520]	; (8011af4 <__ieee754_rem_pio2+0x324>)
 80118ec:	4598      	cmp	r8, r3
 80118ee:	f300 80d0 	bgt.w	8011a92 <__ieee754_rem_pio2+0x2c2>
 80118f2:	f000 fe23 	bl	801253c <fabs>
 80118f6:	ec57 6b10 	vmov	r6, r7, d0
 80118fa:	ee10 0a10 	vmov	r0, s0
 80118fe:	a374      	add	r3, pc, #464	; (adr r3, 8011ad0 <__ieee754_rem_pio2+0x300>)
 8011900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011904:	4639      	mov	r1, r7
 8011906:	f7f5 fbf9 	bl	80070fc <__aeabi_dmul>
 801190a:	2200      	movs	r2, #0
 801190c:	4b7a      	ldr	r3, [pc, #488]	; (8011af8 <__ieee754_rem_pio2+0x328>)
 801190e:	f7f5 fa3f 	bl	8006d90 <__adddf3>
 8011912:	f7f5 fea3 	bl	800765c <__aeabi_d2iz>
 8011916:	4605      	mov	r5, r0
 8011918:	f7f5 fb86 	bl	8007028 <__aeabi_i2d>
 801191c:	a364      	add	r3, pc, #400	; (adr r3, 8011ab0 <__ieee754_rem_pio2+0x2e0>)
 801191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011926:	f7f5 fbe9 	bl	80070fc <__aeabi_dmul>
 801192a:	4602      	mov	r2, r0
 801192c:	460b      	mov	r3, r1
 801192e:	4630      	mov	r0, r6
 8011930:	4639      	mov	r1, r7
 8011932:	f7f5 fa2b 	bl	8006d8c <__aeabi_dsub>
 8011936:	a360      	add	r3, pc, #384	; (adr r3, 8011ab8 <__ieee754_rem_pio2+0x2e8>)
 8011938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193c:	4682      	mov	sl, r0
 801193e:	468b      	mov	fp, r1
 8011940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011944:	f7f5 fbda 	bl	80070fc <__aeabi_dmul>
 8011948:	2d1f      	cmp	r5, #31
 801194a:	4606      	mov	r6, r0
 801194c:	460f      	mov	r7, r1
 801194e:	dc0c      	bgt.n	801196a <__ieee754_rem_pio2+0x19a>
 8011950:	1e6a      	subs	r2, r5, #1
 8011952:	4b6a      	ldr	r3, [pc, #424]	; (8011afc <__ieee754_rem_pio2+0x32c>)
 8011954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011958:	4543      	cmp	r3, r8
 801195a:	d006      	beq.n	801196a <__ieee754_rem_pio2+0x19a>
 801195c:	4632      	mov	r2, r6
 801195e:	463b      	mov	r3, r7
 8011960:	4650      	mov	r0, sl
 8011962:	4659      	mov	r1, fp
 8011964:	f7f5 fa12 	bl	8006d8c <__aeabi_dsub>
 8011968:	e00e      	b.n	8011988 <__ieee754_rem_pio2+0x1b8>
 801196a:	4632      	mov	r2, r6
 801196c:	463b      	mov	r3, r7
 801196e:	4650      	mov	r0, sl
 8011970:	4659      	mov	r1, fp
 8011972:	f7f5 fa0b 	bl	8006d8c <__aeabi_dsub>
 8011976:	ea4f 5328 	mov.w	r3, r8, asr #20
 801197a:	9305      	str	r3, [sp, #20]
 801197c:	9a05      	ldr	r2, [sp, #20]
 801197e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	2b10      	cmp	r3, #16
 8011986:	dc02      	bgt.n	801198e <__ieee754_rem_pio2+0x1be>
 8011988:	e9c4 0100 	strd	r0, r1, [r4]
 801198c:	e039      	b.n	8011a02 <__ieee754_rem_pio2+0x232>
 801198e:	a34c      	add	r3, pc, #304	; (adr r3, 8011ac0 <__ieee754_rem_pio2+0x2f0>)
 8011990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011998:	f7f5 fbb0 	bl	80070fc <__aeabi_dmul>
 801199c:	4606      	mov	r6, r0
 801199e:	460f      	mov	r7, r1
 80119a0:	4602      	mov	r2, r0
 80119a2:	460b      	mov	r3, r1
 80119a4:	4650      	mov	r0, sl
 80119a6:	4659      	mov	r1, fp
 80119a8:	f7f5 f9f0 	bl	8006d8c <__aeabi_dsub>
 80119ac:	4602      	mov	r2, r0
 80119ae:	460b      	mov	r3, r1
 80119b0:	4680      	mov	r8, r0
 80119b2:	4689      	mov	r9, r1
 80119b4:	4650      	mov	r0, sl
 80119b6:	4659      	mov	r1, fp
 80119b8:	f7f5 f9e8 	bl	8006d8c <__aeabi_dsub>
 80119bc:	4632      	mov	r2, r6
 80119be:	463b      	mov	r3, r7
 80119c0:	f7f5 f9e4 	bl	8006d8c <__aeabi_dsub>
 80119c4:	a340      	add	r3, pc, #256	; (adr r3, 8011ac8 <__ieee754_rem_pio2+0x2f8>)
 80119c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ca:	4606      	mov	r6, r0
 80119cc:	460f      	mov	r7, r1
 80119ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119d2:	f7f5 fb93 	bl	80070fc <__aeabi_dmul>
 80119d6:	4632      	mov	r2, r6
 80119d8:	463b      	mov	r3, r7
 80119da:	f7f5 f9d7 	bl	8006d8c <__aeabi_dsub>
 80119de:	4602      	mov	r2, r0
 80119e0:	460b      	mov	r3, r1
 80119e2:	4606      	mov	r6, r0
 80119e4:	460f      	mov	r7, r1
 80119e6:	4640      	mov	r0, r8
 80119e8:	4649      	mov	r1, r9
 80119ea:	f7f5 f9cf 	bl	8006d8c <__aeabi_dsub>
 80119ee:	9a05      	ldr	r2, [sp, #20]
 80119f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80119f4:	1ad3      	subs	r3, r2, r3
 80119f6:	2b31      	cmp	r3, #49	; 0x31
 80119f8:	dc20      	bgt.n	8011a3c <__ieee754_rem_pio2+0x26c>
 80119fa:	e9c4 0100 	strd	r0, r1, [r4]
 80119fe:	46c2      	mov	sl, r8
 8011a00:	46cb      	mov	fp, r9
 8011a02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011a06:	4650      	mov	r0, sl
 8011a08:	4642      	mov	r2, r8
 8011a0a:	464b      	mov	r3, r9
 8011a0c:	4659      	mov	r1, fp
 8011a0e:	f7f5 f9bd 	bl	8006d8c <__aeabi_dsub>
 8011a12:	463b      	mov	r3, r7
 8011a14:	4632      	mov	r2, r6
 8011a16:	f7f5 f9b9 	bl	8006d8c <__aeabi_dsub>
 8011a1a:	9b04      	ldr	r3, [sp, #16]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011a22:	f6bf af11 	bge.w	8011848 <__ieee754_rem_pio2+0x78>
 8011a26:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011a2a:	6063      	str	r3, [r4, #4]
 8011a2c:	f8c4 8000 	str.w	r8, [r4]
 8011a30:	60a0      	str	r0, [r4, #8]
 8011a32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a36:	60e3      	str	r3, [r4, #12]
 8011a38:	426d      	negs	r5, r5
 8011a3a:	e705      	b.n	8011848 <__ieee754_rem_pio2+0x78>
 8011a3c:	a326      	add	r3, pc, #152	; (adr r3, 8011ad8 <__ieee754_rem_pio2+0x308>)
 8011a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a46:	f7f5 fb59 	bl	80070fc <__aeabi_dmul>
 8011a4a:	4606      	mov	r6, r0
 8011a4c:	460f      	mov	r7, r1
 8011a4e:	4602      	mov	r2, r0
 8011a50:	460b      	mov	r3, r1
 8011a52:	4640      	mov	r0, r8
 8011a54:	4649      	mov	r1, r9
 8011a56:	f7f5 f999 	bl	8006d8c <__aeabi_dsub>
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	4682      	mov	sl, r0
 8011a60:	468b      	mov	fp, r1
 8011a62:	4640      	mov	r0, r8
 8011a64:	4649      	mov	r1, r9
 8011a66:	f7f5 f991 	bl	8006d8c <__aeabi_dsub>
 8011a6a:	4632      	mov	r2, r6
 8011a6c:	463b      	mov	r3, r7
 8011a6e:	f7f5 f98d 	bl	8006d8c <__aeabi_dsub>
 8011a72:	a31b      	add	r3, pc, #108	; (adr r3, 8011ae0 <__ieee754_rem_pio2+0x310>)
 8011a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a78:	4606      	mov	r6, r0
 8011a7a:	460f      	mov	r7, r1
 8011a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a80:	f7f5 fb3c 	bl	80070fc <__aeabi_dmul>
 8011a84:	4632      	mov	r2, r6
 8011a86:	463b      	mov	r3, r7
 8011a88:	f7f5 f980 	bl	8006d8c <__aeabi_dsub>
 8011a8c:	4606      	mov	r6, r0
 8011a8e:	460f      	mov	r7, r1
 8011a90:	e764      	b.n	801195c <__ieee754_rem_pio2+0x18c>
 8011a92:	4b1b      	ldr	r3, [pc, #108]	; (8011b00 <__ieee754_rem_pio2+0x330>)
 8011a94:	4598      	cmp	r8, r3
 8011a96:	dd35      	ble.n	8011b04 <__ieee754_rem_pio2+0x334>
 8011a98:	ee10 2a10 	vmov	r2, s0
 8011a9c:	463b      	mov	r3, r7
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	4639      	mov	r1, r7
 8011aa2:	f7f5 f973 	bl	8006d8c <__aeabi_dsub>
 8011aa6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011aaa:	e9c4 0100 	strd	r0, r1, [r4]
 8011aae:	e6a1      	b.n	80117f4 <__ieee754_rem_pio2+0x24>
 8011ab0:	54400000 	.word	0x54400000
 8011ab4:	3ff921fb 	.word	0x3ff921fb
 8011ab8:	1a626331 	.word	0x1a626331
 8011abc:	3dd0b461 	.word	0x3dd0b461
 8011ac0:	1a600000 	.word	0x1a600000
 8011ac4:	3dd0b461 	.word	0x3dd0b461
 8011ac8:	2e037073 	.word	0x2e037073
 8011acc:	3ba3198a 	.word	0x3ba3198a
 8011ad0:	6dc9c883 	.word	0x6dc9c883
 8011ad4:	3fe45f30 	.word	0x3fe45f30
 8011ad8:	2e000000 	.word	0x2e000000
 8011adc:	3ba3198a 	.word	0x3ba3198a
 8011ae0:	252049c1 	.word	0x252049c1
 8011ae4:	397b839a 	.word	0x397b839a
 8011ae8:	3fe921fb 	.word	0x3fe921fb
 8011aec:	4002d97b 	.word	0x4002d97b
 8011af0:	3ff921fb 	.word	0x3ff921fb
 8011af4:	413921fb 	.word	0x413921fb
 8011af8:	3fe00000 	.word	0x3fe00000
 8011afc:	0801ca2c 	.word	0x0801ca2c
 8011b00:	7fefffff 	.word	0x7fefffff
 8011b04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011b08:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011b0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011b10:	4630      	mov	r0, r6
 8011b12:	460f      	mov	r7, r1
 8011b14:	f7f5 fda2 	bl	800765c <__aeabi_d2iz>
 8011b18:	f7f5 fa86 	bl	8007028 <__aeabi_i2d>
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	460b      	mov	r3, r1
 8011b20:	4630      	mov	r0, r6
 8011b22:	4639      	mov	r1, r7
 8011b24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011b28:	f7f5 f930 	bl	8006d8c <__aeabi_dsub>
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	4b1f      	ldr	r3, [pc, #124]	; (8011bac <__ieee754_rem_pio2+0x3dc>)
 8011b30:	f7f5 fae4 	bl	80070fc <__aeabi_dmul>
 8011b34:	460f      	mov	r7, r1
 8011b36:	4606      	mov	r6, r0
 8011b38:	f7f5 fd90 	bl	800765c <__aeabi_d2iz>
 8011b3c:	f7f5 fa74 	bl	8007028 <__aeabi_i2d>
 8011b40:	4602      	mov	r2, r0
 8011b42:	460b      	mov	r3, r1
 8011b44:	4630      	mov	r0, r6
 8011b46:	4639      	mov	r1, r7
 8011b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b4c:	f7f5 f91e 	bl	8006d8c <__aeabi_dsub>
 8011b50:	2200      	movs	r2, #0
 8011b52:	4b16      	ldr	r3, [pc, #88]	; (8011bac <__ieee754_rem_pio2+0x3dc>)
 8011b54:	f7f5 fad2 	bl	80070fc <__aeabi_dmul>
 8011b58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011b5c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011b60:	f04f 0803 	mov.w	r8, #3
 8011b64:	2600      	movs	r6, #0
 8011b66:	2700      	movs	r7, #0
 8011b68:	4632      	mov	r2, r6
 8011b6a:	463b      	mov	r3, r7
 8011b6c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011b70:	f108 3aff 	add.w	sl, r8, #4294967295
 8011b74:	f7f5 fd2a 	bl	80075cc <__aeabi_dcmpeq>
 8011b78:	b9b0      	cbnz	r0, 8011ba8 <__ieee754_rem_pio2+0x3d8>
 8011b7a:	4b0d      	ldr	r3, [pc, #52]	; (8011bb0 <__ieee754_rem_pio2+0x3e0>)
 8011b7c:	9301      	str	r3, [sp, #4]
 8011b7e:	2302      	movs	r3, #2
 8011b80:	9300      	str	r3, [sp, #0]
 8011b82:	462a      	mov	r2, r5
 8011b84:	4643      	mov	r3, r8
 8011b86:	4621      	mov	r1, r4
 8011b88:	a806      	add	r0, sp, #24
 8011b8a:	f000 f8dd 	bl	8011d48 <__kernel_rem_pio2>
 8011b8e:	9b04      	ldr	r3, [sp, #16]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	4605      	mov	r5, r0
 8011b94:	f6bf ae58 	bge.w	8011848 <__ieee754_rem_pio2+0x78>
 8011b98:	6863      	ldr	r3, [r4, #4]
 8011b9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011b9e:	6063      	str	r3, [r4, #4]
 8011ba0:	68e3      	ldr	r3, [r4, #12]
 8011ba2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011ba6:	e746      	b.n	8011a36 <__ieee754_rem_pio2+0x266>
 8011ba8:	46d0      	mov	r8, sl
 8011baa:	e7dd      	b.n	8011b68 <__ieee754_rem_pio2+0x398>
 8011bac:	41700000 	.word	0x41700000
 8011bb0:	0801caac 	.word	0x0801caac
 8011bb4:	00000000 	.word	0x00000000

08011bb8 <__kernel_cos>:
 8011bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bbc:	ec59 8b10 	vmov	r8, r9, d0
 8011bc0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011bc4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011bc8:	ed2d 8b02 	vpush	{d8}
 8011bcc:	eeb0 8a41 	vmov.f32	s16, s2
 8011bd0:	eef0 8a61 	vmov.f32	s17, s3
 8011bd4:	da07      	bge.n	8011be6 <__kernel_cos+0x2e>
 8011bd6:	ee10 0a10 	vmov	r0, s0
 8011bda:	4649      	mov	r1, r9
 8011bdc:	f7f5 fd3e 	bl	800765c <__aeabi_d2iz>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	f000 8089 	beq.w	8011cf8 <__kernel_cos+0x140>
 8011be6:	4642      	mov	r2, r8
 8011be8:	464b      	mov	r3, r9
 8011bea:	4640      	mov	r0, r8
 8011bec:	4649      	mov	r1, r9
 8011bee:	f7f5 fa85 	bl	80070fc <__aeabi_dmul>
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	4b4e      	ldr	r3, [pc, #312]	; (8011d30 <__kernel_cos+0x178>)
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	460d      	mov	r5, r1
 8011bfa:	f7f5 fa7f 	bl	80070fc <__aeabi_dmul>
 8011bfe:	a340      	add	r3, pc, #256	; (adr r3, 8011d00 <__kernel_cos+0x148>)
 8011c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c04:	4682      	mov	sl, r0
 8011c06:	468b      	mov	fp, r1
 8011c08:	4620      	mov	r0, r4
 8011c0a:	4629      	mov	r1, r5
 8011c0c:	f7f5 fa76 	bl	80070fc <__aeabi_dmul>
 8011c10:	a33d      	add	r3, pc, #244	; (adr r3, 8011d08 <__kernel_cos+0x150>)
 8011c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c16:	f7f5 f8bb 	bl	8006d90 <__adddf3>
 8011c1a:	4622      	mov	r2, r4
 8011c1c:	462b      	mov	r3, r5
 8011c1e:	f7f5 fa6d 	bl	80070fc <__aeabi_dmul>
 8011c22:	a33b      	add	r3, pc, #236	; (adr r3, 8011d10 <__kernel_cos+0x158>)
 8011c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c28:	f7f5 f8b0 	bl	8006d8c <__aeabi_dsub>
 8011c2c:	4622      	mov	r2, r4
 8011c2e:	462b      	mov	r3, r5
 8011c30:	f7f5 fa64 	bl	80070fc <__aeabi_dmul>
 8011c34:	a338      	add	r3, pc, #224	; (adr r3, 8011d18 <__kernel_cos+0x160>)
 8011c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3a:	f7f5 f8a9 	bl	8006d90 <__adddf3>
 8011c3e:	4622      	mov	r2, r4
 8011c40:	462b      	mov	r3, r5
 8011c42:	f7f5 fa5b 	bl	80070fc <__aeabi_dmul>
 8011c46:	a336      	add	r3, pc, #216	; (adr r3, 8011d20 <__kernel_cos+0x168>)
 8011c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4c:	f7f5 f89e 	bl	8006d8c <__aeabi_dsub>
 8011c50:	4622      	mov	r2, r4
 8011c52:	462b      	mov	r3, r5
 8011c54:	f7f5 fa52 	bl	80070fc <__aeabi_dmul>
 8011c58:	a333      	add	r3, pc, #204	; (adr r3, 8011d28 <__kernel_cos+0x170>)
 8011c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5e:	f7f5 f897 	bl	8006d90 <__adddf3>
 8011c62:	4622      	mov	r2, r4
 8011c64:	462b      	mov	r3, r5
 8011c66:	f7f5 fa49 	bl	80070fc <__aeabi_dmul>
 8011c6a:	4622      	mov	r2, r4
 8011c6c:	462b      	mov	r3, r5
 8011c6e:	f7f5 fa45 	bl	80070fc <__aeabi_dmul>
 8011c72:	ec53 2b18 	vmov	r2, r3, d8
 8011c76:	4604      	mov	r4, r0
 8011c78:	460d      	mov	r5, r1
 8011c7a:	4640      	mov	r0, r8
 8011c7c:	4649      	mov	r1, r9
 8011c7e:	f7f5 fa3d 	bl	80070fc <__aeabi_dmul>
 8011c82:	460b      	mov	r3, r1
 8011c84:	4602      	mov	r2, r0
 8011c86:	4629      	mov	r1, r5
 8011c88:	4620      	mov	r0, r4
 8011c8a:	f7f5 f87f 	bl	8006d8c <__aeabi_dsub>
 8011c8e:	4b29      	ldr	r3, [pc, #164]	; (8011d34 <__kernel_cos+0x17c>)
 8011c90:	429e      	cmp	r6, r3
 8011c92:	4680      	mov	r8, r0
 8011c94:	4689      	mov	r9, r1
 8011c96:	dc11      	bgt.n	8011cbc <__kernel_cos+0x104>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	460b      	mov	r3, r1
 8011c9c:	4650      	mov	r0, sl
 8011c9e:	4659      	mov	r1, fp
 8011ca0:	f7f5 f874 	bl	8006d8c <__aeabi_dsub>
 8011ca4:	460b      	mov	r3, r1
 8011ca6:	4924      	ldr	r1, [pc, #144]	; (8011d38 <__kernel_cos+0x180>)
 8011ca8:	4602      	mov	r2, r0
 8011caa:	2000      	movs	r0, #0
 8011cac:	f7f5 f86e 	bl	8006d8c <__aeabi_dsub>
 8011cb0:	ecbd 8b02 	vpop	{d8}
 8011cb4:	ec41 0b10 	vmov	d0, r0, r1
 8011cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cbc:	4b1f      	ldr	r3, [pc, #124]	; (8011d3c <__kernel_cos+0x184>)
 8011cbe:	491e      	ldr	r1, [pc, #120]	; (8011d38 <__kernel_cos+0x180>)
 8011cc0:	429e      	cmp	r6, r3
 8011cc2:	bfcc      	ite	gt
 8011cc4:	4d1e      	ldrgt	r5, [pc, #120]	; (8011d40 <__kernel_cos+0x188>)
 8011cc6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011cca:	2400      	movs	r4, #0
 8011ccc:	4622      	mov	r2, r4
 8011cce:	462b      	mov	r3, r5
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	f7f5 f85b 	bl	8006d8c <__aeabi_dsub>
 8011cd6:	4622      	mov	r2, r4
 8011cd8:	4606      	mov	r6, r0
 8011cda:	460f      	mov	r7, r1
 8011cdc:	462b      	mov	r3, r5
 8011cde:	4650      	mov	r0, sl
 8011ce0:	4659      	mov	r1, fp
 8011ce2:	f7f5 f853 	bl	8006d8c <__aeabi_dsub>
 8011ce6:	4642      	mov	r2, r8
 8011ce8:	464b      	mov	r3, r9
 8011cea:	f7f5 f84f 	bl	8006d8c <__aeabi_dsub>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	4639      	mov	r1, r7
 8011cf6:	e7d9      	b.n	8011cac <__kernel_cos+0xf4>
 8011cf8:	2000      	movs	r0, #0
 8011cfa:	490f      	ldr	r1, [pc, #60]	; (8011d38 <__kernel_cos+0x180>)
 8011cfc:	e7d8      	b.n	8011cb0 <__kernel_cos+0xf8>
 8011cfe:	bf00      	nop
 8011d00:	be8838d4 	.word	0xbe8838d4
 8011d04:	bda8fae9 	.word	0xbda8fae9
 8011d08:	bdb4b1c4 	.word	0xbdb4b1c4
 8011d0c:	3e21ee9e 	.word	0x3e21ee9e
 8011d10:	809c52ad 	.word	0x809c52ad
 8011d14:	3e927e4f 	.word	0x3e927e4f
 8011d18:	19cb1590 	.word	0x19cb1590
 8011d1c:	3efa01a0 	.word	0x3efa01a0
 8011d20:	16c15177 	.word	0x16c15177
 8011d24:	3f56c16c 	.word	0x3f56c16c
 8011d28:	5555554c 	.word	0x5555554c
 8011d2c:	3fa55555 	.word	0x3fa55555
 8011d30:	3fe00000 	.word	0x3fe00000
 8011d34:	3fd33332 	.word	0x3fd33332
 8011d38:	3ff00000 	.word	0x3ff00000
 8011d3c:	3fe90000 	.word	0x3fe90000
 8011d40:	3fd20000 	.word	0x3fd20000
 8011d44:	00000000 	.word	0x00000000

08011d48 <__kernel_rem_pio2>:
 8011d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4c:	ed2d 8b02 	vpush	{d8}
 8011d50:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011d54:	1ed4      	subs	r4, r2, #3
 8011d56:	9308      	str	r3, [sp, #32]
 8011d58:	9101      	str	r1, [sp, #4]
 8011d5a:	4bc5      	ldr	r3, [pc, #788]	; (8012070 <__kernel_rem_pio2+0x328>)
 8011d5c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011d5e:	9009      	str	r0, [sp, #36]	; 0x24
 8011d60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d64:	9304      	str	r3, [sp, #16]
 8011d66:	9b08      	ldr	r3, [sp, #32]
 8011d68:	3b01      	subs	r3, #1
 8011d6a:	9307      	str	r3, [sp, #28]
 8011d6c:	2318      	movs	r3, #24
 8011d6e:	fb94 f4f3 	sdiv	r4, r4, r3
 8011d72:	f06f 0317 	mvn.w	r3, #23
 8011d76:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011d7a:	fb04 3303 	mla	r3, r4, r3, r3
 8011d7e:	eb03 0a02 	add.w	sl, r3, r2
 8011d82:	9b04      	ldr	r3, [sp, #16]
 8011d84:	9a07      	ldr	r2, [sp, #28]
 8011d86:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012060 <__kernel_rem_pio2+0x318>
 8011d8a:	eb03 0802 	add.w	r8, r3, r2
 8011d8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011d90:	1aa7      	subs	r7, r4, r2
 8011d92:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011d96:	ae22      	add	r6, sp, #136	; 0x88
 8011d98:	2500      	movs	r5, #0
 8011d9a:	4545      	cmp	r5, r8
 8011d9c:	dd13      	ble.n	8011dc6 <__kernel_rem_pio2+0x7e>
 8011d9e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012060 <__kernel_rem_pio2+0x318>
 8011da2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011da6:	2600      	movs	r6, #0
 8011da8:	9b04      	ldr	r3, [sp, #16]
 8011daa:	429e      	cmp	r6, r3
 8011dac:	dc32      	bgt.n	8011e14 <__kernel_rem_pio2+0xcc>
 8011dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011db0:	9302      	str	r3, [sp, #8]
 8011db2:	9b08      	ldr	r3, [sp, #32]
 8011db4:	199d      	adds	r5, r3, r6
 8011db6:	ab22      	add	r3, sp, #136	; 0x88
 8011db8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011dbc:	9306      	str	r3, [sp, #24]
 8011dbe:	ec59 8b18 	vmov	r8, r9, d8
 8011dc2:	2700      	movs	r7, #0
 8011dc4:	e01f      	b.n	8011e06 <__kernel_rem_pio2+0xbe>
 8011dc6:	42ef      	cmn	r7, r5
 8011dc8:	d407      	bmi.n	8011dda <__kernel_rem_pio2+0x92>
 8011dca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011dce:	f7f5 f92b 	bl	8007028 <__aeabi_i2d>
 8011dd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011dd6:	3501      	adds	r5, #1
 8011dd8:	e7df      	b.n	8011d9a <__kernel_rem_pio2+0x52>
 8011dda:	ec51 0b18 	vmov	r0, r1, d8
 8011dde:	e7f8      	b.n	8011dd2 <__kernel_rem_pio2+0x8a>
 8011de0:	9906      	ldr	r1, [sp, #24]
 8011de2:	9d02      	ldr	r5, [sp, #8]
 8011de4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011de8:	9106      	str	r1, [sp, #24]
 8011dea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011dee:	9502      	str	r5, [sp, #8]
 8011df0:	f7f5 f984 	bl	80070fc <__aeabi_dmul>
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	4640      	mov	r0, r8
 8011dfa:	4649      	mov	r1, r9
 8011dfc:	f7f4 ffc8 	bl	8006d90 <__adddf3>
 8011e00:	3701      	adds	r7, #1
 8011e02:	4680      	mov	r8, r0
 8011e04:	4689      	mov	r9, r1
 8011e06:	9b07      	ldr	r3, [sp, #28]
 8011e08:	429f      	cmp	r7, r3
 8011e0a:	dde9      	ble.n	8011de0 <__kernel_rem_pio2+0x98>
 8011e0c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011e10:	3601      	adds	r6, #1
 8011e12:	e7c9      	b.n	8011da8 <__kernel_rem_pio2+0x60>
 8011e14:	9b04      	ldr	r3, [sp, #16]
 8011e16:	aa0e      	add	r2, sp, #56	; 0x38
 8011e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e1c:	930c      	str	r3, [sp, #48]	; 0x30
 8011e1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011e20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011e24:	9c04      	ldr	r4, [sp, #16]
 8011e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e28:	ab9a      	add	r3, sp, #616	; 0x268
 8011e2a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011e2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e36:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011e3a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011e3e:	ab9a      	add	r3, sp, #616	; 0x268
 8011e40:	445b      	add	r3, fp
 8011e42:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011e46:	2500      	movs	r5, #0
 8011e48:	1b63      	subs	r3, r4, r5
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	dc78      	bgt.n	8011f40 <__kernel_rem_pio2+0x1f8>
 8011e4e:	4650      	mov	r0, sl
 8011e50:	ec49 8b10 	vmov	d0, r8, r9
 8011e54:	f000 fc00 	bl	8012658 <scalbn>
 8011e58:	ec57 6b10 	vmov	r6, r7, d0
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011e62:	ee10 0a10 	vmov	r0, s0
 8011e66:	4639      	mov	r1, r7
 8011e68:	f7f5 f948 	bl	80070fc <__aeabi_dmul>
 8011e6c:	ec41 0b10 	vmov	d0, r0, r1
 8011e70:	f000 fb6e 	bl	8012550 <floor>
 8011e74:	2200      	movs	r2, #0
 8011e76:	ec51 0b10 	vmov	r0, r1, d0
 8011e7a:	4b7e      	ldr	r3, [pc, #504]	; (8012074 <__kernel_rem_pio2+0x32c>)
 8011e7c:	f7f5 f93e 	bl	80070fc <__aeabi_dmul>
 8011e80:	4602      	mov	r2, r0
 8011e82:	460b      	mov	r3, r1
 8011e84:	4630      	mov	r0, r6
 8011e86:	4639      	mov	r1, r7
 8011e88:	f7f4 ff80 	bl	8006d8c <__aeabi_dsub>
 8011e8c:	460f      	mov	r7, r1
 8011e8e:	4606      	mov	r6, r0
 8011e90:	f7f5 fbe4 	bl	800765c <__aeabi_d2iz>
 8011e94:	9006      	str	r0, [sp, #24]
 8011e96:	f7f5 f8c7 	bl	8007028 <__aeabi_i2d>
 8011e9a:	4602      	mov	r2, r0
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	4639      	mov	r1, r7
 8011ea2:	f7f4 ff73 	bl	8006d8c <__aeabi_dsub>
 8011ea6:	f1ba 0f00 	cmp.w	sl, #0
 8011eaa:	4606      	mov	r6, r0
 8011eac:	460f      	mov	r7, r1
 8011eae:	dd6c      	ble.n	8011f8a <__kernel_rem_pio2+0x242>
 8011eb0:	1e62      	subs	r2, r4, #1
 8011eb2:	ab0e      	add	r3, sp, #56	; 0x38
 8011eb4:	f1ca 0118 	rsb	r1, sl, #24
 8011eb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ebc:	9d06      	ldr	r5, [sp, #24]
 8011ebe:	fa40 f301 	asr.w	r3, r0, r1
 8011ec2:	441d      	add	r5, r3
 8011ec4:	408b      	lsls	r3, r1
 8011ec6:	1ac0      	subs	r0, r0, r3
 8011ec8:	ab0e      	add	r3, sp, #56	; 0x38
 8011eca:	9506      	str	r5, [sp, #24]
 8011ecc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011ed0:	f1ca 0317 	rsb	r3, sl, #23
 8011ed4:	fa40 f303 	asr.w	r3, r0, r3
 8011ed8:	9302      	str	r3, [sp, #8]
 8011eda:	9b02      	ldr	r3, [sp, #8]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	dd62      	ble.n	8011fa6 <__kernel_rem_pio2+0x25e>
 8011ee0:	9b06      	ldr	r3, [sp, #24]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	9306      	str	r3, [sp, #24]
 8011ee8:	4615      	mov	r5, r2
 8011eea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011eee:	4294      	cmp	r4, r2
 8011ef0:	f300 8095 	bgt.w	801201e <__kernel_rem_pio2+0x2d6>
 8011ef4:	f1ba 0f00 	cmp.w	sl, #0
 8011ef8:	dd07      	ble.n	8011f0a <__kernel_rem_pio2+0x1c2>
 8011efa:	f1ba 0f01 	cmp.w	sl, #1
 8011efe:	f000 80a2 	beq.w	8012046 <__kernel_rem_pio2+0x2fe>
 8011f02:	f1ba 0f02 	cmp.w	sl, #2
 8011f06:	f000 80c1 	beq.w	801208c <__kernel_rem_pio2+0x344>
 8011f0a:	9b02      	ldr	r3, [sp, #8]
 8011f0c:	2b02      	cmp	r3, #2
 8011f0e:	d14a      	bne.n	8011fa6 <__kernel_rem_pio2+0x25e>
 8011f10:	4632      	mov	r2, r6
 8011f12:	463b      	mov	r3, r7
 8011f14:	2000      	movs	r0, #0
 8011f16:	4958      	ldr	r1, [pc, #352]	; (8012078 <__kernel_rem_pio2+0x330>)
 8011f18:	f7f4 ff38 	bl	8006d8c <__aeabi_dsub>
 8011f1c:	4606      	mov	r6, r0
 8011f1e:	460f      	mov	r7, r1
 8011f20:	2d00      	cmp	r5, #0
 8011f22:	d040      	beq.n	8011fa6 <__kernel_rem_pio2+0x25e>
 8011f24:	4650      	mov	r0, sl
 8011f26:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012068 <__kernel_rem_pio2+0x320>
 8011f2a:	f000 fb95 	bl	8012658 <scalbn>
 8011f2e:	4630      	mov	r0, r6
 8011f30:	4639      	mov	r1, r7
 8011f32:	ec53 2b10 	vmov	r2, r3, d0
 8011f36:	f7f4 ff29 	bl	8006d8c <__aeabi_dsub>
 8011f3a:	4606      	mov	r6, r0
 8011f3c:	460f      	mov	r7, r1
 8011f3e:	e032      	b.n	8011fa6 <__kernel_rem_pio2+0x25e>
 8011f40:	2200      	movs	r2, #0
 8011f42:	4b4e      	ldr	r3, [pc, #312]	; (801207c <__kernel_rem_pio2+0x334>)
 8011f44:	4640      	mov	r0, r8
 8011f46:	4649      	mov	r1, r9
 8011f48:	f7f5 f8d8 	bl	80070fc <__aeabi_dmul>
 8011f4c:	f7f5 fb86 	bl	800765c <__aeabi_d2iz>
 8011f50:	f7f5 f86a 	bl	8007028 <__aeabi_i2d>
 8011f54:	2200      	movs	r2, #0
 8011f56:	4b4a      	ldr	r3, [pc, #296]	; (8012080 <__kernel_rem_pio2+0x338>)
 8011f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f5c:	f7f5 f8ce 	bl	80070fc <__aeabi_dmul>
 8011f60:	4602      	mov	r2, r0
 8011f62:	460b      	mov	r3, r1
 8011f64:	4640      	mov	r0, r8
 8011f66:	4649      	mov	r1, r9
 8011f68:	f7f4 ff10 	bl	8006d8c <__aeabi_dsub>
 8011f6c:	f7f5 fb76 	bl	800765c <__aeabi_d2iz>
 8011f70:	ab0e      	add	r3, sp, #56	; 0x38
 8011f72:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011f76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f7e:	f7f4 ff07 	bl	8006d90 <__adddf3>
 8011f82:	3501      	adds	r5, #1
 8011f84:	4680      	mov	r8, r0
 8011f86:	4689      	mov	r9, r1
 8011f88:	e75e      	b.n	8011e48 <__kernel_rem_pio2+0x100>
 8011f8a:	d105      	bne.n	8011f98 <__kernel_rem_pio2+0x250>
 8011f8c:	1e63      	subs	r3, r4, #1
 8011f8e:	aa0e      	add	r2, sp, #56	; 0x38
 8011f90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011f94:	15c3      	asrs	r3, r0, #23
 8011f96:	e79f      	b.n	8011ed8 <__kernel_rem_pio2+0x190>
 8011f98:	2200      	movs	r2, #0
 8011f9a:	4b3a      	ldr	r3, [pc, #232]	; (8012084 <__kernel_rem_pio2+0x33c>)
 8011f9c:	f7f5 fb34 	bl	8007608 <__aeabi_dcmpge>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	d139      	bne.n	8012018 <__kernel_rem_pio2+0x2d0>
 8011fa4:	9002      	str	r0, [sp, #8]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	2300      	movs	r3, #0
 8011faa:	4630      	mov	r0, r6
 8011fac:	4639      	mov	r1, r7
 8011fae:	f7f5 fb0d 	bl	80075cc <__aeabi_dcmpeq>
 8011fb2:	2800      	cmp	r0, #0
 8011fb4:	f000 80c7 	beq.w	8012146 <__kernel_rem_pio2+0x3fe>
 8011fb8:	1e65      	subs	r5, r4, #1
 8011fba:	462b      	mov	r3, r5
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	9904      	ldr	r1, [sp, #16]
 8011fc0:	428b      	cmp	r3, r1
 8011fc2:	da6a      	bge.n	801209a <__kernel_rem_pio2+0x352>
 8011fc4:	2a00      	cmp	r2, #0
 8011fc6:	f000 8088 	beq.w	80120da <__kernel_rem_pio2+0x392>
 8011fca:	ab0e      	add	r3, sp, #56	; 0x38
 8011fcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8011fd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f000 80b4 	beq.w	8012142 <__kernel_rem_pio2+0x3fa>
 8011fda:	4650      	mov	r0, sl
 8011fdc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012068 <__kernel_rem_pio2+0x320>
 8011fe0:	f000 fb3a 	bl	8012658 <scalbn>
 8011fe4:	00ec      	lsls	r4, r5, #3
 8011fe6:	ab72      	add	r3, sp, #456	; 0x1c8
 8011fe8:	191e      	adds	r6, r3, r4
 8011fea:	ec59 8b10 	vmov	r8, r9, d0
 8011fee:	f106 0a08 	add.w	sl, r6, #8
 8011ff2:	462f      	mov	r7, r5
 8011ff4:	2f00      	cmp	r7, #0
 8011ff6:	f280 80df 	bge.w	80121b8 <__kernel_rem_pio2+0x470>
 8011ffa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012060 <__kernel_rem_pio2+0x318>
 8011ffe:	f04f 0a00 	mov.w	sl, #0
 8012002:	eba5 030a 	sub.w	r3, r5, sl
 8012006:	2b00      	cmp	r3, #0
 8012008:	f2c0 810a 	blt.w	8012220 <__kernel_rem_pio2+0x4d8>
 801200c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012088 <__kernel_rem_pio2+0x340>
 8012010:	ec59 8b18 	vmov	r8, r9, d8
 8012014:	2700      	movs	r7, #0
 8012016:	e0f5      	b.n	8012204 <__kernel_rem_pio2+0x4bc>
 8012018:	2302      	movs	r3, #2
 801201a:	9302      	str	r3, [sp, #8]
 801201c:	e760      	b.n	8011ee0 <__kernel_rem_pio2+0x198>
 801201e:	ab0e      	add	r3, sp, #56	; 0x38
 8012020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012024:	b94d      	cbnz	r5, 801203a <__kernel_rem_pio2+0x2f2>
 8012026:	b12b      	cbz	r3, 8012034 <__kernel_rem_pio2+0x2ec>
 8012028:	a80e      	add	r0, sp, #56	; 0x38
 801202a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801202e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012032:	2301      	movs	r3, #1
 8012034:	3201      	adds	r2, #1
 8012036:	461d      	mov	r5, r3
 8012038:	e759      	b.n	8011eee <__kernel_rem_pio2+0x1a6>
 801203a:	a80e      	add	r0, sp, #56	; 0x38
 801203c:	1acb      	subs	r3, r1, r3
 801203e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012042:	462b      	mov	r3, r5
 8012044:	e7f6      	b.n	8012034 <__kernel_rem_pio2+0x2ec>
 8012046:	1e62      	subs	r2, r4, #1
 8012048:	ab0e      	add	r3, sp, #56	; 0x38
 801204a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801204e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012052:	a90e      	add	r1, sp, #56	; 0x38
 8012054:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012058:	e757      	b.n	8011f0a <__kernel_rem_pio2+0x1c2>
 801205a:	bf00      	nop
 801205c:	f3af 8000 	nop.w
	...
 801206c:	3ff00000 	.word	0x3ff00000
 8012070:	0801cbf8 	.word	0x0801cbf8
 8012074:	40200000 	.word	0x40200000
 8012078:	3ff00000 	.word	0x3ff00000
 801207c:	3e700000 	.word	0x3e700000
 8012080:	41700000 	.word	0x41700000
 8012084:	3fe00000 	.word	0x3fe00000
 8012088:	0801cbb8 	.word	0x0801cbb8
 801208c:	1e62      	subs	r2, r4, #1
 801208e:	ab0e      	add	r3, sp, #56	; 0x38
 8012090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012094:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012098:	e7db      	b.n	8012052 <__kernel_rem_pio2+0x30a>
 801209a:	a90e      	add	r1, sp, #56	; 0x38
 801209c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80120a0:	3b01      	subs	r3, #1
 80120a2:	430a      	orrs	r2, r1
 80120a4:	e78b      	b.n	8011fbe <__kernel_rem_pio2+0x276>
 80120a6:	3301      	adds	r3, #1
 80120a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80120ac:	2900      	cmp	r1, #0
 80120ae:	d0fa      	beq.n	80120a6 <__kernel_rem_pio2+0x35e>
 80120b0:	9a08      	ldr	r2, [sp, #32]
 80120b2:	4422      	add	r2, r4
 80120b4:	00d2      	lsls	r2, r2, #3
 80120b6:	a922      	add	r1, sp, #136	; 0x88
 80120b8:	18e3      	adds	r3, r4, r3
 80120ba:	9206      	str	r2, [sp, #24]
 80120bc:	440a      	add	r2, r1
 80120be:	9302      	str	r3, [sp, #8]
 80120c0:	f10b 0108 	add.w	r1, fp, #8
 80120c4:	f102 0308 	add.w	r3, r2, #8
 80120c8:	1c66      	adds	r6, r4, #1
 80120ca:	910a      	str	r1, [sp, #40]	; 0x28
 80120cc:	2500      	movs	r5, #0
 80120ce:	930d      	str	r3, [sp, #52]	; 0x34
 80120d0:	9b02      	ldr	r3, [sp, #8]
 80120d2:	42b3      	cmp	r3, r6
 80120d4:	da04      	bge.n	80120e0 <__kernel_rem_pio2+0x398>
 80120d6:	461c      	mov	r4, r3
 80120d8:	e6a6      	b.n	8011e28 <__kernel_rem_pio2+0xe0>
 80120da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120dc:	2301      	movs	r3, #1
 80120de:	e7e3      	b.n	80120a8 <__kernel_rem_pio2+0x360>
 80120e0:	9b06      	ldr	r3, [sp, #24]
 80120e2:	18ef      	adds	r7, r5, r3
 80120e4:	ab22      	add	r3, sp, #136	; 0x88
 80120e6:	441f      	add	r7, r3
 80120e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80120ee:	f7f4 ff9b 	bl	8007028 <__aeabi_i2d>
 80120f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f4:	461c      	mov	r4, r3
 80120f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120f8:	e9c7 0100 	strd	r0, r1, [r7]
 80120fc:	eb03 0b05 	add.w	fp, r3, r5
 8012100:	2700      	movs	r7, #0
 8012102:	f04f 0800 	mov.w	r8, #0
 8012106:	f04f 0900 	mov.w	r9, #0
 801210a:	9b07      	ldr	r3, [sp, #28]
 801210c:	429f      	cmp	r7, r3
 801210e:	dd08      	ble.n	8012122 <__kernel_rem_pio2+0x3da>
 8012110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012112:	aa72      	add	r2, sp, #456	; 0x1c8
 8012114:	18eb      	adds	r3, r5, r3
 8012116:	4413      	add	r3, r2
 8012118:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801211c:	3601      	adds	r6, #1
 801211e:	3508      	adds	r5, #8
 8012120:	e7d6      	b.n	80120d0 <__kernel_rem_pio2+0x388>
 8012122:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012126:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801212a:	f7f4 ffe7 	bl	80070fc <__aeabi_dmul>
 801212e:	4602      	mov	r2, r0
 8012130:	460b      	mov	r3, r1
 8012132:	4640      	mov	r0, r8
 8012134:	4649      	mov	r1, r9
 8012136:	f7f4 fe2b 	bl	8006d90 <__adddf3>
 801213a:	3701      	adds	r7, #1
 801213c:	4680      	mov	r8, r0
 801213e:	4689      	mov	r9, r1
 8012140:	e7e3      	b.n	801210a <__kernel_rem_pio2+0x3c2>
 8012142:	3d01      	subs	r5, #1
 8012144:	e741      	b.n	8011fca <__kernel_rem_pio2+0x282>
 8012146:	f1ca 0000 	rsb	r0, sl, #0
 801214a:	ec47 6b10 	vmov	d0, r6, r7
 801214e:	f000 fa83 	bl	8012658 <scalbn>
 8012152:	ec57 6b10 	vmov	r6, r7, d0
 8012156:	2200      	movs	r2, #0
 8012158:	4b99      	ldr	r3, [pc, #612]	; (80123c0 <__kernel_rem_pio2+0x678>)
 801215a:	ee10 0a10 	vmov	r0, s0
 801215e:	4639      	mov	r1, r7
 8012160:	f7f5 fa52 	bl	8007608 <__aeabi_dcmpge>
 8012164:	b1f8      	cbz	r0, 80121a6 <__kernel_rem_pio2+0x45e>
 8012166:	2200      	movs	r2, #0
 8012168:	4b96      	ldr	r3, [pc, #600]	; (80123c4 <__kernel_rem_pio2+0x67c>)
 801216a:	4630      	mov	r0, r6
 801216c:	4639      	mov	r1, r7
 801216e:	f7f4 ffc5 	bl	80070fc <__aeabi_dmul>
 8012172:	f7f5 fa73 	bl	800765c <__aeabi_d2iz>
 8012176:	4680      	mov	r8, r0
 8012178:	f7f4 ff56 	bl	8007028 <__aeabi_i2d>
 801217c:	2200      	movs	r2, #0
 801217e:	4b90      	ldr	r3, [pc, #576]	; (80123c0 <__kernel_rem_pio2+0x678>)
 8012180:	f7f4 ffbc 	bl	80070fc <__aeabi_dmul>
 8012184:	460b      	mov	r3, r1
 8012186:	4602      	mov	r2, r0
 8012188:	4639      	mov	r1, r7
 801218a:	4630      	mov	r0, r6
 801218c:	f7f4 fdfe 	bl	8006d8c <__aeabi_dsub>
 8012190:	f7f5 fa64 	bl	800765c <__aeabi_d2iz>
 8012194:	1c65      	adds	r5, r4, #1
 8012196:	ab0e      	add	r3, sp, #56	; 0x38
 8012198:	f10a 0a18 	add.w	sl, sl, #24
 801219c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80121a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80121a4:	e719      	b.n	8011fda <__kernel_rem_pio2+0x292>
 80121a6:	4630      	mov	r0, r6
 80121a8:	4639      	mov	r1, r7
 80121aa:	f7f5 fa57 	bl	800765c <__aeabi_d2iz>
 80121ae:	ab0e      	add	r3, sp, #56	; 0x38
 80121b0:	4625      	mov	r5, r4
 80121b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80121b6:	e710      	b.n	8011fda <__kernel_rem_pio2+0x292>
 80121b8:	ab0e      	add	r3, sp, #56	; 0x38
 80121ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80121be:	f7f4 ff33 	bl	8007028 <__aeabi_i2d>
 80121c2:	4642      	mov	r2, r8
 80121c4:	464b      	mov	r3, r9
 80121c6:	f7f4 ff99 	bl	80070fc <__aeabi_dmul>
 80121ca:	2200      	movs	r2, #0
 80121cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80121d0:	4b7c      	ldr	r3, [pc, #496]	; (80123c4 <__kernel_rem_pio2+0x67c>)
 80121d2:	4640      	mov	r0, r8
 80121d4:	4649      	mov	r1, r9
 80121d6:	f7f4 ff91 	bl	80070fc <__aeabi_dmul>
 80121da:	3f01      	subs	r7, #1
 80121dc:	4680      	mov	r8, r0
 80121de:	4689      	mov	r9, r1
 80121e0:	e708      	b.n	8011ff4 <__kernel_rem_pio2+0x2ac>
 80121e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80121e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80121ee:	f7f4 ff85 	bl	80070fc <__aeabi_dmul>
 80121f2:	4602      	mov	r2, r0
 80121f4:	460b      	mov	r3, r1
 80121f6:	4640      	mov	r0, r8
 80121f8:	4649      	mov	r1, r9
 80121fa:	f7f4 fdc9 	bl	8006d90 <__adddf3>
 80121fe:	3701      	adds	r7, #1
 8012200:	4680      	mov	r8, r0
 8012202:	4689      	mov	r9, r1
 8012204:	9b04      	ldr	r3, [sp, #16]
 8012206:	429f      	cmp	r7, r3
 8012208:	dc01      	bgt.n	801220e <__kernel_rem_pio2+0x4c6>
 801220a:	45ba      	cmp	sl, r7
 801220c:	dae9      	bge.n	80121e2 <__kernel_rem_pio2+0x49a>
 801220e:	ab4a      	add	r3, sp, #296	; 0x128
 8012210:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012214:	e9c3 8900 	strd	r8, r9, [r3]
 8012218:	f10a 0a01 	add.w	sl, sl, #1
 801221c:	3e08      	subs	r6, #8
 801221e:	e6f0      	b.n	8012002 <__kernel_rem_pio2+0x2ba>
 8012220:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012222:	2b03      	cmp	r3, #3
 8012224:	d85b      	bhi.n	80122de <__kernel_rem_pio2+0x596>
 8012226:	e8df f003 	tbb	[pc, r3]
 801222a:	264a      	.short	0x264a
 801222c:	0226      	.short	0x0226
 801222e:	ab9a      	add	r3, sp, #616	; 0x268
 8012230:	441c      	add	r4, r3
 8012232:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012236:	46a2      	mov	sl, r4
 8012238:	46ab      	mov	fp, r5
 801223a:	f1bb 0f00 	cmp.w	fp, #0
 801223e:	dc6c      	bgt.n	801231a <__kernel_rem_pio2+0x5d2>
 8012240:	46a2      	mov	sl, r4
 8012242:	46ab      	mov	fp, r5
 8012244:	f1bb 0f01 	cmp.w	fp, #1
 8012248:	f300 8086 	bgt.w	8012358 <__kernel_rem_pio2+0x610>
 801224c:	2000      	movs	r0, #0
 801224e:	2100      	movs	r1, #0
 8012250:	2d01      	cmp	r5, #1
 8012252:	f300 80a0 	bgt.w	8012396 <__kernel_rem_pio2+0x64e>
 8012256:	9b02      	ldr	r3, [sp, #8]
 8012258:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801225c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012260:	2b00      	cmp	r3, #0
 8012262:	f040 809e 	bne.w	80123a2 <__kernel_rem_pio2+0x65a>
 8012266:	9b01      	ldr	r3, [sp, #4]
 8012268:	e9c3 7800 	strd	r7, r8, [r3]
 801226c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012270:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012274:	e033      	b.n	80122de <__kernel_rem_pio2+0x596>
 8012276:	3408      	adds	r4, #8
 8012278:	ab4a      	add	r3, sp, #296	; 0x128
 801227a:	441c      	add	r4, r3
 801227c:	462e      	mov	r6, r5
 801227e:	2000      	movs	r0, #0
 8012280:	2100      	movs	r1, #0
 8012282:	2e00      	cmp	r6, #0
 8012284:	da3a      	bge.n	80122fc <__kernel_rem_pio2+0x5b4>
 8012286:	9b02      	ldr	r3, [sp, #8]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d03d      	beq.n	8012308 <__kernel_rem_pio2+0x5c0>
 801228c:	4602      	mov	r2, r0
 801228e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012292:	9c01      	ldr	r4, [sp, #4]
 8012294:	e9c4 2300 	strd	r2, r3, [r4]
 8012298:	4602      	mov	r2, r0
 801229a:	460b      	mov	r3, r1
 801229c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80122a0:	f7f4 fd74 	bl	8006d8c <__aeabi_dsub>
 80122a4:	ae4c      	add	r6, sp, #304	; 0x130
 80122a6:	2401      	movs	r4, #1
 80122a8:	42a5      	cmp	r5, r4
 80122aa:	da30      	bge.n	801230e <__kernel_rem_pio2+0x5c6>
 80122ac:	9b02      	ldr	r3, [sp, #8]
 80122ae:	b113      	cbz	r3, 80122b6 <__kernel_rem_pio2+0x56e>
 80122b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122b4:	4619      	mov	r1, r3
 80122b6:	9b01      	ldr	r3, [sp, #4]
 80122b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80122bc:	e00f      	b.n	80122de <__kernel_rem_pio2+0x596>
 80122be:	ab9a      	add	r3, sp, #616	; 0x268
 80122c0:	441c      	add	r4, r3
 80122c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80122c6:	2000      	movs	r0, #0
 80122c8:	2100      	movs	r1, #0
 80122ca:	2d00      	cmp	r5, #0
 80122cc:	da10      	bge.n	80122f0 <__kernel_rem_pio2+0x5a8>
 80122ce:	9b02      	ldr	r3, [sp, #8]
 80122d0:	b113      	cbz	r3, 80122d8 <__kernel_rem_pio2+0x590>
 80122d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122d6:	4619      	mov	r1, r3
 80122d8:	9b01      	ldr	r3, [sp, #4]
 80122da:	e9c3 0100 	strd	r0, r1, [r3]
 80122de:	9b06      	ldr	r3, [sp, #24]
 80122e0:	f003 0007 	and.w	r0, r3, #7
 80122e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80122e8:	ecbd 8b02 	vpop	{d8}
 80122ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80122f4:	f7f4 fd4c 	bl	8006d90 <__adddf3>
 80122f8:	3d01      	subs	r5, #1
 80122fa:	e7e6      	b.n	80122ca <__kernel_rem_pio2+0x582>
 80122fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012300:	f7f4 fd46 	bl	8006d90 <__adddf3>
 8012304:	3e01      	subs	r6, #1
 8012306:	e7bc      	b.n	8012282 <__kernel_rem_pio2+0x53a>
 8012308:	4602      	mov	r2, r0
 801230a:	460b      	mov	r3, r1
 801230c:	e7c1      	b.n	8012292 <__kernel_rem_pio2+0x54a>
 801230e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012312:	f7f4 fd3d 	bl	8006d90 <__adddf3>
 8012316:	3401      	adds	r4, #1
 8012318:	e7c6      	b.n	80122a8 <__kernel_rem_pio2+0x560>
 801231a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801231e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012322:	4640      	mov	r0, r8
 8012324:	ec53 2b17 	vmov	r2, r3, d7
 8012328:	4649      	mov	r1, r9
 801232a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801232e:	f7f4 fd2f 	bl	8006d90 <__adddf3>
 8012332:	4602      	mov	r2, r0
 8012334:	460b      	mov	r3, r1
 8012336:	4606      	mov	r6, r0
 8012338:	460f      	mov	r7, r1
 801233a:	4640      	mov	r0, r8
 801233c:	4649      	mov	r1, r9
 801233e:	f7f4 fd25 	bl	8006d8c <__aeabi_dsub>
 8012342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012346:	f7f4 fd23 	bl	8006d90 <__adddf3>
 801234a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801234e:	e9ca 0100 	strd	r0, r1, [sl]
 8012352:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012356:	e770      	b.n	801223a <__kernel_rem_pio2+0x4f2>
 8012358:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801235c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012360:	4630      	mov	r0, r6
 8012362:	ec53 2b17 	vmov	r2, r3, d7
 8012366:	4639      	mov	r1, r7
 8012368:	ed8d 7b04 	vstr	d7, [sp, #16]
 801236c:	f7f4 fd10 	bl	8006d90 <__adddf3>
 8012370:	4602      	mov	r2, r0
 8012372:	460b      	mov	r3, r1
 8012374:	4680      	mov	r8, r0
 8012376:	4689      	mov	r9, r1
 8012378:	4630      	mov	r0, r6
 801237a:	4639      	mov	r1, r7
 801237c:	f7f4 fd06 	bl	8006d8c <__aeabi_dsub>
 8012380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012384:	f7f4 fd04 	bl	8006d90 <__adddf3>
 8012388:	f10b 3bff 	add.w	fp, fp, #4294967295
 801238c:	e9ca 0100 	strd	r0, r1, [sl]
 8012390:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012394:	e756      	b.n	8012244 <__kernel_rem_pio2+0x4fc>
 8012396:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801239a:	f7f4 fcf9 	bl	8006d90 <__adddf3>
 801239e:	3d01      	subs	r5, #1
 80123a0:	e756      	b.n	8012250 <__kernel_rem_pio2+0x508>
 80123a2:	9b01      	ldr	r3, [sp, #4]
 80123a4:	9a01      	ldr	r2, [sp, #4]
 80123a6:	601f      	str	r7, [r3, #0]
 80123a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80123ac:	605c      	str	r4, [r3, #4]
 80123ae:	609d      	str	r5, [r3, #8]
 80123b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80123b4:	60d3      	str	r3, [r2, #12]
 80123b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123ba:	6110      	str	r0, [r2, #16]
 80123bc:	6153      	str	r3, [r2, #20]
 80123be:	e78e      	b.n	80122de <__kernel_rem_pio2+0x596>
 80123c0:	41700000 	.word	0x41700000
 80123c4:	3e700000 	.word	0x3e700000

080123c8 <__kernel_sin>:
 80123c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123cc:	ec55 4b10 	vmov	r4, r5, d0
 80123d0:	b085      	sub	sp, #20
 80123d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80123d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80123da:	ed8d 1b00 	vstr	d1, [sp]
 80123de:	9002      	str	r0, [sp, #8]
 80123e0:	da06      	bge.n	80123f0 <__kernel_sin+0x28>
 80123e2:	ee10 0a10 	vmov	r0, s0
 80123e6:	4629      	mov	r1, r5
 80123e8:	f7f5 f938 	bl	800765c <__aeabi_d2iz>
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d051      	beq.n	8012494 <__kernel_sin+0xcc>
 80123f0:	4622      	mov	r2, r4
 80123f2:	462b      	mov	r3, r5
 80123f4:	4620      	mov	r0, r4
 80123f6:	4629      	mov	r1, r5
 80123f8:	f7f4 fe80 	bl	80070fc <__aeabi_dmul>
 80123fc:	4682      	mov	sl, r0
 80123fe:	468b      	mov	fp, r1
 8012400:	4602      	mov	r2, r0
 8012402:	460b      	mov	r3, r1
 8012404:	4620      	mov	r0, r4
 8012406:	4629      	mov	r1, r5
 8012408:	f7f4 fe78 	bl	80070fc <__aeabi_dmul>
 801240c:	a341      	add	r3, pc, #260	; (adr r3, 8012514 <__kernel_sin+0x14c>)
 801240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012412:	4680      	mov	r8, r0
 8012414:	4689      	mov	r9, r1
 8012416:	4650      	mov	r0, sl
 8012418:	4659      	mov	r1, fp
 801241a:	f7f4 fe6f 	bl	80070fc <__aeabi_dmul>
 801241e:	a33f      	add	r3, pc, #252	; (adr r3, 801251c <__kernel_sin+0x154>)
 8012420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012424:	f7f4 fcb2 	bl	8006d8c <__aeabi_dsub>
 8012428:	4652      	mov	r2, sl
 801242a:	465b      	mov	r3, fp
 801242c:	f7f4 fe66 	bl	80070fc <__aeabi_dmul>
 8012430:	a33c      	add	r3, pc, #240	; (adr r3, 8012524 <__kernel_sin+0x15c>)
 8012432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012436:	f7f4 fcab 	bl	8006d90 <__adddf3>
 801243a:	4652      	mov	r2, sl
 801243c:	465b      	mov	r3, fp
 801243e:	f7f4 fe5d 	bl	80070fc <__aeabi_dmul>
 8012442:	a33a      	add	r3, pc, #232	; (adr r3, 801252c <__kernel_sin+0x164>)
 8012444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012448:	f7f4 fca0 	bl	8006d8c <__aeabi_dsub>
 801244c:	4652      	mov	r2, sl
 801244e:	465b      	mov	r3, fp
 8012450:	f7f4 fe54 	bl	80070fc <__aeabi_dmul>
 8012454:	a337      	add	r3, pc, #220	; (adr r3, 8012534 <__kernel_sin+0x16c>)
 8012456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245a:	f7f4 fc99 	bl	8006d90 <__adddf3>
 801245e:	9b02      	ldr	r3, [sp, #8]
 8012460:	4606      	mov	r6, r0
 8012462:	460f      	mov	r7, r1
 8012464:	b9db      	cbnz	r3, 801249e <__kernel_sin+0xd6>
 8012466:	4602      	mov	r2, r0
 8012468:	460b      	mov	r3, r1
 801246a:	4650      	mov	r0, sl
 801246c:	4659      	mov	r1, fp
 801246e:	f7f4 fe45 	bl	80070fc <__aeabi_dmul>
 8012472:	a325      	add	r3, pc, #148	; (adr r3, 8012508 <__kernel_sin+0x140>)
 8012474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012478:	f7f4 fc88 	bl	8006d8c <__aeabi_dsub>
 801247c:	4642      	mov	r2, r8
 801247e:	464b      	mov	r3, r9
 8012480:	f7f4 fe3c 	bl	80070fc <__aeabi_dmul>
 8012484:	4602      	mov	r2, r0
 8012486:	460b      	mov	r3, r1
 8012488:	4620      	mov	r0, r4
 801248a:	4629      	mov	r1, r5
 801248c:	f7f4 fc80 	bl	8006d90 <__adddf3>
 8012490:	4604      	mov	r4, r0
 8012492:	460d      	mov	r5, r1
 8012494:	ec45 4b10 	vmov	d0, r4, r5
 8012498:	b005      	add	sp, #20
 801249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249e:	2200      	movs	r2, #0
 80124a0:	4b1b      	ldr	r3, [pc, #108]	; (8012510 <__kernel_sin+0x148>)
 80124a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124a6:	f7f4 fe29 	bl	80070fc <__aeabi_dmul>
 80124aa:	4632      	mov	r2, r6
 80124ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124b0:	463b      	mov	r3, r7
 80124b2:	4640      	mov	r0, r8
 80124b4:	4649      	mov	r1, r9
 80124b6:	f7f4 fe21 	bl	80070fc <__aeabi_dmul>
 80124ba:	4602      	mov	r2, r0
 80124bc:	460b      	mov	r3, r1
 80124be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124c2:	f7f4 fc63 	bl	8006d8c <__aeabi_dsub>
 80124c6:	4652      	mov	r2, sl
 80124c8:	465b      	mov	r3, fp
 80124ca:	f7f4 fe17 	bl	80070fc <__aeabi_dmul>
 80124ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124d2:	f7f4 fc5b 	bl	8006d8c <__aeabi_dsub>
 80124d6:	a30c      	add	r3, pc, #48	; (adr r3, 8012508 <__kernel_sin+0x140>)
 80124d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124dc:	4606      	mov	r6, r0
 80124de:	460f      	mov	r7, r1
 80124e0:	4640      	mov	r0, r8
 80124e2:	4649      	mov	r1, r9
 80124e4:	f7f4 fe0a 	bl	80070fc <__aeabi_dmul>
 80124e8:	4602      	mov	r2, r0
 80124ea:	460b      	mov	r3, r1
 80124ec:	4630      	mov	r0, r6
 80124ee:	4639      	mov	r1, r7
 80124f0:	f7f4 fc4e 	bl	8006d90 <__adddf3>
 80124f4:	4602      	mov	r2, r0
 80124f6:	460b      	mov	r3, r1
 80124f8:	4620      	mov	r0, r4
 80124fa:	4629      	mov	r1, r5
 80124fc:	f7f4 fc46 	bl	8006d8c <__aeabi_dsub>
 8012500:	e7c6      	b.n	8012490 <__kernel_sin+0xc8>
 8012502:	bf00      	nop
 8012504:	f3af 8000 	nop.w
 8012508:	55555549 	.word	0x55555549
 801250c:	3fc55555 	.word	0x3fc55555
 8012510:	3fe00000 	.word	0x3fe00000
 8012514:	5acfd57c 	.word	0x5acfd57c
 8012518:	3de5d93a 	.word	0x3de5d93a
 801251c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012520:	3e5ae5e6 	.word	0x3e5ae5e6
 8012524:	57b1fe7d 	.word	0x57b1fe7d
 8012528:	3ec71de3 	.word	0x3ec71de3
 801252c:	19c161d5 	.word	0x19c161d5
 8012530:	3f2a01a0 	.word	0x3f2a01a0
 8012534:	1110f8a6 	.word	0x1110f8a6
 8012538:	3f811111 	.word	0x3f811111

0801253c <fabs>:
 801253c:	ec51 0b10 	vmov	r0, r1, d0
 8012540:	ee10 2a10 	vmov	r2, s0
 8012544:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012548:	ec43 2b10 	vmov	d0, r2, r3
 801254c:	4770      	bx	lr
	...

08012550 <floor>:
 8012550:	ec51 0b10 	vmov	r0, r1, d0
 8012554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012558:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801255c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012560:	2e13      	cmp	r6, #19
 8012562:	460c      	mov	r4, r1
 8012564:	ee10 5a10 	vmov	r5, s0
 8012568:	4680      	mov	r8, r0
 801256a:	dc34      	bgt.n	80125d6 <floor+0x86>
 801256c:	2e00      	cmp	r6, #0
 801256e:	da16      	bge.n	801259e <floor+0x4e>
 8012570:	a335      	add	r3, pc, #212	; (adr r3, 8012648 <floor+0xf8>)
 8012572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012576:	f7f4 fc0b 	bl	8006d90 <__adddf3>
 801257a:	2200      	movs	r2, #0
 801257c:	2300      	movs	r3, #0
 801257e:	f7f5 f84d 	bl	800761c <__aeabi_dcmpgt>
 8012582:	b148      	cbz	r0, 8012598 <floor+0x48>
 8012584:	2c00      	cmp	r4, #0
 8012586:	da59      	bge.n	801263c <floor+0xec>
 8012588:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801258c:	4a30      	ldr	r2, [pc, #192]	; (8012650 <floor+0x100>)
 801258e:	432b      	orrs	r3, r5
 8012590:	2500      	movs	r5, #0
 8012592:	42ab      	cmp	r3, r5
 8012594:	bf18      	it	ne
 8012596:	4614      	movne	r4, r2
 8012598:	4621      	mov	r1, r4
 801259a:	4628      	mov	r0, r5
 801259c:	e025      	b.n	80125ea <floor+0x9a>
 801259e:	4f2d      	ldr	r7, [pc, #180]	; (8012654 <floor+0x104>)
 80125a0:	4137      	asrs	r7, r6
 80125a2:	ea01 0307 	and.w	r3, r1, r7
 80125a6:	4303      	orrs	r3, r0
 80125a8:	d01f      	beq.n	80125ea <floor+0x9a>
 80125aa:	a327      	add	r3, pc, #156	; (adr r3, 8012648 <floor+0xf8>)
 80125ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b0:	f7f4 fbee 	bl	8006d90 <__adddf3>
 80125b4:	2200      	movs	r2, #0
 80125b6:	2300      	movs	r3, #0
 80125b8:	f7f5 f830 	bl	800761c <__aeabi_dcmpgt>
 80125bc:	2800      	cmp	r0, #0
 80125be:	d0eb      	beq.n	8012598 <floor+0x48>
 80125c0:	2c00      	cmp	r4, #0
 80125c2:	bfbe      	ittt	lt
 80125c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80125c8:	fa43 f606 	asrlt.w	r6, r3, r6
 80125cc:	19a4      	addlt	r4, r4, r6
 80125ce:	ea24 0407 	bic.w	r4, r4, r7
 80125d2:	2500      	movs	r5, #0
 80125d4:	e7e0      	b.n	8012598 <floor+0x48>
 80125d6:	2e33      	cmp	r6, #51	; 0x33
 80125d8:	dd0b      	ble.n	80125f2 <floor+0xa2>
 80125da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80125de:	d104      	bne.n	80125ea <floor+0x9a>
 80125e0:	ee10 2a10 	vmov	r2, s0
 80125e4:	460b      	mov	r3, r1
 80125e6:	f7f4 fbd3 	bl	8006d90 <__adddf3>
 80125ea:	ec41 0b10 	vmov	d0, r0, r1
 80125ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80125f6:	f04f 33ff 	mov.w	r3, #4294967295
 80125fa:	fa23 f707 	lsr.w	r7, r3, r7
 80125fe:	4207      	tst	r7, r0
 8012600:	d0f3      	beq.n	80125ea <floor+0x9a>
 8012602:	a311      	add	r3, pc, #68	; (adr r3, 8012648 <floor+0xf8>)
 8012604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012608:	f7f4 fbc2 	bl	8006d90 <__adddf3>
 801260c:	2200      	movs	r2, #0
 801260e:	2300      	movs	r3, #0
 8012610:	f7f5 f804 	bl	800761c <__aeabi_dcmpgt>
 8012614:	2800      	cmp	r0, #0
 8012616:	d0bf      	beq.n	8012598 <floor+0x48>
 8012618:	2c00      	cmp	r4, #0
 801261a:	da02      	bge.n	8012622 <floor+0xd2>
 801261c:	2e14      	cmp	r6, #20
 801261e:	d103      	bne.n	8012628 <floor+0xd8>
 8012620:	3401      	adds	r4, #1
 8012622:	ea25 0507 	bic.w	r5, r5, r7
 8012626:	e7b7      	b.n	8012598 <floor+0x48>
 8012628:	2301      	movs	r3, #1
 801262a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801262e:	fa03 f606 	lsl.w	r6, r3, r6
 8012632:	4435      	add	r5, r6
 8012634:	4545      	cmp	r5, r8
 8012636:	bf38      	it	cc
 8012638:	18e4      	addcc	r4, r4, r3
 801263a:	e7f2      	b.n	8012622 <floor+0xd2>
 801263c:	2500      	movs	r5, #0
 801263e:	462c      	mov	r4, r5
 8012640:	e7aa      	b.n	8012598 <floor+0x48>
 8012642:	bf00      	nop
 8012644:	f3af 8000 	nop.w
 8012648:	8800759c 	.word	0x8800759c
 801264c:	7e37e43c 	.word	0x7e37e43c
 8012650:	bff00000 	.word	0xbff00000
 8012654:	000fffff 	.word	0x000fffff

08012658 <scalbn>:
 8012658:	b570      	push	{r4, r5, r6, lr}
 801265a:	ec55 4b10 	vmov	r4, r5, d0
 801265e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012662:	4606      	mov	r6, r0
 8012664:	462b      	mov	r3, r5
 8012666:	b9aa      	cbnz	r2, 8012694 <scalbn+0x3c>
 8012668:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801266c:	4323      	orrs	r3, r4
 801266e:	d03b      	beq.n	80126e8 <scalbn+0x90>
 8012670:	4b31      	ldr	r3, [pc, #196]	; (8012738 <scalbn+0xe0>)
 8012672:	4629      	mov	r1, r5
 8012674:	2200      	movs	r2, #0
 8012676:	ee10 0a10 	vmov	r0, s0
 801267a:	f7f4 fd3f 	bl	80070fc <__aeabi_dmul>
 801267e:	4b2f      	ldr	r3, [pc, #188]	; (801273c <scalbn+0xe4>)
 8012680:	429e      	cmp	r6, r3
 8012682:	4604      	mov	r4, r0
 8012684:	460d      	mov	r5, r1
 8012686:	da12      	bge.n	80126ae <scalbn+0x56>
 8012688:	a327      	add	r3, pc, #156	; (adr r3, 8012728 <scalbn+0xd0>)
 801268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268e:	f7f4 fd35 	bl	80070fc <__aeabi_dmul>
 8012692:	e009      	b.n	80126a8 <scalbn+0x50>
 8012694:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012698:	428a      	cmp	r2, r1
 801269a:	d10c      	bne.n	80126b6 <scalbn+0x5e>
 801269c:	ee10 2a10 	vmov	r2, s0
 80126a0:	4620      	mov	r0, r4
 80126a2:	4629      	mov	r1, r5
 80126a4:	f7f4 fb74 	bl	8006d90 <__adddf3>
 80126a8:	4604      	mov	r4, r0
 80126aa:	460d      	mov	r5, r1
 80126ac:	e01c      	b.n	80126e8 <scalbn+0x90>
 80126ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80126b2:	460b      	mov	r3, r1
 80126b4:	3a36      	subs	r2, #54	; 0x36
 80126b6:	4432      	add	r2, r6
 80126b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80126bc:	428a      	cmp	r2, r1
 80126be:	dd0b      	ble.n	80126d8 <scalbn+0x80>
 80126c0:	ec45 4b11 	vmov	d1, r4, r5
 80126c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012730 <scalbn+0xd8>
 80126c8:	f000 f83c 	bl	8012744 <copysign>
 80126cc:	a318      	add	r3, pc, #96	; (adr r3, 8012730 <scalbn+0xd8>)
 80126ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d2:	ec51 0b10 	vmov	r0, r1, d0
 80126d6:	e7da      	b.n	801268e <scalbn+0x36>
 80126d8:	2a00      	cmp	r2, #0
 80126da:	dd08      	ble.n	80126ee <scalbn+0x96>
 80126dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80126e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80126e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80126e8:	ec45 4b10 	vmov	d0, r4, r5
 80126ec:	bd70      	pop	{r4, r5, r6, pc}
 80126ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80126f2:	da0d      	bge.n	8012710 <scalbn+0xb8>
 80126f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80126f8:	429e      	cmp	r6, r3
 80126fa:	ec45 4b11 	vmov	d1, r4, r5
 80126fe:	dce1      	bgt.n	80126c4 <scalbn+0x6c>
 8012700:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012728 <scalbn+0xd0>
 8012704:	f000 f81e 	bl	8012744 <copysign>
 8012708:	a307      	add	r3, pc, #28	; (adr r3, 8012728 <scalbn+0xd0>)
 801270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270e:	e7e0      	b.n	80126d2 <scalbn+0x7a>
 8012710:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012714:	3236      	adds	r2, #54	; 0x36
 8012716:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801271a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801271e:	4620      	mov	r0, r4
 8012720:	4629      	mov	r1, r5
 8012722:	2200      	movs	r2, #0
 8012724:	4b06      	ldr	r3, [pc, #24]	; (8012740 <scalbn+0xe8>)
 8012726:	e7b2      	b.n	801268e <scalbn+0x36>
 8012728:	c2f8f359 	.word	0xc2f8f359
 801272c:	01a56e1f 	.word	0x01a56e1f
 8012730:	8800759c 	.word	0x8800759c
 8012734:	7e37e43c 	.word	0x7e37e43c
 8012738:	43500000 	.word	0x43500000
 801273c:	ffff3cb0 	.word	0xffff3cb0
 8012740:	3c900000 	.word	0x3c900000

08012744 <copysign>:
 8012744:	ec51 0b10 	vmov	r0, r1, d0
 8012748:	ee11 0a90 	vmov	r0, s3
 801274c:	ee10 2a10 	vmov	r2, s0
 8012750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012754:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012758:	ea41 0300 	orr.w	r3, r1, r0
 801275c:	ec43 2b10 	vmov	d0, r2, r3
 8012760:	4770      	bx	lr

08012762 <abort>:
 8012762:	b508      	push	{r3, lr}
 8012764:	2006      	movs	r0, #6
 8012766:	f000 ff7d 	bl	8013664 <raise>
 801276a:	2001      	movs	r0, #1
 801276c:	f7fb ff36 	bl	800e5dc <_exit>

08012770 <atof>:
 8012770:	2100      	movs	r1, #0
 8012772:	f001 be4d 	b.w	8014410 <strtod>
	...

08012778 <__errno>:
 8012778:	4b01      	ldr	r3, [pc, #4]	; (8012780 <__errno+0x8>)
 801277a:	6818      	ldr	r0, [r3, #0]
 801277c:	4770      	bx	lr
 801277e:	bf00      	nop
 8012780:	20000404 	.word	0x20000404

08012784 <_fputs_r>:
 8012784:	b530      	push	{r4, r5, lr}
 8012786:	b087      	sub	sp, #28
 8012788:	4605      	mov	r5, r0
 801278a:	4608      	mov	r0, r1
 801278c:	4614      	mov	r4, r2
 801278e:	9101      	str	r1, [sp, #4]
 8012790:	f7f4 faf0 	bl	8006d74 <strlen>
 8012794:	ab01      	add	r3, sp, #4
 8012796:	9303      	str	r3, [sp, #12]
 8012798:	2301      	movs	r3, #1
 801279a:	9005      	str	r0, [sp, #20]
 801279c:	9002      	str	r0, [sp, #8]
 801279e:	9304      	str	r3, [sp, #16]
 80127a0:	b125      	cbz	r5, 80127ac <_fputs_r+0x28>
 80127a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80127a4:	b913      	cbnz	r3, 80127ac <_fputs_r+0x28>
 80127a6:	4628      	mov	r0, r5
 80127a8:	f005 fc38 	bl	801801c <__sinit>
 80127ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127ae:	07db      	lsls	r3, r3, #31
 80127b0:	d405      	bmi.n	80127be <_fputs_r+0x3a>
 80127b2:	89a3      	ldrh	r3, [r4, #12]
 80127b4:	0598      	lsls	r0, r3, #22
 80127b6:	d402      	bmi.n	80127be <_fputs_r+0x3a>
 80127b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127ba:	f000 fa03 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 80127be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127c2:	0499      	lsls	r1, r3, #18
 80127c4:	d406      	bmi.n	80127d4 <_fputs_r+0x50>
 80127c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80127ca:	81a3      	strh	r3, [r4, #12]
 80127cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127d2:	6663      	str	r3, [r4, #100]	; 0x64
 80127d4:	aa03      	add	r2, sp, #12
 80127d6:	4628      	mov	r0, r5
 80127d8:	4621      	mov	r1, r4
 80127da:	f000 f827 	bl	801282c <__sfvwrite_r>
 80127de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127e0:	07da      	lsls	r2, r3, #31
 80127e2:	4605      	mov	r5, r0
 80127e4:	d405      	bmi.n	80127f2 <_fputs_r+0x6e>
 80127e6:	89a3      	ldrh	r3, [r4, #12]
 80127e8:	059b      	lsls	r3, r3, #22
 80127ea:	d402      	bmi.n	80127f2 <_fputs_r+0x6e>
 80127ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127ee:	f000 f9ea 	bl	8012bc6 <__retarget_lock_release_recursive>
 80127f2:	4628      	mov	r0, r5
 80127f4:	b007      	add	sp, #28
 80127f6:	bd30      	pop	{r4, r5, pc}

080127f8 <fputs>:
 80127f8:	4b02      	ldr	r3, [pc, #8]	; (8012804 <fputs+0xc>)
 80127fa:	460a      	mov	r2, r1
 80127fc:	4601      	mov	r1, r0
 80127fe:	6818      	ldr	r0, [r3, #0]
 8012800:	f7ff bfc0 	b.w	8012784 <_fputs_r>
 8012804:	20000404 	.word	0x20000404

08012808 <_fstat_r>:
 8012808:	b538      	push	{r3, r4, r5, lr}
 801280a:	4c07      	ldr	r4, [pc, #28]	; (8012828 <_fstat_r+0x20>)
 801280c:	2300      	movs	r3, #0
 801280e:	4605      	mov	r5, r0
 8012810:	4608      	mov	r0, r1
 8012812:	4611      	mov	r1, r2
 8012814:	6023      	str	r3, [r4, #0]
 8012816:	f7fb ff30 	bl	800e67a <_fstat>
 801281a:	1c43      	adds	r3, r0, #1
 801281c:	d102      	bne.n	8012824 <_fstat_r+0x1c>
 801281e:	6823      	ldr	r3, [r4, #0]
 8012820:	b103      	cbz	r3, 8012824 <_fstat_r+0x1c>
 8012822:	602b      	str	r3, [r5, #0]
 8012824:	bd38      	pop	{r3, r4, r5, pc}
 8012826:	bf00      	nop
 8012828:	200010f8 	.word	0x200010f8

0801282c <__sfvwrite_r>:
 801282c:	6893      	ldr	r3, [r2, #8]
 801282e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012832:	4680      	mov	r8, r0
 8012834:	460c      	mov	r4, r1
 8012836:	4691      	mov	r9, r2
 8012838:	b91b      	cbnz	r3, 8012842 <__sfvwrite_r+0x16>
 801283a:	2000      	movs	r0, #0
 801283c:	b003      	add	sp, #12
 801283e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012842:	898b      	ldrh	r3, [r1, #12]
 8012844:	0718      	lsls	r0, r3, #28
 8012846:	d54f      	bpl.n	80128e8 <__sfvwrite_r+0xbc>
 8012848:	690b      	ldr	r3, [r1, #16]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d04c      	beq.n	80128e8 <__sfvwrite_r+0xbc>
 801284e:	89a5      	ldrh	r5, [r4, #12]
 8012850:	f8d9 6000 	ldr.w	r6, [r9]
 8012854:	f015 0702 	ands.w	r7, r5, #2
 8012858:	d169      	bne.n	801292e <__sfvwrite_r+0x102>
 801285a:	f015 0501 	ands.w	r5, r5, #1
 801285e:	f000 809a 	beq.w	8012996 <__sfvwrite_r+0x16a>
 8012862:	4638      	mov	r0, r7
 8012864:	46ba      	mov	sl, r7
 8012866:	46bb      	mov	fp, r7
 8012868:	f1bb 0f00 	cmp.w	fp, #0
 801286c:	f000 8103 	beq.w	8012a76 <__sfvwrite_r+0x24a>
 8012870:	b950      	cbnz	r0, 8012888 <__sfvwrite_r+0x5c>
 8012872:	465a      	mov	r2, fp
 8012874:	210a      	movs	r1, #10
 8012876:	4650      	mov	r0, sl
 8012878:	f7f4 fa22 	bl	8006cc0 <memchr>
 801287c:	2800      	cmp	r0, #0
 801287e:	f000 80ff 	beq.w	8012a80 <__sfvwrite_r+0x254>
 8012882:	3001      	adds	r0, #1
 8012884:	eba0 070a 	sub.w	r7, r0, sl
 8012888:	6820      	ldr	r0, [r4, #0]
 801288a:	6921      	ldr	r1, [r4, #16]
 801288c:	6962      	ldr	r2, [r4, #20]
 801288e:	455f      	cmp	r7, fp
 8012890:	463b      	mov	r3, r7
 8012892:	bf28      	it	cs
 8012894:	465b      	movcs	r3, fp
 8012896:	4288      	cmp	r0, r1
 8012898:	f240 80f5 	bls.w	8012a86 <__sfvwrite_r+0x25a>
 801289c:	68a5      	ldr	r5, [r4, #8]
 801289e:	4415      	add	r5, r2
 80128a0:	42ab      	cmp	r3, r5
 80128a2:	f340 80f0 	ble.w	8012a86 <__sfvwrite_r+0x25a>
 80128a6:	4651      	mov	r1, sl
 80128a8:	462a      	mov	r2, r5
 80128aa:	f000 fc59 	bl	8013160 <memmove>
 80128ae:	6823      	ldr	r3, [r4, #0]
 80128b0:	442b      	add	r3, r5
 80128b2:	6023      	str	r3, [r4, #0]
 80128b4:	4621      	mov	r1, r4
 80128b6:	4640      	mov	r0, r8
 80128b8:	f005 fb44 	bl	8017f44 <_fflush_r>
 80128bc:	2800      	cmp	r0, #0
 80128be:	d165      	bne.n	801298c <__sfvwrite_r+0x160>
 80128c0:	1b7f      	subs	r7, r7, r5
 80128c2:	f040 80fa 	bne.w	8012aba <__sfvwrite_r+0x28e>
 80128c6:	4621      	mov	r1, r4
 80128c8:	4640      	mov	r0, r8
 80128ca:	f005 fb3b 	bl	8017f44 <_fflush_r>
 80128ce:	2800      	cmp	r0, #0
 80128d0:	d15c      	bne.n	801298c <__sfvwrite_r+0x160>
 80128d2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80128d6:	44aa      	add	sl, r5
 80128d8:	ebab 0b05 	sub.w	fp, fp, r5
 80128dc:	1b5d      	subs	r5, r3, r5
 80128de:	f8c9 5008 	str.w	r5, [r9, #8]
 80128e2:	2d00      	cmp	r5, #0
 80128e4:	d1c0      	bne.n	8012868 <__sfvwrite_r+0x3c>
 80128e6:	e7a8      	b.n	801283a <__sfvwrite_r+0xe>
 80128e8:	4621      	mov	r1, r4
 80128ea:	4640      	mov	r0, r8
 80128ec:	f004 fbf0 	bl	80170d0 <__swsetup_r>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	d0ac      	beq.n	801284e <__sfvwrite_r+0x22>
 80128f4:	f04f 30ff 	mov.w	r0, #4294967295
 80128f8:	e7a0      	b.n	801283c <__sfvwrite_r+0x10>
 80128fa:	e9d6 a700 	ldrd	sl, r7, [r6]
 80128fe:	3608      	adds	r6, #8
 8012900:	2f00      	cmp	r7, #0
 8012902:	d0fa      	beq.n	80128fa <__sfvwrite_r+0xce>
 8012904:	455f      	cmp	r7, fp
 8012906:	463b      	mov	r3, r7
 8012908:	4652      	mov	r2, sl
 801290a:	bf28      	it	cs
 801290c:	465b      	movcs	r3, fp
 801290e:	69e1      	ldr	r1, [r4, #28]
 8012910:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012912:	4640      	mov	r0, r8
 8012914:	47a8      	blx	r5
 8012916:	2800      	cmp	r0, #0
 8012918:	dd38      	ble.n	801298c <__sfvwrite_r+0x160>
 801291a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801291e:	4482      	add	sl, r0
 8012920:	1a3f      	subs	r7, r7, r0
 8012922:	1a18      	subs	r0, r3, r0
 8012924:	f8c9 0008 	str.w	r0, [r9, #8]
 8012928:	2800      	cmp	r0, #0
 801292a:	d1e9      	bne.n	8012900 <__sfvwrite_r+0xd4>
 801292c:	e785      	b.n	801283a <__sfvwrite_r+0xe>
 801292e:	f04f 0a00 	mov.w	sl, #0
 8012932:	4657      	mov	r7, sl
 8012934:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8012ac4 <__sfvwrite_r+0x298>
 8012938:	e7e2      	b.n	8012900 <__sfvwrite_r+0xd4>
 801293a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 801293e:	3608      	adds	r6, #8
 8012940:	f1ba 0f00 	cmp.w	sl, #0
 8012944:	d0f9      	beq.n	801293a <__sfvwrite_r+0x10e>
 8012946:	89a2      	ldrh	r2, [r4, #12]
 8012948:	68a3      	ldr	r3, [r4, #8]
 801294a:	6820      	ldr	r0, [r4, #0]
 801294c:	0591      	lsls	r1, r2, #22
 801294e:	d564      	bpl.n	8012a1a <__sfvwrite_r+0x1ee>
 8012950:	4553      	cmp	r3, sl
 8012952:	d836      	bhi.n	80129c2 <__sfvwrite_r+0x196>
 8012954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012958:	d033      	beq.n	80129c2 <__sfvwrite_r+0x196>
 801295a:	6921      	ldr	r1, [r4, #16]
 801295c:	6967      	ldr	r7, [r4, #20]
 801295e:	eba0 0b01 	sub.w	fp, r0, r1
 8012962:	2302      	movs	r3, #2
 8012964:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012968:	fb97 f7f3 	sdiv	r7, r7, r3
 801296c:	f10b 0301 	add.w	r3, fp, #1
 8012970:	4453      	add	r3, sl
 8012972:	429f      	cmp	r7, r3
 8012974:	bf38      	it	cc
 8012976:	461f      	movcc	r7, r3
 8012978:	0553      	lsls	r3, r2, #21
 801297a:	d53e      	bpl.n	80129fa <__sfvwrite_r+0x1ce>
 801297c:	4639      	mov	r1, r7
 801297e:	4640      	mov	r0, r8
 8012980:	f000 f99e 	bl	8012cc0 <_malloc_r>
 8012984:	b948      	cbnz	r0, 801299a <__sfvwrite_r+0x16e>
 8012986:	230c      	movs	r3, #12
 8012988:	f8c8 3000 	str.w	r3, [r8]
 801298c:	89a3      	ldrh	r3, [r4, #12]
 801298e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012992:	81a3      	strh	r3, [r4, #12]
 8012994:	e7ae      	b.n	80128f4 <__sfvwrite_r+0xc8>
 8012996:	46aa      	mov	sl, r5
 8012998:	e7d2      	b.n	8012940 <__sfvwrite_r+0x114>
 801299a:	465a      	mov	r2, fp
 801299c:	6921      	ldr	r1, [r4, #16]
 801299e:	9001      	str	r0, [sp, #4]
 80129a0:	f000 fbd3 	bl	801314a <memcpy>
 80129a4:	89a2      	ldrh	r2, [r4, #12]
 80129a6:	9b01      	ldr	r3, [sp, #4]
 80129a8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80129ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80129b0:	81a2      	strh	r2, [r4, #12]
 80129b2:	6123      	str	r3, [r4, #16]
 80129b4:	6167      	str	r7, [r4, #20]
 80129b6:	445b      	add	r3, fp
 80129b8:	eba7 070b 	sub.w	r7, r7, fp
 80129bc:	6023      	str	r3, [r4, #0]
 80129be:	60a7      	str	r7, [r4, #8]
 80129c0:	4653      	mov	r3, sl
 80129c2:	4553      	cmp	r3, sl
 80129c4:	bf28      	it	cs
 80129c6:	4653      	movcs	r3, sl
 80129c8:	461a      	mov	r2, r3
 80129ca:	4629      	mov	r1, r5
 80129cc:	6820      	ldr	r0, [r4, #0]
 80129ce:	9301      	str	r3, [sp, #4]
 80129d0:	f000 fbc6 	bl	8013160 <memmove>
 80129d4:	68a2      	ldr	r2, [r4, #8]
 80129d6:	9b01      	ldr	r3, [sp, #4]
 80129d8:	1ad2      	subs	r2, r2, r3
 80129da:	60a2      	str	r2, [r4, #8]
 80129dc:	6822      	ldr	r2, [r4, #0]
 80129de:	4413      	add	r3, r2
 80129e0:	4657      	mov	r7, sl
 80129e2:	6023      	str	r3, [r4, #0]
 80129e4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80129e8:	443d      	add	r5, r7
 80129ea:	ebaa 0a07 	sub.w	sl, sl, r7
 80129ee:	1bdf      	subs	r7, r3, r7
 80129f0:	f8c9 7008 	str.w	r7, [r9, #8]
 80129f4:	2f00      	cmp	r7, #0
 80129f6:	d1a3      	bne.n	8012940 <__sfvwrite_r+0x114>
 80129f8:	e71f      	b.n	801283a <__sfvwrite_r+0xe>
 80129fa:	463a      	mov	r2, r7
 80129fc:	4640      	mov	r0, r8
 80129fe:	f000 fc4f 	bl	80132a0 <_realloc_r>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2800      	cmp	r0, #0
 8012a06:	d1d4      	bne.n	80129b2 <__sfvwrite_r+0x186>
 8012a08:	6921      	ldr	r1, [r4, #16]
 8012a0a:	4640      	mov	r0, r8
 8012a0c:	f005 fb96 	bl	801813c <_free_r>
 8012a10:	89a3      	ldrh	r3, [r4, #12]
 8012a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a16:	81a3      	strh	r3, [r4, #12]
 8012a18:	e7b5      	b.n	8012986 <__sfvwrite_r+0x15a>
 8012a1a:	6922      	ldr	r2, [r4, #16]
 8012a1c:	4282      	cmp	r2, r0
 8012a1e:	d302      	bcc.n	8012a26 <__sfvwrite_r+0x1fa>
 8012a20:	6962      	ldr	r2, [r4, #20]
 8012a22:	4552      	cmp	r2, sl
 8012a24:	d916      	bls.n	8012a54 <__sfvwrite_r+0x228>
 8012a26:	4553      	cmp	r3, sl
 8012a28:	bf28      	it	cs
 8012a2a:	4653      	movcs	r3, sl
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	4629      	mov	r1, r5
 8012a30:	461f      	mov	r7, r3
 8012a32:	f000 fb95 	bl	8013160 <memmove>
 8012a36:	68a3      	ldr	r3, [r4, #8]
 8012a38:	6822      	ldr	r2, [r4, #0]
 8012a3a:	1bdb      	subs	r3, r3, r7
 8012a3c:	443a      	add	r2, r7
 8012a3e:	60a3      	str	r3, [r4, #8]
 8012a40:	6022      	str	r2, [r4, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d1ce      	bne.n	80129e4 <__sfvwrite_r+0x1b8>
 8012a46:	4621      	mov	r1, r4
 8012a48:	4640      	mov	r0, r8
 8012a4a:	f005 fa7b 	bl	8017f44 <_fflush_r>
 8012a4e:	2800      	cmp	r0, #0
 8012a50:	d0c8      	beq.n	80129e4 <__sfvwrite_r+0x1b8>
 8012a52:	e79b      	b.n	801298c <__sfvwrite_r+0x160>
 8012a54:	4b1a      	ldr	r3, [pc, #104]	; (8012ac0 <__sfvwrite_r+0x294>)
 8012a56:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012a58:	69e1      	ldr	r1, [r4, #28]
 8012a5a:	459a      	cmp	sl, r3
 8012a5c:	bf94      	ite	ls
 8012a5e:	4653      	movls	r3, sl
 8012a60:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 8012a64:	4640      	mov	r0, r8
 8012a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a6a:	4353      	muls	r3, r2
 8012a6c:	462a      	mov	r2, r5
 8012a6e:	47b8      	blx	r7
 8012a70:	1e07      	subs	r7, r0, #0
 8012a72:	dcb7      	bgt.n	80129e4 <__sfvwrite_r+0x1b8>
 8012a74:	e78a      	b.n	801298c <__sfvwrite_r+0x160>
 8012a76:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8012a7a:	2000      	movs	r0, #0
 8012a7c:	3608      	adds	r6, #8
 8012a7e:	e6f3      	b.n	8012868 <__sfvwrite_r+0x3c>
 8012a80:	f10b 0701 	add.w	r7, fp, #1
 8012a84:	e700      	b.n	8012888 <__sfvwrite_r+0x5c>
 8012a86:	429a      	cmp	r2, r3
 8012a88:	dc09      	bgt.n	8012a9e <__sfvwrite_r+0x272>
 8012a8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012a8c:	69e1      	ldr	r1, [r4, #28]
 8012a8e:	4613      	mov	r3, r2
 8012a90:	4640      	mov	r0, r8
 8012a92:	4652      	mov	r2, sl
 8012a94:	47a8      	blx	r5
 8012a96:	1e05      	subs	r5, r0, #0
 8012a98:	f73f af12 	bgt.w	80128c0 <__sfvwrite_r+0x94>
 8012a9c:	e776      	b.n	801298c <__sfvwrite_r+0x160>
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	4651      	mov	r1, sl
 8012aa2:	9301      	str	r3, [sp, #4]
 8012aa4:	f000 fb5c 	bl	8013160 <memmove>
 8012aa8:	9b01      	ldr	r3, [sp, #4]
 8012aaa:	68a2      	ldr	r2, [r4, #8]
 8012aac:	1ad2      	subs	r2, r2, r3
 8012aae:	60a2      	str	r2, [r4, #8]
 8012ab0:	6822      	ldr	r2, [r4, #0]
 8012ab2:	441a      	add	r2, r3
 8012ab4:	6022      	str	r2, [r4, #0]
 8012ab6:	461d      	mov	r5, r3
 8012ab8:	e702      	b.n	80128c0 <__sfvwrite_r+0x94>
 8012aba:	2001      	movs	r0, #1
 8012abc:	e709      	b.n	80128d2 <__sfvwrite_r+0xa6>
 8012abe:	bf00      	nop
 8012ac0:	7ffffffe 	.word	0x7ffffffe
 8012ac4:	7ffffc00 	.word	0x7ffffc00

08012ac8 <_fwrite_r>:
 8012ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012acc:	b086      	sub	sp, #24
 8012ace:	fb02 f503 	mul.w	r5, r2, r3
 8012ad2:	461e      	mov	r6, r3
 8012ad4:	ab01      	add	r3, sp, #4
 8012ad6:	9303      	str	r3, [sp, #12]
 8012ad8:	2301      	movs	r3, #1
 8012ada:	4617      	mov	r7, r2
 8012adc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012ade:	9101      	str	r1, [sp, #4]
 8012ae0:	9502      	str	r5, [sp, #8]
 8012ae2:	9505      	str	r5, [sp, #20]
 8012ae4:	9304      	str	r3, [sp, #16]
 8012ae6:	4680      	mov	r8, r0
 8012ae8:	b118      	cbz	r0, 8012af2 <_fwrite_r+0x2a>
 8012aea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8012aec:	b90b      	cbnz	r3, 8012af2 <_fwrite_r+0x2a>
 8012aee:	f005 fa95 	bl	801801c <__sinit>
 8012af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012af4:	07d8      	lsls	r0, r3, #31
 8012af6:	d405      	bmi.n	8012b04 <_fwrite_r+0x3c>
 8012af8:	89a3      	ldrh	r3, [r4, #12]
 8012afa:	0599      	lsls	r1, r3, #22
 8012afc:	d402      	bmi.n	8012b04 <_fwrite_r+0x3c>
 8012afe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b00:	f000 f860 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 8012b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b08:	049a      	lsls	r2, r3, #18
 8012b0a:	d406      	bmi.n	8012b1a <_fwrite_r+0x52>
 8012b0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012b10:	81a3      	strh	r3, [r4, #12]
 8012b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012b18:	6663      	str	r3, [r4, #100]	; 0x64
 8012b1a:	aa03      	add	r2, sp, #12
 8012b1c:	4621      	mov	r1, r4
 8012b1e:	4640      	mov	r0, r8
 8012b20:	f7ff fe84 	bl	801282c <__sfvwrite_r>
 8012b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b26:	b958      	cbnz	r0, 8012b40 <_fwrite_r+0x78>
 8012b28:	07d8      	lsls	r0, r3, #31
 8012b2a:	d405      	bmi.n	8012b38 <_fwrite_r+0x70>
 8012b2c:	89a3      	ldrh	r3, [r4, #12]
 8012b2e:	0599      	lsls	r1, r3, #22
 8012b30:	d402      	bmi.n	8012b38 <_fwrite_r+0x70>
 8012b32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b34:	f000 f847 	bl	8012bc6 <__retarget_lock_release_recursive>
 8012b38:	4630      	mov	r0, r6
 8012b3a:	b006      	add	sp, #24
 8012b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b40:	07da      	lsls	r2, r3, #31
 8012b42:	d405      	bmi.n	8012b50 <_fwrite_r+0x88>
 8012b44:	89a3      	ldrh	r3, [r4, #12]
 8012b46:	059b      	lsls	r3, r3, #22
 8012b48:	d402      	bmi.n	8012b50 <_fwrite_r+0x88>
 8012b4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b4c:	f000 f83b 	bl	8012bc6 <__retarget_lock_release_recursive>
 8012b50:	9b05      	ldr	r3, [sp, #20]
 8012b52:	1aed      	subs	r5, r5, r3
 8012b54:	fbb5 f6f7 	udiv	r6, r5, r7
 8012b58:	e7ee      	b.n	8012b38 <_fwrite_r+0x70>
	...

08012b5c <fwrite>:
 8012b5c:	b507      	push	{r0, r1, r2, lr}
 8012b5e:	9300      	str	r3, [sp, #0]
 8012b60:	4613      	mov	r3, r2
 8012b62:	460a      	mov	r2, r1
 8012b64:	4601      	mov	r1, r0
 8012b66:	4803      	ldr	r0, [pc, #12]	; (8012b74 <fwrite+0x18>)
 8012b68:	6800      	ldr	r0, [r0, #0]
 8012b6a:	f7ff ffad 	bl	8012ac8 <_fwrite_r>
 8012b6e:	b003      	add	sp, #12
 8012b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b74:	20000404 	.word	0x20000404

08012b78 <__libc_init_array>:
 8012b78:	b570      	push	{r4, r5, r6, lr}
 8012b7a:	4e0d      	ldr	r6, [pc, #52]	; (8012bb0 <__libc_init_array+0x38>)
 8012b7c:	4c0d      	ldr	r4, [pc, #52]	; (8012bb4 <__libc_init_array+0x3c>)
 8012b7e:	1ba4      	subs	r4, r4, r6
 8012b80:	10a4      	asrs	r4, r4, #2
 8012b82:	2500      	movs	r5, #0
 8012b84:	42a5      	cmp	r5, r4
 8012b86:	d109      	bne.n	8012b9c <__libc_init_array+0x24>
 8012b88:	4e0b      	ldr	r6, [pc, #44]	; (8012bb8 <__libc_init_array+0x40>)
 8012b8a:	4c0c      	ldr	r4, [pc, #48]	; (8012bbc <__libc_init_array+0x44>)
 8012b8c:	f006 fdfa 	bl	8019784 <_init>
 8012b90:	1ba4      	subs	r4, r4, r6
 8012b92:	10a4      	asrs	r4, r4, #2
 8012b94:	2500      	movs	r5, #0
 8012b96:	42a5      	cmp	r5, r4
 8012b98:	d105      	bne.n	8012ba6 <__libc_init_array+0x2e>
 8012b9a:	bd70      	pop	{r4, r5, r6, pc}
 8012b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012ba0:	4798      	blx	r3
 8012ba2:	3501      	adds	r5, #1
 8012ba4:	e7ee      	b.n	8012b84 <__libc_init_array+0xc>
 8012ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012baa:	4798      	blx	r3
 8012bac:	3501      	adds	r5, #1
 8012bae:	e7f2      	b.n	8012b96 <__libc_init_array+0x1e>
 8012bb0:	0801dc9c 	.word	0x0801dc9c
 8012bb4:	0801dc9c 	.word	0x0801dc9c
 8012bb8:	0801dc9c 	.word	0x0801dc9c
 8012bbc:	0801dcac 	.word	0x0801dcac

08012bc0 <__retarget_lock_init_recursive>:
 8012bc0:	4770      	bx	lr

08012bc2 <__retarget_lock_close_recursive>:
 8012bc2:	4770      	bx	lr

08012bc4 <__retarget_lock_acquire_recursive>:
 8012bc4:	4770      	bx	lr

08012bc6 <__retarget_lock_release_recursive>:
 8012bc6:	4770      	bx	lr

08012bc8 <__swhatbuf_r>:
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	460e      	mov	r6, r1
 8012bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bd0:	2900      	cmp	r1, #0
 8012bd2:	b096      	sub	sp, #88	; 0x58
 8012bd4:	4614      	mov	r4, r2
 8012bd6:	461d      	mov	r5, r3
 8012bd8:	da09      	bge.n	8012bee <__swhatbuf_r+0x26>
 8012bda:	89b3      	ldrh	r3, [r6, #12]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012be2:	602a      	str	r2, [r5, #0]
 8012be4:	d116      	bne.n	8012c14 <__swhatbuf_r+0x4c>
 8012be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bea:	6023      	str	r3, [r4, #0]
 8012bec:	e015      	b.n	8012c1a <__swhatbuf_r+0x52>
 8012bee:	466a      	mov	r2, sp
 8012bf0:	f7ff fe0a 	bl	8012808 <_fstat_r>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	dbf0      	blt.n	8012bda <__swhatbuf_r+0x12>
 8012bf8:	9a01      	ldr	r2, [sp, #4]
 8012bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012c02:	425a      	negs	r2, r3
 8012c04:	415a      	adcs	r2, r3
 8012c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c0a:	602a      	str	r2, [r5, #0]
 8012c0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012c10:	6023      	str	r3, [r4, #0]
 8012c12:	e002      	b.n	8012c1a <__swhatbuf_r+0x52>
 8012c14:	2340      	movs	r3, #64	; 0x40
 8012c16:	6023      	str	r3, [r4, #0]
 8012c18:	4610      	mov	r0, r2
 8012c1a:	b016      	add	sp, #88	; 0x58
 8012c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012c20 <__smakebuf_r>:
 8012c20:	898b      	ldrh	r3, [r1, #12]
 8012c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c24:	079d      	lsls	r5, r3, #30
 8012c26:	4606      	mov	r6, r0
 8012c28:	460c      	mov	r4, r1
 8012c2a:	d507      	bpl.n	8012c3c <__smakebuf_r+0x1c>
 8012c2c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8012c30:	6023      	str	r3, [r4, #0]
 8012c32:	6123      	str	r3, [r4, #16]
 8012c34:	2301      	movs	r3, #1
 8012c36:	6163      	str	r3, [r4, #20]
 8012c38:	b002      	add	sp, #8
 8012c3a:	bd70      	pop	{r4, r5, r6, pc}
 8012c3c:	ab01      	add	r3, sp, #4
 8012c3e:	466a      	mov	r2, sp
 8012c40:	f7ff ffc2 	bl	8012bc8 <__swhatbuf_r>
 8012c44:	9900      	ldr	r1, [sp, #0]
 8012c46:	4605      	mov	r5, r0
 8012c48:	4630      	mov	r0, r6
 8012c4a:	f000 f839 	bl	8012cc0 <_malloc_r>
 8012c4e:	b948      	cbnz	r0, 8012c64 <__smakebuf_r+0x44>
 8012c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c54:	059a      	lsls	r2, r3, #22
 8012c56:	d4ef      	bmi.n	8012c38 <__smakebuf_r+0x18>
 8012c58:	f023 0303 	bic.w	r3, r3, #3
 8012c5c:	f043 0302 	orr.w	r3, r3, #2
 8012c60:	81a3      	strh	r3, [r4, #12]
 8012c62:	e7e3      	b.n	8012c2c <__smakebuf_r+0xc>
 8012c64:	4b0d      	ldr	r3, [pc, #52]	; (8012c9c <__smakebuf_r+0x7c>)
 8012c66:	63f3      	str	r3, [r6, #60]	; 0x3c
 8012c68:	89a3      	ldrh	r3, [r4, #12]
 8012c6a:	6020      	str	r0, [r4, #0]
 8012c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c70:	81a3      	strh	r3, [r4, #12]
 8012c72:	9b00      	ldr	r3, [sp, #0]
 8012c74:	6163      	str	r3, [r4, #20]
 8012c76:	9b01      	ldr	r3, [sp, #4]
 8012c78:	6120      	str	r0, [r4, #16]
 8012c7a:	b15b      	cbz	r3, 8012c94 <__smakebuf_r+0x74>
 8012c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c80:	4630      	mov	r0, r6
 8012c82:	f005 fe5b 	bl	801893c <_isatty_r>
 8012c86:	b128      	cbz	r0, 8012c94 <__smakebuf_r+0x74>
 8012c88:	89a3      	ldrh	r3, [r4, #12]
 8012c8a:	f023 0303 	bic.w	r3, r3, #3
 8012c8e:	f043 0301 	orr.w	r3, r3, #1
 8012c92:	81a3      	strh	r3, [r4, #12]
 8012c94:	89a3      	ldrh	r3, [r4, #12]
 8012c96:	431d      	orrs	r5, r3
 8012c98:	81a5      	strh	r5, [r4, #12]
 8012c9a:	e7cd      	b.n	8012c38 <__smakebuf_r+0x18>
 8012c9c:	08017fe1 	.word	0x08017fe1

08012ca0 <malloc>:
 8012ca0:	4b02      	ldr	r3, [pc, #8]	; (8012cac <malloc+0xc>)
 8012ca2:	4601      	mov	r1, r0
 8012ca4:	6818      	ldr	r0, [r3, #0]
 8012ca6:	f000 b80b 	b.w	8012cc0 <_malloc_r>
 8012caa:	bf00      	nop
 8012cac:	20000404 	.word	0x20000404

08012cb0 <free>:
 8012cb0:	4b02      	ldr	r3, [pc, #8]	; (8012cbc <free+0xc>)
 8012cb2:	4601      	mov	r1, r0
 8012cb4:	6818      	ldr	r0, [r3, #0]
 8012cb6:	f005 ba41 	b.w	801813c <_free_r>
 8012cba:	bf00      	nop
 8012cbc:	20000404 	.word	0x20000404

08012cc0 <_malloc_r>:
 8012cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc4:	f101 050b 	add.w	r5, r1, #11
 8012cc8:	2d16      	cmp	r5, #22
 8012cca:	4606      	mov	r6, r0
 8012ccc:	d906      	bls.n	8012cdc <_malloc_r+0x1c>
 8012cce:	f035 0507 	bics.w	r5, r5, #7
 8012cd2:	d504      	bpl.n	8012cde <_malloc_r+0x1e>
 8012cd4:	230c      	movs	r3, #12
 8012cd6:	6033      	str	r3, [r6, #0]
 8012cd8:	2400      	movs	r4, #0
 8012cda:	e1a8      	b.n	801302e <_malloc_r+0x36e>
 8012cdc:	2510      	movs	r5, #16
 8012cde:	428d      	cmp	r5, r1
 8012ce0:	d3f8      	bcc.n	8012cd4 <_malloc_r+0x14>
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f000 fa5e 	bl	80131a4 <__malloc_lock>
 8012ce8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8012cec:	4fc0      	ldr	r7, [pc, #768]	; (8012ff0 <_malloc_r+0x330>)
 8012cee:	d238      	bcs.n	8012d62 <_malloc_r+0xa2>
 8012cf0:	f105 0208 	add.w	r2, r5, #8
 8012cf4:	443a      	add	r2, r7
 8012cf6:	f1a2 0108 	sub.w	r1, r2, #8
 8012cfa:	6854      	ldr	r4, [r2, #4]
 8012cfc:	428c      	cmp	r4, r1
 8012cfe:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8012d02:	d102      	bne.n	8012d0a <_malloc_r+0x4a>
 8012d04:	68d4      	ldr	r4, [r2, #12]
 8012d06:	42a2      	cmp	r2, r4
 8012d08:	d010      	beq.n	8012d2c <_malloc_r+0x6c>
 8012d0a:	6863      	ldr	r3, [r4, #4]
 8012d0c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8012d10:	f023 0303 	bic.w	r3, r3, #3
 8012d14:	60ca      	str	r2, [r1, #12]
 8012d16:	4423      	add	r3, r4
 8012d18:	6091      	str	r1, [r2, #8]
 8012d1a:	685a      	ldr	r2, [r3, #4]
 8012d1c:	f042 0201 	orr.w	r2, r2, #1
 8012d20:	605a      	str	r2, [r3, #4]
 8012d22:	4630      	mov	r0, r6
 8012d24:	f000 fa44 	bl	80131b0 <__malloc_unlock>
 8012d28:	3408      	adds	r4, #8
 8012d2a:	e180      	b.n	801302e <_malloc_r+0x36e>
 8012d2c:	3302      	adds	r3, #2
 8012d2e:	4ab1      	ldr	r2, [pc, #708]	; (8012ff4 <_malloc_r+0x334>)
 8012d30:	693c      	ldr	r4, [r7, #16]
 8012d32:	4294      	cmp	r4, r2
 8012d34:	4611      	mov	r1, r2
 8012d36:	d075      	beq.n	8012e24 <_malloc_r+0x164>
 8012d38:	6860      	ldr	r0, [r4, #4]
 8012d3a:	f020 0c03 	bic.w	ip, r0, #3
 8012d3e:	ebac 0005 	sub.w	r0, ip, r5
 8012d42:	280f      	cmp	r0, #15
 8012d44:	dd48      	ble.n	8012dd8 <_malloc_r+0x118>
 8012d46:	1963      	adds	r3, r4, r5
 8012d48:	f045 0501 	orr.w	r5, r5, #1
 8012d4c:	6065      	str	r5, [r4, #4]
 8012d4e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8012d52:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8012d56:	f040 0201 	orr.w	r2, r0, #1
 8012d5a:	605a      	str	r2, [r3, #4]
 8012d5c:	f844 000c 	str.w	r0, [r4, ip]
 8012d60:	e7df      	b.n	8012d22 <_malloc_r+0x62>
 8012d62:	0a6b      	lsrs	r3, r5, #9
 8012d64:	d02a      	beq.n	8012dbc <_malloc_r+0xfc>
 8012d66:	2b04      	cmp	r3, #4
 8012d68:	d812      	bhi.n	8012d90 <_malloc_r+0xd0>
 8012d6a:	09ab      	lsrs	r3, r5, #6
 8012d6c:	3338      	adds	r3, #56	; 0x38
 8012d6e:	1c5a      	adds	r2, r3, #1
 8012d70:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8012d74:	f1a2 0c08 	sub.w	ip, r2, #8
 8012d78:	6854      	ldr	r4, [r2, #4]
 8012d7a:	4564      	cmp	r4, ip
 8012d7c:	d006      	beq.n	8012d8c <_malloc_r+0xcc>
 8012d7e:	6862      	ldr	r2, [r4, #4]
 8012d80:	f022 0203 	bic.w	r2, r2, #3
 8012d84:	1b50      	subs	r0, r2, r5
 8012d86:	280f      	cmp	r0, #15
 8012d88:	dd1c      	ble.n	8012dc4 <_malloc_r+0x104>
 8012d8a:	3b01      	subs	r3, #1
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	e7ce      	b.n	8012d2e <_malloc_r+0x6e>
 8012d90:	2b14      	cmp	r3, #20
 8012d92:	d801      	bhi.n	8012d98 <_malloc_r+0xd8>
 8012d94:	335b      	adds	r3, #91	; 0x5b
 8012d96:	e7ea      	b.n	8012d6e <_malloc_r+0xae>
 8012d98:	2b54      	cmp	r3, #84	; 0x54
 8012d9a:	d802      	bhi.n	8012da2 <_malloc_r+0xe2>
 8012d9c:	0b2b      	lsrs	r3, r5, #12
 8012d9e:	336e      	adds	r3, #110	; 0x6e
 8012da0:	e7e5      	b.n	8012d6e <_malloc_r+0xae>
 8012da2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8012da6:	d802      	bhi.n	8012dae <_malloc_r+0xee>
 8012da8:	0beb      	lsrs	r3, r5, #15
 8012daa:	3377      	adds	r3, #119	; 0x77
 8012dac:	e7df      	b.n	8012d6e <_malloc_r+0xae>
 8012dae:	f240 5254 	movw	r2, #1364	; 0x554
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d804      	bhi.n	8012dc0 <_malloc_r+0x100>
 8012db6:	0cab      	lsrs	r3, r5, #18
 8012db8:	337c      	adds	r3, #124	; 0x7c
 8012dba:	e7d8      	b.n	8012d6e <_malloc_r+0xae>
 8012dbc:	233f      	movs	r3, #63	; 0x3f
 8012dbe:	e7d6      	b.n	8012d6e <_malloc_r+0xae>
 8012dc0:	237e      	movs	r3, #126	; 0x7e
 8012dc2:	e7d4      	b.n	8012d6e <_malloc_r+0xae>
 8012dc4:	2800      	cmp	r0, #0
 8012dc6:	68e1      	ldr	r1, [r4, #12]
 8012dc8:	db04      	blt.n	8012dd4 <_malloc_r+0x114>
 8012dca:	68a3      	ldr	r3, [r4, #8]
 8012dcc:	60d9      	str	r1, [r3, #12]
 8012dce:	608b      	str	r3, [r1, #8]
 8012dd0:	18a3      	adds	r3, r4, r2
 8012dd2:	e7a2      	b.n	8012d1a <_malloc_r+0x5a>
 8012dd4:	460c      	mov	r4, r1
 8012dd6:	e7d0      	b.n	8012d7a <_malloc_r+0xba>
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8012dde:	db07      	blt.n	8012df0 <_malloc_r+0x130>
 8012de0:	44a4      	add	ip, r4
 8012de2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8012de6:	f043 0301 	orr.w	r3, r3, #1
 8012dea:	f8cc 3004 	str.w	r3, [ip, #4]
 8012dee:	e798      	b.n	8012d22 <_malloc_r+0x62>
 8012df0:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f080 8099 	bcs.w	8012f2c <_malloc_r+0x26c>
 8012dfa:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8012dfe:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8012e02:	2201      	movs	r2, #1
 8012e04:	f10c 0c01 	add.w	ip, ip, #1
 8012e08:	fa02 f20e 	lsl.w	r2, r2, lr
 8012e0c:	4310      	orrs	r0, r2
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8012e14:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8012e18:	3a08      	subs	r2, #8
 8012e1a:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8012e1e:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8012e22:	60c4      	str	r4, [r0, #12]
 8012e24:	2001      	movs	r0, #1
 8012e26:	109a      	asrs	r2, r3, #2
 8012e28:	fa00 f202 	lsl.w	r2, r0, r2
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	4290      	cmp	r0, r2
 8012e30:	d326      	bcc.n	8012e80 <_malloc_r+0x1c0>
 8012e32:	4210      	tst	r0, r2
 8012e34:	d106      	bne.n	8012e44 <_malloc_r+0x184>
 8012e36:	f023 0303 	bic.w	r3, r3, #3
 8012e3a:	0052      	lsls	r2, r2, #1
 8012e3c:	4210      	tst	r0, r2
 8012e3e:	f103 0304 	add.w	r3, r3, #4
 8012e42:	d0fa      	beq.n	8012e3a <_malloc_r+0x17a>
 8012e44:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8012e48:	46e1      	mov	r9, ip
 8012e4a:	4698      	mov	r8, r3
 8012e4c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8012e50:	454c      	cmp	r4, r9
 8012e52:	f040 80af 	bne.w	8012fb4 <_malloc_r+0x2f4>
 8012e56:	f108 0801 	add.w	r8, r8, #1
 8012e5a:	f018 0f03 	tst.w	r8, #3
 8012e5e:	f109 0908 	add.w	r9, r9, #8
 8012e62:	d1f3      	bne.n	8012e4c <_malloc_r+0x18c>
 8012e64:	0798      	lsls	r0, r3, #30
 8012e66:	f040 80e8 	bne.w	801303a <_malloc_r+0x37a>
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	ea23 0302 	bic.w	r3, r3, r2
 8012e70:	607b      	str	r3, [r7, #4]
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	0052      	lsls	r2, r2, #1
 8012e76:	4290      	cmp	r0, r2
 8012e78:	d302      	bcc.n	8012e80 <_malloc_r+0x1c0>
 8012e7a:	2a00      	cmp	r2, #0
 8012e7c:	f040 80ec 	bne.w	8013058 <_malloc_r+0x398>
 8012e80:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012e84:	f8da 4004 	ldr.w	r4, [sl, #4]
 8012e88:	f024 0203 	bic.w	r2, r4, #3
 8012e8c:	42aa      	cmp	r2, r5
 8012e8e:	d303      	bcc.n	8012e98 <_malloc_r+0x1d8>
 8012e90:	1b53      	subs	r3, r2, r5
 8012e92:	2b0f      	cmp	r3, #15
 8012e94:	f300 8140 	bgt.w	8013118 <_malloc_r+0x458>
 8012e98:	4b57      	ldr	r3, [pc, #348]	; (8012ff8 <_malloc_r+0x338>)
 8012e9a:	9200      	str	r2, [sp, #0]
 8012e9c:	2008      	movs	r0, #8
 8012e9e:	681c      	ldr	r4, [r3, #0]
 8012ea0:	f002 fe44 	bl	8015b2c <sysconf>
 8012ea4:	4b55      	ldr	r3, [pc, #340]	; (8012ffc <_malloc_r+0x33c>)
 8012ea6:	9a00      	ldr	r2, [sp, #0]
 8012ea8:	6819      	ldr	r1, [r3, #0]
 8012eaa:	3410      	adds	r4, #16
 8012eac:	3101      	adds	r1, #1
 8012eae:	442c      	add	r4, r5
 8012eb0:	bf1f      	itttt	ne
 8012eb2:	f104 34ff 	addne.w	r4, r4, #4294967295
 8012eb6:	1824      	addne	r4, r4, r0
 8012eb8:	4241      	negne	r1, r0
 8012eba:	400c      	andne	r4, r1
 8012ebc:	4680      	mov	r8, r0
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	e9cd 2300 	strd	r2, r3, [sp]
 8012ec6:	f000 fb93 	bl	80135f0 <_sbrk_r>
 8012eca:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012ece:	4683      	mov	fp, r0
 8012ed0:	f000 80fb 	beq.w	80130ca <_malloc_r+0x40a>
 8012ed4:	9a00      	ldr	r2, [sp, #0]
 8012ed6:	9b01      	ldr	r3, [sp, #4]
 8012ed8:	eb0a 0102 	add.w	r1, sl, r2
 8012edc:	4281      	cmp	r1, r0
 8012ede:	d902      	bls.n	8012ee6 <_malloc_r+0x226>
 8012ee0:	45ba      	cmp	sl, r7
 8012ee2:	f040 80f2 	bne.w	80130ca <_malloc_r+0x40a>
 8012ee6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8013008 <_malloc_r+0x348>
 8012eea:	f8d9 0000 	ldr.w	r0, [r9]
 8012eee:	4559      	cmp	r1, fp
 8012ef0:	eb00 0e04 	add.w	lr, r0, r4
 8012ef4:	f8c9 e000 	str.w	lr, [r9]
 8012ef8:	f108 3cff 	add.w	ip, r8, #4294967295
 8012efc:	f040 80ae 	bne.w	801305c <_malloc_r+0x39c>
 8012f00:	ea11 0f0c 	tst.w	r1, ip
 8012f04:	f040 80aa 	bne.w	801305c <_malloc_r+0x39c>
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	4414      	add	r4, r2
 8012f0c:	f044 0401 	orr.w	r4, r4, #1
 8012f10:	605c      	str	r4, [r3, #4]
 8012f12:	4a3b      	ldr	r2, [pc, #236]	; (8013000 <_malloc_r+0x340>)
 8012f14:	f8d9 3000 	ldr.w	r3, [r9]
 8012f18:	6811      	ldr	r1, [r2, #0]
 8012f1a:	428b      	cmp	r3, r1
 8012f1c:	bf88      	it	hi
 8012f1e:	6013      	strhi	r3, [r2, #0]
 8012f20:	4a38      	ldr	r2, [pc, #224]	; (8013004 <_malloc_r+0x344>)
 8012f22:	6811      	ldr	r1, [r2, #0]
 8012f24:	428b      	cmp	r3, r1
 8012f26:	bf88      	it	hi
 8012f28:	6013      	strhi	r3, [r2, #0]
 8012f2a:	e0ce      	b.n	80130ca <_malloc_r+0x40a>
 8012f2c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8012f30:	2a04      	cmp	r2, #4
 8012f32:	d818      	bhi.n	8012f66 <_malloc_r+0x2a6>
 8012f34:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8012f38:	3238      	adds	r2, #56	; 0x38
 8012f3a:	f102 0e01 	add.w	lr, r2, #1
 8012f3e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8012f42:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8012f46:	45f0      	cmp	r8, lr
 8012f48:	d12b      	bne.n	8012fa2 <_malloc_r+0x2e2>
 8012f4a:	1092      	asrs	r2, r2, #2
 8012f4c:	f04f 0c01 	mov.w	ip, #1
 8012f50:	fa0c f202 	lsl.w	r2, ip, r2
 8012f54:	4310      	orrs	r0, r2
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8012f5c:	f8c8 4008 	str.w	r4, [r8, #8]
 8012f60:	f8ce 400c 	str.w	r4, [lr, #12]
 8012f64:	e75e      	b.n	8012e24 <_malloc_r+0x164>
 8012f66:	2a14      	cmp	r2, #20
 8012f68:	d801      	bhi.n	8012f6e <_malloc_r+0x2ae>
 8012f6a:	325b      	adds	r2, #91	; 0x5b
 8012f6c:	e7e5      	b.n	8012f3a <_malloc_r+0x27a>
 8012f6e:	2a54      	cmp	r2, #84	; 0x54
 8012f70:	d803      	bhi.n	8012f7a <_malloc_r+0x2ba>
 8012f72:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8012f76:	326e      	adds	r2, #110	; 0x6e
 8012f78:	e7df      	b.n	8012f3a <_malloc_r+0x27a>
 8012f7a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8012f7e:	d803      	bhi.n	8012f88 <_malloc_r+0x2c8>
 8012f80:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8012f84:	3277      	adds	r2, #119	; 0x77
 8012f86:	e7d8      	b.n	8012f3a <_malloc_r+0x27a>
 8012f88:	f240 5e54 	movw	lr, #1364	; 0x554
 8012f8c:	4572      	cmp	r2, lr
 8012f8e:	bf9a      	itte	ls
 8012f90:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8012f94:	327c      	addls	r2, #124	; 0x7c
 8012f96:	227e      	movhi	r2, #126	; 0x7e
 8012f98:	e7cf      	b.n	8012f3a <_malloc_r+0x27a>
 8012f9a:	f8de e008 	ldr.w	lr, [lr, #8]
 8012f9e:	45f0      	cmp	r8, lr
 8012fa0:	d005      	beq.n	8012fae <_malloc_r+0x2ee>
 8012fa2:	f8de 2004 	ldr.w	r2, [lr, #4]
 8012fa6:	f022 0203 	bic.w	r2, r2, #3
 8012faa:	4562      	cmp	r2, ip
 8012fac:	d8f5      	bhi.n	8012f9a <_malloc_r+0x2da>
 8012fae:	f8de 800c 	ldr.w	r8, [lr, #12]
 8012fb2:	e7d1      	b.n	8012f58 <_malloc_r+0x298>
 8012fb4:	6860      	ldr	r0, [r4, #4]
 8012fb6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8012fba:	f020 0003 	bic.w	r0, r0, #3
 8012fbe:	eba0 0a05 	sub.w	sl, r0, r5
 8012fc2:	f1ba 0f0f 	cmp.w	sl, #15
 8012fc6:	dd21      	ble.n	801300c <_malloc_r+0x34c>
 8012fc8:	68a2      	ldr	r2, [r4, #8]
 8012fca:	1963      	adds	r3, r4, r5
 8012fcc:	f045 0501 	orr.w	r5, r5, #1
 8012fd0:	6065      	str	r5, [r4, #4]
 8012fd2:	f8c2 e00c 	str.w	lr, [r2, #12]
 8012fd6:	f8ce 2008 	str.w	r2, [lr, #8]
 8012fda:	f04a 0201 	orr.w	r2, sl, #1
 8012fde:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8012fe2:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8012fe6:	605a      	str	r2, [r3, #4]
 8012fe8:	f844 a000 	str.w	sl, [r4, r0]
 8012fec:	e699      	b.n	8012d22 <_malloc_r+0x62>
 8012fee:	bf00      	nop
 8012ff0:	20000830 	.word	0x20000830
 8012ff4:	20000838 	.word	0x20000838
 8012ff8:	200010e4 	.word	0x200010e4
 8012ffc:	20000c38 	.word	0x20000c38
 8013000:	200010dc 	.word	0x200010dc
 8013004:	200010e0 	.word	0x200010e0
 8013008:	200010b4 	.word	0x200010b4
 801300c:	f1ba 0f00 	cmp.w	sl, #0
 8013010:	db11      	blt.n	8013036 <_malloc_r+0x376>
 8013012:	4420      	add	r0, r4
 8013014:	6843      	ldr	r3, [r0, #4]
 8013016:	f043 0301 	orr.w	r3, r3, #1
 801301a:	6043      	str	r3, [r0, #4]
 801301c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8013020:	4630      	mov	r0, r6
 8013022:	f8c3 e00c 	str.w	lr, [r3, #12]
 8013026:	f8ce 3008 	str.w	r3, [lr, #8]
 801302a:	f000 f8c1 	bl	80131b0 <__malloc_unlock>
 801302e:	4620      	mov	r0, r4
 8013030:	b003      	add	sp, #12
 8013032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013036:	4674      	mov	r4, lr
 8013038:	e70a      	b.n	8012e50 <_malloc_r+0x190>
 801303a:	f1ac 0008 	sub.w	r0, ip, #8
 801303e:	f8dc c000 	ldr.w	ip, [ip]
 8013042:	4584      	cmp	ip, r0
 8013044:	f103 33ff 	add.w	r3, r3, #4294967295
 8013048:	f43f af0c 	beq.w	8012e64 <_malloc_r+0x1a4>
 801304c:	e711      	b.n	8012e72 <_malloc_r+0x1b2>
 801304e:	3304      	adds	r3, #4
 8013050:	0052      	lsls	r2, r2, #1
 8013052:	4210      	tst	r0, r2
 8013054:	d0fb      	beq.n	801304e <_malloc_r+0x38e>
 8013056:	e6f5      	b.n	8012e44 <_malloc_r+0x184>
 8013058:	4643      	mov	r3, r8
 801305a:	e7fa      	b.n	8013052 <_malloc_r+0x392>
 801305c:	6818      	ldr	r0, [r3, #0]
 801305e:	9200      	str	r2, [sp, #0]
 8013060:	3001      	adds	r0, #1
 8013062:	bf1b      	ittet	ne
 8013064:	ebab 0101 	subne.w	r1, fp, r1
 8013068:	4471      	addne	r1, lr
 801306a:	f8c3 b000 	streq.w	fp, [r3]
 801306e:	f8c9 1000 	strne.w	r1, [r9]
 8013072:	f01b 0307 	ands.w	r3, fp, #7
 8013076:	bf1c      	itt	ne
 8013078:	f1c3 0308 	rsbne	r3, r3, #8
 801307c:	449b      	addne	fp, r3
 801307e:	445c      	add	r4, fp
 8013080:	4498      	add	r8, r3
 8013082:	ea04 030c 	and.w	r3, r4, ip
 8013086:	eba8 0803 	sub.w	r8, r8, r3
 801308a:	4641      	mov	r1, r8
 801308c:	4630      	mov	r0, r6
 801308e:	f000 faaf 	bl	80135f0 <_sbrk_r>
 8013092:	1c43      	adds	r3, r0, #1
 8013094:	bf04      	itt	eq
 8013096:	4658      	moveq	r0, fp
 8013098:	f04f 0800 	moveq.w	r8, #0
 801309c:	f8d9 3000 	ldr.w	r3, [r9]
 80130a0:	f8c7 b008 	str.w	fp, [r7, #8]
 80130a4:	eba0 000b 	sub.w	r0, r0, fp
 80130a8:	4440      	add	r0, r8
 80130aa:	4443      	add	r3, r8
 80130ac:	f040 0001 	orr.w	r0, r0, #1
 80130b0:	45ba      	cmp	sl, r7
 80130b2:	9a00      	ldr	r2, [sp, #0]
 80130b4:	f8c9 3000 	str.w	r3, [r9]
 80130b8:	f8cb 0004 	str.w	r0, [fp, #4]
 80130bc:	f43f af29 	beq.w	8012f12 <_malloc_r+0x252>
 80130c0:	2a0f      	cmp	r2, #15
 80130c2:	d810      	bhi.n	80130e6 <_malloc_r+0x426>
 80130c4:	2301      	movs	r3, #1
 80130c6:	f8cb 3004 	str.w	r3, [fp, #4]
 80130ca:	68bb      	ldr	r3, [r7, #8]
 80130cc:	685a      	ldr	r2, [r3, #4]
 80130ce:	f022 0203 	bic.w	r2, r2, #3
 80130d2:	42aa      	cmp	r2, r5
 80130d4:	eba2 0305 	sub.w	r3, r2, r5
 80130d8:	d301      	bcc.n	80130de <_malloc_r+0x41e>
 80130da:	2b0f      	cmp	r3, #15
 80130dc:	dc1c      	bgt.n	8013118 <_malloc_r+0x458>
 80130de:	4630      	mov	r0, r6
 80130e0:	f000 f866 	bl	80131b0 <__malloc_unlock>
 80130e4:	e5f8      	b.n	8012cd8 <_malloc_r+0x18>
 80130e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80130ea:	f1a2 040c 	sub.w	r4, r2, #12
 80130ee:	f024 0407 	bic.w	r4, r4, #7
 80130f2:	f003 0301 	and.w	r3, r3, #1
 80130f6:	4323      	orrs	r3, r4
 80130f8:	f8ca 3004 	str.w	r3, [sl, #4]
 80130fc:	2205      	movs	r2, #5
 80130fe:	eb0a 0304 	add.w	r3, sl, r4
 8013102:	2c0f      	cmp	r4, #15
 8013104:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8013108:	f67f af03 	bls.w	8012f12 <_malloc_r+0x252>
 801310c:	f10a 0108 	add.w	r1, sl, #8
 8013110:	4630      	mov	r0, r6
 8013112:	f005 f813 	bl	801813c <_free_r>
 8013116:	e6fc      	b.n	8012f12 <_malloc_r+0x252>
 8013118:	68bc      	ldr	r4, [r7, #8]
 801311a:	f045 0201 	orr.w	r2, r5, #1
 801311e:	4425      	add	r5, r4
 8013120:	f043 0301 	orr.w	r3, r3, #1
 8013124:	6062      	str	r2, [r4, #4]
 8013126:	60bd      	str	r5, [r7, #8]
 8013128:	606b      	str	r3, [r5, #4]
 801312a:	e5fa      	b.n	8012d22 <_malloc_r+0x62>

0801312c <memcmp>:
 801312c:	b530      	push	{r4, r5, lr}
 801312e:	2400      	movs	r4, #0
 8013130:	42a2      	cmp	r2, r4
 8013132:	d101      	bne.n	8013138 <memcmp+0xc>
 8013134:	2000      	movs	r0, #0
 8013136:	e007      	b.n	8013148 <memcmp+0x1c>
 8013138:	5d03      	ldrb	r3, [r0, r4]
 801313a:	3401      	adds	r4, #1
 801313c:	190d      	adds	r5, r1, r4
 801313e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8013142:	42ab      	cmp	r3, r5
 8013144:	d0f4      	beq.n	8013130 <memcmp+0x4>
 8013146:	1b58      	subs	r0, r3, r5
 8013148:	bd30      	pop	{r4, r5, pc}

0801314a <memcpy>:
 801314a:	b510      	push	{r4, lr}
 801314c:	1e43      	subs	r3, r0, #1
 801314e:	440a      	add	r2, r1
 8013150:	4291      	cmp	r1, r2
 8013152:	d100      	bne.n	8013156 <memcpy+0xc>
 8013154:	bd10      	pop	{r4, pc}
 8013156:	f811 4b01 	ldrb.w	r4, [r1], #1
 801315a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801315e:	e7f7      	b.n	8013150 <memcpy+0x6>

08013160 <memmove>:
 8013160:	4288      	cmp	r0, r1
 8013162:	b510      	push	{r4, lr}
 8013164:	eb01 0302 	add.w	r3, r1, r2
 8013168:	d807      	bhi.n	801317a <memmove+0x1a>
 801316a:	1e42      	subs	r2, r0, #1
 801316c:	4299      	cmp	r1, r3
 801316e:	d00a      	beq.n	8013186 <memmove+0x26>
 8013170:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013174:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013178:	e7f8      	b.n	801316c <memmove+0xc>
 801317a:	4283      	cmp	r3, r0
 801317c:	d9f5      	bls.n	801316a <memmove+0xa>
 801317e:	1881      	adds	r1, r0, r2
 8013180:	1ad2      	subs	r2, r2, r3
 8013182:	42d3      	cmn	r3, r2
 8013184:	d100      	bne.n	8013188 <memmove+0x28>
 8013186:	bd10      	pop	{r4, pc}
 8013188:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801318c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013190:	e7f7      	b.n	8013182 <memmove+0x22>

08013192 <memset>:
 8013192:	4402      	add	r2, r0
 8013194:	4603      	mov	r3, r0
 8013196:	4293      	cmp	r3, r2
 8013198:	d100      	bne.n	801319c <memset+0xa>
 801319a:	4770      	bx	lr
 801319c:	f803 1b01 	strb.w	r1, [r3], #1
 80131a0:	e7f9      	b.n	8013196 <memset+0x4>
	...

080131a4 <__malloc_lock>:
 80131a4:	4801      	ldr	r0, [pc, #4]	; (80131ac <__malloc_lock+0x8>)
 80131a6:	f7ff bd0d 	b.w	8012bc4 <__retarget_lock_acquire_recursive>
 80131aa:	bf00      	nop
 80131ac:	200010f0 	.word	0x200010f0

080131b0 <__malloc_unlock>:
 80131b0:	4801      	ldr	r0, [pc, #4]	; (80131b8 <__malloc_unlock+0x8>)
 80131b2:	f7ff bd08 	b.w	8012bc6 <__retarget_lock_release_recursive>
 80131b6:	bf00      	nop
 80131b8:	200010f0 	.word	0x200010f0

080131bc <printf>:
 80131bc:	b40f      	push	{r0, r1, r2, r3}
 80131be:	b507      	push	{r0, r1, r2, lr}
 80131c0:	4906      	ldr	r1, [pc, #24]	; (80131dc <printf+0x20>)
 80131c2:	ab04      	add	r3, sp, #16
 80131c4:	6808      	ldr	r0, [r1, #0]
 80131c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80131ca:	6881      	ldr	r1, [r0, #8]
 80131cc:	9301      	str	r3, [sp, #4]
 80131ce:	f002 fcbb 	bl	8015b48 <_vfprintf_r>
 80131d2:	b003      	add	sp, #12
 80131d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80131d8:	b004      	add	sp, #16
 80131da:	4770      	bx	lr
 80131dc:	20000404 	.word	0x20000404

080131e0 <putchar>:
 80131e0:	4b03      	ldr	r3, [pc, #12]	; (80131f0 <putchar+0x10>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	4601      	mov	r1, r0
 80131e6:	689a      	ldr	r2, [r3, #8]
 80131e8:	4618      	mov	r0, r3
 80131ea:	f005 bfd0 	b.w	801918e <_putc_r>
 80131ee:	bf00      	nop
 80131f0:	20000404 	.word	0x20000404

080131f4 <_puts_r>:
 80131f4:	b530      	push	{r4, r5, lr}
 80131f6:	4605      	mov	r5, r0
 80131f8:	b089      	sub	sp, #36	; 0x24
 80131fa:	4608      	mov	r0, r1
 80131fc:	460c      	mov	r4, r1
 80131fe:	f7f3 fdb9 	bl	8006d74 <strlen>
 8013202:	4b1e      	ldr	r3, [pc, #120]	; (801327c <_puts_r+0x88>)
 8013204:	9306      	str	r3, [sp, #24]
 8013206:	2301      	movs	r3, #1
 8013208:	e9cd 4004 	strd	r4, r0, [sp, #16]
 801320c:	9307      	str	r3, [sp, #28]
 801320e:	4418      	add	r0, r3
 8013210:	ab04      	add	r3, sp, #16
 8013212:	9301      	str	r3, [sp, #4]
 8013214:	2302      	movs	r3, #2
 8013216:	9302      	str	r3, [sp, #8]
 8013218:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801321a:	9003      	str	r0, [sp, #12]
 801321c:	68ac      	ldr	r4, [r5, #8]
 801321e:	b913      	cbnz	r3, 8013226 <_puts_r+0x32>
 8013220:	4628      	mov	r0, r5
 8013222:	f004 fefb 	bl	801801c <__sinit>
 8013226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013228:	07db      	lsls	r3, r3, #31
 801322a:	d405      	bmi.n	8013238 <_puts_r+0x44>
 801322c:	89a3      	ldrh	r3, [r4, #12]
 801322e:	0598      	lsls	r0, r3, #22
 8013230:	d402      	bmi.n	8013238 <_puts_r+0x44>
 8013232:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013234:	f7ff fcc6 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 8013238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801323c:	0499      	lsls	r1, r3, #18
 801323e:	d406      	bmi.n	801324e <_puts_r+0x5a>
 8013240:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013244:	81a3      	strh	r3, [r4, #12]
 8013246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801324c:	6663      	str	r3, [r4, #100]	; 0x64
 801324e:	4628      	mov	r0, r5
 8013250:	aa01      	add	r2, sp, #4
 8013252:	4621      	mov	r1, r4
 8013254:	f7ff faea 	bl	801282c <__sfvwrite_r>
 8013258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801325a:	2800      	cmp	r0, #0
 801325c:	bf0c      	ite	eq
 801325e:	250a      	moveq	r5, #10
 8013260:	f04f 35ff 	movne.w	r5, #4294967295
 8013264:	07da      	lsls	r2, r3, #31
 8013266:	d405      	bmi.n	8013274 <_puts_r+0x80>
 8013268:	89a3      	ldrh	r3, [r4, #12]
 801326a:	059b      	lsls	r3, r3, #22
 801326c:	d402      	bmi.n	8013274 <_puts_r+0x80>
 801326e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013270:	f7ff fca9 	bl	8012bc6 <__retarget_lock_release_recursive>
 8013274:	4628      	mov	r0, r5
 8013276:	b009      	add	sp, #36	; 0x24
 8013278:	bd30      	pop	{r4, r5, pc}
 801327a:	bf00      	nop
 801327c:	0801cc0c 	.word	0x0801cc0c

08013280 <puts>:
 8013280:	4b02      	ldr	r3, [pc, #8]	; (801328c <puts+0xc>)
 8013282:	4601      	mov	r1, r0
 8013284:	6818      	ldr	r0, [r3, #0]
 8013286:	f7ff bfb5 	b.w	80131f4 <_puts_r>
 801328a:	bf00      	nop
 801328c:	20000404 	.word	0x20000404

08013290 <realloc>:
 8013290:	4b02      	ldr	r3, [pc, #8]	; (801329c <realloc+0xc>)
 8013292:	460a      	mov	r2, r1
 8013294:	4601      	mov	r1, r0
 8013296:	6818      	ldr	r0, [r3, #0]
 8013298:	f000 b802 	b.w	80132a0 <_realloc_r>
 801329c:	20000404 	.word	0x20000404

080132a0 <_realloc_r>:
 80132a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a4:	4682      	mov	sl, r0
 80132a6:	460c      	mov	r4, r1
 80132a8:	b929      	cbnz	r1, 80132b6 <_realloc_r+0x16>
 80132aa:	4611      	mov	r1, r2
 80132ac:	b003      	add	sp, #12
 80132ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b2:	f7ff bd05 	b.w	8012cc0 <_malloc_r>
 80132b6:	9201      	str	r2, [sp, #4]
 80132b8:	f7ff ff74 	bl	80131a4 <__malloc_lock>
 80132bc:	9a01      	ldr	r2, [sp, #4]
 80132be:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80132c2:	f102 080b 	add.w	r8, r2, #11
 80132c6:	f1b8 0f16 	cmp.w	r8, #22
 80132ca:	f1a4 0908 	sub.w	r9, r4, #8
 80132ce:	f025 0603 	bic.w	r6, r5, #3
 80132d2:	d90b      	bls.n	80132ec <_realloc_r+0x4c>
 80132d4:	f038 0807 	bics.w	r8, r8, #7
 80132d8:	d50a      	bpl.n	80132f0 <_realloc_r+0x50>
 80132da:	230c      	movs	r3, #12
 80132dc:	f8ca 3000 	str.w	r3, [sl]
 80132e0:	f04f 0b00 	mov.w	fp, #0
 80132e4:	4658      	mov	r0, fp
 80132e6:	b003      	add	sp, #12
 80132e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ec:	f04f 0810 	mov.w	r8, #16
 80132f0:	4590      	cmp	r8, r2
 80132f2:	d3f2      	bcc.n	80132da <_realloc_r+0x3a>
 80132f4:	45b0      	cmp	r8, r6
 80132f6:	f340 8170 	ble.w	80135da <_realloc_r+0x33a>
 80132fa:	49a9      	ldr	r1, [pc, #676]	; (80135a0 <_realloc_r+0x300>)
 80132fc:	9101      	str	r1, [sp, #4]
 80132fe:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8013302:	eb09 0306 	add.w	r3, r9, r6
 8013306:	459c      	cmp	ip, r3
 8013308:	6858      	ldr	r0, [r3, #4]
 801330a:	d005      	beq.n	8013318 <_realloc_r+0x78>
 801330c:	f020 0101 	bic.w	r1, r0, #1
 8013310:	4419      	add	r1, r3
 8013312:	6849      	ldr	r1, [r1, #4]
 8013314:	07cf      	lsls	r7, r1, #31
 8013316:	d447      	bmi.n	80133a8 <_realloc_r+0x108>
 8013318:	f020 0003 	bic.w	r0, r0, #3
 801331c:	459c      	cmp	ip, r3
 801331e:	eb06 0700 	add.w	r7, r6, r0
 8013322:	d119      	bne.n	8013358 <_realloc_r+0xb8>
 8013324:	f108 0110 	add.w	r1, r8, #16
 8013328:	42b9      	cmp	r1, r7
 801332a:	dc3f      	bgt.n	80133ac <_realloc_r+0x10c>
 801332c:	eb09 0308 	add.w	r3, r9, r8
 8013330:	9a01      	ldr	r2, [sp, #4]
 8013332:	eba7 0708 	sub.w	r7, r7, r8
 8013336:	f047 0701 	orr.w	r7, r7, #1
 801333a:	6093      	str	r3, [r2, #8]
 801333c:	605f      	str	r7, [r3, #4]
 801333e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013342:	f003 0301 	and.w	r3, r3, #1
 8013346:	ea43 0308 	orr.w	r3, r3, r8
 801334a:	f844 3c04 	str.w	r3, [r4, #-4]
 801334e:	4650      	mov	r0, sl
 8013350:	f7ff ff2e 	bl	80131b0 <__malloc_unlock>
 8013354:	46a3      	mov	fp, r4
 8013356:	e7c5      	b.n	80132e4 <_realloc_r+0x44>
 8013358:	45b8      	cmp	r8, r7
 801335a:	dc27      	bgt.n	80133ac <_realloc_r+0x10c>
 801335c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8013360:	60da      	str	r2, [r3, #12]
 8013362:	6093      	str	r3, [r2, #8]
 8013364:	eba7 0008 	sub.w	r0, r7, r8
 8013368:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801336c:	280f      	cmp	r0, #15
 801336e:	f002 0201 	and.w	r2, r2, #1
 8013372:	eb09 0307 	add.w	r3, r9, r7
 8013376:	f240 8132 	bls.w	80135de <_realloc_r+0x33e>
 801337a:	eb09 0108 	add.w	r1, r9, r8
 801337e:	ea48 0202 	orr.w	r2, r8, r2
 8013382:	f040 0001 	orr.w	r0, r0, #1
 8013386:	f8c9 2004 	str.w	r2, [r9, #4]
 801338a:	6048      	str	r0, [r1, #4]
 801338c:	685a      	ldr	r2, [r3, #4]
 801338e:	f042 0201 	orr.w	r2, r2, #1
 8013392:	605a      	str	r2, [r3, #4]
 8013394:	3108      	adds	r1, #8
 8013396:	4650      	mov	r0, sl
 8013398:	f004 fed0 	bl	801813c <_free_r>
 801339c:	4650      	mov	r0, sl
 801339e:	f7ff ff07 	bl	80131b0 <__malloc_unlock>
 80133a2:	f109 0b08 	add.w	fp, r9, #8
 80133a6:	e79d      	b.n	80132e4 <_realloc_r+0x44>
 80133a8:	2000      	movs	r0, #0
 80133aa:	4603      	mov	r3, r0
 80133ac:	07e9      	lsls	r1, r5, #31
 80133ae:	f100 80c6 	bmi.w	801353e <_realloc_r+0x29e>
 80133b2:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80133b6:	eba9 0505 	sub.w	r5, r9, r5
 80133ba:	6869      	ldr	r1, [r5, #4]
 80133bc:	f021 0103 	bic.w	r1, r1, #3
 80133c0:	eb01 0b06 	add.w	fp, r1, r6
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	f000 8086 	beq.w	80134d6 <_realloc_r+0x236>
 80133ca:	459c      	cmp	ip, r3
 80133cc:	eb00 070b 	add.w	r7, r0, fp
 80133d0:	d149      	bne.n	8013466 <_realloc_r+0x1c6>
 80133d2:	f108 0310 	add.w	r3, r8, #16
 80133d6:	42bb      	cmp	r3, r7
 80133d8:	dc7d      	bgt.n	80134d6 <_realloc_r+0x236>
 80133da:	46ab      	mov	fp, r5
 80133dc:	68eb      	ldr	r3, [r5, #12]
 80133de:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80133e2:	60d3      	str	r3, [r2, #12]
 80133e4:	609a      	str	r2, [r3, #8]
 80133e6:	1f32      	subs	r2, r6, #4
 80133e8:	2a24      	cmp	r2, #36	; 0x24
 80133ea:	d837      	bhi.n	801345c <_realloc_r+0x1bc>
 80133ec:	2a13      	cmp	r2, #19
 80133ee:	d933      	bls.n	8013458 <_realloc_r+0x1b8>
 80133f0:	6823      	ldr	r3, [r4, #0]
 80133f2:	60ab      	str	r3, [r5, #8]
 80133f4:	6863      	ldr	r3, [r4, #4]
 80133f6:	60eb      	str	r3, [r5, #12]
 80133f8:	2a1b      	cmp	r2, #27
 80133fa:	d81b      	bhi.n	8013434 <_realloc_r+0x194>
 80133fc:	3408      	adds	r4, #8
 80133fe:	f105 0310 	add.w	r3, r5, #16
 8013402:	6822      	ldr	r2, [r4, #0]
 8013404:	601a      	str	r2, [r3, #0]
 8013406:	6862      	ldr	r2, [r4, #4]
 8013408:	605a      	str	r2, [r3, #4]
 801340a:	68a2      	ldr	r2, [r4, #8]
 801340c:	609a      	str	r2, [r3, #8]
 801340e:	eb05 0308 	add.w	r3, r5, r8
 8013412:	9a01      	ldr	r2, [sp, #4]
 8013414:	eba7 0708 	sub.w	r7, r7, r8
 8013418:	f047 0701 	orr.w	r7, r7, #1
 801341c:	6093      	str	r3, [r2, #8]
 801341e:	605f      	str	r7, [r3, #4]
 8013420:	686b      	ldr	r3, [r5, #4]
 8013422:	f003 0301 	and.w	r3, r3, #1
 8013426:	ea43 0308 	orr.w	r3, r3, r8
 801342a:	606b      	str	r3, [r5, #4]
 801342c:	4650      	mov	r0, sl
 801342e:	f7ff febf 	bl	80131b0 <__malloc_unlock>
 8013432:	e757      	b.n	80132e4 <_realloc_r+0x44>
 8013434:	68a3      	ldr	r3, [r4, #8]
 8013436:	612b      	str	r3, [r5, #16]
 8013438:	68e3      	ldr	r3, [r4, #12]
 801343a:	616b      	str	r3, [r5, #20]
 801343c:	2a24      	cmp	r2, #36	; 0x24
 801343e:	bf01      	itttt	eq
 8013440:	6923      	ldreq	r3, [r4, #16]
 8013442:	61ab      	streq	r3, [r5, #24]
 8013444:	6962      	ldreq	r2, [r4, #20]
 8013446:	61ea      	streq	r2, [r5, #28]
 8013448:	bf19      	ittee	ne
 801344a:	3410      	addne	r4, #16
 801344c:	f105 0318 	addne.w	r3, r5, #24
 8013450:	f105 0320 	addeq.w	r3, r5, #32
 8013454:	3418      	addeq	r4, #24
 8013456:	e7d4      	b.n	8013402 <_realloc_r+0x162>
 8013458:	465b      	mov	r3, fp
 801345a:	e7d2      	b.n	8013402 <_realloc_r+0x162>
 801345c:	4621      	mov	r1, r4
 801345e:	4658      	mov	r0, fp
 8013460:	f7ff fe7e 	bl	8013160 <memmove>
 8013464:	e7d3      	b.n	801340e <_realloc_r+0x16e>
 8013466:	45b8      	cmp	r8, r7
 8013468:	dc35      	bgt.n	80134d6 <_realloc_r+0x236>
 801346a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801346e:	4628      	mov	r0, r5
 8013470:	60da      	str	r2, [r3, #12]
 8013472:	6093      	str	r3, [r2, #8]
 8013474:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8013478:	68eb      	ldr	r3, [r5, #12]
 801347a:	60d3      	str	r3, [r2, #12]
 801347c:	609a      	str	r2, [r3, #8]
 801347e:	1f32      	subs	r2, r6, #4
 8013480:	2a24      	cmp	r2, #36	; 0x24
 8013482:	d824      	bhi.n	80134ce <_realloc_r+0x22e>
 8013484:	2a13      	cmp	r2, #19
 8013486:	d908      	bls.n	801349a <_realloc_r+0x1fa>
 8013488:	6823      	ldr	r3, [r4, #0]
 801348a:	60ab      	str	r3, [r5, #8]
 801348c:	6863      	ldr	r3, [r4, #4]
 801348e:	60eb      	str	r3, [r5, #12]
 8013490:	2a1b      	cmp	r2, #27
 8013492:	d80a      	bhi.n	80134aa <_realloc_r+0x20a>
 8013494:	3408      	adds	r4, #8
 8013496:	f105 0010 	add.w	r0, r5, #16
 801349a:	6823      	ldr	r3, [r4, #0]
 801349c:	6003      	str	r3, [r0, #0]
 801349e:	6863      	ldr	r3, [r4, #4]
 80134a0:	6043      	str	r3, [r0, #4]
 80134a2:	68a3      	ldr	r3, [r4, #8]
 80134a4:	6083      	str	r3, [r0, #8]
 80134a6:	46a9      	mov	r9, r5
 80134a8:	e75c      	b.n	8013364 <_realloc_r+0xc4>
 80134aa:	68a3      	ldr	r3, [r4, #8]
 80134ac:	612b      	str	r3, [r5, #16]
 80134ae:	68e3      	ldr	r3, [r4, #12]
 80134b0:	616b      	str	r3, [r5, #20]
 80134b2:	2a24      	cmp	r2, #36	; 0x24
 80134b4:	bf01      	itttt	eq
 80134b6:	6923      	ldreq	r3, [r4, #16]
 80134b8:	61ab      	streq	r3, [r5, #24]
 80134ba:	6963      	ldreq	r3, [r4, #20]
 80134bc:	61eb      	streq	r3, [r5, #28]
 80134be:	bf19      	ittee	ne
 80134c0:	3410      	addne	r4, #16
 80134c2:	f105 0018 	addne.w	r0, r5, #24
 80134c6:	f105 0020 	addeq.w	r0, r5, #32
 80134ca:	3418      	addeq	r4, #24
 80134cc:	e7e5      	b.n	801349a <_realloc_r+0x1fa>
 80134ce:	4621      	mov	r1, r4
 80134d0:	f7ff fe46 	bl	8013160 <memmove>
 80134d4:	e7e7      	b.n	80134a6 <_realloc_r+0x206>
 80134d6:	45d8      	cmp	r8, fp
 80134d8:	dc31      	bgt.n	801353e <_realloc_r+0x29e>
 80134da:	4628      	mov	r0, r5
 80134dc:	68eb      	ldr	r3, [r5, #12]
 80134de:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80134e2:	60d3      	str	r3, [r2, #12]
 80134e4:	609a      	str	r2, [r3, #8]
 80134e6:	1f32      	subs	r2, r6, #4
 80134e8:	2a24      	cmp	r2, #36	; 0x24
 80134ea:	d824      	bhi.n	8013536 <_realloc_r+0x296>
 80134ec:	2a13      	cmp	r2, #19
 80134ee:	d908      	bls.n	8013502 <_realloc_r+0x262>
 80134f0:	6823      	ldr	r3, [r4, #0]
 80134f2:	60ab      	str	r3, [r5, #8]
 80134f4:	6863      	ldr	r3, [r4, #4]
 80134f6:	60eb      	str	r3, [r5, #12]
 80134f8:	2a1b      	cmp	r2, #27
 80134fa:	d80a      	bhi.n	8013512 <_realloc_r+0x272>
 80134fc:	3408      	adds	r4, #8
 80134fe:	f105 0010 	add.w	r0, r5, #16
 8013502:	6823      	ldr	r3, [r4, #0]
 8013504:	6003      	str	r3, [r0, #0]
 8013506:	6863      	ldr	r3, [r4, #4]
 8013508:	6043      	str	r3, [r0, #4]
 801350a:	68a3      	ldr	r3, [r4, #8]
 801350c:	6083      	str	r3, [r0, #8]
 801350e:	465f      	mov	r7, fp
 8013510:	e7c9      	b.n	80134a6 <_realloc_r+0x206>
 8013512:	68a3      	ldr	r3, [r4, #8]
 8013514:	612b      	str	r3, [r5, #16]
 8013516:	68e3      	ldr	r3, [r4, #12]
 8013518:	616b      	str	r3, [r5, #20]
 801351a:	2a24      	cmp	r2, #36	; 0x24
 801351c:	bf01      	itttt	eq
 801351e:	6923      	ldreq	r3, [r4, #16]
 8013520:	61ab      	streq	r3, [r5, #24]
 8013522:	6963      	ldreq	r3, [r4, #20]
 8013524:	61eb      	streq	r3, [r5, #28]
 8013526:	bf19      	ittee	ne
 8013528:	3410      	addne	r4, #16
 801352a:	f105 0018 	addne.w	r0, r5, #24
 801352e:	f105 0020 	addeq.w	r0, r5, #32
 8013532:	3418      	addeq	r4, #24
 8013534:	e7e5      	b.n	8013502 <_realloc_r+0x262>
 8013536:	4621      	mov	r1, r4
 8013538:	f7ff fe12 	bl	8013160 <memmove>
 801353c:	e7e7      	b.n	801350e <_realloc_r+0x26e>
 801353e:	4611      	mov	r1, r2
 8013540:	4650      	mov	r0, sl
 8013542:	f7ff fbbd 	bl	8012cc0 <_malloc_r>
 8013546:	4683      	mov	fp, r0
 8013548:	2800      	cmp	r0, #0
 801354a:	f43f af6f 	beq.w	801342c <_realloc_r+0x18c>
 801354e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013552:	f023 0301 	bic.w	r3, r3, #1
 8013556:	444b      	add	r3, r9
 8013558:	f1a0 0208 	sub.w	r2, r0, #8
 801355c:	4293      	cmp	r3, r2
 801355e:	d105      	bne.n	801356c <_realloc_r+0x2cc>
 8013560:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8013564:	f027 0703 	bic.w	r7, r7, #3
 8013568:	4437      	add	r7, r6
 801356a:	e6fb      	b.n	8013364 <_realloc_r+0xc4>
 801356c:	1f32      	subs	r2, r6, #4
 801356e:	2a24      	cmp	r2, #36	; 0x24
 8013570:	d82f      	bhi.n	80135d2 <_realloc_r+0x332>
 8013572:	2a13      	cmp	r2, #19
 8013574:	d92a      	bls.n	80135cc <_realloc_r+0x32c>
 8013576:	6823      	ldr	r3, [r4, #0]
 8013578:	6003      	str	r3, [r0, #0]
 801357a:	6863      	ldr	r3, [r4, #4]
 801357c:	6043      	str	r3, [r0, #4]
 801357e:	2a1b      	cmp	r2, #27
 8013580:	d810      	bhi.n	80135a4 <_realloc_r+0x304>
 8013582:	f104 0208 	add.w	r2, r4, #8
 8013586:	f100 0308 	add.w	r3, r0, #8
 801358a:	6811      	ldr	r1, [r2, #0]
 801358c:	6019      	str	r1, [r3, #0]
 801358e:	6851      	ldr	r1, [r2, #4]
 8013590:	6059      	str	r1, [r3, #4]
 8013592:	6892      	ldr	r2, [r2, #8]
 8013594:	609a      	str	r2, [r3, #8]
 8013596:	4621      	mov	r1, r4
 8013598:	4650      	mov	r0, sl
 801359a:	f004 fdcf 	bl	801813c <_free_r>
 801359e:	e745      	b.n	801342c <_realloc_r+0x18c>
 80135a0:	20000830 	.word	0x20000830
 80135a4:	68a3      	ldr	r3, [r4, #8]
 80135a6:	6083      	str	r3, [r0, #8]
 80135a8:	68e3      	ldr	r3, [r4, #12]
 80135aa:	60c3      	str	r3, [r0, #12]
 80135ac:	2a24      	cmp	r2, #36	; 0x24
 80135ae:	bf01      	itttt	eq
 80135b0:	6923      	ldreq	r3, [r4, #16]
 80135b2:	6103      	streq	r3, [r0, #16]
 80135b4:	6961      	ldreq	r1, [r4, #20]
 80135b6:	6141      	streq	r1, [r0, #20]
 80135b8:	bf19      	ittee	ne
 80135ba:	f104 0210 	addne.w	r2, r4, #16
 80135be:	f100 0310 	addne.w	r3, r0, #16
 80135c2:	f104 0218 	addeq.w	r2, r4, #24
 80135c6:	f100 0318 	addeq.w	r3, r0, #24
 80135ca:	e7de      	b.n	801358a <_realloc_r+0x2ea>
 80135cc:	4603      	mov	r3, r0
 80135ce:	4622      	mov	r2, r4
 80135d0:	e7db      	b.n	801358a <_realloc_r+0x2ea>
 80135d2:	4621      	mov	r1, r4
 80135d4:	f7ff fdc4 	bl	8013160 <memmove>
 80135d8:	e7dd      	b.n	8013596 <_realloc_r+0x2f6>
 80135da:	4637      	mov	r7, r6
 80135dc:	e6c2      	b.n	8013364 <_realloc_r+0xc4>
 80135de:	4317      	orrs	r7, r2
 80135e0:	f8c9 7004 	str.w	r7, [r9, #4]
 80135e4:	685a      	ldr	r2, [r3, #4]
 80135e6:	f042 0201 	orr.w	r2, r2, #1
 80135ea:	605a      	str	r2, [r3, #4]
 80135ec:	e6d6      	b.n	801339c <_realloc_r+0xfc>
 80135ee:	bf00      	nop

080135f0 <_sbrk_r>:
 80135f0:	b538      	push	{r3, r4, r5, lr}
 80135f2:	4c06      	ldr	r4, [pc, #24]	; (801360c <_sbrk_r+0x1c>)
 80135f4:	2300      	movs	r3, #0
 80135f6:	4605      	mov	r5, r0
 80135f8:	4608      	mov	r0, r1
 80135fa:	6023      	str	r3, [r4, #0]
 80135fc:	f7fb f866 	bl	800e6cc <_sbrk>
 8013600:	1c43      	adds	r3, r0, #1
 8013602:	d102      	bne.n	801360a <_sbrk_r+0x1a>
 8013604:	6823      	ldr	r3, [r4, #0]
 8013606:	b103      	cbz	r3, 801360a <_sbrk_r+0x1a>
 8013608:	602b      	str	r3, [r5, #0]
 801360a:	bd38      	pop	{r3, r4, r5, pc}
 801360c:	200010f8 	.word	0x200010f8

08013610 <_raise_r>:
 8013610:	291f      	cmp	r1, #31
 8013612:	b538      	push	{r3, r4, r5, lr}
 8013614:	4604      	mov	r4, r0
 8013616:	460d      	mov	r5, r1
 8013618:	d904      	bls.n	8013624 <_raise_r+0x14>
 801361a:	2316      	movs	r3, #22
 801361c:	6003      	str	r3, [r0, #0]
 801361e:	f04f 30ff 	mov.w	r0, #4294967295
 8013622:	bd38      	pop	{r3, r4, r5, pc}
 8013624:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8013628:	b112      	cbz	r2, 8013630 <_raise_r+0x20>
 801362a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801362e:	b94b      	cbnz	r3, 8013644 <_raise_r+0x34>
 8013630:	4620      	mov	r0, r4
 8013632:	f000 f831 	bl	8013698 <_getpid_r>
 8013636:	462a      	mov	r2, r5
 8013638:	4601      	mov	r1, r0
 801363a:	4620      	mov	r0, r4
 801363c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013640:	f000 b818 	b.w	8013674 <_kill_r>
 8013644:	2b01      	cmp	r3, #1
 8013646:	d00a      	beq.n	801365e <_raise_r+0x4e>
 8013648:	1c59      	adds	r1, r3, #1
 801364a:	d103      	bne.n	8013654 <_raise_r+0x44>
 801364c:	2316      	movs	r3, #22
 801364e:	6003      	str	r3, [r0, #0]
 8013650:	2001      	movs	r0, #1
 8013652:	e7e6      	b.n	8013622 <_raise_r+0x12>
 8013654:	2400      	movs	r4, #0
 8013656:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801365a:	4628      	mov	r0, r5
 801365c:	4798      	blx	r3
 801365e:	2000      	movs	r0, #0
 8013660:	e7df      	b.n	8013622 <_raise_r+0x12>
	...

08013664 <raise>:
 8013664:	4b02      	ldr	r3, [pc, #8]	; (8013670 <raise+0xc>)
 8013666:	4601      	mov	r1, r0
 8013668:	6818      	ldr	r0, [r3, #0]
 801366a:	f7ff bfd1 	b.w	8013610 <_raise_r>
 801366e:	bf00      	nop
 8013670:	20000404 	.word	0x20000404

08013674 <_kill_r>:
 8013674:	b538      	push	{r3, r4, r5, lr}
 8013676:	4c07      	ldr	r4, [pc, #28]	; (8013694 <_kill_r+0x20>)
 8013678:	2300      	movs	r3, #0
 801367a:	4605      	mov	r5, r0
 801367c:	4608      	mov	r0, r1
 801367e:	4611      	mov	r1, r2
 8013680:	6023      	str	r3, [r4, #0]
 8013682:	f7fa ff9b 	bl	800e5bc <_kill>
 8013686:	1c43      	adds	r3, r0, #1
 8013688:	d102      	bne.n	8013690 <_kill_r+0x1c>
 801368a:	6823      	ldr	r3, [r4, #0]
 801368c:	b103      	cbz	r3, 8013690 <_kill_r+0x1c>
 801368e:	602b      	str	r3, [r5, #0]
 8013690:	bd38      	pop	{r3, r4, r5, pc}
 8013692:	bf00      	nop
 8013694:	200010f8 	.word	0x200010f8

08013698 <_getpid_r>:
 8013698:	f7fa bf88 	b.w	800e5ac <_getpid>

0801369c <snprintf>:
 801369c:	b40c      	push	{r2, r3}
 801369e:	b530      	push	{r4, r5, lr}
 80136a0:	4b17      	ldr	r3, [pc, #92]	; (8013700 <snprintf+0x64>)
 80136a2:	1e0c      	subs	r4, r1, #0
 80136a4:	b09d      	sub	sp, #116	; 0x74
 80136a6:	681d      	ldr	r5, [r3, #0]
 80136a8:	da08      	bge.n	80136bc <snprintf+0x20>
 80136aa:	238b      	movs	r3, #139	; 0x8b
 80136ac:	602b      	str	r3, [r5, #0]
 80136ae:	f04f 30ff 	mov.w	r0, #4294967295
 80136b2:	b01d      	add	sp, #116	; 0x74
 80136b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136b8:	b002      	add	sp, #8
 80136ba:	4770      	bx	lr
 80136bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80136c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80136c4:	bf14      	ite	ne
 80136c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80136ca:	4623      	moveq	r3, r4
 80136cc:	9304      	str	r3, [sp, #16]
 80136ce:	9307      	str	r3, [sp, #28]
 80136d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136d4:	9002      	str	r0, [sp, #8]
 80136d6:	9006      	str	r0, [sp, #24]
 80136d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80136dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80136de:	ab21      	add	r3, sp, #132	; 0x84
 80136e0:	a902      	add	r1, sp, #8
 80136e2:	4628      	mov	r0, r5
 80136e4:	9301      	str	r3, [sp, #4]
 80136e6:	f001 f803 	bl	80146f0 <_svfprintf_r>
 80136ea:	1c43      	adds	r3, r0, #1
 80136ec:	bfbc      	itt	lt
 80136ee:	238b      	movlt	r3, #139	; 0x8b
 80136f0:	602b      	strlt	r3, [r5, #0]
 80136f2:	2c00      	cmp	r4, #0
 80136f4:	d0dd      	beq.n	80136b2 <snprintf+0x16>
 80136f6:	9b02      	ldr	r3, [sp, #8]
 80136f8:	2200      	movs	r2, #0
 80136fa:	701a      	strb	r2, [r3, #0]
 80136fc:	e7d9      	b.n	80136b2 <snprintf+0x16>
 80136fe:	bf00      	nop
 8013700:	20000404 	.word	0x20000404

08013704 <sprintf>:
 8013704:	b40e      	push	{r1, r2, r3}
 8013706:	b500      	push	{lr}
 8013708:	b09c      	sub	sp, #112	; 0x70
 801370a:	ab1d      	add	r3, sp, #116	; 0x74
 801370c:	9002      	str	r0, [sp, #8]
 801370e:	9006      	str	r0, [sp, #24]
 8013710:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013714:	4809      	ldr	r0, [pc, #36]	; (801373c <sprintf+0x38>)
 8013716:	9107      	str	r1, [sp, #28]
 8013718:	9104      	str	r1, [sp, #16]
 801371a:	4909      	ldr	r1, [pc, #36]	; (8013740 <sprintf+0x3c>)
 801371c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013720:	9105      	str	r1, [sp, #20]
 8013722:	6800      	ldr	r0, [r0, #0]
 8013724:	9301      	str	r3, [sp, #4]
 8013726:	a902      	add	r1, sp, #8
 8013728:	f000 ffe2 	bl	80146f0 <_svfprintf_r>
 801372c:	9b02      	ldr	r3, [sp, #8]
 801372e:	2200      	movs	r2, #0
 8013730:	701a      	strb	r2, [r3, #0]
 8013732:	b01c      	add	sp, #112	; 0x70
 8013734:	f85d eb04 	ldr.w	lr, [sp], #4
 8013738:	b003      	add	sp, #12
 801373a:	4770      	bx	lr
 801373c:	20000404 	.word	0x20000404
 8013740:	ffff0208 	.word	0xffff0208

08013744 <__sread>:
 8013744:	b510      	push	{r4, lr}
 8013746:	460c      	mov	r4, r1
 8013748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801374c:	f005 fd54 	bl	80191f8 <_read_r>
 8013750:	2800      	cmp	r0, #0
 8013752:	bfab      	itete	ge
 8013754:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8013756:	89a3      	ldrhlt	r3, [r4, #12]
 8013758:	181b      	addge	r3, r3, r0
 801375a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801375e:	bfac      	ite	ge
 8013760:	6523      	strge	r3, [r4, #80]	; 0x50
 8013762:	81a3      	strhlt	r3, [r4, #12]
 8013764:	bd10      	pop	{r4, pc}

08013766 <__swrite>:
 8013766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801376a:	461f      	mov	r7, r3
 801376c:	898b      	ldrh	r3, [r1, #12]
 801376e:	05db      	lsls	r3, r3, #23
 8013770:	4605      	mov	r5, r0
 8013772:	460c      	mov	r4, r1
 8013774:	4616      	mov	r6, r2
 8013776:	d505      	bpl.n	8013784 <__swrite+0x1e>
 8013778:	2302      	movs	r3, #2
 801377a:	2200      	movs	r2, #0
 801377c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013780:	f005 f90e 	bl	80189a0 <_lseek_r>
 8013784:	89a3      	ldrh	r3, [r4, #12]
 8013786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801378a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801378e:	81a3      	strh	r3, [r4, #12]
 8013790:	4632      	mov	r2, r6
 8013792:	463b      	mov	r3, r7
 8013794:	4628      	mov	r0, r5
 8013796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801379a:	f003 bc87 	b.w	80170ac <_write_r>

0801379e <__sseek>:
 801379e:	b510      	push	{r4, lr}
 80137a0:	460c      	mov	r4, r1
 80137a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137a6:	f005 f8fb 	bl	80189a0 <_lseek_r>
 80137aa:	1c43      	adds	r3, r0, #1
 80137ac:	89a3      	ldrh	r3, [r4, #12]
 80137ae:	bf15      	itete	ne
 80137b0:	6520      	strne	r0, [r4, #80]	; 0x50
 80137b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80137b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80137ba:	81a3      	strheq	r3, [r4, #12]
 80137bc:	bf18      	it	ne
 80137be:	81a3      	strhne	r3, [r4, #12]
 80137c0:	bd10      	pop	{r4, pc}

080137c2 <__sclose>:
 80137c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137c6:	f003 bceb 	b.w	80171a0 <_close_r>

080137ca <strncmp>:
 80137ca:	b510      	push	{r4, lr}
 80137cc:	b16a      	cbz	r2, 80137ea <strncmp+0x20>
 80137ce:	3901      	subs	r1, #1
 80137d0:	1884      	adds	r4, r0, r2
 80137d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80137d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80137da:	4293      	cmp	r3, r2
 80137dc:	d103      	bne.n	80137e6 <strncmp+0x1c>
 80137de:	42a0      	cmp	r0, r4
 80137e0:	d001      	beq.n	80137e6 <strncmp+0x1c>
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d1f5      	bne.n	80137d2 <strncmp+0x8>
 80137e6:	1a98      	subs	r0, r3, r2
 80137e8:	bd10      	pop	{r4, pc}
 80137ea:	4610      	mov	r0, r2
 80137ec:	e7fc      	b.n	80137e8 <strncmp+0x1e>

080137ee <sulp>:
 80137ee:	b570      	push	{r4, r5, r6, lr}
 80137f0:	4604      	mov	r4, r0
 80137f2:	460d      	mov	r5, r1
 80137f4:	ec45 4b10 	vmov	d0, r4, r5
 80137f8:	4616      	mov	r6, r2
 80137fa:	f005 fb95 	bl	8018f28 <__ulp>
 80137fe:	ec51 0b10 	vmov	r0, r1, d0
 8013802:	b17e      	cbz	r6, 8013824 <sulp+0x36>
 8013804:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013808:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801380c:	2b00      	cmp	r3, #0
 801380e:	dd09      	ble.n	8013824 <sulp+0x36>
 8013810:	051b      	lsls	r3, r3, #20
 8013812:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013816:	2400      	movs	r4, #0
 8013818:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801381c:	4622      	mov	r2, r4
 801381e:	462b      	mov	r3, r5
 8013820:	f7f3 fc6c 	bl	80070fc <__aeabi_dmul>
 8013824:	bd70      	pop	{r4, r5, r6, pc}
	...

08013828 <_strtod_l>:
 8013828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801382c:	461f      	mov	r7, r3
 801382e:	b0a1      	sub	sp, #132	; 0x84
 8013830:	2300      	movs	r3, #0
 8013832:	4681      	mov	r9, r0
 8013834:	4638      	mov	r0, r7
 8013836:	460e      	mov	r6, r1
 8013838:	9217      	str	r2, [sp, #92]	; 0x5c
 801383a:	931c      	str	r3, [sp, #112]	; 0x70
 801383c:	f005 f89f 	bl	801897e <__localeconv_l>
 8013840:	4680      	mov	r8, r0
 8013842:	6800      	ldr	r0, [r0, #0]
 8013844:	f7f3 fa96 	bl	8006d74 <strlen>
 8013848:	f04f 0a00 	mov.w	sl, #0
 801384c:	4604      	mov	r4, r0
 801384e:	f04f 0b00 	mov.w	fp, #0
 8013852:	961b      	str	r6, [sp, #108]	; 0x6c
 8013854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013856:	781a      	ldrb	r2, [r3, #0]
 8013858:	2a0d      	cmp	r2, #13
 801385a:	d832      	bhi.n	80138c2 <_strtod_l+0x9a>
 801385c:	2a09      	cmp	r2, #9
 801385e:	d236      	bcs.n	80138ce <_strtod_l+0xa6>
 8013860:	2a00      	cmp	r2, #0
 8013862:	d03e      	beq.n	80138e2 <_strtod_l+0xba>
 8013864:	2300      	movs	r3, #0
 8013866:	930d      	str	r3, [sp, #52]	; 0x34
 8013868:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801386a:	782b      	ldrb	r3, [r5, #0]
 801386c:	2b30      	cmp	r3, #48	; 0x30
 801386e:	f040 80ac 	bne.w	80139ca <_strtod_l+0x1a2>
 8013872:	786b      	ldrb	r3, [r5, #1]
 8013874:	2b58      	cmp	r3, #88	; 0x58
 8013876:	d001      	beq.n	801387c <_strtod_l+0x54>
 8013878:	2b78      	cmp	r3, #120	; 0x78
 801387a:	d167      	bne.n	801394c <_strtod_l+0x124>
 801387c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801387e:	9301      	str	r3, [sp, #4]
 8013880:	ab1c      	add	r3, sp, #112	; 0x70
 8013882:	9300      	str	r3, [sp, #0]
 8013884:	9702      	str	r7, [sp, #8]
 8013886:	ab1d      	add	r3, sp, #116	; 0x74
 8013888:	4a88      	ldr	r2, [pc, #544]	; (8013aac <_strtod_l+0x284>)
 801388a:	a91b      	add	r1, sp, #108	; 0x6c
 801388c:	4648      	mov	r0, r9
 801388e:	f004 fd7e 	bl	801838e <__gethex>
 8013892:	f010 0407 	ands.w	r4, r0, #7
 8013896:	4606      	mov	r6, r0
 8013898:	d005      	beq.n	80138a6 <_strtod_l+0x7e>
 801389a:	2c06      	cmp	r4, #6
 801389c:	d12b      	bne.n	80138f6 <_strtod_l+0xce>
 801389e:	3501      	adds	r5, #1
 80138a0:	2300      	movs	r3, #0
 80138a2:	951b      	str	r5, [sp, #108]	; 0x6c
 80138a4:	930d      	str	r3, [sp, #52]	; 0x34
 80138a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	f040 859a 	bne.w	80143e2 <_strtod_l+0xbba>
 80138ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138b0:	b1e3      	cbz	r3, 80138ec <_strtod_l+0xc4>
 80138b2:	4652      	mov	r2, sl
 80138b4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80138b8:	ec43 2b10 	vmov	d0, r2, r3
 80138bc:	b021      	add	sp, #132	; 0x84
 80138be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c2:	2a2b      	cmp	r2, #43	; 0x2b
 80138c4:	d015      	beq.n	80138f2 <_strtod_l+0xca>
 80138c6:	2a2d      	cmp	r2, #45	; 0x2d
 80138c8:	d004      	beq.n	80138d4 <_strtod_l+0xac>
 80138ca:	2a20      	cmp	r2, #32
 80138cc:	d1ca      	bne.n	8013864 <_strtod_l+0x3c>
 80138ce:	3301      	adds	r3, #1
 80138d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80138d2:	e7bf      	b.n	8013854 <_strtod_l+0x2c>
 80138d4:	2201      	movs	r2, #1
 80138d6:	920d      	str	r2, [sp, #52]	; 0x34
 80138d8:	1c5a      	adds	r2, r3, #1
 80138da:	921b      	str	r2, [sp, #108]	; 0x6c
 80138dc:	785b      	ldrb	r3, [r3, #1]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d1c2      	bne.n	8013868 <_strtod_l+0x40>
 80138e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f040 8579 	bne.w	80143de <_strtod_l+0xbb6>
 80138ec:	4652      	mov	r2, sl
 80138ee:	465b      	mov	r3, fp
 80138f0:	e7e2      	b.n	80138b8 <_strtod_l+0x90>
 80138f2:	2200      	movs	r2, #0
 80138f4:	e7ef      	b.n	80138d6 <_strtod_l+0xae>
 80138f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80138f8:	b13a      	cbz	r2, 801390a <_strtod_l+0xe2>
 80138fa:	2135      	movs	r1, #53	; 0x35
 80138fc:	a81e      	add	r0, sp, #120	; 0x78
 80138fe:	f005 fc0b 	bl	8019118 <__copybits>
 8013902:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013904:	4648      	mov	r0, r9
 8013906:	f005 f894 	bl	8018a32 <_Bfree>
 801390a:	3c01      	subs	r4, #1
 801390c:	2c04      	cmp	r4, #4
 801390e:	d806      	bhi.n	801391e <_strtod_l+0xf6>
 8013910:	e8df f004 	tbb	[pc, r4]
 8013914:	1714030a 	.word	0x1714030a
 8013918:	0a          	.byte	0x0a
 8013919:	00          	.byte	0x00
 801391a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801391e:	0730      	lsls	r0, r6, #28
 8013920:	d5c1      	bpl.n	80138a6 <_strtod_l+0x7e>
 8013922:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013926:	e7be      	b.n	80138a6 <_strtod_l+0x7e>
 8013928:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801392c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801392e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013932:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013936:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801393a:	e7f0      	b.n	801391e <_strtod_l+0xf6>
 801393c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013ab0 <_strtod_l+0x288>
 8013940:	e7ed      	b.n	801391e <_strtod_l+0xf6>
 8013942:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013946:	f04f 3aff 	mov.w	sl, #4294967295
 801394a:	e7e8      	b.n	801391e <_strtod_l+0xf6>
 801394c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801394e:	1c5a      	adds	r2, r3, #1
 8013950:	921b      	str	r2, [sp, #108]	; 0x6c
 8013952:	785b      	ldrb	r3, [r3, #1]
 8013954:	2b30      	cmp	r3, #48	; 0x30
 8013956:	d0f9      	beq.n	801394c <_strtod_l+0x124>
 8013958:	2b00      	cmp	r3, #0
 801395a:	d0a4      	beq.n	80138a6 <_strtod_l+0x7e>
 801395c:	2301      	movs	r3, #1
 801395e:	2500      	movs	r5, #0
 8013960:	9306      	str	r3, [sp, #24]
 8013962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013964:	9308      	str	r3, [sp, #32]
 8013966:	9507      	str	r5, [sp, #28]
 8013968:	9505      	str	r5, [sp, #20]
 801396a:	220a      	movs	r2, #10
 801396c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801396e:	7807      	ldrb	r7, [r0, #0]
 8013970:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013974:	b2d9      	uxtb	r1, r3
 8013976:	2909      	cmp	r1, #9
 8013978:	d929      	bls.n	80139ce <_strtod_l+0x1a6>
 801397a:	4622      	mov	r2, r4
 801397c:	f8d8 1000 	ldr.w	r1, [r8]
 8013980:	f7ff ff23 	bl	80137ca <strncmp>
 8013984:	2800      	cmp	r0, #0
 8013986:	d031      	beq.n	80139ec <_strtod_l+0x1c4>
 8013988:	2000      	movs	r0, #0
 801398a:	9c05      	ldr	r4, [sp, #20]
 801398c:	9004      	str	r0, [sp, #16]
 801398e:	463b      	mov	r3, r7
 8013990:	4602      	mov	r2, r0
 8013992:	2b65      	cmp	r3, #101	; 0x65
 8013994:	d001      	beq.n	801399a <_strtod_l+0x172>
 8013996:	2b45      	cmp	r3, #69	; 0x45
 8013998:	d114      	bne.n	80139c4 <_strtod_l+0x19c>
 801399a:	b924      	cbnz	r4, 80139a6 <_strtod_l+0x17e>
 801399c:	b910      	cbnz	r0, 80139a4 <_strtod_l+0x17c>
 801399e:	9b06      	ldr	r3, [sp, #24]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d09e      	beq.n	80138e2 <_strtod_l+0xba>
 80139a4:	2400      	movs	r4, #0
 80139a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80139a8:	1c73      	adds	r3, r6, #1
 80139aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80139ac:	7873      	ldrb	r3, [r6, #1]
 80139ae:	2b2b      	cmp	r3, #43	; 0x2b
 80139b0:	d078      	beq.n	8013aa4 <_strtod_l+0x27c>
 80139b2:	2b2d      	cmp	r3, #45	; 0x2d
 80139b4:	d070      	beq.n	8013a98 <_strtod_l+0x270>
 80139b6:	f04f 0c00 	mov.w	ip, #0
 80139ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80139be:	2f09      	cmp	r7, #9
 80139c0:	d97c      	bls.n	8013abc <_strtod_l+0x294>
 80139c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80139c4:	f04f 0e00 	mov.w	lr, #0
 80139c8:	e09a      	b.n	8013b00 <_strtod_l+0x2d8>
 80139ca:	2300      	movs	r3, #0
 80139cc:	e7c7      	b.n	801395e <_strtod_l+0x136>
 80139ce:	9905      	ldr	r1, [sp, #20]
 80139d0:	2908      	cmp	r1, #8
 80139d2:	bfdd      	ittte	le
 80139d4:	9907      	ldrle	r1, [sp, #28]
 80139d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80139da:	9307      	strle	r3, [sp, #28]
 80139dc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80139e0:	9b05      	ldr	r3, [sp, #20]
 80139e2:	3001      	adds	r0, #1
 80139e4:	3301      	adds	r3, #1
 80139e6:	9305      	str	r3, [sp, #20]
 80139e8:	901b      	str	r0, [sp, #108]	; 0x6c
 80139ea:	e7bf      	b.n	801396c <_strtod_l+0x144>
 80139ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139ee:	191a      	adds	r2, r3, r4
 80139f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80139f2:	9a05      	ldr	r2, [sp, #20]
 80139f4:	5d1b      	ldrb	r3, [r3, r4]
 80139f6:	2a00      	cmp	r2, #0
 80139f8:	d037      	beq.n	8013a6a <_strtod_l+0x242>
 80139fa:	9c05      	ldr	r4, [sp, #20]
 80139fc:	4602      	mov	r2, r0
 80139fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013a02:	2909      	cmp	r1, #9
 8013a04:	d913      	bls.n	8013a2e <_strtod_l+0x206>
 8013a06:	2101      	movs	r1, #1
 8013a08:	9104      	str	r1, [sp, #16]
 8013a0a:	e7c2      	b.n	8013992 <_strtod_l+0x16a>
 8013a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a0e:	1c5a      	adds	r2, r3, #1
 8013a10:	921b      	str	r2, [sp, #108]	; 0x6c
 8013a12:	785b      	ldrb	r3, [r3, #1]
 8013a14:	3001      	adds	r0, #1
 8013a16:	2b30      	cmp	r3, #48	; 0x30
 8013a18:	d0f8      	beq.n	8013a0c <_strtod_l+0x1e4>
 8013a1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013a1e:	2a08      	cmp	r2, #8
 8013a20:	f200 84e4 	bhi.w	80143ec <_strtod_l+0xbc4>
 8013a24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013a26:	9208      	str	r2, [sp, #32]
 8013a28:	4602      	mov	r2, r0
 8013a2a:	2000      	movs	r0, #0
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013a32:	f100 0101 	add.w	r1, r0, #1
 8013a36:	d012      	beq.n	8013a5e <_strtod_l+0x236>
 8013a38:	440a      	add	r2, r1
 8013a3a:	eb00 0c04 	add.w	ip, r0, r4
 8013a3e:	4621      	mov	r1, r4
 8013a40:	270a      	movs	r7, #10
 8013a42:	458c      	cmp	ip, r1
 8013a44:	d113      	bne.n	8013a6e <_strtod_l+0x246>
 8013a46:	1821      	adds	r1, r4, r0
 8013a48:	2908      	cmp	r1, #8
 8013a4a:	f104 0401 	add.w	r4, r4, #1
 8013a4e:	4404      	add	r4, r0
 8013a50:	dc19      	bgt.n	8013a86 <_strtod_l+0x25e>
 8013a52:	9b07      	ldr	r3, [sp, #28]
 8013a54:	210a      	movs	r1, #10
 8013a56:	fb01 e303 	mla	r3, r1, r3, lr
 8013a5a:	9307      	str	r3, [sp, #28]
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a60:	1c58      	adds	r0, r3, #1
 8013a62:	901b      	str	r0, [sp, #108]	; 0x6c
 8013a64:	785b      	ldrb	r3, [r3, #1]
 8013a66:	4608      	mov	r0, r1
 8013a68:	e7c9      	b.n	80139fe <_strtod_l+0x1d6>
 8013a6a:	9805      	ldr	r0, [sp, #20]
 8013a6c:	e7d3      	b.n	8013a16 <_strtod_l+0x1ee>
 8013a6e:	2908      	cmp	r1, #8
 8013a70:	f101 0101 	add.w	r1, r1, #1
 8013a74:	dc03      	bgt.n	8013a7e <_strtod_l+0x256>
 8013a76:	9b07      	ldr	r3, [sp, #28]
 8013a78:	437b      	muls	r3, r7
 8013a7a:	9307      	str	r3, [sp, #28]
 8013a7c:	e7e1      	b.n	8013a42 <_strtod_l+0x21a>
 8013a7e:	2910      	cmp	r1, #16
 8013a80:	bfd8      	it	le
 8013a82:	437d      	mulle	r5, r7
 8013a84:	e7dd      	b.n	8013a42 <_strtod_l+0x21a>
 8013a86:	2c10      	cmp	r4, #16
 8013a88:	bfdc      	itt	le
 8013a8a:	210a      	movle	r1, #10
 8013a8c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013a90:	e7e4      	b.n	8013a5c <_strtod_l+0x234>
 8013a92:	2301      	movs	r3, #1
 8013a94:	9304      	str	r3, [sp, #16]
 8013a96:	e781      	b.n	801399c <_strtod_l+0x174>
 8013a98:	f04f 0c01 	mov.w	ip, #1
 8013a9c:	1cb3      	adds	r3, r6, #2
 8013a9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013aa0:	78b3      	ldrb	r3, [r6, #2]
 8013aa2:	e78a      	b.n	80139ba <_strtod_l+0x192>
 8013aa4:	f04f 0c00 	mov.w	ip, #0
 8013aa8:	e7f8      	b.n	8013a9c <_strtod_l+0x274>
 8013aaa:	bf00      	nop
 8013aac:	0801cc10 	.word	0x0801cc10
 8013ab0:	7ff00000 	.word	0x7ff00000
 8013ab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ab6:	1c5f      	adds	r7, r3, #1
 8013ab8:	971b      	str	r7, [sp, #108]	; 0x6c
 8013aba:	785b      	ldrb	r3, [r3, #1]
 8013abc:	2b30      	cmp	r3, #48	; 0x30
 8013abe:	d0f9      	beq.n	8013ab4 <_strtod_l+0x28c>
 8013ac0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013ac4:	2f08      	cmp	r7, #8
 8013ac6:	f63f af7d 	bhi.w	80139c4 <_strtod_l+0x19c>
 8013aca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013ace:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8013ad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ad4:	1c5f      	adds	r7, r3, #1
 8013ad6:	971b      	str	r7, [sp, #108]	; 0x6c
 8013ad8:	785b      	ldrb	r3, [r3, #1]
 8013ada:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013ade:	f1b8 0f09 	cmp.w	r8, #9
 8013ae2:	d937      	bls.n	8013b54 <_strtod_l+0x32c>
 8013ae4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ae6:	1a7f      	subs	r7, r7, r1
 8013ae8:	2f08      	cmp	r7, #8
 8013aea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013aee:	dc37      	bgt.n	8013b60 <_strtod_l+0x338>
 8013af0:	45be      	cmp	lr, r7
 8013af2:	bfa8      	it	ge
 8013af4:	46be      	movge	lr, r7
 8013af6:	f1bc 0f00 	cmp.w	ip, #0
 8013afa:	d001      	beq.n	8013b00 <_strtod_l+0x2d8>
 8013afc:	f1ce 0e00 	rsb	lr, lr, #0
 8013b00:	2c00      	cmp	r4, #0
 8013b02:	d151      	bne.n	8013ba8 <_strtod_l+0x380>
 8013b04:	2800      	cmp	r0, #0
 8013b06:	f47f aece 	bne.w	80138a6 <_strtod_l+0x7e>
 8013b0a:	9a06      	ldr	r2, [sp, #24]
 8013b0c:	2a00      	cmp	r2, #0
 8013b0e:	f47f aeca 	bne.w	80138a6 <_strtod_l+0x7e>
 8013b12:	9a04      	ldr	r2, [sp, #16]
 8013b14:	2a00      	cmp	r2, #0
 8013b16:	f47f aee4 	bne.w	80138e2 <_strtod_l+0xba>
 8013b1a:	2b4e      	cmp	r3, #78	; 0x4e
 8013b1c:	d027      	beq.n	8013b6e <_strtod_l+0x346>
 8013b1e:	dc21      	bgt.n	8013b64 <_strtod_l+0x33c>
 8013b20:	2b49      	cmp	r3, #73	; 0x49
 8013b22:	f47f aede 	bne.w	80138e2 <_strtod_l+0xba>
 8013b26:	49a0      	ldr	r1, [pc, #640]	; (8013da8 <_strtod_l+0x580>)
 8013b28:	a81b      	add	r0, sp, #108	; 0x6c
 8013b2a:	f004 fe63 	bl	80187f4 <__match>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	f43f aed7 	beq.w	80138e2 <_strtod_l+0xba>
 8013b34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b36:	499d      	ldr	r1, [pc, #628]	; (8013dac <_strtod_l+0x584>)
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	a81b      	add	r0, sp, #108	; 0x6c
 8013b3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8013b3e:	f004 fe59 	bl	80187f4 <__match>
 8013b42:	b910      	cbnz	r0, 8013b4a <_strtod_l+0x322>
 8013b44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b46:	3301      	adds	r3, #1
 8013b48:	931b      	str	r3, [sp, #108]	; 0x6c
 8013b4a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013dc0 <_strtod_l+0x598>
 8013b4e:	f04f 0a00 	mov.w	sl, #0
 8013b52:	e6a8      	b.n	80138a6 <_strtod_l+0x7e>
 8013b54:	210a      	movs	r1, #10
 8013b56:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013b5a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013b5e:	e7b8      	b.n	8013ad2 <_strtod_l+0x2aa>
 8013b60:	46be      	mov	lr, r7
 8013b62:	e7c8      	b.n	8013af6 <_strtod_l+0x2ce>
 8013b64:	2b69      	cmp	r3, #105	; 0x69
 8013b66:	d0de      	beq.n	8013b26 <_strtod_l+0x2fe>
 8013b68:	2b6e      	cmp	r3, #110	; 0x6e
 8013b6a:	f47f aeba 	bne.w	80138e2 <_strtod_l+0xba>
 8013b6e:	4990      	ldr	r1, [pc, #576]	; (8013db0 <_strtod_l+0x588>)
 8013b70:	a81b      	add	r0, sp, #108	; 0x6c
 8013b72:	f004 fe3f 	bl	80187f4 <__match>
 8013b76:	2800      	cmp	r0, #0
 8013b78:	f43f aeb3 	beq.w	80138e2 <_strtod_l+0xba>
 8013b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	2b28      	cmp	r3, #40	; 0x28
 8013b82:	d10e      	bne.n	8013ba2 <_strtod_l+0x37a>
 8013b84:	aa1e      	add	r2, sp, #120	; 0x78
 8013b86:	498b      	ldr	r1, [pc, #556]	; (8013db4 <_strtod_l+0x58c>)
 8013b88:	a81b      	add	r0, sp, #108	; 0x6c
 8013b8a:	f004 fe47 	bl	801881c <__hexnan>
 8013b8e:	2805      	cmp	r0, #5
 8013b90:	d107      	bne.n	8013ba2 <_strtod_l+0x37a>
 8013b92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013b94:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013b98:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013b9c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013ba0:	e681      	b.n	80138a6 <_strtod_l+0x7e>
 8013ba2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013dc8 <_strtod_l+0x5a0>
 8013ba6:	e7d2      	b.n	8013b4e <_strtod_l+0x326>
 8013ba8:	ebae 0302 	sub.w	r3, lr, r2
 8013bac:	9306      	str	r3, [sp, #24]
 8013bae:	9b05      	ldr	r3, [sp, #20]
 8013bb0:	9807      	ldr	r0, [sp, #28]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	bf08      	it	eq
 8013bb6:	4623      	moveq	r3, r4
 8013bb8:	2c10      	cmp	r4, #16
 8013bba:	9305      	str	r3, [sp, #20]
 8013bbc:	46a0      	mov	r8, r4
 8013bbe:	bfa8      	it	ge
 8013bc0:	f04f 0810 	movge.w	r8, #16
 8013bc4:	f7f3 fa20 	bl	8007008 <__aeabi_ui2d>
 8013bc8:	2c09      	cmp	r4, #9
 8013bca:	4682      	mov	sl, r0
 8013bcc:	468b      	mov	fp, r1
 8013bce:	dc13      	bgt.n	8013bf8 <_strtod_l+0x3d0>
 8013bd0:	9b06      	ldr	r3, [sp, #24]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	f43f ae67 	beq.w	80138a6 <_strtod_l+0x7e>
 8013bd8:	9b06      	ldr	r3, [sp, #24]
 8013bda:	dd7a      	ble.n	8013cd2 <_strtod_l+0x4aa>
 8013bdc:	2b16      	cmp	r3, #22
 8013bde:	dc61      	bgt.n	8013ca4 <_strtod_l+0x47c>
 8013be0:	4a75      	ldr	r2, [pc, #468]	; (8013db8 <_strtod_l+0x590>)
 8013be2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013be6:	e9de 0100 	ldrd	r0, r1, [lr]
 8013bea:	4652      	mov	r2, sl
 8013bec:	465b      	mov	r3, fp
 8013bee:	f7f3 fa85 	bl	80070fc <__aeabi_dmul>
 8013bf2:	4682      	mov	sl, r0
 8013bf4:	468b      	mov	fp, r1
 8013bf6:	e656      	b.n	80138a6 <_strtod_l+0x7e>
 8013bf8:	4b6f      	ldr	r3, [pc, #444]	; (8013db8 <_strtod_l+0x590>)
 8013bfa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013bfe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013c02:	f7f3 fa7b 	bl	80070fc <__aeabi_dmul>
 8013c06:	4606      	mov	r6, r0
 8013c08:	4628      	mov	r0, r5
 8013c0a:	460f      	mov	r7, r1
 8013c0c:	f7f3 f9fc 	bl	8007008 <__aeabi_ui2d>
 8013c10:	4602      	mov	r2, r0
 8013c12:	460b      	mov	r3, r1
 8013c14:	4630      	mov	r0, r6
 8013c16:	4639      	mov	r1, r7
 8013c18:	f7f3 f8ba 	bl	8006d90 <__adddf3>
 8013c1c:	2c0f      	cmp	r4, #15
 8013c1e:	4682      	mov	sl, r0
 8013c20:	468b      	mov	fp, r1
 8013c22:	ddd5      	ble.n	8013bd0 <_strtod_l+0x3a8>
 8013c24:	9b06      	ldr	r3, [sp, #24]
 8013c26:	eba4 0808 	sub.w	r8, r4, r8
 8013c2a:	4498      	add	r8, r3
 8013c2c:	f1b8 0f00 	cmp.w	r8, #0
 8013c30:	f340 8096 	ble.w	8013d60 <_strtod_l+0x538>
 8013c34:	f018 030f 	ands.w	r3, r8, #15
 8013c38:	d00a      	beq.n	8013c50 <_strtod_l+0x428>
 8013c3a:	495f      	ldr	r1, [pc, #380]	; (8013db8 <_strtod_l+0x590>)
 8013c3c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c40:	4652      	mov	r2, sl
 8013c42:	465b      	mov	r3, fp
 8013c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c48:	f7f3 fa58 	bl	80070fc <__aeabi_dmul>
 8013c4c:	4682      	mov	sl, r0
 8013c4e:	468b      	mov	fp, r1
 8013c50:	f038 080f 	bics.w	r8, r8, #15
 8013c54:	d073      	beq.n	8013d3e <_strtod_l+0x516>
 8013c56:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013c5a:	dd47      	ble.n	8013cec <_strtod_l+0x4c4>
 8013c5c:	2400      	movs	r4, #0
 8013c5e:	46a0      	mov	r8, r4
 8013c60:	9407      	str	r4, [sp, #28]
 8013c62:	9405      	str	r4, [sp, #20]
 8013c64:	2322      	movs	r3, #34	; 0x22
 8013c66:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013dc0 <_strtod_l+0x598>
 8013c6a:	f8c9 3000 	str.w	r3, [r9]
 8013c6e:	f04f 0a00 	mov.w	sl, #0
 8013c72:	9b07      	ldr	r3, [sp, #28]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	f43f ae16 	beq.w	80138a6 <_strtod_l+0x7e>
 8013c7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c7c:	4648      	mov	r0, r9
 8013c7e:	f004 fed8 	bl	8018a32 <_Bfree>
 8013c82:	9905      	ldr	r1, [sp, #20]
 8013c84:	4648      	mov	r0, r9
 8013c86:	f004 fed4 	bl	8018a32 <_Bfree>
 8013c8a:	4641      	mov	r1, r8
 8013c8c:	4648      	mov	r0, r9
 8013c8e:	f004 fed0 	bl	8018a32 <_Bfree>
 8013c92:	9907      	ldr	r1, [sp, #28]
 8013c94:	4648      	mov	r0, r9
 8013c96:	f004 fecc 	bl	8018a32 <_Bfree>
 8013c9a:	4621      	mov	r1, r4
 8013c9c:	4648      	mov	r0, r9
 8013c9e:	f004 fec8 	bl	8018a32 <_Bfree>
 8013ca2:	e600      	b.n	80138a6 <_strtod_l+0x7e>
 8013ca4:	9a06      	ldr	r2, [sp, #24]
 8013ca6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013caa:	4293      	cmp	r3, r2
 8013cac:	dbba      	blt.n	8013c24 <_strtod_l+0x3fc>
 8013cae:	4d42      	ldr	r5, [pc, #264]	; (8013db8 <_strtod_l+0x590>)
 8013cb0:	f1c4 040f 	rsb	r4, r4, #15
 8013cb4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013cb8:	4652      	mov	r2, sl
 8013cba:	465b      	mov	r3, fp
 8013cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cc0:	f7f3 fa1c 	bl	80070fc <__aeabi_dmul>
 8013cc4:	9b06      	ldr	r3, [sp, #24]
 8013cc6:	1b1c      	subs	r4, r3, r4
 8013cc8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013ccc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013cd0:	e78d      	b.n	8013bee <_strtod_l+0x3c6>
 8013cd2:	f113 0f16 	cmn.w	r3, #22
 8013cd6:	dba5      	blt.n	8013c24 <_strtod_l+0x3fc>
 8013cd8:	4a37      	ldr	r2, [pc, #220]	; (8013db8 <_strtod_l+0x590>)
 8013cda:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013cde:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013ce2:	4650      	mov	r0, sl
 8013ce4:	4659      	mov	r1, fp
 8013ce6:	f7f3 fb33 	bl	8007350 <__aeabi_ddiv>
 8013cea:	e782      	b.n	8013bf2 <_strtod_l+0x3ca>
 8013cec:	2300      	movs	r3, #0
 8013cee:	4e33      	ldr	r6, [pc, #204]	; (8013dbc <_strtod_l+0x594>)
 8013cf0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013cf4:	4650      	mov	r0, sl
 8013cf6:	4659      	mov	r1, fp
 8013cf8:	461d      	mov	r5, r3
 8013cfa:	f1b8 0f01 	cmp.w	r8, #1
 8013cfe:	dc21      	bgt.n	8013d44 <_strtod_l+0x51c>
 8013d00:	b10b      	cbz	r3, 8013d06 <_strtod_l+0x4de>
 8013d02:	4682      	mov	sl, r0
 8013d04:	468b      	mov	fp, r1
 8013d06:	4b2d      	ldr	r3, [pc, #180]	; (8013dbc <_strtod_l+0x594>)
 8013d08:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013d0c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013d10:	4652      	mov	r2, sl
 8013d12:	465b      	mov	r3, fp
 8013d14:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013d18:	f7f3 f9f0 	bl	80070fc <__aeabi_dmul>
 8013d1c:	4b28      	ldr	r3, [pc, #160]	; (8013dc0 <_strtod_l+0x598>)
 8013d1e:	460a      	mov	r2, r1
 8013d20:	400b      	ands	r3, r1
 8013d22:	4928      	ldr	r1, [pc, #160]	; (8013dc4 <_strtod_l+0x59c>)
 8013d24:	428b      	cmp	r3, r1
 8013d26:	4682      	mov	sl, r0
 8013d28:	d898      	bhi.n	8013c5c <_strtod_l+0x434>
 8013d2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013d2e:	428b      	cmp	r3, r1
 8013d30:	bf86      	itte	hi
 8013d32:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013dcc <_strtod_l+0x5a4>
 8013d36:	f04f 3aff 	movhi.w	sl, #4294967295
 8013d3a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013d3e:	2300      	movs	r3, #0
 8013d40:	9304      	str	r3, [sp, #16]
 8013d42:	e077      	b.n	8013e34 <_strtod_l+0x60c>
 8013d44:	f018 0f01 	tst.w	r8, #1
 8013d48:	d006      	beq.n	8013d58 <_strtod_l+0x530>
 8013d4a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d52:	f7f3 f9d3 	bl	80070fc <__aeabi_dmul>
 8013d56:	2301      	movs	r3, #1
 8013d58:	3501      	adds	r5, #1
 8013d5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013d5e:	e7cc      	b.n	8013cfa <_strtod_l+0x4d2>
 8013d60:	d0ed      	beq.n	8013d3e <_strtod_l+0x516>
 8013d62:	f1c8 0800 	rsb	r8, r8, #0
 8013d66:	f018 020f 	ands.w	r2, r8, #15
 8013d6a:	d00a      	beq.n	8013d82 <_strtod_l+0x55a>
 8013d6c:	4b12      	ldr	r3, [pc, #72]	; (8013db8 <_strtod_l+0x590>)
 8013d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d72:	4650      	mov	r0, sl
 8013d74:	4659      	mov	r1, fp
 8013d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7a:	f7f3 fae9 	bl	8007350 <__aeabi_ddiv>
 8013d7e:	4682      	mov	sl, r0
 8013d80:	468b      	mov	fp, r1
 8013d82:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013d86:	d0da      	beq.n	8013d3e <_strtod_l+0x516>
 8013d88:	f1b8 0f1f 	cmp.w	r8, #31
 8013d8c:	dd20      	ble.n	8013dd0 <_strtod_l+0x5a8>
 8013d8e:	2400      	movs	r4, #0
 8013d90:	46a0      	mov	r8, r4
 8013d92:	9407      	str	r4, [sp, #28]
 8013d94:	9405      	str	r4, [sp, #20]
 8013d96:	2322      	movs	r3, #34	; 0x22
 8013d98:	f04f 0a00 	mov.w	sl, #0
 8013d9c:	f04f 0b00 	mov.w	fp, #0
 8013da0:	f8c9 3000 	str.w	r3, [r9]
 8013da4:	e765      	b.n	8013c72 <_strtod_l+0x44a>
 8013da6:	bf00      	nop
 8013da8:	0801cc65 	.word	0x0801cc65
 8013dac:	0801ccd7 	.word	0x0801ccd7
 8013db0:	0801cc6d 	.word	0x0801cc6d
 8013db4:	0801cc24 	.word	0x0801cc24
 8013db8:	0801cd18 	.word	0x0801cd18
 8013dbc:	0801ccf0 	.word	0x0801ccf0
 8013dc0:	7ff00000 	.word	0x7ff00000
 8013dc4:	7ca00000 	.word	0x7ca00000
 8013dc8:	fff80000 	.word	0xfff80000
 8013dcc:	7fefffff 	.word	0x7fefffff
 8013dd0:	f018 0310 	ands.w	r3, r8, #16
 8013dd4:	bf18      	it	ne
 8013dd6:	236a      	movne	r3, #106	; 0x6a
 8013dd8:	4da0      	ldr	r5, [pc, #640]	; (801405c <_strtod_l+0x834>)
 8013dda:	9304      	str	r3, [sp, #16]
 8013ddc:	4650      	mov	r0, sl
 8013dde:	4659      	mov	r1, fp
 8013de0:	2300      	movs	r3, #0
 8013de2:	f1b8 0f00 	cmp.w	r8, #0
 8013de6:	f300 810a 	bgt.w	8013ffe <_strtod_l+0x7d6>
 8013dea:	b10b      	cbz	r3, 8013df0 <_strtod_l+0x5c8>
 8013dec:	4682      	mov	sl, r0
 8013dee:	468b      	mov	fp, r1
 8013df0:	9b04      	ldr	r3, [sp, #16]
 8013df2:	b1bb      	cbz	r3, 8013e24 <_strtod_l+0x5fc>
 8013df4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013df8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	4659      	mov	r1, fp
 8013e00:	dd10      	ble.n	8013e24 <_strtod_l+0x5fc>
 8013e02:	2b1f      	cmp	r3, #31
 8013e04:	f340 8107 	ble.w	8014016 <_strtod_l+0x7ee>
 8013e08:	2b34      	cmp	r3, #52	; 0x34
 8013e0a:	bfde      	ittt	le
 8013e0c:	3b20      	suble	r3, #32
 8013e0e:	f04f 32ff 	movle.w	r2, #4294967295
 8013e12:	fa02 f303 	lslle.w	r3, r2, r3
 8013e16:	f04f 0a00 	mov.w	sl, #0
 8013e1a:	bfcc      	ite	gt
 8013e1c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013e20:	ea03 0b01 	andle.w	fp, r3, r1
 8013e24:	2200      	movs	r2, #0
 8013e26:	2300      	movs	r3, #0
 8013e28:	4650      	mov	r0, sl
 8013e2a:	4659      	mov	r1, fp
 8013e2c:	f7f3 fbce 	bl	80075cc <__aeabi_dcmpeq>
 8013e30:	2800      	cmp	r0, #0
 8013e32:	d1ac      	bne.n	8013d8e <_strtod_l+0x566>
 8013e34:	9b07      	ldr	r3, [sp, #28]
 8013e36:	9300      	str	r3, [sp, #0]
 8013e38:	9a05      	ldr	r2, [sp, #20]
 8013e3a:	9908      	ldr	r1, [sp, #32]
 8013e3c:	4623      	mov	r3, r4
 8013e3e:	4648      	mov	r0, r9
 8013e40:	f004 fe3b 	bl	8018aba <__s2b>
 8013e44:	9007      	str	r0, [sp, #28]
 8013e46:	2800      	cmp	r0, #0
 8013e48:	f43f af08 	beq.w	8013c5c <_strtod_l+0x434>
 8013e4c:	9a06      	ldr	r2, [sp, #24]
 8013e4e:	9b06      	ldr	r3, [sp, #24]
 8013e50:	2a00      	cmp	r2, #0
 8013e52:	f1c3 0300 	rsb	r3, r3, #0
 8013e56:	bfa8      	it	ge
 8013e58:	2300      	movge	r3, #0
 8013e5a:	930e      	str	r3, [sp, #56]	; 0x38
 8013e5c:	2400      	movs	r4, #0
 8013e5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013e62:	9316      	str	r3, [sp, #88]	; 0x58
 8013e64:	46a0      	mov	r8, r4
 8013e66:	9b07      	ldr	r3, [sp, #28]
 8013e68:	4648      	mov	r0, r9
 8013e6a:	6859      	ldr	r1, [r3, #4]
 8013e6c:	f004 fdbc 	bl	80189e8 <_Balloc>
 8013e70:	9005      	str	r0, [sp, #20]
 8013e72:	2800      	cmp	r0, #0
 8013e74:	f43f aef6 	beq.w	8013c64 <_strtod_l+0x43c>
 8013e78:	9b07      	ldr	r3, [sp, #28]
 8013e7a:	691a      	ldr	r2, [r3, #16]
 8013e7c:	3202      	adds	r2, #2
 8013e7e:	f103 010c 	add.w	r1, r3, #12
 8013e82:	0092      	lsls	r2, r2, #2
 8013e84:	300c      	adds	r0, #12
 8013e86:	f7ff f960 	bl	801314a <memcpy>
 8013e8a:	aa1e      	add	r2, sp, #120	; 0x78
 8013e8c:	a91d      	add	r1, sp, #116	; 0x74
 8013e8e:	ec4b ab10 	vmov	d0, sl, fp
 8013e92:	4648      	mov	r0, r9
 8013e94:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013e98:	f005 f8bc 	bl	8019014 <__d2b>
 8013e9c:	901c      	str	r0, [sp, #112]	; 0x70
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	f43f aee0 	beq.w	8013c64 <_strtod_l+0x43c>
 8013ea4:	2101      	movs	r1, #1
 8013ea6:	4648      	mov	r0, r9
 8013ea8:	f004 fe93 	bl	8018bd2 <__i2b>
 8013eac:	4680      	mov	r8, r0
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	f43f aed8 	beq.w	8013c64 <_strtod_l+0x43c>
 8013eb4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013eb6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013eb8:	2e00      	cmp	r6, #0
 8013eba:	bfab      	itete	ge
 8013ebc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013ebe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013ec0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013ec2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013ec4:	bfac      	ite	ge
 8013ec6:	18f7      	addge	r7, r6, r3
 8013ec8:	1b9d      	sublt	r5, r3, r6
 8013eca:	9b04      	ldr	r3, [sp, #16]
 8013ecc:	1af6      	subs	r6, r6, r3
 8013ece:	4416      	add	r6, r2
 8013ed0:	4b63      	ldr	r3, [pc, #396]	; (8014060 <_strtod_l+0x838>)
 8013ed2:	3e01      	subs	r6, #1
 8013ed4:	429e      	cmp	r6, r3
 8013ed6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013eda:	f280 80af 	bge.w	801403c <_strtod_l+0x814>
 8013ede:	1b9b      	subs	r3, r3, r6
 8013ee0:	2b1f      	cmp	r3, #31
 8013ee2:	eba2 0203 	sub.w	r2, r2, r3
 8013ee6:	f04f 0101 	mov.w	r1, #1
 8013eea:	f300 809b 	bgt.w	8014024 <_strtod_l+0x7fc>
 8013eee:	fa01 f303 	lsl.w	r3, r1, r3
 8013ef2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8013ef8:	18be      	adds	r6, r7, r2
 8013efa:	9b04      	ldr	r3, [sp, #16]
 8013efc:	42b7      	cmp	r7, r6
 8013efe:	4415      	add	r5, r2
 8013f00:	441d      	add	r5, r3
 8013f02:	463b      	mov	r3, r7
 8013f04:	bfa8      	it	ge
 8013f06:	4633      	movge	r3, r6
 8013f08:	42ab      	cmp	r3, r5
 8013f0a:	bfa8      	it	ge
 8013f0c:	462b      	movge	r3, r5
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	bfc2      	ittt	gt
 8013f12:	1af6      	subgt	r6, r6, r3
 8013f14:	1aed      	subgt	r5, r5, r3
 8013f16:	1aff      	subgt	r7, r7, r3
 8013f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f1a:	b1bb      	cbz	r3, 8013f4c <_strtod_l+0x724>
 8013f1c:	4641      	mov	r1, r8
 8013f1e:	461a      	mov	r2, r3
 8013f20:	4648      	mov	r0, r9
 8013f22:	f004 fef5 	bl	8018d10 <__pow5mult>
 8013f26:	4680      	mov	r8, r0
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	f43f ae9b 	beq.w	8013c64 <_strtod_l+0x43c>
 8013f2e:	4601      	mov	r1, r0
 8013f30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013f32:	4648      	mov	r0, r9
 8013f34:	f004 fe56 	bl	8018be4 <__multiply>
 8013f38:	900c      	str	r0, [sp, #48]	; 0x30
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	f43f ae92 	beq.w	8013c64 <_strtod_l+0x43c>
 8013f40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f42:	4648      	mov	r0, r9
 8013f44:	f004 fd75 	bl	8018a32 <_Bfree>
 8013f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f4a:	931c      	str	r3, [sp, #112]	; 0x70
 8013f4c:	2e00      	cmp	r6, #0
 8013f4e:	dc7a      	bgt.n	8014046 <_strtod_l+0x81e>
 8013f50:	9b06      	ldr	r3, [sp, #24]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	dd08      	ble.n	8013f68 <_strtod_l+0x740>
 8013f56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013f58:	9905      	ldr	r1, [sp, #20]
 8013f5a:	4648      	mov	r0, r9
 8013f5c:	f004 fed8 	bl	8018d10 <__pow5mult>
 8013f60:	9005      	str	r0, [sp, #20]
 8013f62:	2800      	cmp	r0, #0
 8013f64:	f43f ae7e 	beq.w	8013c64 <_strtod_l+0x43c>
 8013f68:	2d00      	cmp	r5, #0
 8013f6a:	dd08      	ble.n	8013f7e <_strtod_l+0x756>
 8013f6c:	462a      	mov	r2, r5
 8013f6e:	9905      	ldr	r1, [sp, #20]
 8013f70:	4648      	mov	r0, r9
 8013f72:	f004 ff0d 	bl	8018d90 <__lshift>
 8013f76:	9005      	str	r0, [sp, #20]
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	f43f ae73 	beq.w	8013c64 <_strtod_l+0x43c>
 8013f7e:	2f00      	cmp	r7, #0
 8013f80:	dd08      	ble.n	8013f94 <_strtod_l+0x76c>
 8013f82:	4641      	mov	r1, r8
 8013f84:	463a      	mov	r2, r7
 8013f86:	4648      	mov	r0, r9
 8013f88:	f004 ff02 	bl	8018d90 <__lshift>
 8013f8c:	4680      	mov	r8, r0
 8013f8e:	2800      	cmp	r0, #0
 8013f90:	f43f ae68 	beq.w	8013c64 <_strtod_l+0x43c>
 8013f94:	9a05      	ldr	r2, [sp, #20]
 8013f96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f98:	4648      	mov	r0, r9
 8013f9a:	f004 ff67 	bl	8018e6c <__mdiff>
 8013f9e:	4604      	mov	r4, r0
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	f43f ae5f 	beq.w	8013c64 <_strtod_l+0x43c>
 8013fa6:	68c3      	ldr	r3, [r0, #12]
 8013fa8:	930c      	str	r3, [sp, #48]	; 0x30
 8013faa:	2300      	movs	r3, #0
 8013fac:	60c3      	str	r3, [r0, #12]
 8013fae:	4641      	mov	r1, r8
 8013fb0:	f004 ff42 	bl	8018e38 <__mcmp>
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	da55      	bge.n	8014064 <_strtod_l+0x83c>
 8013fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fba:	b9e3      	cbnz	r3, 8013ff6 <_strtod_l+0x7ce>
 8013fbc:	f1ba 0f00 	cmp.w	sl, #0
 8013fc0:	d119      	bne.n	8013ff6 <_strtod_l+0x7ce>
 8013fc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fc6:	b9b3      	cbnz	r3, 8013ff6 <_strtod_l+0x7ce>
 8013fc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013fcc:	0d1b      	lsrs	r3, r3, #20
 8013fce:	051b      	lsls	r3, r3, #20
 8013fd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013fd4:	d90f      	bls.n	8013ff6 <_strtod_l+0x7ce>
 8013fd6:	6963      	ldr	r3, [r4, #20]
 8013fd8:	b913      	cbnz	r3, 8013fe0 <_strtod_l+0x7b8>
 8013fda:	6923      	ldr	r3, [r4, #16]
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	dd0a      	ble.n	8013ff6 <_strtod_l+0x7ce>
 8013fe0:	4621      	mov	r1, r4
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	4648      	mov	r0, r9
 8013fe6:	f004 fed3 	bl	8018d90 <__lshift>
 8013fea:	4641      	mov	r1, r8
 8013fec:	4604      	mov	r4, r0
 8013fee:	f004 ff23 	bl	8018e38 <__mcmp>
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	dc67      	bgt.n	80140c6 <_strtod_l+0x89e>
 8013ff6:	9b04      	ldr	r3, [sp, #16]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d171      	bne.n	80140e0 <_strtod_l+0x8b8>
 8013ffc:	e63d      	b.n	8013c7a <_strtod_l+0x452>
 8013ffe:	f018 0f01 	tst.w	r8, #1
 8014002:	d004      	beq.n	801400e <_strtod_l+0x7e6>
 8014004:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014008:	f7f3 f878 	bl	80070fc <__aeabi_dmul>
 801400c:	2301      	movs	r3, #1
 801400e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014012:	3508      	adds	r5, #8
 8014014:	e6e5      	b.n	8013de2 <_strtod_l+0x5ba>
 8014016:	f04f 32ff 	mov.w	r2, #4294967295
 801401a:	fa02 f303 	lsl.w	r3, r2, r3
 801401e:	ea03 0a0a 	and.w	sl, r3, sl
 8014022:	e6ff      	b.n	8013e24 <_strtod_l+0x5fc>
 8014024:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014028:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801402c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014030:	36e2      	adds	r6, #226	; 0xe2
 8014032:	fa01 f306 	lsl.w	r3, r1, r6
 8014036:	930a      	str	r3, [sp, #40]	; 0x28
 8014038:	910f      	str	r1, [sp, #60]	; 0x3c
 801403a:	e75d      	b.n	8013ef8 <_strtod_l+0x6d0>
 801403c:	2300      	movs	r3, #0
 801403e:	930a      	str	r3, [sp, #40]	; 0x28
 8014040:	2301      	movs	r3, #1
 8014042:	930f      	str	r3, [sp, #60]	; 0x3c
 8014044:	e758      	b.n	8013ef8 <_strtod_l+0x6d0>
 8014046:	4632      	mov	r2, r6
 8014048:	991c      	ldr	r1, [sp, #112]	; 0x70
 801404a:	4648      	mov	r0, r9
 801404c:	f004 fea0 	bl	8018d90 <__lshift>
 8014050:	901c      	str	r0, [sp, #112]	; 0x70
 8014052:	2800      	cmp	r0, #0
 8014054:	f47f af7c 	bne.w	8013f50 <_strtod_l+0x728>
 8014058:	e604      	b.n	8013c64 <_strtod_l+0x43c>
 801405a:	bf00      	nop
 801405c:	0801cc38 	.word	0x0801cc38
 8014060:	fffffc02 	.word	0xfffffc02
 8014064:	465d      	mov	r5, fp
 8014066:	f040 8086 	bne.w	8014176 <_strtod_l+0x94e>
 801406a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801406c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014070:	b32a      	cbz	r2, 80140be <_strtod_l+0x896>
 8014072:	4aaf      	ldr	r2, [pc, #700]	; (8014330 <_strtod_l+0xb08>)
 8014074:	4293      	cmp	r3, r2
 8014076:	d153      	bne.n	8014120 <_strtod_l+0x8f8>
 8014078:	9b04      	ldr	r3, [sp, #16]
 801407a:	4650      	mov	r0, sl
 801407c:	b1d3      	cbz	r3, 80140b4 <_strtod_l+0x88c>
 801407e:	4aad      	ldr	r2, [pc, #692]	; (8014334 <_strtod_l+0xb0c>)
 8014080:	402a      	ands	r2, r5
 8014082:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014086:	f04f 31ff 	mov.w	r1, #4294967295
 801408a:	d816      	bhi.n	80140ba <_strtod_l+0x892>
 801408c:	0d12      	lsrs	r2, r2, #20
 801408e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014092:	fa01 f303 	lsl.w	r3, r1, r3
 8014096:	4298      	cmp	r0, r3
 8014098:	d142      	bne.n	8014120 <_strtod_l+0x8f8>
 801409a:	4ba7      	ldr	r3, [pc, #668]	; (8014338 <_strtod_l+0xb10>)
 801409c:	429d      	cmp	r5, r3
 801409e:	d102      	bne.n	80140a6 <_strtod_l+0x87e>
 80140a0:	3001      	adds	r0, #1
 80140a2:	f43f addf 	beq.w	8013c64 <_strtod_l+0x43c>
 80140a6:	4ba3      	ldr	r3, [pc, #652]	; (8014334 <_strtod_l+0xb0c>)
 80140a8:	402b      	ands	r3, r5
 80140aa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80140ae:	f04f 0a00 	mov.w	sl, #0
 80140b2:	e7a0      	b.n	8013ff6 <_strtod_l+0x7ce>
 80140b4:	f04f 33ff 	mov.w	r3, #4294967295
 80140b8:	e7ed      	b.n	8014096 <_strtod_l+0x86e>
 80140ba:	460b      	mov	r3, r1
 80140bc:	e7eb      	b.n	8014096 <_strtod_l+0x86e>
 80140be:	bb7b      	cbnz	r3, 8014120 <_strtod_l+0x8f8>
 80140c0:	f1ba 0f00 	cmp.w	sl, #0
 80140c4:	d12c      	bne.n	8014120 <_strtod_l+0x8f8>
 80140c6:	9904      	ldr	r1, [sp, #16]
 80140c8:	4a9a      	ldr	r2, [pc, #616]	; (8014334 <_strtod_l+0xb0c>)
 80140ca:	465b      	mov	r3, fp
 80140cc:	b1f1      	cbz	r1, 801410c <_strtod_l+0x8e4>
 80140ce:	ea02 010b 	and.w	r1, r2, fp
 80140d2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80140d6:	dc19      	bgt.n	801410c <_strtod_l+0x8e4>
 80140d8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80140dc:	f77f ae5b 	ble.w	8013d96 <_strtod_l+0x56e>
 80140e0:	4a96      	ldr	r2, [pc, #600]	; (801433c <_strtod_l+0xb14>)
 80140e2:	2300      	movs	r3, #0
 80140e4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80140e8:	4650      	mov	r0, sl
 80140ea:	4659      	mov	r1, fp
 80140ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80140f0:	f7f3 f804 	bl	80070fc <__aeabi_dmul>
 80140f4:	4682      	mov	sl, r0
 80140f6:	468b      	mov	fp, r1
 80140f8:	2900      	cmp	r1, #0
 80140fa:	f47f adbe 	bne.w	8013c7a <_strtod_l+0x452>
 80140fe:	2800      	cmp	r0, #0
 8014100:	f47f adbb 	bne.w	8013c7a <_strtod_l+0x452>
 8014104:	2322      	movs	r3, #34	; 0x22
 8014106:	f8c9 3000 	str.w	r3, [r9]
 801410a:	e5b6      	b.n	8013c7a <_strtod_l+0x452>
 801410c:	4013      	ands	r3, r2
 801410e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014112:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014116:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801411a:	f04f 3aff 	mov.w	sl, #4294967295
 801411e:	e76a      	b.n	8013ff6 <_strtod_l+0x7ce>
 8014120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014122:	b193      	cbz	r3, 801414a <_strtod_l+0x922>
 8014124:	422b      	tst	r3, r5
 8014126:	f43f af66 	beq.w	8013ff6 <_strtod_l+0x7ce>
 801412a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801412c:	9a04      	ldr	r2, [sp, #16]
 801412e:	4650      	mov	r0, sl
 8014130:	4659      	mov	r1, fp
 8014132:	b173      	cbz	r3, 8014152 <_strtod_l+0x92a>
 8014134:	f7ff fb5b 	bl	80137ee <sulp>
 8014138:	4602      	mov	r2, r0
 801413a:	460b      	mov	r3, r1
 801413c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014140:	f7f2 fe26 	bl	8006d90 <__adddf3>
 8014144:	4682      	mov	sl, r0
 8014146:	468b      	mov	fp, r1
 8014148:	e755      	b.n	8013ff6 <_strtod_l+0x7ce>
 801414a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801414c:	ea13 0f0a 	tst.w	r3, sl
 8014150:	e7e9      	b.n	8014126 <_strtod_l+0x8fe>
 8014152:	f7ff fb4c 	bl	80137ee <sulp>
 8014156:	4602      	mov	r2, r0
 8014158:	460b      	mov	r3, r1
 801415a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801415e:	f7f2 fe15 	bl	8006d8c <__aeabi_dsub>
 8014162:	2200      	movs	r2, #0
 8014164:	2300      	movs	r3, #0
 8014166:	4682      	mov	sl, r0
 8014168:	468b      	mov	fp, r1
 801416a:	f7f3 fa2f 	bl	80075cc <__aeabi_dcmpeq>
 801416e:	2800      	cmp	r0, #0
 8014170:	f47f ae11 	bne.w	8013d96 <_strtod_l+0x56e>
 8014174:	e73f      	b.n	8013ff6 <_strtod_l+0x7ce>
 8014176:	4641      	mov	r1, r8
 8014178:	4620      	mov	r0, r4
 801417a:	f004 ff9a 	bl	80190b2 <__ratio>
 801417e:	ec57 6b10 	vmov	r6, r7, d0
 8014182:	2200      	movs	r2, #0
 8014184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014188:	ee10 0a10 	vmov	r0, s0
 801418c:	4639      	mov	r1, r7
 801418e:	f7f3 fa31 	bl	80075f4 <__aeabi_dcmple>
 8014192:	2800      	cmp	r0, #0
 8014194:	d077      	beq.n	8014286 <_strtod_l+0xa5e>
 8014196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014198:	2b00      	cmp	r3, #0
 801419a:	d04a      	beq.n	8014232 <_strtod_l+0xa0a>
 801419c:	4b68      	ldr	r3, [pc, #416]	; (8014340 <_strtod_l+0xb18>)
 801419e:	2200      	movs	r2, #0
 80141a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80141a4:	4f66      	ldr	r7, [pc, #408]	; (8014340 <_strtod_l+0xb18>)
 80141a6:	2600      	movs	r6, #0
 80141a8:	4b62      	ldr	r3, [pc, #392]	; (8014334 <_strtod_l+0xb0c>)
 80141aa:	402b      	ands	r3, r5
 80141ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80141ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141b0:	4b64      	ldr	r3, [pc, #400]	; (8014344 <_strtod_l+0xb1c>)
 80141b2:	429a      	cmp	r2, r3
 80141b4:	f040 80ce 	bne.w	8014354 <_strtod_l+0xb2c>
 80141b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80141bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80141c0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80141c4:	ec4b ab10 	vmov	d0, sl, fp
 80141c8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80141cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80141d0:	f004 feaa 	bl	8018f28 <__ulp>
 80141d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80141d8:	ec53 2b10 	vmov	r2, r3, d0
 80141dc:	f7f2 ff8e 	bl	80070fc <__aeabi_dmul>
 80141e0:	4652      	mov	r2, sl
 80141e2:	465b      	mov	r3, fp
 80141e4:	f7f2 fdd4 	bl	8006d90 <__adddf3>
 80141e8:	460b      	mov	r3, r1
 80141ea:	4952      	ldr	r1, [pc, #328]	; (8014334 <_strtod_l+0xb0c>)
 80141ec:	4a56      	ldr	r2, [pc, #344]	; (8014348 <_strtod_l+0xb20>)
 80141ee:	4019      	ands	r1, r3
 80141f0:	4291      	cmp	r1, r2
 80141f2:	4682      	mov	sl, r0
 80141f4:	d95b      	bls.n	80142ae <_strtod_l+0xa86>
 80141f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80141fc:	4293      	cmp	r3, r2
 80141fe:	d103      	bne.n	8014208 <_strtod_l+0x9e0>
 8014200:	9b08      	ldr	r3, [sp, #32]
 8014202:	3301      	adds	r3, #1
 8014204:	f43f ad2e 	beq.w	8013c64 <_strtod_l+0x43c>
 8014208:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014338 <_strtod_l+0xb10>
 801420c:	f04f 3aff 	mov.w	sl, #4294967295
 8014210:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014212:	4648      	mov	r0, r9
 8014214:	f004 fc0d 	bl	8018a32 <_Bfree>
 8014218:	9905      	ldr	r1, [sp, #20]
 801421a:	4648      	mov	r0, r9
 801421c:	f004 fc09 	bl	8018a32 <_Bfree>
 8014220:	4641      	mov	r1, r8
 8014222:	4648      	mov	r0, r9
 8014224:	f004 fc05 	bl	8018a32 <_Bfree>
 8014228:	4621      	mov	r1, r4
 801422a:	4648      	mov	r0, r9
 801422c:	f004 fc01 	bl	8018a32 <_Bfree>
 8014230:	e619      	b.n	8013e66 <_strtod_l+0x63e>
 8014232:	f1ba 0f00 	cmp.w	sl, #0
 8014236:	d11a      	bne.n	801426e <_strtod_l+0xa46>
 8014238:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801423c:	b9eb      	cbnz	r3, 801427a <_strtod_l+0xa52>
 801423e:	2200      	movs	r2, #0
 8014240:	4b3f      	ldr	r3, [pc, #252]	; (8014340 <_strtod_l+0xb18>)
 8014242:	4630      	mov	r0, r6
 8014244:	4639      	mov	r1, r7
 8014246:	f7f3 f9cb 	bl	80075e0 <__aeabi_dcmplt>
 801424a:	b9c8      	cbnz	r0, 8014280 <_strtod_l+0xa58>
 801424c:	4630      	mov	r0, r6
 801424e:	4639      	mov	r1, r7
 8014250:	2200      	movs	r2, #0
 8014252:	4b3e      	ldr	r3, [pc, #248]	; (801434c <_strtod_l+0xb24>)
 8014254:	f7f2 ff52 	bl	80070fc <__aeabi_dmul>
 8014258:	4606      	mov	r6, r0
 801425a:	460f      	mov	r7, r1
 801425c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014260:	9618      	str	r6, [sp, #96]	; 0x60
 8014262:	9319      	str	r3, [sp, #100]	; 0x64
 8014264:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014268:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801426c:	e79c      	b.n	80141a8 <_strtod_l+0x980>
 801426e:	f1ba 0f01 	cmp.w	sl, #1
 8014272:	d102      	bne.n	801427a <_strtod_l+0xa52>
 8014274:	2d00      	cmp	r5, #0
 8014276:	f43f ad8e 	beq.w	8013d96 <_strtod_l+0x56e>
 801427a:	2200      	movs	r2, #0
 801427c:	4b34      	ldr	r3, [pc, #208]	; (8014350 <_strtod_l+0xb28>)
 801427e:	e78f      	b.n	80141a0 <_strtod_l+0x978>
 8014280:	2600      	movs	r6, #0
 8014282:	4f32      	ldr	r7, [pc, #200]	; (801434c <_strtod_l+0xb24>)
 8014284:	e7ea      	b.n	801425c <_strtod_l+0xa34>
 8014286:	4b31      	ldr	r3, [pc, #196]	; (801434c <_strtod_l+0xb24>)
 8014288:	4630      	mov	r0, r6
 801428a:	4639      	mov	r1, r7
 801428c:	2200      	movs	r2, #0
 801428e:	f7f2 ff35 	bl	80070fc <__aeabi_dmul>
 8014292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014294:	4606      	mov	r6, r0
 8014296:	460f      	mov	r7, r1
 8014298:	b933      	cbnz	r3, 80142a8 <_strtod_l+0xa80>
 801429a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801429e:	9010      	str	r0, [sp, #64]	; 0x40
 80142a0:	9311      	str	r3, [sp, #68]	; 0x44
 80142a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80142a6:	e7df      	b.n	8014268 <_strtod_l+0xa40>
 80142a8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80142ac:	e7f9      	b.n	80142a2 <_strtod_l+0xa7a>
 80142ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80142b2:	9b04      	ldr	r3, [sp, #16]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d1ab      	bne.n	8014210 <_strtod_l+0x9e8>
 80142b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80142bc:	0d1b      	lsrs	r3, r3, #20
 80142be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80142c0:	051b      	lsls	r3, r3, #20
 80142c2:	429a      	cmp	r2, r3
 80142c4:	465d      	mov	r5, fp
 80142c6:	d1a3      	bne.n	8014210 <_strtod_l+0x9e8>
 80142c8:	4639      	mov	r1, r7
 80142ca:	4630      	mov	r0, r6
 80142cc:	f7f3 f9c6 	bl	800765c <__aeabi_d2iz>
 80142d0:	f7f2 feaa 	bl	8007028 <__aeabi_i2d>
 80142d4:	460b      	mov	r3, r1
 80142d6:	4602      	mov	r2, r0
 80142d8:	4639      	mov	r1, r7
 80142da:	4630      	mov	r0, r6
 80142dc:	f7f2 fd56 	bl	8006d8c <__aeabi_dsub>
 80142e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142e2:	4606      	mov	r6, r0
 80142e4:	460f      	mov	r7, r1
 80142e6:	b933      	cbnz	r3, 80142f6 <_strtod_l+0xace>
 80142e8:	f1ba 0f00 	cmp.w	sl, #0
 80142ec:	d103      	bne.n	80142f6 <_strtod_l+0xace>
 80142ee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80142f2:	2d00      	cmp	r5, #0
 80142f4:	d06d      	beq.n	80143d2 <_strtod_l+0xbaa>
 80142f6:	a30a      	add	r3, pc, #40	; (adr r3, 8014320 <_strtod_l+0xaf8>)
 80142f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fc:	4630      	mov	r0, r6
 80142fe:	4639      	mov	r1, r7
 8014300:	f7f3 f96e 	bl	80075e0 <__aeabi_dcmplt>
 8014304:	2800      	cmp	r0, #0
 8014306:	f47f acb8 	bne.w	8013c7a <_strtod_l+0x452>
 801430a:	a307      	add	r3, pc, #28	; (adr r3, 8014328 <_strtod_l+0xb00>)
 801430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014310:	4630      	mov	r0, r6
 8014312:	4639      	mov	r1, r7
 8014314:	f7f3 f982 	bl	800761c <__aeabi_dcmpgt>
 8014318:	2800      	cmp	r0, #0
 801431a:	f43f af79 	beq.w	8014210 <_strtod_l+0x9e8>
 801431e:	e4ac      	b.n	8013c7a <_strtod_l+0x452>
 8014320:	94a03595 	.word	0x94a03595
 8014324:	3fdfffff 	.word	0x3fdfffff
 8014328:	35afe535 	.word	0x35afe535
 801432c:	3fe00000 	.word	0x3fe00000
 8014330:	000fffff 	.word	0x000fffff
 8014334:	7ff00000 	.word	0x7ff00000
 8014338:	7fefffff 	.word	0x7fefffff
 801433c:	39500000 	.word	0x39500000
 8014340:	3ff00000 	.word	0x3ff00000
 8014344:	7fe00000 	.word	0x7fe00000
 8014348:	7c9fffff 	.word	0x7c9fffff
 801434c:	3fe00000 	.word	0x3fe00000
 8014350:	bff00000 	.word	0xbff00000
 8014354:	9b04      	ldr	r3, [sp, #16]
 8014356:	b333      	cbz	r3, 80143a6 <_strtod_l+0xb7e>
 8014358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801435a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801435e:	d822      	bhi.n	80143a6 <_strtod_l+0xb7e>
 8014360:	a327      	add	r3, pc, #156	; (adr r3, 8014400 <_strtod_l+0xbd8>)
 8014362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014366:	4630      	mov	r0, r6
 8014368:	4639      	mov	r1, r7
 801436a:	f7f3 f943 	bl	80075f4 <__aeabi_dcmple>
 801436e:	b1a0      	cbz	r0, 801439a <_strtod_l+0xb72>
 8014370:	4639      	mov	r1, r7
 8014372:	4630      	mov	r0, r6
 8014374:	f7f3 f99a 	bl	80076ac <__aeabi_d2uiz>
 8014378:	2800      	cmp	r0, #0
 801437a:	bf08      	it	eq
 801437c:	2001      	moveq	r0, #1
 801437e:	f7f2 fe43 	bl	8007008 <__aeabi_ui2d>
 8014382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014384:	4606      	mov	r6, r0
 8014386:	460f      	mov	r7, r1
 8014388:	bb03      	cbnz	r3, 80143cc <_strtod_l+0xba4>
 801438a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801438e:	9012      	str	r0, [sp, #72]	; 0x48
 8014390:	9313      	str	r3, [sp, #76]	; 0x4c
 8014392:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014396:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801439a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801439c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801439e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80143a2:	1a9b      	subs	r3, r3, r2
 80143a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80143a6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80143aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80143ae:	f004 fdbb 	bl	8018f28 <__ulp>
 80143b2:	4650      	mov	r0, sl
 80143b4:	ec53 2b10 	vmov	r2, r3, d0
 80143b8:	4659      	mov	r1, fp
 80143ba:	f7f2 fe9f 	bl	80070fc <__aeabi_dmul>
 80143be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80143c2:	f7f2 fce5 	bl	8006d90 <__adddf3>
 80143c6:	4682      	mov	sl, r0
 80143c8:	468b      	mov	fp, r1
 80143ca:	e772      	b.n	80142b2 <_strtod_l+0xa8a>
 80143cc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80143d0:	e7df      	b.n	8014392 <_strtod_l+0xb6a>
 80143d2:	a30d      	add	r3, pc, #52	; (adr r3, 8014408 <_strtod_l+0xbe0>)
 80143d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d8:	f7f3 f902 	bl	80075e0 <__aeabi_dcmplt>
 80143dc:	e79c      	b.n	8014318 <_strtod_l+0xaf0>
 80143de:	2300      	movs	r3, #0
 80143e0:	930d      	str	r3, [sp, #52]	; 0x34
 80143e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80143e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143e6:	6013      	str	r3, [r2, #0]
 80143e8:	f7ff ba61 	b.w	80138ae <_strtod_l+0x86>
 80143ec:	2b65      	cmp	r3, #101	; 0x65
 80143ee:	f04f 0200 	mov.w	r2, #0
 80143f2:	f43f ab4e 	beq.w	8013a92 <_strtod_l+0x26a>
 80143f6:	2101      	movs	r1, #1
 80143f8:	4614      	mov	r4, r2
 80143fa:	9104      	str	r1, [sp, #16]
 80143fc:	f7ff bacb 	b.w	8013996 <_strtod_l+0x16e>
 8014400:	ffc00000 	.word	0xffc00000
 8014404:	41dfffff 	.word	0x41dfffff
 8014408:	94a03595 	.word	0x94a03595
 801440c:	3fcfffff 	.word	0x3fcfffff

08014410 <strtod>:
 8014410:	4b07      	ldr	r3, [pc, #28]	; (8014430 <strtod+0x20>)
 8014412:	4a08      	ldr	r2, [pc, #32]	; (8014434 <strtod+0x24>)
 8014414:	b410      	push	{r4}
 8014416:	681c      	ldr	r4, [r3, #0]
 8014418:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801441a:	2b00      	cmp	r3, #0
 801441c:	bf08      	it	eq
 801441e:	4613      	moveq	r3, r2
 8014420:	460a      	mov	r2, r1
 8014422:	4601      	mov	r1, r0
 8014424:	4620      	mov	r0, r4
 8014426:	f85d 4b04 	ldr.w	r4, [sp], #4
 801442a:	f7ff b9fd 	b.w	8013828 <_strtod_l>
 801442e:	bf00      	nop
 8014430:	20000404 	.word	0x20000404
 8014434:	20000c44 	.word	0x20000c44

08014438 <_strtol_l.isra.0>:
 8014438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801443c:	4680      	mov	r8, r0
 801443e:	4689      	mov	r9, r1
 8014440:	4692      	mov	sl, r2
 8014442:	461e      	mov	r6, r3
 8014444:	460f      	mov	r7, r1
 8014446:	463d      	mov	r5, r7
 8014448:	9808      	ldr	r0, [sp, #32]
 801444a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801444e:	f004 fa93 	bl	8018978 <__locale_ctype_ptr_l>
 8014452:	4420      	add	r0, r4
 8014454:	7843      	ldrb	r3, [r0, #1]
 8014456:	f013 0308 	ands.w	r3, r3, #8
 801445a:	d132      	bne.n	80144c2 <_strtol_l.isra.0+0x8a>
 801445c:	2c2d      	cmp	r4, #45	; 0x2d
 801445e:	d132      	bne.n	80144c6 <_strtol_l.isra.0+0x8e>
 8014460:	787c      	ldrb	r4, [r7, #1]
 8014462:	1cbd      	adds	r5, r7, #2
 8014464:	2201      	movs	r2, #1
 8014466:	2e00      	cmp	r6, #0
 8014468:	d05d      	beq.n	8014526 <_strtol_l.isra.0+0xee>
 801446a:	2e10      	cmp	r6, #16
 801446c:	d109      	bne.n	8014482 <_strtol_l.isra.0+0x4a>
 801446e:	2c30      	cmp	r4, #48	; 0x30
 8014470:	d107      	bne.n	8014482 <_strtol_l.isra.0+0x4a>
 8014472:	782b      	ldrb	r3, [r5, #0]
 8014474:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014478:	2b58      	cmp	r3, #88	; 0x58
 801447a:	d14f      	bne.n	801451c <_strtol_l.isra.0+0xe4>
 801447c:	786c      	ldrb	r4, [r5, #1]
 801447e:	2610      	movs	r6, #16
 8014480:	3502      	adds	r5, #2
 8014482:	2a00      	cmp	r2, #0
 8014484:	bf14      	ite	ne
 8014486:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801448a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801448e:	2700      	movs	r7, #0
 8014490:	fbb1 fcf6 	udiv	ip, r1, r6
 8014494:	4638      	mov	r0, r7
 8014496:	fb06 1e1c 	mls	lr, r6, ip, r1
 801449a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801449e:	2b09      	cmp	r3, #9
 80144a0:	d817      	bhi.n	80144d2 <_strtol_l.isra.0+0x9a>
 80144a2:	461c      	mov	r4, r3
 80144a4:	42a6      	cmp	r6, r4
 80144a6:	dd23      	ble.n	80144f0 <_strtol_l.isra.0+0xb8>
 80144a8:	1c7b      	adds	r3, r7, #1
 80144aa:	d007      	beq.n	80144bc <_strtol_l.isra.0+0x84>
 80144ac:	4584      	cmp	ip, r0
 80144ae:	d31c      	bcc.n	80144ea <_strtol_l.isra.0+0xb2>
 80144b0:	d101      	bne.n	80144b6 <_strtol_l.isra.0+0x7e>
 80144b2:	45a6      	cmp	lr, r4
 80144b4:	db19      	blt.n	80144ea <_strtol_l.isra.0+0xb2>
 80144b6:	fb00 4006 	mla	r0, r0, r6, r4
 80144ba:	2701      	movs	r7, #1
 80144bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144c0:	e7eb      	b.n	801449a <_strtol_l.isra.0+0x62>
 80144c2:	462f      	mov	r7, r5
 80144c4:	e7bf      	b.n	8014446 <_strtol_l.isra.0+0xe>
 80144c6:	2c2b      	cmp	r4, #43	; 0x2b
 80144c8:	bf04      	itt	eq
 80144ca:	1cbd      	addeq	r5, r7, #2
 80144cc:	787c      	ldrbeq	r4, [r7, #1]
 80144ce:	461a      	mov	r2, r3
 80144d0:	e7c9      	b.n	8014466 <_strtol_l.isra.0+0x2e>
 80144d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80144d6:	2b19      	cmp	r3, #25
 80144d8:	d801      	bhi.n	80144de <_strtol_l.isra.0+0xa6>
 80144da:	3c37      	subs	r4, #55	; 0x37
 80144dc:	e7e2      	b.n	80144a4 <_strtol_l.isra.0+0x6c>
 80144de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80144e2:	2b19      	cmp	r3, #25
 80144e4:	d804      	bhi.n	80144f0 <_strtol_l.isra.0+0xb8>
 80144e6:	3c57      	subs	r4, #87	; 0x57
 80144e8:	e7dc      	b.n	80144a4 <_strtol_l.isra.0+0x6c>
 80144ea:	f04f 37ff 	mov.w	r7, #4294967295
 80144ee:	e7e5      	b.n	80144bc <_strtol_l.isra.0+0x84>
 80144f0:	1c7b      	adds	r3, r7, #1
 80144f2:	d108      	bne.n	8014506 <_strtol_l.isra.0+0xce>
 80144f4:	2322      	movs	r3, #34	; 0x22
 80144f6:	f8c8 3000 	str.w	r3, [r8]
 80144fa:	4608      	mov	r0, r1
 80144fc:	f1ba 0f00 	cmp.w	sl, #0
 8014500:	d107      	bne.n	8014512 <_strtol_l.isra.0+0xda>
 8014502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014506:	b102      	cbz	r2, 801450a <_strtol_l.isra.0+0xd2>
 8014508:	4240      	negs	r0, r0
 801450a:	f1ba 0f00 	cmp.w	sl, #0
 801450e:	d0f8      	beq.n	8014502 <_strtol_l.isra.0+0xca>
 8014510:	b10f      	cbz	r7, 8014516 <_strtol_l.isra.0+0xde>
 8014512:	f105 39ff 	add.w	r9, r5, #4294967295
 8014516:	f8ca 9000 	str.w	r9, [sl]
 801451a:	e7f2      	b.n	8014502 <_strtol_l.isra.0+0xca>
 801451c:	2430      	movs	r4, #48	; 0x30
 801451e:	2e00      	cmp	r6, #0
 8014520:	d1af      	bne.n	8014482 <_strtol_l.isra.0+0x4a>
 8014522:	2608      	movs	r6, #8
 8014524:	e7ad      	b.n	8014482 <_strtol_l.isra.0+0x4a>
 8014526:	2c30      	cmp	r4, #48	; 0x30
 8014528:	d0a3      	beq.n	8014472 <_strtol_l.isra.0+0x3a>
 801452a:	260a      	movs	r6, #10
 801452c:	e7a9      	b.n	8014482 <_strtol_l.isra.0+0x4a>
	...

08014530 <strtol>:
 8014530:	4b08      	ldr	r3, [pc, #32]	; (8014554 <strtol+0x24>)
 8014532:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014534:	681c      	ldr	r4, [r3, #0]
 8014536:	4d08      	ldr	r5, [pc, #32]	; (8014558 <strtol+0x28>)
 8014538:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801453a:	2b00      	cmp	r3, #0
 801453c:	bf08      	it	eq
 801453e:	462b      	moveq	r3, r5
 8014540:	9300      	str	r3, [sp, #0]
 8014542:	4613      	mov	r3, r2
 8014544:	460a      	mov	r2, r1
 8014546:	4601      	mov	r1, r0
 8014548:	4620      	mov	r0, r4
 801454a:	f7ff ff75 	bl	8014438 <_strtol_l.isra.0>
 801454e:	b003      	add	sp, #12
 8014550:	bd30      	pop	{r4, r5, pc}
 8014552:	bf00      	nop
 8014554:	20000404 	.word	0x20000404
 8014558:	20000c44 	.word	0x20000c44

0801455c <_strtoll_l.isra.0>:
 801455c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014560:	b089      	sub	sp, #36	; 0x24
 8014562:	468a      	mov	sl, r1
 8014564:	9007      	str	r0, [sp, #28]
 8014566:	4693      	mov	fp, r2
 8014568:	461f      	mov	r7, r3
 801456a:	4688      	mov	r8, r1
 801456c:	4645      	mov	r5, r8
 801456e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014570:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014574:	f004 fa00 	bl	8018978 <__locale_ctype_ptr_l>
 8014578:	4420      	add	r0, r4
 801457a:	7846      	ldrb	r6, [r0, #1]
 801457c:	f016 0608 	ands.w	r6, r6, #8
 8014580:	d155      	bne.n	801462e <_strtoll_l.isra.0+0xd2>
 8014582:	2c2d      	cmp	r4, #45	; 0x2d
 8014584:	d155      	bne.n	8014632 <_strtoll_l.isra.0+0xd6>
 8014586:	f898 4001 	ldrb.w	r4, [r8, #1]
 801458a:	f108 0502 	add.w	r5, r8, #2
 801458e:	2601      	movs	r6, #1
 8014590:	2f00      	cmp	r7, #0
 8014592:	f000 8091 	beq.w	80146b8 <_strtoll_l.isra.0+0x15c>
 8014596:	2f10      	cmp	r7, #16
 8014598:	d10a      	bne.n	80145b0 <_strtoll_l.isra.0+0x54>
 801459a:	2c30      	cmp	r4, #48	; 0x30
 801459c:	d108      	bne.n	80145b0 <_strtoll_l.isra.0+0x54>
 801459e:	782b      	ldrb	r3, [r5, #0]
 80145a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80145a4:	2b58      	cmp	r3, #88	; 0x58
 80145a6:	f040 8081 	bne.w	80146ac <_strtoll_l.isra.0+0x150>
 80145aa:	786c      	ldrb	r4, [r5, #1]
 80145ac:	2710      	movs	r7, #16
 80145ae:	3502      	adds	r5, #2
 80145b0:	2e00      	cmp	r6, #0
 80145b2:	d145      	bne.n	8014640 <_strtoll_l.isra.0+0xe4>
 80145b4:	f04f 39ff 	mov.w	r9, #4294967295
 80145b8:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 80145bc:	463a      	mov	r2, r7
 80145be:	17fb      	asrs	r3, r7, #31
 80145c0:	4648      	mov	r0, r9
 80145c2:	4641      	mov	r1, r8
 80145c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80145c8:	f7f3 f890 	bl	80076ec <__aeabi_uldivmod>
 80145cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80145d0:	4696      	mov	lr, r2
 80145d2:	2100      	movs	r1, #0
 80145d4:	2200      	movs	r2, #0
 80145d6:	e9cd 1200 	strd	r1, r2, [sp]
 80145da:	2300      	movs	r3, #0
 80145dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80145e0:	f1bc 0f09 	cmp.w	ip, #9
 80145e4:	d831      	bhi.n	801464a <_strtoll_l.isra.0+0xee>
 80145e6:	4664      	mov	r4, ip
 80145e8:	42a7      	cmp	r7, r4
 80145ea:	dd3f      	ble.n	801466c <_strtoll_l.isra.0+0x110>
 80145ec:	1c59      	adds	r1, r3, #1
 80145ee:	d01b      	beq.n	8014628 <_strtoll_l.isra.0+0xcc>
 80145f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80145f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145f8:	4299      	cmp	r1, r3
 80145fa:	bf08      	it	eq
 80145fc:	4290      	cmpeq	r0, r2
 80145fe:	d332      	bcc.n	8014666 <_strtoll_l.isra.0+0x10a>
 8014600:	d101      	bne.n	8014606 <_strtoll_l.isra.0+0xaa>
 8014602:	45a6      	cmp	lr, r4
 8014604:	db2f      	blt.n	8014666 <_strtoll_l.isra.0+0x10a>
 8014606:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 801460a:	9800      	ldr	r0, [sp, #0]
 801460c:	434b      	muls	r3, r1
 801460e:	9903      	ldr	r1, [sp, #12]
 8014610:	fb00 3301 	mla	r3, r0, r1, r3
 8014614:	9902      	ldr	r1, [sp, #8]
 8014616:	fba1 0100 	umull	r0, r1, r1, r0
 801461a:	1902      	adds	r2, r0, r4
 801461c:	4419      	add	r1, r3
 801461e:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 8014622:	e9cd 2300 	strd	r2, r3, [sp]
 8014626:	2301      	movs	r3, #1
 8014628:	f815 4b01 	ldrb.w	r4, [r5], #1
 801462c:	e7d6      	b.n	80145dc <_strtoll_l.isra.0+0x80>
 801462e:	46a8      	mov	r8, r5
 8014630:	e79c      	b.n	801456c <_strtoll_l.isra.0+0x10>
 8014632:	2c2b      	cmp	r4, #43	; 0x2b
 8014634:	bf04      	itt	eq
 8014636:	f108 0502 	addeq.w	r5, r8, #2
 801463a:	f898 4001 	ldrbeq.w	r4, [r8, #1]
 801463e:	e7a7      	b.n	8014590 <_strtoll_l.isra.0+0x34>
 8014640:	f04f 0900 	mov.w	r9, #0
 8014644:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8014648:	e7b8      	b.n	80145bc <_strtoll_l.isra.0+0x60>
 801464a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801464e:	f1bc 0f19 	cmp.w	ip, #25
 8014652:	d801      	bhi.n	8014658 <_strtoll_l.isra.0+0xfc>
 8014654:	3c37      	subs	r4, #55	; 0x37
 8014656:	e7c7      	b.n	80145e8 <_strtoll_l.isra.0+0x8c>
 8014658:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801465c:	f1bc 0f19 	cmp.w	ip, #25
 8014660:	d804      	bhi.n	801466c <_strtoll_l.isra.0+0x110>
 8014662:	3c57      	subs	r4, #87	; 0x57
 8014664:	e7c0      	b.n	80145e8 <_strtoll_l.isra.0+0x8c>
 8014666:	f04f 33ff 	mov.w	r3, #4294967295
 801466a:	e7dd      	b.n	8014628 <_strtoll_l.isra.0+0xcc>
 801466c:	1c5a      	adds	r2, r3, #1
 801466e:	d10c      	bne.n	801468a <_strtoll_l.isra.0+0x12e>
 8014670:	9a07      	ldr	r2, [sp, #28]
 8014672:	2322      	movs	r3, #34	; 0x22
 8014674:	6013      	str	r3, [r2, #0]
 8014676:	e9cd 9800 	strd	r9, r8, [sp]
 801467a:	f1bb 0f00 	cmp.w	fp, #0
 801467e:	d110      	bne.n	80146a2 <_strtoll_l.isra.0+0x146>
 8014680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014684:	b009      	add	sp, #36	; 0x24
 8014686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801468a:	b136      	cbz	r6, 801469a <_strtoll_l.isra.0+0x13e>
 801468c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014690:	4249      	negs	r1, r1
 8014692:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 8014696:	e9cd 1200 	strd	r1, r2, [sp]
 801469a:	f1bb 0f00 	cmp.w	fp, #0
 801469e:	d0ef      	beq.n	8014680 <_strtoll_l.isra.0+0x124>
 80146a0:	b10b      	cbz	r3, 80146a6 <_strtoll_l.isra.0+0x14a>
 80146a2:	f105 3aff 	add.w	sl, r5, #4294967295
 80146a6:	f8cb a000 	str.w	sl, [fp]
 80146aa:	e7e9      	b.n	8014680 <_strtoll_l.isra.0+0x124>
 80146ac:	2430      	movs	r4, #48	; 0x30
 80146ae:	2f00      	cmp	r7, #0
 80146b0:	f47f af7e 	bne.w	80145b0 <_strtoll_l.isra.0+0x54>
 80146b4:	2708      	movs	r7, #8
 80146b6:	e77b      	b.n	80145b0 <_strtoll_l.isra.0+0x54>
 80146b8:	2c30      	cmp	r4, #48	; 0x30
 80146ba:	f43f af70 	beq.w	801459e <_strtoll_l.isra.0+0x42>
 80146be:	270a      	movs	r7, #10
 80146c0:	e776      	b.n	80145b0 <_strtoll_l.isra.0+0x54>
	...

080146c4 <strtoll>:
 80146c4:	4b08      	ldr	r3, [pc, #32]	; (80146e8 <strtoll+0x24>)
 80146c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80146c8:	681c      	ldr	r4, [r3, #0]
 80146ca:	4d08      	ldr	r5, [pc, #32]	; (80146ec <strtoll+0x28>)
 80146cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	bf08      	it	eq
 80146d2:	462b      	moveq	r3, r5
 80146d4:	9300      	str	r3, [sp, #0]
 80146d6:	4613      	mov	r3, r2
 80146d8:	460a      	mov	r2, r1
 80146da:	4601      	mov	r1, r0
 80146dc:	4620      	mov	r0, r4
 80146de:	f7ff ff3d 	bl	801455c <_strtoll_l.isra.0>
 80146e2:	b003      	add	sp, #12
 80146e4:	bd30      	pop	{r4, r5, pc}
 80146e6:	bf00      	nop
 80146e8:	20000404 	.word	0x20000404
 80146ec:	20000c44 	.word	0x20000c44

080146f0 <_svfprintf_r>:
 80146f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146f4:	b0d3      	sub	sp, #332	; 0x14c
 80146f6:	4688      	mov	r8, r1
 80146f8:	4693      	mov	fp, r2
 80146fa:	461e      	mov	r6, r3
 80146fc:	9003      	str	r0, [sp, #12]
 80146fe:	f004 f941 	bl	8018984 <_localeconv_r>
 8014702:	6803      	ldr	r3, [r0, #0]
 8014704:	9316      	str	r3, [sp, #88]	; 0x58
 8014706:	4618      	mov	r0, r3
 8014708:	f7f2 fb34 	bl	8006d74 <strlen>
 801470c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8014710:	900d      	str	r0, [sp, #52]	; 0x34
 8014712:	0618      	lsls	r0, r3, #24
 8014714:	d518      	bpl.n	8014748 <_svfprintf_r+0x58>
 8014716:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801471a:	b9ab      	cbnz	r3, 8014748 <_svfprintf_r+0x58>
 801471c:	2140      	movs	r1, #64	; 0x40
 801471e:	9803      	ldr	r0, [sp, #12]
 8014720:	f7fe face 	bl	8012cc0 <_malloc_r>
 8014724:	f8c8 0000 	str.w	r0, [r8]
 8014728:	f8c8 0010 	str.w	r0, [r8, #16]
 801472c:	b948      	cbnz	r0, 8014742 <_svfprintf_r+0x52>
 801472e:	9a03      	ldr	r2, [sp, #12]
 8014730:	230c      	movs	r3, #12
 8014732:	6013      	str	r3, [r2, #0]
 8014734:	f04f 33ff 	mov.w	r3, #4294967295
 8014738:	930e      	str	r3, [sp, #56]	; 0x38
 801473a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801473c:	b053      	add	sp, #332	; 0x14c
 801473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014742:	2340      	movs	r3, #64	; 0x40
 8014744:	f8c8 3014 	str.w	r3, [r8, #20]
 8014748:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8014a70 <_svfprintf_r+0x380>
 801474c:	2300      	movs	r3, #0
 801474e:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8014752:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014756:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 801475a:	ac29      	add	r4, sp, #164	; 0xa4
 801475c:	9426      	str	r4, [sp, #152]	; 0x98
 801475e:	9304      	str	r3, [sp, #16]
 8014760:	9309      	str	r3, [sp, #36]	; 0x24
 8014762:	9312      	str	r3, [sp, #72]	; 0x48
 8014764:	9319      	str	r3, [sp, #100]	; 0x64
 8014766:	930e      	str	r3, [sp, #56]	; 0x38
 8014768:	465d      	mov	r5, fp
 801476a:	462b      	mov	r3, r5
 801476c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014770:	b112      	cbz	r2, 8014778 <_svfprintf_r+0x88>
 8014772:	2a25      	cmp	r2, #37	; 0x25
 8014774:	f040 80e4 	bne.w	8014940 <_svfprintf_r+0x250>
 8014778:	ebb5 070b 	subs.w	r7, r5, fp
 801477c:	d00e      	beq.n	801479c <_svfprintf_r+0xac>
 801477e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014780:	443b      	add	r3, r7
 8014782:	9328      	str	r3, [sp, #160]	; 0xa0
 8014784:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014786:	3301      	adds	r3, #1
 8014788:	2b07      	cmp	r3, #7
 801478a:	e9c4 b700 	strd	fp, r7, [r4]
 801478e:	9327      	str	r3, [sp, #156]	; 0x9c
 8014790:	f300 80d8 	bgt.w	8014944 <_svfprintf_r+0x254>
 8014794:	3408      	adds	r4, #8
 8014796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014798:	443b      	add	r3, r7
 801479a:	930e      	str	r3, [sp, #56]	; 0x38
 801479c:	782b      	ldrb	r3, [r5, #0]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	f001 81b4 	beq.w	8015b0c <_svfprintf_r+0x141c>
 80147a4:	1c6b      	adds	r3, r5, #1
 80147a6:	930c      	str	r3, [sp, #48]	; 0x30
 80147a8:	2300      	movs	r3, #0
 80147aa:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80147ae:	f04f 35ff 	mov.w	r5, #4294967295
 80147b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80147b4:	469a      	mov	sl, r3
 80147b6:	270a      	movs	r7, #10
 80147b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	9306      	str	r3, [sp, #24]
 80147be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147c0:	3301      	adds	r3, #1
 80147c2:	930c      	str	r3, [sp, #48]	; 0x30
 80147c4:	9b06      	ldr	r3, [sp, #24]
 80147c6:	3b20      	subs	r3, #32
 80147c8:	2b5a      	cmp	r3, #90	; 0x5a
 80147ca:	f200 8624 	bhi.w	8015416 <_svfprintf_r+0xd26>
 80147ce:	a201      	add	r2, pc, #4	; (adr r2, 80147d4 <_svfprintf_r+0xe4>)
 80147d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147d4:	080149d7 	.word	0x080149d7
 80147d8:	08015417 	.word	0x08015417
 80147dc:	08015417 	.word	0x08015417
 80147e0:	080149e9 	.word	0x080149e9
 80147e4:	08015417 	.word	0x08015417
 80147e8:	08015417 	.word	0x08015417
 80147ec:	08015417 	.word	0x08015417
 80147f0:	0801499d 	.word	0x0801499d
 80147f4:	08015417 	.word	0x08015417
 80147f8:	08015417 	.word	0x08015417
 80147fc:	080149ef 	.word	0x080149ef
 8014800:	08014a07 	.word	0x08014a07
 8014804:	08015417 	.word	0x08015417
 8014808:	08014a01 	.word	0x08014a01
 801480c:	08014a0b 	.word	0x08014a0b
 8014810:	08015417 	.word	0x08015417
 8014814:	08014a3f 	.word	0x08014a3f
 8014818:	08014a45 	.word	0x08014a45
 801481c:	08014a45 	.word	0x08014a45
 8014820:	08014a45 	.word	0x08014a45
 8014824:	08014a45 	.word	0x08014a45
 8014828:	08014a45 	.word	0x08014a45
 801482c:	08014a45 	.word	0x08014a45
 8014830:	08014a45 	.word	0x08014a45
 8014834:	08014a45 	.word	0x08014a45
 8014838:	08014a45 	.word	0x08014a45
 801483c:	08015417 	.word	0x08015417
 8014840:	08015417 	.word	0x08015417
 8014844:	08015417 	.word	0x08015417
 8014848:	08015417 	.word	0x08015417
 801484c:	08015417 	.word	0x08015417
 8014850:	08015417 	.word	0x08015417
 8014854:	08015417 	.word	0x08015417
 8014858:	08014b47 	.word	0x08014b47
 801485c:	08015417 	.word	0x08015417
 8014860:	08014ab1 	.word	0x08014ab1
 8014864:	08014ad3 	.word	0x08014ad3
 8014868:	08014b47 	.word	0x08014b47
 801486c:	08014b47 	.word	0x08014b47
 8014870:	08014b47 	.word	0x08014b47
 8014874:	08015417 	.word	0x08015417
 8014878:	08015417 	.word	0x08015417
 801487c:	08015417 	.word	0x08015417
 8014880:	08015417 	.word	0x08015417
 8014884:	08014a65 	.word	0x08014a65
 8014888:	08015417 	.word	0x08015417
 801488c:	08015417 	.word	0x08015417
 8014890:	08015019 	.word	0x08015019
 8014894:	08015417 	.word	0x08015417
 8014898:	08015417 	.word	0x08015417
 801489c:	08015417 	.word	0x08015417
 80148a0:	080150a5 	.word	0x080150a5
 80148a4:	08015417 	.word	0x08015417
 80148a8:	08015287 	.word	0x08015287
 80148ac:	08015417 	.word	0x08015417
 80148b0:	08015417 	.word	0x08015417
 80148b4:	0801495d 	.word	0x0801495d
 80148b8:	08015417 	.word	0x08015417
 80148bc:	08015417 	.word	0x08015417
 80148c0:	08015417 	.word	0x08015417
 80148c4:	08015417 	.word	0x08015417
 80148c8:	08015417 	.word	0x08015417
 80148cc:	08015417 	.word	0x08015417
 80148d0:	08015417 	.word	0x08015417
 80148d4:	08015417 	.word	0x08015417
 80148d8:	08014b47 	.word	0x08014b47
 80148dc:	08015417 	.word	0x08015417
 80148e0:	08014ab1 	.word	0x08014ab1
 80148e4:	08014ad7 	.word	0x08014ad7
 80148e8:	08014b47 	.word	0x08014b47
 80148ec:	08014b47 	.word	0x08014b47
 80148f0:	08014b47 	.word	0x08014b47
 80148f4:	08014a7d 	.word	0x08014a7d
 80148f8:	08014ad7 	.word	0x08014ad7
 80148fc:	08014aa5 	.word	0x08014aa5
 8014900:	08015417 	.word	0x08015417
 8014904:	08014a97 	.word	0x08014a97
 8014908:	08015417 	.word	0x08015417
 801490c:	08014fd3 	.word	0x08014fd3
 8014910:	0801501d 	.word	0x0801501d
 8014914:	08015085 	.word	0x08015085
 8014918:	08014aa5 	.word	0x08014aa5
 801491c:	08015417 	.word	0x08015417
 8014920:	080150a5 	.word	0x080150a5
 8014924:	080147b9 	.word	0x080147b9
 8014928:	0801528b 	.word	0x0801528b
 801492c:	08015417 	.word	0x08015417
 8014930:	08015417 	.word	0x08015417
 8014934:	080152c9 	.word	0x080152c9
 8014938:	08015417 	.word	0x08015417
 801493c:	080147b9 	.word	0x080147b9
 8014940:	461d      	mov	r5, r3
 8014942:	e712      	b.n	801476a <_svfprintf_r+0x7a>
 8014944:	aa26      	add	r2, sp, #152	; 0x98
 8014946:	4641      	mov	r1, r8
 8014948:	9803      	ldr	r0, [sp, #12]
 801494a:	f004 fcb2 	bl	80192b2 <__ssprint_r>
 801494e:	2800      	cmp	r0, #0
 8014950:	f040 8166 	bne.w	8014c20 <_svfprintf_r+0x530>
 8014954:	ac29      	add	r4, sp, #164	; 0xa4
 8014956:	e71e      	b.n	8014796 <_svfprintf_r+0xa6>
 8014958:	461e      	mov	r6, r3
 801495a:	e72d      	b.n	80147b8 <_svfprintf_r+0xc8>
 801495c:	4b46      	ldr	r3, [pc, #280]	; (8014a78 <_svfprintf_r+0x388>)
 801495e:	9318      	str	r3, [sp, #96]	; 0x60
 8014960:	f01a 0f20 	tst.w	sl, #32
 8014964:	f000 84b3 	beq.w	80152ce <_svfprintf_r+0xbde>
 8014968:	3607      	adds	r6, #7
 801496a:	f026 0607 	bic.w	r6, r6, #7
 801496e:	f106 0308 	add.w	r3, r6, #8
 8014972:	e9d6 6700 	ldrd	r6, r7, [r6]
 8014976:	9308      	str	r3, [sp, #32]
 8014978:	f01a 0f01 	tst.w	sl, #1
 801497c:	d00a      	beq.n	8014994 <_svfprintf_r+0x2a4>
 801497e:	ea56 0307 	orrs.w	r3, r6, r7
 8014982:	d007      	beq.n	8014994 <_svfprintf_r+0x2a4>
 8014984:	2330      	movs	r3, #48	; 0x30
 8014986:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801498a:	9b06      	ldr	r3, [sp, #24]
 801498c:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8014990:	f04a 0a02 	orr.w	sl, sl, #2
 8014994:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8014998:	2302      	movs	r3, #2
 801499a:	e34d      	b.n	8015038 <_svfprintf_r+0x948>
 801499c:	9803      	ldr	r0, [sp, #12]
 801499e:	f003 fff1 	bl	8018984 <_localeconv_r>
 80149a2:	6843      	ldr	r3, [r0, #4]
 80149a4:	9319      	str	r3, [sp, #100]	; 0x64
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7f2 f9e4 	bl	8006d74 <strlen>
 80149ac:	9012      	str	r0, [sp, #72]	; 0x48
 80149ae:	9803      	ldr	r0, [sp, #12]
 80149b0:	f003 ffe8 	bl	8018984 <_localeconv_r>
 80149b4:	6883      	ldr	r3, [r0, #8]
 80149b6:	9309      	str	r3, [sp, #36]	; 0x24
 80149b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	f43f aefc 	beq.w	80147b8 <_svfprintf_r+0xc8>
 80149c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	f43f aef8 	beq.w	80147b8 <_svfprintf_r+0xc8>
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	f43f aef4 	beq.w	80147b8 <_svfprintf_r+0xc8>
 80149d0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80149d4:	e6f0      	b.n	80147b8 <_svfprintf_r+0xc8>
 80149d6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80149da:	2b00      	cmp	r3, #0
 80149dc:	f47f aeec 	bne.w	80147b8 <_svfprintf_r+0xc8>
 80149e0:	2320      	movs	r3, #32
 80149e2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80149e6:	e6e7      	b.n	80147b8 <_svfprintf_r+0xc8>
 80149e8:	f04a 0a01 	orr.w	sl, sl, #1
 80149ec:	e6e4      	b.n	80147b8 <_svfprintf_r+0xc8>
 80149ee:	6832      	ldr	r2, [r6, #0]
 80149f0:	920f      	str	r2, [sp, #60]	; 0x3c
 80149f2:	2a00      	cmp	r2, #0
 80149f4:	f106 0304 	add.w	r3, r6, #4
 80149f8:	daae      	bge.n	8014958 <_svfprintf_r+0x268>
 80149fa:	4252      	negs	r2, r2
 80149fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80149fe:	461e      	mov	r6, r3
 8014a00:	f04a 0a04 	orr.w	sl, sl, #4
 8014a04:	e6d8      	b.n	80147b8 <_svfprintf_r+0xc8>
 8014a06:	232b      	movs	r3, #43	; 0x2b
 8014a08:	e7eb      	b.n	80149e2 <_svfprintf_r+0x2f2>
 8014a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a0e:	7812      	ldrb	r2, [r2, #0]
 8014a10:	9206      	str	r2, [sp, #24]
 8014a12:	2a2a      	cmp	r2, #42	; 0x2a
 8014a14:	f103 0301 	add.w	r3, r3, #1
 8014a18:	d10f      	bne.n	8014a3a <_svfprintf_r+0x34a>
 8014a1a:	6835      	ldr	r5, [r6, #0]
 8014a1c:	930c      	str	r3, [sp, #48]	; 0x30
 8014a1e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8014a22:	3604      	adds	r6, #4
 8014a24:	e6c8      	b.n	80147b8 <_svfprintf_r+0xc8>
 8014a26:	fb07 2505 	mla	r5, r7, r5, r2
 8014a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a2e:	9206      	str	r2, [sp, #24]
 8014a30:	9a06      	ldr	r2, [sp, #24]
 8014a32:	3a30      	subs	r2, #48	; 0x30
 8014a34:	2a09      	cmp	r2, #9
 8014a36:	d9f6      	bls.n	8014a26 <_svfprintf_r+0x336>
 8014a38:	e6c3      	b.n	80147c2 <_svfprintf_r+0xd2>
 8014a3a:	2500      	movs	r5, #0
 8014a3c:	e7f8      	b.n	8014a30 <_svfprintf_r+0x340>
 8014a3e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8014a42:	e6b9      	b.n	80147b8 <_svfprintf_r+0xc8>
 8014a44:	2200      	movs	r2, #0
 8014a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a48:	920f      	str	r2, [sp, #60]	; 0x3c
 8014a4a:	9a06      	ldr	r2, [sp, #24]
 8014a4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014a4e:	3a30      	subs	r2, #48	; 0x30
 8014a50:	fb07 2201 	mla	r2, r7, r1, r2
 8014a54:	920f      	str	r2, [sp, #60]	; 0x3c
 8014a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a5a:	9206      	str	r2, [sp, #24]
 8014a5c:	3a30      	subs	r2, #48	; 0x30
 8014a5e:	2a09      	cmp	r2, #9
 8014a60:	d9f3      	bls.n	8014a4a <_svfprintf_r+0x35a>
 8014a62:	e6ae      	b.n	80147c2 <_svfprintf_r+0xd2>
 8014a64:	f04a 0a08 	orr.w	sl, sl, #8
 8014a68:	e6a6      	b.n	80147b8 <_svfprintf_r+0xc8>
 8014a6a:	bf00      	nop
 8014a6c:	f3af 8000 	nop.w
	...
 8014a78:	0801cc81 	.word	0x0801cc81
 8014a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	2b68      	cmp	r3, #104	; 0x68
 8014a82:	bf01      	itttt	eq
 8014a84:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 8014a86:	3301      	addeq	r3, #1
 8014a88:	930c      	streq	r3, [sp, #48]	; 0x30
 8014a8a:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8014a8e:	bf18      	it	ne
 8014a90:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8014a94:	e690      	b.n	80147b8 <_svfprintf_r+0xc8>
 8014a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	2b6c      	cmp	r3, #108	; 0x6c
 8014a9c:	d105      	bne.n	8014aaa <_svfprintf_r+0x3ba>
 8014a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	930c      	str	r3, [sp, #48]	; 0x30
 8014aa4:	f04a 0a20 	orr.w	sl, sl, #32
 8014aa8:	e686      	b.n	80147b8 <_svfprintf_r+0xc8>
 8014aaa:	f04a 0a10 	orr.w	sl, sl, #16
 8014aae:	e683      	b.n	80147b8 <_svfprintf_r+0xc8>
 8014ab0:	1d33      	adds	r3, r6, #4
 8014ab2:	9308      	str	r3, [sp, #32]
 8014ab4:	2000      	movs	r0, #0
 8014ab6:	6833      	ldr	r3, [r6, #0]
 8014ab8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8014abc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8014ac0:	4681      	mov	r9, r0
 8014ac2:	2501      	movs	r5, #1
 8014ac4:	9010      	str	r0, [sp, #64]	; 0x40
 8014ac6:	4607      	mov	r7, r0
 8014ac8:	9007      	str	r0, [sp, #28]
 8014aca:	4606      	mov	r6, r0
 8014acc:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8014ad0:	e301      	b.n	80150d6 <_svfprintf_r+0x9e6>
 8014ad2:	f04a 0a10 	orr.w	sl, sl, #16
 8014ad6:	f01a 0f20 	tst.w	sl, #32
 8014ada:	d021      	beq.n	8014b20 <_svfprintf_r+0x430>
 8014adc:	3607      	adds	r6, #7
 8014ade:	f026 0607 	bic.w	r6, r6, #7
 8014ae2:	f106 0308 	add.w	r3, r6, #8
 8014ae6:	e9d6 6700 	ldrd	r6, r7, [r6]
 8014aea:	9308      	str	r3, [sp, #32]
 8014aec:	2e00      	cmp	r6, #0
 8014aee:	f177 0300 	sbcs.w	r3, r7, #0
 8014af2:	da06      	bge.n	8014b02 <_svfprintf_r+0x412>
 8014af4:	4276      	negs	r6, r6
 8014af6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8014afa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8014afe:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8014b02:	1c6b      	adds	r3, r5, #1
 8014b04:	f040 83f6 	bne.w	80152f4 <_svfprintf_r+0xc04>
 8014b08:	2f00      	cmp	r7, #0
 8014b0a:	bf08      	it	eq
 8014b0c:	2e0a      	cmpeq	r6, #10
 8014b0e:	f080 8427 	bcs.w	8015360 <_svfprintf_r+0xc70>
 8014b12:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8014b16:	3630      	adds	r6, #48	; 0x30
 8014b18:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 8014b1c:	f000 bc0d 	b.w	801533a <_svfprintf_r+0xc4a>
 8014b20:	1d33      	adds	r3, r6, #4
 8014b22:	f01a 0f10 	tst.w	sl, #16
 8014b26:	9308      	str	r3, [sp, #32]
 8014b28:	d002      	beq.n	8014b30 <_svfprintf_r+0x440>
 8014b2a:	6836      	ldr	r6, [r6, #0]
 8014b2c:	17f7      	asrs	r7, r6, #31
 8014b2e:	e7dd      	b.n	8014aec <_svfprintf_r+0x3fc>
 8014b30:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8014b34:	6836      	ldr	r6, [r6, #0]
 8014b36:	d001      	beq.n	8014b3c <_svfprintf_r+0x44c>
 8014b38:	b236      	sxth	r6, r6
 8014b3a:	e7f7      	b.n	8014b2c <_svfprintf_r+0x43c>
 8014b3c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8014b40:	bf18      	it	ne
 8014b42:	b276      	sxtbne	r6, r6
 8014b44:	e7f2      	b.n	8014b2c <_svfprintf_r+0x43c>
 8014b46:	3607      	adds	r6, #7
 8014b48:	f026 0607 	bic.w	r6, r6, #7
 8014b4c:	ed96 7b00 	vldr	d7, [r6]
 8014b50:	f106 0308 	add.w	r3, r6, #8
 8014b54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014b58:	9308      	str	r3, [sp, #32]
 8014b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8014b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b64:	931b      	str	r3, [sp, #108]	; 0x6c
 8014b66:	f04f 32ff 	mov.w	r2, #4294967295
 8014b6a:	4bb2      	ldr	r3, [pc, #712]	; (8014e34 <_svfprintf_r+0x744>)
 8014b6c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8014b70:	f7f2 fd5e 	bl	8007630 <__aeabi_dcmpun>
 8014b74:	bb00      	cbnz	r0, 8014bb8 <_svfprintf_r+0x4c8>
 8014b76:	f04f 32ff 	mov.w	r2, #4294967295
 8014b7a:	4bae      	ldr	r3, [pc, #696]	; (8014e34 <_svfprintf_r+0x744>)
 8014b7c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8014b80:	f7f2 fd38 	bl	80075f4 <__aeabi_dcmple>
 8014b84:	b9c0      	cbnz	r0, 8014bb8 <_svfprintf_r+0x4c8>
 8014b86:	2200      	movs	r2, #0
 8014b88:	2300      	movs	r3, #0
 8014b8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b8e:	f7f2 fd27 	bl	80075e0 <__aeabi_dcmplt>
 8014b92:	b110      	cbz	r0, 8014b9a <_svfprintf_r+0x4aa>
 8014b94:	232d      	movs	r3, #45	; 0x2d
 8014b96:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8014b9a:	4aa7      	ldr	r2, [pc, #668]	; (8014e38 <_svfprintf_r+0x748>)
 8014b9c:	4ba7      	ldr	r3, [pc, #668]	; (8014e3c <_svfprintf_r+0x74c>)
 8014b9e:	9906      	ldr	r1, [sp, #24]
 8014ba0:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8014ba4:	2947      	cmp	r1, #71	; 0x47
 8014ba6:	bfcc      	ite	gt
 8014ba8:	4693      	movgt	fp, r2
 8014baa:	469b      	movle	fp, r3
 8014bac:	f04f 0900 	mov.w	r9, #0
 8014bb0:	2503      	movs	r5, #3
 8014bb2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8014bb6:	e3c6      	b.n	8015346 <_svfprintf_r+0xc56>
 8014bb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014bbc:	4610      	mov	r0, r2
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	f7f2 fd36 	bl	8007630 <__aeabi_dcmpun>
 8014bc4:	4681      	mov	r9, r0
 8014bc6:	b140      	cbz	r0, 8014bda <_svfprintf_r+0x4ea>
 8014bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bca:	4a9d      	ldr	r2, [pc, #628]	; (8014e40 <_svfprintf_r+0x750>)
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	bfbc      	itt	lt
 8014bd0:	232d      	movlt	r3, #45	; 0x2d
 8014bd2:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8014bd6:	4b9b      	ldr	r3, [pc, #620]	; (8014e44 <_svfprintf_r+0x754>)
 8014bd8:	e7e1      	b.n	8014b9e <_svfprintf_r+0x4ae>
 8014bda:	9b06      	ldr	r3, [sp, #24]
 8014bdc:	f023 0320 	bic.w	r3, r3, #32
 8014be0:	2b41      	cmp	r3, #65	; 0x41
 8014be2:	9307      	str	r3, [sp, #28]
 8014be4:	d125      	bne.n	8014c32 <_svfprintf_r+0x542>
 8014be6:	2330      	movs	r3, #48	; 0x30
 8014be8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8014bec:	9b06      	ldr	r3, [sp, #24]
 8014bee:	2b61      	cmp	r3, #97	; 0x61
 8014bf0:	bf14      	ite	ne
 8014bf2:	2358      	movne	r3, #88	; 0x58
 8014bf4:	2378      	moveq	r3, #120	; 0x78
 8014bf6:	2d63      	cmp	r5, #99	; 0x63
 8014bf8:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8014bfc:	f04a 0a02 	orr.w	sl, sl, #2
 8014c00:	f340 8108 	ble.w	8014e14 <_svfprintf_r+0x724>
 8014c04:	1c69      	adds	r1, r5, #1
 8014c06:	9803      	ldr	r0, [sp, #12]
 8014c08:	f7fe f85a 	bl	8012cc0 <_malloc_r>
 8014c0c:	4683      	mov	fp, r0
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	f040 8103 	bne.w	8014e1a <_svfprintf_r+0x72a>
 8014c14:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8014c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c1c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8014c20:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8014c24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c2a:	bf18      	it	ne
 8014c2c:	f04f 33ff 	movne.w	r3, #4294967295
 8014c30:	e582      	b.n	8014738 <_svfprintf_r+0x48>
 8014c32:	1c69      	adds	r1, r5, #1
 8014c34:	f000 80f3 	beq.w	8014e1e <_svfprintf_r+0x72e>
 8014c38:	9b07      	ldr	r3, [sp, #28]
 8014c3a:	2b47      	cmp	r3, #71	; 0x47
 8014c3c:	d102      	bne.n	8014c44 <_svfprintf_r+0x554>
 8014c3e:	2d00      	cmp	r5, #0
 8014c40:	f000 80ef 	beq.w	8014e22 <_svfprintf_r+0x732>
 8014c44:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8014c48:	9310      	str	r3, [sp, #64]	; 0x40
 8014c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f280 80eb 	bge.w	8014e28 <_svfprintf_r+0x738>
 8014c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c54:	9314      	str	r3, [sp, #80]	; 0x50
 8014c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c5c:	9315      	str	r3, [sp, #84]	; 0x54
 8014c5e:	232d      	movs	r3, #45	; 0x2d
 8014c60:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c62:	9b07      	ldr	r3, [sp, #28]
 8014c64:	2b41      	cmp	r3, #65	; 0x41
 8014c66:	f040 8105 	bne.w	8014e74 <_svfprintf_r+0x784>
 8014c6a:	a820      	add	r0, sp, #128	; 0x80
 8014c6c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8014c70:	f004 fad4 	bl	801921c <frexp>
 8014c74:	2200      	movs	r2, #0
 8014c76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014c7a:	ec51 0b10 	vmov	r0, r1, d0
 8014c7e:	f7f2 fa3d 	bl	80070fc <__aeabi_dmul>
 8014c82:	2200      	movs	r2, #0
 8014c84:	2300      	movs	r3, #0
 8014c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c8a:	f7f2 fc9f 	bl	80075cc <__aeabi_dcmpeq>
 8014c8e:	b108      	cbz	r0, 8014c94 <_svfprintf_r+0x5a4>
 8014c90:	2301      	movs	r3, #1
 8014c92:	9320      	str	r3, [sp, #128]	; 0x80
 8014c94:	4f6c      	ldr	r7, [pc, #432]	; (8014e48 <_svfprintf_r+0x758>)
 8014c96:	4b6d      	ldr	r3, [pc, #436]	; (8014e4c <_svfprintf_r+0x75c>)
 8014c98:	9a06      	ldr	r2, [sp, #24]
 8014c9a:	2a61      	cmp	r2, #97	; 0x61
 8014c9c:	bf08      	it	eq
 8014c9e:	461f      	moveq	r7, r3
 8014ca0:	9711      	str	r7, [sp, #68]	; 0x44
 8014ca2:	465e      	mov	r6, fp
 8014ca4:	1e6f      	subs	r7, r5, #1
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	4b69      	ldr	r3, [pc, #420]	; (8014e50 <_svfprintf_r+0x760>)
 8014caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014cae:	f7f2 fa25 	bl	80070fc <__aeabi_dmul>
 8014cb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014cb6:	f7f2 fcd1 	bl	800765c <__aeabi_d2iz>
 8014cba:	901c      	str	r0, [sp, #112]	; 0x70
 8014cbc:	f7f2 f9b4 	bl	8007028 <__aeabi_i2d>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	460b      	mov	r3, r1
 8014cc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014cc8:	f7f2 f860 	bl	8006d8c <__aeabi_dsub>
 8014ccc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cd0:	971d      	str	r7, [sp, #116]	; 0x74
 8014cd2:	5c9b      	ldrb	r3, [r3, r2]
 8014cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8014cd8:	1c7a      	adds	r2, r7, #1
 8014cda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014cde:	d006      	beq.n	8014cee <_svfprintf_r+0x5fe>
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	3f01      	subs	r7, #1
 8014ce6:	f7f2 fc71 	bl	80075cc <__aeabi_dcmpeq>
 8014cea:	2800      	cmp	r0, #0
 8014cec:	d0db      	beq.n	8014ca6 <_svfprintf_r+0x5b6>
 8014cee:	2200      	movs	r2, #0
 8014cf0:	4b58      	ldr	r3, [pc, #352]	; (8014e54 <_svfprintf_r+0x764>)
 8014cf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014cf6:	f7f2 fc91 	bl	800761c <__aeabi_dcmpgt>
 8014cfa:	b960      	cbnz	r0, 8014d16 <_svfprintf_r+0x626>
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	4b55      	ldr	r3, [pc, #340]	; (8014e54 <_svfprintf_r+0x764>)
 8014d00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d04:	f7f2 fc62 	bl	80075cc <__aeabi_dcmpeq>
 8014d08:	2800      	cmp	r0, #0
 8014d0a:	f000 80ae 	beq.w	8014e6a <_svfprintf_r+0x77a>
 8014d0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014d10:	07db      	lsls	r3, r3, #31
 8014d12:	f140 80aa 	bpl.w	8014e6a <_svfprintf_r+0x77a>
 8014d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d18:	9624      	str	r6, [sp, #144]	; 0x90
 8014d1a:	7bd9      	ldrb	r1, [r3, #15]
 8014d1c:	2030      	movs	r0, #48	; 0x30
 8014d1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014d20:	1e53      	subs	r3, r2, #1
 8014d22:	9324      	str	r3, [sp, #144]	; 0x90
 8014d24:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8014d28:	428b      	cmp	r3, r1
 8014d2a:	f000 8095 	beq.w	8014e58 <_svfprintf_r+0x768>
 8014d2e:	2b39      	cmp	r3, #57	; 0x39
 8014d30:	bf0b      	itete	eq
 8014d32:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8014d34:	3301      	addne	r3, #1
 8014d36:	7a9b      	ldrbeq	r3, [r3, #10]
 8014d38:	b2db      	uxtbne	r3, r3
 8014d3a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014d3e:	4633      	mov	r3, r6
 8014d40:	eba3 030b 	sub.w	r3, r3, fp
 8014d44:	9304      	str	r3, [sp, #16]
 8014d46:	9b07      	ldr	r3, [sp, #28]
 8014d48:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014d4a:	2b47      	cmp	r3, #71	; 0x47
 8014d4c:	f040 80d7 	bne.w	8014efe <_svfprintf_r+0x80e>
 8014d50:	1cf7      	adds	r7, r6, #3
 8014d52:	db02      	blt.n	8014d5a <_svfprintf_r+0x66a>
 8014d54:	42b5      	cmp	r5, r6
 8014d56:	f280 80fd 	bge.w	8014f54 <_svfprintf_r+0x864>
 8014d5a:	9b06      	ldr	r3, [sp, #24]
 8014d5c:	3b02      	subs	r3, #2
 8014d5e:	9306      	str	r3, [sp, #24]
 8014d60:	9906      	ldr	r1, [sp, #24]
 8014d62:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8014d66:	f021 0120 	bic.w	r1, r1, #32
 8014d6a:	2941      	cmp	r1, #65	; 0x41
 8014d6c:	bf08      	it	eq
 8014d6e:	320f      	addeq	r2, #15
 8014d70:	f106 33ff 	add.w	r3, r6, #4294967295
 8014d74:	bf06      	itte	eq
 8014d76:	b2d2      	uxtbeq	r2, r2
 8014d78:	2101      	moveq	r1, #1
 8014d7a:	2100      	movne	r1, #0
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	9320      	str	r3, [sp, #128]	; 0x80
 8014d80:	bfb8      	it	lt
 8014d82:	f1c6 0301 	rsblt	r3, r6, #1
 8014d86:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8014d8a:	bfb4      	ite	lt
 8014d8c:	222d      	movlt	r2, #45	; 0x2d
 8014d8e:	222b      	movge	r2, #43	; 0x2b
 8014d90:	2b09      	cmp	r3, #9
 8014d92:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8014d96:	f340 80c9 	ble.w	8014f2c <_svfprintf_r+0x83c>
 8014d9a:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8014d9e:	250a      	movs	r5, #10
 8014da0:	fb93 f0f5 	sdiv	r0, r3, r5
 8014da4:	fb05 3310 	mls	r3, r5, r0, r3
 8014da8:	3330      	adds	r3, #48	; 0x30
 8014daa:	2809      	cmp	r0, #9
 8014dac:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014db0:	f102 31ff 	add.w	r1, r2, #4294967295
 8014db4:	4603      	mov	r3, r0
 8014db6:	f300 80b2 	bgt.w	8014f1e <_svfprintf_r+0x82e>
 8014dba:	3330      	adds	r3, #48	; 0x30
 8014dbc:	f801 3c01 	strb.w	r3, [r1, #-1]
 8014dc0:	3a02      	subs	r2, #2
 8014dc2:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8014dc6:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8014dca:	4282      	cmp	r2, r0
 8014dcc:	4619      	mov	r1, r3
 8014dce:	f0c0 80a8 	bcc.w	8014f22 <_svfprintf_r+0x832>
 8014dd2:	9a04      	ldr	r2, [sp, #16]
 8014dd4:	ab22      	add	r3, sp, #136	; 0x88
 8014dd6:	1acb      	subs	r3, r1, r3
 8014dd8:	2a01      	cmp	r2, #1
 8014dda:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ddc:	eb03 0502 	add.w	r5, r3, r2
 8014de0:	dc02      	bgt.n	8014de8 <_svfprintf_r+0x6f8>
 8014de2:	f01a 0f01 	tst.w	sl, #1
 8014de6:	d001      	beq.n	8014dec <_svfprintf_r+0x6fc>
 8014de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014dea:	441d      	add	r5, r3
 8014dec:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8014df0:	2700      	movs	r7, #0
 8014df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014df6:	9310      	str	r3, [sp, #64]	; 0x40
 8014df8:	9707      	str	r7, [sp, #28]
 8014dfa:	463e      	mov	r6, r7
 8014dfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	f000 8315 	beq.w	801542e <_svfprintf_r+0xd3e>
 8014e04:	232d      	movs	r3, #45	; 0x2d
 8014e06:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8014e0a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8014e0e:	2300      	movs	r3, #0
 8014e10:	9310      	str	r3, [sp, #64]	; 0x40
 8014e12:	e160      	b.n	80150d6 <_svfprintf_r+0x9e6>
 8014e14:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8014e18:	e714      	b.n	8014c44 <_svfprintf_r+0x554>
 8014e1a:	4681      	mov	r9, r0
 8014e1c:	e712      	b.n	8014c44 <_svfprintf_r+0x554>
 8014e1e:	2506      	movs	r5, #6
 8014e20:	e710      	b.n	8014c44 <_svfprintf_r+0x554>
 8014e22:	46a9      	mov	r9, r5
 8014e24:	2501      	movs	r5, #1
 8014e26:	e70d      	b.n	8014c44 <_svfprintf_r+0x554>
 8014e28:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8014e32:	e715      	b.n	8014c60 <_svfprintf_r+0x570>
 8014e34:	7fefffff 	.word	0x7fefffff
 8014e38:	0801cc64 	.word	0x0801cc64
 8014e3c:	0801cc60 	.word	0x0801cc60
 8014e40:	0801cc6c 	.word	0x0801cc6c
 8014e44:	0801cc68 	.word	0x0801cc68
 8014e48:	0801cc81 	.word	0x0801cc81
 8014e4c:	0801cc70 	.word	0x0801cc70
 8014e50:	40300000 	.word	0x40300000
 8014e54:	3fe00000 	.word	0x3fe00000
 8014e58:	f802 0c01 	strb.w	r0, [r2, #-1]
 8014e5c:	e75f      	b.n	8014d1e <_svfprintf_r+0x62e>
 8014e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8014e62:	1af2      	subs	r2, r6, r3
 8014e64:	2a00      	cmp	r2, #0
 8014e66:	dafa      	bge.n	8014e5e <_svfprintf_r+0x76e>
 8014e68:	e76a      	b.n	8014d40 <_svfprintf_r+0x650>
 8014e6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014e6c:	4633      	mov	r3, r6
 8014e6e:	2130      	movs	r1, #48	; 0x30
 8014e70:	4416      	add	r6, r2
 8014e72:	e7f6      	b.n	8014e62 <_svfprintf_r+0x772>
 8014e74:	9b07      	ldr	r3, [sp, #28]
 8014e76:	2b46      	cmp	r3, #70	; 0x46
 8014e78:	d004      	beq.n	8014e84 <_svfprintf_r+0x794>
 8014e7a:	2b45      	cmp	r3, #69	; 0x45
 8014e7c:	d13a      	bne.n	8014ef4 <_svfprintf_r+0x804>
 8014e7e:	1c6e      	adds	r6, r5, #1
 8014e80:	2102      	movs	r1, #2
 8014e82:	e001      	b.n	8014e88 <_svfprintf_r+0x798>
 8014e84:	462e      	mov	r6, r5
 8014e86:	2103      	movs	r1, #3
 8014e88:	ab24      	add	r3, sp, #144	; 0x90
 8014e8a:	9301      	str	r3, [sp, #4]
 8014e8c:	ab21      	add	r3, sp, #132	; 0x84
 8014e8e:	9300      	str	r3, [sp, #0]
 8014e90:	4632      	mov	r2, r6
 8014e92:	ab20      	add	r3, sp, #128	; 0x80
 8014e94:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8014e98:	9803      	ldr	r0, [sp, #12]
 8014e9a:	f002 fa1d 	bl	80172d8 <_dtoa_r>
 8014e9e:	9b07      	ldr	r3, [sp, #28]
 8014ea0:	2b47      	cmp	r3, #71	; 0x47
 8014ea2:	4683      	mov	fp, r0
 8014ea4:	d102      	bne.n	8014eac <_svfprintf_r+0x7bc>
 8014ea6:	f01a 0f01 	tst.w	sl, #1
 8014eaa:	d026      	beq.n	8014efa <_svfprintf_r+0x80a>
 8014eac:	9b07      	ldr	r3, [sp, #28]
 8014eae:	2b46      	cmp	r3, #70	; 0x46
 8014eb0:	eb0b 0706 	add.w	r7, fp, r6
 8014eb4:	d10f      	bne.n	8014ed6 <_svfprintf_r+0x7e6>
 8014eb6:	f89b 3000 	ldrb.w	r3, [fp]
 8014eba:	2b30      	cmp	r3, #48	; 0x30
 8014ebc:	d109      	bne.n	8014ed2 <_svfprintf_r+0x7e2>
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8014ec6:	f7f2 fb81 	bl	80075cc <__aeabi_dcmpeq>
 8014eca:	b910      	cbnz	r0, 8014ed2 <_svfprintf_r+0x7e2>
 8014ecc:	f1c6 0601 	rsb	r6, r6, #1
 8014ed0:	9620      	str	r6, [sp, #128]	; 0x80
 8014ed2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014ed4:	441f      	add	r7, r3
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	2300      	movs	r3, #0
 8014eda:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8014ede:	f7f2 fb75 	bl	80075cc <__aeabi_dcmpeq>
 8014ee2:	b948      	cbnz	r0, 8014ef8 <_svfprintf_r+0x808>
 8014ee4:	2230      	movs	r2, #48	; 0x30
 8014ee6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014ee8:	429f      	cmp	r7, r3
 8014eea:	d906      	bls.n	8014efa <_svfprintf_r+0x80a>
 8014eec:	1c59      	adds	r1, r3, #1
 8014eee:	9124      	str	r1, [sp, #144]	; 0x90
 8014ef0:	701a      	strb	r2, [r3, #0]
 8014ef2:	e7f8      	b.n	8014ee6 <_svfprintf_r+0x7f6>
 8014ef4:	462e      	mov	r6, r5
 8014ef6:	e7c3      	b.n	8014e80 <_svfprintf_r+0x790>
 8014ef8:	9724      	str	r7, [sp, #144]	; 0x90
 8014efa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014efc:	e720      	b.n	8014d40 <_svfprintf_r+0x650>
 8014efe:	9b07      	ldr	r3, [sp, #28]
 8014f00:	2b46      	cmp	r3, #70	; 0x46
 8014f02:	f47f af2d 	bne.w	8014d60 <_svfprintf_r+0x670>
 8014f06:	2e00      	cmp	r6, #0
 8014f08:	dd1d      	ble.n	8014f46 <_svfprintf_r+0x856>
 8014f0a:	b915      	cbnz	r5, 8014f12 <_svfprintf_r+0x822>
 8014f0c:	f01a 0f01 	tst.w	sl, #1
 8014f10:	d034      	beq.n	8014f7c <_svfprintf_r+0x88c>
 8014f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f14:	18f3      	adds	r3, r6, r3
 8014f16:	441d      	add	r5, r3
 8014f18:	2366      	movs	r3, #102	; 0x66
 8014f1a:	9306      	str	r3, [sp, #24]
 8014f1c:	e033      	b.n	8014f86 <_svfprintf_r+0x896>
 8014f1e:	460a      	mov	r2, r1
 8014f20:	e73e      	b.n	8014da0 <_svfprintf_r+0x6b0>
 8014f22:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014f26:	f803 1b01 	strb.w	r1, [r3], #1
 8014f2a:	e74e      	b.n	8014dca <_svfprintf_r+0x6da>
 8014f2c:	b941      	cbnz	r1, 8014f40 <_svfprintf_r+0x850>
 8014f2e:	2230      	movs	r2, #48	; 0x30
 8014f30:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8014f34:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8014f38:	3330      	adds	r3, #48	; 0x30
 8014f3a:	1c51      	adds	r1, r2, #1
 8014f3c:	7013      	strb	r3, [r2, #0]
 8014f3e:	e748      	b.n	8014dd2 <_svfprintf_r+0x6e2>
 8014f40:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8014f44:	e7f8      	b.n	8014f38 <_svfprintf_r+0x848>
 8014f46:	b915      	cbnz	r5, 8014f4e <_svfprintf_r+0x85e>
 8014f48:	f01a 0f01 	tst.w	sl, #1
 8014f4c:	d018      	beq.n	8014f80 <_svfprintf_r+0x890>
 8014f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f50:	3301      	adds	r3, #1
 8014f52:	e7e0      	b.n	8014f16 <_svfprintf_r+0x826>
 8014f54:	9b04      	ldr	r3, [sp, #16]
 8014f56:	42b3      	cmp	r3, r6
 8014f58:	dc06      	bgt.n	8014f68 <_svfprintf_r+0x878>
 8014f5a:	f01a 0f01 	tst.w	sl, #1
 8014f5e:	d025      	beq.n	8014fac <_svfprintf_r+0x8bc>
 8014f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f62:	18f5      	adds	r5, r6, r3
 8014f64:	2367      	movs	r3, #103	; 0x67
 8014f66:	e7d8      	b.n	8014f1a <_svfprintf_r+0x82a>
 8014f68:	9b04      	ldr	r3, [sp, #16]
 8014f6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f6c:	2e00      	cmp	r6, #0
 8014f6e:	eb03 0502 	add.w	r5, r3, r2
 8014f72:	dcf7      	bgt.n	8014f64 <_svfprintf_r+0x874>
 8014f74:	f1c6 0301 	rsb	r3, r6, #1
 8014f78:	441d      	add	r5, r3
 8014f7a:	e7f3      	b.n	8014f64 <_svfprintf_r+0x874>
 8014f7c:	4635      	mov	r5, r6
 8014f7e:	e7cb      	b.n	8014f18 <_svfprintf_r+0x828>
 8014f80:	2366      	movs	r3, #102	; 0x66
 8014f82:	9306      	str	r3, [sp, #24]
 8014f84:	2501      	movs	r5, #1
 8014f86:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8014f8a:	9307      	str	r3, [sp, #28]
 8014f8c:	d01f      	beq.n	8014fce <_svfprintf_r+0x8de>
 8014f8e:	2700      	movs	r7, #0
 8014f90:	2e00      	cmp	r6, #0
 8014f92:	9707      	str	r7, [sp, #28]
 8014f94:	f77f af32 	ble.w	8014dfc <_svfprintf_r+0x70c>
 8014f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f9a:	781b      	ldrb	r3, [r3, #0]
 8014f9c:	2bff      	cmp	r3, #255	; 0xff
 8014f9e:	d107      	bne.n	8014fb0 <_svfprintf_r+0x8c0>
 8014fa0:	9b07      	ldr	r3, [sp, #28]
 8014fa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014fa4:	443b      	add	r3, r7
 8014fa6:	fb02 5503 	mla	r5, r2, r3, r5
 8014faa:	e727      	b.n	8014dfc <_svfprintf_r+0x70c>
 8014fac:	4635      	mov	r5, r6
 8014fae:	e7d9      	b.n	8014f64 <_svfprintf_r+0x874>
 8014fb0:	42b3      	cmp	r3, r6
 8014fb2:	daf5      	bge.n	8014fa0 <_svfprintf_r+0x8b0>
 8014fb4:	1af6      	subs	r6, r6, r3
 8014fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fb8:	785b      	ldrb	r3, [r3, #1]
 8014fba:	b133      	cbz	r3, 8014fca <_svfprintf_r+0x8da>
 8014fbc:	9b07      	ldr	r3, [sp, #28]
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	9307      	str	r3, [sp, #28]
 8014fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8014fc8:	e7e6      	b.n	8014f98 <_svfprintf_r+0x8a8>
 8014fca:	3701      	adds	r7, #1
 8014fcc:	e7e4      	b.n	8014f98 <_svfprintf_r+0x8a8>
 8014fce:	9f07      	ldr	r7, [sp, #28]
 8014fd0:	e714      	b.n	8014dfc <_svfprintf_r+0x70c>
 8014fd2:	4632      	mov	r2, r6
 8014fd4:	f01a 0f20 	tst.w	sl, #32
 8014fd8:	f852 3b04 	ldr.w	r3, [r2], #4
 8014fdc:	9208      	str	r2, [sp, #32]
 8014fde:	d009      	beq.n	8014ff4 <_svfprintf_r+0x904>
 8014fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fe2:	4610      	mov	r0, r2
 8014fe4:	17d1      	asrs	r1, r2, #31
 8014fe6:	e9c3 0100 	strd	r0, r1, [r3]
 8014fea:	9e08      	ldr	r6, [sp, #32]
 8014fec:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8014ff0:	f7ff bbba 	b.w	8014768 <_svfprintf_r+0x78>
 8014ff4:	f01a 0f10 	tst.w	sl, #16
 8014ff8:	d002      	beq.n	8015000 <_svfprintf_r+0x910>
 8014ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ffc:	601a      	str	r2, [r3, #0]
 8014ffe:	e7f4      	b.n	8014fea <_svfprintf_r+0x8fa>
 8015000:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8015004:	d002      	beq.n	801500c <_svfprintf_r+0x91c>
 8015006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015008:	801a      	strh	r2, [r3, #0]
 801500a:	e7ee      	b.n	8014fea <_svfprintf_r+0x8fa>
 801500c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8015010:	d0f3      	beq.n	8014ffa <_svfprintf_r+0x90a>
 8015012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015014:	701a      	strb	r2, [r3, #0]
 8015016:	e7e8      	b.n	8014fea <_svfprintf_r+0x8fa>
 8015018:	f04a 0a10 	orr.w	sl, sl, #16
 801501c:	f01a 0f20 	tst.w	sl, #32
 8015020:	d01e      	beq.n	8015060 <_svfprintf_r+0x970>
 8015022:	3607      	adds	r6, #7
 8015024:	f026 0607 	bic.w	r6, r6, #7
 8015028:	f106 0308 	add.w	r3, r6, #8
 801502c:	e9d6 6700 	ldrd	r6, r7, [r6]
 8015030:	9308      	str	r3, [sp, #32]
 8015032:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8015036:	2300      	movs	r3, #0
 8015038:	2200      	movs	r2, #0
 801503a:	1c69      	adds	r1, r5, #1
 801503c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8015040:	f000 815b 	beq.w	80152fa <_svfprintf_r+0xc0a>
 8015044:	4652      	mov	r2, sl
 8015046:	ea56 0107 	orrs.w	r1, r6, r7
 801504a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 801504e:	f040 8154 	bne.w	80152fa <_svfprintf_r+0xc0a>
 8015052:	2d00      	cmp	r5, #0
 8015054:	f000 81d5 	beq.w	8015402 <_svfprintf_r+0xd12>
 8015058:	2b01      	cmp	r3, #1
 801505a:	f040 8151 	bne.w	8015300 <_svfprintf_r+0xc10>
 801505e:	e558      	b.n	8014b12 <_svfprintf_r+0x422>
 8015060:	1d33      	adds	r3, r6, #4
 8015062:	f01a 0f10 	tst.w	sl, #16
 8015066:	9308      	str	r3, [sp, #32]
 8015068:	d001      	beq.n	801506e <_svfprintf_r+0x97e>
 801506a:	6836      	ldr	r6, [r6, #0]
 801506c:	e003      	b.n	8015076 <_svfprintf_r+0x986>
 801506e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8015072:	d002      	beq.n	801507a <_svfprintf_r+0x98a>
 8015074:	8836      	ldrh	r6, [r6, #0]
 8015076:	2700      	movs	r7, #0
 8015078:	e7db      	b.n	8015032 <_svfprintf_r+0x942>
 801507a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801507e:	d0f4      	beq.n	801506a <_svfprintf_r+0x97a>
 8015080:	7836      	ldrb	r6, [r6, #0]
 8015082:	e7f8      	b.n	8015076 <_svfprintf_r+0x986>
 8015084:	1d33      	adds	r3, r6, #4
 8015086:	9308      	str	r3, [sp, #32]
 8015088:	f647 0330 	movw	r3, #30768	; 0x7830
 801508c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8015090:	2278      	movs	r2, #120	; 0x78
 8015092:	4bb0      	ldr	r3, [pc, #704]	; (8015354 <_svfprintf_r+0xc64>)
 8015094:	9318      	str	r3, [sp, #96]	; 0x60
 8015096:	6836      	ldr	r6, [r6, #0]
 8015098:	9206      	str	r2, [sp, #24]
 801509a:	2700      	movs	r7, #0
 801509c:	f04a 0a02 	orr.w	sl, sl, #2
 80150a0:	2302      	movs	r3, #2
 80150a2:	e7c9      	b.n	8015038 <_svfprintf_r+0x948>
 80150a4:	1d33      	adds	r3, r6, #4
 80150a6:	f8d6 b000 	ldr.w	fp, [r6]
 80150aa:	9308      	str	r3, [sp, #32]
 80150ac:	2600      	movs	r6, #0
 80150ae:	1c68      	adds	r0, r5, #1
 80150b0:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 80150b4:	f000 80e1 	beq.w	801527a <_svfprintf_r+0xb8a>
 80150b8:	462a      	mov	r2, r5
 80150ba:	4631      	mov	r1, r6
 80150bc:	4658      	mov	r0, fp
 80150be:	f7f1 fdff 	bl	8006cc0 <memchr>
 80150c2:	4681      	mov	r9, r0
 80150c4:	2800      	cmp	r0, #0
 80150c6:	f43f ad74 	beq.w	8014bb2 <_svfprintf_r+0x4c2>
 80150ca:	eba0 050b 	sub.w	r5, r0, fp
 80150ce:	46b1      	mov	r9, r6
 80150d0:	9610      	str	r6, [sp, #64]	; 0x40
 80150d2:	4637      	mov	r7, r6
 80150d4:	9607      	str	r6, [sp, #28]
 80150d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150d8:	42ab      	cmp	r3, r5
 80150da:	bfb8      	it	lt
 80150dc:	462b      	movlt	r3, r5
 80150de:	9311      	str	r3, [sp, #68]	; 0x44
 80150e0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80150e4:	b113      	cbz	r3, 80150ec <_svfprintf_r+0x9fc>
 80150e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150e8:	3301      	adds	r3, #1
 80150ea:	9311      	str	r3, [sp, #68]	; 0x44
 80150ec:	f01a 0302 	ands.w	r3, sl, #2
 80150f0:	931c      	str	r3, [sp, #112]	; 0x70
 80150f2:	bf1e      	ittt	ne
 80150f4:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80150f6:	3302      	addne	r3, #2
 80150f8:	9311      	strne	r3, [sp, #68]	; 0x44
 80150fa:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80150fe:	931d      	str	r3, [sp, #116]	; 0x74
 8015100:	d122      	bne.n	8015148 <_svfprintf_r+0xa58>
 8015102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015104:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015106:	1a9b      	subs	r3, r3, r2
 8015108:	2b00      	cmp	r3, #0
 801510a:	9313      	str	r3, [sp, #76]	; 0x4c
 801510c:	dd1c      	ble.n	8015148 <_svfprintf_r+0xa58>
 801510e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015110:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8015114:	2810      	cmp	r0, #16
 8015116:	4890      	ldr	r0, [pc, #576]	; (8015358 <_svfprintf_r+0xc68>)
 8015118:	6020      	str	r0, [r4, #0]
 801511a:	f102 0201 	add.w	r2, r2, #1
 801511e:	f104 0108 	add.w	r1, r4, #8
 8015122:	f300 8188 	bgt.w	8015436 <_svfprintf_r+0xd46>
 8015126:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015128:	6060      	str	r0, [r4, #4]
 801512a:	4403      	add	r3, r0
 801512c:	2a07      	cmp	r2, #7
 801512e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015132:	f340 8195 	ble.w	8015460 <_svfprintf_r+0xd70>
 8015136:	aa26      	add	r2, sp, #152	; 0x98
 8015138:	4641      	mov	r1, r8
 801513a:	9803      	ldr	r0, [sp, #12]
 801513c:	f004 f8b9 	bl	80192b2 <__ssprint_r>
 8015140:	2800      	cmp	r0, #0
 8015142:	f040 84c1 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015146:	ac29      	add	r4, sp, #164	; 0xa4
 8015148:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801514c:	b173      	cbz	r3, 801516c <_svfprintf_r+0xa7c>
 801514e:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8015152:	6023      	str	r3, [r4, #0]
 8015154:	2301      	movs	r3, #1
 8015156:	6063      	str	r3, [r4, #4]
 8015158:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801515a:	3301      	adds	r3, #1
 801515c:	9328      	str	r3, [sp, #160]	; 0xa0
 801515e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015160:	3301      	adds	r3, #1
 8015162:	2b07      	cmp	r3, #7
 8015164:	9327      	str	r3, [sp, #156]	; 0x9c
 8015166:	f300 817d 	bgt.w	8015464 <_svfprintf_r+0xd74>
 801516a:	3408      	adds	r4, #8
 801516c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801516e:	b16b      	cbz	r3, 801518c <_svfprintf_r+0xa9c>
 8015170:	ab1f      	add	r3, sp, #124	; 0x7c
 8015172:	6023      	str	r3, [r4, #0]
 8015174:	2302      	movs	r3, #2
 8015176:	6063      	str	r3, [r4, #4]
 8015178:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801517a:	3302      	adds	r3, #2
 801517c:	9328      	str	r3, [sp, #160]	; 0xa0
 801517e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015180:	3301      	adds	r3, #1
 8015182:	2b07      	cmp	r3, #7
 8015184:	9327      	str	r3, [sp, #156]	; 0x9c
 8015186:	f300 8177 	bgt.w	8015478 <_svfprintf_r+0xd88>
 801518a:	3408      	adds	r4, #8
 801518c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801518e:	2b80      	cmp	r3, #128	; 0x80
 8015190:	d122      	bne.n	80151d8 <_svfprintf_r+0xae8>
 8015192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015194:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015196:	1a9b      	subs	r3, r3, r2
 8015198:	2b00      	cmp	r3, #0
 801519a:	9313      	str	r3, [sp, #76]	; 0x4c
 801519c:	dd1c      	ble.n	80151d8 <_svfprintf_r+0xae8>
 801519e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80151a0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80151a4:	2810      	cmp	r0, #16
 80151a6:	486d      	ldr	r0, [pc, #436]	; (801535c <_svfprintf_r+0xc6c>)
 80151a8:	6020      	str	r0, [r4, #0]
 80151aa:	f102 0201 	add.w	r2, r2, #1
 80151ae:	f104 0108 	add.w	r1, r4, #8
 80151b2:	f300 816b 	bgt.w	801548c <_svfprintf_r+0xd9c>
 80151b6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80151b8:	6060      	str	r0, [r4, #4]
 80151ba:	4403      	add	r3, r0
 80151bc:	2a07      	cmp	r2, #7
 80151be:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80151c2:	f340 8178 	ble.w	80154b6 <_svfprintf_r+0xdc6>
 80151c6:	aa26      	add	r2, sp, #152	; 0x98
 80151c8:	4641      	mov	r1, r8
 80151ca:	9803      	ldr	r0, [sp, #12]
 80151cc:	f004 f871 	bl	80192b2 <__ssprint_r>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	f040 8479 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80151d6:	ac29      	add	r4, sp, #164	; 0xa4
 80151d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151da:	1b5b      	subs	r3, r3, r5
 80151dc:	2b00      	cmp	r3, #0
 80151de:	9310      	str	r3, [sp, #64]	; 0x40
 80151e0:	dd1c      	ble.n	801521c <_svfprintf_r+0xb2c>
 80151e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80151e4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80151e8:	2810      	cmp	r0, #16
 80151ea:	485c      	ldr	r0, [pc, #368]	; (801535c <_svfprintf_r+0xc6c>)
 80151ec:	6020      	str	r0, [r4, #0]
 80151ee:	f102 0201 	add.w	r2, r2, #1
 80151f2:	f104 0108 	add.w	r1, r4, #8
 80151f6:	f300 8160 	bgt.w	80154ba <_svfprintf_r+0xdca>
 80151fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80151fc:	6060      	str	r0, [r4, #4]
 80151fe:	4403      	add	r3, r0
 8015200:	2a07      	cmp	r2, #7
 8015202:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015206:	f340 816d 	ble.w	80154e4 <_svfprintf_r+0xdf4>
 801520a:	aa26      	add	r2, sp, #152	; 0x98
 801520c:	4641      	mov	r1, r8
 801520e:	9803      	ldr	r0, [sp, #12]
 8015210:	f004 f84f 	bl	80192b2 <__ssprint_r>
 8015214:	2800      	cmp	r0, #0
 8015216:	f040 8457 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 801521a:	ac29      	add	r4, sp, #164	; 0xa4
 801521c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801521e:	9310      	str	r3, [sp, #64]	; 0x40
 8015220:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015224:	f040 8160 	bne.w	80154e8 <_svfprintf_r+0xdf8>
 8015228:	e9c4 b500 	strd	fp, r5, [r4]
 801522c:	441d      	add	r5, r3
 801522e:	9528      	str	r5, [sp, #160]	; 0xa0
 8015230:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015232:	3301      	adds	r3, #1
 8015234:	2b07      	cmp	r3, #7
 8015236:	9327      	str	r3, [sp, #156]	; 0x9c
 8015238:	f300 819c 	bgt.w	8015574 <_svfprintf_r+0xe84>
 801523c:	3408      	adds	r4, #8
 801523e:	f01a 0f04 	tst.w	sl, #4
 8015242:	f040 8423 	bne.w	8015a8c <_svfprintf_r+0x139c>
 8015246:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801524a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801524c:	428a      	cmp	r2, r1
 801524e:	bfac      	ite	ge
 8015250:	189b      	addge	r3, r3, r2
 8015252:	185b      	addlt	r3, r3, r1
 8015254:	930e      	str	r3, [sp, #56]	; 0x38
 8015256:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015258:	b13b      	cbz	r3, 801526a <_svfprintf_r+0xb7a>
 801525a:	aa26      	add	r2, sp, #152	; 0x98
 801525c:	4641      	mov	r1, r8
 801525e:	9803      	ldr	r0, [sp, #12]
 8015260:	f004 f827 	bl	80192b2 <__ssprint_r>
 8015264:	2800      	cmp	r0, #0
 8015266:	f040 842f 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 801526a:	2300      	movs	r3, #0
 801526c:	9327      	str	r3, [sp, #156]	; 0x9c
 801526e:	f1b9 0f00 	cmp.w	r9, #0
 8015272:	f040 8445 	bne.w	8015b00 <_svfprintf_r+0x1410>
 8015276:	ac29      	add	r4, sp, #164	; 0xa4
 8015278:	e6b7      	b.n	8014fea <_svfprintf_r+0x8fa>
 801527a:	4658      	mov	r0, fp
 801527c:	f7f1 fd7a 	bl	8006d74 <strlen>
 8015280:	46b1      	mov	r9, r6
 8015282:	4605      	mov	r5, r0
 8015284:	e495      	b.n	8014bb2 <_svfprintf_r+0x4c2>
 8015286:	f04a 0a10 	orr.w	sl, sl, #16
 801528a:	f01a 0f20 	tst.w	sl, #32
 801528e:	d009      	beq.n	80152a4 <_svfprintf_r+0xbb4>
 8015290:	3607      	adds	r6, #7
 8015292:	f026 0607 	bic.w	r6, r6, #7
 8015296:	f106 0308 	add.w	r3, r6, #8
 801529a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801529e:	9308      	str	r3, [sp, #32]
 80152a0:	2301      	movs	r3, #1
 80152a2:	e6c9      	b.n	8015038 <_svfprintf_r+0x948>
 80152a4:	1d33      	adds	r3, r6, #4
 80152a6:	f01a 0f10 	tst.w	sl, #16
 80152aa:	9308      	str	r3, [sp, #32]
 80152ac:	d001      	beq.n	80152b2 <_svfprintf_r+0xbc2>
 80152ae:	6836      	ldr	r6, [r6, #0]
 80152b0:	e003      	b.n	80152ba <_svfprintf_r+0xbca>
 80152b2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80152b6:	d002      	beq.n	80152be <_svfprintf_r+0xbce>
 80152b8:	8836      	ldrh	r6, [r6, #0]
 80152ba:	2700      	movs	r7, #0
 80152bc:	e7f0      	b.n	80152a0 <_svfprintf_r+0xbb0>
 80152be:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80152c2:	d0f4      	beq.n	80152ae <_svfprintf_r+0xbbe>
 80152c4:	7836      	ldrb	r6, [r6, #0]
 80152c6:	e7f8      	b.n	80152ba <_svfprintf_r+0xbca>
 80152c8:	4b22      	ldr	r3, [pc, #136]	; (8015354 <_svfprintf_r+0xc64>)
 80152ca:	f7ff bb48 	b.w	801495e <_svfprintf_r+0x26e>
 80152ce:	1d33      	adds	r3, r6, #4
 80152d0:	f01a 0f10 	tst.w	sl, #16
 80152d4:	9308      	str	r3, [sp, #32]
 80152d6:	d001      	beq.n	80152dc <_svfprintf_r+0xbec>
 80152d8:	6836      	ldr	r6, [r6, #0]
 80152da:	e003      	b.n	80152e4 <_svfprintf_r+0xbf4>
 80152dc:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80152e0:	d003      	beq.n	80152ea <_svfprintf_r+0xbfa>
 80152e2:	8836      	ldrh	r6, [r6, #0]
 80152e4:	2700      	movs	r7, #0
 80152e6:	f7ff bb47 	b.w	8014978 <_svfprintf_r+0x288>
 80152ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80152ee:	d0f3      	beq.n	80152d8 <_svfprintf_r+0xbe8>
 80152f0:	7836      	ldrb	r6, [r6, #0]
 80152f2:	e7f7      	b.n	80152e4 <_svfprintf_r+0xbf4>
 80152f4:	4652      	mov	r2, sl
 80152f6:	2301      	movs	r3, #1
 80152f8:	e6a5      	b.n	8015046 <_svfprintf_r+0x956>
 80152fa:	2b01      	cmp	r3, #1
 80152fc:	f43f ac04 	beq.w	8014b08 <_svfprintf_r+0x418>
 8015300:	2b02      	cmp	r3, #2
 8015302:	d06c      	beq.n	80153de <_svfprintf_r+0xcee>
 8015304:	ab52      	add	r3, sp, #328	; 0x148
 8015306:	08f1      	lsrs	r1, r6, #3
 8015308:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801530c:	08f8      	lsrs	r0, r7, #3
 801530e:	f006 0207 	and.w	r2, r6, #7
 8015312:	4607      	mov	r7, r0
 8015314:	460e      	mov	r6, r1
 8015316:	3230      	adds	r2, #48	; 0x30
 8015318:	ea56 0107 	orrs.w	r1, r6, r7
 801531c:	f103 3bff 	add.w	fp, r3, #4294967295
 8015320:	f803 2c01 	strb.w	r2, [r3, #-1]
 8015324:	d114      	bne.n	8015350 <_svfprintf_r+0xc60>
 8015326:	f01a 0f01 	tst.w	sl, #1
 801532a:	d006      	beq.n	801533a <_svfprintf_r+0xc4a>
 801532c:	2a30      	cmp	r2, #48	; 0x30
 801532e:	d004      	beq.n	801533a <_svfprintf_r+0xc4a>
 8015330:	2230      	movs	r2, #48	; 0x30
 8015332:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8015336:	f1a3 0b02 	sub.w	fp, r3, #2
 801533a:	ab52      	add	r3, sp, #328	; 0x148
 801533c:	9510      	str	r5, [sp, #64]	; 0x40
 801533e:	f04f 0900 	mov.w	r9, #0
 8015342:	eba3 050b 	sub.w	r5, r3, fp
 8015346:	464f      	mov	r7, r9
 8015348:	f8cd 901c 	str.w	r9, [sp, #28]
 801534c:	464e      	mov	r6, r9
 801534e:	e6c2      	b.n	80150d6 <_svfprintf_r+0x9e6>
 8015350:	465b      	mov	r3, fp
 8015352:	e7d8      	b.n	8015306 <_svfprintf_r+0xc16>
 8015354:	0801cc70 	.word	0x0801cc70
 8015358:	0801cc94 	.word	0x0801cc94
 801535c:	0801cca4 	.word	0x0801cca4
 8015360:	2300      	movs	r3, #0
 8015362:	9304      	str	r3, [sp, #16]
 8015364:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8015368:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801536c:	9307      	str	r3, [sp, #28]
 801536e:	220a      	movs	r2, #10
 8015370:	2300      	movs	r3, #0
 8015372:	4630      	mov	r0, r6
 8015374:	4639      	mov	r1, r7
 8015376:	f7f2 f9b9 	bl	80076ec <__aeabi_uldivmod>
 801537a:	9b04      	ldr	r3, [sp, #16]
 801537c:	3301      	adds	r3, #1
 801537e:	9304      	str	r3, [sp, #16]
 8015380:	9b07      	ldr	r3, [sp, #28]
 8015382:	3230      	adds	r2, #48	; 0x30
 8015384:	f109 3bff 	add.w	fp, r9, #4294967295
 8015388:	f809 2c01 	strb.w	r2, [r9, #-1]
 801538c:	b1d3      	cbz	r3, 80153c4 <_svfprintf_r+0xcd4>
 801538e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015390:	9a04      	ldr	r2, [sp, #16]
 8015392:	781b      	ldrb	r3, [r3, #0]
 8015394:	429a      	cmp	r2, r3
 8015396:	d115      	bne.n	80153c4 <_svfprintf_r+0xcd4>
 8015398:	2aff      	cmp	r2, #255	; 0xff
 801539a:	d013      	beq.n	80153c4 <_svfprintf_r+0xcd4>
 801539c:	2f00      	cmp	r7, #0
 801539e:	bf08      	it	eq
 80153a0:	2e0a      	cmpeq	r6, #10
 80153a2:	d30f      	bcc.n	80153c4 <_svfprintf_r+0xcd4>
 80153a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153a6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80153a8:	ebab 0b03 	sub.w	fp, fp, r3
 80153ac:	461a      	mov	r2, r3
 80153ae:	4658      	mov	r0, fp
 80153b0:	f003 ff6a 	bl	8019288 <strncpy>
 80153b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153b6:	785b      	ldrb	r3, [r3, #1]
 80153b8:	b11b      	cbz	r3, 80153c2 <_svfprintf_r+0xcd2>
 80153ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153bc:	3301      	adds	r3, #1
 80153be:	9309      	str	r3, [sp, #36]	; 0x24
 80153c0:	2300      	movs	r3, #0
 80153c2:	9304      	str	r3, [sp, #16]
 80153c4:	2300      	movs	r3, #0
 80153c6:	4630      	mov	r0, r6
 80153c8:	4639      	mov	r1, r7
 80153ca:	220a      	movs	r2, #10
 80153cc:	f7f2 f98e 	bl	80076ec <__aeabi_uldivmod>
 80153d0:	4606      	mov	r6, r0
 80153d2:	460f      	mov	r7, r1
 80153d4:	ea56 0307 	orrs.w	r3, r6, r7
 80153d8:	d0af      	beq.n	801533a <_svfprintf_r+0xc4a>
 80153da:	46d9      	mov	r9, fp
 80153dc:	e7c7      	b.n	801536e <_svfprintf_r+0xc7e>
 80153de:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 80153e2:	f006 030f 	and.w	r3, r6, #15
 80153e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80153e8:	5cd3      	ldrb	r3, [r2, r3]
 80153ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80153ee:	0933      	lsrs	r3, r6, #4
 80153f0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80153f4:	093a      	lsrs	r2, r7, #4
 80153f6:	461e      	mov	r6, r3
 80153f8:	4617      	mov	r7, r2
 80153fa:	ea56 0307 	orrs.w	r3, r6, r7
 80153fe:	d1f0      	bne.n	80153e2 <_svfprintf_r+0xcf2>
 8015400:	e79b      	b.n	801533a <_svfprintf_r+0xc4a>
 8015402:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8015406:	2b00      	cmp	r3, #0
 8015408:	d197      	bne.n	801533a <_svfprintf_r+0xc4a>
 801540a:	07d2      	lsls	r2, r2, #31
 801540c:	bf44      	itt	mi
 801540e:	2330      	movmi	r3, #48	; 0x30
 8015410:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8015414:	e791      	b.n	801533a <_svfprintf_r+0xc4a>
 8015416:	9b06      	ldr	r3, [sp, #24]
 8015418:	2b00      	cmp	r3, #0
 801541a:	f000 8377 	beq.w	8015b0c <_svfprintf_r+0x141c>
 801541e:	2000      	movs	r0, #0
 8015420:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8015424:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8015428:	9608      	str	r6, [sp, #32]
 801542a:	f7ff bb49 	b.w	8014ac0 <_svfprintf_r+0x3d0>
 801542e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8015432:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015434:	e4ec      	b.n	8014e10 <_svfprintf_r+0x720>
 8015436:	2010      	movs	r0, #16
 8015438:	4403      	add	r3, r0
 801543a:	2a07      	cmp	r2, #7
 801543c:	6060      	str	r0, [r4, #4]
 801543e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015442:	dd08      	ble.n	8015456 <_svfprintf_r+0xd66>
 8015444:	aa26      	add	r2, sp, #152	; 0x98
 8015446:	4641      	mov	r1, r8
 8015448:	9803      	ldr	r0, [sp, #12]
 801544a:	f003 ff32 	bl	80192b2 <__ssprint_r>
 801544e:	2800      	cmp	r0, #0
 8015450:	f040 833a 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015454:	a929      	add	r1, sp, #164	; 0xa4
 8015456:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015458:	3b10      	subs	r3, #16
 801545a:	9313      	str	r3, [sp, #76]	; 0x4c
 801545c:	460c      	mov	r4, r1
 801545e:	e656      	b.n	801510e <_svfprintf_r+0xa1e>
 8015460:	460c      	mov	r4, r1
 8015462:	e671      	b.n	8015148 <_svfprintf_r+0xa58>
 8015464:	aa26      	add	r2, sp, #152	; 0x98
 8015466:	4641      	mov	r1, r8
 8015468:	9803      	ldr	r0, [sp, #12]
 801546a:	f003 ff22 	bl	80192b2 <__ssprint_r>
 801546e:	2800      	cmp	r0, #0
 8015470:	f040 832a 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015474:	ac29      	add	r4, sp, #164	; 0xa4
 8015476:	e679      	b.n	801516c <_svfprintf_r+0xa7c>
 8015478:	aa26      	add	r2, sp, #152	; 0x98
 801547a:	4641      	mov	r1, r8
 801547c:	9803      	ldr	r0, [sp, #12]
 801547e:	f003 ff18 	bl	80192b2 <__ssprint_r>
 8015482:	2800      	cmp	r0, #0
 8015484:	f040 8320 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015488:	ac29      	add	r4, sp, #164	; 0xa4
 801548a:	e67f      	b.n	801518c <_svfprintf_r+0xa9c>
 801548c:	2010      	movs	r0, #16
 801548e:	4403      	add	r3, r0
 8015490:	2a07      	cmp	r2, #7
 8015492:	6060      	str	r0, [r4, #4]
 8015494:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015498:	dd08      	ble.n	80154ac <_svfprintf_r+0xdbc>
 801549a:	aa26      	add	r2, sp, #152	; 0x98
 801549c:	4641      	mov	r1, r8
 801549e:	9803      	ldr	r0, [sp, #12]
 80154a0:	f003 ff07 	bl	80192b2 <__ssprint_r>
 80154a4:	2800      	cmp	r0, #0
 80154a6:	f040 830f 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80154aa:	a929      	add	r1, sp, #164	; 0xa4
 80154ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154ae:	3b10      	subs	r3, #16
 80154b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80154b2:	460c      	mov	r4, r1
 80154b4:	e673      	b.n	801519e <_svfprintf_r+0xaae>
 80154b6:	460c      	mov	r4, r1
 80154b8:	e68e      	b.n	80151d8 <_svfprintf_r+0xae8>
 80154ba:	2010      	movs	r0, #16
 80154bc:	4403      	add	r3, r0
 80154be:	2a07      	cmp	r2, #7
 80154c0:	6060      	str	r0, [r4, #4]
 80154c2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80154c6:	dd08      	ble.n	80154da <_svfprintf_r+0xdea>
 80154c8:	aa26      	add	r2, sp, #152	; 0x98
 80154ca:	4641      	mov	r1, r8
 80154cc:	9803      	ldr	r0, [sp, #12]
 80154ce:	f003 fef0 	bl	80192b2 <__ssprint_r>
 80154d2:	2800      	cmp	r0, #0
 80154d4:	f040 82f8 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80154d8:	a929      	add	r1, sp, #164	; 0xa4
 80154da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154dc:	3b10      	subs	r3, #16
 80154de:	9310      	str	r3, [sp, #64]	; 0x40
 80154e0:	460c      	mov	r4, r1
 80154e2:	e67e      	b.n	80151e2 <_svfprintf_r+0xaf2>
 80154e4:	460c      	mov	r4, r1
 80154e6:	e699      	b.n	801521c <_svfprintf_r+0xb2c>
 80154e8:	9b06      	ldr	r3, [sp, #24]
 80154ea:	2b65      	cmp	r3, #101	; 0x65
 80154ec:	f340 8234 	ble.w	8015958 <_svfprintf_r+0x1268>
 80154f0:	2200      	movs	r2, #0
 80154f2:	2300      	movs	r3, #0
 80154f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80154f8:	f7f2 f868 	bl	80075cc <__aeabi_dcmpeq>
 80154fc:	2800      	cmp	r0, #0
 80154fe:	d069      	beq.n	80155d4 <_svfprintf_r+0xee4>
 8015500:	4b6e      	ldr	r3, [pc, #440]	; (80156bc <_svfprintf_r+0xfcc>)
 8015502:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015504:	6023      	str	r3, [r4, #0]
 8015506:	2301      	movs	r3, #1
 8015508:	441d      	add	r5, r3
 801550a:	6063      	str	r3, [r4, #4]
 801550c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801550e:	9528      	str	r5, [sp, #160]	; 0xa0
 8015510:	3301      	adds	r3, #1
 8015512:	2b07      	cmp	r3, #7
 8015514:	9327      	str	r3, [sp, #156]	; 0x9c
 8015516:	dc37      	bgt.n	8015588 <_svfprintf_r+0xe98>
 8015518:	3408      	adds	r4, #8
 801551a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801551c:	9a04      	ldr	r2, [sp, #16]
 801551e:	4293      	cmp	r3, r2
 8015520:	db03      	blt.n	801552a <_svfprintf_r+0xe3a>
 8015522:	f01a 0f01 	tst.w	sl, #1
 8015526:	f43f ae8a 	beq.w	801523e <_svfprintf_r+0xb4e>
 801552a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801552c:	6023      	str	r3, [r4, #0]
 801552e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015530:	6063      	str	r3, [r4, #4]
 8015532:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015534:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015536:	4413      	add	r3, r2
 8015538:	9328      	str	r3, [sp, #160]	; 0xa0
 801553a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801553c:	3301      	adds	r3, #1
 801553e:	2b07      	cmp	r3, #7
 8015540:	9327      	str	r3, [sp, #156]	; 0x9c
 8015542:	dc2b      	bgt.n	801559c <_svfprintf_r+0xeac>
 8015544:	3408      	adds	r4, #8
 8015546:	9b04      	ldr	r3, [sp, #16]
 8015548:	1e5d      	subs	r5, r3, #1
 801554a:	2d00      	cmp	r5, #0
 801554c:	f77f ae77 	ble.w	801523e <_svfprintf_r+0xb4e>
 8015550:	4e5b      	ldr	r6, [pc, #364]	; (80156c0 <_svfprintf_r+0xfd0>)
 8015552:	2710      	movs	r7, #16
 8015554:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8015558:	2d10      	cmp	r5, #16
 801555a:	f103 0301 	add.w	r3, r3, #1
 801555e:	f104 0108 	add.w	r1, r4, #8
 8015562:	6026      	str	r6, [r4, #0]
 8015564:	dc24      	bgt.n	80155b0 <_svfprintf_r+0xec0>
 8015566:	6065      	str	r5, [r4, #4]
 8015568:	2b07      	cmp	r3, #7
 801556a:	4415      	add	r5, r2
 801556c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8015570:	f340 8289 	ble.w	8015a86 <_svfprintf_r+0x1396>
 8015574:	aa26      	add	r2, sp, #152	; 0x98
 8015576:	4641      	mov	r1, r8
 8015578:	9803      	ldr	r0, [sp, #12]
 801557a:	f003 fe9a 	bl	80192b2 <__ssprint_r>
 801557e:	2800      	cmp	r0, #0
 8015580:	f040 82a2 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015584:	ac29      	add	r4, sp, #164	; 0xa4
 8015586:	e65a      	b.n	801523e <_svfprintf_r+0xb4e>
 8015588:	aa26      	add	r2, sp, #152	; 0x98
 801558a:	4641      	mov	r1, r8
 801558c:	9803      	ldr	r0, [sp, #12]
 801558e:	f003 fe90 	bl	80192b2 <__ssprint_r>
 8015592:	2800      	cmp	r0, #0
 8015594:	f040 8298 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015598:	ac29      	add	r4, sp, #164	; 0xa4
 801559a:	e7be      	b.n	801551a <_svfprintf_r+0xe2a>
 801559c:	aa26      	add	r2, sp, #152	; 0x98
 801559e:	4641      	mov	r1, r8
 80155a0:	9803      	ldr	r0, [sp, #12]
 80155a2:	f003 fe86 	bl	80192b2 <__ssprint_r>
 80155a6:	2800      	cmp	r0, #0
 80155a8:	f040 828e 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80155ac:	ac29      	add	r4, sp, #164	; 0xa4
 80155ae:	e7ca      	b.n	8015546 <_svfprintf_r+0xe56>
 80155b0:	3210      	adds	r2, #16
 80155b2:	2b07      	cmp	r3, #7
 80155b4:	6067      	str	r7, [r4, #4]
 80155b6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80155ba:	dd08      	ble.n	80155ce <_svfprintf_r+0xede>
 80155bc:	aa26      	add	r2, sp, #152	; 0x98
 80155be:	4641      	mov	r1, r8
 80155c0:	9803      	ldr	r0, [sp, #12]
 80155c2:	f003 fe76 	bl	80192b2 <__ssprint_r>
 80155c6:	2800      	cmp	r0, #0
 80155c8:	f040 827e 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80155cc:	a929      	add	r1, sp, #164	; 0xa4
 80155ce:	3d10      	subs	r5, #16
 80155d0:	460c      	mov	r4, r1
 80155d2:	e7bf      	b.n	8015554 <_svfprintf_r+0xe64>
 80155d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	dc74      	bgt.n	80156c4 <_svfprintf_r+0xfd4>
 80155da:	4b38      	ldr	r3, [pc, #224]	; (80156bc <_svfprintf_r+0xfcc>)
 80155dc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80155de:	6023      	str	r3, [r4, #0]
 80155e0:	2301      	movs	r3, #1
 80155e2:	441d      	add	r5, r3
 80155e4:	6063      	str	r3, [r4, #4]
 80155e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80155e8:	9528      	str	r5, [sp, #160]	; 0xa0
 80155ea:	3301      	adds	r3, #1
 80155ec:	2b07      	cmp	r3, #7
 80155ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80155f0:	dc3e      	bgt.n	8015670 <_svfprintf_r+0xf80>
 80155f2:	3408      	adds	r4, #8
 80155f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80155f6:	b92b      	cbnz	r3, 8015604 <_svfprintf_r+0xf14>
 80155f8:	9b04      	ldr	r3, [sp, #16]
 80155fa:	b91b      	cbnz	r3, 8015604 <_svfprintf_r+0xf14>
 80155fc:	f01a 0f01 	tst.w	sl, #1
 8015600:	f43f ae1d 	beq.w	801523e <_svfprintf_r+0xb4e>
 8015604:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015606:	6023      	str	r3, [r4, #0]
 8015608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801560a:	6063      	str	r3, [r4, #4]
 801560c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801560e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015610:	4413      	add	r3, r2
 8015612:	9328      	str	r3, [sp, #160]	; 0xa0
 8015614:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015616:	3301      	adds	r3, #1
 8015618:	2b07      	cmp	r3, #7
 801561a:	9327      	str	r3, [sp, #156]	; 0x9c
 801561c:	dc32      	bgt.n	8015684 <_svfprintf_r+0xf94>
 801561e:	3408      	adds	r4, #8
 8015620:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8015622:	2d00      	cmp	r5, #0
 8015624:	da1b      	bge.n	801565e <_svfprintf_r+0xf6e>
 8015626:	4e26      	ldr	r6, [pc, #152]	; (80156c0 <_svfprintf_r+0xfd0>)
 8015628:	426d      	negs	r5, r5
 801562a:	4623      	mov	r3, r4
 801562c:	2710      	movs	r7, #16
 801562e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8015632:	2d10      	cmp	r5, #16
 8015634:	f102 0201 	add.w	r2, r2, #1
 8015638:	f104 0408 	add.w	r4, r4, #8
 801563c:	601e      	str	r6, [r3, #0]
 801563e:	dc2b      	bgt.n	8015698 <_svfprintf_r+0xfa8>
 8015640:	605d      	str	r5, [r3, #4]
 8015642:	2a07      	cmp	r2, #7
 8015644:	440d      	add	r5, r1
 8015646:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801564a:	dd08      	ble.n	801565e <_svfprintf_r+0xf6e>
 801564c:	aa26      	add	r2, sp, #152	; 0x98
 801564e:	4641      	mov	r1, r8
 8015650:	9803      	ldr	r0, [sp, #12]
 8015652:	f003 fe2e 	bl	80192b2 <__ssprint_r>
 8015656:	2800      	cmp	r0, #0
 8015658:	f040 8236 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 801565c:	ac29      	add	r4, sp, #164	; 0xa4
 801565e:	9b04      	ldr	r3, [sp, #16]
 8015660:	6063      	str	r3, [r4, #4]
 8015662:	9a04      	ldr	r2, [sp, #16]
 8015664:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015666:	f8c4 b000 	str.w	fp, [r4]
 801566a:	4413      	add	r3, r2
 801566c:	9328      	str	r3, [sp, #160]	; 0xa0
 801566e:	e5df      	b.n	8015230 <_svfprintf_r+0xb40>
 8015670:	aa26      	add	r2, sp, #152	; 0x98
 8015672:	4641      	mov	r1, r8
 8015674:	9803      	ldr	r0, [sp, #12]
 8015676:	f003 fe1c 	bl	80192b2 <__ssprint_r>
 801567a:	2800      	cmp	r0, #0
 801567c:	f040 8224 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015680:	ac29      	add	r4, sp, #164	; 0xa4
 8015682:	e7b7      	b.n	80155f4 <_svfprintf_r+0xf04>
 8015684:	aa26      	add	r2, sp, #152	; 0x98
 8015686:	4641      	mov	r1, r8
 8015688:	9803      	ldr	r0, [sp, #12]
 801568a:	f003 fe12 	bl	80192b2 <__ssprint_r>
 801568e:	2800      	cmp	r0, #0
 8015690:	f040 821a 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015694:	ac29      	add	r4, sp, #164	; 0xa4
 8015696:	e7c3      	b.n	8015620 <_svfprintf_r+0xf30>
 8015698:	3110      	adds	r1, #16
 801569a:	2a07      	cmp	r2, #7
 801569c:	605f      	str	r7, [r3, #4]
 801569e:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 80156a2:	dd08      	ble.n	80156b6 <_svfprintf_r+0xfc6>
 80156a4:	aa26      	add	r2, sp, #152	; 0x98
 80156a6:	4641      	mov	r1, r8
 80156a8:	9803      	ldr	r0, [sp, #12]
 80156aa:	f003 fe02 	bl	80192b2 <__ssprint_r>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	f040 820a 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80156b4:	ac29      	add	r4, sp, #164	; 0xa4
 80156b6:	3d10      	subs	r5, #16
 80156b8:	4623      	mov	r3, r4
 80156ba:	e7b8      	b.n	801562e <_svfprintf_r+0xf3e>
 80156bc:	0801cc92 	.word	0x0801cc92
 80156c0:	0801cca4 	.word	0x0801cca4
 80156c4:	9b04      	ldr	r3, [sp, #16]
 80156c6:	42b3      	cmp	r3, r6
 80156c8:	bfa8      	it	ge
 80156ca:	4633      	movge	r3, r6
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	461d      	mov	r5, r3
 80156d0:	dd0b      	ble.n	80156ea <_svfprintf_r+0xffa>
 80156d2:	e9c4 b300 	strd	fp, r3, [r4]
 80156d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80156d8:	442b      	add	r3, r5
 80156da:	9328      	str	r3, [sp, #160]	; 0xa0
 80156dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80156de:	3301      	adds	r3, #1
 80156e0:	2b07      	cmp	r3, #7
 80156e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80156e4:	f300 8086 	bgt.w	80157f4 <_svfprintf_r+0x1104>
 80156e8:	3408      	adds	r4, #8
 80156ea:	2d00      	cmp	r5, #0
 80156ec:	bfac      	ite	ge
 80156ee:	1b75      	subge	r5, r6, r5
 80156f0:	4635      	movlt	r5, r6
 80156f2:	2d00      	cmp	r5, #0
 80156f4:	dd19      	ble.n	801572a <_svfprintf_r+0x103a>
 80156f6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80156fa:	4896      	ldr	r0, [pc, #600]	; (8015954 <_svfprintf_r+0x1264>)
 80156fc:	6020      	str	r0, [r4, #0]
 80156fe:	2d10      	cmp	r5, #16
 8015700:	f103 0301 	add.w	r3, r3, #1
 8015704:	f104 0108 	add.w	r1, r4, #8
 8015708:	dc7e      	bgt.n	8015808 <_svfprintf_r+0x1118>
 801570a:	6065      	str	r5, [r4, #4]
 801570c:	2b07      	cmp	r3, #7
 801570e:	4415      	add	r5, r2
 8015710:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8015714:	f340 808b 	ble.w	801582e <_svfprintf_r+0x113e>
 8015718:	aa26      	add	r2, sp, #152	; 0x98
 801571a:	4641      	mov	r1, r8
 801571c:	9803      	ldr	r0, [sp, #12]
 801571e:	f003 fdc8 	bl	80192b2 <__ssprint_r>
 8015722:	2800      	cmp	r0, #0
 8015724:	f040 81d0 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015728:	ac29      	add	r4, sp, #164	; 0xa4
 801572a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 801572e:	445e      	add	r6, fp
 8015730:	d009      	beq.n	8015746 <_svfprintf_r+0x1056>
 8015732:	9b07      	ldr	r3, [sp, #28]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d17c      	bne.n	8015832 <_svfprintf_r+0x1142>
 8015738:	2f00      	cmp	r7, #0
 801573a:	d17c      	bne.n	8015836 <_svfprintf_r+0x1146>
 801573c:	9b04      	ldr	r3, [sp, #16]
 801573e:	445b      	add	r3, fp
 8015740:	429e      	cmp	r6, r3
 8015742:	bf28      	it	cs
 8015744:	461e      	movcs	r6, r3
 8015746:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015748:	9a04      	ldr	r2, [sp, #16]
 801574a:	4293      	cmp	r3, r2
 801574c:	db02      	blt.n	8015754 <_svfprintf_r+0x1064>
 801574e:	f01a 0f01 	tst.w	sl, #1
 8015752:	d00e      	beq.n	8015772 <_svfprintf_r+0x1082>
 8015754:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015756:	6023      	str	r3, [r4, #0]
 8015758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801575a:	6063      	str	r3, [r4, #4]
 801575c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801575e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015760:	4413      	add	r3, r2
 8015762:	9328      	str	r3, [sp, #160]	; 0xa0
 8015764:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015766:	3301      	adds	r3, #1
 8015768:	2b07      	cmp	r3, #7
 801576a:	9327      	str	r3, [sp, #156]	; 0x9c
 801576c:	f300 80dd 	bgt.w	801592a <_svfprintf_r+0x123a>
 8015770:	3408      	adds	r4, #8
 8015772:	9b04      	ldr	r3, [sp, #16]
 8015774:	9a04      	ldr	r2, [sp, #16]
 8015776:	eb0b 0503 	add.w	r5, fp, r3
 801577a:	1bab      	subs	r3, r5, r6
 801577c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801577e:	1b55      	subs	r5, r2, r5
 8015780:	429d      	cmp	r5, r3
 8015782:	bfa8      	it	ge
 8015784:	461d      	movge	r5, r3
 8015786:	2d00      	cmp	r5, #0
 8015788:	dd0b      	ble.n	80157a2 <_svfprintf_r+0x10b2>
 801578a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801578c:	442b      	add	r3, r5
 801578e:	9328      	str	r3, [sp, #160]	; 0xa0
 8015790:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015792:	3301      	adds	r3, #1
 8015794:	2b07      	cmp	r3, #7
 8015796:	e9c4 6500 	strd	r6, r5, [r4]
 801579a:	9327      	str	r3, [sp, #156]	; 0x9c
 801579c:	f300 80cf 	bgt.w	801593e <_svfprintf_r+0x124e>
 80157a0:	3408      	adds	r4, #8
 80157a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157a4:	9a04      	ldr	r2, [sp, #16]
 80157a6:	2d00      	cmp	r5, #0
 80157a8:	eba2 0303 	sub.w	r3, r2, r3
 80157ac:	bfac      	ite	ge
 80157ae:	1b5d      	subge	r5, r3, r5
 80157b0:	461d      	movlt	r5, r3
 80157b2:	2d00      	cmp	r5, #0
 80157b4:	f77f ad43 	ble.w	801523e <_svfprintf_r+0xb4e>
 80157b8:	4e66      	ldr	r6, [pc, #408]	; (8015954 <_svfprintf_r+0x1264>)
 80157ba:	2710      	movs	r7, #16
 80157bc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80157c0:	2d10      	cmp	r5, #16
 80157c2:	f103 0301 	add.w	r3, r3, #1
 80157c6:	f104 0108 	add.w	r1, r4, #8
 80157ca:	6026      	str	r6, [r4, #0]
 80157cc:	f77f aecb 	ble.w	8015566 <_svfprintf_r+0xe76>
 80157d0:	3210      	adds	r2, #16
 80157d2:	2b07      	cmp	r3, #7
 80157d4:	6067      	str	r7, [r4, #4]
 80157d6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80157da:	dd08      	ble.n	80157ee <_svfprintf_r+0x10fe>
 80157dc:	aa26      	add	r2, sp, #152	; 0x98
 80157de:	4641      	mov	r1, r8
 80157e0:	9803      	ldr	r0, [sp, #12]
 80157e2:	f003 fd66 	bl	80192b2 <__ssprint_r>
 80157e6:	2800      	cmp	r0, #0
 80157e8:	f040 816e 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80157ec:	a929      	add	r1, sp, #164	; 0xa4
 80157ee:	3d10      	subs	r5, #16
 80157f0:	460c      	mov	r4, r1
 80157f2:	e7e3      	b.n	80157bc <_svfprintf_r+0x10cc>
 80157f4:	aa26      	add	r2, sp, #152	; 0x98
 80157f6:	4641      	mov	r1, r8
 80157f8:	9803      	ldr	r0, [sp, #12]
 80157fa:	f003 fd5a 	bl	80192b2 <__ssprint_r>
 80157fe:	2800      	cmp	r0, #0
 8015800:	f040 8162 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015804:	ac29      	add	r4, sp, #164	; 0xa4
 8015806:	e770      	b.n	80156ea <_svfprintf_r+0xffa>
 8015808:	2010      	movs	r0, #16
 801580a:	4402      	add	r2, r0
 801580c:	2b07      	cmp	r3, #7
 801580e:	6060      	str	r0, [r4, #4]
 8015810:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015814:	dd08      	ble.n	8015828 <_svfprintf_r+0x1138>
 8015816:	aa26      	add	r2, sp, #152	; 0x98
 8015818:	4641      	mov	r1, r8
 801581a:	9803      	ldr	r0, [sp, #12]
 801581c:	f003 fd49 	bl	80192b2 <__ssprint_r>
 8015820:	2800      	cmp	r0, #0
 8015822:	f040 8151 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015826:	a929      	add	r1, sp, #164	; 0xa4
 8015828:	3d10      	subs	r5, #16
 801582a:	460c      	mov	r4, r1
 801582c:	e763      	b.n	80156f6 <_svfprintf_r+0x1006>
 801582e:	460c      	mov	r4, r1
 8015830:	e77b      	b.n	801572a <_svfprintf_r+0x103a>
 8015832:	2f00      	cmp	r7, #0
 8015834:	d049      	beq.n	80158ca <_svfprintf_r+0x11da>
 8015836:	3f01      	subs	r7, #1
 8015838:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801583a:	6023      	str	r3, [r4, #0]
 801583c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801583e:	6063      	str	r3, [r4, #4]
 8015840:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015842:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015844:	4413      	add	r3, r2
 8015846:	9328      	str	r3, [sp, #160]	; 0xa0
 8015848:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801584a:	3301      	adds	r3, #1
 801584c:	2b07      	cmp	r3, #7
 801584e:	9327      	str	r3, [sp, #156]	; 0x9c
 8015850:	dc42      	bgt.n	80158d8 <_svfprintf_r+0x11e8>
 8015852:	3408      	adds	r4, #8
 8015854:	9b04      	ldr	r3, [sp, #16]
 8015856:	445b      	add	r3, fp
 8015858:	1b9a      	subs	r2, r3, r6
 801585a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	4293      	cmp	r3, r2
 8015860:	bfa8      	it	ge
 8015862:	4613      	movge	r3, r2
 8015864:	2b00      	cmp	r3, #0
 8015866:	461d      	mov	r5, r3
 8015868:	dd0a      	ble.n	8015880 <_svfprintf_r+0x1190>
 801586a:	e9c4 6300 	strd	r6, r3, [r4]
 801586e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015870:	442b      	add	r3, r5
 8015872:	9328      	str	r3, [sp, #160]	; 0xa0
 8015874:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015876:	3301      	adds	r3, #1
 8015878:	2b07      	cmp	r3, #7
 801587a:	9327      	str	r3, [sp, #156]	; 0x9c
 801587c:	dc36      	bgt.n	80158ec <_svfprintf_r+0x11fc>
 801587e:	3408      	adds	r4, #8
 8015880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	2d00      	cmp	r5, #0
 8015886:	bfac      	ite	ge
 8015888:	1b5d      	subge	r5, r3, r5
 801588a:	461d      	movlt	r5, r3
 801588c:	2d00      	cmp	r5, #0
 801588e:	dd18      	ble.n	80158c2 <_svfprintf_r+0x11d2>
 8015890:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8015894:	482f      	ldr	r0, [pc, #188]	; (8015954 <_svfprintf_r+0x1264>)
 8015896:	6020      	str	r0, [r4, #0]
 8015898:	2d10      	cmp	r5, #16
 801589a:	f102 0201 	add.w	r2, r2, #1
 801589e:	f104 0108 	add.w	r1, r4, #8
 80158a2:	dc2d      	bgt.n	8015900 <_svfprintf_r+0x1210>
 80158a4:	442b      	add	r3, r5
 80158a6:	2a07      	cmp	r2, #7
 80158a8:	6065      	str	r5, [r4, #4]
 80158aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80158ae:	dd3a      	ble.n	8015926 <_svfprintf_r+0x1236>
 80158b0:	aa26      	add	r2, sp, #152	; 0x98
 80158b2:	4641      	mov	r1, r8
 80158b4:	9803      	ldr	r0, [sp, #12]
 80158b6:	f003 fcfc 	bl	80192b2 <__ssprint_r>
 80158ba:	2800      	cmp	r0, #0
 80158bc:	f040 8104 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80158c0:	ac29      	add	r4, sp, #164	; 0xa4
 80158c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	441e      	add	r6, r3
 80158c8:	e733      	b.n	8015732 <_svfprintf_r+0x1042>
 80158ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158cc:	3b01      	subs	r3, #1
 80158ce:	9309      	str	r3, [sp, #36]	; 0x24
 80158d0:	9b07      	ldr	r3, [sp, #28]
 80158d2:	3b01      	subs	r3, #1
 80158d4:	9307      	str	r3, [sp, #28]
 80158d6:	e7af      	b.n	8015838 <_svfprintf_r+0x1148>
 80158d8:	aa26      	add	r2, sp, #152	; 0x98
 80158da:	4641      	mov	r1, r8
 80158dc:	9803      	ldr	r0, [sp, #12]
 80158de:	f003 fce8 	bl	80192b2 <__ssprint_r>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	f040 80f0 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80158e8:	ac29      	add	r4, sp, #164	; 0xa4
 80158ea:	e7b3      	b.n	8015854 <_svfprintf_r+0x1164>
 80158ec:	aa26      	add	r2, sp, #152	; 0x98
 80158ee:	4641      	mov	r1, r8
 80158f0:	9803      	ldr	r0, [sp, #12]
 80158f2:	f003 fcde 	bl	80192b2 <__ssprint_r>
 80158f6:	2800      	cmp	r0, #0
 80158f8:	f040 80e6 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 80158fc:	ac29      	add	r4, sp, #164	; 0xa4
 80158fe:	e7bf      	b.n	8015880 <_svfprintf_r+0x1190>
 8015900:	2010      	movs	r0, #16
 8015902:	4403      	add	r3, r0
 8015904:	2a07      	cmp	r2, #7
 8015906:	6060      	str	r0, [r4, #4]
 8015908:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801590c:	dd08      	ble.n	8015920 <_svfprintf_r+0x1230>
 801590e:	aa26      	add	r2, sp, #152	; 0x98
 8015910:	4641      	mov	r1, r8
 8015912:	9803      	ldr	r0, [sp, #12]
 8015914:	f003 fccd 	bl	80192b2 <__ssprint_r>
 8015918:	2800      	cmp	r0, #0
 801591a:	f040 80d5 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 801591e:	a929      	add	r1, sp, #164	; 0xa4
 8015920:	3d10      	subs	r5, #16
 8015922:	460c      	mov	r4, r1
 8015924:	e7b4      	b.n	8015890 <_svfprintf_r+0x11a0>
 8015926:	460c      	mov	r4, r1
 8015928:	e7cb      	b.n	80158c2 <_svfprintf_r+0x11d2>
 801592a:	aa26      	add	r2, sp, #152	; 0x98
 801592c:	4641      	mov	r1, r8
 801592e:	9803      	ldr	r0, [sp, #12]
 8015930:	f003 fcbf 	bl	80192b2 <__ssprint_r>
 8015934:	2800      	cmp	r0, #0
 8015936:	f040 80c7 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 801593a:	ac29      	add	r4, sp, #164	; 0xa4
 801593c:	e719      	b.n	8015772 <_svfprintf_r+0x1082>
 801593e:	aa26      	add	r2, sp, #152	; 0x98
 8015940:	4641      	mov	r1, r8
 8015942:	9803      	ldr	r0, [sp, #12]
 8015944:	f003 fcb5 	bl	80192b2 <__ssprint_r>
 8015948:	2800      	cmp	r0, #0
 801594a:	f040 80bd 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 801594e:	ac29      	add	r4, sp, #164	; 0xa4
 8015950:	e727      	b.n	80157a2 <_svfprintf_r+0x10b2>
 8015952:	bf00      	nop
 8015954:	0801cca4 	.word	0x0801cca4
 8015958:	9a04      	ldr	r2, [sp, #16]
 801595a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801595c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801595e:	2a01      	cmp	r2, #1
 8015960:	f105 0501 	add.w	r5, r5, #1
 8015964:	f103 0301 	add.w	r3, r3, #1
 8015968:	f104 0608 	add.w	r6, r4, #8
 801596c:	dc02      	bgt.n	8015974 <_svfprintf_r+0x1284>
 801596e:	f01a 0f01 	tst.w	sl, #1
 8015972:	d07d      	beq.n	8015a70 <_svfprintf_r+0x1380>
 8015974:	2201      	movs	r2, #1
 8015976:	2b07      	cmp	r3, #7
 8015978:	f8c4 b000 	str.w	fp, [r4]
 801597c:	6062      	str	r2, [r4, #4]
 801597e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8015982:	dd08      	ble.n	8015996 <_svfprintf_r+0x12a6>
 8015984:	aa26      	add	r2, sp, #152	; 0x98
 8015986:	4641      	mov	r1, r8
 8015988:	9803      	ldr	r0, [sp, #12]
 801598a:	f003 fc92 	bl	80192b2 <__ssprint_r>
 801598e:	2800      	cmp	r0, #0
 8015990:	f040 809a 	bne.w	8015ac8 <_svfprintf_r+0x13d8>
 8015994:	ae29      	add	r6, sp, #164	; 0xa4
 8015996:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015998:	6033      	str	r3, [r6, #0]
 801599a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801599c:	6073      	str	r3, [r6, #4]
 801599e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80159a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80159a2:	4413      	add	r3, r2
 80159a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80159a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80159a8:	3301      	adds	r3, #1
 80159aa:	2b07      	cmp	r3, #7
 80159ac:	9327      	str	r3, [sp, #156]	; 0x9c
 80159ae:	dc31      	bgt.n	8015a14 <_svfprintf_r+0x1324>
 80159b0:	3608      	adds	r6, #8
 80159b2:	9b04      	ldr	r3, [sp, #16]
 80159b4:	2200      	movs	r2, #0
 80159b6:	1e5c      	subs	r4, r3, #1
 80159b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80159bc:	2300      	movs	r3, #0
 80159be:	f7f1 fe05 	bl	80075cc <__aeabi_dcmpeq>
 80159c2:	2800      	cmp	r0, #0
 80159c4:	d12f      	bne.n	8015a26 <_svfprintf_r+0x1336>
 80159c6:	f10b 0301 	add.w	r3, fp, #1
 80159ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80159cc:	9904      	ldr	r1, [sp, #16]
 80159ce:	e9c6 3400 	strd	r3, r4, [r6]
 80159d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80159d4:	3201      	adds	r2, #1
 80159d6:	3b01      	subs	r3, #1
 80159d8:	440b      	add	r3, r1
 80159da:	2a07      	cmp	r2, #7
 80159dc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80159e0:	dd4f      	ble.n	8015a82 <_svfprintf_r+0x1392>
 80159e2:	aa26      	add	r2, sp, #152	; 0x98
 80159e4:	4641      	mov	r1, r8
 80159e6:	9803      	ldr	r0, [sp, #12]
 80159e8:	f003 fc63 	bl	80192b2 <__ssprint_r>
 80159ec:	2800      	cmp	r0, #0
 80159ee:	d16b      	bne.n	8015ac8 <_svfprintf_r+0x13d8>
 80159f0:	ae29      	add	r6, sp, #164	; 0xa4
 80159f2:	ab22      	add	r3, sp, #136	; 0x88
 80159f4:	6033      	str	r3, [r6, #0]
 80159f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80159f8:	6073      	str	r3, [r6, #4]
 80159fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80159fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80159fe:	4413      	add	r3, r2
 8015a00:	9328      	str	r3, [sp, #160]	; 0xa0
 8015a02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015a04:	3301      	adds	r3, #1
 8015a06:	2b07      	cmp	r3, #7
 8015a08:	9327      	str	r3, [sp, #156]	; 0x9c
 8015a0a:	f73f adb3 	bgt.w	8015574 <_svfprintf_r+0xe84>
 8015a0e:	f106 0408 	add.w	r4, r6, #8
 8015a12:	e414      	b.n	801523e <_svfprintf_r+0xb4e>
 8015a14:	aa26      	add	r2, sp, #152	; 0x98
 8015a16:	4641      	mov	r1, r8
 8015a18:	9803      	ldr	r0, [sp, #12]
 8015a1a:	f003 fc4a 	bl	80192b2 <__ssprint_r>
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	d152      	bne.n	8015ac8 <_svfprintf_r+0x13d8>
 8015a22:	ae29      	add	r6, sp, #164	; 0xa4
 8015a24:	e7c5      	b.n	80159b2 <_svfprintf_r+0x12c2>
 8015a26:	2c00      	cmp	r4, #0
 8015a28:	dde3      	ble.n	80159f2 <_svfprintf_r+0x1302>
 8015a2a:	4d3e      	ldr	r5, [pc, #248]	; (8015b24 <_svfprintf_r+0x1434>)
 8015a2c:	2710      	movs	r7, #16
 8015a2e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8015a32:	2c10      	cmp	r4, #16
 8015a34:	f103 0301 	add.w	r3, r3, #1
 8015a38:	f106 0108 	add.w	r1, r6, #8
 8015a3c:	6035      	str	r5, [r6, #0]
 8015a3e:	dc07      	bgt.n	8015a50 <_svfprintf_r+0x1360>
 8015a40:	6074      	str	r4, [r6, #4]
 8015a42:	2b07      	cmp	r3, #7
 8015a44:	4414      	add	r4, r2
 8015a46:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8015a4a:	dcca      	bgt.n	80159e2 <_svfprintf_r+0x12f2>
 8015a4c:	460e      	mov	r6, r1
 8015a4e:	e7d0      	b.n	80159f2 <_svfprintf_r+0x1302>
 8015a50:	3210      	adds	r2, #16
 8015a52:	2b07      	cmp	r3, #7
 8015a54:	6077      	str	r7, [r6, #4]
 8015a56:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015a5a:	dd06      	ble.n	8015a6a <_svfprintf_r+0x137a>
 8015a5c:	aa26      	add	r2, sp, #152	; 0x98
 8015a5e:	4641      	mov	r1, r8
 8015a60:	9803      	ldr	r0, [sp, #12]
 8015a62:	f003 fc26 	bl	80192b2 <__ssprint_r>
 8015a66:	bb78      	cbnz	r0, 8015ac8 <_svfprintf_r+0x13d8>
 8015a68:	a929      	add	r1, sp, #164	; 0xa4
 8015a6a:	3c10      	subs	r4, #16
 8015a6c:	460e      	mov	r6, r1
 8015a6e:	e7de      	b.n	8015a2e <_svfprintf_r+0x133e>
 8015a70:	2201      	movs	r2, #1
 8015a72:	2b07      	cmp	r3, #7
 8015a74:	f8c4 b000 	str.w	fp, [r4]
 8015a78:	6062      	str	r2, [r4, #4]
 8015a7a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8015a7e:	ddb8      	ble.n	80159f2 <_svfprintf_r+0x1302>
 8015a80:	e7af      	b.n	80159e2 <_svfprintf_r+0x12f2>
 8015a82:	3608      	adds	r6, #8
 8015a84:	e7b5      	b.n	80159f2 <_svfprintf_r+0x1302>
 8015a86:	460c      	mov	r4, r1
 8015a88:	f7ff bbd9 	b.w	801523e <_svfprintf_r+0xb4e>
 8015a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015a90:	1a9d      	subs	r5, r3, r2
 8015a92:	2d00      	cmp	r5, #0
 8015a94:	f77f abd7 	ble.w	8015246 <_svfprintf_r+0xb56>
 8015a98:	4e23      	ldr	r6, [pc, #140]	; (8015b28 <_svfprintf_r+0x1438>)
 8015a9a:	2710      	movs	r7, #16
 8015a9c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8015aa0:	2d10      	cmp	r5, #16
 8015aa2:	f103 0301 	add.w	r3, r3, #1
 8015aa6:	6026      	str	r6, [r4, #0]
 8015aa8:	dc18      	bgt.n	8015adc <_svfprintf_r+0x13ec>
 8015aaa:	6065      	str	r5, [r4, #4]
 8015aac:	2b07      	cmp	r3, #7
 8015aae:	4415      	add	r5, r2
 8015ab0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8015ab4:	f77f abc7 	ble.w	8015246 <_svfprintf_r+0xb56>
 8015ab8:	aa26      	add	r2, sp, #152	; 0x98
 8015aba:	4641      	mov	r1, r8
 8015abc:	9803      	ldr	r0, [sp, #12]
 8015abe:	f003 fbf8 	bl	80192b2 <__ssprint_r>
 8015ac2:	2800      	cmp	r0, #0
 8015ac4:	f43f abbf 	beq.w	8015246 <_svfprintf_r+0xb56>
 8015ac8:	f1b9 0f00 	cmp.w	r9, #0
 8015acc:	f43f a8a8 	beq.w	8014c20 <_svfprintf_r+0x530>
 8015ad0:	4649      	mov	r1, r9
 8015ad2:	9803      	ldr	r0, [sp, #12]
 8015ad4:	f002 fb32 	bl	801813c <_free_r>
 8015ad8:	f7ff b8a2 	b.w	8014c20 <_svfprintf_r+0x530>
 8015adc:	3210      	adds	r2, #16
 8015ade:	2b07      	cmp	r3, #7
 8015ae0:	6067      	str	r7, [r4, #4]
 8015ae2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015ae6:	dc02      	bgt.n	8015aee <_svfprintf_r+0x13fe>
 8015ae8:	3408      	adds	r4, #8
 8015aea:	3d10      	subs	r5, #16
 8015aec:	e7d6      	b.n	8015a9c <_svfprintf_r+0x13ac>
 8015aee:	aa26      	add	r2, sp, #152	; 0x98
 8015af0:	4641      	mov	r1, r8
 8015af2:	9803      	ldr	r0, [sp, #12]
 8015af4:	f003 fbdd 	bl	80192b2 <__ssprint_r>
 8015af8:	2800      	cmp	r0, #0
 8015afa:	d1e5      	bne.n	8015ac8 <_svfprintf_r+0x13d8>
 8015afc:	ac29      	add	r4, sp, #164	; 0xa4
 8015afe:	e7f4      	b.n	8015aea <_svfprintf_r+0x13fa>
 8015b00:	4649      	mov	r1, r9
 8015b02:	9803      	ldr	r0, [sp, #12]
 8015b04:	f002 fb1a 	bl	801813c <_free_r>
 8015b08:	f7ff bbb5 	b.w	8015276 <_svfprintf_r+0xb86>
 8015b0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	f43f a886 	beq.w	8014c20 <_svfprintf_r+0x530>
 8015b14:	aa26      	add	r2, sp, #152	; 0x98
 8015b16:	4641      	mov	r1, r8
 8015b18:	9803      	ldr	r0, [sp, #12]
 8015b1a:	f003 fbca 	bl	80192b2 <__ssprint_r>
 8015b1e:	f7ff b87f 	b.w	8014c20 <_svfprintf_r+0x530>
 8015b22:	bf00      	nop
 8015b24:	0801cca4 	.word	0x0801cca4
 8015b28:	0801cc94 	.word	0x0801cc94

08015b2c <sysconf>:
 8015b2c:	2808      	cmp	r0, #8
 8015b2e:	b508      	push	{r3, lr}
 8015b30:	d006      	beq.n	8015b40 <sysconf+0x14>
 8015b32:	f7fc fe21 	bl	8012778 <__errno>
 8015b36:	2316      	movs	r3, #22
 8015b38:	6003      	str	r3, [r0, #0]
 8015b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8015b3e:	bd08      	pop	{r3, pc}
 8015b40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8015b44:	e7fb      	b.n	8015b3e <sysconf+0x12>
	...

08015b48 <_vfprintf_r>:
 8015b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b4c:	b0d3      	sub	sp, #332	; 0x14c
 8015b4e:	4688      	mov	r8, r1
 8015b50:	4691      	mov	r9, r2
 8015b52:	461c      	mov	r4, r3
 8015b54:	461e      	mov	r6, r3
 8015b56:	4683      	mov	fp, r0
 8015b58:	f002 ff14 	bl	8018984 <_localeconv_r>
 8015b5c:	6803      	ldr	r3, [r0, #0]
 8015b5e:	9316      	str	r3, [sp, #88]	; 0x58
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7f1 f907 	bl	8006d74 <strlen>
 8015b66:	900d      	str	r0, [sp, #52]	; 0x34
 8015b68:	f1bb 0f00 	cmp.w	fp, #0
 8015b6c:	d005      	beq.n	8015b7a <_vfprintf_r+0x32>
 8015b6e:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8015b72:	b913      	cbnz	r3, 8015b7a <_vfprintf_r+0x32>
 8015b74:	4658      	mov	r0, fp
 8015b76:	f002 fa51 	bl	801801c <__sinit>
 8015b7a:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8015b7e:	07d8      	lsls	r0, r3, #31
 8015b80:	d407      	bmi.n	8015b92 <_vfprintf_r+0x4a>
 8015b82:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8015b86:	0599      	lsls	r1, r3, #22
 8015b88:	d403      	bmi.n	8015b92 <_vfprintf_r+0x4a>
 8015b8a:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8015b8e:	f7fd f819 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 8015b92:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8015b96:	049a      	lsls	r2, r3, #18
 8015b98:	d409      	bmi.n	8015bae <_vfprintf_r+0x66>
 8015b9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015b9e:	f8a8 300c 	strh.w	r3, [r8, #12]
 8015ba2:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8015ba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015baa:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8015bae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8015bb2:	071f      	lsls	r7, r3, #28
 8015bb4:	d502      	bpl.n	8015bbc <_vfprintf_r+0x74>
 8015bb6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015bba:	b9a3      	cbnz	r3, 8015be6 <_vfprintf_r+0x9e>
 8015bbc:	4641      	mov	r1, r8
 8015bbe:	4658      	mov	r0, fp
 8015bc0:	f001 fa86 	bl	80170d0 <__swsetup_r>
 8015bc4:	b178      	cbz	r0, 8015be6 <_vfprintf_r+0x9e>
 8015bc6:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8015bca:	07dd      	lsls	r5, r3, #31
 8015bcc:	d407      	bmi.n	8015bde <_vfprintf_r+0x96>
 8015bce:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8015bd2:	059c      	lsls	r4, r3, #22
 8015bd4:	d403      	bmi.n	8015bde <_vfprintf_r+0x96>
 8015bd6:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8015bda:	f7fc fff4 	bl	8012bc6 <__retarget_lock_release_recursive>
 8015bde:	f04f 33ff 	mov.w	r3, #4294967295
 8015be2:	930e      	str	r3, [sp, #56]	; 0x38
 8015be4:	e01a      	b.n	8015c1c <_vfprintf_r+0xd4>
 8015be6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8015bea:	f003 021a 	and.w	r2, r3, #26
 8015bee:	2a0a      	cmp	r2, #10
 8015bf0:	d118      	bne.n	8015c24 <_vfprintf_r+0xdc>
 8015bf2:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8015bf6:	2a00      	cmp	r2, #0
 8015bf8:	db14      	blt.n	8015c24 <_vfprintf_r+0xdc>
 8015bfa:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8015bfe:	07d0      	lsls	r0, r2, #31
 8015c00:	d405      	bmi.n	8015c0e <_vfprintf_r+0xc6>
 8015c02:	0599      	lsls	r1, r3, #22
 8015c04:	d403      	bmi.n	8015c0e <_vfprintf_r+0xc6>
 8015c06:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8015c0a:	f7fc ffdc 	bl	8012bc6 <__retarget_lock_release_recursive>
 8015c0e:	4623      	mov	r3, r4
 8015c10:	464a      	mov	r2, r9
 8015c12:	4641      	mov	r1, r8
 8015c14:	4658      	mov	r0, fp
 8015c16:	f001 fa09 	bl	801702c <__sbprintf>
 8015c1a:	900e      	str	r0, [sp, #56]	; 0x38
 8015c1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015c1e:	b053      	add	sp, #332	; 0x14c
 8015c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c24:	ed9f 7bc8 	vldr	d7, [pc, #800]	; 8015f48 <_vfprintf_r+0x400>
 8015c28:	2300      	movs	r3, #0
 8015c2a:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8015c2e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015c32:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8015c36:	ac29      	add	r4, sp, #164	; 0xa4
 8015c38:	9426      	str	r4, [sp, #152]	; 0x98
 8015c3a:	9304      	str	r3, [sp, #16]
 8015c3c:	9308      	str	r3, [sp, #32]
 8015c3e:	9312      	str	r3, [sp, #72]	; 0x48
 8015c40:	9319      	str	r3, [sp, #100]	; 0x64
 8015c42:	930e      	str	r3, [sp, #56]	; 0x38
 8015c44:	464d      	mov	r5, r9
 8015c46:	462b      	mov	r3, r5
 8015c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c4c:	b112      	cbz	r2, 8015c54 <_vfprintf_r+0x10c>
 8015c4e:	2a25      	cmp	r2, #37	; 0x25
 8015c50:	f040 80e4 	bne.w	8015e1c <_vfprintf_r+0x2d4>
 8015c54:	ebb5 0709 	subs.w	r7, r5, r9
 8015c58:	d00e      	beq.n	8015c78 <_vfprintf_r+0x130>
 8015c5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015c5c:	443b      	add	r3, r7
 8015c5e:	9328      	str	r3, [sp, #160]	; 0xa0
 8015c60:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015c62:	3301      	adds	r3, #1
 8015c64:	2b07      	cmp	r3, #7
 8015c66:	e9c4 9700 	strd	r9, r7, [r4]
 8015c6a:	9327      	str	r3, [sp, #156]	; 0x9c
 8015c6c:	f300 80d8 	bgt.w	8015e20 <_vfprintf_r+0x2d8>
 8015c70:	3408      	adds	r4, #8
 8015c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c74:	443b      	add	r3, r7
 8015c76:	930e      	str	r3, [sp, #56]	; 0x38
 8015c78:	782b      	ldrb	r3, [r5, #0]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	f001 81c2 	beq.w	8017004 <_vfprintf_r+0x14bc>
 8015c80:	1c6b      	adds	r3, r5, #1
 8015c82:	930c      	str	r3, [sp, #48]	; 0x30
 8015c84:	2300      	movs	r3, #0
 8015c86:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8015c8a:	f04f 35ff 	mov.w	r5, #4294967295
 8015c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c90:	469a      	mov	sl, r3
 8015c92:	270a      	movs	r7, #10
 8015c94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	9306      	str	r3, [sp, #24]
 8015c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c9c:	3301      	adds	r3, #1
 8015c9e:	930c      	str	r3, [sp, #48]	; 0x30
 8015ca0:	9b06      	ldr	r3, [sp, #24]
 8015ca2:	3b20      	subs	r3, #32
 8015ca4:	2b5a      	cmp	r3, #90	; 0x5a
 8015ca6:	f200 862f 	bhi.w	8016908 <_vfprintf_r+0xdc0>
 8015caa:	a201      	add	r2, pc, #4	; (adr r2, 8015cb0 <_vfprintf_r+0x168>)
 8015cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cb0:	08015eb3 	.word	0x08015eb3
 8015cb4:	08016909 	.word	0x08016909
 8015cb8:	08016909 	.word	0x08016909
 8015cbc:	08015ec5 	.word	0x08015ec5
 8015cc0:	08016909 	.word	0x08016909
 8015cc4:	08016909 	.word	0x08016909
 8015cc8:	08016909 	.word	0x08016909
 8015ccc:	08015e79 	.word	0x08015e79
 8015cd0:	08016909 	.word	0x08016909
 8015cd4:	08016909 	.word	0x08016909
 8015cd8:	08015ecb 	.word	0x08015ecb
 8015cdc:	08015ee3 	.word	0x08015ee3
 8015ce0:	08016909 	.word	0x08016909
 8015ce4:	08015edd 	.word	0x08015edd
 8015ce8:	08015ee7 	.word	0x08015ee7
 8015cec:	08016909 	.word	0x08016909
 8015cf0:	08015f1b 	.word	0x08015f1b
 8015cf4:	08015f21 	.word	0x08015f21
 8015cf8:	08015f21 	.word	0x08015f21
 8015cfc:	08015f21 	.word	0x08015f21
 8015d00:	08015f21 	.word	0x08015f21
 8015d04:	08015f21 	.word	0x08015f21
 8015d08:	08015f21 	.word	0x08015f21
 8015d0c:	08015f21 	.word	0x08015f21
 8015d10:	08015f21 	.word	0x08015f21
 8015d14:	08015f21 	.word	0x08015f21
 8015d18:	08016909 	.word	0x08016909
 8015d1c:	08016909 	.word	0x08016909
 8015d20:	08016909 	.word	0x08016909
 8015d24:	08016909 	.word	0x08016909
 8015d28:	08016909 	.word	0x08016909
 8015d2c:	08016909 	.word	0x08016909
 8015d30:	08016909 	.word	0x08016909
 8015d34:	0801601f 	.word	0x0801601f
 8015d38:	08016909 	.word	0x08016909
 8015d3c:	08015f89 	.word	0x08015f89
 8015d40:	08015fab 	.word	0x08015fab
 8015d44:	0801601f 	.word	0x0801601f
 8015d48:	0801601f 	.word	0x0801601f
 8015d4c:	0801601f 	.word	0x0801601f
 8015d50:	08016909 	.word	0x08016909
 8015d54:	08016909 	.word	0x08016909
 8015d58:	08016909 	.word	0x08016909
 8015d5c:	08016909 	.word	0x08016909
 8015d60:	08015f41 	.word	0x08015f41
 8015d64:	08016909 	.word	0x08016909
 8015d68:	08016909 	.word	0x08016909
 8015d6c:	08016505 	.word	0x08016505
 8015d70:	08016909 	.word	0x08016909
 8015d74:	08016909 	.word	0x08016909
 8015d78:	08016909 	.word	0x08016909
 8015d7c:	08016591 	.word	0x08016591
 8015d80:	08016909 	.word	0x08016909
 8015d84:	08016775 	.word	0x08016775
 8015d88:	08016909 	.word	0x08016909
 8015d8c:	08016909 	.word	0x08016909
 8015d90:	08015e39 	.word	0x08015e39
 8015d94:	08016909 	.word	0x08016909
 8015d98:	08016909 	.word	0x08016909
 8015d9c:	08016909 	.word	0x08016909
 8015da0:	08016909 	.word	0x08016909
 8015da4:	08016909 	.word	0x08016909
 8015da8:	08016909 	.word	0x08016909
 8015dac:	08016909 	.word	0x08016909
 8015db0:	08016909 	.word	0x08016909
 8015db4:	0801601f 	.word	0x0801601f
 8015db8:	08016909 	.word	0x08016909
 8015dbc:	08015f89 	.word	0x08015f89
 8015dc0:	08015faf 	.word	0x08015faf
 8015dc4:	0801601f 	.word	0x0801601f
 8015dc8:	0801601f 	.word	0x0801601f
 8015dcc:	0801601f 	.word	0x0801601f
 8015dd0:	08015f55 	.word	0x08015f55
 8015dd4:	08015faf 	.word	0x08015faf
 8015dd8:	08015f7d 	.word	0x08015f7d
 8015ddc:	08016909 	.word	0x08016909
 8015de0:	08015f6f 	.word	0x08015f6f
 8015de4:	08016909 	.word	0x08016909
 8015de8:	080164bf 	.word	0x080164bf
 8015dec:	08016509 	.word	0x08016509
 8015df0:	08016571 	.word	0x08016571
 8015df4:	08015f7d 	.word	0x08015f7d
 8015df8:	08016909 	.word	0x08016909
 8015dfc:	08016591 	.word	0x08016591
 8015e00:	08015c95 	.word	0x08015c95
 8015e04:	08016779 	.word	0x08016779
 8015e08:	08016909 	.word	0x08016909
 8015e0c:	08016909 	.word	0x08016909
 8015e10:	080167b7 	.word	0x080167b7
 8015e14:	08016909 	.word	0x08016909
 8015e18:	08015c95 	.word	0x08015c95
 8015e1c:	461d      	mov	r5, r3
 8015e1e:	e712      	b.n	8015c46 <_vfprintf_r+0xfe>
 8015e20:	aa26      	add	r2, sp, #152	; 0x98
 8015e22:	4641      	mov	r1, r8
 8015e24:	4658      	mov	r0, fp
 8015e26:	f003 fabc 	bl	80193a2 <__sprint_r>
 8015e2a:	2800      	cmp	r0, #0
 8015e2c:	f040 8161 	bne.w	80160f2 <_vfprintf_r+0x5aa>
 8015e30:	ac29      	add	r4, sp, #164	; 0xa4
 8015e32:	e71e      	b.n	8015c72 <_vfprintf_r+0x12a>
 8015e34:	461e      	mov	r6, r3
 8015e36:	e72d      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015e38:	4b45      	ldr	r3, [pc, #276]	; (8015f50 <_vfprintf_r+0x408>)
 8015e3a:	9318      	str	r3, [sp, #96]	; 0x60
 8015e3c:	f01a 0f20 	tst.w	sl, #32
 8015e40:	f000 84bc 	beq.w	80167bc <_vfprintf_r+0xc74>
 8015e44:	3607      	adds	r6, #7
 8015e46:	f026 0607 	bic.w	r6, r6, #7
 8015e4a:	f106 0308 	add.w	r3, r6, #8
 8015e4e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8015e52:	9309      	str	r3, [sp, #36]	; 0x24
 8015e54:	f01a 0f01 	tst.w	sl, #1
 8015e58:	d00a      	beq.n	8015e70 <_vfprintf_r+0x328>
 8015e5a:	ea56 0307 	orrs.w	r3, r6, r7
 8015e5e:	d007      	beq.n	8015e70 <_vfprintf_r+0x328>
 8015e60:	2330      	movs	r3, #48	; 0x30
 8015e62:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8015e66:	9b06      	ldr	r3, [sp, #24]
 8015e68:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8015e6c:	f04a 0a02 	orr.w	sl, sl, #2
 8015e70:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8015e74:	2302      	movs	r3, #2
 8015e76:	e355      	b.n	8016524 <_vfprintf_r+0x9dc>
 8015e78:	4658      	mov	r0, fp
 8015e7a:	f002 fd83 	bl	8018984 <_localeconv_r>
 8015e7e:	6843      	ldr	r3, [r0, #4]
 8015e80:	9319      	str	r3, [sp, #100]	; 0x64
 8015e82:	4618      	mov	r0, r3
 8015e84:	f7f0 ff76 	bl	8006d74 <strlen>
 8015e88:	9012      	str	r0, [sp, #72]	; 0x48
 8015e8a:	4658      	mov	r0, fp
 8015e8c:	f002 fd7a 	bl	8018984 <_localeconv_r>
 8015e90:	6883      	ldr	r3, [r0, #8]
 8015e92:	9308      	str	r3, [sp, #32]
 8015e94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	f43f aefc 	beq.w	8015c94 <_vfprintf_r+0x14c>
 8015e9c:	9b08      	ldr	r3, [sp, #32]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	f43f aef8 	beq.w	8015c94 <_vfprintf_r+0x14c>
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	f43f aef4 	beq.w	8015c94 <_vfprintf_r+0x14c>
 8015eac:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8015eb0:	e6f0      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015eb2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f47f aeec 	bne.w	8015c94 <_vfprintf_r+0x14c>
 8015ebc:	2320      	movs	r3, #32
 8015ebe:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8015ec2:	e6e7      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015ec4:	f04a 0a01 	orr.w	sl, sl, #1
 8015ec8:	e6e4      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015eca:	6832      	ldr	r2, [r6, #0]
 8015ecc:	920f      	str	r2, [sp, #60]	; 0x3c
 8015ece:	2a00      	cmp	r2, #0
 8015ed0:	f106 0304 	add.w	r3, r6, #4
 8015ed4:	daae      	bge.n	8015e34 <_vfprintf_r+0x2ec>
 8015ed6:	4252      	negs	r2, r2
 8015ed8:	920f      	str	r2, [sp, #60]	; 0x3c
 8015eda:	461e      	mov	r6, r3
 8015edc:	f04a 0a04 	orr.w	sl, sl, #4
 8015ee0:	e6d8      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015ee2:	232b      	movs	r3, #43	; 0x2b
 8015ee4:	e7eb      	b.n	8015ebe <_vfprintf_r+0x376>
 8015ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eea:	7812      	ldrb	r2, [r2, #0]
 8015eec:	9206      	str	r2, [sp, #24]
 8015eee:	2a2a      	cmp	r2, #42	; 0x2a
 8015ef0:	f103 0301 	add.w	r3, r3, #1
 8015ef4:	d10f      	bne.n	8015f16 <_vfprintf_r+0x3ce>
 8015ef6:	6835      	ldr	r5, [r6, #0]
 8015ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8015efa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8015efe:	3604      	adds	r6, #4
 8015f00:	e6c8      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015f02:	fb07 2505 	mla	r5, r7, r5, r2
 8015f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f0a:	9206      	str	r2, [sp, #24]
 8015f0c:	9a06      	ldr	r2, [sp, #24]
 8015f0e:	3a30      	subs	r2, #48	; 0x30
 8015f10:	2a09      	cmp	r2, #9
 8015f12:	d9f6      	bls.n	8015f02 <_vfprintf_r+0x3ba>
 8015f14:	e6c3      	b.n	8015c9e <_vfprintf_r+0x156>
 8015f16:	2500      	movs	r5, #0
 8015f18:	e7f8      	b.n	8015f0c <_vfprintf_r+0x3c4>
 8015f1a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8015f1e:	e6b9      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015f20:	2200      	movs	r2, #0
 8015f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f24:	920f      	str	r2, [sp, #60]	; 0x3c
 8015f26:	9a06      	ldr	r2, [sp, #24]
 8015f28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015f2a:	3a30      	subs	r2, #48	; 0x30
 8015f2c:	fb07 2201 	mla	r2, r7, r1, r2
 8015f30:	920f      	str	r2, [sp, #60]	; 0x3c
 8015f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f36:	9206      	str	r2, [sp, #24]
 8015f38:	3a30      	subs	r2, #48	; 0x30
 8015f3a:	2a09      	cmp	r2, #9
 8015f3c:	d9f3      	bls.n	8015f26 <_vfprintf_r+0x3de>
 8015f3e:	e6ae      	b.n	8015c9e <_vfprintf_r+0x156>
 8015f40:	f04a 0a08 	orr.w	sl, sl, #8
 8015f44:	e6a6      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015f46:	bf00      	nop
	...
 8015f50:	0801cc81 	.word	0x0801cc81
 8015f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	2b68      	cmp	r3, #104	; 0x68
 8015f5a:	bf01      	itttt	eq
 8015f5c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 8015f5e:	3301      	addeq	r3, #1
 8015f60:	930c      	streq	r3, [sp, #48]	; 0x30
 8015f62:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8015f66:	bf18      	it	ne
 8015f68:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8015f6c:	e692      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	2b6c      	cmp	r3, #108	; 0x6c
 8015f74:	d105      	bne.n	8015f82 <_vfprintf_r+0x43a>
 8015f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f78:	3301      	adds	r3, #1
 8015f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8015f7c:	f04a 0a20 	orr.w	sl, sl, #32
 8015f80:	e688      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015f82:	f04a 0a10 	orr.w	sl, sl, #16
 8015f86:	e685      	b.n	8015c94 <_vfprintf_r+0x14c>
 8015f88:	1d33      	adds	r3, r6, #4
 8015f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	6833      	ldr	r3, [r6, #0]
 8015f90:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8015f94:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8015f98:	9003      	str	r0, [sp, #12]
 8015f9a:	2501      	movs	r5, #1
 8015f9c:	9010      	str	r0, [sp, #64]	; 0x40
 8015f9e:	4607      	mov	r7, r0
 8015fa0:	9007      	str	r0, [sp, #28]
 8015fa2:	4606      	mov	r6, r0
 8015fa4:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8015fa8:	e30b      	b.n	80165c2 <_vfprintf_r+0xa7a>
 8015faa:	f04a 0a10 	orr.w	sl, sl, #16
 8015fae:	f01a 0f20 	tst.w	sl, #32
 8015fb2:	d021      	beq.n	8015ff8 <_vfprintf_r+0x4b0>
 8015fb4:	3607      	adds	r6, #7
 8015fb6:	f026 0607 	bic.w	r6, r6, #7
 8015fba:	f106 0308 	add.w	r3, r6, #8
 8015fbe:	e9d6 6700 	ldrd	r6, r7, [r6]
 8015fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8015fc4:	2e00      	cmp	r6, #0
 8015fc6:	f177 0300 	sbcs.w	r3, r7, #0
 8015fca:	da06      	bge.n	8015fda <_vfprintf_r+0x492>
 8015fcc:	4276      	negs	r6, r6
 8015fce:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8015fd2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8015fd6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8015fda:	1c6b      	adds	r3, r5, #1
 8015fdc:	f040 8401 	bne.w	80167e2 <_vfprintf_r+0xc9a>
 8015fe0:	2f00      	cmp	r7, #0
 8015fe2:	bf08      	it	eq
 8015fe4:	2e0a      	cmpeq	r6, #10
 8015fe6:	f080 8431 	bcs.w	801684c <_vfprintf_r+0xd04>
 8015fea:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8015fee:	3630      	adds	r6, #48	; 0x30
 8015ff0:	f809 6d01 	strb.w	r6, [r9, #-1]!
 8015ff4:	f000 bc18 	b.w	8016828 <_vfprintf_r+0xce0>
 8015ff8:	1d33      	adds	r3, r6, #4
 8015ffa:	f01a 0f10 	tst.w	sl, #16
 8015ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8016000:	d002      	beq.n	8016008 <_vfprintf_r+0x4c0>
 8016002:	6836      	ldr	r6, [r6, #0]
 8016004:	17f7      	asrs	r7, r6, #31
 8016006:	e7dd      	b.n	8015fc4 <_vfprintf_r+0x47c>
 8016008:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801600c:	6836      	ldr	r6, [r6, #0]
 801600e:	d001      	beq.n	8016014 <_vfprintf_r+0x4cc>
 8016010:	b236      	sxth	r6, r6
 8016012:	e7f7      	b.n	8016004 <_vfprintf_r+0x4bc>
 8016014:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8016018:	bf18      	it	ne
 801601a:	b276      	sxtbne	r6, r6
 801601c:	e7f2      	b.n	8016004 <_vfprintf_r+0x4bc>
 801601e:	3607      	adds	r6, #7
 8016020:	f026 0607 	bic.w	r6, r6, #7
 8016024:	ed96 7b00 	vldr	d7, [r6]
 8016028:	f106 0308 	add.w	r3, r6, #8
 801602c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8016030:	9309      	str	r3, [sp, #36]	; 0x24
 8016032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016034:	931a      	str	r3, [sp, #104]	; 0x68
 8016036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801603c:	931b      	str	r3, [sp, #108]	; 0x6c
 801603e:	f04f 32ff 	mov.w	r2, #4294967295
 8016042:	4bb0      	ldr	r3, [pc, #704]	; (8016304 <_vfprintf_r+0x7bc>)
 8016044:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8016048:	f7f1 faf2 	bl	8007630 <__aeabi_dcmpun>
 801604c:	b9f8      	cbnz	r0, 801608e <_vfprintf_r+0x546>
 801604e:	f04f 32ff 	mov.w	r2, #4294967295
 8016052:	4bac      	ldr	r3, [pc, #688]	; (8016304 <_vfprintf_r+0x7bc>)
 8016054:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8016058:	f7f1 facc 	bl	80075f4 <__aeabi_dcmple>
 801605c:	b9b8      	cbnz	r0, 801608e <_vfprintf_r+0x546>
 801605e:	2200      	movs	r2, #0
 8016060:	2300      	movs	r3, #0
 8016062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016066:	f7f1 fabb 	bl	80075e0 <__aeabi_dcmplt>
 801606a:	b110      	cbz	r0, 8016072 <_vfprintf_r+0x52a>
 801606c:	232d      	movs	r3, #45	; 0x2d
 801606e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8016072:	4aa5      	ldr	r2, [pc, #660]	; (8016308 <_vfprintf_r+0x7c0>)
 8016074:	4ba5      	ldr	r3, [pc, #660]	; (801630c <_vfprintf_r+0x7c4>)
 8016076:	9906      	ldr	r1, [sp, #24]
 8016078:	2947      	cmp	r1, #71	; 0x47
 801607a:	bfcc      	ite	gt
 801607c:	4691      	movgt	r9, r2
 801607e:	4699      	movle	r9, r3
 8016080:	2300      	movs	r3, #0
 8016082:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8016086:	9303      	str	r3, [sp, #12]
 8016088:	2503      	movs	r5, #3
 801608a:	9310      	str	r3, [sp, #64]	; 0x40
 801608c:	e3d2      	b.n	8016834 <_vfprintf_r+0xcec>
 801608e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016092:	4610      	mov	r0, r2
 8016094:	4619      	mov	r1, r3
 8016096:	f7f1 facb 	bl	8007630 <__aeabi_dcmpun>
 801609a:	b140      	cbz	r0, 80160ae <_vfprintf_r+0x566>
 801609c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801609e:	4a9c      	ldr	r2, [pc, #624]	; (8016310 <_vfprintf_r+0x7c8>)
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	bfbc      	itt	lt
 80160a4:	232d      	movlt	r3, #45	; 0x2d
 80160a6:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 80160aa:	4b9a      	ldr	r3, [pc, #616]	; (8016314 <_vfprintf_r+0x7cc>)
 80160ac:	e7e3      	b.n	8016076 <_vfprintf_r+0x52e>
 80160ae:	9b06      	ldr	r3, [sp, #24]
 80160b0:	f023 0320 	bic.w	r3, r3, #32
 80160b4:	2b41      	cmp	r3, #65	; 0x41
 80160b6:	9307      	str	r3, [sp, #28]
 80160b8:	d12d      	bne.n	8016116 <_vfprintf_r+0x5ce>
 80160ba:	2330      	movs	r3, #48	; 0x30
 80160bc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80160c0:	9b06      	ldr	r3, [sp, #24]
 80160c2:	2b61      	cmp	r3, #97	; 0x61
 80160c4:	bf14      	ite	ne
 80160c6:	2358      	movne	r3, #88	; 0x58
 80160c8:	2378      	moveq	r3, #120	; 0x78
 80160ca:	2d63      	cmp	r5, #99	; 0x63
 80160cc:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80160d0:	f04a 0a02 	orr.w	sl, sl, #2
 80160d4:	dd2a      	ble.n	801612c <_vfprintf_r+0x5e4>
 80160d6:	1c69      	adds	r1, r5, #1
 80160d8:	4658      	mov	r0, fp
 80160da:	f7fc fdf1 	bl	8012cc0 <_malloc_r>
 80160de:	4681      	mov	r9, r0
 80160e0:	2800      	cmp	r0, #0
 80160e2:	f040 8121 	bne.w	8016328 <_vfprintf_r+0x7e0>
 80160e6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80160ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160ee:	f8a8 300c 	strh.w	r3, [r8, #12]
 80160f2:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80160f6:	07d8      	lsls	r0, r3, #31
 80160f8:	d407      	bmi.n	801610a <_vfprintf_r+0x5c2>
 80160fa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80160fe:	0599      	lsls	r1, r3, #22
 8016100:	d403      	bmi.n	801610a <_vfprintf_r+0x5c2>
 8016102:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8016106:	f7fc fd5e 	bl	8012bc6 <__retarget_lock_release_recursive>
 801610a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801610e:	065a      	lsls	r2, r3, #25
 8016110:	f57f ad84 	bpl.w	8015c1c <_vfprintf_r+0xd4>
 8016114:	e563      	b.n	8015bde <_vfprintf_r+0x96>
 8016116:	1c6a      	adds	r2, r5, #1
 8016118:	f000 8108 	beq.w	801632c <_vfprintf_r+0x7e4>
 801611c:	9b07      	ldr	r3, [sp, #28]
 801611e:	2b47      	cmp	r3, #71	; 0x47
 8016120:	d102      	bne.n	8016128 <_vfprintf_r+0x5e0>
 8016122:	2d00      	cmp	r5, #0
 8016124:	f000 8105 	beq.w	8016332 <_vfprintf_r+0x7ea>
 8016128:	9003      	str	r0, [sp, #12]
 801612a:	e002      	b.n	8016132 <_vfprintf_r+0x5ea>
 801612c:	9003      	str	r0, [sp, #12]
 801612e:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8016132:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8016136:	9310      	str	r3, [sp, #64]	; 0x40
 8016138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801613a:	2b00      	cmp	r3, #0
 801613c:	f280 80fc 	bge.w	8016338 <_vfprintf_r+0x7f0>
 8016140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016142:	9314      	str	r3, [sp, #80]	; 0x50
 8016144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016146:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801614a:	9315      	str	r3, [sp, #84]	; 0x54
 801614c:	232d      	movs	r3, #45	; 0x2d
 801614e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016150:	9b07      	ldr	r3, [sp, #28]
 8016152:	2b41      	cmp	r3, #65	; 0x41
 8016154:	f040 8104 	bne.w	8016360 <_vfprintf_r+0x818>
 8016158:	a820      	add	r0, sp, #128	; 0x80
 801615a:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 801615e:	f003 f85d 	bl	801921c <frexp>
 8016162:	2200      	movs	r2, #0
 8016164:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016168:	ec51 0b10 	vmov	r0, r1, d0
 801616c:	f7f0 ffc6 	bl	80070fc <__aeabi_dmul>
 8016170:	2200      	movs	r2, #0
 8016172:	2300      	movs	r3, #0
 8016174:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016178:	f7f1 fa28 	bl	80075cc <__aeabi_dcmpeq>
 801617c:	b108      	cbz	r0, 8016182 <_vfprintf_r+0x63a>
 801617e:	2301      	movs	r3, #1
 8016180:	9320      	str	r3, [sp, #128]	; 0x80
 8016182:	4f65      	ldr	r7, [pc, #404]	; (8016318 <_vfprintf_r+0x7d0>)
 8016184:	4b65      	ldr	r3, [pc, #404]	; (801631c <_vfprintf_r+0x7d4>)
 8016186:	9a06      	ldr	r2, [sp, #24]
 8016188:	2a61      	cmp	r2, #97	; 0x61
 801618a:	bf08      	it	eq
 801618c:	461f      	moveq	r7, r3
 801618e:	9711      	str	r7, [sp, #68]	; 0x44
 8016190:	464e      	mov	r6, r9
 8016192:	1e6f      	subs	r7, r5, #1
 8016194:	2200      	movs	r2, #0
 8016196:	4b62      	ldr	r3, [pc, #392]	; (8016320 <_vfprintf_r+0x7d8>)
 8016198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801619c:	f7f0 ffae 	bl	80070fc <__aeabi_dmul>
 80161a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80161a4:	f7f1 fa5a 	bl	800765c <__aeabi_d2iz>
 80161a8:	901c      	str	r0, [sp, #112]	; 0x70
 80161aa:	f7f0 ff3d 	bl	8007028 <__aeabi_i2d>
 80161ae:	4602      	mov	r2, r0
 80161b0:	460b      	mov	r3, r1
 80161b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80161b6:	f7f0 fde9 	bl	8006d8c <__aeabi_dsub>
 80161ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80161bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80161be:	971d      	str	r7, [sp, #116]	; 0x74
 80161c0:	5c9b      	ldrb	r3, [r3, r2]
 80161c2:	f806 3b01 	strb.w	r3, [r6], #1
 80161c6:	1c7b      	adds	r3, r7, #1
 80161c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80161cc:	d006      	beq.n	80161dc <_vfprintf_r+0x694>
 80161ce:	2200      	movs	r2, #0
 80161d0:	2300      	movs	r3, #0
 80161d2:	3f01      	subs	r7, #1
 80161d4:	f7f1 f9fa 	bl	80075cc <__aeabi_dcmpeq>
 80161d8:	2800      	cmp	r0, #0
 80161da:	d0db      	beq.n	8016194 <_vfprintf_r+0x64c>
 80161dc:	2200      	movs	r2, #0
 80161de:	4b51      	ldr	r3, [pc, #324]	; (8016324 <_vfprintf_r+0x7dc>)
 80161e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80161e4:	f7f1 fa1a 	bl	800761c <__aeabi_dcmpgt>
 80161e8:	b960      	cbnz	r0, 8016204 <_vfprintf_r+0x6bc>
 80161ea:	2200      	movs	r2, #0
 80161ec:	4b4d      	ldr	r3, [pc, #308]	; (8016324 <_vfprintf_r+0x7dc>)
 80161ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80161f2:	f7f1 f9eb 	bl	80075cc <__aeabi_dcmpeq>
 80161f6:	2800      	cmp	r0, #0
 80161f8:	f000 80ad 	beq.w	8016356 <_vfprintf_r+0x80e>
 80161fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80161fe:	07df      	lsls	r7, r3, #31
 8016200:	f140 80a9 	bpl.w	8016356 <_vfprintf_r+0x80e>
 8016204:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016206:	9624      	str	r6, [sp, #144]	; 0x90
 8016208:	7bd9      	ldrb	r1, [r3, #15]
 801620a:	2030      	movs	r0, #48	; 0x30
 801620c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801620e:	1e53      	subs	r3, r2, #1
 8016210:	9324      	str	r3, [sp, #144]	; 0x90
 8016212:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8016216:	428b      	cmp	r3, r1
 8016218:	f000 8094 	beq.w	8016344 <_vfprintf_r+0x7fc>
 801621c:	2b39      	cmp	r3, #57	; 0x39
 801621e:	bf0b      	itete	eq
 8016220:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8016222:	3301      	addne	r3, #1
 8016224:	7a9b      	ldrbeq	r3, [r3, #10]
 8016226:	b2db      	uxtbne	r3, r3
 8016228:	f802 3c01 	strb.w	r3, [r2, #-1]
 801622c:	4633      	mov	r3, r6
 801622e:	eba3 0309 	sub.w	r3, r3, r9
 8016232:	9304      	str	r3, [sp, #16]
 8016234:	9b07      	ldr	r3, [sp, #28]
 8016236:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016238:	2b47      	cmp	r3, #71	; 0x47
 801623a:	f040 80d6 	bne.w	80163ea <_vfprintf_r+0x8a2>
 801623e:	1cf0      	adds	r0, r6, #3
 8016240:	db02      	blt.n	8016248 <_vfprintf_r+0x700>
 8016242:	42b5      	cmp	r5, r6
 8016244:	f280 80fc 	bge.w	8016440 <_vfprintf_r+0x8f8>
 8016248:	9b06      	ldr	r3, [sp, #24]
 801624a:	3b02      	subs	r3, #2
 801624c:	9306      	str	r3, [sp, #24]
 801624e:	9906      	ldr	r1, [sp, #24]
 8016250:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8016254:	f021 0120 	bic.w	r1, r1, #32
 8016258:	2941      	cmp	r1, #65	; 0x41
 801625a:	bf08      	it	eq
 801625c:	320f      	addeq	r2, #15
 801625e:	f106 33ff 	add.w	r3, r6, #4294967295
 8016262:	bf06      	itte	eq
 8016264:	b2d2      	uxtbeq	r2, r2
 8016266:	2101      	moveq	r1, #1
 8016268:	2100      	movne	r1, #0
 801626a:	2b00      	cmp	r3, #0
 801626c:	9320      	str	r3, [sp, #128]	; 0x80
 801626e:	bfb8      	it	lt
 8016270:	f1c6 0301 	rsblt	r3, r6, #1
 8016274:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8016278:	bfb4      	ite	lt
 801627a:	222d      	movlt	r2, #45	; 0x2d
 801627c:	222b      	movge	r2, #43	; 0x2b
 801627e:	2b09      	cmp	r3, #9
 8016280:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8016284:	f340 80c8 	ble.w	8016418 <_vfprintf_r+0x8d0>
 8016288:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 801628c:	250a      	movs	r5, #10
 801628e:	fb93 f0f5 	sdiv	r0, r3, r5
 8016292:	fb05 3310 	mls	r3, r5, r0, r3
 8016296:	3330      	adds	r3, #48	; 0x30
 8016298:	2809      	cmp	r0, #9
 801629a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801629e:	f102 31ff 	add.w	r1, r2, #4294967295
 80162a2:	4603      	mov	r3, r0
 80162a4:	f300 80b1 	bgt.w	801640a <_vfprintf_r+0x8c2>
 80162a8:	3330      	adds	r3, #48	; 0x30
 80162aa:	f801 3c01 	strb.w	r3, [r1, #-1]
 80162ae:	3a02      	subs	r2, #2
 80162b0:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 80162b4:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 80162b8:	4282      	cmp	r2, r0
 80162ba:	4619      	mov	r1, r3
 80162bc:	f0c0 80a7 	bcc.w	801640e <_vfprintf_r+0x8c6>
 80162c0:	9a04      	ldr	r2, [sp, #16]
 80162c2:	ab22      	add	r3, sp, #136	; 0x88
 80162c4:	1acb      	subs	r3, r1, r3
 80162c6:	2a01      	cmp	r2, #1
 80162c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80162ca:	eb03 0502 	add.w	r5, r3, r2
 80162ce:	dc02      	bgt.n	80162d6 <_vfprintf_r+0x78e>
 80162d0:	f01a 0f01 	tst.w	sl, #1
 80162d4:	d001      	beq.n	80162da <_vfprintf_r+0x792>
 80162d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162d8:	441d      	add	r5, r3
 80162da:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 80162de:	2700      	movs	r7, #0
 80162e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80162e4:	9310      	str	r3, [sp, #64]	; 0x40
 80162e6:	9707      	str	r7, [sp, #28]
 80162e8:	463e      	mov	r6, r7
 80162ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	f000 8317 	beq.w	8016920 <_vfprintf_r+0xdd8>
 80162f2:	232d      	movs	r3, #45	; 0x2d
 80162f4:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80162f8:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80162fc:	2300      	movs	r3, #0
 80162fe:	9310      	str	r3, [sp, #64]	; 0x40
 8016300:	e15f      	b.n	80165c2 <_vfprintf_r+0xa7a>
 8016302:	bf00      	nop
 8016304:	7fefffff 	.word	0x7fefffff
 8016308:	0801cc64 	.word	0x0801cc64
 801630c:	0801cc60 	.word	0x0801cc60
 8016310:	0801cc6c 	.word	0x0801cc6c
 8016314:	0801cc68 	.word	0x0801cc68
 8016318:	0801cc81 	.word	0x0801cc81
 801631c:	0801cc70 	.word	0x0801cc70
 8016320:	40300000 	.word	0x40300000
 8016324:	3fe00000 	.word	0x3fe00000
 8016328:	9003      	str	r0, [sp, #12]
 801632a:	e702      	b.n	8016132 <_vfprintf_r+0x5ea>
 801632c:	9003      	str	r0, [sp, #12]
 801632e:	2506      	movs	r5, #6
 8016330:	e6ff      	b.n	8016132 <_vfprintf_r+0x5ea>
 8016332:	9503      	str	r5, [sp, #12]
 8016334:	2501      	movs	r5, #1
 8016336:	e6fc      	b.n	8016132 <_vfprintf_r+0x5ea>
 8016338:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801633c:	2300      	movs	r3, #0
 801633e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8016342:	e704      	b.n	801614e <_vfprintf_r+0x606>
 8016344:	f802 0c01 	strb.w	r0, [r2, #-1]
 8016348:	e760      	b.n	801620c <_vfprintf_r+0x6c4>
 801634a:	f803 1b01 	strb.w	r1, [r3], #1
 801634e:	1af2      	subs	r2, r6, r3
 8016350:	2a00      	cmp	r2, #0
 8016352:	dafa      	bge.n	801634a <_vfprintf_r+0x802>
 8016354:	e76b      	b.n	801622e <_vfprintf_r+0x6e6>
 8016356:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016358:	4633      	mov	r3, r6
 801635a:	2130      	movs	r1, #48	; 0x30
 801635c:	4416      	add	r6, r2
 801635e:	e7f6      	b.n	801634e <_vfprintf_r+0x806>
 8016360:	9b07      	ldr	r3, [sp, #28]
 8016362:	2b46      	cmp	r3, #70	; 0x46
 8016364:	d004      	beq.n	8016370 <_vfprintf_r+0x828>
 8016366:	2b45      	cmp	r3, #69	; 0x45
 8016368:	d13a      	bne.n	80163e0 <_vfprintf_r+0x898>
 801636a:	1c6e      	adds	r6, r5, #1
 801636c:	2102      	movs	r1, #2
 801636e:	e001      	b.n	8016374 <_vfprintf_r+0x82c>
 8016370:	462e      	mov	r6, r5
 8016372:	2103      	movs	r1, #3
 8016374:	ab24      	add	r3, sp, #144	; 0x90
 8016376:	9301      	str	r3, [sp, #4]
 8016378:	ab21      	add	r3, sp, #132	; 0x84
 801637a:	9300      	str	r3, [sp, #0]
 801637c:	4632      	mov	r2, r6
 801637e:	ab20      	add	r3, sp, #128	; 0x80
 8016380:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8016384:	4658      	mov	r0, fp
 8016386:	f000 ffa7 	bl	80172d8 <_dtoa_r>
 801638a:	9b07      	ldr	r3, [sp, #28]
 801638c:	2b47      	cmp	r3, #71	; 0x47
 801638e:	4681      	mov	r9, r0
 8016390:	d102      	bne.n	8016398 <_vfprintf_r+0x850>
 8016392:	f01a 0f01 	tst.w	sl, #1
 8016396:	d026      	beq.n	80163e6 <_vfprintf_r+0x89e>
 8016398:	9b07      	ldr	r3, [sp, #28]
 801639a:	2b46      	cmp	r3, #70	; 0x46
 801639c:	eb09 0706 	add.w	r7, r9, r6
 80163a0:	d10f      	bne.n	80163c2 <_vfprintf_r+0x87a>
 80163a2:	f899 3000 	ldrb.w	r3, [r9]
 80163a6:	2b30      	cmp	r3, #48	; 0x30
 80163a8:	d109      	bne.n	80163be <_vfprintf_r+0x876>
 80163aa:	2200      	movs	r2, #0
 80163ac:	2300      	movs	r3, #0
 80163ae:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80163b2:	f7f1 f90b 	bl	80075cc <__aeabi_dcmpeq>
 80163b6:	b910      	cbnz	r0, 80163be <_vfprintf_r+0x876>
 80163b8:	f1c6 0601 	rsb	r6, r6, #1
 80163bc:	9620      	str	r6, [sp, #128]	; 0x80
 80163be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80163c0:	441f      	add	r7, r3
 80163c2:	2200      	movs	r2, #0
 80163c4:	2300      	movs	r3, #0
 80163c6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80163ca:	f7f1 f8ff 	bl	80075cc <__aeabi_dcmpeq>
 80163ce:	b948      	cbnz	r0, 80163e4 <_vfprintf_r+0x89c>
 80163d0:	2230      	movs	r2, #48	; 0x30
 80163d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80163d4:	429f      	cmp	r7, r3
 80163d6:	d906      	bls.n	80163e6 <_vfprintf_r+0x89e>
 80163d8:	1c59      	adds	r1, r3, #1
 80163da:	9124      	str	r1, [sp, #144]	; 0x90
 80163dc:	701a      	strb	r2, [r3, #0]
 80163de:	e7f8      	b.n	80163d2 <_vfprintf_r+0x88a>
 80163e0:	462e      	mov	r6, r5
 80163e2:	e7c3      	b.n	801636c <_vfprintf_r+0x824>
 80163e4:	9724      	str	r7, [sp, #144]	; 0x90
 80163e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80163e8:	e721      	b.n	801622e <_vfprintf_r+0x6e6>
 80163ea:	9b07      	ldr	r3, [sp, #28]
 80163ec:	2b46      	cmp	r3, #70	; 0x46
 80163ee:	f47f af2e 	bne.w	801624e <_vfprintf_r+0x706>
 80163f2:	2e00      	cmp	r6, #0
 80163f4:	dd1d      	ble.n	8016432 <_vfprintf_r+0x8ea>
 80163f6:	b915      	cbnz	r5, 80163fe <_vfprintf_r+0x8b6>
 80163f8:	f01a 0f01 	tst.w	sl, #1
 80163fc:	d034      	beq.n	8016468 <_vfprintf_r+0x920>
 80163fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016400:	18f3      	adds	r3, r6, r3
 8016402:	441d      	add	r5, r3
 8016404:	2366      	movs	r3, #102	; 0x66
 8016406:	9306      	str	r3, [sp, #24]
 8016408:	e033      	b.n	8016472 <_vfprintf_r+0x92a>
 801640a:	460a      	mov	r2, r1
 801640c:	e73f      	b.n	801628e <_vfprintf_r+0x746>
 801640e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8016412:	f803 1b01 	strb.w	r1, [r3], #1
 8016416:	e74f      	b.n	80162b8 <_vfprintf_r+0x770>
 8016418:	b941      	cbnz	r1, 801642c <_vfprintf_r+0x8e4>
 801641a:	2230      	movs	r2, #48	; 0x30
 801641c:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8016420:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8016424:	3330      	adds	r3, #48	; 0x30
 8016426:	1c51      	adds	r1, r2, #1
 8016428:	7013      	strb	r3, [r2, #0]
 801642a:	e749      	b.n	80162c0 <_vfprintf_r+0x778>
 801642c:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8016430:	e7f8      	b.n	8016424 <_vfprintf_r+0x8dc>
 8016432:	b915      	cbnz	r5, 801643a <_vfprintf_r+0x8f2>
 8016434:	f01a 0f01 	tst.w	sl, #1
 8016438:	d018      	beq.n	801646c <_vfprintf_r+0x924>
 801643a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801643c:	3301      	adds	r3, #1
 801643e:	e7e0      	b.n	8016402 <_vfprintf_r+0x8ba>
 8016440:	9b04      	ldr	r3, [sp, #16]
 8016442:	42b3      	cmp	r3, r6
 8016444:	dc06      	bgt.n	8016454 <_vfprintf_r+0x90c>
 8016446:	f01a 0f01 	tst.w	sl, #1
 801644a:	d025      	beq.n	8016498 <_vfprintf_r+0x950>
 801644c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801644e:	18f5      	adds	r5, r6, r3
 8016450:	2367      	movs	r3, #103	; 0x67
 8016452:	e7d8      	b.n	8016406 <_vfprintf_r+0x8be>
 8016454:	9b04      	ldr	r3, [sp, #16]
 8016456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016458:	2e00      	cmp	r6, #0
 801645a:	eb03 0502 	add.w	r5, r3, r2
 801645e:	dcf7      	bgt.n	8016450 <_vfprintf_r+0x908>
 8016460:	f1c6 0301 	rsb	r3, r6, #1
 8016464:	441d      	add	r5, r3
 8016466:	e7f3      	b.n	8016450 <_vfprintf_r+0x908>
 8016468:	4635      	mov	r5, r6
 801646a:	e7cb      	b.n	8016404 <_vfprintf_r+0x8bc>
 801646c:	2366      	movs	r3, #102	; 0x66
 801646e:	9306      	str	r3, [sp, #24]
 8016470:	2501      	movs	r5, #1
 8016472:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8016476:	9307      	str	r3, [sp, #28]
 8016478:	d01f      	beq.n	80164ba <_vfprintf_r+0x972>
 801647a:	2700      	movs	r7, #0
 801647c:	2e00      	cmp	r6, #0
 801647e:	9707      	str	r7, [sp, #28]
 8016480:	f77f af33 	ble.w	80162ea <_vfprintf_r+0x7a2>
 8016484:	9b08      	ldr	r3, [sp, #32]
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	2bff      	cmp	r3, #255	; 0xff
 801648a:	d107      	bne.n	801649c <_vfprintf_r+0x954>
 801648c:	9b07      	ldr	r3, [sp, #28]
 801648e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016490:	443b      	add	r3, r7
 8016492:	fb02 5503 	mla	r5, r2, r3, r5
 8016496:	e728      	b.n	80162ea <_vfprintf_r+0x7a2>
 8016498:	4635      	mov	r5, r6
 801649a:	e7d9      	b.n	8016450 <_vfprintf_r+0x908>
 801649c:	42b3      	cmp	r3, r6
 801649e:	daf5      	bge.n	801648c <_vfprintf_r+0x944>
 80164a0:	1af6      	subs	r6, r6, r3
 80164a2:	9b08      	ldr	r3, [sp, #32]
 80164a4:	785b      	ldrb	r3, [r3, #1]
 80164a6:	b133      	cbz	r3, 80164b6 <_vfprintf_r+0x96e>
 80164a8:	9b07      	ldr	r3, [sp, #28]
 80164aa:	3301      	adds	r3, #1
 80164ac:	9307      	str	r3, [sp, #28]
 80164ae:	9b08      	ldr	r3, [sp, #32]
 80164b0:	3301      	adds	r3, #1
 80164b2:	9308      	str	r3, [sp, #32]
 80164b4:	e7e6      	b.n	8016484 <_vfprintf_r+0x93c>
 80164b6:	3701      	adds	r7, #1
 80164b8:	e7e4      	b.n	8016484 <_vfprintf_r+0x93c>
 80164ba:	9f07      	ldr	r7, [sp, #28]
 80164bc:	e715      	b.n	80162ea <_vfprintf_r+0x7a2>
 80164be:	4632      	mov	r2, r6
 80164c0:	f01a 0f20 	tst.w	sl, #32
 80164c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80164c8:	9209      	str	r2, [sp, #36]	; 0x24
 80164ca:	d009      	beq.n	80164e0 <_vfprintf_r+0x998>
 80164cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80164ce:	4610      	mov	r0, r2
 80164d0:	17d1      	asrs	r1, r2, #31
 80164d2:	e9c3 0100 	strd	r0, r1, [r3]
 80164d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80164d8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80164dc:	f7ff bbb2 	b.w	8015c44 <_vfprintf_r+0xfc>
 80164e0:	f01a 0f10 	tst.w	sl, #16
 80164e4:	d002      	beq.n	80164ec <_vfprintf_r+0x9a4>
 80164e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80164e8:	601a      	str	r2, [r3, #0]
 80164ea:	e7f4      	b.n	80164d6 <_vfprintf_r+0x98e>
 80164ec:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80164f0:	d002      	beq.n	80164f8 <_vfprintf_r+0x9b0>
 80164f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80164f4:	801a      	strh	r2, [r3, #0]
 80164f6:	e7ee      	b.n	80164d6 <_vfprintf_r+0x98e>
 80164f8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80164fc:	d0f3      	beq.n	80164e6 <_vfprintf_r+0x99e>
 80164fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016500:	701a      	strb	r2, [r3, #0]
 8016502:	e7e8      	b.n	80164d6 <_vfprintf_r+0x98e>
 8016504:	f04a 0a10 	orr.w	sl, sl, #16
 8016508:	f01a 0f20 	tst.w	sl, #32
 801650c:	d01e      	beq.n	801654c <_vfprintf_r+0xa04>
 801650e:	3607      	adds	r6, #7
 8016510:	f026 0607 	bic.w	r6, r6, #7
 8016514:	f106 0308 	add.w	r3, r6, #8
 8016518:	e9d6 6700 	ldrd	r6, r7, [r6]
 801651c:	9309      	str	r3, [sp, #36]	; 0x24
 801651e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8016522:	2300      	movs	r3, #0
 8016524:	2200      	movs	r2, #0
 8016526:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801652a:	1c6a      	adds	r2, r5, #1
 801652c:	f000 815c 	beq.w	80167e8 <_vfprintf_r+0xca0>
 8016530:	4652      	mov	r2, sl
 8016532:	ea56 0107 	orrs.w	r1, r6, r7
 8016536:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 801653a:	f040 8155 	bne.w	80167e8 <_vfprintf_r+0xca0>
 801653e:	2d00      	cmp	r5, #0
 8016540:	f000 81d8 	beq.w	80168f4 <_vfprintf_r+0xdac>
 8016544:	2b01      	cmp	r3, #1
 8016546:	f040 8152 	bne.w	80167ee <_vfprintf_r+0xca6>
 801654a:	e54e      	b.n	8015fea <_vfprintf_r+0x4a2>
 801654c:	1d33      	adds	r3, r6, #4
 801654e:	f01a 0f10 	tst.w	sl, #16
 8016552:	9309      	str	r3, [sp, #36]	; 0x24
 8016554:	d001      	beq.n	801655a <_vfprintf_r+0xa12>
 8016556:	6836      	ldr	r6, [r6, #0]
 8016558:	e003      	b.n	8016562 <_vfprintf_r+0xa1a>
 801655a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801655e:	d002      	beq.n	8016566 <_vfprintf_r+0xa1e>
 8016560:	8836      	ldrh	r6, [r6, #0]
 8016562:	2700      	movs	r7, #0
 8016564:	e7db      	b.n	801651e <_vfprintf_r+0x9d6>
 8016566:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801656a:	d0f4      	beq.n	8016556 <_vfprintf_r+0xa0e>
 801656c:	7836      	ldrb	r6, [r6, #0]
 801656e:	e7f8      	b.n	8016562 <_vfprintf_r+0xa1a>
 8016570:	1d33      	adds	r3, r6, #4
 8016572:	9309      	str	r3, [sp, #36]	; 0x24
 8016574:	f647 0330 	movw	r3, #30768	; 0x7830
 8016578:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 801657c:	2278      	movs	r2, #120	; 0x78
 801657e:	4bb0      	ldr	r3, [pc, #704]	; (8016840 <_vfprintf_r+0xcf8>)
 8016580:	9318      	str	r3, [sp, #96]	; 0x60
 8016582:	6836      	ldr	r6, [r6, #0]
 8016584:	9206      	str	r2, [sp, #24]
 8016586:	2700      	movs	r7, #0
 8016588:	f04a 0a02 	orr.w	sl, sl, #2
 801658c:	2302      	movs	r3, #2
 801658e:	e7c9      	b.n	8016524 <_vfprintf_r+0x9dc>
 8016590:	1d33      	adds	r3, r6, #4
 8016592:	f8d6 9000 	ldr.w	r9, [r6]
 8016596:	9309      	str	r3, [sp, #36]	; 0x24
 8016598:	2600      	movs	r6, #0
 801659a:	1c69      	adds	r1, r5, #1
 801659c:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 80165a0:	f000 80e1 	beq.w	8016766 <_vfprintf_r+0xc1e>
 80165a4:	462a      	mov	r2, r5
 80165a6:	4631      	mov	r1, r6
 80165a8:	4648      	mov	r0, r9
 80165aa:	f7f0 fb89 	bl	8006cc0 <memchr>
 80165ae:	9003      	str	r0, [sp, #12]
 80165b0:	2800      	cmp	r0, #0
 80165b2:	f000 81b9 	beq.w	8016928 <_vfprintf_r+0xde0>
 80165b6:	eba0 0509 	sub.w	r5, r0, r9
 80165ba:	9603      	str	r6, [sp, #12]
 80165bc:	9610      	str	r6, [sp, #64]	; 0x40
 80165be:	4637      	mov	r7, r6
 80165c0:	9607      	str	r6, [sp, #28]
 80165c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165c4:	42ab      	cmp	r3, r5
 80165c6:	bfb8      	it	lt
 80165c8:	462b      	movlt	r3, r5
 80165ca:	9311      	str	r3, [sp, #68]	; 0x44
 80165cc:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80165d0:	b113      	cbz	r3, 80165d8 <_vfprintf_r+0xa90>
 80165d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165d4:	3301      	adds	r3, #1
 80165d6:	9311      	str	r3, [sp, #68]	; 0x44
 80165d8:	f01a 0302 	ands.w	r3, sl, #2
 80165dc:	931c      	str	r3, [sp, #112]	; 0x70
 80165de:	bf1e      	ittt	ne
 80165e0:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80165e2:	3302      	addne	r3, #2
 80165e4:	9311      	strne	r3, [sp, #68]	; 0x44
 80165e6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80165ea:	931d      	str	r3, [sp, #116]	; 0x74
 80165ec:	d122      	bne.n	8016634 <_vfprintf_r+0xaec>
 80165ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80165f2:	1a9b      	subs	r3, r3, r2
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80165f8:	dd1c      	ble.n	8016634 <_vfprintf_r+0xaec>
 80165fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80165fc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8016600:	2810      	cmp	r0, #16
 8016602:	4890      	ldr	r0, [pc, #576]	; (8016844 <_vfprintf_r+0xcfc>)
 8016604:	6020      	str	r0, [r4, #0]
 8016606:	f102 0201 	add.w	r2, r2, #1
 801660a:	f104 0108 	add.w	r1, r4, #8
 801660e:	f300 818e 	bgt.w	801692e <_vfprintf_r+0xde6>
 8016612:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016614:	6060      	str	r0, [r4, #4]
 8016616:	4403      	add	r3, r0
 8016618:	2a07      	cmp	r2, #7
 801661a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801661e:	f340 819b 	ble.w	8016958 <_vfprintf_r+0xe10>
 8016622:	aa26      	add	r2, sp, #152	; 0x98
 8016624:	4641      	mov	r1, r8
 8016626:	4658      	mov	r0, fp
 8016628:	f002 febb 	bl	80193a2 <__sprint_r>
 801662c:	2800      	cmp	r0, #0
 801662e:	f040 84c7 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016632:	ac29      	add	r4, sp, #164	; 0xa4
 8016634:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8016638:	b173      	cbz	r3, 8016658 <_vfprintf_r+0xb10>
 801663a:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 801663e:	6023      	str	r3, [r4, #0]
 8016640:	2301      	movs	r3, #1
 8016642:	6063      	str	r3, [r4, #4]
 8016644:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016646:	3301      	adds	r3, #1
 8016648:	9328      	str	r3, [sp, #160]	; 0xa0
 801664a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801664c:	3301      	adds	r3, #1
 801664e:	2b07      	cmp	r3, #7
 8016650:	9327      	str	r3, [sp, #156]	; 0x9c
 8016652:	f300 8183 	bgt.w	801695c <_vfprintf_r+0xe14>
 8016656:	3408      	adds	r4, #8
 8016658:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801665a:	b16b      	cbz	r3, 8016678 <_vfprintf_r+0xb30>
 801665c:	ab1f      	add	r3, sp, #124	; 0x7c
 801665e:	6023      	str	r3, [r4, #0]
 8016660:	2302      	movs	r3, #2
 8016662:	6063      	str	r3, [r4, #4]
 8016664:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016666:	3302      	adds	r3, #2
 8016668:	9328      	str	r3, [sp, #160]	; 0xa0
 801666a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801666c:	3301      	adds	r3, #1
 801666e:	2b07      	cmp	r3, #7
 8016670:	9327      	str	r3, [sp, #156]	; 0x9c
 8016672:	f300 817d 	bgt.w	8016970 <_vfprintf_r+0xe28>
 8016676:	3408      	adds	r4, #8
 8016678:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801667a:	2b80      	cmp	r3, #128	; 0x80
 801667c:	d122      	bne.n	80166c4 <_vfprintf_r+0xb7c>
 801667e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016680:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016682:	1a9b      	subs	r3, r3, r2
 8016684:	2b00      	cmp	r3, #0
 8016686:	9313      	str	r3, [sp, #76]	; 0x4c
 8016688:	dd1c      	ble.n	80166c4 <_vfprintf_r+0xb7c>
 801668a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801668c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8016690:	2810      	cmp	r0, #16
 8016692:	486d      	ldr	r0, [pc, #436]	; (8016848 <_vfprintf_r+0xd00>)
 8016694:	6020      	str	r0, [r4, #0]
 8016696:	f102 0201 	add.w	r2, r2, #1
 801669a:	f104 0108 	add.w	r1, r4, #8
 801669e:	f300 8171 	bgt.w	8016984 <_vfprintf_r+0xe3c>
 80166a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80166a4:	6060      	str	r0, [r4, #4]
 80166a6:	4403      	add	r3, r0
 80166a8:	2a07      	cmp	r2, #7
 80166aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80166ae:	f340 817e 	ble.w	80169ae <_vfprintf_r+0xe66>
 80166b2:	aa26      	add	r2, sp, #152	; 0x98
 80166b4:	4641      	mov	r1, r8
 80166b6:	4658      	mov	r0, fp
 80166b8:	f002 fe73 	bl	80193a2 <__sprint_r>
 80166bc:	2800      	cmp	r0, #0
 80166be:	f040 847f 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 80166c2:	ac29      	add	r4, sp, #164	; 0xa4
 80166c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166c6:	1b5b      	subs	r3, r3, r5
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	9310      	str	r3, [sp, #64]	; 0x40
 80166cc:	dd1c      	ble.n	8016708 <_vfprintf_r+0xbc0>
 80166ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80166d0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80166d4:	2810      	cmp	r0, #16
 80166d6:	485c      	ldr	r0, [pc, #368]	; (8016848 <_vfprintf_r+0xd00>)
 80166d8:	6020      	str	r0, [r4, #0]
 80166da:	f102 0201 	add.w	r2, r2, #1
 80166de:	f104 0108 	add.w	r1, r4, #8
 80166e2:	f300 8166 	bgt.w	80169b2 <_vfprintf_r+0xe6a>
 80166e6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80166e8:	6060      	str	r0, [r4, #4]
 80166ea:	4403      	add	r3, r0
 80166ec:	2a07      	cmp	r2, #7
 80166ee:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80166f2:	f340 8173 	ble.w	80169dc <_vfprintf_r+0xe94>
 80166f6:	aa26      	add	r2, sp, #152	; 0x98
 80166f8:	4641      	mov	r1, r8
 80166fa:	4658      	mov	r0, fp
 80166fc:	f002 fe51 	bl	80193a2 <__sprint_r>
 8016700:	2800      	cmp	r0, #0
 8016702:	f040 845d 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016706:	ac29      	add	r4, sp, #164	; 0xa4
 8016708:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801670a:	9310      	str	r3, [sp, #64]	; 0x40
 801670c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8016710:	f040 8166 	bne.w	80169e0 <_vfprintf_r+0xe98>
 8016714:	e9c4 9500 	strd	r9, r5, [r4]
 8016718:	441d      	add	r5, r3
 801671a:	9528      	str	r5, [sp, #160]	; 0xa0
 801671c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801671e:	3301      	adds	r3, #1
 8016720:	2b07      	cmp	r3, #7
 8016722:	9327      	str	r3, [sp, #156]	; 0x9c
 8016724:	f300 81a2 	bgt.w	8016a6c <_vfprintf_r+0xf24>
 8016728:	3408      	adds	r4, #8
 801672a:	f01a 0f04 	tst.w	sl, #4
 801672e:	f040 8429 	bne.w	8016f84 <_vfprintf_r+0x143c>
 8016732:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8016736:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016738:	428a      	cmp	r2, r1
 801673a:	bfac      	ite	ge
 801673c:	189b      	addge	r3, r3, r2
 801673e:	185b      	addlt	r3, r3, r1
 8016740:	930e      	str	r3, [sp, #56]	; 0x38
 8016742:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016744:	b13b      	cbz	r3, 8016756 <_vfprintf_r+0xc0e>
 8016746:	aa26      	add	r2, sp, #152	; 0x98
 8016748:	4641      	mov	r1, r8
 801674a:	4658      	mov	r0, fp
 801674c:	f002 fe29 	bl	80193a2 <__sprint_r>
 8016750:	2800      	cmp	r0, #0
 8016752:	f040 8435 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016756:	2300      	movs	r3, #0
 8016758:	9327      	str	r3, [sp, #156]	; 0x9c
 801675a:	9b03      	ldr	r3, [sp, #12]
 801675c:	2b00      	cmp	r3, #0
 801675e:	f040 844b 	bne.w	8016ff8 <_vfprintf_r+0x14b0>
 8016762:	ac29      	add	r4, sp, #164	; 0xa4
 8016764:	e6b7      	b.n	80164d6 <_vfprintf_r+0x98e>
 8016766:	4648      	mov	r0, r9
 8016768:	f7f0 fb04 	bl	8006d74 <strlen>
 801676c:	9603      	str	r6, [sp, #12]
 801676e:	4605      	mov	r5, r0
 8016770:	4633      	mov	r3, r6
 8016772:	e48a      	b.n	801608a <_vfprintf_r+0x542>
 8016774:	f04a 0a10 	orr.w	sl, sl, #16
 8016778:	f01a 0f20 	tst.w	sl, #32
 801677c:	d009      	beq.n	8016792 <_vfprintf_r+0xc4a>
 801677e:	3607      	adds	r6, #7
 8016780:	f026 0607 	bic.w	r6, r6, #7
 8016784:	f106 0308 	add.w	r3, r6, #8
 8016788:	e9d6 6700 	ldrd	r6, r7, [r6]
 801678c:	9309      	str	r3, [sp, #36]	; 0x24
 801678e:	2301      	movs	r3, #1
 8016790:	e6c8      	b.n	8016524 <_vfprintf_r+0x9dc>
 8016792:	1d33      	adds	r3, r6, #4
 8016794:	f01a 0f10 	tst.w	sl, #16
 8016798:	9309      	str	r3, [sp, #36]	; 0x24
 801679a:	d001      	beq.n	80167a0 <_vfprintf_r+0xc58>
 801679c:	6836      	ldr	r6, [r6, #0]
 801679e:	e003      	b.n	80167a8 <_vfprintf_r+0xc60>
 80167a0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80167a4:	d002      	beq.n	80167ac <_vfprintf_r+0xc64>
 80167a6:	8836      	ldrh	r6, [r6, #0]
 80167a8:	2700      	movs	r7, #0
 80167aa:	e7f0      	b.n	801678e <_vfprintf_r+0xc46>
 80167ac:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80167b0:	d0f4      	beq.n	801679c <_vfprintf_r+0xc54>
 80167b2:	7836      	ldrb	r6, [r6, #0]
 80167b4:	e7f8      	b.n	80167a8 <_vfprintf_r+0xc60>
 80167b6:	4b22      	ldr	r3, [pc, #136]	; (8016840 <_vfprintf_r+0xcf8>)
 80167b8:	f7ff bb3f 	b.w	8015e3a <_vfprintf_r+0x2f2>
 80167bc:	1d33      	adds	r3, r6, #4
 80167be:	f01a 0f10 	tst.w	sl, #16
 80167c2:	9309      	str	r3, [sp, #36]	; 0x24
 80167c4:	d001      	beq.n	80167ca <_vfprintf_r+0xc82>
 80167c6:	6836      	ldr	r6, [r6, #0]
 80167c8:	e003      	b.n	80167d2 <_vfprintf_r+0xc8a>
 80167ca:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80167ce:	d003      	beq.n	80167d8 <_vfprintf_r+0xc90>
 80167d0:	8836      	ldrh	r6, [r6, #0]
 80167d2:	2700      	movs	r7, #0
 80167d4:	f7ff bb3e 	b.w	8015e54 <_vfprintf_r+0x30c>
 80167d8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80167dc:	d0f3      	beq.n	80167c6 <_vfprintf_r+0xc7e>
 80167de:	7836      	ldrb	r6, [r6, #0]
 80167e0:	e7f7      	b.n	80167d2 <_vfprintf_r+0xc8a>
 80167e2:	4652      	mov	r2, sl
 80167e4:	2301      	movs	r3, #1
 80167e6:	e6a4      	b.n	8016532 <_vfprintf_r+0x9ea>
 80167e8:	2b01      	cmp	r3, #1
 80167ea:	f43f abf9 	beq.w	8015fe0 <_vfprintf_r+0x498>
 80167ee:	2b02      	cmp	r3, #2
 80167f0:	d06e      	beq.n	80168d0 <_vfprintf_r+0xd88>
 80167f2:	ab52      	add	r3, sp, #328	; 0x148
 80167f4:	08f1      	lsrs	r1, r6, #3
 80167f6:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80167fa:	08f8      	lsrs	r0, r7, #3
 80167fc:	f006 0207 	and.w	r2, r6, #7
 8016800:	4607      	mov	r7, r0
 8016802:	460e      	mov	r6, r1
 8016804:	3230      	adds	r2, #48	; 0x30
 8016806:	ea56 0107 	orrs.w	r1, r6, r7
 801680a:	f103 39ff 	add.w	r9, r3, #4294967295
 801680e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016812:	d113      	bne.n	801683c <_vfprintf_r+0xcf4>
 8016814:	f01a 0f01 	tst.w	sl, #1
 8016818:	d006      	beq.n	8016828 <_vfprintf_r+0xce0>
 801681a:	2a30      	cmp	r2, #48	; 0x30
 801681c:	d004      	beq.n	8016828 <_vfprintf_r+0xce0>
 801681e:	2230      	movs	r2, #48	; 0x30
 8016820:	f809 2c01 	strb.w	r2, [r9, #-1]
 8016824:	f1a3 0902 	sub.w	r9, r3, #2
 8016828:	ab52      	add	r3, sp, #328	; 0x148
 801682a:	9510      	str	r5, [sp, #64]	; 0x40
 801682c:	eba3 0509 	sub.w	r5, r3, r9
 8016830:	2300      	movs	r3, #0
 8016832:	9303      	str	r3, [sp, #12]
 8016834:	461f      	mov	r7, r3
 8016836:	9307      	str	r3, [sp, #28]
 8016838:	461e      	mov	r6, r3
 801683a:	e6c2      	b.n	80165c2 <_vfprintf_r+0xa7a>
 801683c:	464b      	mov	r3, r9
 801683e:	e7d9      	b.n	80167f4 <_vfprintf_r+0xcac>
 8016840:	0801cc70 	.word	0x0801cc70
 8016844:	0801ccb4 	.word	0x0801ccb4
 8016848:	0801ccc4 	.word	0x0801ccc4
 801684c:	2300      	movs	r3, #0
 801684e:	9304      	str	r3, [sp, #16]
 8016850:	ab52      	add	r3, sp, #328	; 0x148
 8016852:	9303      	str	r3, [sp, #12]
 8016854:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8016858:	9307      	str	r3, [sp, #28]
 801685a:	9b03      	ldr	r3, [sp, #12]
 801685c:	220a      	movs	r2, #10
 801685e:	f103 39ff 	add.w	r9, r3, #4294967295
 8016862:	4630      	mov	r0, r6
 8016864:	2300      	movs	r3, #0
 8016866:	4639      	mov	r1, r7
 8016868:	f7f0 ff40 	bl	80076ec <__aeabi_uldivmod>
 801686c:	9b03      	ldr	r3, [sp, #12]
 801686e:	3230      	adds	r2, #48	; 0x30
 8016870:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016874:	9b04      	ldr	r3, [sp, #16]
 8016876:	3301      	adds	r3, #1
 8016878:	9304      	str	r3, [sp, #16]
 801687a:	9b07      	ldr	r3, [sp, #28]
 801687c:	b1d3      	cbz	r3, 80168b4 <_vfprintf_r+0xd6c>
 801687e:	9b08      	ldr	r3, [sp, #32]
 8016880:	9a04      	ldr	r2, [sp, #16]
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	429a      	cmp	r2, r3
 8016886:	d115      	bne.n	80168b4 <_vfprintf_r+0xd6c>
 8016888:	2aff      	cmp	r2, #255	; 0xff
 801688a:	d013      	beq.n	80168b4 <_vfprintf_r+0xd6c>
 801688c:	2f00      	cmp	r7, #0
 801688e:	bf08      	it	eq
 8016890:	2e0a      	cmpeq	r6, #10
 8016892:	d30f      	bcc.n	80168b4 <_vfprintf_r+0xd6c>
 8016894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016896:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016898:	eba9 0903 	sub.w	r9, r9, r3
 801689c:	461a      	mov	r2, r3
 801689e:	4648      	mov	r0, r9
 80168a0:	f002 fcf2 	bl	8019288 <strncpy>
 80168a4:	9b08      	ldr	r3, [sp, #32]
 80168a6:	785b      	ldrb	r3, [r3, #1]
 80168a8:	b11b      	cbz	r3, 80168b2 <_vfprintf_r+0xd6a>
 80168aa:	9b08      	ldr	r3, [sp, #32]
 80168ac:	3301      	adds	r3, #1
 80168ae:	9308      	str	r3, [sp, #32]
 80168b0:	2300      	movs	r3, #0
 80168b2:	9304      	str	r3, [sp, #16]
 80168b4:	2300      	movs	r3, #0
 80168b6:	4630      	mov	r0, r6
 80168b8:	4639      	mov	r1, r7
 80168ba:	220a      	movs	r2, #10
 80168bc:	f7f0 ff16 	bl	80076ec <__aeabi_uldivmod>
 80168c0:	4606      	mov	r6, r0
 80168c2:	460f      	mov	r7, r1
 80168c4:	ea56 0307 	orrs.w	r3, r6, r7
 80168c8:	d0ae      	beq.n	8016828 <_vfprintf_r+0xce0>
 80168ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80168ce:	e7c4      	b.n	801685a <_vfprintf_r+0xd12>
 80168d0:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80168d4:	f006 030f 	and.w	r3, r6, #15
 80168d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80168da:	5cd3      	ldrb	r3, [r2, r3]
 80168dc:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80168e0:	0933      	lsrs	r3, r6, #4
 80168e2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80168e6:	093a      	lsrs	r2, r7, #4
 80168e8:	461e      	mov	r6, r3
 80168ea:	4617      	mov	r7, r2
 80168ec:	ea56 0307 	orrs.w	r3, r6, r7
 80168f0:	d1f0      	bne.n	80168d4 <_vfprintf_r+0xd8c>
 80168f2:	e799      	b.n	8016828 <_vfprintf_r+0xce0>
 80168f4:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d195      	bne.n	8016828 <_vfprintf_r+0xce0>
 80168fc:	07d6      	lsls	r6, r2, #31
 80168fe:	bf44      	itt	mi
 8016900:	2330      	movmi	r3, #48	; 0x30
 8016902:	f809 3d01 	strbmi.w	r3, [r9, #-1]!
 8016906:	e78f      	b.n	8016828 <_vfprintf_r+0xce0>
 8016908:	9b06      	ldr	r3, [sp, #24]
 801690a:	2b00      	cmp	r3, #0
 801690c:	f000 837a 	beq.w	8017004 <_vfprintf_r+0x14bc>
 8016910:	2000      	movs	r0, #0
 8016912:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8016916:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 801691a:	9609      	str	r6, [sp, #36]	; 0x24
 801691c:	f7ff bb3c 	b.w	8015f98 <_vfprintf_r+0x450>
 8016920:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8016924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016926:	e4ea      	b.n	80162fe <_vfprintf_r+0x7b6>
 8016928:	9b03      	ldr	r3, [sp, #12]
 801692a:	f7ff bbae 	b.w	801608a <_vfprintf_r+0x542>
 801692e:	2010      	movs	r0, #16
 8016930:	4403      	add	r3, r0
 8016932:	2a07      	cmp	r2, #7
 8016934:	6060      	str	r0, [r4, #4]
 8016936:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801693a:	dd08      	ble.n	801694e <_vfprintf_r+0xe06>
 801693c:	aa26      	add	r2, sp, #152	; 0x98
 801693e:	4641      	mov	r1, r8
 8016940:	4658      	mov	r0, fp
 8016942:	f002 fd2e 	bl	80193a2 <__sprint_r>
 8016946:	2800      	cmp	r0, #0
 8016948:	f040 833a 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 801694c:	a929      	add	r1, sp, #164	; 0xa4
 801694e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016950:	3b10      	subs	r3, #16
 8016952:	9313      	str	r3, [sp, #76]	; 0x4c
 8016954:	460c      	mov	r4, r1
 8016956:	e650      	b.n	80165fa <_vfprintf_r+0xab2>
 8016958:	460c      	mov	r4, r1
 801695a:	e66b      	b.n	8016634 <_vfprintf_r+0xaec>
 801695c:	aa26      	add	r2, sp, #152	; 0x98
 801695e:	4641      	mov	r1, r8
 8016960:	4658      	mov	r0, fp
 8016962:	f002 fd1e 	bl	80193a2 <__sprint_r>
 8016966:	2800      	cmp	r0, #0
 8016968:	f040 832a 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 801696c:	ac29      	add	r4, sp, #164	; 0xa4
 801696e:	e673      	b.n	8016658 <_vfprintf_r+0xb10>
 8016970:	aa26      	add	r2, sp, #152	; 0x98
 8016972:	4641      	mov	r1, r8
 8016974:	4658      	mov	r0, fp
 8016976:	f002 fd14 	bl	80193a2 <__sprint_r>
 801697a:	2800      	cmp	r0, #0
 801697c:	f040 8320 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016980:	ac29      	add	r4, sp, #164	; 0xa4
 8016982:	e679      	b.n	8016678 <_vfprintf_r+0xb30>
 8016984:	2010      	movs	r0, #16
 8016986:	4403      	add	r3, r0
 8016988:	2a07      	cmp	r2, #7
 801698a:	6060      	str	r0, [r4, #4]
 801698c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8016990:	dd08      	ble.n	80169a4 <_vfprintf_r+0xe5c>
 8016992:	aa26      	add	r2, sp, #152	; 0x98
 8016994:	4641      	mov	r1, r8
 8016996:	4658      	mov	r0, fp
 8016998:	f002 fd03 	bl	80193a2 <__sprint_r>
 801699c:	2800      	cmp	r0, #0
 801699e:	f040 830f 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 80169a2:	a929      	add	r1, sp, #164	; 0xa4
 80169a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169a6:	3b10      	subs	r3, #16
 80169a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80169aa:	460c      	mov	r4, r1
 80169ac:	e66d      	b.n	801668a <_vfprintf_r+0xb42>
 80169ae:	460c      	mov	r4, r1
 80169b0:	e688      	b.n	80166c4 <_vfprintf_r+0xb7c>
 80169b2:	2010      	movs	r0, #16
 80169b4:	4403      	add	r3, r0
 80169b6:	2a07      	cmp	r2, #7
 80169b8:	6060      	str	r0, [r4, #4]
 80169ba:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80169be:	dd08      	ble.n	80169d2 <_vfprintf_r+0xe8a>
 80169c0:	aa26      	add	r2, sp, #152	; 0x98
 80169c2:	4641      	mov	r1, r8
 80169c4:	4658      	mov	r0, fp
 80169c6:	f002 fcec 	bl	80193a2 <__sprint_r>
 80169ca:	2800      	cmp	r0, #0
 80169cc:	f040 82f8 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 80169d0:	a929      	add	r1, sp, #164	; 0xa4
 80169d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169d4:	3b10      	subs	r3, #16
 80169d6:	9310      	str	r3, [sp, #64]	; 0x40
 80169d8:	460c      	mov	r4, r1
 80169da:	e678      	b.n	80166ce <_vfprintf_r+0xb86>
 80169dc:	460c      	mov	r4, r1
 80169de:	e693      	b.n	8016708 <_vfprintf_r+0xbc0>
 80169e0:	9b06      	ldr	r3, [sp, #24]
 80169e2:	2b65      	cmp	r3, #101	; 0x65
 80169e4:	f340 8234 	ble.w	8016e50 <_vfprintf_r+0x1308>
 80169e8:	2200      	movs	r2, #0
 80169ea:	2300      	movs	r3, #0
 80169ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80169f0:	f7f0 fdec 	bl	80075cc <__aeabi_dcmpeq>
 80169f4:	2800      	cmp	r0, #0
 80169f6:	d069      	beq.n	8016acc <_vfprintf_r+0xf84>
 80169f8:	4b6e      	ldr	r3, [pc, #440]	; (8016bb4 <_vfprintf_r+0x106c>)
 80169fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80169fc:	6023      	str	r3, [r4, #0]
 80169fe:	2301      	movs	r3, #1
 8016a00:	441d      	add	r5, r3
 8016a02:	6063      	str	r3, [r4, #4]
 8016a04:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016a06:	9528      	str	r5, [sp, #160]	; 0xa0
 8016a08:	3301      	adds	r3, #1
 8016a0a:	2b07      	cmp	r3, #7
 8016a0c:	9327      	str	r3, [sp, #156]	; 0x9c
 8016a0e:	dc37      	bgt.n	8016a80 <_vfprintf_r+0xf38>
 8016a10:	3408      	adds	r4, #8
 8016a12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016a14:	9a04      	ldr	r2, [sp, #16]
 8016a16:	4293      	cmp	r3, r2
 8016a18:	db03      	blt.n	8016a22 <_vfprintf_r+0xeda>
 8016a1a:	f01a 0f01 	tst.w	sl, #1
 8016a1e:	f43f ae84 	beq.w	801672a <_vfprintf_r+0xbe2>
 8016a22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016a24:	6023      	str	r3, [r4, #0]
 8016a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a28:	6063      	str	r3, [r4, #4]
 8016a2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016a2e:	4413      	add	r3, r2
 8016a30:	9328      	str	r3, [sp, #160]	; 0xa0
 8016a32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016a34:	3301      	adds	r3, #1
 8016a36:	2b07      	cmp	r3, #7
 8016a38:	9327      	str	r3, [sp, #156]	; 0x9c
 8016a3a:	dc2b      	bgt.n	8016a94 <_vfprintf_r+0xf4c>
 8016a3c:	3408      	adds	r4, #8
 8016a3e:	9b04      	ldr	r3, [sp, #16]
 8016a40:	1e5d      	subs	r5, r3, #1
 8016a42:	2d00      	cmp	r5, #0
 8016a44:	f77f ae71 	ble.w	801672a <_vfprintf_r+0xbe2>
 8016a48:	4e5b      	ldr	r6, [pc, #364]	; (8016bb8 <_vfprintf_r+0x1070>)
 8016a4a:	2710      	movs	r7, #16
 8016a4c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016a50:	2d10      	cmp	r5, #16
 8016a52:	f103 0301 	add.w	r3, r3, #1
 8016a56:	f104 0108 	add.w	r1, r4, #8
 8016a5a:	6026      	str	r6, [r4, #0]
 8016a5c:	dc24      	bgt.n	8016aa8 <_vfprintf_r+0xf60>
 8016a5e:	6065      	str	r5, [r4, #4]
 8016a60:	2b07      	cmp	r3, #7
 8016a62:	4415      	add	r5, r2
 8016a64:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8016a68:	f340 8289 	ble.w	8016f7e <_vfprintf_r+0x1436>
 8016a6c:	aa26      	add	r2, sp, #152	; 0x98
 8016a6e:	4641      	mov	r1, r8
 8016a70:	4658      	mov	r0, fp
 8016a72:	f002 fc96 	bl	80193a2 <__sprint_r>
 8016a76:	2800      	cmp	r0, #0
 8016a78:	f040 82a2 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016a7c:	ac29      	add	r4, sp, #164	; 0xa4
 8016a7e:	e654      	b.n	801672a <_vfprintf_r+0xbe2>
 8016a80:	aa26      	add	r2, sp, #152	; 0x98
 8016a82:	4641      	mov	r1, r8
 8016a84:	4658      	mov	r0, fp
 8016a86:	f002 fc8c 	bl	80193a2 <__sprint_r>
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	f040 8298 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016a90:	ac29      	add	r4, sp, #164	; 0xa4
 8016a92:	e7be      	b.n	8016a12 <_vfprintf_r+0xeca>
 8016a94:	aa26      	add	r2, sp, #152	; 0x98
 8016a96:	4641      	mov	r1, r8
 8016a98:	4658      	mov	r0, fp
 8016a9a:	f002 fc82 	bl	80193a2 <__sprint_r>
 8016a9e:	2800      	cmp	r0, #0
 8016aa0:	f040 828e 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016aa4:	ac29      	add	r4, sp, #164	; 0xa4
 8016aa6:	e7ca      	b.n	8016a3e <_vfprintf_r+0xef6>
 8016aa8:	3210      	adds	r2, #16
 8016aaa:	2b07      	cmp	r3, #7
 8016aac:	6067      	str	r7, [r4, #4]
 8016aae:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016ab2:	dd08      	ble.n	8016ac6 <_vfprintf_r+0xf7e>
 8016ab4:	aa26      	add	r2, sp, #152	; 0x98
 8016ab6:	4641      	mov	r1, r8
 8016ab8:	4658      	mov	r0, fp
 8016aba:	f002 fc72 	bl	80193a2 <__sprint_r>
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	f040 827e 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016ac4:	a929      	add	r1, sp, #164	; 0xa4
 8016ac6:	3d10      	subs	r5, #16
 8016ac8:	460c      	mov	r4, r1
 8016aca:	e7bf      	b.n	8016a4c <_vfprintf_r+0xf04>
 8016acc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	dc74      	bgt.n	8016bbc <_vfprintf_r+0x1074>
 8016ad2:	4b38      	ldr	r3, [pc, #224]	; (8016bb4 <_vfprintf_r+0x106c>)
 8016ad4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016ad6:	6023      	str	r3, [r4, #0]
 8016ad8:	2301      	movs	r3, #1
 8016ada:	441d      	add	r5, r3
 8016adc:	6063      	str	r3, [r4, #4]
 8016ade:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016ae0:	9528      	str	r5, [sp, #160]	; 0xa0
 8016ae2:	3301      	adds	r3, #1
 8016ae4:	2b07      	cmp	r3, #7
 8016ae6:	9327      	str	r3, [sp, #156]	; 0x9c
 8016ae8:	dc3e      	bgt.n	8016b68 <_vfprintf_r+0x1020>
 8016aea:	3408      	adds	r4, #8
 8016aec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016aee:	b92b      	cbnz	r3, 8016afc <_vfprintf_r+0xfb4>
 8016af0:	9b04      	ldr	r3, [sp, #16]
 8016af2:	b91b      	cbnz	r3, 8016afc <_vfprintf_r+0xfb4>
 8016af4:	f01a 0f01 	tst.w	sl, #1
 8016af8:	f43f ae17 	beq.w	801672a <_vfprintf_r+0xbe2>
 8016afc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016afe:	6023      	str	r3, [r4, #0]
 8016b00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b02:	6063      	str	r3, [r4, #4]
 8016b04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016b08:	4413      	add	r3, r2
 8016b0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8016b0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016b0e:	3301      	adds	r3, #1
 8016b10:	2b07      	cmp	r3, #7
 8016b12:	9327      	str	r3, [sp, #156]	; 0x9c
 8016b14:	dc32      	bgt.n	8016b7c <_vfprintf_r+0x1034>
 8016b16:	3408      	adds	r4, #8
 8016b18:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8016b1a:	2d00      	cmp	r5, #0
 8016b1c:	da1b      	bge.n	8016b56 <_vfprintf_r+0x100e>
 8016b1e:	4e26      	ldr	r6, [pc, #152]	; (8016bb8 <_vfprintf_r+0x1070>)
 8016b20:	426d      	negs	r5, r5
 8016b22:	4623      	mov	r3, r4
 8016b24:	2710      	movs	r7, #16
 8016b26:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8016b2a:	2d10      	cmp	r5, #16
 8016b2c:	f102 0201 	add.w	r2, r2, #1
 8016b30:	f104 0408 	add.w	r4, r4, #8
 8016b34:	601e      	str	r6, [r3, #0]
 8016b36:	dc2b      	bgt.n	8016b90 <_vfprintf_r+0x1048>
 8016b38:	605d      	str	r5, [r3, #4]
 8016b3a:	2a07      	cmp	r2, #7
 8016b3c:	440d      	add	r5, r1
 8016b3e:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8016b42:	dd08      	ble.n	8016b56 <_vfprintf_r+0x100e>
 8016b44:	aa26      	add	r2, sp, #152	; 0x98
 8016b46:	4641      	mov	r1, r8
 8016b48:	4658      	mov	r0, fp
 8016b4a:	f002 fc2a 	bl	80193a2 <__sprint_r>
 8016b4e:	2800      	cmp	r0, #0
 8016b50:	f040 8236 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016b54:	ac29      	add	r4, sp, #164	; 0xa4
 8016b56:	9b04      	ldr	r3, [sp, #16]
 8016b58:	6063      	str	r3, [r4, #4]
 8016b5a:	9a04      	ldr	r2, [sp, #16]
 8016b5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016b5e:	f8c4 9000 	str.w	r9, [r4]
 8016b62:	4413      	add	r3, r2
 8016b64:	9328      	str	r3, [sp, #160]	; 0xa0
 8016b66:	e5d9      	b.n	801671c <_vfprintf_r+0xbd4>
 8016b68:	aa26      	add	r2, sp, #152	; 0x98
 8016b6a:	4641      	mov	r1, r8
 8016b6c:	4658      	mov	r0, fp
 8016b6e:	f002 fc18 	bl	80193a2 <__sprint_r>
 8016b72:	2800      	cmp	r0, #0
 8016b74:	f040 8224 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016b78:	ac29      	add	r4, sp, #164	; 0xa4
 8016b7a:	e7b7      	b.n	8016aec <_vfprintf_r+0xfa4>
 8016b7c:	aa26      	add	r2, sp, #152	; 0x98
 8016b7e:	4641      	mov	r1, r8
 8016b80:	4658      	mov	r0, fp
 8016b82:	f002 fc0e 	bl	80193a2 <__sprint_r>
 8016b86:	2800      	cmp	r0, #0
 8016b88:	f040 821a 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016b8c:	ac29      	add	r4, sp, #164	; 0xa4
 8016b8e:	e7c3      	b.n	8016b18 <_vfprintf_r+0xfd0>
 8016b90:	3110      	adds	r1, #16
 8016b92:	2a07      	cmp	r2, #7
 8016b94:	605f      	str	r7, [r3, #4]
 8016b96:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8016b9a:	dd08      	ble.n	8016bae <_vfprintf_r+0x1066>
 8016b9c:	aa26      	add	r2, sp, #152	; 0x98
 8016b9e:	4641      	mov	r1, r8
 8016ba0:	4658      	mov	r0, fp
 8016ba2:	f002 fbfe 	bl	80193a2 <__sprint_r>
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	f040 820a 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016bac:	ac29      	add	r4, sp, #164	; 0xa4
 8016bae:	3d10      	subs	r5, #16
 8016bb0:	4623      	mov	r3, r4
 8016bb2:	e7b8      	b.n	8016b26 <_vfprintf_r+0xfde>
 8016bb4:	0801cc92 	.word	0x0801cc92
 8016bb8:	0801ccc4 	.word	0x0801ccc4
 8016bbc:	9b04      	ldr	r3, [sp, #16]
 8016bbe:	42b3      	cmp	r3, r6
 8016bc0:	bfa8      	it	ge
 8016bc2:	4633      	movge	r3, r6
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	461d      	mov	r5, r3
 8016bc8:	dd0b      	ble.n	8016be2 <_vfprintf_r+0x109a>
 8016bca:	e9c4 9300 	strd	r9, r3, [r4]
 8016bce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016bd0:	442b      	add	r3, r5
 8016bd2:	9328      	str	r3, [sp, #160]	; 0xa0
 8016bd4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016bd6:	3301      	adds	r3, #1
 8016bd8:	2b07      	cmp	r3, #7
 8016bda:	9327      	str	r3, [sp, #156]	; 0x9c
 8016bdc:	f300 8086 	bgt.w	8016cec <_vfprintf_r+0x11a4>
 8016be0:	3408      	adds	r4, #8
 8016be2:	2d00      	cmp	r5, #0
 8016be4:	bfac      	ite	ge
 8016be6:	1b75      	subge	r5, r6, r5
 8016be8:	4635      	movlt	r5, r6
 8016bea:	2d00      	cmp	r5, #0
 8016bec:	dd19      	ble.n	8016c22 <_vfprintf_r+0x10da>
 8016bee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016bf2:	4896      	ldr	r0, [pc, #600]	; (8016e4c <_vfprintf_r+0x1304>)
 8016bf4:	6020      	str	r0, [r4, #0]
 8016bf6:	2d10      	cmp	r5, #16
 8016bf8:	f103 0301 	add.w	r3, r3, #1
 8016bfc:	f104 0108 	add.w	r1, r4, #8
 8016c00:	dc7e      	bgt.n	8016d00 <_vfprintf_r+0x11b8>
 8016c02:	6065      	str	r5, [r4, #4]
 8016c04:	2b07      	cmp	r3, #7
 8016c06:	4415      	add	r5, r2
 8016c08:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8016c0c:	f340 808b 	ble.w	8016d26 <_vfprintf_r+0x11de>
 8016c10:	aa26      	add	r2, sp, #152	; 0x98
 8016c12:	4641      	mov	r1, r8
 8016c14:	4658      	mov	r0, fp
 8016c16:	f002 fbc4 	bl	80193a2 <__sprint_r>
 8016c1a:	2800      	cmp	r0, #0
 8016c1c:	f040 81d0 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016c20:	ac29      	add	r4, sp, #164	; 0xa4
 8016c22:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8016c26:	444e      	add	r6, r9
 8016c28:	d009      	beq.n	8016c3e <_vfprintf_r+0x10f6>
 8016c2a:	9b07      	ldr	r3, [sp, #28]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d17c      	bne.n	8016d2a <_vfprintf_r+0x11e2>
 8016c30:	2f00      	cmp	r7, #0
 8016c32:	d17c      	bne.n	8016d2e <_vfprintf_r+0x11e6>
 8016c34:	9b04      	ldr	r3, [sp, #16]
 8016c36:	444b      	add	r3, r9
 8016c38:	429e      	cmp	r6, r3
 8016c3a:	bf28      	it	cs
 8016c3c:	461e      	movcs	r6, r3
 8016c3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016c40:	9a04      	ldr	r2, [sp, #16]
 8016c42:	4293      	cmp	r3, r2
 8016c44:	db02      	blt.n	8016c4c <_vfprintf_r+0x1104>
 8016c46:	f01a 0f01 	tst.w	sl, #1
 8016c4a:	d00e      	beq.n	8016c6a <_vfprintf_r+0x1122>
 8016c4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016c4e:	6023      	str	r3, [r4, #0]
 8016c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c52:	6063      	str	r3, [r4, #4]
 8016c54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016c58:	4413      	add	r3, r2
 8016c5a:	9328      	str	r3, [sp, #160]	; 0xa0
 8016c5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016c5e:	3301      	adds	r3, #1
 8016c60:	2b07      	cmp	r3, #7
 8016c62:	9327      	str	r3, [sp, #156]	; 0x9c
 8016c64:	f300 80dd 	bgt.w	8016e22 <_vfprintf_r+0x12da>
 8016c68:	3408      	adds	r4, #8
 8016c6a:	9b04      	ldr	r3, [sp, #16]
 8016c6c:	9a04      	ldr	r2, [sp, #16]
 8016c6e:	eb09 0503 	add.w	r5, r9, r3
 8016c72:	1bab      	subs	r3, r5, r6
 8016c74:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8016c76:	1b55      	subs	r5, r2, r5
 8016c78:	429d      	cmp	r5, r3
 8016c7a:	bfa8      	it	ge
 8016c7c:	461d      	movge	r5, r3
 8016c7e:	2d00      	cmp	r5, #0
 8016c80:	dd0b      	ble.n	8016c9a <_vfprintf_r+0x1152>
 8016c82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016c84:	442b      	add	r3, r5
 8016c86:	9328      	str	r3, [sp, #160]	; 0xa0
 8016c88:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016c8a:	3301      	adds	r3, #1
 8016c8c:	2b07      	cmp	r3, #7
 8016c8e:	e9c4 6500 	strd	r6, r5, [r4]
 8016c92:	9327      	str	r3, [sp, #156]	; 0x9c
 8016c94:	f300 80cf 	bgt.w	8016e36 <_vfprintf_r+0x12ee>
 8016c98:	3408      	adds	r4, #8
 8016c9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016c9c:	9a04      	ldr	r2, [sp, #16]
 8016c9e:	2d00      	cmp	r5, #0
 8016ca0:	eba2 0303 	sub.w	r3, r2, r3
 8016ca4:	bfac      	ite	ge
 8016ca6:	1b5d      	subge	r5, r3, r5
 8016ca8:	461d      	movlt	r5, r3
 8016caa:	2d00      	cmp	r5, #0
 8016cac:	f77f ad3d 	ble.w	801672a <_vfprintf_r+0xbe2>
 8016cb0:	4e66      	ldr	r6, [pc, #408]	; (8016e4c <_vfprintf_r+0x1304>)
 8016cb2:	2710      	movs	r7, #16
 8016cb4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016cb8:	2d10      	cmp	r5, #16
 8016cba:	f103 0301 	add.w	r3, r3, #1
 8016cbe:	f104 0108 	add.w	r1, r4, #8
 8016cc2:	6026      	str	r6, [r4, #0]
 8016cc4:	f77f aecb 	ble.w	8016a5e <_vfprintf_r+0xf16>
 8016cc8:	3210      	adds	r2, #16
 8016cca:	2b07      	cmp	r3, #7
 8016ccc:	6067      	str	r7, [r4, #4]
 8016cce:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016cd2:	dd08      	ble.n	8016ce6 <_vfprintf_r+0x119e>
 8016cd4:	aa26      	add	r2, sp, #152	; 0x98
 8016cd6:	4641      	mov	r1, r8
 8016cd8:	4658      	mov	r0, fp
 8016cda:	f002 fb62 	bl	80193a2 <__sprint_r>
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	f040 816e 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016ce4:	a929      	add	r1, sp, #164	; 0xa4
 8016ce6:	3d10      	subs	r5, #16
 8016ce8:	460c      	mov	r4, r1
 8016cea:	e7e3      	b.n	8016cb4 <_vfprintf_r+0x116c>
 8016cec:	aa26      	add	r2, sp, #152	; 0x98
 8016cee:	4641      	mov	r1, r8
 8016cf0:	4658      	mov	r0, fp
 8016cf2:	f002 fb56 	bl	80193a2 <__sprint_r>
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	f040 8162 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016cfc:	ac29      	add	r4, sp, #164	; 0xa4
 8016cfe:	e770      	b.n	8016be2 <_vfprintf_r+0x109a>
 8016d00:	2010      	movs	r0, #16
 8016d02:	4402      	add	r2, r0
 8016d04:	2b07      	cmp	r3, #7
 8016d06:	6060      	str	r0, [r4, #4]
 8016d08:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016d0c:	dd08      	ble.n	8016d20 <_vfprintf_r+0x11d8>
 8016d0e:	aa26      	add	r2, sp, #152	; 0x98
 8016d10:	4641      	mov	r1, r8
 8016d12:	4658      	mov	r0, fp
 8016d14:	f002 fb45 	bl	80193a2 <__sprint_r>
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	f040 8151 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016d1e:	a929      	add	r1, sp, #164	; 0xa4
 8016d20:	3d10      	subs	r5, #16
 8016d22:	460c      	mov	r4, r1
 8016d24:	e763      	b.n	8016bee <_vfprintf_r+0x10a6>
 8016d26:	460c      	mov	r4, r1
 8016d28:	e77b      	b.n	8016c22 <_vfprintf_r+0x10da>
 8016d2a:	2f00      	cmp	r7, #0
 8016d2c:	d049      	beq.n	8016dc2 <_vfprintf_r+0x127a>
 8016d2e:	3f01      	subs	r7, #1
 8016d30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d32:	6023      	str	r3, [r4, #0]
 8016d34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d36:	6063      	str	r3, [r4, #4]
 8016d38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016d3c:	4413      	add	r3, r2
 8016d3e:	9328      	str	r3, [sp, #160]	; 0xa0
 8016d40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016d42:	3301      	adds	r3, #1
 8016d44:	2b07      	cmp	r3, #7
 8016d46:	9327      	str	r3, [sp, #156]	; 0x9c
 8016d48:	dc42      	bgt.n	8016dd0 <_vfprintf_r+0x1288>
 8016d4a:	3408      	adds	r4, #8
 8016d4c:	9b04      	ldr	r3, [sp, #16]
 8016d4e:	444b      	add	r3, r9
 8016d50:	1b9a      	subs	r2, r3, r6
 8016d52:	9b08      	ldr	r3, [sp, #32]
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	4293      	cmp	r3, r2
 8016d58:	bfa8      	it	ge
 8016d5a:	4613      	movge	r3, r2
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	461d      	mov	r5, r3
 8016d60:	dd0a      	ble.n	8016d78 <_vfprintf_r+0x1230>
 8016d62:	e9c4 6300 	strd	r6, r3, [r4]
 8016d66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016d68:	442b      	add	r3, r5
 8016d6a:	9328      	str	r3, [sp, #160]	; 0xa0
 8016d6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016d6e:	3301      	adds	r3, #1
 8016d70:	2b07      	cmp	r3, #7
 8016d72:	9327      	str	r3, [sp, #156]	; 0x9c
 8016d74:	dc36      	bgt.n	8016de4 <_vfprintf_r+0x129c>
 8016d76:	3408      	adds	r4, #8
 8016d78:	9b08      	ldr	r3, [sp, #32]
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	2d00      	cmp	r5, #0
 8016d7e:	bfac      	ite	ge
 8016d80:	1b5d      	subge	r5, r3, r5
 8016d82:	461d      	movlt	r5, r3
 8016d84:	2d00      	cmp	r5, #0
 8016d86:	dd18      	ble.n	8016dba <_vfprintf_r+0x1272>
 8016d88:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8016d8c:	482f      	ldr	r0, [pc, #188]	; (8016e4c <_vfprintf_r+0x1304>)
 8016d8e:	6020      	str	r0, [r4, #0]
 8016d90:	2d10      	cmp	r5, #16
 8016d92:	f102 0201 	add.w	r2, r2, #1
 8016d96:	f104 0108 	add.w	r1, r4, #8
 8016d9a:	dc2d      	bgt.n	8016df8 <_vfprintf_r+0x12b0>
 8016d9c:	442b      	add	r3, r5
 8016d9e:	2a07      	cmp	r2, #7
 8016da0:	6065      	str	r5, [r4, #4]
 8016da2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8016da6:	dd3a      	ble.n	8016e1e <_vfprintf_r+0x12d6>
 8016da8:	aa26      	add	r2, sp, #152	; 0x98
 8016daa:	4641      	mov	r1, r8
 8016dac:	4658      	mov	r0, fp
 8016dae:	f002 faf8 	bl	80193a2 <__sprint_r>
 8016db2:	2800      	cmp	r0, #0
 8016db4:	f040 8104 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016db8:	ac29      	add	r4, sp, #164	; 0xa4
 8016dba:	9b08      	ldr	r3, [sp, #32]
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	441e      	add	r6, r3
 8016dc0:	e733      	b.n	8016c2a <_vfprintf_r+0x10e2>
 8016dc2:	9b08      	ldr	r3, [sp, #32]
 8016dc4:	3b01      	subs	r3, #1
 8016dc6:	9308      	str	r3, [sp, #32]
 8016dc8:	9b07      	ldr	r3, [sp, #28]
 8016dca:	3b01      	subs	r3, #1
 8016dcc:	9307      	str	r3, [sp, #28]
 8016dce:	e7af      	b.n	8016d30 <_vfprintf_r+0x11e8>
 8016dd0:	aa26      	add	r2, sp, #152	; 0x98
 8016dd2:	4641      	mov	r1, r8
 8016dd4:	4658      	mov	r0, fp
 8016dd6:	f002 fae4 	bl	80193a2 <__sprint_r>
 8016dda:	2800      	cmp	r0, #0
 8016ddc:	f040 80f0 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016de0:	ac29      	add	r4, sp, #164	; 0xa4
 8016de2:	e7b3      	b.n	8016d4c <_vfprintf_r+0x1204>
 8016de4:	aa26      	add	r2, sp, #152	; 0x98
 8016de6:	4641      	mov	r1, r8
 8016de8:	4658      	mov	r0, fp
 8016dea:	f002 fada 	bl	80193a2 <__sprint_r>
 8016dee:	2800      	cmp	r0, #0
 8016df0:	f040 80e6 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016df4:	ac29      	add	r4, sp, #164	; 0xa4
 8016df6:	e7bf      	b.n	8016d78 <_vfprintf_r+0x1230>
 8016df8:	2010      	movs	r0, #16
 8016dfa:	4403      	add	r3, r0
 8016dfc:	2a07      	cmp	r2, #7
 8016dfe:	6060      	str	r0, [r4, #4]
 8016e00:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8016e04:	dd08      	ble.n	8016e18 <_vfprintf_r+0x12d0>
 8016e06:	aa26      	add	r2, sp, #152	; 0x98
 8016e08:	4641      	mov	r1, r8
 8016e0a:	4658      	mov	r0, fp
 8016e0c:	f002 fac9 	bl	80193a2 <__sprint_r>
 8016e10:	2800      	cmp	r0, #0
 8016e12:	f040 80d5 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016e16:	a929      	add	r1, sp, #164	; 0xa4
 8016e18:	3d10      	subs	r5, #16
 8016e1a:	460c      	mov	r4, r1
 8016e1c:	e7b4      	b.n	8016d88 <_vfprintf_r+0x1240>
 8016e1e:	460c      	mov	r4, r1
 8016e20:	e7cb      	b.n	8016dba <_vfprintf_r+0x1272>
 8016e22:	aa26      	add	r2, sp, #152	; 0x98
 8016e24:	4641      	mov	r1, r8
 8016e26:	4658      	mov	r0, fp
 8016e28:	f002 fabb 	bl	80193a2 <__sprint_r>
 8016e2c:	2800      	cmp	r0, #0
 8016e2e:	f040 80c7 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016e32:	ac29      	add	r4, sp, #164	; 0xa4
 8016e34:	e719      	b.n	8016c6a <_vfprintf_r+0x1122>
 8016e36:	aa26      	add	r2, sp, #152	; 0x98
 8016e38:	4641      	mov	r1, r8
 8016e3a:	4658      	mov	r0, fp
 8016e3c:	f002 fab1 	bl	80193a2 <__sprint_r>
 8016e40:	2800      	cmp	r0, #0
 8016e42:	f040 80bd 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016e46:	ac29      	add	r4, sp, #164	; 0xa4
 8016e48:	e727      	b.n	8016c9a <_vfprintf_r+0x1152>
 8016e4a:	bf00      	nop
 8016e4c:	0801ccc4 	.word	0x0801ccc4
 8016e50:	9a04      	ldr	r2, [sp, #16]
 8016e52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016e54:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016e56:	2a01      	cmp	r2, #1
 8016e58:	f105 0501 	add.w	r5, r5, #1
 8016e5c:	f103 0301 	add.w	r3, r3, #1
 8016e60:	f104 0608 	add.w	r6, r4, #8
 8016e64:	dc02      	bgt.n	8016e6c <_vfprintf_r+0x1324>
 8016e66:	f01a 0f01 	tst.w	sl, #1
 8016e6a:	d07d      	beq.n	8016f68 <_vfprintf_r+0x1420>
 8016e6c:	2201      	movs	r2, #1
 8016e6e:	2b07      	cmp	r3, #7
 8016e70:	f8c4 9000 	str.w	r9, [r4]
 8016e74:	6062      	str	r2, [r4, #4]
 8016e76:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8016e7a:	dd08      	ble.n	8016e8e <_vfprintf_r+0x1346>
 8016e7c:	aa26      	add	r2, sp, #152	; 0x98
 8016e7e:	4641      	mov	r1, r8
 8016e80:	4658      	mov	r0, fp
 8016e82:	f002 fa8e 	bl	80193a2 <__sprint_r>
 8016e86:	2800      	cmp	r0, #0
 8016e88:	f040 809a 	bne.w	8016fc0 <_vfprintf_r+0x1478>
 8016e8c:	ae29      	add	r6, sp, #164	; 0xa4
 8016e8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016e90:	6033      	str	r3, [r6, #0]
 8016e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e94:	6073      	str	r3, [r6, #4]
 8016e96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e9a:	4413      	add	r3, r2
 8016e9c:	9328      	str	r3, [sp, #160]	; 0xa0
 8016e9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016ea0:	3301      	adds	r3, #1
 8016ea2:	2b07      	cmp	r3, #7
 8016ea4:	9327      	str	r3, [sp, #156]	; 0x9c
 8016ea6:	dc31      	bgt.n	8016f0c <_vfprintf_r+0x13c4>
 8016ea8:	3608      	adds	r6, #8
 8016eaa:	9b04      	ldr	r3, [sp, #16]
 8016eac:	2200      	movs	r2, #0
 8016eae:	1e5c      	subs	r4, r3, #1
 8016eb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	f7f0 fb89 	bl	80075cc <__aeabi_dcmpeq>
 8016eba:	2800      	cmp	r0, #0
 8016ebc:	d12f      	bne.n	8016f1e <_vfprintf_r+0x13d6>
 8016ebe:	f109 0301 	add.w	r3, r9, #1
 8016ec2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016ec4:	9904      	ldr	r1, [sp, #16]
 8016ec6:	e9c6 3400 	strd	r3, r4, [r6]
 8016eca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016ecc:	3201      	adds	r2, #1
 8016ece:	3b01      	subs	r3, #1
 8016ed0:	440b      	add	r3, r1
 8016ed2:	2a07      	cmp	r2, #7
 8016ed4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8016ed8:	dd4f      	ble.n	8016f7a <_vfprintf_r+0x1432>
 8016eda:	aa26      	add	r2, sp, #152	; 0x98
 8016edc:	4641      	mov	r1, r8
 8016ede:	4658      	mov	r0, fp
 8016ee0:	f002 fa5f 	bl	80193a2 <__sprint_r>
 8016ee4:	2800      	cmp	r0, #0
 8016ee6:	d16b      	bne.n	8016fc0 <_vfprintf_r+0x1478>
 8016ee8:	ae29      	add	r6, sp, #164	; 0xa4
 8016eea:	ab22      	add	r3, sp, #136	; 0x88
 8016eec:	6033      	str	r3, [r6, #0]
 8016eee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ef0:	6073      	str	r3, [r6, #4]
 8016ef2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016ef4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016ef6:	4413      	add	r3, r2
 8016ef8:	9328      	str	r3, [sp, #160]	; 0xa0
 8016efa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016efc:	3301      	adds	r3, #1
 8016efe:	2b07      	cmp	r3, #7
 8016f00:	9327      	str	r3, [sp, #156]	; 0x9c
 8016f02:	f73f adb3 	bgt.w	8016a6c <_vfprintf_r+0xf24>
 8016f06:	f106 0408 	add.w	r4, r6, #8
 8016f0a:	e40e      	b.n	801672a <_vfprintf_r+0xbe2>
 8016f0c:	aa26      	add	r2, sp, #152	; 0x98
 8016f0e:	4641      	mov	r1, r8
 8016f10:	4658      	mov	r0, fp
 8016f12:	f002 fa46 	bl	80193a2 <__sprint_r>
 8016f16:	2800      	cmp	r0, #0
 8016f18:	d152      	bne.n	8016fc0 <_vfprintf_r+0x1478>
 8016f1a:	ae29      	add	r6, sp, #164	; 0xa4
 8016f1c:	e7c5      	b.n	8016eaa <_vfprintf_r+0x1362>
 8016f1e:	2c00      	cmp	r4, #0
 8016f20:	dde3      	ble.n	8016eea <_vfprintf_r+0x13a2>
 8016f22:	4d40      	ldr	r5, [pc, #256]	; (8017024 <_vfprintf_r+0x14dc>)
 8016f24:	2710      	movs	r7, #16
 8016f26:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016f2a:	2c10      	cmp	r4, #16
 8016f2c:	f103 0301 	add.w	r3, r3, #1
 8016f30:	f106 0108 	add.w	r1, r6, #8
 8016f34:	6035      	str	r5, [r6, #0]
 8016f36:	dc07      	bgt.n	8016f48 <_vfprintf_r+0x1400>
 8016f38:	6074      	str	r4, [r6, #4]
 8016f3a:	2b07      	cmp	r3, #7
 8016f3c:	4414      	add	r4, r2
 8016f3e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8016f42:	dcca      	bgt.n	8016eda <_vfprintf_r+0x1392>
 8016f44:	460e      	mov	r6, r1
 8016f46:	e7d0      	b.n	8016eea <_vfprintf_r+0x13a2>
 8016f48:	3210      	adds	r2, #16
 8016f4a:	2b07      	cmp	r3, #7
 8016f4c:	6077      	str	r7, [r6, #4]
 8016f4e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016f52:	dd06      	ble.n	8016f62 <_vfprintf_r+0x141a>
 8016f54:	aa26      	add	r2, sp, #152	; 0x98
 8016f56:	4641      	mov	r1, r8
 8016f58:	4658      	mov	r0, fp
 8016f5a:	f002 fa22 	bl	80193a2 <__sprint_r>
 8016f5e:	bb78      	cbnz	r0, 8016fc0 <_vfprintf_r+0x1478>
 8016f60:	a929      	add	r1, sp, #164	; 0xa4
 8016f62:	3c10      	subs	r4, #16
 8016f64:	460e      	mov	r6, r1
 8016f66:	e7de      	b.n	8016f26 <_vfprintf_r+0x13de>
 8016f68:	2201      	movs	r2, #1
 8016f6a:	2b07      	cmp	r3, #7
 8016f6c:	f8c4 9000 	str.w	r9, [r4]
 8016f70:	6062      	str	r2, [r4, #4]
 8016f72:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8016f76:	ddb8      	ble.n	8016eea <_vfprintf_r+0x13a2>
 8016f78:	e7af      	b.n	8016eda <_vfprintf_r+0x1392>
 8016f7a:	3608      	adds	r6, #8
 8016f7c:	e7b5      	b.n	8016eea <_vfprintf_r+0x13a2>
 8016f7e:	460c      	mov	r4, r1
 8016f80:	f7ff bbd3 	b.w	801672a <_vfprintf_r+0xbe2>
 8016f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016f88:	1a9d      	subs	r5, r3, r2
 8016f8a:	2d00      	cmp	r5, #0
 8016f8c:	f77f abd1 	ble.w	8016732 <_vfprintf_r+0xbea>
 8016f90:	4e25      	ldr	r6, [pc, #148]	; (8017028 <_vfprintf_r+0x14e0>)
 8016f92:	2710      	movs	r7, #16
 8016f94:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016f98:	2d10      	cmp	r5, #16
 8016f9a:	f103 0301 	add.w	r3, r3, #1
 8016f9e:	6026      	str	r6, [r4, #0]
 8016fa0:	dc18      	bgt.n	8016fd4 <_vfprintf_r+0x148c>
 8016fa2:	6065      	str	r5, [r4, #4]
 8016fa4:	2b07      	cmp	r3, #7
 8016fa6:	4415      	add	r5, r2
 8016fa8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8016fac:	f77f abc1 	ble.w	8016732 <_vfprintf_r+0xbea>
 8016fb0:	aa26      	add	r2, sp, #152	; 0x98
 8016fb2:	4641      	mov	r1, r8
 8016fb4:	4658      	mov	r0, fp
 8016fb6:	f002 f9f4 	bl	80193a2 <__sprint_r>
 8016fba:	2800      	cmp	r0, #0
 8016fbc:	f43f abb9 	beq.w	8016732 <_vfprintf_r+0xbea>
 8016fc0:	9b03      	ldr	r3, [sp, #12]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f43f a895 	beq.w	80160f2 <_vfprintf_r+0x5aa>
 8016fc8:	4619      	mov	r1, r3
 8016fca:	4658      	mov	r0, fp
 8016fcc:	f001 f8b6 	bl	801813c <_free_r>
 8016fd0:	f7ff b88f 	b.w	80160f2 <_vfprintf_r+0x5aa>
 8016fd4:	3210      	adds	r2, #16
 8016fd6:	2b07      	cmp	r3, #7
 8016fd8:	6067      	str	r7, [r4, #4]
 8016fda:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016fde:	dc02      	bgt.n	8016fe6 <_vfprintf_r+0x149e>
 8016fe0:	3408      	adds	r4, #8
 8016fe2:	3d10      	subs	r5, #16
 8016fe4:	e7d6      	b.n	8016f94 <_vfprintf_r+0x144c>
 8016fe6:	aa26      	add	r2, sp, #152	; 0x98
 8016fe8:	4641      	mov	r1, r8
 8016fea:	4658      	mov	r0, fp
 8016fec:	f002 f9d9 	bl	80193a2 <__sprint_r>
 8016ff0:	2800      	cmp	r0, #0
 8016ff2:	d1e5      	bne.n	8016fc0 <_vfprintf_r+0x1478>
 8016ff4:	ac29      	add	r4, sp, #164	; 0xa4
 8016ff6:	e7f4      	b.n	8016fe2 <_vfprintf_r+0x149a>
 8016ff8:	9903      	ldr	r1, [sp, #12]
 8016ffa:	4658      	mov	r0, fp
 8016ffc:	f001 f89e 	bl	801813c <_free_r>
 8017000:	f7ff bbaf 	b.w	8016762 <_vfprintf_r+0xc1a>
 8017004:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017006:	b91b      	cbnz	r3, 8017010 <_vfprintf_r+0x14c8>
 8017008:	2300      	movs	r3, #0
 801700a:	9327      	str	r3, [sp, #156]	; 0x9c
 801700c:	f7ff b871 	b.w	80160f2 <_vfprintf_r+0x5aa>
 8017010:	aa26      	add	r2, sp, #152	; 0x98
 8017012:	4641      	mov	r1, r8
 8017014:	4658      	mov	r0, fp
 8017016:	f002 f9c4 	bl	80193a2 <__sprint_r>
 801701a:	2800      	cmp	r0, #0
 801701c:	f47f a869 	bne.w	80160f2 <_vfprintf_r+0x5aa>
 8017020:	e7f2      	b.n	8017008 <_vfprintf_r+0x14c0>
 8017022:	bf00      	nop
 8017024:	0801ccc4 	.word	0x0801ccc4
 8017028:	0801ccb4 	.word	0x0801ccb4

0801702c <__sbprintf>:
 801702c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801702e:	460c      	mov	r4, r1
 8017030:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8017034:	461f      	mov	r7, r3
 8017036:	8989      	ldrh	r1, [r1, #12]
 8017038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801703a:	9319      	str	r3, [sp, #100]	; 0x64
 801703c:	89e3      	ldrh	r3, [r4, #14]
 801703e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017042:	f021 0102 	bic.w	r1, r1, #2
 8017046:	69e3      	ldr	r3, [r4, #28]
 8017048:	f8ad 100c 	strh.w	r1, [sp, #12]
 801704c:	9307      	str	r3, [sp, #28]
 801704e:	a91a      	add	r1, sp, #104	; 0x68
 8017050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017052:	9309      	str	r3, [sp, #36]	; 0x24
 8017054:	4615      	mov	r5, r2
 8017056:	2300      	movs	r3, #0
 8017058:	4606      	mov	r6, r0
 801705a:	9100      	str	r1, [sp, #0]
 801705c:	9104      	str	r1, [sp, #16]
 801705e:	a816      	add	r0, sp, #88	; 0x58
 8017060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017064:	9102      	str	r1, [sp, #8]
 8017066:	9105      	str	r1, [sp, #20]
 8017068:	9306      	str	r3, [sp, #24]
 801706a:	f7fb fda9 	bl	8012bc0 <__retarget_lock_init_recursive>
 801706e:	462a      	mov	r2, r5
 8017070:	463b      	mov	r3, r7
 8017072:	4669      	mov	r1, sp
 8017074:	4630      	mov	r0, r6
 8017076:	f7fe fd67 	bl	8015b48 <_vfprintf_r>
 801707a:	1e05      	subs	r5, r0, #0
 801707c:	db07      	blt.n	801708e <__sbprintf+0x62>
 801707e:	4669      	mov	r1, sp
 8017080:	4630      	mov	r0, r6
 8017082:	f000 ff5f 	bl	8017f44 <_fflush_r>
 8017086:	2800      	cmp	r0, #0
 8017088:	bf18      	it	ne
 801708a:	f04f 35ff 	movne.w	r5, #4294967295
 801708e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017092:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017094:	065b      	lsls	r3, r3, #25
 8017096:	bf42      	ittt	mi
 8017098:	89a3      	ldrhmi	r3, [r4, #12]
 801709a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801709e:	81a3      	strhmi	r3, [r4, #12]
 80170a0:	f7fb fd8f 	bl	8012bc2 <__retarget_lock_close_recursive>
 80170a4:	4628      	mov	r0, r5
 80170a6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80170aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170ac <_write_r>:
 80170ac:	b538      	push	{r3, r4, r5, lr}
 80170ae:	4c07      	ldr	r4, [pc, #28]	; (80170cc <_write_r+0x20>)
 80170b0:	4605      	mov	r5, r0
 80170b2:	4608      	mov	r0, r1
 80170b4:	4611      	mov	r1, r2
 80170b6:	2200      	movs	r2, #0
 80170b8:	6022      	str	r2, [r4, #0]
 80170ba:	461a      	mov	r2, r3
 80170bc:	f7f7 fab5 	bl	800e62a <_write>
 80170c0:	1c43      	adds	r3, r0, #1
 80170c2:	d102      	bne.n	80170ca <_write_r+0x1e>
 80170c4:	6823      	ldr	r3, [r4, #0]
 80170c6:	b103      	cbz	r3, 80170ca <_write_r+0x1e>
 80170c8:	602b      	str	r3, [r5, #0]
 80170ca:	bd38      	pop	{r3, r4, r5, pc}
 80170cc:	200010f8 	.word	0x200010f8

080170d0 <__swsetup_r>:
 80170d0:	b538      	push	{r3, r4, r5, lr}
 80170d2:	4b2a      	ldr	r3, [pc, #168]	; (801717c <__swsetup_r+0xac>)
 80170d4:	4605      	mov	r5, r0
 80170d6:	6818      	ldr	r0, [r3, #0]
 80170d8:	460c      	mov	r4, r1
 80170da:	b118      	cbz	r0, 80170e4 <__swsetup_r+0x14>
 80170dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80170de:	b90b      	cbnz	r3, 80170e4 <__swsetup_r+0x14>
 80170e0:	f000 ff9c 	bl	801801c <__sinit>
 80170e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170e8:	b29a      	uxth	r2, r3
 80170ea:	0711      	lsls	r1, r2, #28
 80170ec:	d422      	bmi.n	8017134 <__swsetup_r+0x64>
 80170ee:	06d0      	lsls	r0, r2, #27
 80170f0:	d407      	bmi.n	8017102 <__swsetup_r+0x32>
 80170f2:	2209      	movs	r2, #9
 80170f4:	602a      	str	r2, [r5, #0]
 80170f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170fa:	81a3      	strh	r3, [r4, #12]
 80170fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017100:	e034      	b.n	801716c <__swsetup_r+0x9c>
 8017102:	0751      	lsls	r1, r2, #29
 8017104:	d512      	bpl.n	801712c <__swsetup_r+0x5c>
 8017106:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017108:	b141      	cbz	r1, 801711c <__swsetup_r+0x4c>
 801710a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801710e:	4299      	cmp	r1, r3
 8017110:	d002      	beq.n	8017118 <__swsetup_r+0x48>
 8017112:	4628      	mov	r0, r5
 8017114:	f001 f812 	bl	801813c <_free_r>
 8017118:	2300      	movs	r3, #0
 801711a:	6323      	str	r3, [r4, #48]	; 0x30
 801711c:	89a3      	ldrh	r3, [r4, #12]
 801711e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017122:	81a3      	strh	r3, [r4, #12]
 8017124:	2300      	movs	r3, #0
 8017126:	6063      	str	r3, [r4, #4]
 8017128:	6923      	ldr	r3, [r4, #16]
 801712a:	6023      	str	r3, [r4, #0]
 801712c:	89a3      	ldrh	r3, [r4, #12]
 801712e:	f043 0308 	orr.w	r3, r3, #8
 8017132:	81a3      	strh	r3, [r4, #12]
 8017134:	6923      	ldr	r3, [r4, #16]
 8017136:	b94b      	cbnz	r3, 801714c <__swsetup_r+0x7c>
 8017138:	89a3      	ldrh	r3, [r4, #12]
 801713a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801713e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017142:	d003      	beq.n	801714c <__swsetup_r+0x7c>
 8017144:	4621      	mov	r1, r4
 8017146:	4628      	mov	r0, r5
 8017148:	f7fb fd6a 	bl	8012c20 <__smakebuf_r>
 801714c:	89a2      	ldrh	r2, [r4, #12]
 801714e:	f012 0301 	ands.w	r3, r2, #1
 8017152:	d00c      	beq.n	801716e <__swsetup_r+0x9e>
 8017154:	2300      	movs	r3, #0
 8017156:	60a3      	str	r3, [r4, #8]
 8017158:	6963      	ldr	r3, [r4, #20]
 801715a:	425b      	negs	r3, r3
 801715c:	61a3      	str	r3, [r4, #24]
 801715e:	6923      	ldr	r3, [r4, #16]
 8017160:	b953      	cbnz	r3, 8017178 <__swsetup_r+0xa8>
 8017162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017166:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801716a:	d1c4      	bne.n	80170f6 <__swsetup_r+0x26>
 801716c:	bd38      	pop	{r3, r4, r5, pc}
 801716e:	0792      	lsls	r2, r2, #30
 8017170:	bf58      	it	pl
 8017172:	6963      	ldrpl	r3, [r4, #20]
 8017174:	60a3      	str	r3, [r4, #8]
 8017176:	e7f2      	b.n	801715e <__swsetup_r+0x8e>
 8017178:	2000      	movs	r0, #0
 801717a:	e7f7      	b.n	801716c <__swsetup_r+0x9c>
 801717c:	20000404 	.word	0x20000404

08017180 <register_fini>:
 8017180:	4b02      	ldr	r3, [pc, #8]	; (801718c <register_fini+0xc>)
 8017182:	b113      	cbz	r3, 801718a <register_fini+0xa>
 8017184:	4802      	ldr	r0, [pc, #8]	; (8017190 <register_fini+0x10>)
 8017186:	f000 b805 	b.w	8017194 <atexit>
 801718a:	4770      	bx	lr
 801718c:	00000000 	.word	0x00000000
 8017190:	0801806d 	.word	0x0801806d

08017194 <atexit>:
 8017194:	2300      	movs	r3, #0
 8017196:	4601      	mov	r1, r0
 8017198:	461a      	mov	r2, r3
 801719a:	4618      	mov	r0, r3
 801719c:	f002 b98a 	b.w	80194b4 <__register_exitproc>

080171a0 <_close_r>:
 80171a0:	b538      	push	{r3, r4, r5, lr}
 80171a2:	4c06      	ldr	r4, [pc, #24]	; (80171bc <_close_r+0x1c>)
 80171a4:	2300      	movs	r3, #0
 80171a6:	4605      	mov	r5, r0
 80171a8:	4608      	mov	r0, r1
 80171aa:	6023      	str	r3, [r4, #0]
 80171ac:	f7f7 fa59 	bl	800e662 <_close>
 80171b0:	1c43      	adds	r3, r0, #1
 80171b2:	d102      	bne.n	80171ba <_close_r+0x1a>
 80171b4:	6823      	ldr	r3, [r4, #0]
 80171b6:	b103      	cbz	r3, 80171ba <_close_r+0x1a>
 80171b8:	602b      	str	r3, [r5, #0]
 80171ba:	bd38      	pop	{r3, r4, r5, pc}
 80171bc:	200010f8 	.word	0x200010f8

080171c0 <quorem>:
 80171c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c4:	6903      	ldr	r3, [r0, #16]
 80171c6:	690c      	ldr	r4, [r1, #16]
 80171c8:	42a3      	cmp	r3, r4
 80171ca:	4680      	mov	r8, r0
 80171cc:	f2c0 8082 	blt.w	80172d4 <quorem+0x114>
 80171d0:	3c01      	subs	r4, #1
 80171d2:	f101 0714 	add.w	r7, r1, #20
 80171d6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80171da:	f100 0614 	add.w	r6, r0, #20
 80171de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80171e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80171e6:	eb06 030c 	add.w	r3, r6, ip
 80171ea:	3501      	adds	r5, #1
 80171ec:	eb07 090c 	add.w	r9, r7, ip
 80171f0:	9301      	str	r3, [sp, #4]
 80171f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80171f6:	b395      	cbz	r5, 801725e <quorem+0x9e>
 80171f8:	f04f 0a00 	mov.w	sl, #0
 80171fc:	4638      	mov	r0, r7
 80171fe:	46b6      	mov	lr, r6
 8017200:	46d3      	mov	fp, sl
 8017202:	f850 2b04 	ldr.w	r2, [r0], #4
 8017206:	b293      	uxth	r3, r2
 8017208:	fb05 a303 	mla	r3, r5, r3, sl
 801720c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017210:	b29b      	uxth	r3, r3
 8017212:	ebab 0303 	sub.w	r3, fp, r3
 8017216:	0c12      	lsrs	r2, r2, #16
 8017218:	f8de b000 	ldr.w	fp, [lr]
 801721c:	fb05 a202 	mla	r2, r5, r2, sl
 8017220:	fa13 f38b 	uxtah	r3, r3, fp
 8017224:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017228:	fa1f fb82 	uxth.w	fp, r2
 801722c:	f8de 2000 	ldr.w	r2, [lr]
 8017230:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017238:	b29b      	uxth	r3, r3
 801723a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801723e:	4581      	cmp	r9, r0
 8017240:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017244:	f84e 3b04 	str.w	r3, [lr], #4
 8017248:	d2db      	bcs.n	8017202 <quorem+0x42>
 801724a:	f856 300c 	ldr.w	r3, [r6, ip]
 801724e:	b933      	cbnz	r3, 801725e <quorem+0x9e>
 8017250:	9b01      	ldr	r3, [sp, #4]
 8017252:	3b04      	subs	r3, #4
 8017254:	429e      	cmp	r6, r3
 8017256:	461a      	mov	r2, r3
 8017258:	d330      	bcc.n	80172bc <quorem+0xfc>
 801725a:	f8c8 4010 	str.w	r4, [r8, #16]
 801725e:	4640      	mov	r0, r8
 8017260:	f001 fdea 	bl	8018e38 <__mcmp>
 8017264:	2800      	cmp	r0, #0
 8017266:	db25      	blt.n	80172b4 <quorem+0xf4>
 8017268:	3501      	adds	r5, #1
 801726a:	4630      	mov	r0, r6
 801726c:	f04f 0c00 	mov.w	ip, #0
 8017270:	f857 2b04 	ldr.w	r2, [r7], #4
 8017274:	f8d0 e000 	ldr.w	lr, [r0]
 8017278:	b293      	uxth	r3, r2
 801727a:	ebac 0303 	sub.w	r3, ip, r3
 801727e:	0c12      	lsrs	r2, r2, #16
 8017280:	fa13 f38e 	uxtah	r3, r3, lr
 8017284:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801728c:	b29b      	uxth	r3, r3
 801728e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017292:	45b9      	cmp	r9, r7
 8017294:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017298:	f840 3b04 	str.w	r3, [r0], #4
 801729c:	d2e8      	bcs.n	8017270 <quorem+0xb0>
 801729e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80172a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80172a6:	b92a      	cbnz	r2, 80172b4 <quorem+0xf4>
 80172a8:	3b04      	subs	r3, #4
 80172aa:	429e      	cmp	r6, r3
 80172ac:	461a      	mov	r2, r3
 80172ae:	d30b      	bcc.n	80172c8 <quorem+0x108>
 80172b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80172b4:	4628      	mov	r0, r5
 80172b6:	b003      	add	sp, #12
 80172b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172bc:	6812      	ldr	r2, [r2, #0]
 80172be:	3b04      	subs	r3, #4
 80172c0:	2a00      	cmp	r2, #0
 80172c2:	d1ca      	bne.n	801725a <quorem+0x9a>
 80172c4:	3c01      	subs	r4, #1
 80172c6:	e7c5      	b.n	8017254 <quorem+0x94>
 80172c8:	6812      	ldr	r2, [r2, #0]
 80172ca:	3b04      	subs	r3, #4
 80172cc:	2a00      	cmp	r2, #0
 80172ce:	d1ef      	bne.n	80172b0 <quorem+0xf0>
 80172d0:	3c01      	subs	r4, #1
 80172d2:	e7ea      	b.n	80172aa <quorem+0xea>
 80172d4:	2000      	movs	r0, #0
 80172d6:	e7ee      	b.n	80172b6 <quorem+0xf6>

080172d8 <_dtoa_r>:
 80172d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172dc:	b097      	sub	sp, #92	; 0x5c
 80172de:	ec57 6b10 	vmov	r6, r7, d0
 80172e2:	9106      	str	r1, [sp, #24]
 80172e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80172e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80172e8:	4604      	mov	r4, r0
 80172ea:	9312      	str	r3, [sp, #72]	; 0x48
 80172ec:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80172ee:	e9cd 6700 	strd	r6, r7, [sp]
 80172f2:	b141      	cbz	r1, 8017306 <_dtoa_r+0x2e>
 80172f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80172f6:	604a      	str	r2, [r1, #4]
 80172f8:	2301      	movs	r3, #1
 80172fa:	4093      	lsls	r3, r2
 80172fc:	608b      	str	r3, [r1, #8]
 80172fe:	f001 fb98 	bl	8018a32 <_Bfree>
 8017302:	2300      	movs	r3, #0
 8017304:	6423      	str	r3, [r4, #64]	; 0x40
 8017306:	1e3b      	subs	r3, r7, #0
 8017308:	bfb9      	ittee	lt
 801730a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801730e:	9301      	strlt	r3, [sp, #4]
 8017310:	2300      	movge	r3, #0
 8017312:	602b      	strge	r3, [r5, #0]
 8017314:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017318:	4baf      	ldr	r3, [pc, #700]	; (80175d8 <_dtoa_r+0x300>)
 801731a:	bfbc      	itt	lt
 801731c:	2201      	movlt	r2, #1
 801731e:	602a      	strlt	r2, [r5, #0]
 8017320:	ea33 0308 	bics.w	r3, r3, r8
 8017324:	d116      	bne.n	8017354 <_dtoa_r+0x7c>
 8017326:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017328:	f242 730f 	movw	r3, #9999	; 0x270f
 801732c:	6013      	str	r3, [r2, #0]
 801732e:	9b00      	ldr	r3, [sp, #0]
 8017330:	b923      	cbnz	r3, 801733c <_dtoa_r+0x64>
 8017332:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017336:	2800      	cmp	r0, #0
 8017338:	f000 8543 	beq.w	8017dc2 <_dtoa_r+0xaea>
 801733c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801733e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80175ec <_dtoa_r+0x314>
 8017342:	b11b      	cbz	r3, 801734c <_dtoa_r+0x74>
 8017344:	f10b 0303 	add.w	r3, fp, #3
 8017348:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801734a:	6013      	str	r3, [r2, #0]
 801734c:	4658      	mov	r0, fp
 801734e:	b017      	add	sp, #92	; 0x5c
 8017350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017354:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017358:	2200      	movs	r2, #0
 801735a:	2300      	movs	r3, #0
 801735c:	4630      	mov	r0, r6
 801735e:	4639      	mov	r1, r7
 8017360:	f7f0 f934 	bl	80075cc <__aeabi_dcmpeq>
 8017364:	4681      	mov	r9, r0
 8017366:	b160      	cbz	r0, 8017382 <_dtoa_r+0xaa>
 8017368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801736a:	2301      	movs	r3, #1
 801736c:	6013      	str	r3, [r2, #0]
 801736e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017370:	2b00      	cmp	r3, #0
 8017372:	f000 8522 	beq.w	8017dba <_dtoa_r+0xae2>
 8017376:	4b99      	ldr	r3, [pc, #612]	; (80175dc <_dtoa_r+0x304>)
 8017378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801737a:	f103 3bff 	add.w	fp, r3, #4294967295
 801737e:	6013      	str	r3, [r2, #0]
 8017380:	e7e4      	b.n	801734c <_dtoa_r+0x74>
 8017382:	aa14      	add	r2, sp, #80	; 0x50
 8017384:	a915      	add	r1, sp, #84	; 0x54
 8017386:	ec47 6b10 	vmov	d0, r6, r7
 801738a:	4620      	mov	r0, r4
 801738c:	f001 fe42 	bl	8019014 <__d2b>
 8017390:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017394:	9004      	str	r0, [sp, #16]
 8017396:	2d00      	cmp	r5, #0
 8017398:	d07c      	beq.n	8017494 <_dtoa_r+0x1bc>
 801739a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801739e:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80173a2:	46b2      	mov	sl, r6
 80173a4:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80173a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80173ac:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80173b0:	2200      	movs	r2, #0
 80173b2:	4b8b      	ldr	r3, [pc, #556]	; (80175e0 <_dtoa_r+0x308>)
 80173b4:	4650      	mov	r0, sl
 80173b6:	4659      	mov	r1, fp
 80173b8:	f7ef fce8 	bl	8006d8c <__aeabi_dsub>
 80173bc:	a380      	add	r3, pc, #512	; (adr r3, 80175c0 <_dtoa_r+0x2e8>)
 80173be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c2:	f7ef fe9b 	bl	80070fc <__aeabi_dmul>
 80173c6:	a380      	add	r3, pc, #512	; (adr r3, 80175c8 <_dtoa_r+0x2f0>)
 80173c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173cc:	f7ef fce0 	bl	8006d90 <__adddf3>
 80173d0:	4606      	mov	r6, r0
 80173d2:	4628      	mov	r0, r5
 80173d4:	460f      	mov	r7, r1
 80173d6:	f7ef fe27 	bl	8007028 <__aeabi_i2d>
 80173da:	a37d      	add	r3, pc, #500	; (adr r3, 80175d0 <_dtoa_r+0x2f8>)
 80173dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173e0:	f7ef fe8c 	bl	80070fc <__aeabi_dmul>
 80173e4:	4602      	mov	r2, r0
 80173e6:	460b      	mov	r3, r1
 80173e8:	4630      	mov	r0, r6
 80173ea:	4639      	mov	r1, r7
 80173ec:	f7ef fcd0 	bl	8006d90 <__adddf3>
 80173f0:	4606      	mov	r6, r0
 80173f2:	460f      	mov	r7, r1
 80173f4:	f7f0 f932 	bl	800765c <__aeabi_d2iz>
 80173f8:	2200      	movs	r2, #0
 80173fa:	4682      	mov	sl, r0
 80173fc:	2300      	movs	r3, #0
 80173fe:	4630      	mov	r0, r6
 8017400:	4639      	mov	r1, r7
 8017402:	f7f0 f8ed 	bl	80075e0 <__aeabi_dcmplt>
 8017406:	b148      	cbz	r0, 801741c <_dtoa_r+0x144>
 8017408:	4650      	mov	r0, sl
 801740a:	f7ef fe0d 	bl	8007028 <__aeabi_i2d>
 801740e:	4632      	mov	r2, r6
 8017410:	463b      	mov	r3, r7
 8017412:	f7f0 f8db 	bl	80075cc <__aeabi_dcmpeq>
 8017416:	b908      	cbnz	r0, 801741c <_dtoa_r+0x144>
 8017418:	f10a 3aff 	add.w	sl, sl, #4294967295
 801741c:	f1ba 0f16 	cmp.w	sl, #22
 8017420:	d859      	bhi.n	80174d6 <_dtoa_r+0x1fe>
 8017422:	4970      	ldr	r1, [pc, #448]	; (80175e4 <_dtoa_r+0x30c>)
 8017424:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017428:	e9dd 2300 	ldrd	r2, r3, [sp]
 801742c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017430:	f7f0 f8f4 	bl	800761c <__aeabi_dcmpgt>
 8017434:	2800      	cmp	r0, #0
 8017436:	d050      	beq.n	80174da <_dtoa_r+0x202>
 8017438:	f10a 3aff 	add.w	sl, sl, #4294967295
 801743c:	2300      	movs	r3, #0
 801743e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017440:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017442:	1b5d      	subs	r5, r3, r5
 8017444:	f1b5 0801 	subs.w	r8, r5, #1
 8017448:	bf49      	itett	mi
 801744a:	f1c5 0301 	rsbmi	r3, r5, #1
 801744e:	2300      	movpl	r3, #0
 8017450:	9305      	strmi	r3, [sp, #20]
 8017452:	f04f 0800 	movmi.w	r8, #0
 8017456:	bf58      	it	pl
 8017458:	9305      	strpl	r3, [sp, #20]
 801745a:	f1ba 0f00 	cmp.w	sl, #0
 801745e:	db3e      	blt.n	80174de <_dtoa_r+0x206>
 8017460:	2300      	movs	r3, #0
 8017462:	44d0      	add	r8, sl
 8017464:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017468:	9307      	str	r3, [sp, #28]
 801746a:	9b06      	ldr	r3, [sp, #24]
 801746c:	2b09      	cmp	r3, #9
 801746e:	f200 808d 	bhi.w	801758c <_dtoa_r+0x2b4>
 8017472:	2b05      	cmp	r3, #5
 8017474:	bfc4      	itt	gt
 8017476:	3b04      	subgt	r3, #4
 8017478:	9306      	strgt	r3, [sp, #24]
 801747a:	9b06      	ldr	r3, [sp, #24]
 801747c:	f1a3 0302 	sub.w	r3, r3, #2
 8017480:	bfcc      	ite	gt
 8017482:	2500      	movgt	r5, #0
 8017484:	2501      	movle	r5, #1
 8017486:	2b03      	cmp	r3, #3
 8017488:	f200 808c 	bhi.w	80175a4 <_dtoa_r+0x2cc>
 801748c:	e8df f003 	tbb	[pc, r3]
 8017490:	6e317c7a 	.word	0x6e317c7a
 8017494:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017498:	441d      	add	r5, r3
 801749a:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801749e:	2820      	cmp	r0, #32
 80174a0:	dd13      	ble.n	80174ca <_dtoa_r+0x1f2>
 80174a2:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80174a6:	9b00      	ldr	r3, [sp, #0]
 80174a8:	fa08 f800 	lsl.w	r8, r8, r0
 80174ac:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80174b0:	fa23 f000 	lsr.w	r0, r3, r0
 80174b4:	ea48 0000 	orr.w	r0, r8, r0
 80174b8:	f7ef fda6 	bl	8007008 <__aeabi_ui2d>
 80174bc:	2301      	movs	r3, #1
 80174be:	4682      	mov	sl, r0
 80174c0:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80174c4:	3d01      	subs	r5, #1
 80174c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80174c8:	e772      	b.n	80173b0 <_dtoa_r+0xd8>
 80174ca:	9b00      	ldr	r3, [sp, #0]
 80174cc:	f1c0 0020 	rsb	r0, r0, #32
 80174d0:	fa03 f000 	lsl.w	r0, r3, r0
 80174d4:	e7f0      	b.n	80174b8 <_dtoa_r+0x1e0>
 80174d6:	2301      	movs	r3, #1
 80174d8:	e7b1      	b.n	801743e <_dtoa_r+0x166>
 80174da:	900f      	str	r0, [sp, #60]	; 0x3c
 80174dc:	e7b0      	b.n	8017440 <_dtoa_r+0x168>
 80174de:	9b05      	ldr	r3, [sp, #20]
 80174e0:	eba3 030a 	sub.w	r3, r3, sl
 80174e4:	9305      	str	r3, [sp, #20]
 80174e6:	f1ca 0300 	rsb	r3, sl, #0
 80174ea:	9307      	str	r3, [sp, #28]
 80174ec:	2300      	movs	r3, #0
 80174ee:	930e      	str	r3, [sp, #56]	; 0x38
 80174f0:	e7bb      	b.n	801746a <_dtoa_r+0x192>
 80174f2:	2301      	movs	r3, #1
 80174f4:	930a      	str	r3, [sp, #40]	; 0x28
 80174f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	dd56      	ble.n	80175aa <_dtoa_r+0x2d2>
 80174fc:	9302      	str	r3, [sp, #8]
 80174fe:	4699      	mov	r9, r3
 8017500:	2200      	movs	r2, #0
 8017502:	6462      	str	r2, [r4, #68]	; 0x44
 8017504:	2204      	movs	r2, #4
 8017506:	f102 0014 	add.w	r0, r2, #20
 801750a:	4298      	cmp	r0, r3
 801750c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801750e:	d951      	bls.n	80175b4 <_dtoa_r+0x2dc>
 8017510:	4620      	mov	r0, r4
 8017512:	f001 fa69 	bl	80189e8 <_Balloc>
 8017516:	f1b9 0f0e 	cmp.w	r9, #14
 801751a:	4683      	mov	fp, r0
 801751c:	6420      	str	r0, [r4, #64]	; 0x40
 801751e:	f200 80e8 	bhi.w	80176f2 <_dtoa_r+0x41a>
 8017522:	2d00      	cmp	r5, #0
 8017524:	f000 80e5 	beq.w	80176f2 <_dtoa_r+0x41a>
 8017528:	ed9d 7b00 	vldr	d7, [sp]
 801752c:	f1ba 0f00 	cmp.w	sl, #0
 8017530:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017534:	dd76      	ble.n	8017624 <_dtoa_r+0x34c>
 8017536:	4a2b      	ldr	r2, [pc, #172]	; (80175e4 <_dtoa_r+0x30c>)
 8017538:	f00a 030f 	and.w	r3, sl, #15
 801753c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017540:	ed93 7b00 	vldr	d7, [r3]
 8017544:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017548:	06f0      	lsls	r0, r6, #27
 801754a:	ed8d 7b08 	vstr	d7, [sp, #32]
 801754e:	d567      	bpl.n	8017620 <_dtoa_r+0x348>
 8017550:	4b25      	ldr	r3, [pc, #148]	; (80175e8 <_dtoa_r+0x310>)
 8017552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017556:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801755a:	f7ef fef9 	bl	8007350 <__aeabi_ddiv>
 801755e:	e9cd 0100 	strd	r0, r1, [sp]
 8017562:	f006 060f 	and.w	r6, r6, #15
 8017566:	2503      	movs	r5, #3
 8017568:	4f1f      	ldr	r7, [pc, #124]	; (80175e8 <_dtoa_r+0x310>)
 801756a:	e04e      	b.n	801760a <_dtoa_r+0x332>
 801756c:	2301      	movs	r3, #1
 801756e:	930a      	str	r3, [sp, #40]	; 0x28
 8017570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017572:	4453      	add	r3, sl
 8017574:	f103 0901 	add.w	r9, r3, #1
 8017578:	9302      	str	r3, [sp, #8]
 801757a:	464b      	mov	r3, r9
 801757c:	2b01      	cmp	r3, #1
 801757e:	bfb8      	it	lt
 8017580:	2301      	movlt	r3, #1
 8017582:	e7bd      	b.n	8017500 <_dtoa_r+0x228>
 8017584:	2300      	movs	r3, #0
 8017586:	e7b5      	b.n	80174f4 <_dtoa_r+0x21c>
 8017588:	2300      	movs	r3, #0
 801758a:	e7f0      	b.n	801756e <_dtoa_r+0x296>
 801758c:	2501      	movs	r5, #1
 801758e:	2300      	movs	r3, #0
 8017590:	9306      	str	r3, [sp, #24]
 8017592:	950a      	str	r5, [sp, #40]	; 0x28
 8017594:	f04f 33ff 	mov.w	r3, #4294967295
 8017598:	9302      	str	r3, [sp, #8]
 801759a:	4699      	mov	r9, r3
 801759c:	2200      	movs	r2, #0
 801759e:	2312      	movs	r3, #18
 80175a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80175a2:	e7ad      	b.n	8017500 <_dtoa_r+0x228>
 80175a4:	2301      	movs	r3, #1
 80175a6:	930a      	str	r3, [sp, #40]	; 0x28
 80175a8:	e7f4      	b.n	8017594 <_dtoa_r+0x2bc>
 80175aa:	2301      	movs	r3, #1
 80175ac:	9302      	str	r3, [sp, #8]
 80175ae:	4699      	mov	r9, r3
 80175b0:	461a      	mov	r2, r3
 80175b2:	e7f5      	b.n	80175a0 <_dtoa_r+0x2c8>
 80175b4:	3101      	adds	r1, #1
 80175b6:	6461      	str	r1, [r4, #68]	; 0x44
 80175b8:	0052      	lsls	r2, r2, #1
 80175ba:	e7a4      	b.n	8017506 <_dtoa_r+0x22e>
 80175bc:	f3af 8000 	nop.w
 80175c0:	636f4361 	.word	0x636f4361
 80175c4:	3fd287a7 	.word	0x3fd287a7
 80175c8:	8b60c8b3 	.word	0x8b60c8b3
 80175cc:	3fc68a28 	.word	0x3fc68a28
 80175d0:	509f79fb 	.word	0x509f79fb
 80175d4:	3fd34413 	.word	0x3fd34413
 80175d8:	7ff00000 	.word	0x7ff00000
 80175dc:	0801cc93 	.word	0x0801cc93
 80175e0:	3ff80000 	.word	0x3ff80000
 80175e4:	0801cd18 	.word	0x0801cd18
 80175e8:	0801ccf0 	.word	0x0801ccf0
 80175ec:	0801ccdd 	.word	0x0801ccdd
 80175f0:	07f1      	lsls	r1, r6, #31
 80175f2:	d508      	bpl.n	8017606 <_dtoa_r+0x32e>
 80175f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80175f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80175fc:	f7ef fd7e 	bl	80070fc <__aeabi_dmul>
 8017600:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017604:	3501      	adds	r5, #1
 8017606:	1076      	asrs	r6, r6, #1
 8017608:	3708      	adds	r7, #8
 801760a:	2e00      	cmp	r6, #0
 801760c:	d1f0      	bne.n	80175f0 <_dtoa_r+0x318>
 801760e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017612:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017616:	f7ef fe9b 	bl	8007350 <__aeabi_ddiv>
 801761a:	e9cd 0100 	strd	r0, r1, [sp]
 801761e:	e01a      	b.n	8017656 <_dtoa_r+0x37e>
 8017620:	2502      	movs	r5, #2
 8017622:	e7a1      	b.n	8017568 <_dtoa_r+0x290>
 8017624:	f000 80a0 	beq.w	8017768 <_dtoa_r+0x490>
 8017628:	f1ca 0600 	rsb	r6, sl, #0
 801762c:	4b9f      	ldr	r3, [pc, #636]	; (80178ac <_dtoa_r+0x5d4>)
 801762e:	4fa0      	ldr	r7, [pc, #640]	; (80178b0 <_dtoa_r+0x5d8>)
 8017630:	f006 020f 	and.w	r2, r6, #15
 8017634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017640:	f7ef fd5c 	bl	80070fc <__aeabi_dmul>
 8017644:	e9cd 0100 	strd	r0, r1, [sp]
 8017648:	1136      	asrs	r6, r6, #4
 801764a:	2300      	movs	r3, #0
 801764c:	2502      	movs	r5, #2
 801764e:	2e00      	cmp	r6, #0
 8017650:	d17f      	bne.n	8017752 <_dtoa_r+0x47a>
 8017652:	2b00      	cmp	r3, #0
 8017654:	d1e1      	bne.n	801761a <_dtoa_r+0x342>
 8017656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017658:	2b00      	cmp	r3, #0
 801765a:	f000 8087 	beq.w	801776c <_dtoa_r+0x494>
 801765e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017662:	2200      	movs	r2, #0
 8017664:	4b93      	ldr	r3, [pc, #588]	; (80178b4 <_dtoa_r+0x5dc>)
 8017666:	4630      	mov	r0, r6
 8017668:	4639      	mov	r1, r7
 801766a:	f7ef ffb9 	bl	80075e0 <__aeabi_dcmplt>
 801766e:	2800      	cmp	r0, #0
 8017670:	d07c      	beq.n	801776c <_dtoa_r+0x494>
 8017672:	f1b9 0f00 	cmp.w	r9, #0
 8017676:	d079      	beq.n	801776c <_dtoa_r+0x494>
 8017678:	9b02      	ldr	r3, [sp, #8]
 801767a:	2b00      	cmp	r3, #0
 801767c:	dd35      	ble.n	80176ea <_dtoa_r+0x412>
 801767e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017682:	9308      	str	r3, [sp, #32]
 8017684:	4639      	mov	r1, r7
 8017686:	2200      	movs	r2, #0
 8017688:	4b8b      	ldr	r3, [pc, #556]	; (80178b8 <_dtoa_r+0x5e0>)
 801768a:	4630      	mov	r0, r6
 801768c:	f7ef fd36 	bl	80070fc <__aeabi_dmul>
 8017690:	e9cd 0100 	strd	r0, r1, [sp]
 8017694:	9f02      	ldr	r7, [sp, #8]
 8017696:	3501      	adds	r5, #1
 8017698:	4628      	mov	r0, r5
 801769a:	f7ef fcc5 	bl	8007028 <__aeabi_i2d>
 801769e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80176a2:	f7ef fd2b 	bl	80070fc <__aeabi_dmul>
 80176a6:	2200      	movs	r2, #0
 80176a8:	4b84      	ldr	r3, [pc, #528]	; (80178bc <_dtoa_r+0x5e4>)
 80176aa:	f7ef fb71 	bl	8006d90 <__adddf3>
 80176ae:	4605      	mov	r5, r0
 80176b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80176b4:	2f00      	cmp	r7, #0
 80176b6:	d15d      	bne.n	8017774 <_dtoa_r+0x49c>
 80176b8:	2200      	movs	r2, #0
 80176ba:	4b81      	ldr	r3, [pc, #516]	; (80178c0 <_dtoa_r+0x5e8>)
 80176bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176c0:	f7ef fb64 	bl	8006d8c <__aeabi_dsub>
 80176c4:	462a      	mov	r2, r5
 80176c6:	4633      	mov	r3, r6
 80176c8:	e9cd 0100 	strd	r0, r1, [sp]
 80176cc:	f7ef ffa6 	bl	800761c <__aeabi_dcmpgt>
 80176d0:	2800      	cmp	r0, #0
 80176d2:	f040 8288 	bne.w	8017be6 <_dtoa_r+0x90e>
 80176d6:	462a      	mov	r2, r5
 80176d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80176dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176e0:	f7ef ff7e 	bl	80075e0 <__aeabi_dcmplt>
 80176e4:	2800      	cmp	r0, #0
 80176e6:	f040 827c 	bne.w	8017be2 <_dtoa_r+0x90a>
 80176ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80176ee:	e9cd 2300 	strd	r2, r3, [sp]
 80176f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	f2c0 8150 	blt.w	801799a <_dtoa_r+0x6c2>
 80176fa:	f1ba 0f0e 	cmp.w	sl, #14
 80176fe:	f300 814c 	bgt.w	801799a <_dtoa_r+0x6c2>
 8017702:	4b6a      	ldr	r3, [pc, #424]	; (80178ac <_dtoa_r+0x5d4>)
 8017704:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017708:	ed93 7b00 	vldr	d7, [r3]
 801770c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801770e:	2b00      	cmp	r3, #0
 8017710:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017714:	f280 80d8 	bge.w	80178c8 <_dtoa_r+0x5f0>
 8017718:	f1b9 0f00 	cmp.w	r9, #0
 801771c:	f300 80d4 	bgt.w	80178c8 <_dtoa_r+0x5f0>
 8017720:	f040 825e 	bne.w	8017be0 <_dtoa_r+0x908>
 8017724:	2200      	movs	r2, #0
 8017726:	4b66      	ldr	r3, [pc, #408]	; (80178c0 <_dtoa_r+0x5e8>)
 8017728:	ec51 0b17 	vmov	r0, r1, d7
 801772c:	f7ef fce6 	bl	80070fc <__aeabi_dmul>
 8017730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017734:	f7ef ff68 	bl	8007608 <__aeabi_dcmpge>
 8017738:	464f      	mov	r7, r9
 801773a:	464e      	mov	r6, r9
 801773c:	2800      	cmp	r0, #0
 801773e:	f040 8234 	bne.w	8017baa <_dtoa_r+0x8d2>
 8017742:	2331      	movs	r3, #49	; 0x31
 8017744:	f10b 0501 	add.w	r5, fp, #1
 8017748:	f88b 3000 	strb.w	r3, [fp]
 801774c:	f10a 0a01 	add.w	sl, sl, #1
 8017750:	e22f      	b.n	8017bb2 <_dtoa_r+0x8da>
 8017752:	07f2      	lsls	r2, r6, #31
 8017754:	d505      	bpl.n	8017762 <_dtoa_r+0x48a>
 8017756:	e9d7 2300 	ldrd	r2, r3, [r7]
 801775a:	f7ef fccf 	bl	80070fc <__aeabi_dmul>
 801775e:	3501      	adds	r5, #1
 8017760:	2301      	movs	r3, #1
 8017762:	1076      	asrs	r6, r6, #1
 8017764:	3708      	adds	r7, #8
 8017766:	e772      	b.n	801764e <_dtoa_r+0x376>
 8017768:	2502      	movs	r5, #2
 801776a:	e774      	b.n	8017656 <_dtoa_r+0x37e>
 801776c:	f8cd a020 	str.w	sl, [sp, #32]
 8017770:	464f      	mov	r7, r9
 8017772:	e791      	b.n	8017698 <_dtoa_r+0x3c0>
 8017774:	4b4d      	ldr	r3, [pc, #308]	; (80178ac <_dtoa_r+0x5d4>)
 8017776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801777a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801777e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017780:	2b00      	cmp	r3, #0
 8017782:	d047      	beq.n	8017814 <_dtoa_r+0x53c>
 8017784:	4602      	mov	r2, r0
 8017786:	460b      	mov	r3, r1
 8017788:	2000      	movs	r0, #0
 801778a:	494e      	ldr	r1, [pc, #312]	; (80178c4 <_dtoa_r+0x5ec>)
 801778c:	f7ef fde0 	bl	8007350 <__aeabi_ddiv>
 8017790:	462a      	mov	r2, r5
 8017792:	4633      	mov	r3, r6
 8017794:	f7ef fafa 	bl	8006d8c <__aeabi_dsub>
 8017798:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801779c:	465d      	mov	r5, fp
 801779e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177a2:	f7ef ff5b 	bl	800765c <__aeabi_d2iz>
 80177a6:	4606      	mov	r6, r0
 80177a8:	f7ef fc3e 	bl	8007028 <__aeabi_i2d>
 80177ac:	4602      	mov	r2, r0
 80177ae:	460b      	mov	r3, r1
 80177b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177b4:	f7ef faea 	bl	8006d8c <__aeabi_dsub>
 80177b8:	3630      	adds	r6, #48	; 0x30
 80177ba:	f805 6b01 	strb.w	r6, [r5], #1
 80177be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80177c2:	e9cd 0100 	strd	r0, r1, [sp]
 80177c6:	f7ef ff0b 	bl	80075e0 <__aeabi_dcmplt>
 80177ca:	2800      	cmp	r0, #0
 80177cc:	d163      	bne.n	8017896 <_dtoa_r+0x5be>
 80177ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177d2:	2000      	movs	r0, #0
 80177d4:	4937      	ldr	r1, [pc, #220]	; (80178b4 <_dtoa_r+0x5dc>)
 80177d6:	f7ef fad9 	bl	8006d8c <__aeabi_dsub>
 80177da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80177de:	f7ef feff 	bl	80075e0 <__aeabi_dcmplt>
 80177e2:	2800      	cmp	r0, #0
 80177e4:	f040 80b7 	bne.w	8017956 <_dtoa_r+0x67e>
 80177e8:	eba5 030b 	sub.w	r3, r5, fp
 80177ec:	429f      	cmp	r7, r3
 80177ee:	f77f af7c 	ble.w	80176ea <_dtoa_r+0x412>
 80177f2:	2200      	movs	r2, #0
 80177f4:	4b30      	ldr	r3, [pc, #192]	; (80178b8 <_dtoa_r+0x5e0>)
 80177f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80177fa:	f7ef fc7f 	bl	80070fc <__aeabi_dmul>
 80177fe:	2200      	movs	r2, #0
 8017800:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017804:	4b2c      	ldr	r3, [pc, #176]	; (80178b8 <_dtoa_r+0x5e0>)
 8017806:	e9dd 0100 	ldrd	r0, r1, [sp]
 801780a:	f7ef fc77 	bl	80070fc <__aeabi_dmul>
 801780e:	e9cd 0100 	strd	r0, r1, [sp]
 8017812:	e7c4      	b.n	801779e <_dtoa_r+0x4c6>
 8017814:	462a      	mov	r2, r5
 8017816:	4633      	mov	r3, r6
 8017818:	f7ef fc70 	bl	80070fc <__aeabi_dmul>
 801781c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017820:	eb0b 0507 	add.w	r5, fp, r7
 8017824:	465e      	mov	r6, fp
 8017826:	e9dd 0100 	ldrd	r0, r1, [sp]
 801782a:	f7ef ff17 	bl	800765c <__aeabi_d2iz>
 801782e:	4607      	mov	r7, r0
 8017830:	f7ef fbfa 	bl	8007028 <__aeabi_i2d>
 8017834:	3730      	adds	r7, #48	; 0x30
 8017836:	4602      	mov	r2, r0
 8017838:	460b      	mov	r3, r1
 801783a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801783e:	f7ef faa5 	bl	8006d8c <__aeabi_dsub>
 8017842:	f806 7b01 	strb.w	r7, [r6], #1
 8017846:	42ae      	cmp	r6, r5
 8017848:	e9cd 0100 	strd	r0, r1, [sp]
 801784c:	f04f 0200 	mov.w	r2, #0
 8017850:	d126      	bne.n	80178a0 <_dtoa_r+0x5c8>
 8017852:	4b1c      	ldr	r3, [pc, #112]	; (80178c4 <_dtoa_r+0x5ec>)
 8017854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017858:	f7ef fa9a 	bl	8006d90 <__adddf3>
 801785c:	4602      	mov	r2, r0
 801785e:	460b      	mov	r3, r1
 8017860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017864:	f7ef feda 	bl	800761c <__aeabi_dcmpgt>
 8017868:	2800      	cmp	r0, #0
 801786a:	d174      	bne.n	8017956 <_dtoa_r+0x67e>
 801786c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017870:	2000      	movs	r0, #0
 8017872:	4914      	ldr	r1, [pc, #80]	; (80178c4 <_dtoa_r+0x5ec>)
 8017874:	f7ef fa8a 	bl	8006d8c <__aeabi_dsub>
 8017878:	4602      	mov	r2, r0
 801787a:	460b      	mov	r3, r1
 801787c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017880:	f7ef feae 	bl	80075e0 <__aeabi_dcmplt>
 8017884:	2800      	cmp	r0, #0
 8017886:	f43f af30 	beq.w	80176ea <_dtoa_r+0x412>
 801788a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801788e:	2b30      	cmp	r3, #48	; 0x30
 8017890:	f105 32ff 	add.w	r2, r5, #4294967295
 8017894:	d002      	beq.n	801789c <_dtoa_r+0x5c4>
 8017896:	f8dd a020 	ldr.w	sl, [sp, #32]
 801789a:	e04a      	b.n	8017932 <_dtoa_r+0x65a>
 801789c:	4615      	mov	r5, r2
 801789e:	e7f4      	b.n	801788a <_dtoa_r+0x5b2>
 80178a0:	4b05      	ldr	r3, [pc, #20]	; (80178b8 <_dtoa_r+0x5e0>)
 80178a2:	f7ef fc2b 	bl	80070fc <__aeabi_dmul>
 80178a6:	e9cd 0100 	strd	r0, r1, [sp]
 80178aa:	e7bc      	b.n	8017826 <_dtoa_r+0x54e>
 80178ac:	0801cd18 	.word	0x0801cd18
 80178b0:	0801ccf0 	.word	0x0801ccf0
 80178b4:	3ff00000 	.word	0x3ff00000
 80178b8:	40240000 	.word	0x40240000
 80178bc:	401c0000 	.word	0x401c0000
 80178c0:	40140000 	.word	0x40140000
 80178c4:	3fe00000 	.word	0x3fe00000
 80178c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80178cc:	465d      	mov	r5, fp
 80178ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80178d2:	4630      	mov	r0, r6
 80178d4:	4639      	mov	r1, r7
 80178d6:	f7ef fd3b 	bl	8007350 <__aeabi_ddiv>
 80178da:	f7ef febf 	bl	800765c <__aeabi_d2iz>
 80178de:	4680      	mov	r8, r0
 80178e0:	f7ef fba2 	bl	8007028 <__aeabi_i2d>
 80178e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80178e8:	f7ef fc08 	bl	80070fc <__aeabi_dmul>
 80178ec:	4602      	mov	r2, r0
 80178ee:	460b      	mov	r3, r1
 80178f0:	4630      	mov	r0, r6
 80178f2:	4639      	mov	r1, r7
 80178f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80178f8:	f7ef fa48 	bl	8006d8c <__aeabi_dsub>
 80178fc:	f805 6b01 	strb.w	r6, [r5], #1
 8017900:	eba5 060b 	sub.w	r6, r5, fp
 8017904:	45b1      	cmp	r9, r6
 8017906:	4602      	mov	r2, r0
 8017908:	460b      	mov	r3, r1
 801790a:	d139      	bne.n	8017980 <_dtoa_r+0x6a8>
 801790c:	f7ef fa40 	bl	8006d90 <__adddf3>
 8017910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017914:	4606      	mov	r6, r0
 8017916:	460f      	mov	r7, r1
 8017918:	f7ef fe80 	bl	800761c <__aeabi_dcmpgt>
 801791c:	b9c8      	cbnz	r0, 8017952 <_dtoa_r+0x67a>
 801791e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017922:	4630      	mov	r0, r6
 8017924:	4639      	mov	r1, r7
 8017926:	f7ef fe51 	bl	80075cc <__aeabi_dcmpeq>
 801792a:	b110      	cbz	r0, 8017932 <_dtoa_r+0x65a>
 801792c:	f018 0f01 	tst.w	r8, #1
 8017930:	d10f      	bne.n	8017952 <_dtoa_r+0x67a>
 8017932:	9904      	ldr	r1, [sp, #16]
 8017934:	4620      	mov	r0, r4
 8017936:	f001 f87c 	bl	8018a32 <_Bfree>
 801793a:	2300      	movs	r3, #0
 801793c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801793e:	702b      	strb	r3, [r5, #0]
 8017940:	f10a 0301 	add.w	r3, sl, #1
 8017944:	6013      	str	r3, [r2, #0]
 8017946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017948:	2b00      	cmp	r3, #0
 801794a:	f43f acff 	beq.w	801734c <_dtoa_r+0x74>
 801794e:	601d      	str	r5, [r3, #0]
 8017950:	e4fc      	b.n	801734c <_dtoa_r+0x74>
 8017952:	f8cd a020 	str.w	sl, [sp, #32]
 8017956:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801795a:	2a39      	cmp	r2, #57	; 0x39
 801795c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017960:	d108      	bne.n	8017974 <_dtoa_r+0x69c>
 8017962:	459b      	cmp	fp, r3
 8017964:	d10a      	bne.n	801797c <_dtoa_r+0x6a4>
 8017966:	9b08      	ldr	r3, [sp, #32]
 8017968:	3301      	adds	r3, #1
 801796a:	9308      	str	r3, [sp, #32]
 801796c:	2330      	movs	r3, #48	; 0x30
 801796e:	f88b 3000 	strb.w	r3, [fp]
 8017972:	465b      	mov	r3, fp
 8017974:	781a      	ldrb	r2, [r3, #0]
 8017976:	3201      	adds	r2, #1
 8017978:	701a      	strb	r2, [r3, #0]
 801797a:	e78c      	b.n	8017896 <_dtoa_r+0x5be>
 801797c:	461d      	mov	r5, r3
 801797e:	e7ea      	b.n	8017956 <_dtoa_r+0x67e>
 8017980:	2200      	movs	r2, #0
 8017982:	4b9b      	ldr	r3, [pc, #620]	; (8017bf0 <_dtoa_r+0x918>)
 8017984:	f7ef fbba 	bl	80070fc <__aeabi_dmul>
 8017988:	2200      	movs	r2, #0
 801798a:	2300      	movs	r3, #0
 801798c:	4606      	mov	r6, r0
 801798e:	460f      	mov	r7, r1
 8017990:	f7ef fe1c 	bl	80075cc <__aeabi_dcmpeq>
 8017994:	2800      	cmp	r0, #0
 8017996:	d09a      	beq.n	80178ce <_dtoa_r+0x5f6>
 8017998:	e7cb      	b.n	8017932 <_dtoa_r+0x65a>
 801799a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801799c:	2a00      	cmp	r2, #0
 801799e:	f000 808b 	beq.w	8017ab8 <_dtoa_r+0x7e0>
 80179a2:	9a06      	ldr	r2, [sp, #24]
 80179a4:	2a01      	cmp	r2, #1
 80179a6:	dc6e      	bgt.n	8017a86 <_dtoa_r+0x7ae>
 80179a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80179aa:	2a00      	cmp	r2, #0
 80179ac:	d067      	beq.n	8017a7e <_dtoa_r+0x7a6>
 80179ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80179b2:	9f07      	ldr	r7, [sp, #28]
 80179b4:	9d05      	ldr	r5, [sp, #20]
 80179b6:	9a05      	ldr	r2, [sp, #20]
 80179b8:	2101      	movs	r1, #1
 80179ba:	441a      	add	r2, r3
 80179bc:	4620      	mov	r0, r4
 80179be:	9205      	str	r2, [sp, #20]
 80179c0:	4498      	add	r8, r3
 80179c2:	f001 f906 	bl	8018bd2 <__i2b>
 80179c6:	4606      	mov	r6, r0
 80179c8:	2d00      	cmp	r5, #0
 80179ca:	dd0c      	ble.n	80179e6 <_dtoa_r+0x70e>
 80179cc:	f1b8 0f00 	cmp.w	r8, #0
 80179d0:	dd09      	ble.n	80179e6 <_dtoa_r+0x70e>
 80179d2:	4545      	cmp	r5, r8
 80179d4:	9a05      	ldr	r2, [sp, #20]
 80179d6:	462b      	mov	r3, r5
 80179d8:	bfa8      	it	ge
 80179da:	4643      	movge	r3, r8
 80179dc:	1ad2      	subs	r2, r2, r3
 80179de:	9205      	str	r2, [sp, #20]
 80179e0:	1aed      	subs	r5, r5, r3
 80179e2:	eba8 0803 	sub.w	r8, r8, r3
 80179e6:	9b07      	ldr	r3, [sp, #28]
 80179e8:	b1eb      	cbz	r3, 8017a26 <_dtoa_r+0x74e>
 80179ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d067      	beq.n	8017ac0 <_dtoa_r+0x7e8>
 80179f0:	b18f      	cbz	r7, 8017a16 <_dtoa_r+0x73e>
 80179f2:	4631      	mov	r1, r6
 80179f4:	463a      	mov	r2, r7
 80179f6:	4620      	mov	r0, r4
 80179f8:	f001 f98a 	bl	8018d10 <__pow5mult>
 80179fc:	9a04      	ldr	r2, [sp, #16]
 80179fe:	4601      	mov	r1, r0
 8017a00:	4606      	mov	r6, r0
 8017a02:	4620      	mov	r0, r4
 8017a04:	f001 f8ee 	bl	8018be4 <__multiply>
 8017a08:	9904      	ldr	r1, [sp, #16]
 8017a0a:	9008      	str	r0, [sp, #32]
 8017a0c:	4620      	mov	r0, r4
 8017a0e:	f001 f810 	bl	8018a32 <_Bfree>
 8017a12:	9b08      	ldr	r3, [sp, #32]
 8017a14:	9304      	str	r3, [sp, #16]
 8017a16:	9b07      	ldr	r3, [sp, #28]
 8017a18:	1bda      	subs	r2, r3, r7
 8017a1a:	d004      	beq.n	8017a26 <_dtoa_r+0x74e>
 8017a1c:	9904      	ldr	r1, [sp, #16]
 8017a1e:	4620      	mov	r0, r4
 8017a20:	f001 f976 	bl	8018d10 <__pow5mult>
 8017a24:	9004      	str	r0, [sp, #16]
 8017a26:	2101      	movs	r1, #1
 8017a28:	4620      	mov	r0, r4
 8017a2a:	f001 f8d2 	bl	8018bd2 <__i2b>
 8017a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a30:	4607      	mov	r7, r0
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	f000 81cf 	beq.w	8017dd6 <_dtoa_r+0xafe>
 8017a38:	461a      	mov	r2, r3
 8017a3a:	4601      	mov	r1, r0
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	f001 f967 	bl	8018d10 <__pow5mult>
 8017a42:	9b06      	ldr	r3, [sp, #24]
 8017a44:	2b01      	cmp	r3, #1
 8017a46:	4607      	mov	r7, r0
 8017a48:	dc40      	bgt.n	8017acc <_dtoa_r+0x7f4>
 8017a4a:	9b00      	ldr	r3, [sp, #0]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d139      	bne.n	8017ac4 <_dtoa_r+0x7ec>
 8017a50:	9b01      	ldr	r3, [sp, #4]
 8017a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d136      	bne.n	8017ac8 <_dtoa_r+0x7f0>
 8017a5a:	9b01      	ldr	r3, [sp, #4]
 8017a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a60:	0d1b      	lsrs	r3, r3, #20
 8017a62:	051b      	lsls	r3, r3, #20
 8017a64:	b12b      	cbz	r3, 8017a72 <_dtoa_r+0x79a>
 8017a66:	9b05      	ldr	r3, [sp, #20]
 8017a68:	3301      	adds	r3, #1
 8017a6a:	9305      	str	r3, [sp, #20]
 8017a6c:	f108 0801 	add.w	r8, r8, #1
 8017a70:	2301      	movs	r3, #1
 8017a72:	9307      	str	r3, [sp, #28]
 8017a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d12a      	bne.n	8017ad0 <_dtoa_r+0x7f8>
 8017a7a:	2001      	movs	r0, #1
 8017a7c:	e030      	b.n	8017ae0 <_dtoa_r+0x808>
 8017a7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017a80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017a84:	e795      	b.n	80179b2 <_dtoa_r+0x6da>
 8017a86:	9b07      	ldr	r3, [sp, #28]
 8017a88:	f109 37ff 	add.w	r7, r9, #4294967295
 8017a8c:	42bb      	cmp	r3, r7
 8017a8e:	bfbf      	itttt	lt
 8017a90:	9b07      	ldrlt	r3, [sp, #28]
 8017a92:	9707      	strlt	r7, [sp, #28]
 8017a94:	1afa      	sublt	r2, r7, r3
 8017a96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017a98:	bfbb      	ittet	lt
 8017a9a:	189b      	addlt	r3, r3, r2
 8017a9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017a9e:	1bdf      	subge	r7, r3, r7
 8017aa0:	2700      	movlt	r7, #0
 8017aa2:	f1b9 0f00 	cmp.w	r9, #0
 8017aa6:	bfb5      	itete	lt
 8017aa8:	9b05      	ldrlt	r3, [sp, #20]
 8017aaa:	9d05      	ldrge	r5, [sp, #20]
 8017aac:	eba3 0509 	sublt.w	r5, r3, r9
 8017ab0:	464b      	movge	r3, r9
 8017ab2:	bfb8      	it	lt
 8017ab4:	2300      	movlt	r3, #0
 8017ab6:	e77e      	b.n	80179b6 <_dtoa_r+0x6de>
 8017ab8:	9f07      	ldr	r7, [sp, #28]
 8017aba:	9d05      	ldr	r5, [sp, #20]
 8017abc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017abe:	e783      	b.n	80179c8 <_dtoa_r+0x6f0>
 8017ac0:	9a07      	ldr	r2, [sp, #28]
 8017ac2:	e7ab      	b.n	8017a1c <_dtoa_r+0x744>
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	e7d4      	b.n	8017a72 <_dtoa_r+0x79a>
 8017ac8:	9b00      	ldr	r3, [sp, #0]
 8017aca:	e7d2      	b.n	8017a72 <_dtoa_r+0x79a>
 8017acc:	2300      	movs	r3, #0
 8017ace:	9307      	str	r3, [sp, #28]
 8017ad0:	693b      	ldr	r3, [r7, #16]
 8017ad2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017ad6:	6918      	ldr	r0, [r3, #16]
 8017ad8:	f001 f82d 	bl	8018b36 <__hi0bits>
 8017adc:	f1c0 0020 	rsb	r0, r0, #32
 8017ae0:	4440      	add	r0, r8
 8017ae2:	f010 001f 	ands.w	r0, r0, #31
 8017ae6:	d047      	beq.n	8017b78 <_dtoa_r+0x8a0>
 8017ae8:	f1c0 0320 	rsb	r3, r0, #32
 8017aec:	2b04      	cmp	r3, #4
 8017aee:	dd3b      	ble.n	8017b68 <_dtoa_r+0x890>
 8017af0:	9b05      	ldr	r3, [sp, #20]
 8017af2:	f1c0 001c 	rsb	r0, r0, #28
 8017af6:	4403      	add	r3, r0
 8017af8:	9305      	str	r3, [sp, #20]
 8017afa:	4405      	add	r5, r0
 8017afc:	4480      	add	r8, r0
 8017afe:	9b05      	ldr	r3, [sp, #20]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	dd05      	ble.n	8017b10 <_dtoa_r+0x838>
 8017b04:	461a      	mov	r2, r3
 8017b06:	9904      	ldr	r1, [sp, #16]
 8017b08:	4620      	mov	r0, r4
 8017b0a:	f001 f941 	bl	8018d90 <__lshift>
 8017b0e:	9004      	str	r0, [sp, #16]
 8017b10:	f1b8 0f00 	cmp.w	r8, #0
 8017b14:	dd05      	ble.n	8017b22 <_dtoa_r+0x84a>
 8017b16:	4639      	mov	r1, r7
 8017b18:	4642      	mov	r2, r8
 8017b1a:	4620      	mov	r0, r4
 8017b1c:	f001 f938 	bl	8018d90 <__lshift>
 8017b20:	4607      	mov	r7, r0
 8017b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b24:	b353      	cbz	r3, 8017b7c <_dtoa_r+0x8a4>
 8017b26:	4639      	mov	r1, r7
 8017b28:	9804      	ldr	r0, [sp, #16]
 8017b2a:	f001 f985 	bl	8018e38 <__mcmp>
 8017b2e:	2800      	cmp	r0, #0
 8017b30:	da24      	bge.n	8017b7c <_dtoa_r+0x8a4>
 8017b32:	2300      	movs	r3, #0
 8017b34:	220a      	movs	r2, #10
 8017b36:	9904      	ldr	r1, [sp, #16]
 8017b38:	4620      	mov	r0, r4
 8017b3a:	f000 ff83 	bl	8018a44 <__multadd>
 8017b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b40:	9004      	str	r0, [sp, #16]
 8017b42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	f000 814c 	beq.w	8017de4 <_dtoa_r+0xb0c>
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	4631      	mov	r1, r6
 8017b50:	220a      	movs	r2, #10
 8017b52:	4620      	mov	r0, r4
 8017b54:	f000 ff76 	bl	8018a44 <__multadd>
 8017b58:	9b02      	ldr	r3, [sp, #8]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	4606      	mov	r6, r0
 8017b5e:	dc4f      	bgt.n	8017c00 <_dtoa_r+0x928>
 8017b60:	9b06      	ldr	r3, [sp, #24]
 8017b62:	2b02      	cmp	r3, #2
 8017b64:	dd4c      	ble.n	8017c00 <_dtoa_r+0x928>
 8017b66:	e011      	b.n	8017b8c <_dtoa_r+0x8b4>
 8017b68:	d0c9      	beq.n	8017afe <_dtoa_r+0x826>
 8017b6a:	9a05      	ldr	r2, [sp, #20]
 8017b6c:	331c      	adds	r3, #28
 8017b6e:	441a      	add	r2, r3
 8017b70:	9205      	str	r2, [sp, #20]
 8017b72:	441d      	add	r5, r3
 8017b74:	4498      	add	r8, r3
 8017b76:	e7c2      	b.n	8017afe <_dtoa_r+0x826>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	e7f6      	b.n	8017b6a <_dtoa_r+0x892>
 8017b7c:	f1b9 0f00 	cmp.w	r9, #0
 8017b80:	dc38      	bgt.n	8017bf4 <_dtoa_r+0x91c>
 8017b82:	9b06      	ldr	r3, [sp, #24]
 8017b84:	2b02      	cmp	r3, #2
 8017b86:	dd35      	ble.n	8017bf4 <_dtoa_r+0x91c>
 8017b88:	f8cd 9008 	str.w	r9, [sp, #8]
 8017b8c:	9b02      	ldr	r3, [sp, #8]
 8017b8e:	b963      	cbnz	r3, 8017baa <_dtoa_r+0x8d2>
 8017b90:	4639      	mov	r1, r7
 8017b92:	2205      	movs	r2, #5
 8017b94:	4620      	mov	r0, r4
 8017b96:	f000 ff55 	bl	8018a44 <__multadd>
 8017b9a:	4601      	mov	r1, r0
 8017b9c:	4607      	mov	r7, r0
 8017b9e:	9804      	ldr	r0, [sp, #16]
 8017ba0:	f001 f94a 	bl	8018e38 <__mcmp>
 8017ba4:	2800      	cmp	r0, #0
 8017ba6:	f73f adcc 	bgt.w	8017742 <_dtoa_r+0x46a>
 8017baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bac:	465d      	mov	r5, fp
 8017bae:	ea6f 0a03 	mvn.w	sl, r3
 8017bb2:	f04f 0900 	mov.w	r9, #0
 8017bb6:	4639      	mov	r1, r7
 8017bb8:	4620      	mov	r0, r4
 8017bba:	f000 ff3a 	bl	8018a32 <_Bfree>
 8017bbe:	2e00      	cmp	r6, #0
 8017bc0:	f43f aeb7 	beq.w	8017932 <_dtoa_r+0x65a>
 8017bc4:	f1b9 0f00 	cmp.w	r9, #0
 8017bc8:	d005      	beq.n	8017bd6 <_dtoa_r+0x8fe>
 8017bca:	45b1      	cmp	r9, r6
 8017bcc:	d003      	beq.n	8017bd6 <_dtoa_r+0x8fe>
 8017bce:	4649      	mov	r1, r9
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	f000 ff2e 	bl	8018a32 <_Bfree>
 8017bd6:	4631      	mov	r1, r6
 8017bd8:	4620      	mov	r0, r4
 8017bda:	f000 ff2a 	bl	8018a32 <_Bfree>
 8017bde:	e6a8      	b.n	8017932 <_dtoa_r+0x65a>
 8017be0:	2700      	movs	r7, #0
 8017be2:	463e      	mov	r6, r7
 8017be4:	e7e1      	b.n	8017baa <_dtoa_r+0x8d2>
 8017be6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017bea:	463e      	mov	r6, r7
 8017bec:	e5a9      	b.n	8017742 <_dtoa_r+0x46a>
 8017bee:	bf00      	nop
 8017bf0:	40240000 	.word	0x40240000
 8017bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	f000 80f9 	beq.w	8017df2 <_dtoa_r+0xb1a>
 8017c00:	2d00      	cmp	r5, #0
 8017c02:	dd05      	ble.n	8017c10 <_dtoa_r+0x938>
 8017c04:	4631      	mov	r1, r6
 8017c06:	462a      	mov	r2, r5
 8017c08:	4620      	mov	r0, r4
 8017c0a:	f001 f8c1 	bl	8018d90 <__lshift>
 8017c0e:	4606      	mov	r6, r0
 8017c10:	9b07      	ldr	r3, [sp, #28]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d04c      	beq.n	8017cb0 <_dtoa_r+0x9d8>
 8017c16:	6871      	ldr	r1, [r6, #4]
 8017c18:	4620      	mov	r0, r4
 8017c1a:	f000 fee5 	bl	80189e8 <_Balloc>
 8017c1e:	6932      	ldr	r2, [r6, #16]
 8017c20:	3202      	adds	r2, #2
 8017c22:	4605      	mov	r5, r0
 8017c24:	0092      	lsls	r2, r2, #2
 8017c26:	f106 010c 	add.w	r1, r6, #12
 8017c2a:	300c      	adds	r0, #12
 8017c2c:	f7fb fa8d 	bl	801314a <memcpy>
 8017c30:	2201      	movs	r2, #1
 8017c32:	4629      	mov	r1, r5
 8017c34:	4620      	mov	r0, r4
 8017c36:	f001 f8ab 	bl	8018d90 <__lshift>
 8017c3a:	9b00      	ldr	r3, [sp, #0]
 8017c3c:	f8cd b014 	str.w	fp, [sp, #20]
 8017c40:	f003 0301 	and.w	r3, r3, #1
 8017c44:	46b1      	mov	r9, r6
 8017c46:	9307      	str	r3, [sp, #28]
 8017c48:	4606      	mov	r6, r0
 8017c4a:	4639      	mov	r1, r7
 8017c4c:	9804      	ldr	r0, [sp, #16]
 8017c4e:	f7ff fab7 	bl	80171c0 <quorem>
 8017c52:	4649      	mov	r1, r9
 8017c54:	4605      	mov	r5, r0
 8017c56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017c5a:	9804      	ldr	r0, [sp, #16]
 8017c5c:	f001 f8ec 	bl	8018e38 <__mcmp>
 8017c60:	4632      	mov	r2, r6
 8017c62:	9000      	str	r0, [sp, #0]
 8017c64:	4639      	mov	r1, r7
 8017c66:	4620      	mov	r0, r4
 8017c68:	f001 f900 	bl	8018e6c <__mdiff>
 8017c6c:	68c3      	ldr	r3, [r0, #12]
 8017c6e:	4602      	mov	r2, r0
 8017c70:	bb03      	cbnz	r3, 8017cb4 <_dtoa_r+0x9dc>
 8017c72:	4601      	mov	r1, r0
 8017c74:	9008      	str	r0, [sp, #32]
 8017c76:	9804      	ldr	r0, [sp, #16]
 8017c78:	f001 f8de 	bl	8018e38 <__mcmp>
 8017c7c:	9a08      	ldr	r2, [sp, #32]
 8017c7e:	4603      	mov	r3, r0
 8017c80:	4611      	mov	r1, r2
 8017c82:	4620      	mov	r0, r4
 8017c84:	9308      	str	r3, [sp, #32]
 8017c86:	f000 fed4 	bl	8018a32 <_Bfree>
 8017c8a:	9b08      	ldr	r3, [sp, #32]
 8017c8c:	b9a3      	cbnz	r3, 8017cb8 <_dtoa_r+0x9e0>
 8017c8e:	9a06      	ldr	r2, [sp, #24]
 8017c90:	b992      	cbnz	r2, 8017cb8 <_dtoa_r+0x9e0>
 8017c92:	9a07      	ldr	r2, [sp, #28]
 8017c94:	b982      	cbnz	r2, 8017cb8 <_dtoa_r+0x9e0>
 8017c96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017c9a:	d029      	beq.n	8017cf0 <_dtoa_r+0xa18>
 8017c9c:	9b00      	ldr	r3, [sp, #0]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	dd01      	ble.n	8017ca6 <_dtoa_r+0x9ce>
 8017ca2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017ca6:	9b05      	ldr	r3, [sp, #20]
 8017ca8:	1c5d      	adds	r5, r3, #1
 8017caa:	f883 8000 	strb.w	r8, [r3]
 8017cae:	e782      	b.n	8017bb6 <_dtoa_r+0x8de>
 8017cb0:	4630      	mov	r0, r6
 8017cb2:	e7c2      	b.n	8017c3a <_dtoa_r+0x962>
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	e7e3      	b.n	8017c80 <_dtoa_r+0x9a8>
 8017cb8:	9a00      	ldr	r2, [sp, #0]
 8017cba:	2a00      	cmp	r2, #0
 8017cbc:	db04      	blt.n	8017cc8 <_dtoa_r+0x9f0>
 8017cbe:	d125      	bne.n	8017d0c <_dtoa_r+0xa34>
 8017cc0:	9a06      	ldr	r2, [sp, #24]
 8017cc2:	bb1a      	cbnz	r2, 8017d0c <_dtoa_r+0xa34>
 8017cc4:	9a07      	ldr	r2, [sp, #28]
 8017cc6:	bb0a      	cbnz	r2, 8017d0c <_dtoa_r+0xa34>
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	ddec      	ble.n	8017ca6 <_dtoa_r+0x9ce>
 8017ccc:	2201      	movs	r2, #1
 8017cce:	9904      	ldr	r1, [sp, #16]
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	f001 f85d 	bl	8018d90 <__lshift>
 8017cd6:	4639      	mov	r1, r7
 8017cd8:	9004      	str	r0, [sp, #16]
 8017cda:	f001 f8ad 	bl	8018e38 <__mcmp>
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	dc03      	bgt.n	8017cea <_dtoa_r+0xa12>
 8017ce2:	d1e0      	bne.n	8017ca6 <_dtoa_r+0x9ce>
 8017ce4:	f018 0f01 	tst.w	r8, #1
 8017ce8:	d0dd      	beq.n	8017ca6 <_dtoa_r+0x9ce>
 8017cea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017cee:	d1d8      	bne.n	8017ca2 <_dtoa_r+0x9ca>
 8017cf0:	9b05      	ldr	r3, [sp, #20]
 8017cf2:	9a05      	ldr	r2, [sp, #20]
 8017cf4:	1c5d      	adds	r5, r3, #1
 8017cf6:	2339      	movs	r3, #57	; 0x39
 8017cf8:	7013      	strb	r3, [r2, #0]
 8017cfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017cfe:	2b39      	cmp	r3, #57	; 0x39
 8017d00:	f105 32ff 	add.w	r2, r5, #4294967295
 8017d04:	d04f      	beq.n	8017da6 <_dtoa_r+0xace>
 8017d06:	3301      	adds	r3, #1
 8017d08:	7013      	strb	r3, [r2, #0]
 8017d0a:	e754      	b.n	8017bb6 <_dtoa_r+0x8de>
 8017d0c:	9a05      	ldr	r2, [sp, #20]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	f102 0501 	add.w	r5, r2, #1
 8017d14:	dd06      	ble.n	8017d24 <_dtoa_r+0xa4c>
 8017d16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017d1a:	d0e9      	beq.n	8017cf0 <_dtoa_r+0xa18>
 8017d1c:	f108 0801 	add.w	r8, r8, #1
 8017d20:	9b05      	ldr	r3, [sp, #20]
 8017d22:	e7c2      	b.n	8017caa <_dtoa_r+0x9d2>
 8017d24:	9a02      	ldr	r2, [sp, #8]
 8017d26:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017d2a:	eba5 030b 	sub.w	r3, r5, fp
 8017d2e:	4293      	cmp	r3, r2
 8017d30:	d021      	beq.n	8017d76 <_dtoa_r+0xa9e>
 8017d32:	2300      	movs	r3, #0
 8017d34:	220a      	movs	r2, #10
 8017d36:	9904      	ldr	r1, [sp, #16]
 8017d38:	4620      	mov	r0, r4
 8017d3a:	f000 fe83 	bl	8018a44 <__multadd>
 8017d3e:	45b1      	cmp	r9, r6
 8017d40:	9004      	str	r0, [sp, #16]
 8017d42:	f04f 0300 	mov.w	r3, #0
 8017d46:	f04f 020a 	mov.w	r2, #10
 8017d4a:	4649      	mov	r1, r9
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	d105      	bne.n	8017d5c <_dtoa_r+0xa84>
 8017d50:	f000 fe78 	bl	8018a44 <__multadd>
 8017d54:	4681      	mov	r9, r0
 8017d56:	4606      	mov	r6, r0
 8017d58:	9505      	str	r5, [sp, #20]
 8017d5a:	e776      	b.n	8017c4a <_dtoa_r+0x972>
 8017d5c:	f000 fe72 	bl	8018a44 <__multadd>
 8017d60:	4631      	mov	r1, r6
 8017d62:	4681      	mov	r9, r0
 8017d64:	2300      	movs	r3, #0
 8017d66:	220a      	movs	r2, #10
 8017d68:	4620      	mov	r0, r4
 8017d6a:	f000 fe6b 	bl	8018a44 <__multadd>
 8017d6e:	4606      	mov	r6, r0
 8017d70:	e7f2      	b.n	8017d58 <_dtoa_r+0xa80>
 8017d72:	f04f 0900 	mov.w	r9, #0
 8017d76:	2201      	movs	r2, #1
 8017d78:	9904      	ldr	r1, [sp, #16]
 8017d7a:	4620      	mov	r0, r4
 8017d7c:	f001 f808 	bl	8018d90 <__lshift>
 8017d80:	4639      	mov	r1, r7
 8017d82:	9004      	str	r0, [sp, #16]
 8017d84:	f001 f858 	bl	8018e38 <__mcmp>
 8017d88:	2800      	cmp	r0, #0
 8017d8a:	dcb6      	bgt.n	8017cfa <_dtoa_r+0xa22>
 8017d8c:	d102      	bne.n	8017d94 <_dtoa_r+0xabc>
 8017d8e:	f018 0f01 	tst.w	r8, #1
 8017d92:	d1b2      	bne.n	8017cfa <_dtoa_r+0xa22>
 8017d94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017d98:	2b30      	cmp	r3, #48	; 0x30
 8017d9a:	f105 32ff 	add.w	r2, r5, #4294967295
 8017d9e:	f47f af0a 	bne.w	8017bb6 <_dtoa_r+0x8de>
 8017da2:	4615      	mov	r5, r2
 8017da4:	e7f6      	b.n	8017d94 <_dtoa_r+0xabc>
 8017da6:	4593      	cmp	fp, r2
 8017da8:	d105      	bne.n	8017db6 <_dtoa_r+0xade>
 8017daa:	2331      	movs	r3, #49	; 0x31
 8017dac:	f10a 0a01 	add.w	sl, sl, #1
 8017db0:	f88b 3000 	strb.w	r3, [fp]
 8017db4:	e6ff      	b.n	8017bb6 <_dtoa_r+0x8de>
 8017db6:	4615      	mov	r5, r2
 8017db8:	e79f      	b.n	8017cfa <_dtoa_r+0xa22>
 8017dba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017e20 <_dtoa_r+0xb48>
 8017dbe:	f7ff bac5 	b.w	801734c <_dtoa_r+0x74>
 8017dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017dc4:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8017e24 <_dtoa_r+0xb4c>
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	f43f aabf 	beq.w	801734c <_dtoa_r+0x74>
 8017dce:	f10b 0308 	add.w	r3, fp, #8
 8017dd2:	f7ff bab9 	b.w	8017348 <_dtoa_r+0x70>
 8017dd6:	9b06      	ldr	r3, [sp, #24]
 8017dd8:	2b01      	cmp	r3, #1
 8017dda:	f77f ae36 	ble.w	8017a4a <_dtoa_r+0x772>
 8017dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017de0:	9307      	str	r3, [sp, #28]
 8017de2:	e64a      	b.n	8017a7a <_dtoa_r+0x7a2>
 8017de4:	9b02      	ldr	r3, [sp, #8]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	dc03      	bgt.n	8017df2 <_dtoa_r+0xb1a>
 8017dea:	9b06      	ldr	r3, [sp, #24]
 8017dec:	2b02      	cmp	r3, #2
 8017dee:	f73f aecd 	bgt.w	8017b8c <_dtoa_r+0x8b4>
 8017df2:	465d      	mov	r5, fp
 8017df4:	4639      	mov	r1, r7
 8017df6:	9804      	ldr	r0, [sp, #16]
 8017df8:	f7ff f9e2 	bl	80171c0 <quorem>
 8017dfc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017e00:	f805 8b01 	strb.w	r8, [r5], #1
 8017e04:	9a02      	ldr	r2, [sp, #8]
 8017e06:	eba5 030b 	sub.w	r3, r5, fp
 8017e0a:	429a      	cmp	r2, r3
 8017e0c:	ddb1      	ble.n	8017d72 <_dtoa_r+0xa9a>
 8017e0e:	2300      	movs	r3, #0
 8017e10:	220a      	movs	r2, #10
 8017e12:	9904      	ldr	r1, [sp, #16]
 8017e14:	4620      	mov	r0, r4
 8017e16:	f000 fe15 	bl	8018a44 <__multadd>
 8017e1a:	9004      	str	r0, [sp, #16]
 8017e1c:	e7ea      	b.n	8017df4 <_dtoa_r+0xb1c>
 8017e1e:	bf00      	nop
 8017e20:	0801cc92 	.word	0x0801cc92
 8017e24:	0801ccd4 	.word	0x0801ccd4

08017e28 <__sflush_r>:
 8017e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e2c:	b293      	uxth	r3, r2
 8017e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e32:	4605      	mov	r5, r0
 8017e34:	0718      	lsls	r0, r3, #28
 8017e36:	460c      	mov	r4, r1
 8017e38:	d45f      	bmi.n	8017efa <__sflush_r+0xd2>
 8017e3a:	684b      	ldr	r3, [r1, #4]
 8017e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	818a      	strh	r2, [r1, #12]
 8017e44:	dc05      	bgt.n	8017e52 <__sflush_r+0x2a>
 8017e46:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	dc02      	bgt.n	8017e52 <__sflush_r+0x2a>
 8017e4c:	2000      	movs	r0, #0
 8017e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e54:	2e00      	cmp	r6, #0
 8017e56:	d0f9      	beq.n	8017e4c <__sflush_r+0x24>
 8017e58:	2300      	movs	r3, #0
 8017e5a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017e5e:	682f      	ldr	r7, [r5, #0]
 8017e60:	69e1      	ldr	r1, [r4, #28]
 8017e62:	602b      	str	r3, [r5, #0]
 8017e64:	d036      	beq.n	8017ed4 <__sflush_r+0xac>
 8017e66:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8017e68:	89a3      	ldrh	r3, [r4, #12]
 8017e6a:	075a      	lsls	r2, r3, #29
 8017e6c:	d505      	bpl.n	8017e7a <__sflush_r+0x52>
 8017e6e:	6863      	ldr	r3, [r4, #4]
 8017e70:	1ac0      	subs	r0, r0, r3
 8017e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017e74:	b10b      	cbz	r3, 8017e7a <__sflush_r+0x52>
 8017e76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e78:	1ac0      	subs	r0, r0, r3
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	4602      	mov	r2, r0
 8017e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e80:	69e1      	ldr	r1, [r4, #28]
 8017e82:	4628      	mov	r0, r5
 8017e84:	47b0      	blx	r6
 8017e86:	1c43      	adds	r3, r0, #1
 8017e88:	89a3      	ldrh	r3, [r4, #12]
 8017e8a:	d106      	bne.n	8017e9a <__sflush_r+0x72>
 8017e8c:	6829      	ldr	r1, [r5, #0]
 8017e8e:	291d      	cmp	r1, #29
 8017e90:	d84c      	bhi.n	8017f2c <__sflush_r+0x104>
 8017e92:	4a2b      	ldr	r2, [pc, #172]	; (8017f40 <__sflush_r+0x118>)
 8017e94:	40ca      	lsrs	r2, r1
 8017e96:	07d6      	lsls	r6, r2, #31
 8017e98:	d548      	bpl.n	8017f2c <__sflush_r+0x104>
 8017e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017e9e:	b21b      	sxth	r3, r3
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	6062      	str	r2, [r4, #4]
 8017ea4:	04d9      	lsls	r1, r3, #19
 8017ea6:	6922      	ldr	r2, [r4, #16]
 8017ea8:	81a3      	strh	r3, [r4, #12]
 8017eaa:	6022      	str	r2, [r4, #0]
 8017eac:	d504      	bpl.n	8017eb8 <__sflush_r+0x90>
 8017eae:	1c42      	adds	r2, r0, #1
 8017eb0:	d101      	bne.n	8017eb6 <__sflush_r+0x8e>
 8017eb2:	682b      	ldr	r3, [r5, #0]
 8017eb4:	b903      	cbnz	r3, 8017eb8 <__sflush_r+0x90>
 8017eb6:	6520      	str	r0, [r4, #80]	; 0x50
 8017eb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017eba:	602f      	str	r7, [r5, #0]
 8017ebc:	2900      	cmp	r1, #0
 8017ebe:	d0c5      	beq.n	8017e4c <__sflush_r+0x24>
 8017ec0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8017ec4:	4299      	cmp	r1, r3
 8017ec6:	d002      	beq.n	8017ece <__sflush_r+0xa6>
 8017ec8:	4628      	mov	r0, r5
 8017eca:	f000 f937 	bl	801813c <_free_r>
 8017ece:	2000      	movs	r0, #0
 8017ed0:	6320      	str	r0, [r4, #48]	; 0x30
 8017ed2:	e7bc      	b.n	8017e4e <__sflush_r+0x26>
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	4628      	mov	r0, r5
 8017ed8:	47b0      	blx	r6
 8017eda:	1c41      	adds	r1, r0, #1
 8017edc:	d1c4      	bne.n	8017e68 <__sflush_r+0x40>
 8017ede:	682b      	ldr	r3, [r5, #0]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d0c1      	beq.n	8017e68 <__sflush_r+0x40>
 8017ee4:	2b1d      	cmp	r3, #29
 8017ee6:	d001      	beq.n	8017eec <__sflush_r+0xc4>
 8017ee8:	2b16      	cmp	r3, #22
 8017eea:	d101      	bne.n	8017ef0 <__sflush_r+0xc8>
 8017eec:	602f      	str	r7, [r5, #0]
 8017eee:	e7ad      	b.n	8017e4c <__sflush_r+0x24>
 8017ef0:	89a3      	ldrh	r3, [r4, #12]
 8017ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ef6:	81a3      	strh	r3, [r4, #12]
 8017ef8:	e7a9      	b.n	8017e4e <__sflush_r+0x26>
 8017efa:	690f      	ldr	r7, [r1, #16]
 8017efc:	2f00      	cmp	r7, #0
 8017efe:	d0a5      	beq.n	8017e4c <__sflush_r+0x24>
 8017f00:	079b      	lsls	r3, r3, #30
 8017f02:	680e      	ldr	r6, [r1, #0]
 8017f04:	bf08      	it	eq
 8017f06:	694b      	ldreq	r3, [r1, #20]
 8017f08:	600f      	str	r7, [r1, #0]
 8017f0a:	bf18      	it	ne
 8017f0c:	2300      	movne	r3, #0
 8017f0e:	eba6 0807 	sub.w	r8, r6, r7
 8017f12:	608b      	str	r3, [r1, #8]
 8017f14:	f1b8 0f00 	cmp.w	r8, #0
 8017f18:	dd98      	ble.n	8017e4c <__sflush_r+0x24>
 8017f1a:	4643      	mov	r3, r8
 8017f1c:	463a      	mov	r2, r7
 8017f1e:	69e1      	ldr	r1, [r4, #28]
 8017f20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017f22:	4628      	mov	r0, r5
 8017f24:	47b0      	blx	r6
 8017f26:	2800      	cmp	r0, #0
 8017f28:	dc06      	bgt.n	8017f38 <__sflush_r+0x110>
 8017f2a:	89a3      	ldrh	r3, [r4, #12]
 8017f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f30:	81a3      	strh	r3, [r4, #12]
 8017f32:	f04f 30ff 	mov.w	r0, #4294967295
 8017f36:	e78a      	b.n	8017e4e <__sflush_r+0x26>
 8017f38:	4407      	add	r7, r0
 8017f3a:	eba8 0800 	sub.w	r8, r8, r0
 8017f3e:	e7e9      	b.n	8017f14 <__sflush_r+0xec>
 8017f40:	20400001 	.word	0x20400001

08017f44 <_fflush_r>:
 8017f44:	b538      	push	{r3, r4, r5, lr}
 8017f46:	460c      	mov	r4, r1
 8017f48:	4605      	mov	r5, r0
 8017f4a:	b118      	cbz	r0, 8017f54 <_fflush_r+0x10>
 8017f4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017f4e:	b90b      	cbnz	r3, 8017f54 <_fflush_r+0x10>
 8017f50:	f000 f864 	bl	801801c <__sinit>
 8017f54:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8017f58:	b1b8      	cbz	r0, 8017f8a <_fflush_r+0x46>
 8017f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f5c:	07db      	lsls	r3, r3, #31
 8017f5e:	d404      	bmi.n	8017f6a <_fflush_r+0x26>
 8017f60:	0581      	lsls	r1, r0, #22
 8017f62:	d402      	bmi.n	8017f6a <_fflush_r+0x26>
 8017f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f66:	f7fa fe2d 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 8017f6a:	4628      	mov	r0, r5
 8017f6c:	4621      	mov	r1, r4
 8017f6e:	f7ff ff5b 	bl	8017e28 <__sflush_r>
 8017f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f74:	07da      	lsls	r2, r3, #31
 8017f76:	4605      	mov	r5, r0
 8017f78:	d405      	bmi.n	8017f86 <_fflush_r+0x42>
 8017f7a:	89a3      	ldrh	r3, [r4, #12]
 8017f7c:	059b      	lsls	r3, r3, #22
 8017f7e:	d402      	bmi.n	8017f86 <_fflush_r+0x42>
 8017f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f82:	f7fa fe20 	bl	8012bc6 <__retarget_lock_release_recursive>
 8017f86:	4628      	mov	r0, r5
 8017f88:	bd38      	pop	{r3, r4, r5, pc}
 8017f8a:	4605      	mov	r5, r0
 8017f8c:	e7fb      	b.n	8017f86 <_fflush_r+0x42>
	...

08017f90 <std>:
 8017f90:	2300      	movs	r3, #0
 8017f92:	b510      	push	{r4, lr}
 8017f94:	4604      	mov	r4, r0
 8017f96:	e9c0 3300 	strd	r3, r3, [r0]
 8017f9a:	6083      	str	r3, [r0, #8]
 8017f9c:	8181      	strh	r1, [r0, #12]
 8017f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8017fa0:	81c2      	strh	r2, [r0, #14]
 8017fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017fa6:	6183      	str	r3, [r0, #24]
 8017fa8:	4619      	mov	r1, r3
 8017faa:	2208      	movs	r2, #8
 8017fac:	305c      	adds	r0, #92	; 0x5c
 8017fae:	f7fb f8f0 	bl	8013192 <memset>
 8017fb2:	4b07      	ldr	r3, [pc, #28]	; (8017fd0 <std+0x40>)
 8017fb4:	6223      	str	r3, [r4, #32]
 8017fb6:	4b07      	ldr	r3, [pc, #28]	; (8017fd4 <std+0x44>)
 8017fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8017fba:	4b07      	ldr	r3, [pc, #28]	; (8017fd8 <std+0x48>)
 8017fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8017fbe:	4b07      	ldr	r3, [pc, #28]	; (8017fdc <std+0x4c>)
 8017fc0:	61e4      	str	r4, [r4, #28]
 8017fc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017fc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fcc:	f7fa bdf8 	b.w	8012bc0 <__retarget_lock_init_recursive>
 8017fd0:	08013745 	.word	0x08013745
 8017fd4:	08013767 	.word	0x08013767
 8017fd8:	0801379f 	.word	0x0801379f
 8017fdc:	080137c3 	.word	0x080137c3

08017fe0 <_cleanup_r>:
 8017fe0:	4901      	ldr	r1, [pc, #4]	; (8017fe8 <_cleanup_r+0x8>)
 8017fe2:	f000 b967 	b.w	80182b4 <_fwalk_reent>
 8017fe6:	bf00      	nop
 8017fe8:	080195bb 	.word	0x080195bb

08017fec <__sfp_lock_acquire>:
 8017fec:	4801      	ldr	r0, [pc, #4]	; (8017ff4 <__sfp_lock_acquire+0x8>)
 8017fee:	f7fa bde9 	b.w	8012bc4 <__retarget_lock_acquire_recursive>
 8017ff2:	bf00      	nop
 8017ff4:	200010f4 	.word	0x200010f4

08017ff8 <__sfp_lock_release>:
 8017ff8:	4801      	ldr	r0, [pc, #4]	; (8018000 <__sfp_lock_release+0x8>)
 8017ffa:	f7fa bde4 	b.w	8012bc6 <__retarget_lock_release_recursive>
 8017ffe:	bf00      	nop
 8018000:	200010f4 	.word	0x200010f4

08018004 <__sinit_lock_acquire>:
 8018004:	4801      	ldr	r0, [pc, #4]	; (801800c <__sinit_lock_acquire+0x8>)
 8018006:	f7fa bddd 	b.w	8012bc4 <__retarget_lock_acquire_recursive>
 801800a:	bf00      	nop
 801800c:	200010ef 	.word	0x200010ef

08018010 <__sinit_lock_release>:
 8018010:	4801      	ldr	r0, [pc, #4]	; (8018018 <__sinit_lock_release+0x8>)
 8018012:	f7fa bdd8 	b.w	8012bc6 <__retarget_lock_release_recursive>
 8018016:	bf00      	nop
 8018018:	200010ef 	.word	0x200010ef

0801801c <__sinit>:
 801801c:	b510      	push	{r4, lr}
 801801e:	4604      	mov	r4, r0
 8018020:	f7ff fff0 	bl	8018004 <__sinit_lock_acquire>
 8018024:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018026:	b11a      	cbz	r2, 8018030 <__sinit+0x14>
 8018028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801802c:	f7ff bff0 	b.w	8018010 <__sinit_lock_release>
 8018030:	4b0d      	ldr	r3, [pc, #52]	; (8018068 <__sinit+0x4c>)
 8018032:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018034:	2303      	movs	r3, #3
 8018036:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801803a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801803e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8018042:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8018046:	2104      	movs	r1, #4
 8018048:	6860      	ldr	r0, [r4, #4]
 801804a:	f7ff ffa1 	bl	8017f90 <std>
 801804e:	2201      	movs	r2, #1
 8018050:	2109      	movs	r1, #9
 8018052:	68a0      	ldr	r0, [r4, #8]
 8018054:	f7ff ff9c 	bl	8017f90 <std>
 8018058:	2202      	movs	r2, #2
 801805a:	2112      	movs	r1, #18
 801805c:	68e0      	ldr	r0, [r4, #12]
 801805e:	f7ff ff97 	bl	8017f90 <std>
 8018062:	2301      	movs	r3, #1
 8018064:	63a3      	str	r3, [r4, #56]	; 0x38
 8018066:	e7df      	b.n	8018028 <__sinit+0xc>
 8018068:	08017fe1 	.word	0x08017fe1

0801806c <__libc_fini_array>:
 801806c:	b538      	push	{r3, r4, r5, lr}
 801806e:	4d07      	ldr	r5, [pc, #28]	; (801808c <__libc_fini_array+0x20>)
 8018070:	4c07      	ldr	r4, [pc, #28]	; (8018090 <__libc_fini_array+0x24>)
 8018072:	1b64      	subs	r4, r4, r5
 8018074:	10a4      	asrs	r4, r4, #2
 8018076:	b91c      	cbnz	r4, 8018080 <__libc_fini_array+0x14>
 8018078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801807c:	f001 bb88 	b.w	8019790 <_fini>
 8018080:	3c01      	subs	r4, #1
 8018082:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8018086:	4798      	blx	r3
 8018088:	e7f5      	b.n	8018076 <__libc_fini_array+0xa>
 801808a:	bf00      	nop
 801808c:	0801dcac 	.word	0x0801dcac
 8018090:	0801dcb4 	.word	0x0801dcb4

08018094 <_malloc_trim_r>:
 8018094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018098:	4605      	mov	r5, r0
 801809a:	2008      	movs	r0, #8
 801809c:	460c      	mov	r4, r1
 801809e:	f7fd fd45 	bl	8015b2c <sysconf>
 80180a2:	4f23      	ldr	r7, [pc, #140]	; (8018130 <_malloc_trim_r+0x9c>)
 80180a4:	4680      	mov	r8, r0
 80180a6:	4628      	mov	r0, r5
 80180a8:	f7fb f87c 	bl	80131a4 <__malloc_lock>
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	685e      	ldr	r6, [r3, #4]
 80180b0:	f026 0603 	bic.w	r6, r6, #3
 80180b4:	1b34      	subs	r4, r6, r4
 80180b6:	3c11      	subs	r4, #17
 80180b8:	4444      	add	r4, r8
 80180ba:	fbb4 f4f8 	udiv	r4, r4, r8
 80180be:	3c01      	subs	r4, #1
 80180c0:	fb08 f404 	mul.w	r4, r8, r4
 80180c4:	45a0      	cmp	r8, r4
 80180c6:	dd05      	ble.n	80180d4 <_malloc_trim_r+0x40>
 80180c8:	4628      	mov	r0, r5
 80180ca:	f7fb f871 	bl	80131b0 <__malloc_unlock>
 80180ce:	2000      	movs	r0, #0
 80180d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d4:	2100      	movs	r1, #0
 80180d6:	4628      	mov	r0, r5
 80180d8:	f7fb fa8a 	bl	80135f0 <_sbrk_r>
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	4433      	add	r3, r6
 80180e0:	4298      	cmp	r0, r3
 80180e2:	d1f1      	bne.n	80180c8 <_malloc_trim_r+0x34>
 80180e4:	4261      	negs	r1, r4
 80180e6:	4628      	mov	r0, r5
 80180e8:	f7fb fa82 	bl	80135f0 <_sbrk_r>
 80180ec:	3001      	adds	r0, #1
 80180ee:	d110      	bne.n	8018112 <_malloc_trim_r+0x7e>
 80180f0:	2100      	movs	r1, #0
 80180f2:	4628      	mov	r0, r5
 80180f4:	f7fb fa7c 	bl	80135f0 <_sbrk_r>
 80180f8:	68ba      	ldr	r2, [r7, #8]
 80180fa:	1a83      	subs	r3, r0, r2
 80180fc:	2b0f      	cmp	r3, #15
 80180fe:	dde3      	ble.n	80180c8 <_malloc_trim_r+0x34>
 8018100:	490c      	ldr	r1, [pc, #48]	; (8018134 <_malloc_trim_r+0xa0>)
 8018102:	6809      	ldr	r1, [r1, #0]
 8018104:	1a40      	subs	r0, r0, r1
 8018106:	490c      	ldr	r1, [pc, #48]	; (8018138 <_malloc_trim_r+0xa4>)
 8018108:	f043 0301 	orr.w	r3, r3, #1
 801810c:	6008      	str	r0, [r1, #0]
 801810e:	6053      	str	r3, [r2, #4]
 8018110:	e7da      	b.n	80180c8 <_malloc_trim_r+0x34>
 8018112:	68bb      	ldr	r3, [r7, #8]
 8018114:	4a08      	ldr	r2, [pc, #32]	; (8018138 <_malloc_trim_r+0xa4>)
 8018116:	1b36      	subs	r6, r6, r4
 8018118:	f046 0601 	orr.w	r6, r6, #1
 801811c:	605e      	str	r6, [r3, #4]
 801811e:	6813      	ldr	r3, [r2, #0]
 8018120:	4628      	mov	r0, r5
 8018122:	1b1c      	subs	r4, r3, r4
 8018124:	6014      	str	r4, [r2, #0]
 8018126:	f7fb f843 	bl	80131b0 <__malloc_unlock>
 801812a:	2001      	movs	r0, #1
 801812c:	e7d0      	b.n	80180d0 <_malloc_trim_r+0x3c>
 801812e:	bf00      	nop
 8018130:	20000830 	.word	0x20000830
 8018134:	20000c38 	.word	0x20000c38
 8018138:	200010b4 	.word	0x200010b4

0801813c <_free_r>:
 801813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018140:	4604      	mov	r4, r0
 8018142:	4688      	mov	r8, r1
 8018144:	2900      	cmp	r1, #0
 8018146:	f000 80ab 	beq.w	80182a0 <_free_r+0x164>
 801814a:	f7fb f82b 	bl	80131a4 <__malloc_lock>
 801814e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8018152:	4d54      	ldr	r5, [pc, #336]	; (80182a4 <_free_r+0x168>)
 8018154:	f022 0001 	bic.w	r0, r2, #1
 8018158:	f1a8 0308 	sub.w	r3, r8, #8
 801815c:	181f      	adds	r7, r3, r0
 801815e:	68a9      	ldr	r1, [r5, #8]
 8018160:	687e      	ldr	r6, [r7, #4]
 8018162:	42b9      	cmp	r1, r7
 8018164:	f026 0603 	bic.w	r6, r6, #3
 8018168:	f002 0201 	and.w	r2, r2, #1
 801816c:	d11b      	bne.n	80181a6 <_free_r+0x6a>
 801816e:	4430      	add	r0, r6
 8018170:	b93a      	cbnz	r2, 8018182 <_free_r+0x46>
 8018172:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8018176:	1a9b      	subs	r3, r3, r2
 8018178:	4410      	add	r0, r2
 801817a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801817e:	60ca      	str	r2, [r1, #12]
 8018180:	6091      	str	r1, [r2, #8]
 8018182:	f040 0201 	orr.w	r2, r0, #1
 8018186:	605a      	str	r2, [r3, #4]
 8018188:	60ab      	str	r3, [r5, #8]
 801818a:	4b47      	ldr	r3, [pc, #284]	; (80182a8 <_free_r+0x16c>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	4283      	cmp	r3, r0
 8018190:	d804      	bhi.n	801819c <_free_r+0x60>
 8018192:	4b46      	ldr	r3, [pc, #280]	; (80182ac <_free_r+0x170>)
 8018194:	4620      	mov	r0, r4
 8018196:	6819      	ldr	r1, [r3, #0]
 8018198:	f7ff ff7c 	bl	8018094 <_malloc_trim_r>
 801819c:	4620      	mov	r0, r4
 801819e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181a2:	f7fb b805 	b.w	80131b0 <__malloc_unlock>
 80181a6:	607e      	str	r6, [r7, #4]
 80181a8:	2a00      	cmp	r2, #0
 80181aa:	d139      	bne.n	8018220 <_free_r+0xe4>
 80181ac:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80181b0:	1a5b      	subs	r3, r3, r1
 80181b2:	4408      	add	r0, r1
 80181b4:	6899      	ldr	r1, [r3, #8]
 80181b6:	f105 0c08 	add.w	ip, r5, #8
 80181ba:	4561      	cmp	r1, ip
 80181bc:	d032      	beq.n	8018224 <_free_r+0xe8>
 80181be:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80181c2:	f8c1 c00c 	str.w	ip, [r1, #12]
 80181c6:	f8cc 1008 	str.w	r1, [ip, #8]
 80181ca:	19b9      	adds	r1, r7, r6
 80181cc:	6849      	ldr	r1, [r1, #4]
 80181ce:	07c9      	lsls	r1, r1, #31
 80181d0:	d40a      	bmi.n	80181e8 <_free_r+0xac>
 80181d2:	4430      	add	r0, r6
 80181d4:	68b9      	ldr	r1, [r7, #8]
 80181d6:	bb3a      	cbnz	r2, 8018228 <_free_r+0xec>
 80181d8:	4e35      	ldr	r6, [pc, #212]	; (80182b0 <_free_r+0x174>)
 80181da:	42b1      	cmp	r1, r6
 80181dc:	d124      	bne.n	8018228 <_free_r+0xec>
 80181de:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80181e2:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80181e6:	2201      	movs	r2, #1
 80181e8:	f040 0101 	orr.w	r1, r0, #1
 80181ec:	6059      	str	r1, [r3, #4]
 80181ee:	5018      	str	r0, [r3, r0]
 80181f0:	2a00      	cmp	r2, #0
 80181f2:	d1d3      	bne.n	801819c <_free_r+0x60>
 80181f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80181f8:	d21a      	bcs.n	8018230 <_free_r+0xf4>
 80181fa:	08c0      	lsrs	r0, r0, #3
 80181fc:	1081      	asrs	r1, r0, #2
 80181fe:	2201      	movs	r2, #1
 8018200:	408a      	lsls	r2, r1
 8018202:	6869      	ldr	r1, [r5, #4]
 8018204:	3001      	adds	r0, #1
 8018206:	430a      	orrs	r2, r1
 8018208:	606a      	str	r2, [r5, #4]
 801820a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801820e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8018212:	3a08      	subs	r2, #8
 8018214:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8018218:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801821c:	60cb      	str	r3, [r1, #12]
 801821e:	e7bd      	b.n	801819c <_free_r+0x60>
 8018220:	2200      	movs	r2, #0
 8018222:	e7d2      	b.n	80181ca <_free_r+0x8e>
 8018224:	2201      	movs	r2, #1
 8018226:	e7d0      	b.n	80181ca <_free_r+0x8e>
 8018228:	68fe      	ldr	r6, [r7, #12]
 801822a:	60ce      	str	r6, [r1, #12]
 801822c:	60b1      	str	r1, [r6, #8]
 801822e:	e7db      	b.n	80181e8 <_free_r+0xac>
 8018230:	0a42      	lsrs	r2, r0, #9
 8018232:	2a04      	cmp	r2, #4
 8018234:	d813      	bhi.n	801825e <_free_r+0x122>
 8018236:	0982      	lsrs	r2, r0, #6
 8018238:	3238      	adds	r2, #56	; 0x38
 801823a:	1c51      	adds	r1, r2, #1
 801823c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8018240:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8018244:	428e      	cmp	r6, r1
 8018246:	d124      	bne.n	8018292 <_free_r+0x156>
 8018248:	2001      	movs	r0, #1
 801824a:	1092      	asrs	r2, r2, #2
 801824c:	fa00 f202 	lsl.w	r2, r0, r2
 8018250:	6868      	ldr	r0, [r5, #4]
 8018252:	4302      	orrs	r2, r0
 8018254:	606a      	str	r2, [r5, #4]
 8018256:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801825a:	60b3      	str	r3, [r6, #8]
 801825c:	e7de      	b.n	801821c <_free_r+0xe0>
 801825e:	2a14      	cmp	r2, #20
 8018260:	d801      	bhi.n	8018266 <_free_r+0x12a>
 8018262:	325b      	adds	r2, #91	; 0x5b
 8018264:	e7e9      	b.n	801823a <_free_r+0xfe>
 8018266:	2a54      	cmp	r2, #84	; 0x54
 8018268:	d802      	bhi.n	8018270 <_free_r+0x134>
 801826a:	0b02      	lsrs	r2, r0, #12
 801826c:	326e      	adds	r2, #110	; 0x6e
 801826e:	e7e4      	b.n	801823a <_free_r+0xfe>
 8018270:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8018274:	d802      	bhi.n	801827c <_free_r+0x140>
 8018276:	0bc2      	lsrs	r2, r0, #15
 8018278:	3277      	adds	r2, #119	; 0x77
 801827a:	e7de      	b.n	801823a <_free_r+0xfe>
 801827c:	f240 5154 	movw	r1, #1364	; 0x554
 8018280:	428a      	cmp	r2, r1
 8018282:	bf9a      	itte	ls
 8018284:	0c82      	lsrls	r2, r0, #18
 8018286:	327c      	addls	r2, #124	; 0x7c
 8018288:	227e      	movhi	r2, #126	; 0x7e
 801828a:	e7d6      	b.n	801823a <_free_r+0xfe>
 801828c:	6889      	ldr	r1, [r1, #8]
 801828e:	428e      	cmp	r6, r1
 8018290:	d004      	beq.n	801829c <_free_r+0x160>
 8018292:	684a      	ldr	r2, [r1, #4]
 8018294:	f022 0203 	bic.w	r2, r2, #3
 8018298:	4282      	cmp	r2, r0
 801829a:	d8f7      	bhi.n	801828c <_free_r+0x150>
 801829c:	68ce      	ldr	r6, [r1, #12]
 801829e:	e7da      	b.n	8018256 <_free_r+0x11a>
 80182a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182a4:	20000830 	.word	0x20000830
 80182a8:	20000c3c 	.word	0x20000c3c
 80182ac:	200010e4 	.word	0x200010e4
 80182b0:	20000838 	.word	0x20000838

080182b4 <_fwalk_reent>:
 80182b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182b8:	4680      	mov	r8, r0
 80182ba:	4689      	mov	r9, r1
 80182bc:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 80182c0:	2600      	movs	r6, #0
 80182c2:	b914      	cbnz	r4, 80182ca <_fwalk_reent+0x16>
 80182c4:	4630      	mov	r0, r6
 80182c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80182ce:	3f01      	subs	r7, #1
 80182d0:	d501      	bpl.n	80182d6 <_fwalk_reent+0x22>
 80182d2:	6824      	ldr	r4, [r4, #0]
 80182d4:	e7f5      	b.n	80182c2 <_fwalk_reent+0xe>
 80182d6:	89ab      	ldrh	r3, [r5, #12]
 80182d8:	2b01      	cmp	r3, #1
 80182da:	d907      	bls.n	80182ec <_fwalk_reent+0x38>
 80182dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80182e0:	3301      	adds	r3, #1
 80182e2:	d003      	beq.n	80182ec <_fwalk_reent+0x38>
 80182e4:	4629      	mov	r1, r5
 80182e6:	4640      	mov	r0, r8
 80182e8:	47c8      	blx	r9
 80182ea:	4306      	orrs	r6, r0
 80182ec:	3568      	adds	r5, #104	; 0x68
 80182ee:	e7ee      	b.n	80182ce <_fwalk_reent+0x1a>

080182f0 <rshift>:
 80182f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182f2:	6906      	ldr	r6, [r0, #16]
 80182f4:	114b      	asrs	r3, r1, #5
 80182f6:	429e      	cmp	r6, r3
 80182f8:	f100 0414 	add.w	r4, r0, #20
 80182fc:	dd30      	ble.n	8018360 <rshift+0x70>
 80182fe:	f011 011f 	ands.w	r1, r1, #31
 8018302:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018306:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801830a:	d108      	bne.n	801831e <rshift+0x2e>
 801830c:	4621      	mov	r1, r4
 801830e:	42b2      	cmp	r2, r6
 8018310:	460b      	mov	r3, r1
 8018312:	d211      	bcs.n	8018338 <rshift+0x48>
 8018314:	f852 3b04 	ldr.w	r3, [r2], #4
 8018318:	f841 3b04 	str.w	r3, [r1], #4
 801831c:	e7f7      	b.n	801830e <rshift+0x1e>
 801831e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018322:	f1c1 0c20 	rsb	ip, r1, #32
 8018326:	40cd      	lsrs	r5, r1
 8018328:	3204      	adds	r2, #4
 801832a:	4623      	mov	r3, r4
 801832c:	42b2      	cmp	r2, r6
 801832e:	4617      	mov	r7, r2
 8018330:	d30c      	bcc.n	801834c <rshift+0x5c>
 8018332:	601d      	str	r5, [r3, #0]
 8018334:	b105      	cbz	r5, 8018338 <rshift+0x48>
 8018336:	3304      	adds	r3, #4
 8018338:	1b1a      	subs	r2, r3, r4
 801833a:	42a3      	cmp	r3, r4
 801833c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018340:	bf08      	it	eq
 8018342:	2300      	moveq	r3, #0
 8018344:	6102      	str	r2, [r0, #16]
 8018346:	bf08      	it	eq
 8018348:	6143      	streq	r3, [r0, #20]
 801834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801834c:	683f      	ldr	r7, [r7, #0]
 801834e:	fa07 f70c 	lsl.w	r7, r7, ip
 8018352:	433d      	orrs	r5, r7
 8018354:	f843 5b04 	str.w	r5, [r3], #4
 8018358:	f852 5b04 	ldr.w	r5, [r2], #4
 801835c:	40cd      	lsrs	r5, r1
 801835e:	e7e5      	b.n	801832c <rshift+0x3c>
 8018360:	4623      	mov	r3, r4
 8018362:	e7e9      	b.n	8018338 <rshift+0x48>

08018364 <__hexdig_fun>:
 8018364:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018368:	2b09      	cmp	r3, #9
 801836a:	d802      	bhi.n	8018372 <__hexdig_fun+0xe>
 801836c:	3820      	subs	r0, #32
 801836e:	b2c0      	uxtb	r0, r0
 8018370:	4770      	bx	lr
 8018372:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018376:	2b05      	cmp	r3, #5
 8018378:	d801      	bhi.n	801837e <__hexdig_fun+0x1a>
 801837a:	3847      	subs	r0, #71	; 0x47
 801837c:	e7f7      	b.n	801836e <__hexdig_fun+0xa>
 801837e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018382:	2b05      	cmp	r3, #5
 8018384:	d801      	bhi.n	801838a <__hexdig_fun+0x26>
 8018386:	3827      	subs	r0, #39	; 0x27
 8018388:	e7f1      	b.n	801836e <__hexdig_fun+0xa>
 801838a:	2000      	movs	r0, #0
 801838c:	4770      	bx	lr

0801838e <__gethex>:
 801838e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018392:	b08b      	sub	sp, #44	; 0x2c
 8018394:	468a      	mov	sl, r1
 8018396:	9002      	str	r0, [sp, #8]
 8018398:	9816      	ldr	r0, [sp, #88]	; 0x58
 801839a:	9306      	str	r3, [sp, #24]
 801839c:	4690      	mov	r8, r2
 801839e:	f000 faee 	bl	801897e <__localeconv_l>
 80183a2:	6803      	ldr	r3, [r0, #0]
 80183a4:	9303      	str	r3, [sp, #12]
 80183a6:	4618      	mov	r0, r3
 80183a8:	f7ee fce4 	bl	8006d74 <strlen>
 80183ac:	9b03      	ldr	r3, [sp, #12]
 80183ae:	9001      	str	r0, [sp, #4]
 80183b0:	4403      	add	r3, r0
 80183b2:	f04f 0b00 	mov.w	fp, #0
 80183b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80183ba:	9307      	str	r3, [sp, #28]
 80183bc:	f8da 3000 	ldr.w	r3, [sl]
 80183c0:	3302      	adds	r3, #2
 80183c2:	461f      	mov	r7, r3
 80183c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80183c8:	2830      	cmp	r0, #48	; 0x30
 80183ca:	d06c      	beq.n	80184a6 <__gethex+0x118>
 80183cc:	f7ff ffca 	bl	8018364 <__hexdig_fun>
 80183d0:	4604      	mov	r4, r0
 80183d2:	2800      	cmp	r0, #0
 80183d4:	d16a      	bne.n	80184ac <__gethex+0x11e>
 80183d6:	9a01      	ldr	r2, [sp, #4]
 80183d8:	9903      	ldr	r1, [sp, #12]
 80183da:	4638      	mov	r0, r7
 80183dc:	f7fb f9f5 	bl	80137ca <strncmp>
 80183e0:	2800      	cmp	r0, #0
 80183e2:	d166      	bne.n	80184b2 <__gethex+0x124>
 80183e4:	9b01      	ldr	r3, [sp, #4]
 80183e6:	5cf8      	ldrb	r0, [r7, r3]
 80183e8:	18fe      	adds	r6, r7, r3
 80183ea:	f7ff ffbb 	bl	8018364 <__hexdig_fun>
 80183ee:	2800      	cmp	r0, #0
 80183f0:	d062      	beq.n	80184b8 <__gethex+0x12a>
 80183f2:	4633      	mov	r3, r6
 80183f4:	7818      	ldrb	r0, [r3, #0]
 80183f6:	2830      	cmp	r0, #48	; 0x30
 80183f8:	461f      	mov	r7, r3
 80183fa:	f103 0301 	add.w	r3, r3, #1
 80183fe:	d0f9      	beq.n	80183f4 <__gethex+0x66>
 8018400:	f7ff ffb0 	bl	8018364 <__hexdig_fun>
 8018404:	fab0 f580 	clz	r5, r0
 8018408:	096d      	lsrs	r5, r5, #5
 801840a:	4634      	mov	r4, r6
 801840c:	f04f 0b01 	mov.w	fp, #1
 8018410:	463a      	mov	r2, r7
 8018412:	4616      	mov	r6, r2
 8018414:	3201      	adds	r2, #1
 8018416:	7830      	ldrb	r0, [r6, #0]
 8018418:	f7ff ffa4 	bl	8018364 <__hexdig_fun>
 801841c:	2800      	cmp	r0, #0
 801841e:	d1f8      	bne.n	8018412 <__gethex+0x84>
 8018420:	9a01      	ldr	r2, [sp, #4]
 8018422:	9903      	ldr	r1, [sp, #12]
 8018424:	4630      	mov	r0, r6
 8018426:	f7fb f9d0 	bl	80137ca <strncmp>
 801842a:	b950      	cbnz	r0, 8018442 <__gethex+0xb4>
 801842c:	b954      	cbnz	r4, 8018444 <__gethex+0xb6>
 801842e:	9b01      	ldr	r3, [sp, #4]
 8018430:	18f4      	adds	r4, r6, r3
 8018432:	4622      	mov	r2, r4
 8018434:	4616      	mov	r6, r2
 8018436:	3201      	adds	r2, #1
 8018438:	7830      	ldrb	r0, [r6, #0]
 801843a:	f7ff ff93 	bl	8018364 <__hexdig_fun>
 801843e:	2800      	cmp	r0, #0
 8018440:	d1f8      	bne.n	8018434 <__gethex+0xa6>
 8018442:	b10c      	cbz	r4, 8018448 <__gethex+0xba>
 8018444:	1ba4      	subs	r4, r4, r6
 8018446:	00a4      	lsls	r4, r4, #2
 8018448:	7833      	ldrb	r3, [r6, #0]
 801844a:	2b50      	cmp	r3, #80	; 0x50
 801844c:	d001      	beq.n	8018452 <__gethex+0xc4>
 801844e:	2b70      	cmp	r3, #112	; 0x70
 8018450:	d140      	bne.n	80184d4 <__gethex+0x146>
 8018452:	7873      	ldrb	r3, [r6, #1]
 8018454:	2b2b      	cmp	r3, #43	; 0x2b
 8018456:	d031      	beq.n	80184bc <__gethex+0x12e>
 8018458:	2b2d      	cmp	r3, #45	; 0x2d
 801845a:	d033      	beq.n	80184c4 <__gethex+0x136>
 801845c:	1c71      	adds	r1, r6, #1
 801845e:	f04f 0900 	mov.w	r9, #0
 8018462:	7808      	ldrb	r0, [r1, #0]
 8018464:	f7ff ff7e 	bl	8018364 <__hexdig_fun>
 8018468:	1e43      	subs	r3, r0, #1
 801846a:	b2db      	uxtb	r3, r3
 801846c:	2b18      	cmp	r3, #24
 801846e:	d831      	bhi.n	80184d4 <__gethex+0x146>
 8018470:	f1a0 0210 	sub.w	r2, r0, #16
 8018474:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018478:	f7ff ff74 	bl	8018364 <__hexdig_fun>
 801847c:	1e43      	subs	r3, r0, #1
 801847e:	b2db      	uxtb	r3, r3
 8018480:	2b18      	cmp	r3, #24
 8018482:	d922      	bls.n	80184ca <__gethex+0x13c>
 8018484:	f1b9 0f00 	cmp.w	r9, #0
 8018488:	d000      	beq.n	801848c <__gethex+0xfe>
 801848a:	4252      	negs	r2, r2
 801848c:	4414      	add	r4, r2
 801848e:	f8ca 1000 	str.w	r1, [sl]
 8018492:	b30d      	cbz	r5, 80184d8 <__gethex+0x14a>
 8018494:	f1bb 0f00 	cmp.w	fp, #0
 8018498:	bf0c      	ite	eq
 801849a:	2706      	moveq	r7, #6
 801849c:	2700      	movne	r7, #0
 801849e:	4638      	mov	r0, r7
 80184a0:	b00b      	add	sp, #44	; 0x2c
 80184a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184a6:	f10b 0b01 	add.w	fp, fp, #1
 80184aa:	e78a      	b.n	80183c2 <__gethex+0x34>
 80184ac:	2500      	movs	r5, #0
 80184ae:	462c      	mov	r4, r5
 80184b0:	e7ae      	b.n	8018410 <__gethex+0x82>
 80184b2:	463e      	mov	r6, r7
 80184b4:	2501      	movs	r5, #1
 80184b6:	e7c7      	b.n	8018448 <__gethex+0xba>
 80184b8:	4604      	mov	r4, r0
 80184ba:	e7fb      	b.n	80184b4 <__gethex+0x126>
 80184bc:	f04f 0900 	mov.w	r9, #0
 80184c0:	1cb1      	adds	r1, r6, #2
 80184c2:	e7ce      	b.n	8018462 <__gethex+0xd4>
 80184c4:	f04f 0901 	mov.w	r9, #1
 80184c8:	e7fa      	b.n	80184c0 <__gethex+0x132>
 80184ca:	230a      	movs	r3, #10
 80184cc:	fb03 0202 	mla	r2, r3, r2, r0
 80184d0:	3a10      	subs	r2, #16
 80184d2:	e7cf      	b.n	8018474 <__gethex+0xe6>
 80184d4:	4631      	mov	r1, r6
 80184d6:	e7da      	b.n	801848e <__gethex+0x100>
 80184d8:	1bf3      	subs	r3, r6, r7
 80184da:	3b01      	subs	r3, #1
 80184dc:	4629      	mov	r1, r5
 80184de:	2b07      	cmp	r3, #7
 80184e0:	dc49      	bgt.n	8018576 <__gethex+0x1e8>
 80184e2:	9802      	ldr	r0, [sp, #8]
 80184e4:	f000 fa80 	bl	80189e8 <_Balloc>
 80184e8:	9b01      	ldr	r3, [sp, #4]
 80184ea:	f100 0914 	add.w	r9, r0, #20
 80184ee:	f04f 0b00 	mov.w	fp, #0
 80184f2:	f1c3 0301 	rsb	r3, r3, #1
 80184f6:	4605      	mov	r5, r0
 80184f8:	f8cd 9010 	str.w	r9, [sp, #16]
 80184fc:	46da      	mov	sl, fp
 80184fe:	9308      	str	r3, [sp, #32]
 8018500:	42b7      	cmp	r7, r6
 8018502:	d33b      	bcc.n	801857c <__gethex+0x1ee>
 8018504:	9804      	ldr	r0, [sp, #16]
 8018506:	f840 ab04 	str.w	sl, [r0], #4
 801850a:	eba0 0009 	sub.w	r0, r0, r9
 801850e:	1080      	asrs	r0, r0, #2
 8018510:	6128      	str	r0, [r5, #16]
 8018512:	0147      	lsls	r7, r0, #5
 8018514:	4650      	mov	r0, sl
 8018516:	f000 fb0e 	bl	8018b36 <__hi0bits>
 801851a:	f8d8 6000 	ldr.w	r6, [r8]
 801851e:	1a3f      	subs	r7, r7, r0
 8018520:	42b7      	cmp	r7, r6
 8018522:	dd64      	ble.n	80185ee <__gethex+0x260>
 8018524:	1bbf      	subs	r7, r7, r6
 8018526:	4639      	mov	r1, r7
 8018528:	4628      	mov	r0, r5
 801852a:	f000 fe0f 	bl	801914c <__any_on>
 801852e:	4682      	mov	sl, r0
 8018530:	b178      	cbz	r0, 8018552 <__gethex+0x1c4>
 8018532:	1e7b      	subs	r3, r7, #1
 8018534:	1159      	asrs	r1, r3, #5
 8018536:	f003 021f 	and.w	r2, r3, #31
 801853a:	f04f 0a01 	mov.w	sl, #1
 801853e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018542:	fa0a f202 	lsl.w	r2, sl, r2
 8018546:	420a      	tst	r2, r1
 8018548:	d003      	beq.n	8018552 <__gethex+0x1c4>
 801854a:	4553      	cmp	r3, sl
 801854c:	dc46      	bgt.n	80185dc <__gethex+0x24e>
 801854e:	f04f 0a02 	mov.w	sl, #2
 8018552:	4639      	mov	r1, r7
 8018554:	4628      	mov	r0, r5
 8018556:	f7ff fecb 	bl	80182f0 <rshift>
 801855a:	443c      	add	r4, r7
 801855c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018560:	42a3      	cmp	r3, r4
 8018562:	da52      	bge.n	801860a <__gethex+0x27c>
 8018564:	4629      	mov	r1, r5
 8018566:	9802      	ldr	r0, [sp, #8]
 8018568:	f000 fa63 	bl	8018a32 <_Bfree>
 801856c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801856e:	2300      	movs	r3, #0
 8018570:	6013      	str	r3, [r2, #0]
 8018572:	27a3      	movs	r7, #163	; 0xa3
 8018574:	e793      	b.n	801849e <__gethex+0x110>
 8018576:	3101      	adds	r1, #1
 8018578:	105b      	asrs	r3, r3, #1
 801857a:	e7b0      	b.n	80184de <__gethex+0x150>
 801857c:	1e73      	subs	r3, r6, #1
 801857e:	9305      	str	r3, [sp, #20]
 8018580:	9a07      	ldr	r2, [sp, #28]
 8018582:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018586:	4293      	cmp	r3, r2
 8018588:	d018      	beq.n	80185bc <__gethex+0x22e>
 801858a:	f1bb 0f20 	cmp.w	fp, #32
 801858e:	d107      	bne.n	80185a0 <__gethex+0x212>
 8018590:	9b04      	ldr	r3, [sp, #16]
 8018592:	f8c3 a000 	str.w	sl, [r3]
 8018596:	3304      	adds	r3, #4
 8018598:	f04f 0a00 	mov.w	sl, #0
 801859c:	9304      	str	r3, [sp, #16]
 801859e:	46d3      	mov	fp, sl
 80185a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80185a4:	f7ff fede 	bl	8018364 <__hexdig_fun>
 80185a8:	f000 000f 	and.w	r0, r0, #15
 80185ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80185b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80185b4:	f10b 0b04 	add.w	fp, fp, #4
 80185b8:	9b05      	ldr	r3, [sp, #20]
 80185ba:	e00d      	b.n	80185d8 <__gethex+0x24a>
 80185bc:	9b05      	ldr	r3, [sp, #20]
 80185be:	9a08      	ldr	r2, [sp, #32]
 80185c0:	4413      	add	r3, r2
 80185c2:	42bb      	cmp	r3, r7
 80185c4:	d3e1      	bcc.n	801858a <__gethex+0x1fc>
 80185c6:	4618      	mov	r0, r3
 80185c8:	9a01      	ldr	r2, [sp, #4]
 80185ca:	9903      	ldr	r1, [sp, #12]
 80185cc:	9309      	str	r3, [sp, #36]	; 0x24
 80185ce:	f7fb f8fc 	bl	80137ca <strncmp>
 80185d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185d4:	2800      	cmp	r0, #0
 80185d6:	d1d8      	bne.n	801858a <__gethex+0x1fc>
 80185d8:	461e      	mov	r6, r3
 80185da:	e791      	b.n	8018500 <__gethex+0x172>
 80185dc:	1eb9      	subs	r1, r7, #2
 80185de:	4628      	mov	r0, r5
 80185e0:	f000 fdb4 	bl	801914c <__any_on>
 80185e4:	2800      	cmp	r0, #0
 80185e6:	d0b2      	beq.n	801854e <__gethex+0x1c0>
 80185e8:	f04f 0a03 	mov.w	sl, #3
 80185ec:	e7b1      	b.n	8018552 <__gethex+0x1c4>
 80185ee:	da09      	bge.n	8018604 <__gethex+0x276>
 80185f0:	1bf7      	subs	r7, r6, r7
 80185f2:	4629      	mov	r1, r5
 80185f4:	463a      	mov	r2, r7
 80185f6:	9802      	ldr	r0, [sp, #8]
 80185f8:	f000 fbca 	bl	8018d90 <__lshift>
 80185fc:	1be4      	subs	r4, r4, r7
 80185fe:	4605      	mov	r5, r0
 8018600:	f100 0914 	add.w	r9, r0, #20
 8018604:	f04f 0a00 	mov.w	sl, #0
 8018608:	e7a8      	b.n	801855c <__gethex+0x1ce>
 801860a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801860e:	42a0      	cmp	r0, r4
 8018610:	dd6a      	ble.n	80186e8 <__gethex+0x35a>
 8018612:	1b04      	subs	r4, r0, r4
 8018614:	42a6      	cmp	r6, r4
 8018616:	dc2e      	bgt.n	8018676 <__gethex+0x2e8>
 8018618:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801861c:	2b02      	cmp	r3, #2
 801861e:	d022      	beq.n	8018666 <__gethex+0x2d8>
 8018620:	2b03      	cmp	r3, #3
 8018622:	d024      	beq.n	801866e <__gethex+0x2e0>
 8018624:	2b01      	cmp	r3, #1
 8018626:	d115      	bne.n	8018654 <__gethex+0x2c6>
 8018628:	42a6      	cmp	r6, r4
 801862a:	d113      	bne.n	8018654 <__gethex+0x2c6>
 801862c:	2e01      	cmp	r6, #1
 801862e:	dc0b      	bgt.n	8018648 <__gethex+0x2ba>
 8018630:	9a06      	ldr	r2, [sp, #24]
 8018632:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018636:	6013      	str	r3, [r2, #0]
 8018638:	2301      	movs	r3, #1
 801863a:	612b      	str	r3, [r5, #16]
 801863c:	f8c9 3000 	str.w	r3, [r9]
 8018640:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018642:	2762      	movs	r7, #98	; 0x62
 8018644:	601d      	str	r5, [r3, #0]
 8018646:	e72a      	b.n	801849e <__gethex+0x110>
 8018648:	1e71      	subs	r1, r6, #1
 801864a:	4628      	mov	r0, r5
 801864c:	f000 fd7e 	bl	801914c <__any_on>
 8018650:	2800      	cmp	r0, #0
 8018652:	d1ed      	bne.n	8018630 <__gethex+0x2a2>
 8018654:	4629      	mov	r1, r5
 8018656:	9802      	ldr	r0, [sp, #8]
 8018658:	f000 f9eb 	bl	8018a32 <_Bfree>
 801865c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801865e:	2300      	movs	r3, #0
 8018660:	6013      	str	r3, [r2, #0]
 8018662:	2750      	movs	r7, #80	; 0x50
 8018664:	e71b      	b.n	801849e <__gethex+0x110>
 8018666:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018668:	2b00      	cmp	r3, #0
 801866a:	d0e1      	beq.n	8018630 <__gethex+0x2a2>
 801866c:	e7f2      	b.n	8018654 <__gethex+0x2c6>
 801866e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018670:	2b00      	cmp	r3, #0
 8018672:	d1dd      	bne.n	8018630 <__gethex+0x2a2>
 8018674:	e7ee      	b.n	8018654 <__gethex+0x2c6>
 8018676:	1e67      	subs	r7, r4, #1
 8018678:	f1ba 0f00 	cmp.w	sl, #0
 801867c:	d131      	bne.n	80186e2 <__gethex+0x354>
 801867e:	b127      	cbz	r7, 801868a <__gethex+0x2fc>
 8018680:	4639      	mov	r1, r7
 8018682:	4628      	mov	r0, r5
 8018684:	f000 fd62 	bl	801914c <__any_on>
 8018688:	4682      	mov	sl, r0
 801868a:	117a      	asrs	r2, r7, #5
 801868c:	2301      	movs	r3, #1
 801868e:	f007 071f 	and.w	r7, r7, #31
 8018692:	fa03 f707 	lsl.w	r7, r3, r7
 8018696:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801869a:	4621      	mov	r1, r4
 801869c:	421f      	tst	r7, r3
 801869e:	4628      	mov	r0, r5
 80186a0:	bf18      	it	ne
 80186a2:	f04a 0a02 	orrne.w	sl, sl, #2
 80186a6:	1b36      	subs	r6, r6, r4
 80186a8:	f7ff fe22 	bl	80182f0 <rshift>
 80186ac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80186b0:	2702      	movs	r7, #2
 80186b2:	f1ba 0f00 	cmp.w	sl, #0
 80186b6:	d048      	beq.n	801874a <__gethex+0x3bc>
 80186b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80186bc:	2b02      	cmp	r3, #2
 80186be:	d015      	beq.n	80186ec <__gethex+0x35e>
 80186c0:	2b03      	cmp	r3, #3
 80186c2:	d017      	beq.n	80186f4 <__gethex+0x366>
 80186c4:	2b01      	cmp	r3, #1
 80186c6:	d109      	bne.n	80186dc <__gethex+0x34e>
 80186c8:	f01a 0f02 	tst.w	sl, #2
 80186cc:	d006      	beq.n	80186dc <__gethex+0x34e>
 80186ce:	f8d9 3000 	ldr.w	r3, [r9]
 80186d2:	ea4a 0a03 	orr.w	sl, sl, r3
 80186d6:	f01a 0f01 	tst.w	sl, #1
 80186da:	d10e      	bne.n	80186fa <__gethex+0x36c>
 80186dc:	f047 0710 	orr.w	r7, r7, #16
 80186e0:	e033      	b.n	801874a <__gethex+0x3bc>
 80186e2:	f04f 0a01 	mov.w	sl, #1
 80186e6:	e7d0      	b.n	801868a <__gethex+0x2fc>
 80186e8:	2701      	movs	r7, #1
 80186ea:	e7e2      	b.n	80186b2 <__gethex+0x324>
 80186ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80186ee:	f1c3 0301 	rsb	r3, r3, #1
 80186f2:	9315      	str	r3, [sp, #84]	; 0x54
 80186f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d0f0      	beq.n	80186dc <__gethex+0x34e>
 80186fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80186fe:	f105 0314 	add.w	r3, r5, #20
 8018702:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018706:	eb03 010a 	add.w	r1, r3, sl
 801870a:	f04f 0c00 	mov.w	ip, #0
 801870e:	4618      	mov	r0, r3
 8018710:	f853 2b04 	ldr.w	r2, [r3], #4
 8018714:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018718:	d01c      	beq.n	8018754 <__gethex+0x3c6>
 801871a:	3201      	adds	r2, #1
 801871c:	6002      	str	r2, [r0, #0]
 801871e:	2f02      	cmp	r7, #2
 8018720:	f105 0314 	add.w	r3, r5, #20
 8018724:	d138      	bne.n	8018798 <__gethex+0x40a>
 8018726:	f8d8 2000 	ldr.w	r2, [r8]
 801872a:	3a01      	subs	r2, #1
 801872c:	42b2      	cmp	r2, r6
 801872e:	d10a      	bne.n	8018746 <__gethex+0x3b8>
 8018730:	1171      	asrs	r1, r6, #5
 8018732:	2201      	movs	r2, #1
 8018734:	f006 061f 	and.w	r6, r6, #31
 8018738:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801873c:	fa02 f606 	lsl.w	r6, r2, r6
 8018740:	421e      	tst	r6, r3
 8018742:	bf18      	it	ne
 8018744:	4617      	movne	r7, r2
 8018746:	f047 0720 	orr.w	r7, r7, #32
 801874a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801874c:	601d      	str	r5, [r3, #0]
 801874e:	9b06      	ldr	r3, [sp, #24]
 8018750:	601c      	str	r4, [r3, #0]
 8018752:	e6a4      	b.n	801849e <__gethex+0x110>
 8018754:	4299      	cmp	r1, r3
 8018756:	f843 cc04 	str.w	ip, [r3, #-4]
 801875a:	d8d8      	bhi.n	801870e <__gethex+0x380>
 801875c:	68ab      	ldr	r3, [r5, #8]
 801875e:	4599      	cmp	r9, r3
 8018760:	db12      	blt.n	8018788 <__gethex+0x3fa>
 8018762:	6869      	ldr	r1, [r5, #4]
 8018764:	9802      	ldr	r0, [sp, #8]
 8018766:	3101      	adds	r1, #1
 8018768:	f000 f93e 	bl	80189e8 <_Balloc>
 801876c:	692a      	ldr	r2, [r5, #16]
 801876e:	3202      	adds	r2, #2
 8018770:	f105 010c 	add.w	r1, r5, #12
 8018774:	4683      	mov	fp, r0
 8018776:	0092      	lsls	r2, r2, #2
 8018778:	300c      	adds	r0, #12
 801877a:	f7fa fce6 	bl	801314a <memcpy>
 801877e:	4629      	mov	r1, r5
 8018780:	9802      	ldr	r0, [sp, #8]
 8018782:	f000 f956 	bl	8018a32 <_Bfree>
 8018786:	465d      	mov	r5, fp
 8018788:	692b      	ldr	r3, [r5, #16]
 801878a:	1c5a      	adds	r2, r3, #1
 801878c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018790:	612a      	str	r2, [r5, #16]
 8018792:	2201      	movs	r2, #1
 8018794:	615a      	str	r2, [r3, #20]
 8018796:	e7c2      	b.n	801871e <__gethex+0x390>
 8018798:	692a      	ldr	r2, [r5, #16]
 801879a:	454a      	cmp	r2, r9
 801879c:	dd0b      	ble.n	80187b6 <__gethex+0x428>
 801879e:	2101      	movs	r1, #1
 80187a0:	4628      	mov	r0, r5
 80187a2:	f7ff fda5 	bl	80182f0 <rshift>
 80187a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80187aa:	3401      	adds	r4, #1
 80187ac:	42a3      	cmp	r3, r4
 80187ae:	f6ff aed9 	blt.w	8018564 <__gethex+0x1d6>
 80187b2:	2701      	movs	r7, #1
 80187b4:	e7c7      	b.n	8018746 <__gethex+0x3b8>
 80187b6:	f016 061f 	ands.w	r6, r6, #31
 80187ba:	d0fa      	beq.n	80187b2 <__gethex+0x424>
 80187bc:	449a      	add	sl, r3
 80187be:	f1c6 0620 	rsb	r6, r6, #32
 80187c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80187c6:	f000 f9b6 	bl	8018b36 <__hi0bits>
 80187ca:	42b0      	cmp	r0, r6
 80187cc:	dbe7      	blt.n	801879e <__gethex+0x410>
 80187ce:	e7f0      	b.n	80187b2 <__gethex+0x424>

080187d0 <L_shift>:
 80187d0:	f1c2 0208 	rsb	r2, r2, #8
 80187d4:	0092      	lsls	r2, r2, #2
 80187d6:	b570      	push	{r4, r5, r6, lr}
 80187d8:	f1c2 0620 	rsb	r6, r2, #32
 80187dc:	6843      	ldr	r3, [r0, #4]
 80187de:	6804      	ldr	r4, [r0, #0]
 80187e0:	fa03 f506 	lsl.w	r5, r3, r6
 80187e4:	432c      	orrs	r4, r5
 80187e6:	40d3      	lsrs	r3, r2
 80187e8:	6004      	str	r4, [r0, #0]
 80187ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80187ee:	4288      	cmp	r0, r1
 80187f0:	d3f4      	bcc.n	80187dc <L_shift+0xc>
 80187f2:	bd70      	pop	{r4, r5, r6, pc}

080187f4 <__match>:
 80187f4:	b530      	push	{r4, r5, lr}
 80187f6:	6803      	ldr	r3, [r0, #0]
 80187f8:	3301      	adds	r3, #1
 80187fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80187fe:	b914      	cbnz	r4, 8018806 <__match+0x12>
 8018800:	6003      	str	r3, [r0, #0]
 8018802:	2001      	movs	r0, #1
 8018804:	bd30      	pop	{r4, r5, pc}
 8018806:	f813 2b01 	ldrb.w	r2, [r3], #1
 801880a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801880e:	2d19      	cmp	r5, #25
 8018810:	bf98      	it	ls
 8018812:	3220      	addls	r2, #32
 8018814:	42a2      	cmp	r2, r4
 8018816:	d0f0      	beq.n	80187fa <__match+0x6>
 8018818:	2000      	movs	r0, #0
 801881a:	e7f3      	b.n	8018804 <__match+0x10>

0801881c <__hexnan>:
 801881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018820:	680b      	ldr	r3, [r1, #0]
 8018822:	6801      	ldr	r1, [r0, #0]
 8018824:	115f      	asrs	r7, r3, #5
 8018826:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801882a:	f013 031f 	ands.w	r3, r3, #31
 801882e:	b087      	sub	sp, #28
 8018830:	bf18      	it	ne
 8018832:	3704      	addne	r7, #4
 8018834:	2500      	movs	r5, #0
 8018836:	1f3e      	subs	r6, r7, #4
 8018838:	4682      	mov	sl, r0
 801883a:	4690      	mov	r8, r2
 801883c:	9301      	str	r3, [sp, #4]
 801883e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018842:	46b1      	mov	r9, r6
 8018844:	4634      	mov	r4, r6
 8018846:	9502      	str	r5, [sp, #8]
 8018848:	46ab      	mov	fp, r5
 801884a:	784a      	ldrb	r2, [r1, #1]
 801884c:	1c4b      	adds	r3, r1, #1
 801884e:	9303      	str	r3, [sp, #12]
 8018850:	b342      	cbz	r2, 80188a4 <__hexnan+0x88>
 8018852:	4610      	mov	r0, r2
 8018854:	9105      	str	r1, [sp, #20]
 8018856:	9204      	str	r2, [sp, #16]
 8018858:	f7ff fd84 	bl	8018364 <__hexdig_fun>
 801885c:	2800      	cmp	r0, #0
 801885e:	d143      	bne.n	80188e8 <__hexnan+0xcc>
 8018860:	9a04      	ldr	r2, [sp, #16]
 8018862:	9905      	ldr	r1, [sp, #20]
 8018864:	2a20      	cmp	r2, #32
 8018866:	d818      	bhi.n	801889a <__hexnan+0x7e>
 8018868:	9b02      	ldr	r3, [sp, #8]
 801886a:	459b      	cmp	fp, r3
 801886c:	dd13      	ble.n	8018896 <__hexnan+0x7a>
 801886e:	454c      	cmp	r4, r9
 8018870:	d206      	bcs.n	8018880 <__hexnan+0x64>
 8018872:	2d07      	cmp	r5, #7
 8018874:	dc04      	bgt.n	8018880 <__hexnan+0x64>
 8018876:	462a      	mov	r2, r5
 8018878:	4649      	mov	r1, r9
 801887a:	4620      	mov	r0, r4
 801887c:	f7ff ffa8 	bl	80187d0 <L_shift>
 8018880:	4544      	cmp	r4, r8
 8018882:	d944      	bls.n	801890e <__hexnan+0xf2>
 8018884:	2300      	movs	r3, #0
 8018886:	f1a4 0904 	sub.w	r9, r4, #4
 801888a:	f844 3c04 	str.w	r3, [r4, #-4]
 801888e:	f8cd b008 	str.w	fp, [sp, #8]
 8018892:	464c      	mov	r4, r9
 8018894:	461d      	mov	r5, r3
 8018896:	9903      	ldr	r1, [sp, #12]
 8018898:	e7d7      	b.n	801884a <__hexnan+0x2e>
 801889a:	2a29      	cmp	r2, #41	; 0x29
 801889c:	d14a      	bne.n	8018934 <__hexnan+0x118>
 801889e:	3102      	adds	r1, #2
 80188a0:	f8ca 1000 	str.w	r1, [sl]
 80188a4:	f1bb 0f00 	cmp.w	fp, #0
 80188a8:	d044      	beq.n	8018934 <__hexnan+0x118>
 80188aa:	454c      	cmp	r4, r9
 80188ac:	d206      	bcs.n	80188bc <__hexnan+0xa0>
 80188ae:	2d07      	cmp	r5, #7
 80188b0:	dc04      	bgt.n	80188bc <__hexnan+0xa0>
 80188b2:	462a      	mov	r2, r5
 80188b4:	4649      	mov	r1, r9
 80188b6:	4620      	mov	r0, r4
 80188b8:	f7ff ff8a 	bl	80187d0 <L_shift>
 80188bc:	4544      	cmp	r4, r8
 80188be:	d928      	bls.n	8018912 <__hexnan+0xf6>
 80188c0:	4643      	mov	r3, r8
 80188c2:	f854 2b04 	ldr.w	r2, [r4], #4
 80188c6:	f843 2b04 	str.w	r2, [r3], #4
 80188ca:	42a6      	cmp	r6, r4
 80188cc:	d2f9      	bcs.n	80188c2 <__hexnan+0xa6>
 80188ce:	2200      	movs	r2, #0
 80188d0:	f843 2b04 	str.w	r2, [r3], #4
 80188d4:	429e      	cmp	r6, r3
 80188d6:	d2fb      	bcs.n	80188d0 <__hexnan+0xb4>
 80188d8:	6833      	ldr	r3, [r6, #0]
 80188da:	b91b      	cbnz	r3, 80188e4 <__hexnan+0xc8>
 80188dc:	4546      	cmp	r6, r8
 80188de:	d127      	bne.n	8018930 <__hexnan+0x114>
 80188e0:	2301      	movs	r3, #1
 80188e2:	6033      	str	r3, [r6, #0]
 80188e4:	2005      	movs	r0, #5
 80188e6:	e026      	b.n	8018936 <__hexnan+0x11a>
 80188e8:	3501      	adds	r5, #1
 80188ea:	2d08      	cmp	r5, #8
 80188ec:	f10b 0b01 	add.w	fp, fp, #1
 80188f0:	dd06      	ble.n	8018900 <__hexnan+0xe4>
 80188f2:	4544      	cmp	r4, r8
 80188f4:	d9cf      	bls.n	8018896 <__hexnan+0x7a>
 80188f6:	2300      	movs	r3, #0
 80188f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80188fc:	2501      	movs	r5, #1
 80188fe:	3c04      	subs	r4, #4
 8018900:	6822      	ldr	r2, [r4, #0]
 8018902:	f000 000f 	and.w	r0, r0, #15
 8018906:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801890a:	6020      	str	r0, [r4, #0]
 801890c:	e7c3      	b.n	8018896 <__hexnan+0x7a>
 801890e:	2508      	movs	r5, #8
 8018910:	e7c1      	b.n	8018896 <__hexnan+0x7a>
 8018912:	9b01      	ldr	r3, [sp, #4]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d0df      	beq.n	80188d8 <__hexnan+0xbc>
 8018918:	f04f 32ff 	mov.w	r2, #4294967295
 801891c:	f1c3 0320 	rsb	r3, r3, #32
 8018920:	fa22 f303 	lsr.w	r3, r2, r3
 8018924:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018928:	401a      	ands	r2, r3
 801892a:	f847 2c04 	str.w	r2, [r7, #-4]
 801892e:	e7d3      	b.n	80188d8 <__hexnan+0xbc>
 8018930:	3e04      	subs	r6, #4
 8018932:	e7d1      	b.n	80188d8 <__hexnan+0xbc>
 8018934:	2004      	movs	r0, #4
 8018936:	b007      	add	sp, #28
 8018938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801893c <_isatty_r>:
 801893c:	b538      	push	{r3, r4, r5, lr}
 801893e:	4c06      	ldr	r4, [pc, #24]	; (8018958 <_isatty_r+0x1c>)
 8018940:	2300      	movs	r3, #0
 8018942:	4605      	mov	r5, r0
 8018944:	4608      	mov	r0, r1
 8018946:	6023      	str	r3, [r4, #0]
 8018948:	f7f5 fea7 	bl	800e69a <_isatty>
 801894c:	1c43      	adds	r3, r0, #1
 801894e:	d102      	bne.n	8018956 <_isatty_r+0x1a>
 8018950:	6823      	ldr	r3, [r4, #0]
 8018952:	b103      	cbz	r3, 8018956 <_isatty_r+0x1a>
 8018954:	602b      	str	r3, [r5, #0]
 8018956:	bd38      	pop	{r3, r4, r5, pc}
 8018958:	200010f8 	.word	0x200010f8

0801895c <__locale_mb_cur_max>:
 801895c:	4b04      	ldr	r3, [pc, #16]	; (8018970 <__locale_mb_cur_max+0x14>)
 801895e:	4a05      	ldr	r2, [pc, #20]	; (8018974 <__locale_mb_cur_max+0x18>)
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018964:	2b00      	cmp	r3, #0
 8018966:	bf08      	it	eq
 8018968:	4613      	moveq	r3, r2
 801896a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801896e:	4770      	bx	lr
 8018970:	20000404 	.word	0x20000404
 8018974:	20000c44 	.word	0x20000c44

08018978 <__locale_ctype_ptr_l>:
 8018978:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801897c:	4770      	bx	lr

0801897e <__localeconv_l>:
 801897e:	30f0      	adds	r0, #240	; 0xf0
 8018980:	4770      	bx	lr
	...

08018984 <_localeconv_r>:
 8018984:	4b04      	ldr	r3, [pc, #16]	; (8018998 <_localeconv_r+0x14>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801898a:	4b04      	ldr	r3, [pc, #16]	; (801899c <_localeconv_r+0x18>)
 801898c:	2800      	cmp	r0, #0
 801898e:	bf08      	it	eq
 8018990:	4618      	moveq	r0, r3
 8018992:	30f0      	adds	r0, #240	; 0xf0
 8018994:	4770      	bx	lr
 8018996:	bf00      	nop
 8018998:	20000404 	.word	0x20000404
 801899c:	20000c44 	.word	0x20000c44

080189a0 <_lseek_r>:
 80189a0:	b538      	push	{r3, r4, r5, lr}
 80189a2:	4c07      	ldr	r4, [pc, #28]	; (80189c0 <_lseek_r+0x20>)
 80189a4:	4605      	mov	r5, r0
 80189a6:	4608      	mov	r0, r1
 80189a8:	4611      	mov	r1, r2
 80189aa:	2200      	movs	r2, #0
 80189ac:	6022      	str	r2, [r4, #0]
 80189ae:	461a      	mov	r2, r3
 80189b0:	f7f5 fe7e 	bl	800e6b0 <_lseek>
 80189b4:	1c43      	adds	r3, r0, #1
 80189b6:	d102      	bne.n	80189be <_lseek_r+0x1e>
 80189b8:	6823      	ldr	r3, [r4, #0]
 80189ba:	b103      	cbz	r3, 80189be <_lseek_r+0x1e>
 80189bc:	602b      	str	r3, [r5, #0]
 80189be:	bd38      	pop	{r3, r4, r5, pc}
 80189c0:	200010f8 	.word	0x200010f8

080189c4 <__ascii_mbtowc>:
 80189c4:	b082      	sub	sp, #8
 80189c6:	b901      	cbnz	r1, 80189ca <__ascii_mbtowc+0x6>
 80189c8:	a901      	add	r1, sp, #4
 80189ca:	b142      	cbz	r2, 80189de <__ascii_mbtowc+0x1a>
 80189cc:	b14b      	cbz	r3, 80189e2 <__ascii_mbtowc+0x1e>
 80189ce:	7813      	ldrb	r3, [r2, #0]
 80189d0:	600b      	str	r3, [r1, #0]
 80189d2:	7812      	ldrb	r2, [r2, #0]
 80189d4:	1c10      	adds	r0, r2, #0
 80189d6:	bf18      	it	ne
 80189d8:	2001      	movne	r0, #1
 80189da:	b002      	add	sp, #8
 80189dc:	4770      	bx	lr
 80189de:	4610      	mov	r0, r2
 80189e0:	e7fb      	b.n	80189da <__ascii_mbtowc+0x16>
 80189e2:	f06f 0001 	mvn.w	r0, #1
 80189e6:	e7f8      	b.n	80189da <__ascii_mbtowc+0x16>

080189e8 <_Balloc>:
 80189e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80189ea:	b570      	push	{r4, r5, r6, lr}
 80189ec:	4605      	mov	r5, r0
 80189ee:	460c      	mov	r4, r1
 80189f0:	b17b      	cbz	r3, 8018a12 <_Balloc+0x2a>
 80189f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80189f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80189f8:	b9a0      	cbnz	r0, 8018a24 <_Balloc+0x3c>
 80189fa:	2101      	movs	r1, #1
 80189fc:	fa01 f604 	lsl.w	r6, r1, r4
 8018a00:	1d72      	adds	r2, r6, #5
 8018a02:	0092      	lsls	r2, r2, #2
 8018a04:	4628      	mov	r0, r5
 8018a06:	f000 fdab 	bl	8019560 <_calloc_r>
 8018a0a:	b148      	cbz	r0, 8018a20 <_Balloc+0x38>
 8018a0c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8018a10:	e00b      	b.n	8018a2a <_Balloc+0x42>
 8018a12:	2221      	movs	r2, #33	; 0x21
 8018a14:	2104      	movs	r1, #4
 8018a16:	f000 fda3 	bl	8019560 <_calloc_r>
 8018a1a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8018a1c:	2800      	cmp	r0, #0
 8018a1e:	d1e8      	bne.n	80189f2 <_Balloc+0xa>
 8018a20:	2000      	movs	r0, #0
 8018a22:	bd70      	pop	{r4, r5, r6, pc}
 8018a24:	6802      	ldr	r2, [r0, #0]
 8018a26:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018a30:	e7f7      	b.n	8018a22 <_Balloc+0x3a>

08018a32 <_Bfree>:
 8018a32:	b131      	cbz	r1, 8018a42 <_Bfree+0x10>
 8018a34:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018a36:	684a      	ldr	r2, [r1, #4]
 8018a38:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018a3c:	6008      	str	r0, [r1, #0]
 8018a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018a42:	4770      	bx	lr

08018a44 <__multadd>:
 8018a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a48:	690d      	ldr	r5, [r1, #16]
 8018a4a:	461f      	mov	r7, r3
 8018a4c:	4606      	mov	r6, r0
 8018a4e:	460c      	mov	r4, r1
 8018a50:	f101 0c14 	add.w	ip, r1, #20
 8018a54:	2300      	movs	r3, #0
 8018a56:	f8dc 0000 	ldr.w	r0, [ip]
 8018a5a:	b281      	uxth	r1, r0
 8018a5c:	fb02 7101 	mla	r1, r2, r1, r7
 8018a60:	0c0f      	lsrs	r7, r1, #16
 8018a62:	0c00      	lsrs	r0, r0, #16
 8018a64:	fb02 7000 	mla	r0, r2, r0, r7
 8018a68:	b289      	uxth	r1, r1
 8018a6a:	3301      	adds	r3, #1
 8018a6c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018a70:	429d      	cmp	r5, r3
 8018a72:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018a76:	f84c 1b04 	str.w	r1, [ip], #4
 8018a7a:	dcec      	bgt.n	8018a56 <__multadd+0x12>
 8018a7c:	b1d7      	cbz	r7, 8018ab4 <__multadd+0x70>
 8018a7e:	68a3      	ldr	r3, [r4, #8]
 8018a80:	42ab      	cmp	r3, r5
 8018a82:	dc12      	bgt.n	8018aaa <__multadd+0x66>
 8018a84:	6861      	ldr	r1, [r4, #4]
 8018a86:	4630      	mov	r0, r6
 8018a88:	3101      	adds	r1, #1
 8018a8a:	f7ff ffad 	bl	80189e8 <_Balloc>
 8018a8e:	6922      	ldr	r2, [r4, #16]
 8018a90:	3202      	adds	r2, #2
 8018a92:	f104 010c 	add.w	r1, r4, #12
 8018a96:	4680      	mov	r8, r0
 8018a98:	0092      	lsls	r2, r2, #2
 8018a9a:	300c      	adds	r0, #12
 8018a9c:	f7fa fb55 	bl	801314a <memcpy>
 8018aa0:	4621      	mov	r1, r4
 8018aa2:	4630      	mov	r0, r6
 8018aa4:	f7ff ffc5 	bl	8018a32 <_Bfree>
 8018aa8:	4644      	mov	r4, r8
 8018aaa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018aae:	3501      	adds	r5, #1
 8018ab0:	615f      	str	r7, [r3, #20]
 8018ab2:	6125      	str	r5, [r4, #16]
 8018ab4:	4620      	mov	r0, r4
 8018ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018aba <__s2b>:
 8018aba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018abe:	460c      	mov	r4, r1
 8018ac0:	4615      	mov	r5, r2
 8018ac2:	461f      	mov	r7, r3
 8018ac4:	2209      	movs	r2, #9
 8018ac6:	3308      	adds	r3, #8
 8018ac8:	4606      	mov	r6, r0
 8018aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8018ace:	2100      	movs	r1, #0
 8018ad0:	2201      	movs	r2, #1
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	db20      	blt.n	8018b18 <__s2b+0x5e>
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	f7ff ff86 	bl	80189e8 <_Balloc>
 8018adc:	9b08      	ldr	r3, [sp, #32]
 8018ade:	6143      	str	r3, [r0, #20]
 8018ae0:	2d09      	cmp	r5, #9
 8018ae2:	f04f 0301 	mov.w	r3, #1
 8018ae6:	6103      	str	r3, [r0, #16]
 8018ae8:	dd19      	ble.n	8018b1e <__s2b+0x64>
 8018aea:	f104 0809 	add.w	r8, r4, #9
 8018aee:	46c1      	mov	r9, r8
 8018af0:	442c      	add	r4, r5
 8018af2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018af6:	4601      	mov	r1, r0
 8018af8:	3b30      	subs	r3, #48	; 0x30
 8018afa:	220a      	movs	r2, #10
 8018afc:	4630      	mov	r0, r6
 8018afe:	f7ff ffa1 	bl	8018a44 <__multadd>
 8018b02:	45a1      	cmp	r9, r4
 8018b04:	d1f5      	bne.n	8018af2 <__s2b+0x38>
 8018b06:	eb08 0405 	add.w	r4, r8, r5
 8018b0a:	3c08      	subs	r4, #8
 8018b0c:	1b2d      	subs	r5, r5, r4
 8018b0e:	1963      	adds	r3, r4, r5
 8018b10:	42bb      	cmp	r3, r7
 8018b12:	db07      	blt.n	8018b24 <__s2b+0x6a>
 8018b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b18:	0052      	lsls	r2, r2, #1
 8018b1a:	3101      	adds	r1, #1
 8018b1c:	e7d9      	b.n	8018ad2 <__s2b+0x18>
 8018b1e:	340a      	adds	r4, #10
 8018b20:	2509      	movs	r5, #9
 8018b22:	e7f3      	b.n	8018b0c <__s2b+0x52>
 8018b24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018b28:	4601      	mov	r1, r0
 8018b2a:	3b30      	subs	r3, #48	; 0x30
 8018b2c:	220a      	movs	r2, #10
 8018b2e:	4630      	mov	r0, r6
 8018b30:	f7ff ff88 	bl	8018a44 <__multadd>
 8018b34:	e7eb      	b.n	8018b0e <__s2b+0x54>

08018b36 <__hi0bits>:
 8018b36:	0c02      	lsrs	r2, r0, #16
 8018b38:	0412      	lsls	r2, r2, #16
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	b9b2      	cbnz	r2, 8018b6c <__hi0bits+0x36>
 8018b3e:	0403      	lsls	r3, r0, #16
 8018b40:	2010      	movs	r0, #16
 8018b42:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018b46:	bf04      	itt	eq
 8018b48:	021b      	lsleq	r3, r3, #8
 8018b4a:	3008      	addeq	r0, #8
 8018b4c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018b50:	bf04      	itt	eq
 8018b52:	011b      	lsleq	r3, r3, #4
 8018b54:	3004      	addeq	r0, #4
 8018b56:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018b5a:	bf04      	itt	eq
 8018b5c:	009b      	lsleq	r3, r3, #2
 8018b5e:	3002      	addeq	r0, #2
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	db06      	blt.n	8018b72 <__hi0bits+0x3c>
 8018b64:	005b      	lsls	r3, r3, #1
 8018b66:	d503      	bpl.n	8018b70 <__hi0bits+0x3a>
 8018b68:	3001      	adds	r0, #1
 8018b6a:	4770      	bx	lr
 8018b6c:	2000      	movs	r0, #0
 8018b6e:	e7e8      	b.n	8018b42 <__hi0bits+0xc>
 8018b70:	2020      	movs	r0, #32
 8018b72:	4770      	bx	lr

08018b74 <__lo0bits>:
 8018b74:	6803      	ldr	r3, [r0, #0]
 8018b76:	f013 0207 	ands.w	r2, r3, #7
 8018b7a:	4601      	mov	r1, r0
 8018b7c:	d00b      	beq.n	8018b96 <__lo0bits+0x22>
 8018b7e:	07da      	lsls	r2, r3, #31
 8018b80:	d423      	bmi.n	8018bca <__lo0bits+0x56>
 8018b82:	0798      	lsls	r0, r3, #30
 8018b84:	bf49      	itett	mi
 8018b86:	085b      	lsrmi	r3, r3, #1
 8018b88:	089b      	lsrpl	r3, r3, #2
 8018b8a:	2001      	movmi	r0, #1
 8018b8c:	600b      	strmi	r3, [r1, #0]
 8018b8e:	bf5c      	itt	pl
 8018b90:	600b      	strpl	r3, [r1, #0]
 8018b92:	2002      	movpl	r0, #2
 8018b94:	4770      	bx	lr
 8018b96:	b298      	uxth	r0, r3
 8018b98:	b9a8      	cbnz	r0, 8018bc6 <__lo0bits+0x52>
 8018b9a:	0c1b      	lsrs	r3, r3, #16
 8018b9c:	2010      	movs	r0, #16
 8018b9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018ba2:	bf04      	itt	eq
 8018ba4:	0a1b      	lsreq	r3, r3, #8
 8018ba6:	3008      	addeq	r0, #8
 8018ba8:	071a      	lsls	r2, r3, #28
 8018baa:	bf04      	itt	eq
 8018bac:	091b      	lsreq	r3, r3, #4
 8018bae:	3004      	addeq	r0, #4
 8018bb0:	079a      	lsls	r2, r3, #30
 8018bb2:	bf04      	itt	eq
 8018bb4:	089b      	lsreq	r3, r3, #2
 8018bb6:	3002      	addeq	r0, #2
 8018bb8:	07da      	lsls	r2, r3, #31
 8018bba:	d402      	bmi.n	8018bc2 <__lo0bits+0x4e>
 8018bbc:	085b      	lsrs	r3, r3, #1
 8018bbe:	d006      	beq.n	8018bce <__lo0bits+0x5a>
 8018bc0:	3001      	adds	r0, #1
 8018bc2:	600b      	str	r3, [r1, #0]
 8018bc4:	4770      	bx	lr
 8018bc6:	4610      	mov	r0, r2
 8018bc8:	e7e9      	b.n	8018b9e <__lo0bits+0x2a>
 8018bca:	2000      	movs	r0, #0
 8018bcc:	4770      	bx	lr
 8018bce:	2020      	movs	r0, #32
 8018bd0:	4770      	bx	lr

08018bd2 <__i2b>:
 8018bd2:	b510      	push	{r4, lr}
 8018bd4:	460c      	mov	r4, r1
 8018bd6:	2101      	movs	r1, #1
 8018bd8:	f7ff ff06 	bl	80189e8 <_Balloc>
 8018bdc:	2201      	movs	r2, #1
 8018bde:	6144      	str	r4, [r0, #20]
 8018be0:	6102      	str	r2, [r0, #16]
 8018be2:	bd10      	pop	{r4, pc}

08018be4 <__multiply>:
 8018be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018be8:	4614      	mov	r4, r2
 8018bea:	690a      	ldr	r2, [r1, #16]
 8018bec:	6923      	ldr	r3, [r4, #16]
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	bfb8      	it	lt
 8018bf2:	460b      	movlt	r3, r1
 8018bf4:	4688      	mov	r8, r1
 8018bf6:	bfbc      	itt	lt
 8018bf8:	46a0      	movlt	r8, r4
 8018bfa:	461c      	movlt	r4, r3
 8018bfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018c00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018c04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018c08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018c0c:	eb07 0609 	add.w	r6, r7, r9
 8018c10:	42b3      	cmp	r3, r6
 8018c12:	bfb8      	it	lt
 8018c14:	3101      	addlt	r1, #1
 8018c16:	f7ff fee7 	bl	80189e8 <_Balloc>
 8018c1a:	f100 0514 	add.w	r5, r0, #20
 8018c1e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018c22:	462b      	mov	r3, r5
 8018c24:	2200      	movs	r2, #0
 8018c26:	4573      	cmp	r3, lr
 8018c28:	d316      	bcc.n	8018c58 <__multiply+0x74>
 8018c2a:	f104 0214 	add.w	r2, r4, #20
 8018c2e:	f108 0114 	add.w	r1, r8, #20
 8018c32:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018c36:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018c3a:	9300      	str	r3, [sp, #0]
 8018c3c:	9b00      	ldr	r3, [sp, #0]
 8018c3e:	9201      	str	r2, [sp, #4]
 8018c40:	4293      	cmp	r3, r2
 8018c42:	d80c      	bhi.n	8018c5e <__multiply+0x7a>
 8018c44:	2e00      	cmp	r6, #0
 8018c46:	dd03      	ble.n	8018c50 <__multiply+0x6c>
 8018c48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d05d      	beq.n	8018d0c <__multiply+0x128>
 8018c50:	6106      	str	r6, [r0, #16]
 8018c52:	b003      	add	sp, #12
 8018c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c58:	f843 2b04 	str.w	r2, [r3], #4
 8018c5c:	e7e3      	b.n	8018c26 <__multiply+0x42>
 8018c5e:	f8b2 b000 	ldrh.w	fp, [r2]
 8018c62:	f1bb 0f00 	cmp.w	fp, #0
 8018c66:	d023      	beq.n	8018cb0 <__multiply+0xcc>
 8018c68:	4689      	mov	r9, r1
 8018c6a:	46ac      	mov	ip, r5
 8018c6c:	f04f 0800 	mov.w	r8, #0
 8018c70:	f859 4b04 	ldr.w	r4, [r9], #4
 8018c74:	f8dc a000 	ldr.w	sl, [ip]
 8018c78:	b2a3      	uxth	r3, r4
 8018c7a:	fa1f fa8a 	uxth.w	sl, sl
 8018c7e:	fb0b a303 	mla	r3, fp, r3, sl
 8018c82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018c86:	f8dc 4000 	ldr.w	r4, [ip]
 8018c8a:	4443      	add	r3, r8
 8018c8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018c90:	fb0b 840a 	mla	r4, fp, sl, r8
 8018c94:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018c98:	46e2      	mov	sl, ip
 8018c9a:	b29b      	uxth	r3, r3
 8018c9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018ca0:	454f      	cmp	r7, r9
 8018ca2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018ca6:	f84a 3b04 	str.w	r3, [sl], #4
 8018caa:	d82b      	bhi.n	8018d04 <__multiply+0x120>
 8018cac:	f8cc 8004 	str.w	r8, [ip, #4]
 8018cb0:	9b01      	ldr	r3, [sp, #4]
 8018cb2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018cb6:	3204      	adds	r2, #4
 8018cb8:	f1ba 0f00 	cmp.w	sl, #0
 8018cbc:	d020      	beq.n	8018d00 <__multiply+0x11c>
 8018cbe:	682b      	ldr	r3, [r5, #0]
 8018cc0:	4689      	mov	r9, r1
 8018cc2:	46a8      	mov	r8, r5
 8018cc4:	f04f 0b00 	mov.w	fp, #0
 8018cc8:	f8b9 c000 	ldrh.w	ip, [r9]
 8018ccc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018cd0:	fb0a 440c 	mla	r4, sl, ip, r4
 8018cd4:	445c      	add	r4, fp
 8018cd6:	46c4      	mov	ip, r8
 8018cd8:	b29b      	uxth	r3, r3
 8018cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018cde:	f84c 3b04 	str.w	r3, [ip], #4
 8018ce2:	f859 3b04 	ldr.w	r3, [r9], #4
 8018ce6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018cea:	0c1b      	lsrs	r3, r3, #16
 8018cec:	fb0a b303 	mla	r3, sl, r3, fp
 8018cf0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018cf4:	454f      	cmp	r7, r9
 8018cf6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018cfa:	d805      	bhi.n	8018d08 <__multiply+0x124>
 8018cfc:	f8c8 3004 	str.w	r3, [r8, #4]
 8018d00:	3504      	adds	r5, #4
 8018d02:	e79b      	b.n	8018c3c <__multiply+0x58>
 8018d04:	46d4      	mov	ip, sl
 8018d06:	e7b3      	b.n	8018c70 <__multiply+0x8c>
 8018d08:	46e0      	mov	r8, ip
 8018d0a:	e7dd      	b.n	8018cc8 <__multiply+0xe4>
 8018d0c:	3e01      	subs	r6, #1
 8018d0e:	e799      	b.n	8018c44 <__multiply+0x60>

08018d10 <__pow5mult>:
 8018d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d14:	4615      	mov	r5, r2
 8018d16:	f012 0203 	ands.w	r2, r2, #3
 8018d1a:	4606      	mov	r6, r0
 8018d1c:	460f      	mov	r7, r1
 8018d1e:	d007      	beq.n	8018d30 <__pow5mult+0x20>
 8018d20:	3a01      	subs	r2, #1
 8018d22:	4c1a      	ldr	r4, [pc, #104]	; (8018d8c <__pow5mult+0x7c>)
 8018d24:	2300      	movs	r3, #0
 8018d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018d2a:	f7ff fe8b 	bl	8018a44 <__multadd>
 8018d2e:	4607      	mov	r7, r0
 8018d30:	10ad      	asrs	r5, r5, #2
 8018d32:	d027      	beq.n	8018d84 <__pow5mult+0x74>
 8018d34:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018d36:	b944      	cbnz	r4, 8018d4a <__pow5mult+0x3a>
 8018d38:	f240 2171 	movw	r1, #625	; 0x271
 8018d3c:	4630      	mov	r0, r6
 8018d3e:	f7ff ff48 	bl	8018bd2 <__i2b>
 8018d42:	2300      	movs	r3, #0
 8018d44:	64b0      	str	r0, [r6, #72]	; 0x48
 8018d46:	4604      	mov	r4, r0
 8018d48:	6003      	str	r3, [r0, #0]
 8018d4a:	f04f 0800 	mov.w	r8, #0
 8018d4e:	07eb      	lsls	r3, r5, #31
 8018d50:	d50a      	bpl.n	8018d68 <__pow5mult+0x58>
 8018d52:	4639      	mov	r1, r7
 8018d54:	4622      	mov	r2, r4
 8018d56:	4630      	mov	r0, r6
 8018d58:	f7ff ff44 	bl	8018be4 <__multiply>
 8018d5c:	4639      	mov	r1, r7
 8018d5e:	4681      	mov	r9, r0
 8018d60:	4630      	mov	r0, r6
 8018d62:	f7ff fe66 	bl	8018a32 <_Bfree>
 8018d66:	464f      	mov	r7, r9
 8018d68:	106d      	asrs	r5, r5, #1
 8018d6a:	d00b      	beq.n	8018d84 <__pow5mult+0x74>
 8018d6c:	6820      	ldr	r0, [r4, #0]
 8018d6e:	b938      	cbnz	r0, 8018d80 <__pow5mult+0x70>
 8018d70:	4622      	mov	r2, r4
 8018d72:	4621      	mov	r1, r4
 8018d74:	4630      	mov	r0, r6
 8018d76:	f7ff ff35 	bl	8018be4 <__multiply>
 8018d7a:	6020      	str	r0, [r4, #0]
 8018d7c:	f8c0 8000 	str.w	r8, [r0]
 8018d80:	4604      	mov	r4, r0
 8018d82:	e7e4      	b.n	8018d4e <__pow5mult+0x3e>
 8018d84:	4638      	mov	r0, r7
 8018d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d8a:	bf00      	nop
 8018d8c:	0801cde0 	.word	0x0801cde0

08018d90 <__lshift>:
 8018d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d94:	460c      	mov	r4, r1
 8018d96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018d9a:	6923      	ldr	r3, [r4, #16]
 8018d9c:	6849      	ldr	r1, [r1, #4]
 8018d9e:	eb0a 0903 	add.w	r9, sl, r3
 8018da2:	68a3      	ldr	r3, [r4, #8]
 8018da4:	4607      	mov	r7, r0
 8018da6:	4616      	mov	r6, r2
 8018da8:	f109 0501 	add.w	r5, r9, #1
 8018dac:	42ab      	cmp	r3, r5
 8018dae:	db32      	blt.n	8018e16 <__lshift+0x86>
 8018db0:	4638      	mov	r0, r7
 8018db2:	f7ff fe19 	bl	80189e8 <_Balloc>
 8018db6:	2300      	movs	r3, #0
 8018db8:	4680      	mov	r8, r0
 8018dba:	f100 0114 	add.w	r1, r0, #20
 8018dbe:	461a      	mov	r2, r3
 8018dc0:	4553      	cmp	r3, sl
 8018dc2:	db2b      	blt.n	8018e1c <__lshift+0x8c>
 8018dc4:	6920      	ldr	r0, [r4, #16]
 8018dc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018dca:	f104 0314 	add.w	r3, r4, #20
 8018dce:	f016 021f 	ands.w	r2, r6, #31
 8018dd2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018dd6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018dda:	d025      	beq.n	8018e28 <__lshift+0x98>
 8018ddc:	f1c2 0e20 	rsb	lr, r2, #32
 8018de0:	2000      	movs	r0, #0
 8018de2:	681e      	ldr	r6, [r3, #0]
 8018de4:	468a      	mov	sl, r1
 8018de6:	4096      	lsls	r6, r2
 8018de8:	4330      	orrs	r0, r6
 8018dea:	f84a 0b04 	str.w	r0, [sl], #4
 8018dee:	f853 0b04 	ldr.w	r0, [r3], #4
 8018df2:	459c      	cmp	ip, r3
 8018df4:	fa20 f00e 	lsr.w	r0, r0, lr
 8018df8:	d814      	bhi.n	8018e24 <__lshift+0x94>
 8018dfa:	6048      	str	r0, [r1, #4]
 8018dfc:	b108      	cbz	r0, 8018e02 <__lshift+0x72>
 8018dfe:	f109 0502 	add.w	r5, r9, #2
 8018e02:	3d01      	subs	r5, #1
 8018e04:	4638      	mov	r0, r7
 8018e06:	f8c8 5010 	str.w	r5, [r8, #16]
 8018e0a:	4621      	mov	r1, r4
 8018e0c:	f7ff fe11 	bl	8018a32 <_Bfree>
 8018e10:	4640      	mov	r0, r8
 8018e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e16:	3101      	adds	r1, #1
 8018e18:	005b      	lsls	r3, r3, #1
 8018e1a:	e7c7      	b.n	8018dac <__lshift+0x1c>
 8018e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018e20:	3301      	adds	r3, #1
 8018e22:	e7cd      	b.n	8018dc0 <__lshift+0x30>
 8018e24:	4651      	mov	r1, sl
 8018e26:	e7dc      	b.n	8018de2 <__lshift+0x52>
 8018e28:	3904      	subs	r1, #4
 8018e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018e32:	459c      	cmp	ip, r3
 8018e34:	d8f9      	bhi.n	8018e2a <__lshift+0x9a>
 8018e36:	e7e4      	b.n	8018e02 <__lshift+0x72>

08018e38 <__mcmp>:
 8018e38:	6903      	ldr	r3, [r0, #16]
 8018e3a:	690a      	ldr	r2, [r1, #16]
 8018e3c:	1a9b      	subs	r3, r3, r2
 8018e3e:	b530      	push	{r4, r5, lr}
 8018e40:	d10c      	bne.n	8018e5c <__mcmp+0x24>
 8018e42:	0092      	lsls	r2, r2, #2
 8018e44:	3014      	adds	r0, #20
 8018e46:	3114      	adds	r1, #20
 8018e48:	1884      	adds	r4, r0, r2
 8018e4a:	4411      	add	r1, r2
 8018e4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018e50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018e54:	4295      	cmp	r5, r2
 8018e56:	d003      	beq.n	8018e60 <__mcmp+0x28>
 8018e58:	d305      	bcc.n	8018e66 <__mcmp+0x2e>
 8018e5a:	2301      	movs	r3, #1
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	bd30      	pop	{r4, r5, pc}
 8018e60:	42a0      	cmp	r0, r4
 8018e62:	d3f3      	bcc.n	8018e4c <__mcmp+0x14>
 8018e64:	e7fa      	b.n	8018e5c <__mcmp+0x24>
 8018e66:	f04f 33ff 	mov.w	r3, #4294967295
 8018e6a:	e7f7      	b.n	8018e5c <__mcmp+0x24>

08018e6c <__mdiff>:
 8018e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e70:	460d      	mov	r5, r1
 8018e72:	4607      	mov	r7, r0
 8018e74:	4611      	mov	r1, r2
 8018e76:	4628      	mov	r0, r5
 8018e78:	4614      	mov	r4, r2
 8018e7a:	f7ff ffdd 	bl	8018e38 <__mcmp>
 8018e7e:	1e06      	subs	r6, r0, #0
 8018e80:	d108      	bne.n	8018e94 <__mdiff+0x28>
 8018e82:	4631      	mov	r1, r6
 8018e84:	4638      	mov	r0, r7
 8018e86:	f7ff fdaf 	bl	80189e8 <_Balloc>
 8018e8a:	2301      	movs	r3, #1
 8018e8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e94:	bfa4      	itt	ge
 8018e96:	4623      	movge	r3, r4
 8018e98:	462c      	movge	r4, r5
 8018e9a:	4638      	mov	r0, r7
 8018e9c:	6861      	ldr	r1, [r4, #4]
 8018e9e:	bfa6      	itte	ge
 8018ea0:	461d      	movge	r5, r3
 8018ea2:	2600      	movge	r6, #0
 8018ea4:	2601      	movlt	r6, #1
 8018ea6:	f7ff fd9f 	bl	80189e8 <_Balloc>
 8018eaa:	692b      	ldr	r3, [r5, #16]
 8018eac:	60c6      	str	r6, [r0, #12]
 8018eae:	6926      	ldr	r6, [r4, #16]
 8018eb0:	f105 0914 	add.w	r9, r5, #20
 8018eb4:	f104 0214 	add.w	r2, r4, #20
 8018eb8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018ebc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018ec0:	f100 0514 	add.w	r5, r0, #20
 8018ec4:	f04f 0e00 	mov.w	lr, #0
 8018ec8:	f852 ab04 	ldr.w	sl, [r2], #4
 8018ecc:	f859 4b04 	ldr.w	r4, [r9], #4
 8018ed0:	fa1e f18a 	uxtah	r1, lr, sl
 8018ed4:	b2a3      	uxth	r3, r4
 8018ed6:	1ac9      	subs	r1, r1, r3
 8018ed8:	0c23      	lsrs	r3, r4, #16
 8018eda:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018ede:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018ee2:	b289      	uxth	r1, r1
 8018ee4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018ee8:	45c8      	cmp	r8, r9
 8018eea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018eee:	4694      	mov	ip, r2
 8018ef0:	f845 3b04 	str.w	r3, [r5], #4
 8018ef4:	d8e8      	bhi.n	8018ec8 <__mdiff+0x5c>
 8018ef6:	45bc      	cmp	ip, r7
 8018ef8:	d304      	bcc.n	8018f04 <__mdiff+0x98>
 8018efa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018efe:	b183      	cbz	r3, 8018f22 <__mdiff+0xb6>
 8018f00:	6106      	str	r6, [r0, #16]
 8018f02:	e7c5      	b.n	8018e90 <__mdiff+0x24>
 8018f04:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018f08:	fa1e f381 	uxtah	r3, lr, r1
 8018f0c:	141a      	asrs	r2, r3, #16
 8018f0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018f12:	b29b      	uxth	r3, r3
 8018f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018f18:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018f1c:	f845 3b04 	str.w	r3, [r5], #4
 8018f20:	e7e9      	b.n	8018ef6 <__mdiff+0x8a>
 8018f22:	3e01      	subs	r6, #1
 8018f24:	e7e9      	b.n	8018efa <__mdiff+0x8e>
	...

08018f28 <__ulp>:
 8018f28:	4b12      	ldr	r3, [pc, #72]	; (8018f74 <__ulp+0x4c>)
 8018f2a:	ee10 2a90 	vmov	r2, s1
 8018f2e:	401a      	ands	r2, r3
 8018f30:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	dd04      	ble.n	8018f42 <__ulp+0x1a>
 8018f38:	2000      	movs	r0, #0
 8018f3a:	4619      	mov	r1, r3
 8018f3c:	ec41 0b10 	vmov	d0, r0, r1
 8018f40:	4770      	bx	lr
 8018f42:	425b      	negs	r3, r3
 8018f44:	151b      	asrs	r3, r3, #20
 8018f46:	2b13      	cmp	r3, #19
 8018f48:	f04f 0000 	mov.w	r0, #0
 8018f4c:	f04f 0100 	mov.w	r1, #0
 8018f50:	dc04      	bgt.n	8018f5c <__ulp+0x34>
 8018f52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018f56:	fa42 f103 	asr.w	r1, r2, r3
 8018f5a:	e7ef      	b.n	8018f3c <__ulp+0x14>
 8018f5c:	3b14      	subs	r3, #20
 8018f5e:	2b1e      	cmp	r3, #30
 8018f60:	f04f 0201 	mov.w	r2, #1
 8018f64:	bfda      	itte	le
 8018f66:	f1c3 031f 	rsble	r3, r3, #31
 8018f6a:	fa02 f303 	lslle.w	r3, r2, r3
 8018f6e:	4613      	movgt	r3, r2
 8018f70:	4618      	mov	r0, r3
 8018f72:	e7e3      	b.n	8018f3c <__ulp+0x14>
 8018f74:	7ff00000 	.word	0x7ff00000

08018f78 <__b2d>:
 8018f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f7a:	6905      	ldr	r5, [r0, #16]
 8018f7c:	f100 0714 	add.w	r7, r0, #20
 8018f80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018f84:	1f2e      	subs	r6, r5, #4
 8018f86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018f8a:	4620      	mov	r0, r4
 8018f8c:	f7ff fdd3 	bl	8018b36 <__hi0bits>
 8018f90:	f1c0 0320 	rsb	r3, r0, #32
 8018f94:	280a      	cmp	r0, #10
 8018f96:	600b      	str	r3, [r1, #0]
 8018f98:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019010 <__b2d+0x98>
 8018f9c:	dc14      	bgt.n	8018fc8 <__b2d+0x50>
 8018f9e:	f1c0 0e0b 	rsb	lr, r0, #11
 8018fa2:	fa24 f10e 	lsr.w	r1, r4, lr
 8018fa6:	42b7      	cmp	r7, r6
 8018fa8:	ea41 030c 	orr.w	r3, r1, ip
 8018fac:	bf34      	ite	cc
 8018fae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018fb2:	2100      	movcs	r1, #0
 8018fb4:	3015      	adds	r0, #21
 8018fb6:	fa04 f000 	lsl.w	r0, r4, r0
 8018fba:	fa21 f10e 	lsr.w	r1, r1, lr
 8018fbe:	ea40 0201 	orr.w	r2, r0, r1
 8018fc2:	ec43 2b10 	vmov	d0, r2, r3
 8018fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fc8:	42b7      	cmp	r7, r6
 8018fca:	bf3a      	itte	cc
 8018fcc:	f1a5 0608 	subcc.w	r6, r5, #8
 8018fd0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018fd4:	2100      	movcs	r1, #0
 8018fd6:	380b      	subs	r0, #11
 8018fd8:	d015      	beq.n	8019006 <__b2d+0x8e>
 8018fda:	4084      	lsls	r4, r0
 8018fdc:	f1c0 0520 	rsb	r5, r0, #32
 8018fe0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018fe4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018fe8:	42be      	cmp	r6, r7
 8018fea:	fa21 fc05 	lsr.w	ip, r1, r5
 8018fee:	ea44 030c 	orr.w	r3, r4, ip
 8018ff2:	bf8c      	ite	hi
 8018ff4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018ff8:	2400      	movls	r4, #0
 8018ffa:	fa01 f000 	lsl.w	r0, r1, r0
 8018ffe:	40ec      	lsrs	r4, r5
 8019000:	ea40 0204 	orr.w	r2, r0, r4
 8019004:	e7dd      	b.n	8018fc2 <__b2d+0x4a>
 8019006:	ea44 030c 	orr.w	r3, r4, ip
 801900a:	460a      	mov	r2, r1
 801900c:	e7d9      	b.n	8018fc2 <__b2d+0x4a>
 801900e:	bf00      	nop
 8019010:	3ff00000 	.word	0x3ff00000

08019014 <__d2b>:
 8019014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019018:	460e      	mov	r6, r1
 801901a:	2101      	movs	r1, #1
 801901c:	ec59 8b10 	vmov	r8, r9, d0
 8019020:	4615      	mov	r5, r2
 8019022:	f7ff fce1 	bl	80189e8 <_Balloc>
 8019026:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801902a:	4607      	mov	r7, r0
 801902c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019030:	bb34      	cbnz	r4, 8019080 <__d2b+0x6c>
 8019032:	9301      	str	r3, [sp, #4]
 8019034:	f1b8 0300 	subs.w	r3, r8, #0
 8019038:	d027      	beq.n	801908a <__d2b+0x76>
 801903a:	a802      	add	r0, sp, #8
 801903c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019040:	f7ff fd98 	bl	8018b74 <__lo0bits>
 8019044:	9900      	ldr	r1, [sp, #0]
 8019046:	b1f0      	cbz	r0, 8019086 <__d2b+0x72>
 8019048:	9a01      	ldr	r2, [sp, #4]
 801904a:	f1c0 0320 	rsb	r3, r0, #32
 801904e:	fa02 f303 	lsl.w	r3, r2, r3
 8019052:	430b      	orrs	r3, r1
 8019054:	40c2      	lsrs	r2, r0
 8019056:	617b      	str	r3, [r7, #20]
 8019058:	9201      	str	r2, [sp, #4]
 801905a:	9b01      	ldr	r3, [sp, #4]
 801905c:	61bb      	str	r3, [r7, #24]
 801905e:	2b00      	cmp	r3, #0
 8019060:	bf14      	ite	ne
 8019062:	2102      	movne	r1, #2
 8019064:	2101      	moveq	r1, #1
 8019066:	6139      	str	r1, [r7, #16]
 8019068:	b1c4      	cbz	r4, 801909c <__d2b+0x88>
 801906a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801906e:	4404      	add	r4, r0
 8019070:	6034      	str	r4, [r6, #0]
 8019072:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019076:	6028      	str	r0, [r5, #0]
 8019078:	4638      	mov	r0, r7
 801907a:	b003      	add	sp, #12
 801907c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019084:	e7d5      	b.n	8019032 <__d2b+0x1e>
 8019086:	6179      	str	r1, [r7, #20]
 8019088:	e7e7      	b.n	801905a <__d2b+0x46>
 801908a:	a801      	add	r0, sp, #4
 801908c:	f7ff fd72 	bl	8018b74 <__lo0bits>
 8019090:	9b01      	ldr	r3, [sp, #4]
 8019092:	617b      	str	r3, [r7, #20]
 8019094:	2101      	movs	r1, #1
 8019096:	6139      	str	r1, [r7, #16]
 8019098:	3020      	adds	r0, #32
 801909a:	e7e5      	b.n	8019068 <__d2b+0x54>
 801909c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80190a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80190a4:	6030      	str	r0, [r6, #0]
 80190a6:	6918      	ldr	r0, [r3, #16]
 80190a8:	f7ff fd45 	bl	8018b36 <__hi0bits>
 80190ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80190b0:	e7e1      	b.n	8019076 <__d2b+0x62>

080190b2 <__ratio>:
 80190b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190b6:	4688      	mov	r8, r1
 80190b8:	4669      	mov	r1, sp
 80190ba:	4681      	mov	r9, r0
 80190bc:	f7ff ff5c 	bl	8018f78 <__b2d>
 80190c0:	a901      	add	r1, sp, #4
 80190c2:	4640      	mov	r0, r8
 80190c4:	ec57 6b10 	vmov	r6, r7, d0
 80190c8:	f7ff ff56 	bl	8018f78 <__b2d>
 80190cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80190d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80190d4:	eba3 0c02 	sub.w	ip, r3, r2
 80190d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80190dc:	1a9b      	subs	r3, r3, r2
 80190de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80190e2:	ec5b ab10 	vmov	sl, fp, d0
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	bfce      	itee	gt
 80190ea:	463a      	movgt	r2, r7
 80190ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80190f0:	465a      	movle	r2, fp
 80190f2:	4659      	mov	r1, fp
 80190f4:	463d      	mov	r5, r7
 80190f6:	bfd4      	ite	le
 80190f8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80190fc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019100:	4630      	mov	r0, r6
 8019102:	ee10 2a10 	vmov	r2, s0
 8019106:	460b      	mov	r3, r1
 8019108:	4629      	mov	r1, r5
 801910a:	f7ee f921 	bl	8007350 <__aeabi_ddiv>
 801910e:	ec41 0b10 	vmov	d0, r0, r1
 8019112:	b003      	add	sp, #12
 8019114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019118 <__copybits>:
 8019118:	3901      	subs	r1, #1
 801911a:	b510      	push	{r4, lr}
 801911c:	1149      	asrs	r1, r1, #5
 801911e:	6914      	ldr	r4, [r2, #16]
 8019120:	3101      	adds	r1, #1
 8019122:	f102 0314 	add.w	r3, r2, #20
 8019126:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801912a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801912e:	42a3      	cmp	r3, r4
 8019130:	4602      	mov	r2, r0
 8019132:	d303      	bcc.n	801913c <__copybits+0x24>
 8019134:	2300      	movs	r3, #0
 8019136:	428a      	cmp	r2, r1
 8019138:	d305      	bcc.n	8019146 <__copybits+0x2e>
 801913a:	bd10      	pop	{r4, pc}
 801913c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019140:	f840 2b04 	str.w	r2, [r0], #4
 8019144:	e7f3      	b.n	801912e <__copybits+0x16>
 8019146:	f842 3b04 	str.w	r3, [r2], #4
 801914a:	e7f4      	b.n	8019136 <__copybits+0x1e>

0801914c <__any_on>:
 801914c:	f100 0214 	add.w	r2, r0, #20
 8019150:	6900      	ldr	r0, [r0, #16]
 8019152:	114b      	asrs	r3, r1, #5
 8019154:	4298      	cmp	r0, r3
 8019156:	b510      	push	{r4, lr}
 8019158:	db11      	blt.n	801917e <__any_on+0x32>
 801915a:	dd0a      	ble.n	8019172 <__any_on+0x26>
 801915c:	f011 011f 	ands.w	r1, r1, #31
 8019160:	d007      	beq.n	8019172 <__any_on+0x26>
 8019162:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019166:	fa24 f001 	lsr.w	r0, r4, r1
 801916a:	fa00 f101 	lsl.w	r1, r0, r1
 801916e:	428c      	cmp	r4, r1
 8019170:	d10b      	bne.n	801918a <__any_on+0x3e>
 8019172:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019176:	4293      	cmp	r3, r2
 8019178:	d803      	bhi.n	8019182 <__any_on+0x36>
 801917a:	2000      	movs	r0, #0
 801917c:	bd10      	pop	{r4, pc}
 801917e:	4603      	mov	r3, r0
 8019180:	e7f7      	b.n	8019172 <__any_on+0x26>
 8019182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019186:	2900      	cmp	r1, #0
 8019188:	d0f5      	beq.n	8019176 <__any_on+0x2a>
 801918a:	2001      	movs	r0, #1
 801918c:	e7f6      	b.n	801917c <__any_on+0x30>

0801918e <_putc_r>:
 801918e:	b570      	push	{r4, r5, r6, lr}
 8019190:	460d      	mov	r5, r1
 8019192:	4614      	mov	r4, r2
 8019194:	4606      	mov	r6, r0
 8019196:	b118      	cbz	r0, 80191a0 <_putc_r+0x12>
 8019198:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801919a:	b90b      	cbnz	r3, 80191a0 <_putc_r+0x12>
 801919c:	f7fe ff3e 	bl	801801c <__sinit>
 80191a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80191a2:	07d8      	lsls	r0, r3, #31
 80191a4:	d405      	bmi.n	80191b2 <_putc_r+0x24>
 80191a6:	89a3      	ldrh	r3, [r4, #12]
 80191a8:	0599      	lsls	r1, r3, #22
 80191aa:	d402      	bmi.n	80191b2 <_putc_r+0x24>
 80191ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80191ae:	f7f9 fd09 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 80191b2:	68a3      	ldr	r3, [r4, #8]
 80191b4:	3b01      	subs	r3, #1
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	60a3      	str	r3, [r4, #8]
 80191ba:	da05      	bge.n	80191c8 <_putc_r+0x3a>
 80191bc:	69a2      	ldr	r2, [r4, #24]
 80191be:	4293      	cmp	r3, r2
 80191c0:	db12      	blt.n	80191e8 <_putc_r+0x5a>
 80191c2:	b2eb      	uxtb	r3, r5
 80191c4:	2b0a      	cmp	r3, #10
 80191c6:	d00f      	beq.n	80191e8 <_putc_r+0x5a>
 80191c8:	6823      	ldr	r3, [r4, #0]
 80191ca:	1c5a      	adds	r2, r3, #1
 80191cc:	6022      	str	r2, [r4, #0]
 80191ce:	701d      	strb	r5, [r3, #0]
 80191d0:	b2ed      	uxtb	r5, r5
 80191d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80191d4:	07da      	lsls	r2, r3, #31
 80191d6:	d405      	bmi.n	80191e4 <_putc_r+0x56>
 80191d8:	89a3      	ldrh	r3, [r4, #12]
 80191da:	059b      	lsls	r3, r3, #22
 80191dc:	d402      	bmi.n	80191e4 <_putc_r+0x56>
 80191de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80191e0:	f7f9 fcf1 	bl	8012bc6 <__retarget_lock_release_recursive>
 80191e4:	4628      	mov	r0, r5
 80191e6:	bd70      	pop	{r4, r5, r6, pc}
 80191e8:	4629      	mov	r1, r5
 80191ea:	4622      	mov	r2, r4
 80191ec:	4630      	mov	r0, r6
 80191ee:	f000 f90a 	bl	8019406 <__swbuf_r>
 80191f2:	4605      	mov	r5, r0
 80191f4:	e7ed      	b.n	80191d2 <_putc_r+0x44>
	...

080191f8 <_read_r>:
 80191f8:	b538      	push	{r3, r4, r5, lr}
 80191fa:	4c07      	ldr	r4, [pc, #28]	; (8019218 <_read_r+0x20>)
 80191fc:	4605      	mov	r5, r0
 80191fe:	4608      	mov	r0, r1
 8019200:	4611      	mov	r1, r2
 8019202:	2200      	movs	r2, #0
 8019204:	6022      	str	r2, [r4, #0]
 8019206:	461a      	mov	r2, r3
 8019208:	f7f5 f9f2 	bl	800e5f0 <_read>
 801920c:	1c43      	adds	r3, r0, #1
 801920e:	d102      	bne.n	8019216 <_read_r+0x1e>
 8019210:	6823      	ldr	r3, [r4, #0]
 8019212:	b103      	cbz	r3, 8019216 <_read_r+0x1e>
 8019214:	602b      	str	r3, [r5, #0]
 8019216:	bd38      	pop	{r3, r4, r5, pc}
 8019218:	200010f8 	.word	0x200010f8

0801921c <frexp>:
 801921c:	b570      	push	{r4, r5, r6, lr}
 801921e:	2100      	movs	r1, #0
 8019220:	ec55 4b10 	vmov	r4, r5, d0
 8019224:	6001      	str	r1, [r0, #0]
 8019226:	4916      	ldr	r1, [pc, #88]	; (8019280 <frexp+0x64>)
 8019228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801922c:	428b      	cmp	r3, r1
 801922e:	4606      	mov	r6, r0
 8019230:	462a      	mov	r2, r5
 8019232:	dc22      	bgt.n	801927a <frexp+0x5e>
 8019234:	ee10 1a10 	vmov	r1, s0
 8019238:	4319      	orrs	r1, r3
 801923a:	d01e      	beq.n	801927a <frexp+0x5e>
 801923c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019240:	da0d      	bge.n	801925e <frexp+0x42>
 8019242:	2200      	movs	r2, #0
 8019244:	4b0f      	ldr	r3, [pc, #60]	; (8019284 <frexp+0x68>)
 8019246:	ee10 0a10 	vmov	r0, s0
 801924a:	4629      	mov	r1, r5
 801924c:	f7ed ff56 	bl	80070fc <__aeabi_dmul>
 8019250:	460a      	mov	r2, r1
 8019252:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019256:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801925a:	4604      	mov	r4, r0
 801925c:	6031      	str	r1, [r6, #0]
 801925e:	6831      	ldr	r1, [r6, #0]
 8019260:	151b      	asrs	r3, r3, #20
 8019262:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019266:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801926a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 801926e:	440b      	add	r3, r1
 8019270:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8019274:	6033      	str	r3, [r6, #0]
 8019276:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801927a:	ec45 4b10 	vmov	d0, r4, r5
 801927e:	bd70      	pop	{r4, r5, r6, pc}
 8019280:	7fefffff 	.word	0x7fefffff
 8019284:	43500000 	.word	0x43500000

08019288 <strncpy>:
 8019288:	b570      	push	{r4, r5, r6, lr}
 801928a:	3901      	subs	r1, #1
 801928c:	4604      	mov	r4, r0
 801928e:	b902      	cbnz	r2, 8019292 <strncpy+0xa>
 8019290:	bd70      	pop	{r4, r5, r6, pc}
 8019292:	4623      	mov	r3, r4
 8019294:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8019298:	f803 5b01 	strb.w	r5, [r3], #1
 801929c:	1e56      	subs	r6, r2, #1
 801929e:	b92d      	cbnz	r5, 80192ac <strncpy+0x24>
 80192a0:	4414      	add	r4, r2
 80192a2:	42a3      	cmp	r3, r4
 80192a4:	d0f4      	beq.n	8019290 <strncpy+0x8>
 80192a6:	f803 5b01 	strb.w	r5, [r3], #1
 80192aa:	e7fa      	b.n	80192a2 <strncpy+0x1a>
 80192ac:	461c      	mov	r4, r3
 80192ae:	4632      	mov	r2, r6
 80192b0:	e7ed      	b.n	801928e <strncpy+0x6>

080192b2 <__ssprint_r>:
 80192b2:	6893      	ldr	r3, [r2, #8]
 80192b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b8:	4681      	mov	r9, r0
 80192ba:	460c      	mov	r4, r1
 80192bc:	4616      	mov	r6, r2
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d05e      	beq.n	8019380 <__ssprint_r+0xce>
 80192c2:	f04f 0b00 	mov.w	fp, #0
 80192c6:	f8d2 a000 	ldr.w	sl, [r2]
 80192ca:	465f      	mov	r7, fp
 80192cc:	b357      	cbz	r7, 8019324 <__ssprint_r+0x72>
 80192ce:	68a3      	ldr	r3, [r4, #8]
 80192d0:	429f      	cmp	r7, r3
 80192d2:	d340      	bcc.n	8019356 <__ssprint_r+0xa4>
 80192d4:	89a2      	ldrh	r2, [r4, #12]
 80192d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80192da:	d03c      	beq.n	8019356 <__ssprint_r+0xa4>
 80192dc:	6825      	ldr	r5, [r4, #0]
 80192de:	6921      	ldr	r1, [r4, #16]
 80192e0:	eba5 0801 	sub.w	r8, r5, r1
 80192e4:	6965      	ldr	r5, [r4, #20]
 80192e6:	2302      	movs	r3, #2
 80192e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80192ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80192f0:	f108 0301 	add.w	r3, r8, #1
 80192f4:	443b      	add	r3, r7
 80192f6:	429d      	cmp	r5, r3
 80192f8:	bf38      	it	cc
 80192fa:	461d      	movcc	r5, r3
 80192fc:	0553      	lsls	r3, r2, #21
 80192fe:	d544      	bpl.n	801938a <__ssprint_r+0xd8>
 8019300:	4629      	mov	r1, r5
 8019302:	4648      	mov	r0, r9
 8019304:	f7f9 fcdc 	bl	8012cc0 <_malloc_r>
 8019308:	b988      	cbnz	r0, 801932e <__ssprint_r+0x7c>
 801930a:	230c      	movs	r3, #12
 801930c:	f8c9 3000 	str.w	r3, [r9]
 8019310:	89a3      	ldrh	r3, [r4, #12]
 8019312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019316:	81a3      	strh	r3, [r4, #12]
 8019318:	2300      	movs	r3, #0
 801931a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801931e:	f04f 30ff 	mov.w	r0, #4294967295
 8019322:	e02f      	b.n	8019384 <__ssprint_r+0xd2>
 8019324:	e9da b700 	ldrd	fp, r7, [sl]
 8019328:	f10a 0a08 	add.w	sl, sl, #8
 801932c:	e7ce      	b.n	80192cc <__ssprint_r+0x1a>
 801932e:	4642      	mov	r2, r8
 8019330:	6921      	ldr	r1, [r4, #16]
 8019332:	9001      	str	r0, [sp, #4]
 8019334:	f7f9 ff09 	bl	801314a <memcpy>
 8019338:	89a2      	ldrh	r2, [r4, #12]
 801933a:	9b01      	ldr	r3, [sp, #4]
 801933c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8019340:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019344:	81a2      	strh	r2, [r4, #12]
 8019346:	6123      	str	r3, [r4, #16]
 8019348:	6165      	str	r5, [r4, #20]
 801934a:	4443      	add	r3, r8
 801934c:	eba5 0508 	sub.w	r5, r5, r8
 8019350:	6023      	str	r3, [r4, #0]
 8019352:	60a5      	str	r5, [r4, #8]
 8019354:	463b      	mov	r3, r7
 8019356:	42bb      	cmp	r3, r7
 8019358:	bf28      	it	cs
 801935a:	463b      	movcs	r3, r7
 801935c:	461a      	mov	r2, r3
 801935e:	4659      	mov	r1, fp
 8019360:	6820      	ldr	r0, [r4, #0]
 8019362:	9301      	str	r3, [sp, #4]
 8019364:	f7f9 fefc 	bl	8013160 <memmove>
 8019368:	68a2      	ldr	r2, [r4, #8]
 801936a:	9b01      	ldr	r3, [sp, #4]
 801936c:	1ad2      	subs	r2, r2, r3
 801936e:	60a2      	str	r2, [r4, #8]
 8019370:	6822      	ldr	r2, [r4, #0]
 8019372:	4413      	add	r3, r2
 8019374:	6023      	str	r3, [r4, #0]
 8019376:	68b3      	ldr	r3, [r6, #8]
 8019378:	1bdf      	subs	r7, r3, r7
 801937a:	60b7      	str	r7, [r6, #8]
 801937c:	2f00      	cmp	r7, #0
 801937e:	d1d1      	bne.n	8019324 <__ssprint_r+0x72>
 8019380:	2000      	movs	r0, #0
 8019382:	6070      	str	r0, [r6, #4]
 8019384:	b003      	add	sp, #12
 8019386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801938a:	462a      	mov	r2, r5
 801938c:	4648      	mov	r0, r9
 801938e:	f7f9 ff87 	bl	80132a0 <_realloc_r>
 8019392:	4603      	mov	r3, r0
 8019394:	2800      	cmp	r0, #0
 8019396:	d1d6      	bne.n	8019346 <__ssprint_r+0x94>
 8019398:	6921      	ldr	r1, [r4, #16]
 801939a:	4648      	mov	r0, r9
 801939c:	f7fe fece 	bl	801813c <_free_r>
 80193a0:	e7b3      	b.n	801930a <__ssprint_r+0x58>

080193a2 <__sprint_r>:
 80193a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a6:	6893      	ldr	r3, [r2, #8]
 80193a8:	4680      	mov	r8, r0
 80193aa:	460f      	mov	r7, r1
 80193ac:	4614      	mov	r4, r2
 80193ae:	b91b      	cbnz	r3, 80193b8 <__sprint_r+0x16>
 80193b0:	6053      	str	r3, [r2, #4]
 80193b2:	4618      	mov	r0, r3
 80193b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80193ba:	049d      	lsls	r5, r3, #18
 80193bc:	d520      	bpl.n	8019400 <__sprint_r+0x5e>
 80193be:	6815      	ldr	r5, [r2, #0]
 80193c0:	68a0      	ldr	r0, [r4, #8]
 80193c2:	3508      	adds	r5, #8
 80193c4:	b918      	cbnz	r0, 80193ce <__sprint_r+0x2c>
 80193c6:	2300      	movs	r3, #0
 80193c8:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80193cc:	e7f2      	b.n	80193b4 <__sprint_r+0x12>
 80193ce:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 80193d2:	f04f 0900 	mov.w	r9, #0
 80193d6:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80193da:	45ca      	cmp	sl, r9
 80193dc:	dc05      	bgt.n	80193ea <__sprint_r+0x48>
 80193de:	68a3      	ldr	r3, [r4, #8]
 80193e0:	f026 0603 	bic.w	r6, r6, #3
 80193e4:	1b9e      	subs	r6, r3, r6
 80193e6:	60a6      	str	r6, [r4, #8]
 80193e8:	e7ea      	b.n	80193c0 <__sprint_r+0x1e>
 80193ea:	463a      	mov	r2, r7
 80193ec:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80193f0:	4640      	mov	r0, r8
 80193f2:	f000 f97a 	bl	80196ea <_fputwc_r>
 80193f6:	1c43      	adds	r3, r0, #1
 80193f8:	d0e5      	beq.n	80193c6 <__sprint_r+0x24>
 80193fa:	f109 0901 	add.w	r9, r9, #1
 80193fe:	e7ec      	b.n	80193da <__sprint_r+0x38>
 8019400:	f7f9 fa14 	bl	801282c <__sfvwrite_r>
 8019404:	e7df      	b.n	80193c6 <__sprint_r+0x24>

08019406 <__swbuf_r>:
 8019406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019408:	460d      	mov	r5, r1
 801940a:	4614      	mov	r4, r2
 801940c:	4606      	mov	r6, r0
 801940e:	b118      	cbz	r0, 8019418 <__swbuf_r+0x12>
 8019410:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019412:	b90b      	cbnz	r3, 8019418 <__swbuf_r+0x12>
 8019414:	f7fe fe02 	bl	801801c <__sinit>
 8019418:	69a3      	ldr	r3, [r4, #24]
 801941a:	60a3      	str	r3, [r4, #8]
 801941c:	89a3      	ldrh	r3, [r4, #12]
 801941e:	0719      	lsls	r1, r3, #28
 8019420:	d528      	bpl.n	8019474 <__swbuf_r+0x6e>
 8019422:	6923      	ldr	r3, [r4, #16]
 8019424:	b333      	cbz	r3, 8019474 <__swbuf_r+0x6e>
 8019426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801942a:	b2ed      	uxtb	r5, r5
 801942c:	049a      	lsls	r2, r3, #18
 801942e:	462f      	mov	r7, r5
 8019430:	d52a      	bpl.n	8019488 <__swbuf_r+0x82>
 8019432:	6923      	ldr	r3, [r4, #16]
 8019434:	6820      	ldr	r0, [r4, #0]
 8019436:	1ac0      	subs	r0, r0, r3
 8019438:	6963      	ldr	r3, [r4, #20]
 801943a:	4283      	cmp	r3, r0
 801943c:	dc04      	bgt.n	8019448 <__swbuf_r+0x42>
 801943e:	4621      	mov	r1, r4
 8019440:	4630      	mov	r0, r6
 8019442:	f7fe fd7f 	bl	8017f44 <_fflush_r>
 8019446:	b9d8      	cbnz	r0, 8019480 <__swbuf_r+0x7a>
 8019448:	68a3      	ldr	r3, [r4, #8]
 801944a:	3b01      	subs	r3, #1
 801944c:	60a3      	str	r3, [r4, #8]
 801944e:	6823      	ldr	r3, [r4, #0]
 8019450:	1c5a      	adds	r2, r3, #1
 8019452:	6022      	str	r2, [r4, #0]
 8019454:	701d      	strb	r5, [r3, #0]
 8019456:	6963      	ldr	r3, [r4, #20]
 8019458:	3001      	adds	r0, #1
 801945a:	4283      	cmp	r3, r0
 801945c:	d004      	beq.n	8019468 <__swbuf_r+0x62>
 801945e:	89a3      	ldrh	r3, [r4, #12]
 8019460:	07db      	lsls	r3, r3, #31
 8019462:	d50f      	bpl.n	8019484 <__swbuf_r+0x7e>
 8019464:	2d0a      	cmp	r5, #10
 8019466:	d10d      	bne.n	8019484 <__swbuf_r+0x7e>
 8019468:	4621      	mov	r1, r4
 801946a:	4630      	mov	r0, r6
 801946c:	f7fe fd6a 	bl	8017f44 <_fflush_r>
 8019470:	b140      	cbz	r0, 8019484 <__swbuf_r+0x7e>
 8019472:	e005      	b.n	8019480 <__swbuf_r+0x7a>
 8019474:	4621      	mov	r1, r4
 8019476:	4630      	mov	r0, r6
 8019478:	f7fd fe2a 	bl	80170d0 <__swsetup_r>
 801947c:	2800      	cmp	r0, #0
 801947e:	d0d2      	beq.n	8019426 <__swbuf_r+0x20>
 8019480:	f04f 37ff 	mov.w	r7, #4294967295
 8019484:	4638      	mov	r0, r7
 8019486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801948c:	81a3      	strh	r3, [r4, #12]
 801948e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019494:	6663      	str	r3, [r4, #100]	; 0x64
 8019496:	e7cc      	b.n	8019432 <__swbuf_r+0x2c>

08019498 <__ascii_wctomb>:
 8019498:	b149      	cbz	r1, 80194ae <__ascii_wctomb+0x16>
 801949a:	2aff      	cmp	r2, #255	; 0xff
 801949c:	bf85      	ittet	hi
 801949e:	238a      	movhi	r3, #138	; 0x8a
 80194a0:	6003      	strhi	r3, [r0, #0]
 80194a2:	700a      	strbls	r2, [r1, #0]
 80194a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80194a8:	bf98      	it	ls
 80194aa:	2001      	movls	r0, #1
 80194ac:	4770      	bx	lr
 80194ae:	4608      	mov	r0, r1
 80194b0:	4770      	bx	lr
	...

080194b4 <__register_exitproc>:
 80194b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194b8:	4c26      	ldr	r4, [pc, #152]	; (8019554 <__register_exitproc+0xa0>)
 80194ba:	4606      	mov	r6, r0
 80194bc:	6820      	ldr	r0, [r4, #0]
 80194be:	4698      	mov	r8, r3
 80194c0:	460f      	mov	r7, r1
 80194c2:	4691      	mov	r9, r2
 80194c4:	f7f9 fb7e 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 80194c8:	4b23      	ldr	r3, [pc, #140]	; (8019558 <__register_exitproc+0xa4>)
 80194ca:	681d      	ldr	r5, [r3, #0]
 80194cc:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 80194d0:	b918      	cbnz	r0, 80194da <__register_exitproc+0x26>
 80194d2:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 80194d6:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80194da:	6843      	ldr	r3, [r0, #4]
 80194dc:	2b1f      	cmp	r3, #31
 80194de:	dd19      	ble.n	8019514 <__register_exitproc+0x60>
 80194e0:	4b1e      	ldr	r3, [pc, #120]	; (801955c <__register_exitproc+0xa8>)
 80194e2:	b933      	cbnz	r3, 80194f2 <__register_exitproc+0x3e>
 80194e4:	6820      	ldr	r0, [r4, #0]
 80194e6:	f7f9 fb6e 	bl	8012bc6 <__retarget_lock_release_recursive>
 80194ea:	f04f 30ff 	mov.w	r0, #4294967295
 80194ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80194f6:	f7f9 fbd3 	bl	8012ca0 <malloc>
 80194fa:	2800      	cmp	r0, #0
 80194fc:	d0f2      	beq.n	80194e4 <__register_exitproc+0x30>
 80194fe:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8019502:	6003      	str	r3, [r0, #0]
 8019504:	2200      	movs	r2, #0
 8019506:	6042      	str	r2, [r0, #4]
 8019508:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 801950c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8019510:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8019514:	6843      	ldr	r3, [r0, #4]
 8019516:	b19e      	cbz	r6, 8019540 <__register_exitproc+0x8c>
 8019518:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 801951c:	2201      	movs	r2, #1
 801951e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8019522:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8019526:	409a      	lsls	r2, r3
 8019528:	4311      	orrs	r1, r2
 801952a:	2e02      	cmp	r6, #2
 801952c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8019530:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8019534:	bf02      	ittt	eq
 8019536:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 801953a:	430a      	orreq	r2, r1
 801953c:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8019540:	1c5a      	adds	r2, r3, #1
 8019542:	3302      	adds	r3, #2
 8019544:	6042      	str	r2, [r0, #4]
 8019546:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 801954a:	6820      	ldr	r0, [r4, #0]
 801954c:	f7f9 fb3b 	bl	8012bc6 <__retarget_lock_release_recursive>
 8019550:	2000      	movs	r0, #0
 8019552:	e7cc      	b.n	80194ee <__register_exitproc+0x3a>
 8019554:	20000c40 	.word	0x20000c40
 8019558:	0801cc08 	.word	0x0801cc08
 801955c:	08012ca1 	.word	0x08012ca1

08019560 <_calloc_r>:
 8019560:	b510      	push	{r4, lr}
 8019562:	4351      	muls	r1, r2
 8019564:	f7f9 fbac 	bl	8012cc0 <_malloc_r>
 8019568:	4604      	mov	r4, r0
 801956a:	b198      	cbz	r0, 8019594 <_calloc_r+0x34>
 801956c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019570:	f022 0203 	bic.w	r2, r2, #3
 8019574:	3a04      	subs	r2, #4
 8019576:	2a24      	cmp	r2, #36	; 0x24
 8019578:	d81b      	bhi.n	80195b2 <_calloc_r+0x52>
 801957a:	2a13      	cmp	r2, #19
 801957c:	d917      	bls.n	80195ae <_calloc_r+0x4e>
 801957e:	2100      	movs	r1, #0
 8019580:	2a1b      	cmp	r2, #27
 8019582:	e9c0 1100 	strd	r1, r1, [r0]
 8019586:	d807      	bhi.n	8019598 <_calloc_r+0x38>
 8019588:	f100 0308 	add.w	r3, r0, #8
 801958c:	2200      	movs	r2, #0
 801958e:	e9c3 2200 	strd	r2, r2, [r3]
 8019592:	609a      	str	r2, [r3, #8]
 8019594:	4620      	mov	r0, r4
 8019596:	bd10      	pop	{r4, pc}
 8019598:	2a24      	cmp	r2, #36	; 0x24
 801959a:	e9c0 1102 	strd	r1, r1, [r0, #8]
 801959e:	bf11      	iteee	ne
 80195a0:	f100 0310 	addne.w	r3, r0, #16
 80195a4:	6101      	streq	r1, [r0, #16]
 80195a6:	f100 0318 	addeq.w	r3, r0, #24
 80195aa:	6141      	streq	r1, [r0, #20]
 80195ac:	e7ee      	b.n	801958c <_calloc_r+0x2c>
 80195ae:	4603      	mov	r3, r0
 80195b0:	e7ec      	b.n	801958c <_calloc_r+0x2c>
 80195b2:	2100      	movs	r1, #0
 80195b4:	f7f9 fded 	bl	8013192 <memset>
 80195b8:	e7ec      	b.n	8019594 <_calloc_r+0x34>

080195ba <_fclose_r>:
 80195ba:	b570      	push	{r4, r5, r6, lr}
 80195bc:	4606      	mov	r6, r0
 80195be:	460c      	mov	r4, r1
 80195c0:	b911      	cbnz	r1, 80195c8 <_fclose_r+0xe>
 80195c2:	2500      	movs	r5, #0
 80195c4:	4628      	mov	r0, r5
 80195c6:	bd70      	pop	{r4, r5, r6, pc}
 80195c8:	b118      	cbz	r0, 80195d2 <_fclose_r+0x18>
 80195ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80195cc:	b90b      	cbnz	r3, 80195d2 <_fclose_r+0x18>
 80195ce:	f7fe fd25 	bl	801801c <__sinit>
 80195d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195d4:	07d8      	lsls	r0, r3, #31
 80195d6:	d405      	bmi.n	80195e4 <_fclose_r+0x2a>
 80195d8:	89a3      	ldrh	r3, [r4, #12]
 80195da:	0599      	lsls	r1, r3, #22
 80195dc:	d402      	bmi.n	80195e4 <_fclose_r+0x2a>
 80195de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195e0:	f7f9 faf0 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 80195e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195e8:	b93b      	cbnz	r3, 80195fa <_fclose_r+0x40>
 80195ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80195ec:	f015 0501 	ands.w	r5, r5, #1
 80195f0:	d1e7      	bne.n	80195c2 <_fclose_r+0x8>
 80195f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195f4:	f7f9 fae7 	bl	8012bc6 <__retarget_lock_release_recursive>
 80195f8:	e7e4      	b.n	80195c4 <_fclose_r+0xa>
 80195fa:	4621      	mov	r1, r4
 80195fc:	4630      	mov	r0, r6
 80195fe:	f7fe fc13 	bl	8017e28 <__sflush_r>
 8019602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019604:	4605      	mov	r5, r0
 8019606:	b133      	cbz	r3, 8019616 <_fclose_r+0x5c>
 8019608:	69e1      	ldr	r1, [r4, #28]
 801960a:	4630      	mov	r0, r6
 801960c:	4798      	blx	r3
 801960e:	2800      	cmp	r0, #0
 8019610:	bfb8      	it	lt
 8019612:	f04f 35ff 	movlt.w	r5, #4294967295
 8019616:	89a3      	ldrh	r3, [r4, #12]
 8019618:	061a      	lsls	r2, r3, #24
 801961a:	d503      	bpl.n	8019624 <_fclose_r+0x6a>
 801961c:	6921      	ldr	r1, [r4, #16]
 801961e:	4630      	mov	r0, r6
 8019620:	f7fe fd8c 	bl	801813c <_free_r>
 8019624:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019626:	b141      	cbz	r1, 801963a <_fclose_r+0x80>
 8019628:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801962c:	4299      	cmp	r1, r3
 801962e:	d002      	beq.n	8019636 <_fclose_r+0x7c>
 8019630:	4630      	mov	r0, r6
 8019632:	f7fe fd83 	bl	801813c <_free_r>
 8019636:	2300      	movs	r3, #0
 8019638:	6323      	str	r3, [r4, #48]	; 0x30
 801963a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801963c:	b121      	cbz	r1, 8019648 <_fclose_r+0x8e>
 801963e:	4630      	mov	r0, r6
 8019640:	f7fe fd7c 	bl	801813c <_free_r>
 8019644:	2300      	movs	r3, #0
 8019646:	6463      	str	r3, [r4, #68]	; 0x44
 8019648:	f7fe fcd0 	bl	8017fec <__sfp_lock_acquire>
 801964c:	2300      	movs	r3, #0
 801964e:	81a3      	strh	r3, [r4, #12]
 8019650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019652:	07db      	lsls	r3, r3, #31
 8019654:	d402      	bmi.n	801965c <_fclose_r+0xa2>
 8019656:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019658:	f7f9 fab5 	bl	8012bc6 <__retarget_lock_release_recursive>
 801965c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801965e:	f7f9 fab0 	bl	8012bc2 <__retarget_lock_close_recursive>
 8019662:	f7fe fcc9 	bl	8017ff8 <__sfp_lock_release>
 8019666:	e7ad      	b.n	80195c4 <_fclose_r+0xa>

08019668 <__fputwc>:
 8019668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801966c:	4680      	mov	r8, r0
 801966e:	460e      	mov	r6, r1
 8019670:	4614      	mov	r4, r2
 8019672:	f7ff f973 	bl	801895c <__locale_mb_cur_max>
 8019676:	2801      	cmp	r0, #1
 8019678:	d11c      	bne.n	80196b4 <__fputwc+0x4c>
 801967a:	1e73      	subs	r3, r6, #1
 801967c:	2bfe      	cmp	r3, #254	; 0xfe
 801967e:	d819      	bhi.n	80196b4 <__fputwc+0x4c>
 8019680:	f88d 6004 	strb.w	r6, [sp, #4]
 8019684:	4605      	mov	r5, r0
 8019686:	2700      	movs	r7, #0
 8019688:	f10d 0904 	add.w	r9, sp, #4
 801968c:	42af      	cmp	r7, r5
 801968e:	d020      	beq.n	80196d2 <__fputwc+0x6a>
 8019690:	68a3      	ldr	r3, [r4, #8]
 8019692:	f817 1009 	ldrb.w	r1, [r7, r9]
 8019696:	3b01      	subs	r3, #1
 8019698:	2b00      	cmp	r3, #0
 801969a:	60a3      	str	r3, [r4, #8]
 801969c:	da04      	bge.n	80196a8 <__fputwc+0x40>
 801969e:	69a2      	ldr	r2, [r4, #24]
 80196a0:	4293      	cmp	r3, r2
 80196a2:	db1a      	blt.n	80196da <__fputwc+0x72>
 80196a4:	290a      	cmp	r1, #10
 80196a6:	d018      	beq.n	80196da <__fputwc+0x72>
 80196a8:	6823      	ldr	r3, [r4, #0]
 80196aa:	1c5a      	adds	r2, r3, #1
 80196ac:	6022      	str	r2, [r4, #0]
 80196ae:	7019      	strb	r1, [r3, #0]
 80196b0:	3701      	adds	r7, #1
 80196b2:	e7eb      	b.n	801968c <__fputwc+0x24>
 80196b4:	4632      	mov	r2, r6
 80196b6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80196ba:	a901      	add	r1, sp, #4
 80196bc:	4640      	mov	r0, r8
 80196be:	f000 f83d 	bl	801973c <_wcrtomb_r>
 80196c2:	1c42      	adds	r2, r0, #1
 80196c4:	4605      	mov	r5, r0
 80196c6:	d1de      	bne.n	8019686 <__fputwc+0x1e>
 80196c8:	89a3      	ldrh	r3, [r4, #12]
 80196ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196ce:	81a3      	strh	r3, [r4, #12]
 80196d0:	4606      	mov	r6, r0
 80196d2:	4630      	mov	r0, r6
 80196d4:	b003      	add	sp, #12
 80196d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196da:	4622      	mov	r2, r4
 80196dc:	4640      	mov	r0, r8
 80196de:	f7ff fe92 	bl	8019406 <__swbuf_r>
 80196e2:	1c43      	adds	r3, r0, #1
 80196e4:	d1e4      	bne.n	80196b0 <__fputwc+0x48>
 80196e6:	4606      	mov	r6, r0
 80196e8:	e7f3      	b.n	80196d2 <__fputwc+0x6a>

080196ea <_fputwc_r>:
 80196ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80196ec:	07db      	lsls	r3, r3, #31
 80196ee:	b570      	push	{r4, r5, r6, lr}
 80196f0:	4605      	mov	r5, r0
 80196f2:	460e      	mov	r6, r1
 80196f4:	4614      	mov	r4, r2
 80196f6:	d405      	bmi.n	8019704 <_fputwc_r+0x1a>
 80196f8:	8993      	ldrh	r3, [r2, #12]
 80196fa:	0598      	lsls	r0, r3, #22
 80196fc:	d402      	bmi.n	8019704 <_fputwc_r+0x1a>
 80196fe:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8019700:	f7f9 fa60 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 8019704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019708:	0499      	lsls	r1, r3, #18
 801970a:	d406      	bmi.n	801971a <_fputwc_r+0x30>
 801970c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019710:	81a3      	strh	r3, [r4, #12]
 8019712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019718:	6663      	str	r3, [r4, #100]	; 0x64
 801971a:	4622      	mov	r2, r4
 801971c:	4628      	mov	r0, r5
 801971e:	4631      	mov	r1, r6
 8019720:	f7ff ffa2 	bl	8019668 <__fputwc>
 8019724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019726:	07da      	lsls	r2, r3, #31
 8019728:	4605      	mov	r5, r0
 801972a:	d405      	bmi.n	8019738 <_fputwc_r+0x4e>
 801972c:	89a3      	ldrh	r3, [r4, #12]
 801972e:	059b      	lsls	r3, r3, #22
 8019730:	d402      	bmi.n	8019738 <_fputwc_r+0x4e>
 8019732:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019734:	f7f9 fa47 	bl	8012bc6 <__retarget_lock_release_recursive>
 8019738:	4628      	mov	r0, r5
 801973a:	bd70      	pop	{r4, r5, r6, pc}

0801973c <_wcrtomb_r>:
 801973c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801973e:	4c0f      	ldr	r4, [pc, #60]	; (801977c <_wcrtomb_r+0x40>)
 8019740:	6824      	ldr	r4, [r4, #0]
 8019742:	b085      	sub	sp, #20
 8019744:	4605      	mov	r5, r0
 8019746:	461e      	mov	r6, r3
 8019748:	6b64      	ldr	r4, [r4, #52]	; 0x34
 801974a:	b981      	cbnz	r1, 801976e <_wcrtomb_r+0x32>
 801974c:	4a0c      	ldr	r2, [pc, #48]	; (8019780 <_wcrtomb_r+0x44>)
 801974e:	2c00      	cmp	r4, #0
 8019750:	bf08      	it	eq
 8019752:	4614      	moveq	r4, r2
 8019754:	460a      	mov	r2, r1
 8019756:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 801975a:	a901      	add	r1, sp, #4
 801975c:	47a0      	blx	r4
 801975e:	1c43      	adds	r3, r0, #1
 8019760:	bf01      	itttt	eq
 8019762:	2300      	moveq	r3, #0
 8019764:	6033      	streq	r3, [r6, #0]
 8019766:	238a      	moveq	r3, #138	; 0x8a
 8019768:	602b      	streq	r3, [r5, #0]
 801976a:	b005      	add	sp, #20
 801976c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801976e:	4f04      	ldr	r7, [pc, #16]	; (8019780 <_wcrtomb_r+0x44>)
 8019770:	2c00      	cmp	r4, #0
 8019772:	bf08      	it	eq
 8019774:	463c      	moveq	r4, r7
 8019776:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 801977a:	e7ef      	b.n	801975c <_wcrtomb_r+0x20>
 801977c:	20000404 	.word	0x20000404
 8019780:	20000c44 	.word	0x20000c44

08019784 <_init>:
 8019784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019786:	bf00      	nop
 8019788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801978a:	bc08      	pop	{r3}
 801978c:	469e      	mov	lr, r3
 801978e:	4770      	bx	lr

08019790 <_fini>:
 8019790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019792:	bf00      	nop
 8019794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019796:	bc08      	pop	{r3}
 8019798:	469e      	mov	lr, r3
 801979a:	4770      	bx	lr
